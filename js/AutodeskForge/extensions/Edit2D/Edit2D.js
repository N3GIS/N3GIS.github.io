/*!
 * LMV v7.105.0
 *
 * Copyright 2025 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@adsk/solid-definition/dist/solid-definition.min.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@adsk/solid-definition/dist/solid-definition.min.js ***!
  \**************************************************************************/
/***/ (function(module, exports) {

eval("!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports[\"solid-definition\"]=t():e.SolidDefinition=t()}(\"undefined\"!=typeof self?self:this,(()=>(()=>{var __webpack_modules__={1972:function(e){var t;\"undefined\"!=typeof self&&self,t=function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=5)}([function(e,t,r){\"use strict\";t.b=1e-12,t.a=1e-6},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(3);return e[0]=0,e[1]=0,e[2]=0,e},createFloat64:function(){var e=new Float64Array(3);return e[0]=0,e[1]=0,e[2]=0,e},createNumber:function(){return[0,0,0]},clone:function(e){var t=new e.constructor(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},createFloat32FromValues:function(e,t,r){var o=new Float32Array(3);return o[0]=e,o[1]=t,o[2]=r,o}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t,r){var o=new Float64Array(3);return o[0]=e,o[1]=t,o[2]=r,o},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t,r){return[e,t,r]},i.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},i.set=function(e,t,r,o){return e[0]=t,e[1]=r,e[2]=o,e},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e},i.sub=i.subtract,i.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e},i.mul=i.multiply,i.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e},i.div=i.divide,i.ceil=function(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e},i.floor=function(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e},i.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e},i.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e},i.round=function(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e},i.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e},i.scaleAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e[2]=t[2]+r[2]*o,e},i.distance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(r*r+o*o+i*i)},i.dist=i.distance,i.squaredDistance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return r*r+o*o+i*i},i.sqrDist=i.squaredDistance,i.length=function(e){var t=e[0],r=e[1],o=e[2];return Math.sqrt(t*t+r*r+o*o)},i.len=i.length,i.squaredLength=function(e){var t=e[0],r=e[1],o=e[2];return t*t+r*r+o*o},i.sqrLen=i.squaredLength,i.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},i.inverse=function(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e},i.normalize=function(e,t){var r=t[0],o=t[1],i=t[2],n=r*r+o*o+i*i;return n>0&&(n=1/Math.sqrt(n),e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n),e},i.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},i.cross=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=r[0],a=r[1],c=r[2];return e[0]=i*c-n*a,e[1]=n*s-o*c,e[2]=o*a-i*s,e},i.lerp=function(e,t,r,o){var i=t[0],n=t[1],s=t[2];return e[0]=i+o*(r[0]-i),e[1]=n+o*(r[1]-n),e[2]=s+o*(r[2]-s),e},i.hermite=function(e,t,r,o,i,n){var s=n*n,a=s*(2*n-3)+1,c=s*(n-2)+n,u=s*(n-1),l=s*(3-2*n);return e[0]=t[0]*a+r[0]*c+o[0]*u+i[0]*l,e[1]=t[1]*a+r[1]*c+o[1]*u+i[1]*l,e[2]=t[2]*a+r[2]*c+o[2]*u+i[2]*l,e},i.bezier=function(e,t,r,o,i,n){var s=1-n,a=s*s,c=n*n,u=a*s,l=3*n*a,h=3*c*s,d=c*n;return e[0]=t[0]*u+r[0]*l+o[0]*h+i[0]*d,e[1]=t[1]*u+r[1]*l+o[1]*h+i[1]*d,e[2]=t[2]*u+r[2]*l+o[2]*h+i[2]*d,e},i.random=function(e,t){t=t||1;var r=2*Math.random()*Math.PI,o=2*Math.random()-1,i=Math.sqrt(1-o*o)*t;return e[0]=Math.cos(r)*i,e[1]=Math.sin(r)*i,e[2]=o*t,e},i.transformMatrix44=function(e,t,r){var o=t[0],i=t[1],n=t[2];return e[0]=r[0]*o+r[4]*i+r[8]*n+r[12],e[1]=r[1]*o+r[5]*i+r[9]*n+r[13],e[2]=r[2]*o+r[6]*i+r[10]*n+r[14],e},i.transformAsDirectionMatrix44=function(e,t,r){var o=t[0],i=t[1],n=t[2];return e[0]=r[0]*o+r[4]*i+r[8]*n,e[1]=r[1]*o+r[5]*i+r[9]*n,e[2]=r[2]*o+r[6]*i+r[10]*n,e},i.transformMatrix33=function(e,t,r){var o=t[0],i=t[1],n=t[2];return e[0]=o*r[0]+i*r[3]+n*r[6],e[1]=o*r[1]+i*r[4]+n*r[7],e[2]=o*r[2]+i*r[5]+n*r[8],e},i.transformQuat=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=r[0],a=r[1],c=r[2],u=r[3],l=u*o+a*n-c*i,h=u*i+c*o-s*n,d=u*n+s*i-a*o,p=-s*o-a*i-c*n;return e[0]=l*u+p*-s+h*-c-d*-a,e[1]=h*u+p*-a+d*-s-l*-c,e[2]=d*u+p*-c+l*-a-h*-s,e},i.setFromMatrixScale=function(e,t){var r=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]),o=Math.sqrt(t[4]*t[4]+t[5]*t[5]+t[6]*t[6]),i=Math.sqrt(t[8]*t[8]+t[9]*t[9]+t[10]*t[10]);return e[0]=r,e[1]=o,e[2]=i,e},i.rotateX=function(e,t,r,o){var i=[],n=[];return i[0]=t[0]-r[0],i[1]=t[1]-r[1],i[2]=t[2]-r[2],n[0]=i[0],n[1]=i[1]*Math.cos(o)-i[2]*Math.sin(o),n[2]=i[1]*Math.sin(o)+i[2]*Math.cos(o),e[0]=n[0]+r[0],e[1]=n[1]+r[1],e[2]=n[2]+r[2],e},i.rotateY=function(e,t,r,o){var i=[],n=[];return i[0]=t[0]-r[0],i[1]=t[1]-r[1],i[2]=t[2]-r[2],n[0]=i[2]*Math.sin(o)+i[0]*Math.cos(o),n[1]=i[1],n[2]=i[2]*Math.cos(o)-i[0]*Math.sin(o),e[0]=n[0]+r[0],e[1]=n[1]+r[1],e[2]=n[2]+r[2],e},i.rotateZ=function(e,t,r,o){var i=[],n=[];return i[0]=t[0]-r[0],i[1]=t[1]-r[1],i[2]=t[2]-r[2],n[0]=i[0]*Math.cos(o)-i[1]*Math.sin(o),n[1]=i[0]*Math.sin(o)+i[1]*Math.cos(o),n[2]=i[2],e[0]=n[0]+r[0],e[1]=n[1]+r[1],e[2]=n[2]+r[2],e},i.angle=function(e,t){var r=i.clone(e),o=i.clone(t);i.normalize(r,r),i.normalize(o,o);var n=i.dot(r,o),s=i.length(i.cross(r,r,o));return Math.atan2(s,n)},i.isParallel=function(e,t,r,n){n=n||o.b,r=r||0;var s=i.createFloat64();return i.cross(s,e,t),!(i.squaredLength(s)>n*n*i.squaredLength(e)*i.squaredLength(t))&&(r>0?i.dot(e,t)>0:!(r<0)||i.dot(e,t)<0)},i.isOrthogonal=function(e,t,r){r=r||o.b;var n=i.dot(e,t);return n*n<=r*r*i.squaredLength(e)*i.squaredLength(t)},i.computeOrthogonal=function(e,t){return t[0]*t[0]>t[2]*t[2]?i.set(e,t[1],-t[0],0):i.set(e,0,t[2],-t[1]),e},i.setEulerFromRotationMatrix=function(e,t,r){var i=1-o.b;function n(e){return Math.min(Math.max(e,-1),1)}var s=t[0],a=t[4],c=t[8],u=t[1],l=t[5],h=t[9],d=t[2],p=t[6],g=t[10];return void 0===r||\"XYZ\"===r?(e[1]=Math.asin(n(c)),Math.abs(c)<i?(e[0]=Math.atan2(-h,g),e[2]=Math.atan2(-a,s)):(e[0]=Math.atan2(p,l),e[2]=0)):\"YXZ\"===r?(e[0]=Math.asin(-n(h)),Math.abs(h)<i?(e[1]=Math.atan2(c,g),e[2]=Math.atan2(u,l)):(e[1]=Math.atan2(-d,s),e[2]=0)):\"ZXY\"===r?(e[0]=Math.asin(n(p)),Math.abs(p)<i?(e[1]=Math.atan2(-d,g),e[2]=Math.atan2(-a,l)):(e[1]=0,e[2]=Math.atan2(u,s))):\"ZYX\"===r?(e[1]=Math.asin(-n(d)),Math.abs(d)<i?(e[0]=Math.atan2(p,g),e[2]=Math.atan2(u,s)):(e[0]=0,e[2]=Math.atan2(-a,l))):\"YZX\"===r?(e[2]=Math.asin(n(u)),Math.abs(u)<i?(e[0]=Math.atan2(-h,l),e[1]=Math.atan2(-d,s)):(e[0]=0,e[1]=Math.atan2(c,g))):\"XZY\"===r&&(e[2]=Math.asin(-n(a)),Math.abs(a)<i?(e[0]=Math.atan2(p,l),e[1]=Math.atan2(c,s)):(e[0]=Math.atan2(-h,g),e[1]=0)),e},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\"]\"},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r&&Math.abs(e[2]-t[2])<=r},t.a=i},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e},createFloat64:function(){var e=new Float64Array(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e},createNumber:function(){return[0,0,0,0]},clone:function(e){var t=new e.constructor(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},createFloat32FromValues:function(e,t,r,o){var i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=o,i}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t,r,o){var i=new Float64Array(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=o,i},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t,r,o){return[e,t,r,o]},i.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},i.set=function(e,t,r,o,i){return e[0]=t,e[1]=r,e[2]=o,e[3]=i,e},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e},i.sub=i.subtract,i.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e[3]=t[3]*r[3],e},i.mul=i.multiply,i.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e[3]=t[3]/r[3],e},i.div=i.divide,i.ceil=function(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e},i.floor=function(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e},i.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e[3]=Math.min(t[3],r[3]),e},i.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e[3]=Math.max(t[3],r[3]),e},i.round=function(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e},i.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e},i.scaleAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e[2]=t[2]+r[2]*o,e[3]=t[3]+r[3]*o,e},i.distance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2],n=t[3]-e[3];return Math.sqrt(r*r+o*o+i*i+n*n)},i.dist=i.distance,i.squaredDistance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2],n=t[3]-e[3];return r*r+o*o+i*i+n*n},i.sqrDist=i.squaredDistance,i.length=function(e){var t=e[0],r=e[1],o=e[2],i=e[3];return Math.sqrt(t*t+r*r+o*o+i*i)},i.len=i.length,i.squaredLength=function(e){var t=e[0],r=e[1],o=e[2],i=e[3];return t*t+r*r+o*o+i*i},i.sqrLen=i.squaredLength,i.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},i.inverse=function(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e},i.normalize=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r*r+o*o+i*i+n*n;return s>0&&(s=1/Math.sqrt(s),e[0]=r*s,e[1]=o*s,e[2]=i*s,e[3]=n*s),e},i.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},i.lerp=function(e,t,r,o){var i=t[0],n=t[1],s=t[2],a=t[3];return e[0]=i+o*(r[0]-i),e[1]=n+o*(r[1]-n),e[2]=s+o*(r[2]-s),e[3]=a+o*(r[3]-a),e},i.random=function(e,t){return t=t||1,e[0]=Math.random(),e[1]=Math.random(),e[2]=Math.random(),e[3]=Math.random(),i.normalize(e,e),i.scale(e,e,t),e},i.transformMatrix44=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3];return e[0]=r[0]*o+r[4]*i+r[8]*n+r[12]*s,e[1]=r[1]*o+r[5]*i+r[9]*n+r[13]*s,e[2]=r[2]*o+r[6]*i+r[10]*n+r[14]*s,e[3]=r[3]*o+r[7]*i+r[11]*n+r[15]*s,e},i.transformQuat=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=r[0],a=r[1],c=r[2],u=r[3],l=u*o+a*n-c*i,h=u*i+c*o-s*n,d=u*n+s*i-a*o,p=-s*o-a*i-c*n;return e[0]=l*u+p*-s+h*-c-d*-a,e[1]=h*u+p*-a+d*-s-l*-c,e[2]=d*u+p*-c+l*-a-h*-s,e[3]=t[3],e},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\"]\"},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r&&Math.abs(e[2]-t[2])<=r&&Math.abs(e[2]-t[2])<=r},t.a=i},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(9);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},createFloat64:function(){var e=new Float64Array(9);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},createNumber:function(){return[1,0,0,0,1,0,0,0,1]},fromMatrix44:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e},clone:function(e){var t=new e.constructor(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},copy:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},createFloat32FromValues:function(e,t,r,o,i,n,s,a,c){var u=new Float32Array(9);return u[0]=e,u[1]=t,u[2]=r,u[3]=o,u[4]=i,u[5]=n,u[6]=s,u[7]=a,u[8]=c,u}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t,r,o,i,n,s,a,c){var u=new Float64Array(9);return u[0]=e,u[1]=t,u[2]=r,u[3]=o,u[4]=i,u[5]=n,u[6]=s,u[7]=a,u[8]=c,u},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t,r,o,i,n,s,a,c){return[e,t,r,o,i,n,s,a,c]},i.set=function(e,t,r,o,i,n,s,a,c,u){return e[0]=t,e[1]=r,e[2]=o,e[3]=i,e[4]=n,e[5]=s,e[6]=a,e[7]=c,e[8]=u,e},i.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},i.transpose=function(e,t){if(e===t){var r=t[1],o=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=o,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e},i.invert=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=t[4],a=t[5],c=t[6],u=t[7],l=t[8],h=l*s-a*u,d=-l*n+a*c,p=u*n-s*c,g=r*h+o*d+i*p;return g?(g=1/g,e[0]=h*g,e[1]=(-l*o+i*u)*g,e[2]=(a*o-i*s)*g,e[3]=d*g,e[4]=(l*r-i*c)*g,e[5]=(-a*r+i*n)*g,e[6]=p*g,e[7]=(-u*r+o*c)*g,e[8]=(s*r-o*n)*g,e):null},i.determinant=function(e){var t=e[0],r=e[1],o=e[2],i=e[3],n=e[4],s=e[5],a=e[6],c=e[7],u=e[8];return t*(u*n-s*c)+r*(-u*i+s*a)+o*(c*i-n*a)},i.multiply=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=t[8],d=r[0],p=r[1],g=r[2],f=r[3],v=r[4],_=r[5],y=r[6],m=r[7],E=r[8];return e[0]=d*o+p*s+g*u,e[1]=d*i+p*a+g*l,e[2]=d*n+p*c+g*h,e[3]=f*o+v*s+_*u,e[4]=f*i+v*a+_*l,e[5]=f*n+v*c+_*h,e[6]=y*o+m*s+E*u,e[7]=y*i+m*a+E*l,e[8]=y*n+m*c+E*h,e},i.mul=i.multiply,i.fromTranslation=function(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e},i.fromRotation=function(e,t){var r=Math.sin(t),o=Math.cos(t);return e[0]=o,e[1]=r,e[2]=0,e[3]=-r,e[4]=o,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},i.fromScaling=function(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},i.fromQuat=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r+r,a=o+o,c=i+i,u=r*s,l=o*s,h=o*a,d=i*s,p=i*a,g=i*c,f=n*s,v=n*a,_=n*c;return e[0]=1-h-g,e[3]=l-_,e[6]=d+v,e[1]=l+_,e[4]=1-u-g,e[7]=p-f,e[2]=d-v,e[5]=p+f,e[8]=1-u-h,e},i.normalFromMatrix44=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=t[4],a=t[5],c=t[6],u=t[7],l=t[8],h=t[9],d=t[10],p=t[11],g=t[12],f=t[13],v=t[14],_=t[15],y=r*a-o*s,m=r*c-i*s,E=r*u-n*s,x=o*c-i*a,R=o*u-n*a,A=i*u-n*c,P=l*f-h*g,V=l*v-d*g,T=l*_-p*g,b=h*v-d*f,C=h*_-p*f,O=d*_-p*v,L=y*O-m*C+E*b+x*T-R*V+A*P;return L?(L=1/L,e[0]=(a*O-c*C+u*b)*L,e[1]=(c*T-s*O-u*V)*L,e[2]=(s*C-a*T+u*P)*L,e[3]=(i*C-o*O-n*b)*L,e[4]=(r*O-i*T+n*V)*L,e[5]=(o*T-r*C-n*P)*L,e[6]=(f*A-v*R+_*x)*L,e[7]=(v*E-g*A-_*m)*L,e[8]=(g*R-f*E+_*y)*L,e):null},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\", \"+e[4]+\", \"+e[5]+\", \"+e[6]+\", \"+e[7]+\", \"+e[8]+\"]\"},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e},i.sub=i.subtract,i.multiplyScalar=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e},i.multiplyScalarAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e[2]=t[2]+r[2]*o,e[3]=t[3]+r[3]*o,e[4]=t[4]+r[4]*o,e[5]=t[5]+r[5]*o,e[6]=t[6]+r[6]*o,e[7]=t[7]+r[7]*o,e[8]=t[8]+r[8]*o,e},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r&&Math.abs(e[2]-t[2])<=r&&Math.abs(e[3]-t[3])<=r&&Math.abs(e[4]-t[4])<=r&&Math.abs(e[5]-t[5])<=r&&Math.abs(e[6]-t[6])<=r&&Math.abs(e[7]-t[7])<=r&&Math.abs(e[8]-t[8])<=r},t.a=i},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(16);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},createFloat64:function(){var e=new Float64Array(16);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},createNumber:function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},clone:function(e){var t=new e.constructor(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},copy:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},createFloat32FromValues:function(e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f){var v=new Float32Array(16);return v[0]=e,v[1]=t,v[2]=r,v[3]=o,v[4]=i,v[5]=n,v[6]=s,v[7]=a,v[8]=c,v[9]=u,v[10]=l,v[11]=h,v[12]=d,v[13]=p,v[14]=g,v[15]=f,v}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f){var v=new Float64Array(16);return v[0]=e,v[1]=t,v[2]=r,v[3]=o,v[4]=i,v[5]=n,v[6]=s,v[7]=a,v[8]=c,v[9]=u,v[10]=l,v[11]=h,v[12]=d,v[13]=p,v[14]=g,v[15]=f,v},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f){return[e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f]},i.set=function(e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f,v){return e[0]=t,e[1]=r,e[2]=o,e[3]=i,e[4]=n,e[5]=s,e[6]=a,e[7]=c,e[8]=u,e[9]=l,e[10]=h,e[11]=d,e[12]=p,e[13]=g,e[14]=f,e[15]=v,e},i.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.transpose=function(e,t){if(e===t){var r=t[1],o=t[2],i=t[3],n=t[6],s=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=o,e[9]=n,e[11]=t[14],e[12]=i,e[13]=s,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e},i.invert=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=t[4],a=t[5],c=t[6],u=t[7],l=t[8],h=t[9],d=t[10],p=t[11],g=t[12],f=t[13],v=t[14],_=t[15],y=r*a-o*s,m=r*c-i*s,E=r*u-n*s,x=o*c-i*a,R=o*u-n*a,A=i*u-n*c,P=l*f-h*g,V=l*v-d*g,T=l*_-p*g,b=h*v-d*f,C=h*_-p*f,O=d*_-p*v,L=y*O-m*C+E*b+x*T-R*V+A*P;return L?(L=1/L,e[0]=(a*O-c*C+u*b)*L,e[1]=(i*C-o*O-n*b)*L,e[2]=(f*A-v*R+_*x)*L,e[3]=(d*R-h*A-p*x)*L,e[4]=(c*T-s*O-u*V)*L,e[5]=(r*O-i*T+n*V)*L,e[6]=(v*E-g*A-_*m)*L,e[7]=(l*A-d*E+p*m)*L,e[8]=(s*C-a*T+u*P)*L,e[9]=(o*T-r*C-n*P)*L,e[10]=(g*R-f*E+_*y)*L,e[11]=(h*E-l*R-p*y)*L,e[12]=(a*V-s*b-c*P)*L,e[13]=(r*b-o*V+i*P)*L,e[14]=(f*m-g*x-v*y)*L,e[15]=(l*x-h*m+d*y)*L,e):null},i.determinant=function(e){var t=e[0],r=e[1],o=e[2],i=e[3],n=e[4],s=e[5],a=e[6],c=e[7],u=e[8],l=e[9],h=e[10],d=e[11],p=e[12],g=e[13],f=e[14],v=e[15];return(t*s-r*n)*(h*v-d*f)-(t*a-o*n)*(l*v-d*g)+(t*c-i*n)*(l*f-h*g)+(r*a-o*s)*(u*v-d*p)-(r*c-i*s)*(u*f-h*p)+(o*c-i*a)*(u*g-l*p)},i.multiply=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=t[4],c=t[5],u=t[6],l=t[7],h=t[8],d=t[9],p=t[10],g=t[11],f=t[12],v=t[13],_=t[14],y=t[15],m=r[0],E=r[1],x=r[2],R=r[3];return e[0]=m*o+E*a+x*h+R*f,e[1]=m*i+E*c+x*d+R*v,e[2]=m*n+E*u+x*p+R*_,e[3]=m*s+E*l+x*g+R*y,m=r[4],E=r[5],x=r[6],R=r[7],e[4]=m*o+E*a+x*h+R*f,e[5]=m*i+E*c+x*d+R*v,e[6]=m*n+E*u+x*p+R*_,e[7]=m*s+E*l+x*g+R*y,m=r[8],E=r[9],x=r[10],R=r[11],e[8]=m*o+E*a+x*h+R*f,e[9]=m*i+E*c+x*d+R*v,e[10]=m*n+E*u+x*p+R*_,e[11]=m*s+E*l+x*g+R*y,m=r[12],E=r[13],x=r[14],R=r[15],e[12]=m*o+E*a+x*h+R*f,e[13]=m*i+E*c+x*d+R*v,e[14]=m*n+E*u+x*p+R*_,e[15]=m*s+E*l+x*g+R*y,e},i.mul=i.multiply,i.fromTranslation=function(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},i.fromScaling=function(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.fromRotation=function(e,t,r){var i,n,s,a=r[0],c=r[1],u=r[2],l=Math.sqrt(a*a+c*c+u*u);return Math.abs(l)<o.b?null:(a*=l=1/l,c*=l,u*=l,i=Math.sin(t),s=1-(n=Math.cos(t)),e[0]=a*a*s+n,e[1]=c*a*s+u*i,e[2]=u*a*s-c*i,e[3]=0,e[4]=a*c*s-u*i,e[5]=c*c*s+n,e[6]=u*c*s+a*i,e[7]=0,e[8]=a*u*s+c*i,e[9]=c*u*s-a*i,e[10]=u*u*s+n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)},i.fromXRotation=function(e,t){var r=Math.sin(t),o=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=r,e[7]=0,e[8]=0,e[9]=-r,e[10]=o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.fromYRotation=function(e,t){var r=Math.sin(t),o=Math.cos(t);return e[0]=o,e[1]=0,e[2]=-r,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=r,e[9]=0,e[10]=o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.fromZRotation=function(e,t){var r=Math.sin(t),o=Math.cos(t);return e[0]=o,e[1]=r,e[2]=0,e[3]=0,e[4]=-r,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.fromRotationTranslation=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=o+o,c=i+i,u=n+n,l=o*a,h=o*c,d=o*u,p=i*c,g=i*u,f=n*u,v=s*a,_=s*c,y=s*u;return e[0]=1-(p+f),e[1]=h+y,e[2]=d-_,e[3]=0,e[4]=h-y,e[5]=1-(l+f),e[6]=g+v,e[7]=0,e[8]=d+_,e[9]=g-v,e[10]=1-(l+p),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e},i.getTranslation=function(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e},i.extractRotation=function(e,t){var r=1/Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]),o=1/Math.sqrt(t[4]*t[4]+t[5]*t[5]+t[6]*t[6]),i=1/Math.sqrt(t[8]*t[8]+t[9]*t[9]+t[10]*t[10]);return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=0,e[4]=t[4]*o,e[5]=t[5]*o,e[6]=t[6]*o,e[7]=0,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},i.getRotation=function(e,t){var r=t[0]+t[5]+t[10],o=0;return r>0?(o=2*Math.sqrt(r+1),e[3]=.25*o,e[0]=(t[6]-t[9])/o,e[1]=(t[8]-t[2])/o,e[2]=(t[1]-t[4])/o):t[0]>t[5]&&t[0]>t[10]?(o=2*Math.sqrt(1+t[0]-t[5]-t[10]),e[3]=(t[6]-t[9])/o,e[0]=.25*o,e[1]=(t[1]+t[4])/o,e[2]=(t[8]+t[2])/o):t[5]>t[10]?(o=2*Math.sqrt(1+t[5]-t[0]-t[10]),e[3]=(t[8]-t[2])/o,e[0]=(t[1]+t[4])/o,e[1]=.25*o,e[2]=(t[6]+t[9])/o):(o=2*Math.sqrt(1+t[10]-t[0]-t[5]),e[3]=(t[1]-t[4])/o,e[0]=(t[8]+t[2])/o,e[1]=(t[6]+t[9])/o,e[2]=.25*o),e},i.fromRotationTranslationScale=function(e,t,r,o){var i=t[0],n=t[1],s=t[2],a=t[3],c=i+i,u=n+n,l=s+s,h=i*c,d=i*u,p=i*l,g=n*u,f=n*l,v=s*l,_=a*c,y=a*u,m=a*l,E=o[0],x=o[1],R=o[2];return e[0]=(1-(g+v))*E,e[1]=(d+m)*E,e[2]=(p-y)*E,e[3]=0,e[4]=(d-m)*x,e[5]=(1-(h+v))*x,e[6]=(f+_)*x,e[7]=0,e[8]=(p+y)*R,e[9]=(f-_)*R,e[10]=(1-(h+g))*R,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e},i.fromRotationTranslationScaleOrigin=function(e,t,r,o,i){var n=t[0],s=t[1],a=t[2],c=t[3],u=n+n,l=s+s,h=a+a,d=n*u,p=n*l,g=n*h,f=s*l,v=s*h,_=a*h,y=c*u,m=c*l,E=c*h,x=o[0],R=o[1],A=o[2],P=i[0],V=i[1],T=i[2];return e[0]=(1-(f+_))*x,e[1]=(p+E)*x,e[2]=(g-m)*x,e[3]=0,e[4]=(p-E)*R,e[5]=(1-(d+_))*R,e[6]=(v+y)*R,e[7]=0,e[8]=(g+m)*A,e[9]=(v-y)*A,e[10]=(1-(d+f))*A,e[11]=0,e[12]=r[0]+P-(e[0]*P+e[4]*V+e[8]*T),e[13]=r[1]+V-(e[1]*P+e[5]*V+e[9]*T),e[14]=r[2]+T-(e[2]*P+e[6]*V+e[10]*T),e[15]=1,e},i.fromQuat=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r+r,a=o+o,c=i+i,u=r*s,l=o*s,h=o*a,d=i*s,p=i*a,g=i*c,f=n*s,v=n*a,_=n*c;return e[0]=1-h-g,e[1]=l+_,e[2]=d-v,e[3]=0,e[4]=l-_,e[5]=1-u-g,e[6]=p+f,e[7]=0,e[8]=d+v,e[9]=p-f,e[10]=1-u-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},i.setRotationFromEuler=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=Math.cos(o),a=Math.sin(o),c=Math.cos(i),u=Math.sin(i),l=Math.cos(n),h=Math.sin(n);if(void 0===r||\"XYZ\"===r){var d=s*l,p=s*h,g=a*l,f=a*h;e[0]=c*l,e[4]=-c*h,e[8]=u,e[1]=p+g*u,e[5]=d-f*u,e[9]=-a*c,e[2]=f-d*u,e[6]=g+p*u,e[10]=s*c}else if(\"YXZ\"===r){var v=c*l,_=c*h,y=u*l,m=u*h;e[0]=v+m*a,e[4]=y*a-_,e[8]=s*u,e[1]=s*h,e[5]=s*l,e[9]=-a,e[2]=_*a-y,e[6]=m+v*a,e[10]=s*c}else if(\"ZXY\"===r)v=c*l,_=c*h,y=u*l,m=u*h,e[0]=v-m*a,e[4]=-s*h,e[8]=y+_*a,e[1]=_+y*a,e[5]=s*l,e[9]=m-v*a,e[2]=-s*u,e[6]=a,e[10]=s*c;else if(\"ZYX\"===r)d=s*l,p=s*h,g=a*l,f=a*h,e[0]=c*l,e[4]=g*u-p,e[8]=d*u+f,e[1]=c*h,e[5]=f*u+d,e[9]=p*u-g,e[2]=-u,e[6]=a*c,e[10]=s*c;else if(\"YZX\"===r){var E=s*c,x=s*u,R=a*c,A=a*u;e[0]=c*l,e[4]=A-E*h,e[8]=R*h+x,e[1]=h,e[5]=s*l,e[9]=-a*l,e[2]=-u*l,e[6]=x*h+R,e[10]=E-A*h}else\"XZY\"===r&&(E=s*c,x=s*u,R=a*c,A=a*u,e[0]=c*l,e[4]=-h,e[8]=u*l,e[1]=E*h+A,e[5]=s*l,e[9]=x*h-R,e[2]=R*h-x,e[6]=a*l,e[10]=A*h+E);return e},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\", \"+e[4]+\", \"+e[5]+\", \"+e[6]+\", \"+e[7]+\", \"+e[8]+\", \"+e[9]+\", \"+e[10]+\", \"+e[11]+\", \"+e[12]+\", \"+e[13]+\", \"+e[14]+\", \"+e[15]+\"]\"},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e},i.sub=i.subtract,i.multiplyScalar=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e},i.multiplyScalarAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e[2]=t[2]+r[2]*o,e[3]=t[3]+r[3]*o,e[4]=t[4]+r[4]*o,e[5]=t[5]+r[5]*o,e[6]=t[6]+r[6]*o,e[7]=t[7]+r[7]*o,e[8]=t[8]+r[8]*o,e[9]=t[9]+r[9]*o,e[10]=t[10]+r[10]*o,e[11]=t[11]+r[11]*o,e[12]=t[12]+r[12]*o,e[13]=t[13]+r[13]*o,e[14]=t[14]+r[14]*o,e[15]=t[15]+r[15]*o,e},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r&&Math.abs(e[2]-t[2])<=r&&Math.abs(e[3]-t[3])<=r&&Math.abs(e[4]-t[4])<=r&&Math.abs(e[5]-t[5])<=r&&Math.abs(e[6]-t[6])<=r&&Math.abs(e[7]-t[7])<=r&&Math.abs(e[8]-t[8])<=r&&Math.abs(e[9]-t[9])<=r&&Math.abs(e[10]-t[10])<=r&&Math.abs(e[11]-t[11])<=r&&Math.abs(e[12]-t[12])<=r&&Math.abs(e[13]-t[13])<=r&&Math.abs(e[14]-t[14])<=r&&Math.abs(e[15]-t[15])<=r},t.a=i},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var o=r(6),i=r(1),n=r(2),s=r(7),a=r(3),c=r(4),u=r(8),l=r(9),h=r(0);r.d(t,\"Vector2\",(function(){return o.a})),r.d(t,\"Vector3\",(function(){return i.a})),r.d(t,\"Vector4\",(function(){return n.a})),r.d(t,\"Matrix22\",(function(){return s.a})),r.d(t,\"Matrix33\",(function(){return a.a})),r.d(t,\"Matrix44\",(function(){return c.a})),r.d(t,\"Quat\",(function(){return u.a})),r.d(t,\"ProjectionUtils\",(function(){return l.a})),r.d(t,\"FLOAT64_TOLERANCE\",(function(){return h.b})),r.d(t,\"FLOAT32_TOLERANCE\",(function(){return h.a})),t.default={Vector2:o.a,Vector3:i.a,Vector4:n.a,Matrix22:s.a,Matrix33:a.a,Matrix44:c.a,Quat:u.a,ProjectionUtils:l.a,FLOAT64_TOLERANCE:h.b,FLOAT32_TOLERANCE:h.a}},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(2);return e[0]=0,e[1]=0,e},createFloat64:function(){var e=new Float64Array(2);return e[0]=0,e[1]=0,e},createNumber:function(){return[0,0]},clone:function(e){var t=new e.constructor(2);return t[0]=e[0],t[1]=e[1],t},createFloat32FromValues:function(e,t){var r=new Float32Array(2);return r[0]=e,r[1]=t,r}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t){var r=new Float64Array(2);return r[0]=e,r[1]=t,r},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t){return[e,t]},i.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e},i.set=function(e,t,r){return e[0]=t,e[1]=r,e},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e},i.sub=i.subtract,i.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e},i.mul=i.multiply,i.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e},i.div=i.divide,i.ceil=function(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e},i.floor=function(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e},i.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e},i.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e},i.round=function(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e},i.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e},i.scaleAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e},i.distance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1];return Math.sqrt(r*r+o*o)},i.dist=i.distance,i.squaredDistance=function(e,t){var r=t[0]-e[0],o=t[1]-e[1];return r*r+o*o},i.sqrDist=i.squaredDistance,i.length=function(e){var t=e[0],r=e[1];return Math.sqrt(t*t+r*r)},i.len=i.length,i.squaredLength=function(e){var t=e[0],r=e[1];return t*t+r*r},i.sqrLen=i.squaredLength,i.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e},i.inverse=function(e,t){return e[0]=1/t[0],e[1]=1/t[1],e},i.normalize=function(e,t){var r=t[0],o=t[1],i=r*r+o*o;return i>0&&(i=1/Math.sqrt(i),e[0]=t[0]*i,e[1]=t[1]*i),e},i.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]},i.cross=function(e,t,r){var o=t[0]*r[1]-t[1]*r[0];return e[0]=e[1]=0,e[2]=o,e},i.lerp=function(e,t,r,o){var i=t[0],n=t[1];return e[0]=i+o*(r[0]-i),e[1]=n+o*(r[1]-n),e},i.random=function(e,t){t=t||1;var r=2*Math.random()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e},i.transformMatrix22=function(e,t,r){var o=t[0],i=t[1];return e[0]=r[0]*o+r[2]*i,e[1]=r[1]*o+r[3]*i,e},i.transformMatrix33=function(e,t,r){var o=t[0],i=t[1];return e[0]=r[0]*o+r[3]*i+r[6],e[1]=r[1]*o+r[4]*i+r[7],e},i.transformMatrix44=function(e,t,r){var o=t[0],i=t[1];return e[0]=r[0]*o+r[4]*i+r[12],e[1]=r[1]*o+r[5]*i+r[13],e},i.angle=function(e,t){var r=i.clone(e),o=i.clone(t);i.normalize(r,r),i.normalize(o,o);var n=i.dot(r,o),s=Math.abs(r[0]*o[1]-r[1]*o[0]);return Math.atan2(s,n)},i.isParallel=function(e,t,r,n){n=n||o.b,r=r||0;var s=e[0]*t[1]-e[1]*t[0];return!(s*s>n*n*i.squaredLength(e)*i.squaredLength(t))&&(r>0?i.dot(e,t)>0:!(r<0)||i.dot(e,t)<0)},i.isOrthogonal=function(e,t,r){r=r||o.b;var n=i.dot(e,t);return n*n<=r*r*i.squaredLength(e)*i.squaredLength(t)},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\"]\"},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r},t.a=i},function(e,t,r){\"use strict\";var o=r(0),i={createFloat32:function(){var e=new Float32Array(4);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},createFloat64:function(){var e=new Float64Array(4);return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},createNumber:function(){return[1,0,0,1]},clone:function(e){var t=new e.constructor(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},copy:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},createFloat32FromValues:function(e,t,r,o){var i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=o,i}};i.asFloat32=i.createFloat32FromValues,i.createFloat64FromValues=function(e,t,r,o){var i=new Float64Array(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=o,i},i.asFloat64=i.createFloat64FromValues,i.createNumberFromValues=function(e,t,r,o){return[e,t,r,o]},i.set=function(e,t,r,o,i){return e[0]=t,e[1]=r,e[2]=o,e[3]=i,e},i.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},i.transpose=function(e,t){if(e===t){var r=t[1];e[1]=t[2],e[2]=r}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e},i.invert=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r*n-i*o;return s?(s=1/s,e[0]=n*s,e[1]=-o*s,e[2]=-i*s,e[3]=r*s,e):null},i.determinant=function(e){return e[0]*e[3]-e[2]*e[1]},i.multiply=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=r[0],c=r[1],u=r[2],l=r[3];return e[0]=o*a+n*c,e[1]=i*a+s*c,e[2]=o*u+n*l,e[3]=i*u+s*l,e},i.mul=i.multiply,i.scale=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=r[0],c=r[1];return e[0]=o*a,e[1]=i*a,e[2]=n*c,e[3]=s*c,e},i.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\"]\"},i.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e},i.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e},i.sub=i.subtract,i.multiplyScalar=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e},i.multiplyScalarAndAdd=function(e,t,r,o){return e[0]=t[0]+r[0]*o,e[1]=t[1]+r[1]*o,e[2]=t[2]+r[2]*o,e[3]=t[3]+r[3]*o,e},i.exactEquals=function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},i.equals=function(e,t,r){return r=r||o.b,Math.abs(e[0]-t[0])<=r&&Math.abs(e[1]-t[1])<=r&&Math.abs(e[2]-t[2])<=r&&Math.abs(e[3]-t[3])<=r},t.a=i},function(e,t,r){\"use strict\";var o,i,n,s,a,c,u=r(0),l=r(1),h=r(2),d=r(3),p={createFloat32:function(){var e=new Float32Array(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},createFloat64:function(){var e=new Float64Array(4);return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},createNumber:function(){return[0,0,0,1]}};p.rotationTo=(o=l.a.createFloat64(),i=l.a.createFloat64FromValues(1,0,0),n=l.a.createFloat64FromValues(0,1,0),function(e,t,r){var s=l.a.dot(t,r);return s<-1+u.b?(l.a.cross(o,i,t),l.a.length(o)<u.b&&l.a.cross(o,n,t),l.a.normalize(o,o),p.setAxisAngle(e,o,Math.PI),e):s>1-u.b?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(l.a.cross(o,t,r),e[0]=o[0],e[1]=o[1],e[2]=o[2],e[3]=1+s,p.normalize(e,e))}),p.setAxes=(s=d.a.createFloat64(),function(e,t,r,o){return s[0]=r[0],s[3]=r[1],s[6]=r[2],s[1]=o[0],s[4]=o[1],s[7]=o[2],s[2]=-t[0],s[5]=-t[1],s[8]=-t[2],p.normalize(e,p.fromMatrix33(e,s))}),p.clone=h.a.clone,p.createFloat32FromValues=h.a.createFloat32FromValues,p.createFloat64FromValues=h.a.createFloat64FromValues,p.createNumberFromValues=h.a.createNumberFromValues,p.asFloat32=h.a.createFloat32FromValues,p.asFloat64=h.a.createFloat64FromValues,p.copy=h.a.copy,p.set=h.a.set,p.identity=function(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},p.setAxisAngle=function(e,t,r){r*=.5;var o=Math.sin(r);return e[0]=o*t[0],e[1]=o*t[1],e[2]=o*t[2],e[3]=Math.cos(r),e},p.getAxisAngle=function(e,t){var r=2*Math.acos(t[3]),o=Math.sin(r/2);return 0!==o?(e[0]=t[0]/o,e[1]=t[1]/o,e[2]=t[2]/o):(e[0]=1,e[1]=0,e[2]=0),r},p.add=h.a.add,p.multiply=function(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=r[0],c=r[1],u=r[2],l=r[3];return e[0]=o*l+s*a+i*u-n*c,e[1]=i*l+s*c+n*a-o*u,e[2]=n*l+s*u+o*c-i*a,e[3]=s*l-o*a-i*c-n*u,e},p.mul=p.multiply,p.scale=h.a.scale,p.rotateX=function(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c+s*a,e[1]=i*c+n*a,e[2]=n*c-i*a,e[3]=s*c-o*a,e},p.rotateY=function(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c-n*a,e[1]=i*c+s*a,e[2]=n*c+o*a,e[3]=s*c-i*a,e},p.rotateZ=function(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c+i*a,e[1]=i*c-o*a,e[2]=n*c+s*a,e[3]=s*c-n*a,e},p.calculateW=function(e,t){var r=t[0],o=t[1],i=t[2];return e[0]=r,e[1]=o,e[2]=i,e[3]=Math.sqrt(Math.abs(1-r*r-o*o-i*i)),e},p.dot=h.a.dot,p.lerp=h.a.lerp,p.slerp=function(e,t,r,o){var i,n,s,a,c,l=t[0],h=t[1],d=t[2],p=t[3],g=r[0],f=r[1],v=r[2],_=r[3];return(n=l*g+h*f+d*v+p*_)<0&&(n=-n,g=-g,f=-f,v=-v,_=-_),1-n>u.b?(i=Math.acos(n),s=Math.sin(i),a=Math.sin((1-o)*i)/s,c=Math.sin(o*i)/s):(a=1-o,c=o),e[0]=a*l+c*g,e[1]=a*h+c*f,e[2]=a*d+c*v,e[3]=a*p+c*_,e},p.sqlerp=(a=p.createFloat64(),c=p.createFloat64(),function(e,t,r,o,i,n){return p.slerp(a,t,i,n),p.slerp(c,r,o,n),p.slerp(e,a,c,2*n*(1-n)),e}),p.invert=function(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r*r+o*o+i*i+n*n,a=s?1/s:0;return e[0]=-r*a,e[1]=-o*a,e[2]=-i*a,e[3]=n*a,e},p.conjugate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e},p.length=h.a.length,p.len=p.length,p.squaredLength=h.a.squaredLength,p.sqrLen=p.squaredLength,p.normalize=h.a.normalize,p.fromMatrix33=function(e,t){var r,o=t[0]+t[4]+t[8];if(o>0)r=Math.sqrt(o+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{var i=0;t[4]>t[0]&&(i=1),t[8]>t[3*i+i]&&(i=2);var n=(i+1)%3,s=(i+2)%3;r=Math.sqrt(t[3*i+i]-t[3*n+n]-t[3*s+s]+1),e[i]=.5*r,r=.5/r,e[3]=(t[3*n+s]-t[3*s+n])*r,e[n]=(t[3*n+i]+t[3*i+n])*r,e[s]=(t[3*s+i]+t[3*i+s])*r}return e},p.toString=function(e){return\"[\"+e[0]+\", \"+e[1]+\", \"+e[2]+\", \"+e[3]+\"]\"},p.exactEquals=h.a.exactEquals,p.equals=h.a.equals,t.a=p},function(e,t,r){\"use strict\";var o=r(0),i=r(4),n={frustum:function(e,t,r,o,i,n,s){var a=1/(r-t),c=1/(i-o),u=1/(n-s);return e[0]=2*n*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*n*c,e[6]=0,e[7]=0,e[8]=(r+t)*a,e[9]=(i+o)*c,e[10]=(s+n)*u,e[11]=-1,e[12]=0,e[13]=0,e[14]=s*n*2*u,e[15]=0,e},perspective:function(e,t,r,o,i){var n=1/Math.tan(t/2),s=1/(o-i);return e[0]=n/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=n,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(i+o)*s,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*i*o*s,e[15]=0,e},ortho:function(e,t,r,o,i,n,s){var a=1/(t-r),c=1/(o-i),u=1/(n-s);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*c,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(i+o)*c,e[14]=(s+n)*u,e[15]=1,e},lookAt:function(e,t,r,n){var s,a,c,u,l,h,d,p,g,f,v=t[0],_=t[1],y=t[2],m=n[0],E=n[1],x=n[2],R=r[0],A=r[1],P=r[2];return Math.abs(v-R)<o.b&&Math.abs(_-A)<o.b&&Math.abs(y-P)<o.b?i.a.identity(e):(d=v-R,p=_-A,g=y-P,s=E*(g*=f=1/Math.sqrt(d*d+p*p+g*g))-x*(p*=f),a=x*(d*=f)-m*g,c=m*p-E*d,(f=Math.sqrt(s*s+a*a+c*c))?(s*=f=1/f,a*=f,c*=f):(s=0,a=0,c=0),u=p*c-g*a,l=g*s-d*c,h=d*a-p*s,(f=Math.sqrt(u*u+l*l+h*h))?(u*=f=1/f,l*=f,h*=f):(u=0,l=0,h=0),e[0]=s,e[1]=u,e[2]=d,e[3]=0,e[4]=a,e[5]=l,e[6]=p,e[7]=0,e[8]=c,e[9]=h,e[10]=g,e[11]=0,e[12]=-(s*v+a*_+c*y),e[13]=-(u*v+l*_+h*y),e[14]=-(d*v+p*_+g*y),e[15]=1,e)},transformProjectionMatrix:function(e,t,r){var o=t[0],i=t[1],n=t[2],s=r[3]*o+r[7]*i+r[11]*n+r[15];return s=s||1,e[0]=(r[0]*o+r[4]*i+r[8]*n+r[12])/s,e[1]=(r[1]*o+r[5]*i+r[9]*n+r[13])/s,e[2]=(r[2]*o+r[6]*i+r[10]*n+r[14])/s,e}};t.a=n}])},e.exports=t()},5320:e=>{\"use strict\";e.exports=function(e,t){var r=new Array(arguments.length-1),o=0,i=2,n=!0;for(;i<arguments.length;)r[o++]=arguments[i++];return new Promise((function(i,s){r[o]=function(e){if(n)if(n=!1,e)s(e);else{for(var t=new Array(arguments.length-1),r=0;r<t.length;)t[r++]=arguments[r];i.apply(null,t)}};try{e.apply(t||null,r)}catch(e){n&&(n=!1,s(e))}}))}},752:(e,t)=>{\"use strict\";var r=t;r.length=function(e){var t=e.length;if(!t)return 0;for(var r=0;--t%4>1&&\"=\"===e.charAt(t);)++r;return Math.ceil(3*e.length)/4-r};for(var o=new Array(64),i=new Array(123),n=0;n<64;)i[o[n]=n<26?n+65:n<52?n+71:n<62?n-4:n-59|43]=n++;r.encode=function(e,t,r){for(var i,n=null,s=[],a=0,c=0;t<r;){var u=e[t++];switch(c){case 0:s[a++]=o[u>>2],i=(3&u)<<4,c=1;break;case 1:s[a++]=o[i|u>>4],i=(15&u)<<2,c=2;break;case 2:s[a++]=o[i|u>>6],s[a++]=o[63&u],c=0}a>8191&&((n||(n=[])).push(String.fromCharCode.apply(String,s)),a=0)}return c&&(s[a++]=o[i],s[a++]=61,1===c&&(s[a++]=61)),n?(a&&n.push(String.fromCharCode.apply(String,s.slice(0,a))),n.join(\"\")):String.fromCharCode.apply(String,s.slice(0,a))};var s=\"invalid encoding\";r.decode=function(e,t,r){for(var o,n=r,a=0,c=0;c<e.length;){var u=e.charCodeAt(c++);if(61===u&&a>1)break;if(void 0===(u=i[u]))throw Error(s);switch(a){case 0:o=u,a=1;break;case 1:t[r++]=o<<2|(48&u)>>4,o=u,a=2;break;case 2:t[r++]=(15&o)<<4|(60&u)>>2,o=u,a=3;break;case 3:t[r++]=(3&o)<<6|u,a=0}}if(1===a)throw Error(s);return r-n},r.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}},4824:e=>{\"use strict\";function t(e,r){\"string\"==typeof e&&(r=e,e=void 0);var o=[];function i(e){if(\"string\"!=typeof e){var r=n();if(t.verbose&&console.log(\"codegen: \"+r),r=\"return \"+r,e){for(var s=Object.keys(e),a=new Array(s.length+1),c=new Array(s.length),u=0;u<s.length;)a[u]=s[u],c[u]=e[s[u++]];return a[u]=r,Function.apply(null,a).apply(null,c)}return Function(r)()}for(var l=new Array(arguments.length-1),h=0;h<l.length;)l[h]=arguments[++h];if(h=0,e=e.replace(/%([%dfijs])/g,(function(e,t){var r=l[h++];switch(t){case\"d\":case\"f\":return String(Number(r));case\"i\":return String(Math.floor(r));case\"j\":return JSON.stringify(r);case\"s\":return String(r)}return\"%\"})),h!==l.length)throw Error(\"parameter count mismatch\");return o.push(e),i}function n(t){return\"function \"+(t||r||\"\")+\"(\"+(e&&e.join(\",\")||\"\")+\"){\\n  \"+o.join(\"\\n  \")+\"\\n}\"}return i.toString=n,i}e.exports=t,t.verbose=!1},3947:e=>{\"use strict\";function t(){this._listeners={}}e.exports=t,t.prototype.on=function(e,t,r){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:r||this}),this},t.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var r=this._listeners[e],o=0;o<r.length;)r[o].fn===t?r.splice(o,1):++o;return this},t.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var r=[],o=1;o<arguments.length;)r.push(arguments[o++]);for(o=0;o<t.length;)t[o].fn.apply(t[o++].ctx,r)}return this}},1560:(e,t,r)=>{\"use strict\";e.exports=n;var o=r(5320),i=r(1528)(\"fs\");function n(e,t,r){return\"function\"==typeof t?(r=t,t={}):t||(t={}),r?!t.xhr&&i&&i.readFile?i.readFile(e,(function(o,i){return o&&\"undefined\"!=typeof XMLHttpRequest?n.xhr(e,t,r):o?r(o):r(null,t.binary?i:i.toString(\"utf8\"))})):n.xhr(e,t,r):o(n,this,e,t)}n.xhr=function(e,t,r){var o=new XMLHttpRequest;o.onreadystatechange=function(){if(4===o.readyState){if(0!==o.status&&200!==o.status)return r(Error(\"status \"+o.status));if(t.binary){var e=o.response;if(!e){e=[];for(var i=0;i<o.responseText.length;++i)e.push(255&o.responseText.charCodeAt(i))}return r(null,\"undefined\"!=typeof Uint8Array?new Uint8Array(e):e)}return r(null,o.responseText)}},t.binary&&(\"overrideMimeType\"in o&&o.overrideMimeType(\"text/plain; charset=x-user-defined\"),o.responseType=\"arraybuffer\"),o.open(\"GET\",e),o.send()}},3732:e=>{\"use strict\";function t(e){return\"undefined\"!=typeof Float32Array?function(){var t=new Float32Array([-0]),r=new Uint8Array(t.buffer),o=128===r[3];function i(e,o,i){t[0]=e,o[i]=r[0],o[i+1]=r[1],o[i+2]=r[2],o[i+3]=r[3]}function n(e,o,i){t[0]=e,o[i]=r[3],o[i+1]=r[2],o[i+2]=r[1],o[i+3]=r[0]}function s(e,o){return r[0]=e[o],r[1]=e[o+1],r[2]=e[o+2],r[3]=e[o+3],t[0]}function a(e,o){return r[3]=e[o],r[2]=e[o+1],r[1]=e[o+2],r[0]=e[o+3],t[0]}e.writeFloatLE=o?i:n,e.writeFloatBE=o?n:i,e.readFloatLE=o?s:a,e.readFloatBE=o?a:s}():function(){function t(e,t,r,o){var i=t<0?1:0;if(i&&(t=-t),0===t)e(1/t>0?0:2147483648,r,o);else if(isNaN(t))e(2143289344,r,o);else if(t>34028234663852886e22)e((i<<31|2139095040)>>>0,r,o);else if(t<11754943508222875e-54)e((i<<31|Math.round(t/1401298464324817e-60))>>>0,r,o);else{var n=Math.floor(Math.log(t)/Math.LN2);e((i<<31|n+127<<23|8388607&Math.round(t*Math.pow(2,-n)*8388608))>>>0,r,o)}}function s(e,t,r){var o=e(t,r),i=2*(o>>31)+1,n=o>>>23&255,s=8388607&o;return 255===n?s?NaN:i*(1/0):0===n?1401298464324817e-60*i*s:i*Math.pow(2,n-150)*(s+8388608)}e.writeFloatLE=t.bind(null,r),e.writeFloatBE=t.bind(null,o),e.readFloatLE=s.bind(null,i),e.readFloatBE=s.bind(null,n)}(),\"undefined\"!=typeof Float64Array?function(){var t=new Float64Array([-0]),r=new Uint8Array(t.buffer),o=128===r[7];function i(e,o,i){t[0]=e,o[i]=r[0],o[i+1]=r[1],o[i+2]=r[2],o[i+3]=r[3],o[i+4]=r[4],o[i+5]=r[5],o[i+6]=r[6],o[i+7]=r[7]}function n(e,o,i){t[0]=e,o[i]=r[7],o[i+1]=r[6],o[i+2]=r[5],o[i+3]=r[4],o[i+4]=r[3],o[i+5]=r[2],o[i+6]=r[1],o[i+7]=r[0]}function s(e,o){return r[0]=e[o],r[1]=e[o+1],r[2]=e[o+2],r[3]=e[o+3],r[4]=e[o+4],r[5]=e[o+5],r[6]=e[o+6],r[7]=e[o+7],t[0]}function a(e,o){return r[7]=e[o],r[6]=e[o+1],r[5]=e[o+2],r[4]=e[o+3],r[3]=e[o+4],r[2]=e[o+5],r[1]=e[o+6],r[0]=e[o+7],t[0]}e.writeDoubleLE=o?i:n,e.writeDoubleBE=o?n:i,e.readDoubleLE=o?s:a,e.readDoubleBE=o?a:s}():function(){function t(e,t,r,o,i,n){var s=o<0?1:0;if(s&&(o=-o),0===o)e(0,i,n+t),e(1/o>0?0:2147483648,i,n+r);else if(isNaN(o))e(0,i,n+t),e(2146959360,i,n+r);else if(o>17976931348623157e292)e(0,i,n+t),e((s<<31|2146435072)>>>0,i,n+r);else{var a;if(o<22250738585072014e-324)e((a=o/5e-324)>>>0,i,n+t),e((s<<31|a/4294967296)>>>0,i,n+r);else{var c=Math.floor(Math.log(o)/Math.LN2);1024===c&&(c=1023),e(4503599627370496*(a=o*Math.pow(2,-c))>>>0,i,n+t),e((s<<31|c+1023<<20|1048576*a&1048575)>>>0,i,n+r)}}}function s(e,t,r,o,i){var n=e(o,i+t),s=e(o,i+r),a=2*(s>>31)+1,c=s>>>20&2047,u=4294967296*(1048575&s)+n;return 2047===c?u?NaN:a*(1/0):0===c?5e-324*a*u:a*Math.pow(2,c-1075)*(u+4503599627370496)}e.writeDoubleLE=t.bind(null,r,0,4),e.writeDoubleBE=t.bind(null,o,4,0),e.readDoubleLE=s.bind(null,i,0,4),e.readDoubleBE=s.bind(null,n,4,0)}(),e}function r(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}function o(e,t,r){t[r]=e>>>24,t[r+1]=e>>>16&255,t[r+2]=e>>>8&255,t[r+3]=255&e}function i(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function n(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}e.exports=t(t)},1528:module=>{\"use strict\";function inquire(moduleName){try{var mod=eval(\"quire\".replace(/^/,\"re\"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}module.exports=inquire},7256:(e,t)=>{\"use strict\";var r=t,o=r.isAbsolute=function(e){return/^(?:\\/|\\w+:)/.test(e)},i=r.normalize=function(e){var t=(e=e.replace(/\\\\/g,\"/\").replace(/\\/{2,}/g,\"/\")).split(\"/\"),r=o(e),i=\"\";r&&(i=t.shift()+\"/\");for(var n=0;n<t.length;)\"..\"===t[n]?n>0&&\"..\"!==t[n-1]?t.splice(--n,2):r?t.splice(n,1):++n:\".\"===t[n]?t.splice(n,1):++n;return i+t.join(\"/\")};r.resolve=function(e,t,r){return r||(t=i(t)),o(t)?t:(r||(e=i(e)),(e=e.replace(/(?:\\/|^)[^/]+$/,\"\")).length?i(e+\"/\"+t):t)}},6264:e=>{\"use strict\";e.exports=function(e,t,r){var o=r||8192,i=o>>>1,n=null,s=o;return function(r){if(r<1||r>i)return e(r);s+r>o&&(n=e(o),s=0);var a=t.call(n,s,s+=r);return 7&s&&(s=1+(7|s)),a}}},1888:(e,t)=>{\"use strict\";var r=t;r.length=function(e){for(var t=0,r=0,o=0;o<e.length;++o)(r=e.charCodeAt(o))<128?t+=1:r<2048?t+=2:55296==(64512&r)&&56320==(64512&e.charCodeAt(o+1))?(++o,t+=4):t+=3;return t},r.read=function(e,t,r){if(r-t<1)return\"\";for(var o,i=null,n=[],s=0;t<r;)(o=e[t++])<128?n[s++]=o:o>191&&o<224?n[s++]=(31&o)<<6|63&e[t++]:o>239&&o<365?(o=((7&o)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,n[s++]=55296+(o>>10),n[s++]=56320+(1023&o)):n[s++]=(15&o)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,n)),s=0);return i?(s&&i.push(String.fromCharCode.apply(String,n.slice(0,s))),i.join(\"\")):String.fromCharCode.apply(String,n.slice(0,s))},r.write=function(e,t,r){for(var o,i,n=r,s=0;s<e.length;++s)(o=e.charCodeAt(s))<128?t[r++]=o:o<2048?(t[r++]=o>>6|192,t[r++]=63&o|128):55296==(64512&o)&&56320==(64512&(i=e.charCodeAt(s+1)))?(o=65536+((1023&o)<<10)+(1023&i),++s,t[r++]=o>>18|240,t[r++]=o>>12&63|128,t[r++]=o>>6&63|128,t[r++]=63&o|128):(t[r++]=o>>12|224,t[r++]=o>>6&63|128,t[r++]=63&o|128);return r-n}},9140:(e,t,r)=>{\"use strict\";var o,i,n;if(Object.defineProperty(t,\"__esModule\",{value:!0}),void 0===s)var s={},a={exports:{}};n=function(){return function e(t,r,o){function i(s,a){if(!r[s]){if(!t[s]){if(n)return n(s,!0);throw new Error(\"Cannot find module '\"+s+\"'\")}var c=r[s]={exports:{}};t[s][0].call(c.exports,(function(e){var r=t[s][1][e];return i(r||e)}),c,c.exports,e,t,r,o)}return r[s].exports}for(var n=void 0,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,r){t.exports={version:\"1.3.5\"}},{}],2:[function(e,t,r){var o=function(e,t){this.head_=e,this.tail_=t,this.search_node_=e};o.prototype.head=function(){return this.head_},o.prototype.setHead=function(e){this.head_=e},o.prototype.tail=function(){return this.tail_},o.prototype.setTail=function(e){this.tail_=e},o.prototype.search=function(){return this.search_node_},o.prototype.setSearch=function(e){this.search_node_=e},o.prototype.findSearchNode=function(){return this.search_node_},o.prototype.locateNode=function(e){var t=this.search_node_;if(e<t.value){for(;t=t.prev;)if(e>=t.value)return this.search_node_=t,t}else for(;t=t.next;)if(e<t.value)return this.search_node_=t.prev,t.prev;return null},o.prototype.locatePoint=function(e){var t=e.x,r=this.findSearchNode(t),o=r.point.x;if(t===o){if(e!==r.point)if(e===r.prev.point)r=r.prev;else{if(e!==r.next.point)throw new Error(\"poly2tri Invalid AdvancingFront.locatePoint() call\");r=r.next}}else if(t<o)for(;(r=r.prev)&&e!==r.point;);else for(;(r=r.next)&&e!==r.point;);return r&&(this.search_node_=r),r},t.exports=o,t.exports.Node=function(e,t){this.point=e,this.triangle=t||null,this.next=null,this.prev=null,this.value=e.x}},{}],3:[function(e,t,r){t.exports=function(e,t){if(!e)throw new Error(t||\"Assert Failed\")}},{}],4:[function(e,t,r){var o=e(\"./xy\"),i=function(e,t){this.x=+e||0,this.y=+t||0,this._p2t_edge_list=null};i.prototype.toString=function(){return o.toStringBase(this)},i.prototype.toJSON=function(){return{x:this.x,y:this.y}},i.prototype.clone=function(){return new i(this.x,this.y)},i.prototype.set_zero=function(){return this.x=0,this.y=0,this},i.prototype.set=function(e,t){return this.x=+e||0,this.y=+t||0,this},i.prototype.negate=function(){return this.x=-this.x,this.y=-this.y,this},i.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},i.prototype.sub=function(e){return this.x-=e.x,this.y-=e.y,this},i.prototype.mul=function(e){return this.x*=e,this.y*=e,this},i.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},i.prototype.normalize=function(){var e=this.length();return this.x/=e,this.y/=e,e},i.prototype.equals=function(e){return this.x===e.x&&this.y===e.y},i.negate=function(e){return new i(-e.x,-e.y)},i.add=function(e,t){return new i(e.x+t.x,e.y+t.y)},i.sub=function(e,t){return new i(e.x-t.x,e.y-t.y)},i.mul=function(e,t){return new i(e*t.x,e*t.y)},i.cross=function(e,t){return\"number\"==typeof e?\"number\"==typeof t?e*t:new i(-e*t.y,e*t.x):\"number\"==typeof t?new i(t*e.y,-t*e.x):e.x*t.y-e.y*t.x},i.toString=o.toString,i.compare=o.compare,i.cmp=o.compare,i.equals=o.equals,i.dot=function(e,t){return e.x*t.x+e.y*t.y},t.exports=i},{\"./xy\":11}],5:[function(e,t,r){var o=e(\"./xy\"),i=function(e,t){this.name=\"PointError\",this.points=t=t||[],this.message=e||\"Invalid Points!\";for(var r=0;r<t.length;r++)this.message+=\" \"+o.toString(t[r])};(i.prototype=new Error).constructor=i,t.exports=i},{\"./xy\":11}],6:[function(e,t,r){(function(t){var o=t.poly2tri;r.noConflict=function(){return t.poly2tri=o,r},r.VERSION=e(\"../dist/version.json\").version,r.PointError=e(\"./pointerror\"),r.Point=e(\"./point\"),r.Triangle=e(\"./triangle\"),r.SweepContext=e(\"./sweepcontext\");var i=e(\"./sweep\");r.triangulate=i.triangulate,r.sweep={Triangulate:i.triangulate}}).call(this,\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"../dist/version.json\":1,\"./point\":4,\"./pointerror\":5,\"./sweep\":7,\"./sweepcontext\":8,\"./triangle\":9}],7:[function(e,t,r){var o=e(\"./assert\"),i=e(\"./pointerror\"),n=e(\"./triangle\"),s=e(\"./advancingfront\").Node,a=e(\"./utils\"),c=a.EPSILON,u=a.Orientation,l=a.orient2d,h=a.inScanArea,d=a.isAngleObtuse;function p(e,t){var r=e.locateNode(t),i=function(e,t,r){var o=new n(t,r.point,r.next.point);o.markNeighbor(r.triangle),e.addToMap(o);var i=new s(t);return i.next=r.next,i.prev=r,r.next.prev=i,r.next=i,y(e,o)||e.mapTriangleToNodes(o),i}(e,t,r);return t.x<=r.point.x+c&&_(e,r),function(e,t){for(var r=t.next;r.next&&!d(r.point,r.next.point,r.prev.point);)_(e,r),r=r.next;for(r=t.prev;r.prev&&!d(r.point,r.next.point,r.prev.point);)_(e,r),r=r.prev;t.next&&t.next.next&&function(e){var t=e.point.x-e.next.next.point.x,r=e.point.y-e.next.next.point.y;return o(r>=0,\"unordered y\"),t>=0||Math.abs(t)<r}(t)&&function(e,t){for(l(t.point,t.next.point,t.next.next.point)===u.CCW?e.basin.left_node=t.next.next:e.basin.left_node=t.next,e.basin.bottom_node=e.basin.left_node;e.basin.bottom_node.next&&e.basin.bottom_node.point.y>=e.basin.bottom_node.next.point.y;)e.basin.bottom_node=e.basin.bottom_node.next;if(e.basin.bottom_node!==e.basin.left_node){for(e.basin.right_node=e.basin.bottom_node;e.basin.right_node.next&&e.basin.right_node.point.y<e.basin.right_node.next.point.y;)e.basin.right_node=e.basin.right_node.next;e.basin.right_node!==e.basin.bottom_node&&(e.basin.width=e.basin.right_node.point.x-e.basin.left_node.point.x,e.basin.left_highest=e.basin.left_node.point.y>e.basin.right_node.point.y,x(e,e.basin.bottom_node))}}(e,t)}(e,i),i}function g(e,t,r){e.edge_event.constrained_edge=t,e.edge_event.right=t.p.x>t.q.x,v(r.triangle,t.p,t.q)||(function(e,t,r){e.edge_event.right?function(e,t,r){for(;r.next.point.x<t.p.x;)l(t.q,r.next.point,t.p)===u.CCW?R(e,t,r):r=r.next}(e,t,r):function(e,t,r){for(;r.prev.point.x>t.p.x;)l(t.q,r.prev.point,t.p)===u.CW?V(e,t,r):r=r.prev}(e,t,r)}(e,t,r),f(e,t.p,t.q,r.triangle,t.q))}function f(e,t,r,o,n){if(!v(o,t,r)){var s=o.pointCCW(n),a=l(r,s,t);if(a===u.COLLINEAR)throw new i(\"poly2tri EdgeEvent: Collinear not supported!\",[r,s,t]);var c=o.pointCW(n),h=l(r,c,t);if(h===u.COLLINEAR)throw new i(\"poly2tri EdgeEvent: Collinear not supported!\",[r,c,t]);a===h?f(e,t,r,o=a===u.CW?o.neighborCCW(n):o.neighborCW(n),n):C(e,t,r,o,n)}}function v(e,t,r){var o=e.edgeIndex(t,r);if(-1!==o){e.markConstrainedEdgeByIndex(o);var i=e.getNeighbor(o);return i&&i.markConstrainedEdgeByPoints(t,r),!0}return!1}function _(e,t){var r=new n(t.prev.point,t.point,t.next.point);r.markNeighbor(t.prev.triangle),r.markNeighbor(t.triangle),e.addToMap(r),t.prev.next=t.next,t.next.prev=t.prev,y(e,r)||e.mapTriangleToNodes(r)}function y(e,t){for(var r=0;r<3;++r)if(!t.delaunay_edge[r]){var o=t.getNeighbor(r);if(o){var i=t.getPoint(r),n=o.oppositePoint(t,i),s=o.index(n);if(o.constrained_edge[s]||o.delaunay_edge[s]){t.constrained_edge[r]=o.constrained_edge[s];continue}if(m(i,t.pointCCW(i),t.pointCW(i),n)){t.delaunay_edge[r]=!0,o.delaunay_edge[s]=!0,E(t,i,o,n);var a=!y(e,t);return a&&e.mapTriangleToNodes(t),(a=!y(e,o))&&e.mapTriangleToNodes(o),t.delaunay_edge[r]=!1,o.delaunay_edge[s]=!1,!0}}}return!1}function m(e,t,r,o){var i=e.x-o.x,n=e.y-o.y,s=t.x-o.x,a=t.y-o.y,c=i*a-s*n;if(c<=0)return!1;var u=r.x-o.x,l=r.y-o.y,h=u*n-i*l;return!(h<=0)&&(i*i+n*n)*(s*l-u*a)+(s*s+a*a)*h+(u*u+l*l)*c>0}function E(e,t,r,o){var i,n,s,a,c,u,l,h,d,p,g,f;i=e.neighborCCW(t),n=e.neighborCW(t),s=r.neighborCCW(o),a=r.neighborCW(o),c=e.getConstrainedEdgeCCW(t),u=e.getConstrainedEdgeCW(t),l=r.getConstrainedEdgeCCW(o),h=r.getConstrainedEdgeCW(o),d=e.getDelaunayEdgeCCW(t),p=e.getDelaunayEdgeCW(t),g=r.getDelaunayEdgeCCW(o),f=r.getDelaunayEdgeCW(o),e.legalize(t,o),r.legalize(o,t),r.setDelaunayEdgeCCW(t,d),e.setDelaunayEdgeCW(t,p),e.setDelaunayEdgeCCW(o,g),r.setDelaunayEdgeCW(o,f),r.setConstrainedEdgeCCW(t,c),e.setConstrainedEdgeCW(t,u),e.setConstrainedEdgeCCW(o,l),r.setConstrainedEdgeCW(o,h),e.clearNeighbors(),r.clearNeighbors(),i&&r.markNeighbor(i),n&&e.markNeighbor(n),s&&e.markNeighbor(s),a&&r.markNeighbor(a),e.markNeighbor(r)}function x(e,t){if(!function(e,t){var r;return r=e.basin.left_highest?e.basin.left_node.point.y-t.point.y:e.basin.right_node.point.y-t.point.y,e.basin.width>r}(e,t)&&(_(e,t),t.prev!==e.basin.left_node||t.next!==e.basin.right_node)){if(t.prev===e.basin.left_node){if(l(t.point,t.next.point,t.next.next.point)===u.CW)return;t=t.next}else if(t.next===e.basin.right_node){if(l(t.point,t.prev.point,t.prev.prev.point)===u.CCW)return;t=t.prev}else t=t.prev.point.y<t.next.point.y?t.prev:t.next;x(e,t)}}function R(e,t,r){r.point.x<t.p.x&&(l(r.point,r.next.point,r.next.next.point)===u.CCW?A(e,t,r):(P(e,t,r),R(e,t,r)))}function A(e,t,r){_(e,r.next),r.next.point!==t.p&&l(t.q,r.next.point,t.p)===u.CCW&&l(r.point,r.next.point,r.next.next.point)===u.CCW&&A(e,t,r)}function P(e,t,r){l(r.next.point,r.next.next.point,r.next.next.next.point)===u.CCW?A(e,t,r.next):l(t.q,r.next.next.point,t.p)===u.CCW&&P(e,t,r.next)}function V(e,t,r){r.point.x>t.p.x&&(l(r.point,r.prev.point,r.prev.prev.point)===u.CW?b(e,t,r):(T(e,t,r),V(e,t,r)))}function T(e,t,r){l(r.prev.point,r.prev.prev.point,r.prev.prev.prev.point)===u.CW?b(e,t,r.prev):l(t.q,r.prev.prev.point,t.p)===u.CW&&T(e,t,r.prev)}function b(e,t,r){_(e,r.prev),r.prev.point!==t.p&&l(t.q,r.prev.point,t.p)===u.CW&&l(r.point,r.prev.point,r.prev.prev.point)===u.CW&&b(e,t,r)}function C(e,t,r,n,s){var a=n.neighborAcross(s);o(a,\"FLIP failed due to missing triangle!\");var c=a.oppositePoint(n,s);if(n.getConstrainedEdgeAcross(s)){var d=n.index(s);throw new i(\"poly2tri Intersecting Constraints\",[s,c,n.getPoint((d+1)%3),n.getPoint((d+2)%3)])}h(s,n.pointCCW(s),n.pointCW(s),c)?(E(n,s,a,c),e.mapTriangleToNodes(n),e.mapTriangleToNodes(a),s===r&&c===t?r===e.edge_event.constrained_edge.q&&t===e.edge_event.constrained_edge.p&&(n.markConstrainedEdgeByPoints(t,r),a.markConstrainedEdgeByPoints(t,r),y(e,n),y(e,a)):(n=function(e,t,r,o,i,n){var s;return t===u.CCW?(s=o.edgeIndex(i,n),o.delaunay_edge[s]=!0,y(e,o),o.clearDelaunayEdges(),r):(s=r.edgeIndex(i,n),r.delaunay_edge[s]=!0,y(e,r),r.clearDelaunayEdges(),o)}(e,l(r,c,t),n,a,s,c),C(e,t,r,n,s))):(L(e,t,r,n,a,O(t,r,a,c)),f(e,t,r,n,s))}function O(e,t,r,o){var n=l(t,o,e);if(n===u.CW)return r.pointCCW(o);if(n===u.CCW)return r.pointCW(o);throw new i(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\",[t,o,e])}function L(e,t,r,i,n,s){var a=n.neighborAcross(s);o(a,\"FLIP failed due to missing triangle\");var c=a.oppositePoint(n,s);h(r,i.pointCCW(r),i.pointCW(r),c)?C(e,r,c,a,c):L(e,t,r,i,a,O(t,r,a,c))}r.triangulate=function(e){e.initTriangulation(),e.createAdvancingFront(),function(e){var t,r=e.pointCount();for(t=1;t<r;++t)for(var o=e.getPoint(t),i=p(e,o),n=o._p2t_edge_list,s=0;n&&s<n.length;++s)g(e,n[s],i)}(e),function(e){for(var t=e.front().head().next.triangle,r=e.front().head().next.point;!t.getConstrainedEdgeCW(r);)t=t.neighborCCW(r);e.meshClean(t)}(e)}},{\"./advancingfront\":2,\"./assert\":3,\"./pointerror\":5,\"./triangle\":9,\"./utils\":10}],8:[function(e,t,r){var o=e(\"./pointerror\"),i=e(\"./point\"),n=e(\"./triangle\"),s=e(\"./sweep\"),a=e(\"./advancingfront\"),c=a.Node,u=function(e,t){if(this.p=e,this.q=t,e.y>t.y)this.q=e,this.p=t;else if(e.y===t.y)if(e.x>t.x)this.q=e,this.p=t;else if(e.x===t.x)throw new o(\"poly2tri Invalid Edge constructor: repeated points!\",[e]);this.q._p2t_edge_list||(this.q._p2t_edge_list=[]),this.q._p2t_edge_list.push(this)},l=function(){this.left_node=null,this.bottom_node=null,this.right_node=null,this.width=0,this.left_highest=!1};l.prototype.clear=function(){this.left_node=null,this.bottom_node=null,this.right_node=null,this.width=0,this.left_highest=!1};var h=function(){this.constrained_edge=null,this.right=!1},d=function(e,t){t=t||{},this.triangles_=[],this.map_=[],this.points_=t.cloneArrays?e.slice(0):e,this.edge_list=[],this.pmin_=this.pmax_=null,this.front_=null,this.head_=null,this.tail_=null,this.af_head_=null,this.af_middle_=null,this.af_tail_=null,this.basin=new l,this.edge_event=new h,this.initEdges(this.points_)};d.prototype.addHole=function(e){this.initEdges(e);var t,r=e.length;for(t=0;t<r;t++)this.points_.push(e[t]);return this},d.prototype.AddHole=d.prototype.addHole,d.prototype.addHoles=function(e){var t,r=e.length;for(t=0;t<r;t++)this.initEdges(e[t]);return this.points_=this.points_.concat.apply(this.points_,e),this},d.prototype.addPoint=function(e){return this.points_.push(e),this},d.prototype.AddPoint=d.prototype.addPoint,d.prototype.addPoints=function(e){return this.points_=this.points_.concat(e),this},d.prototype.triangulate=function(){return s.triangulate(this),this},d.prototype.getBoundingBox=function(){return{min:this.pmin_,max:this.pmax_}},d.prototype.getTriangles=function(){return this.triangles_},d.prototype.GetTriangles=d.prototype.getTriangles,d.prototype.front=function(){return this.front_},d.prototype.pointCount=function(){return this.points_.length},d.prototype.head=function(){return this.head_},d.prototype.setHead=function(e){this.head_=e},d.prototype.tail=function(){return this.tail_},d.prototype.setTail=function(e){this.tail_=e},d.prototype.getMap=function(){return this.map_},d.prototype.initTriangulation=function(){var e,t=this.points_[0].x,r=this.points_[0].x,o=this.points_[0].y,n=this.points_[0].y,s=this.points_.length;for(e=1;e<s;e++){var a=this.points_[e];a.x>t&&(t=a.x),a.x<r&&(r=a.x),a.y>o&&(o=a.y),a.y<n&&(n=a.y)}this.pmin_=new i(r,n),this.pmax_=new i(t,o);var c=.3*(t-r),u=.3*(o-n);this.head_=new i(t+c,n-u),this.tail_=new i(r-c,n-u),this.points_.sort(i.compare)},d.prototype.initEdges=function(e,t){var r,o=e.length,i=t?e.length-1:e.length;for(r=0;r<i;++r)this.edge_list.push(new u(e[r],e[(r+1)%o]))},d.prototype.getPoint=function(e){return this.points_[e]},d.prototype.addToMap=function(e){this.map_.push(e)},d.prototype.locateNode=function(e){return this.front_.locateNode(e.x)},d.prototype.createAdvancingFront=function(){var e,t,r,o=new n(this.points_[0],this.tail_,this.head_);this.map_.push(o),e=new c(o.getPoint(1),o),t=new c(o.getPoint(0),o),r=new c(o.getPoint(2)),this.front_=new a(e,r),e.next=t,t.next=r,t.prev=e,r.prev=t},d.prototype.removeNode=function(e){},d.prototype.mapTriangleToNodes=function(e){for(var t=0;t<3;++t)if(!e.getNeighbor(t)){var r=this.front_.locatePoint(e.pointCW(e.getPoint(t)));r&&(r.triangle=e)}},d.prototype.removeFromMap=function(e){var t,r=this.map_,o=r.length;for(t=0;t<o;t++)if(r[t]===e){r.splice(t,1);break}},d.prototype.meshClean=function(e){for(var t,r,o=[e];t=o.pop();)if(!t.isInterior())for(t.setInterior(!0),this.triangles_.push(t),r=0;r<3;r++)t.constrained_edge[r]||o.push(t.getNeighbor(r))},t.exports=d},{\"./advancingfront\":2,\"./point\":4,\"./pointerror\":5,\"./sweep\":7,\"./triangle\":9}],9:[function(e,t,r){var o=function(e,t,r){this.points_=[e,t,r],this.neighbors_=[null,null,null],this.interior_=!1,this.constrained_edge=[!1,!1,!1],this.delaunay_edge=[!1,!1,!1]},i=e(\"./xy\").toString;o.prototype.toString=function(){return\"[\"+i(this.points_[0])+i(this.points_[1])+i(this.points_[2])+\"]\"},o.prototype.getPoint=function(e){return this.points_[e]},o.prototype.GetPoint=o.prototype.getPoint,o.prototype.getPoints=function(){return this.points_},o.prototype.getNeighbor=function(e){return this.neighbors_[e]},o.prototype.containsPoint=function(e){var t=this.points_;return e===t[0]||e===t[1]||e===t[2]},o.prototype.containsEdge=function(e){return this.containsPoint(e.p)&&this.containsPoint(e.q)},o.prototype.containsPoints=function(e,t){return this.containsPoint(e)&&this.containsPoint(t)},o.prototype.isInterior=function(){return this.interior_},o.prototype.setInterior=function(e){return this.interior_=e,this},o.prototype.markNeighborPointers=function(e,t,r){var o=this.points_;if(e===o[2]&&t===o[1]||e===o[1]&&t===o[2])this.neighbors_[0]=r;else if(e===o[0]&&t===o[2]||e===o[2]&&t===o[0])this.neighbors_[1]=r;else{if(!(e===o[0]&&t===o[1]||e===o[1]&&t===o[0]))throw new Error(\"poly2tri Invalid Triangle.markNeighborPointers() call\");this.neighbors_[2]=r}},o.prototype.markNeighbor=function(e){var t=this.points_;e.containsPoints(t[1],t[2])?(this.neighbors_[0]=e,e.markNeighborPointers(t[1],t[2],this)):e.containsPoints(t[0],t[2])?(this.neighbors_[1]=e,e.markNeighborPointers(t[0],t[2],this)):e.containsPoints(t[0],t[1])&&(this.neighbors_[2]=e,e.markNeighborPointers(t[0],t[1],this))},o.prototype.clearNeighbors=function(){this.neighbors_[0]=null,this.neighbors_[1]=null,this.neighbors_[2]=null},o.prototype.clearDelaunayEdges=function(){this.delaunay_edge[0]=!1,this.delaunay_edge[1]=!1,this.delaunay_edge[2]=!1},o.prototype.pointCW=function(e){var t=this.points_;return e===t[0]?t[2]:e===t[1]?t[0]:e===t[2]?t[1]:null},o.prototype.pointCCW=function(e){var t=this.points_;return e===t[0]?t[1]:e===t[1]?t[2]:e===t[2]?t[0]:null},o.prototype.neighborCW=function(e){return e===this.points_[0]?this.neighbors_[1]:e===this.points_[1]?this.neighbors_[2]:this.neighbors_[0]},o.prototype.neighborCCW=function(e){return e===this.points_[0]?this.neighbors_[2]:e===this.points_[1]?this.neighbors_[0]:this.neighbors_[1]},o.prototype.getConstrainedEdgeCW=function(e){return e===this.points_[0]?this.constrained_edge[1]:e===this.points_[1]?this.constrained_edge[2]:this.constrained_edge[0]},o.prototype.getConstrainedEdgeCCW=function(e){return e===this.points_[0]?this.constrained_edge[2]:e===this.points_[1]?this.constrained_edge[0]:this.constrained_edge[1]},o.prototype.getConstrainedEdgeAcross=function(e){return e===this.points_[0]?this.constrained_edge[0]:e===this.points_[1]?this.constrained_edge[1]:this.constrained_edge[2]},o.prototype.setConstrainedEdgeCW=function(e,t){e===this.points_[0]?this.constrained_edge[1]=t:e===this.points_[1]?this.constrained_edge[2]=t:this.constrained_edge[0]=t},o.prototype.setConstrainedEdgeCCW=function(e,t){e===this.points_[0]?this.constrained_edge[2]=t:e===this.points_[1]?this.constrained_edge[0]=t:this.constrained_edge[1]=t},o.prototype.getDelaunayEdgeCW=function(e){return e===this.points_[0]?this.delaunay_edge[1]:e===this.points_[1]?this.delaunay_edge[2]:this.delaunay_edge[0]},o.prototype.getDelaunayEdgeCCW=function(e){return e===this.points_[0]?this.delaunay_edge[2]:e===this.points_[1]?this.delaunay_edge[0]:this.delaunay_edge[1]},o.prototype.setDelaunayEdgeCW=function(e,t){e===this.points_[0]?this.delaunay_edge[1]=t:e===this.points_[1]?this.delaunay_edge[2]=t:this.delaunay_edge[0]=t},o.prototype.setDelaunayEdgeCCW=function(e,t){e===this.points_[0]?this.delaunay_edge[2]=t:e===this.points_[1]?this.delaunay_edge[0]=t:this.delaunay_edge[1]=t},o.prototype.neighborAcross=function(e){return e===this.points_[0]?this.neighbors_[0]:e===this.points_[1]?this.neighbors_[1]:this.neighbors_[2]},o.prototype.oppositePoint=function(e,t){var r=e.pointCW(t);return this.pointCW(r)},o.prototype.legalize=function(e,t){var r=this.points_;if(e===r[0])r[1]=r[0],r[0]=r[2],r[2]=t;else if(e===r[1])r[2]=r[1],r[1]=r[0],r[0]=t;else{if(e!==r[2])throw new Error(\"poly2tri Invalid Triangle.legalize() call\");r[0]=r[2],r[2]=r[1],r[1]=t}},o.prototype.index=function(e){var t=this.points_;if(e===t[0])return 0;if(e===t[1])return 1;if(e===t[2])return 2;throw new Error(\"poly2tri Invalid Triangle.index() call\")},o.prototype.edgeIndex=function(e,t){var r=this.points_;if(e===r[0]){if(t===r[1])return 2;if(t===r[2])return 1}else if(e===r[1]){if(t===r[2])return 0;if(t===r[0])return 2}else if(e===r[2]){if(t===r[0])return 1;if(t===r[1])return 0}return-1},o.prototype.markConstrainedEdgeByIndex=function(e){this.constrained_edge[e]=!0},o.prototype.markConstrainedEdgeByEdge=function(e){this.markConstrainedEdgeByPoints(e.p,e.q)},o.prototype.markConstrainedEdgeByPoints=function(e,t){var r=this.points_;t===r[0]&&e===r[1]||t===r[1]&&e===r[0]?this.constrained_edge[2]=!0:t===r[0]&&e===r[2]||t===r[2]&&e===r[0]?this.constrained_edge[1]=!0:(t===r[1]&&e===r[2]||t===r[2]&&e===r[1])&&(this.constrained_edge[0]=!0)},t.exports=o},{\"./xy\":11}],10:[function(e,t,r){var o=1e-16;r.EPSILON=o;var i={CW:1,CCW:-1,COLLINEAR:0};r.Orientation=i,r.orient2d=function(e,t,r){var n=(e.x-r.x)*(t.y-r.y)-(e.y-r.y)*(t.x-r.x);return n>-1e-16&&n<o?i.COLLINEAR:n>0?i.CCW:i.CW},r.inScanArea=function(e,t,r,i){return!((e.x-t.x)*(i.y-t.y)-(i.x-t.x)*(e.y-t.y)>=-1e-16||(e.x-r.x)*(i.y-r.y)-(i.x-r.x)*(e.y-r.y)<=o)},r.isAngleObtuse=function(e,t,r){var o=t.x-e.x,i=t.y-e.y;return o*(r.x-e.x)+i*(r.y-e.y)<0}},{}],11:[function(e,t,r){function o(e){return\"(\"+e.x+\";\"+e.y+\")\"}t.exports={toString:function(e){var t=e.toString();return\"[object Object]\"===t?o(e):t},toStringBase:o,compare:function(e,t){return e.y===t.y?e.x-t.x:e.y-t.y},equals:function(e,t){return e.x===t.x&&e.y===t.y}}},{}]},{},[6])(6)},\"object\"==typeof s?a.exports=n():void 0===(i=\"function\"==typeof(o=n)?o.call(t,r,t,e):o)||(e.exports=i);var c=a.exports;t.poly2tri=c},5856:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});function r(e,t,r,o,i,n){i[0]=n.b=o[0],i[1]=n.a=-t*n.b+o[1];for(var s=2;s<e;s++)i[s]=-(t*n.a+r*n.b)+o[s],n.b=n.a,n.a=i[s]}function o(e,t,o,i,n,s,a,c,u){var l=new Object,h=3;return l.b=l.a=0,r(t,a,c,s,u,l),n.c=l.a,n.d=l.b,Math.abs(n.c)<=100*e*Math.abs(s[t-1])&&Math.abs(n.d)<=100*e*Math.abs(s[t-2])||(n.h=c*i,Math.abs(n.d)>=Math.abs(n.c)?(h=2,n.e=o/n.d,n.f=n.c/n.d,n.g=a*i,n.a3=n.e*(n.g+o)+n.h*(i/n.d),n.a1=-o+n.f*i,n.a7=n.h+(n.f+a)*o):(h=1,n.e=o/n.c,n.f=n.d/n.c,n.g=n.e*a,n.a3=n.e*o+(n.g+n.h/n.c)*i,n.a1=-o*(n.d/n.c)+i,n.a7=n.g*n.d+n.h*n.f+o)),h}function i(e,t,r,o,i,n,s,a,c){var u;if(3!=r)if(u=1==r?i:o,Math.abs(n.a1)>10*e*Math.abs(u)){n.a7/=n.a1,n.a3/=n.a1,s[0]=c[0],s[1]=-c[0]*n.a7+c[1];for(l=2;l<t;l++)s[l]=-c[l-1]*n.a7+a[l-2]*n.a3+c[l]}else{s[0]=0,s[1]=-c[0]*n.a7;for(l=2;l<t;l++)s[l]=-c[l-1]*n.a7+a[l-2]*n.a3}else{s[1]=s[0]=0;for(var l=2;l<t;l++)s[l]=a[l-2]}}function n(e,t,r,o,i,n,s,a,c,u,l,h,d,p,g,f,v){var _,y,m,E,x,R,A,P;t.b=t.a=0,3!=e&&(2!=e?(_=r+d*s+h*u,y=a+(d+p*u)*c):(_=(r+l)*u+h,y=(u+d)*a+p*c),0!=(P=-(A=-((x=(m=-g[f-1]/v[f])*n)+(R=m*m*i))+p*(E=-(g[f-2]+m*v[f-1])/v[f])*o)+y+m*_)&&(t.a=-(d*(R+x)+p*(m*o+E*n))/P+d,t.b=p*(1+A/P)))}function s(e,t,r,o){var i,n,s;o.sr=o.si=o.lr=o.li=0,0!=e?0!=r?(i=t/2,Math.abs(i)<Math.abs(r)?(s=-(s=r>=0?e:-e)+i*(i/Math.abs(r)),n=Math.sqrt(Math.abs(s))*Math.sqrt(Math.abs(r))):(s=-e/i*(r/i)+1,n=Math.sqrt(Math.abs(s))*Math.abs(i)),s>=0?(n=i>=0?-n:n,o.lr=(-i+n)/e,o.sr=0!=o.lr?r/o.lr/e:o.sr):(o.lr=o.sr=-i/e,o.si=Math.abs(n/e),o.li=-o.si)):o.lr=-t/e:o.sr=0!=t?-r/t:o.sr}function a(e,t,a,c,u,l,h,d,p,g,f,v){var _,y,m,E,x,R,A,P,V,T,b,C=new Object,O=0,L=0;a.NZ=0,R=c,P=u;do{if(C.li=C.lr=C.si=C.sr=0,s(1,R,P,C),a.szr=C.sr,a.szi=C.si,a.lzr=C.lr,a.lzi=C.li,Math.abs(Math.abs(a.szr)-Math.abs(a.lzr))>.01*Math.abs(a.lzr))break;for(r(h,R,P,p,l,d),y=Math.abs(-a.szr*d.b+d.a)+Math.abs(a.szi*d.b),T=Math.sqrt(Math.abs(P)),_=2*Math.abs(l[0]),x=-a.szr*d.b,b=1;b<t;b++)_=_*T+Math.abs(l[b]);if(y<=20*(_=(9*(_=_*T+Math.abs(x+d.a))+2*Math.abs(x)-7*(Math.abs(d.a+x)+T*Math.abs(d.b)))*e)){a.NZ=2;break}if(++O>20)break;if(O>=2&&E<=.01&&y>=m&&!L){for(r(h,R-=R*(E=E<e?Math.sqrt(e):Math.sqrt(E)),P+=P*E,p,l,d),b=0;b<5;b++)i(e,t,o(e,t,d.a,d.b,f,v,R,P,g),d.a,d.b,f,v,g,l);L=1,O=0}m=y,i(e,t,o(e,t,d.a,d.b,f,v,R,P,g),d.a,d.b,f,v,g,l),n(o(e,t,d.a,d.b,f,v,R,P,g),d,d.a,f.a1,f.a3,f.a7,d.b,f.c,f.d,f.f,f.g,f.h,R,P,v,t,p),A=d.a,0!=(V=d.b)&&(E=Math.abs((-P+V)/V),R=A,P=V)}while(0!=V)}function c(e,t,r,o,i,n,s,a,c){var u,l,h,d,p,g,f,v,_,y,m,E=o-1;for(t.NZ=m=_=0,f=r.a;;){for(s[0]=g=i[0],y=1;y<n;y++)s[y]=g=g*f+i[y];for(h=Math.abs(g),d=Math.abs(f),u=.5*Math.abs(s[0]),y=1;y<n;y++)u=u*d+Math.abs(s[y]);if(h<=20*e*(2*u-h)){t.NZ=1,t.szr=f,t.szi=0;break}if(++m>10)break;if(m>=2&&Math.abs(v)<=.001*Math.abs(-v+f)&&h>p){_=1,t.a=f;break}for(p=h,c[0]=l=a[0],y=1;y<o;y++)c[y]=l=l*f+a[y];if(Math.abs(l)>10*Math.abs(a[E])*e)for(v=-g/l,a[0]=s[0],y=1;y<o;y++)a[y]=v*c[y-1]+s[y];else for(a[0]=0,y=1;y<o;y++)a[y]=c[y-1];for(l=a[0],y=1;y<o;y++)l=l*f+a[y];f+=v=Math.abs(l)>10*Math.abs(a[E])*e?-g/l:0}return _}function u(e,t,s,u,l,h,d,p,g,f,v){var _,y,m,E,x,R,A,P,V,T,b,C,O,L,S,M,w,N,F,I,D,j,B,U,k,G,z,Y,K=new Object,q=new Object,W=new Array(t),H=new Array(t);for(v.NZ=0,E=m=.25,S=-2*u,x=u,P=w=l,q.h=q.g=q.f=q.e=q.d=q.c=q.a7=q.a3=q.a1=K.b=K.a=0,r(g,S,w,p,f,K),G=o(e,d,_=K.a,y=K.b,q,h,S,w,W),B=0;B<s;B++){if(i(e,d,G,_,y,q,h,W,f),n(G=o(e,d,_,y,q,h,S,w,W),K,_,q.a1,q.a3,q.a7,y,q.c,q.d,q.f,q.g,q.h,S,w,h,d,p),M=K.a,F=N=K.b,T=0!=h[d-1]?-p[d]/h[d-1]:0,b=O=1,0!=B&&3!=G&&(z=(L=(O=0!=F?Math.abs((F-P)/F):O)<A?O*A:1)<E?1:0,(U=(C=(b=0!=T?Math.abs((T-x)/T):b)<R?b*R:1)<m?1:0)||z)){for(D=0;D<d;D++)H[D]=h[D];V=T,k=Y=0,I=1;do{if(j=1,I&&0==(I=0)&&U&&(!z||C<L));else{if(a(e,d,v,M,N,f,g,K,p,W,q,h),_=K.a,y=K.b,v.NZ>0)return;if(Y=1,E*=.25,k||!U)j=0;else for(D=0;D<d;D++)h[D]=H[D]}if(0!=j){if(K.a=V,j=c(e,v,K,d,p,g,f,h,W),V=K.a,v.NZ>0)return;if(k=1,m*=.25,0!=j){M=-(V+V),N=V*V;continue}}for(D=0;D<d;D++)h[D]=H[D]}while(z&&!Y);r(g,S,w,p,f,K),G=o(e,d,_=K.a,y=K.b,q,h,S,w,W)}P=F,x=T,A=O,R=b}}t.getRealPolynomialRoots=function(e){var t={Degree:e.length-1},r=new Array(e.length),o=new Array(e.length);!function(e,t,r,o){var i,n,a,c,l,h,d,p,g,f,v,_,y,m,E,x,R,A,P,V,T,b,C=e.Degree,O=.017453292519943295,L=117549435082229e-52,S=340282346638529e24,M=Math.LN2,w=e.Degree+1,N=new Array(w),F=new Array(w),I=new Array(w),D=new Array(w),j=new Object,B=new Object;_=1;do{n=_,y=1+(_/=2)}while(y>1);var U=L/n,k=Math.cos(94*O),G=Math.sin(94*O),z=Math.sqrt(.5),Y=-z;for(B.NZ=R=0,B.szr=B.szi=B.lzr=B.lzi=0;0==t[C];)r[R]=o[R]=0,C--,R++;for(T=C+1;C>=1;){if(C<=2){C<2?(r[e.Degree-1]=-t[1]/t[0],o[e.Degree-1]=0):(j.li=j.lr=j.si=j.sr=0,s(t[0],t[1],t[2],j),r[e.Degree-2]=j.sr,o[e.Degree-2]=j.si,r[e.Degree-1]=j.lr,o[e.Degree-1]=j.li);break}for(d=0,p=S,K=0;K<T;K++)(f=Math.abs(t[K]))>d&&(d=f),0!=f&&f<p&&(p=f);if(((g=U/p)<=1&&d>=10||g>1&&S/g>=d)&&(g=0==g?L:g,P=Math.floor(Math.log(g)/M+.5),1!=(l=Math.pow(2,P))))for(K=0;K<T;K++)t[K]*=l;for(var K=0;K<T;K++)F[K]=Math.abs(t[K]);F[C]=-F[C],V=C-1,f=Math.exp((Math.log(-F[C])-Math.log(F[0]))/C),0!=F[V]&&(f=(v=-F[C]/F[V])<f?v:f),v=f;do{for(v=.1*(f=v),h=F[0],K=1;K<T;K++)h=h*v+F[K]}while(h>0);for(c=f;Math.abs(c/f)>.005;){for(a=h=F[0],K=1;K<C;K++)a=f*a+(h=f*h+F[K]);f-=c=(h=f*h+F[C])/a}for(i=f,K=1;K<C;K++)N[K]=(C-K)*t[K]/C;for(N[0]=t[0],_=t[C],y=t[V],b=0==N[V]?1:0,A=0;A<5;A++)if(m=N[V],b){for(K=0;K<V;K++)N[R=V-K]=N[R-1];N[0]=0,b=0==N[V]?1:0}else{for(E=-_/m,K=0;K<V;K++)N[R=V-K]=E*N[R-1]+t[R];N[0]=t[0],b=Math.abs(N[V])<=Math.abs(y)*n*10?1:0}for(K=0;K<C;K++)D[K]=N[K];for(A=1;A<=20;A++){if(x=-G*Y+k*z,Y=G*z+k*Y,u(n,w,20*A,i*(z=x),i,N,C,t,T,I,B),0!=B.NZ){for(r[R=e.Degree-C]=B.szr,o[R]=B.szi,C=(T-=B.NZ)-1,K=0;K<T;K++)t[K]=I[K];1!=B.NZ&&(r[R+1]=B.lzr,o[R+1]=B.lzi);break}for(K=0;K<C;K++)N[K]=D[K]}if(A>20){e.Degree-=C;break}}}(t,e,r,o);for(var i=[],n=e.length-t.Degree-1;n<e.length;n++)Math.abs(o[n])<1e-8&&i.push(r[n]);return i}},2536:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TopologyCloner=void 0;var o=r(6940),i=r(7580),n=r(672),s=r(4524),a=r(6776),c=r(6508),u=r(5837),l=r(9984),h=r(2208),d=function(){this._edgeMap={},this._vertexMap={},this._coedgeMap={},this._progenitorMap=new h.ProgenitorMap};d.prototype.cloneVertex=function(e){var t=this._vertexMap[e.getGuid()];return t||(t=new o.Vertex(e.getPoint().clone()),this._vertexMap[e.getGuid()]=t,t.setPrecision(e.getPrecision()),this._progenitorMap.addEntry(t,[e])),t},d.prototype.cloneEdge=function(e){var t=this._edgeMap[e.getGuid()];return t||(t=new i.Edge(e.getCurve().clone()),this._edgeMap[e.getGuid()]=t,t.setReversed(e.isReversed()),t.setRange(e.getRange()),t.setStartVertex(this.cloneVertex(e.getStartVertex())),t.setEndVertex(this.cloneVertex(e.getEndVertex())),t.setPrecision(e.getPrecision()),this._progenitorMap.addEntry(t,[e])),t},d.prototype.cloneCoedge=function(e){var t,r,o=new n.Coedge;this._coedgeMap[e.getGuid()]=o,o.setReversed(e.isReversed()),o.setEdge(this.cloneEdge(e.getEdge())),o.getEdge().setCoedge(o);for(var i=e.getPartner();i;){var s=this._coedgeMap[i.getGuid()];s&&(t||(t=s),r=s,e.getEdge().getCoedge()===i&&o.getEdge().setCoedge(s)),(i=i.getPartner())===e&&(i=void 0)}return t&&r&&(o.setPartner(t),r.setPartner(o)),this._progenitorMap.addEntry(o,[e]),o},d.prototype.cloneLoop=function(e){for(var t=new s.Loop,r=e.getCoedges(),o=new Array(r.length),i=0;i<r.length;++i)o[i]=this.cloneCoedge(r[i]);return t.addCoedges(o),this._progenitorMap.addEntry(t,[e]),t},d.prototype.cloneFace=function(e){for(var t=new a.Face,r=e.getLoops(),o=new Array(r.length),i=0;i<r.length;++i)o[i]=this.cloneLoop(r[i]);return t.addLoops(o),t.setSurface(e.getSurface().clone()),t.setReversed(e.isReversed()),this._progenitorMap.addEntry(t,[e]),t},d.prototype.cloneFaces=function(e){for(var t=new Array(e.length),r=0;r<e.length;++r)t[r]=this.cloneFace(e[r]);return t},d.prototype.cloneShell=function(e){var t=new c.Shell;return t.addFaces(this.cloneFaces(e.getFaces())),this._progenitorMap.addEntry(t,[e]),t},d.prototype.cloneLump=function(e){for(var t=new u.Lump,r=e.getShells(),o=0;o<r.length;++o)t.addShell(this.cloneShell(r[o]));return this._progenitorMap.addEntry(t,[e]),t},d.prototype.cloneBody=function(e){for(var t=new l.Body,r=e.getLumps(),o=0;o<r.length;++o)t.addLump(this.cloneLump(r[o]));return this._progenitorMap.addEntry(t,[e]),t},d.prototype.getProgenitorMap=function(){return this._progenitorMap},t.TopologyCloner=d},64:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createShellsFromFaces=t.createWiresFromEdges=t.createEdgesFromCurves=t.createEdgeFromCurve=t.createLoopFromPolyline=t.createFaceFromPolyline=t.makeConeOrCylinderVParamLoop=t.createCoedgeOnEdge=t.createLineEdge=t.createLineEdgeBetweenVertices=void 0;var o=r(1972),i=r(2468),n=r(4728),s=r(3565),a=r(1096),c=r(8292),u=r(672),l=r(6940),h=r(6508),d=r(7580),p=r(4524),g=r(6776),f=r(7575),v=r(5896),_=r(7616),y=function(e,t){var r=e.getPosition(),i=t.getPosition(),n=new a.Line;n.setFromEndpoints(r,i);var s=new d.Edge(n);return s.setRange([0,o.Vector3.distance(r,i)]),s.setStartVertex(e),s.setEndVertex(t),s},m=function(e){var t=new u.Coedge;t.setEdge(e);var r=e.getCoedge();return r?(n.ConsoleUtils.assert(!r.getPartner()),r.setPartner(t),t.setPartner(r),t.setReversed(!r.isReversed())):e.setCoedge(t),t};var E=function(e){for(var t=e.length,r=new Array(t),o=0;o<t;++o)r[o]=new l.Vertex(new s.Point(e[o]));var i=new Array(t);for(o=0;o<t;++o){var n=(o+1)%t,a=y(r[o],r[n]);i[o]=m(a)}var c=new p.Loop;return c.addCoedges(i),c},x=function(e){var t=new d.Edge(e),r=e.getRange();r[0]!==-1/0&&r[1]!==1/0?(t.sett0(r[0]),t.sett1(r[1])):(t.sett0(0),t.sett1(1));var o=t.evaluatePosition(t.t0());if(t.setStartVertex(new l.Vertex(new s.Point(o))),e.isClosed())t.setEndVertex(t.getStartVertex());else{var i=t.evaluatePosition(t.t1());t.setEndVertex(new l.Vertex(new s.Point(i)))}return t};t.createLineEdgeBetweenVertices=y,t.createLineEdge=function(e,t){var r=new l.Vertex(new s.Point(e)),o=new l.Vertex(new s.Point(t));return y(r,o)},t.createCoedgeOnEdge=m,t.makeConeOrCylinderVParamLoop=function(e,t){n.ConsoleUtils.assert(e.getGeometryType()===i.GEOMETRY_TYPES.CYLINDER||e.getGeometryType()===i.GEOMETRY_TYPES.CONE||e.getGeometryType()===i.GEOMETRY_TYPES.ELLIPTICAL_CYLINDER||e.getGeometryType()===i.GEOMETRY_TYPES.ELLIPTICAL_CONE),n.ConsoleUtils.assert(e.isPeriodicV());var r,o=new d.Edge,a=e.vParamLine(t);a.getGeometryType()===i.GEOMETRY_TYPES.POINT?r=a:(r=new s.Point(a.evaluatePosition(a.getRange()[0])),o.setCurve(a),o.setRange(a.getRange()));var c=new l.Vertex(r);o.setStartVertex(c),o.setEndVertex(c);var u=new p.Loop;return u.addCoedge(m(o)),u},t.createFaceFromPolyline=function(e){var t=E(e),r=(0,v.definePlaneThroughPoints)(e),o=new c.Plane;o.set(r.origin,r.normal,r.uAxis),o.limitRangeU(r.uRange),o.limitRangeV(r.vRange);var i=new g.Face(o);return i.addLoop(t),i},t.createLoopFromPolyline=E,t.createEdgeFromCurve=x,t.createEdgesFromCurves=function(e){for(var t=[],r=0;r<e.length;++r)t.push(x(e[r]));return(0,_.mergeCoincidentVertices)(t),t},t.createWiresFromEdges=function(e){for(var t=(0,_.findConnectedEdges)(e),r=[],o=0;o<t.length;++o){var i=new f.Wire;i.addEdges(t[o]),r.push(i)}return r},t.createShellsFromFaces=function(e){for(var t=(0,_.findConnectedFaces)(e),r=new Array(t.length),o=0;o<t.length;++o){var i=new h.Shell;i.addFaces(t[o]),r[o]=i}return r}},7620:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createPolyhedron=void 0;var o=r(9984),i=r(5837),n=r(6776),s=r(4524),a=r(6940),c=r(8292),u=r(3565),l=r(64),h=r(5896),d=r(4728),p=r(6120);function g(e,t){var r,o=e.getCommonEdges(t);d.ConsoleUtils.assert(o.length<=1),r=0===o.length?(0,l.createLineEdgeBetweenVertices)(e,t):o[0];var i=(0,l.createCoedgeOnEdge)(r);return d.ConsoleUtils.assert(i.getStartVertex()===e),d.ConsoleUtils.assert(i.getEndVertex()===t),i}function f(e,t){var r,o=[];for(r=0;r<t.length;++r)o[r]=e[t[r]];var i=(0,h.definePlaneThroughPoints)(o);if(i){var n=new c.Plane;return n.set(i.origin,i.normal,i.uAxis),n.limitRangeU(i.uRange),n.limitRangeV(i.vRange),n}p.DebugUtils.warn(\"Face is degenerate\")}t.createPolyhedron=function(e,t){var r,c=[];for(r=0;r<e.length;++r){var h=new a.Vertex(new u.Point(e[r]));c.push(h)}var p=[];for(r=0;r<t.length;++r){var v=t[r];d.ConsoleUtils.assert(v.length>=3);for(var _=new s.Loop,y=[],m=0;m<v.length;++m){var E=v[m],x=v[(m+1)%v.length];d.ConsoleUtils.assert(E>=0&&E<e.length),d.ConsoleUtils.assert(x>=0&&x<e.length);var R=g(c[E],c[x]);y.push(R)}_.addCoedges(y);var A=f(e,v),P=new n.Face(A);P.addLoop(_),p.push(P)}var V=(0,l.createShellsFromFaces)(p),T=[];for(r=0;r<V.length;++r)T[r]=new i.Lump,T[r].addShell(V[r]);var b=new o.Body;return b.addLumps(T),b}},2472:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.extrudeFace=void 0;var o=r(1972),i=r(2468),n=r(4728),s=r(8292),a=r(3440),c=r(8360),u=r(92),l=r(4524),h=r(6776),d=r(6508),p=r(5837),g=r(9984),f=r(2536),v=r(7616),_=r(64);function y(e,t,r){var n=o.Vector3.length(r),s=o.Vector3.dot(e.getAxisDir(),r)>0?[0,n]:[-n,0];e.limitRangeU(s),t[1]-t[0]<2*Math.PI-i.PARAMETER_SPACE_TOLERANCE&&e.limitRangeV(t)}var m=function(e,t){var r=e.getEdge().getCurve(),n=e.getRange(),l=!0;e.isReversed()!==e.getEdge().isReversed()&&(n=[-n[1],-n[0]],l=!1);var h,d=l?e.t0():e.t1(),p=e.evaluateDt(d);if(o.Vector3.cross(p,p,t),o.Vector3.normalize(p,p),o.Vector3.negate(p,p),r.getGeometryType()===i.GEOMETRY_TYPES.LINE)h=function(e,t,r){var i=new s.Plane,n=e.evaluateDt(0),a=o.Vector3.createFloat64();o.Vector3.normalize(a,r);var c=o.Vector3.createFloat64();o.Vector3.cross(c,a,n),i.set(e.evaluatePosition(0),c,a);var u=o.Vector3.length(r),l=o.Vector3.dot(a,r)>0?[0,u]:[-u,0];return i.limitRangeV(t),i.limitRangeU(l),i}(r,n,t);else if(r.getGeometryType()===i.GEOMETRY_TYPES.CIRCLE)h=function(e,t,r){var i=e.evaluatePosition(0);o.Vector3.subtract(i,i,e.getCenter());var n=o.Vector3.createFloat64();o.Vector3.negate(n,e.getNormal());var s=new a.Cylinder;return s.set(e.getCenter(),e.getRadius(),n,i,1),y(s,t,r),s}(r,n,t);else if(r.getGeometryType()===i.GEOMETRY_TYPES.ELLIPSE)h=function(e,t,r){var i=e.evaluatePosition(0);o.Vector3.subtract(i,i,e.getCenter());var n=o.Vector3.createFloat64();o.Vector3.negate(n,e.getNormal());var s=new c.EllipticalCylinder;return s.set(e.getCenter(),i,e.getMinorRadius()/e.getMajorRadius(),n,1),y(s,t,r),s}(r,n,t);else{if(r.getGeometryType()!==i.GEOMETRY_TYPES.BCURVE)throw new Error(\"createSideFaceRuledSurface: Curve type not supported.\");h=function(e,t,r){for(var o=new u.BSurface,i=e.getDegree(),n=e.getKnotVector().slice(0),s=e.getControlPoints().slice(0),a=(s=s.concat(s)).length/2;a<s.length;a+=3)s[a]+=r[0],s[a+1]+=r[1],s[a+2]+=r[2];var c=void 0;return e.isRational()&&(c=(c=e.getWeights().slice(0)).concat(c)),o.set(1,i,[0,0,1,1],n,s,c),o.limitRangeU([0,1]),o.limitRangeV(t),o}(r,n,t)}var g=h.evaluateNormal(0,n[0]);return{surface:h,isReversed:o.Vector3.dot(g,p)<0}};t.extrudeFace=function(e,t){n.ConsoleUtils.assert(e.getSurfaceType()===i.GEOMETRY_TYPES.PLANE);var r=e.evaluateNormal(0,0);o.Vector3.scale(r,r,t);var s=(new f.TopologyCloner).cloneFace(e),a=o.Matrix44.fromTranslation(o.Matrix44.createFloat64(),r);(0,v.transformTopology)(s,a),t>0?(0,v.reverseFace)(e):(0,v.reverseFace)(s);var c=function(e,t,r){for(var o=[],i=e.getLoops(),n=t.getLoops(),s=0;s<i.length;++s)for(var a=i[s].getCoedges(),c=n[s].getCoedges(),u=new Array(a.length),d=0;d<a.length;++d){var p=new Array(4),g=a[d],f=c[a.length-1-d],v=g.getStartVertex(),y=g.getEndVertex(),E=f.getStartVertex(),x=f.getEndVertex();p[0]=(0,_.createCoedgeOnEdge)(g.getEdge()),0===d&&(u[d]=(0,_.createLineEdgeBetweenVertices)(v,x)),p[1]=(0,_.createCoedgeOnEdge)(u[d]),p[2]=(0,_.createCoedgeOnEdge)(f.getEdge()),d!==a.length-1&&(u[d+1]=(0,_.createLineEdgeBetweenVertices)(E,y)),p[3]=(0,_.createCoedgeOnEdge)(u[(d+1)%a.length]);var R=new l.Loop;R.addCoedges(p);var A=m(g,r),P=new h.Face(A.surface);P.setReversed(A.isReversed),P.addLoop(R),o.push(P)}return o}(e,s,r),u=e.getShell();u||(u=new d.Shell).addFace(e),n.ConsoleUtils.assert(1===u.getFaces().length),u.addFaces(c),u.addFace(s);var y=u.getLump();y||(y=new p.Lump).addShell(u);var E=y.getBody();return E||(E=new g.Body).addLump(y),E}},268:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Path2D=void 0;var o=r(1972),i=r(2468),n=r(6500),s=r(7575),a=r(8796),c=r(5512),u=r(8972),l=r(1096),h=r(64),d=r(8080),p=r(4728),g=r(6120),f={assert:function(e,t){if(!e)throw{message:t||\"assertion failed\"}},assert_arg:function(e,t,r,o){var i=\"Invalid argument '\"+t+\"': \"+r+\"\\nUsage: \"+o;this.assert(e,i)},assert_number:function(e,t,r){this.assert_arg(\"number\"==typeof e,t,\"should be a number\",r)},assert_boolean:function(e,t,r){this.assert_arg(\"boolean\"==typeof e,t,\"should be a boolean\",r)},assert_string:function(e,t,r){this.assert_arg(\"string\"==typeof e,t,\"should be a string\",r)}},v=function(){this._wireBody=new n.WireBody,this._curves=[],this._xy=[0,0],this._mergeBCurves=!0,this._healPath=!1,this._tangentTol=i.KERNEL_ANGULAR_TOLERANCE};function _(e,t,r){var i=3*(t-1),n=[e[i],e[i+1],e[i+2]],s=3*r,a=[e[s],e[s+1],e[s+2]],c=o.Vector3.sub([0,0,0],a,n);o.Vector3.scale(c,c,-.1);for(var u=1;u<=r-t;++u){var l=o.Vector3.scaleAndAdd([0,0,0],a,c,u);e[s-3*u]=l[0],e[s-3*u+1]=l[1],e[s-3*u+2]=l[2]}}function y(e,t,r){var i=3*t,n=[e[i],e[i+1],e[i+2]],s=3*(r+1),a=[e[s],e[s+1],e[s+2]],c=o.Vector3.sub([0,0,0],a,n);o.Vector3.scale(c,c,.1);for(var u=1;u<=r-t;++u){var l=o.Vector3.scaleAndAdd([0,0,0],n,c,u);e[i+3*u]=l[0],e[i+3*u+1]=l[1],e[i+3*u+2]=l[2]}}function m(e,t){for(var r,i,n,s=[],a=e.getControlPoints(),c=[a[0],a[1],a[2]],u=a.length/3,l=1;l<u;++l){r=[a[3*l],a[3*l+1],a[3*l+2]];var h=l===u-1;o.Vector3.squaredDistance(c,r)<t?(void 0===i&&(i=l-1),n=l):h=!0,h&&void 0!==i&&void 0!==n&&(s.push([i,n]),h=!1,i=void 0,n=void 0),c=r}return s}function E(e,t){var r=m(e,t);if(1===r.length&&r[0][1]-r[0][0]==1){var o=r[0];0===o[0]?e.addControlPointOnCurve(e.evaluatePosition(.1)):o[1]===e.getNumControlPoints()-1?e.addControlPointOnCurve(e.evaluatePosition(.9)):(e.addControlPointOnCurve(e.evaluatePosition(.45)),e.addControlPointOnCurve(e.evaluatePosition(.55)))}return r.length>0}function x(e,t){for(var r=m(e,t),o=0;o<r.length;++o){var i=r[o],n=e.getControlPoints().slice();i[0]>0?_(n,i[0],i[1]):i[1]<n.length/3-1?y(n,i[0],i[1]):g.DebugUtils.warn(\"Degenerate BCurve!\"),e.setControlPoints(n)}}function R(e,t){var r=e.getControlPoints(),i=[r[0],r[1],r[2]],n=[r[3],r[4],r[5]],s=o.Vector3.distance(i,n);r[3]=i[0]+t[0]*s,r[4]=i[1]+t[1]*s,r[5]=i[2]+t[2]*s,e.setControlPoints(r)}function A(e,t){var r=e.getControlPoints(),i=e.getControlPoints().length,n=[r[i-6],r[i-5],r[i-4]],s=[r[i-3],r[i-2],r[i-1]],a=o.Vector3.distance(n,s);r[i-6]=s[0]-t[0]*a,r[i-5]=s[1]-t[1]*a,r[i-4]=s[2]-t[2]*a,e.setControlPoints(r)}function P(e){var t=new a.BCurve,r=e.getRange(),i=e.evaluatePosition(r[0]),n=e.evaluatePosition(r[1]),s=o.Vector3.lerp([0,0,0],i,n,1/3),c=o.Vector3.lerp([0,0,0],i,n,2/3),u=[i[0],i[1],0,s[0],s[1],0,c[0],c[1],0,n[0],n[1],0];return t.set(u,[1,1,1,1],3,[0,0,0,0,1,1,1,1]),t}function V(e,t){for(var r,i=e.getRange(),n=e.evaluatePosition(i[0]),s=e.evaluatePosition(i[1]),a=o.Vector3.distance(n,s),c=0,u=t.getControlPoints(),l=[u[0],u[1],u[2]],h=u.length/3,d=1;d<h;++d)r=[u[3*d],u[3*d+1],u[3*d+2]],c+=o.Vector3.distance(l,r),l=r;return a<c}function T(e,t){var r=e.getControlPoints().concat(t.getControlPoints().slice(3)),i=e.getWeights().concat(t.getWeights().slice(1)),n=e.getKnotVector().slice(0,-1),s=e.evaluateDt(e.getRange()[1]),a=t.evaluateDt(t.getRange()[0]),c=Math.sqrt(o.Vector3.squaredLength(a)/o.Vector3.squaredLength(s)),u=n[n.length-1]-t.getKnotVector()[0]*c,l=t.getKnotVector().slice(t.getDegree()+1);return l=l.map((function(e){return e*c+u})),n=n.concat(l),e.set(r,i,3,n),e}function b(e,t,r,n,s){var a=o.Vector2.subtract([],s,e),u=o.Vector2.length(a);if(!(u<i.KERNEL_TOLERANCE)){u>2*t&&(t=u/2);var l=o.Vector2.scaleAndAdd([],e,a,.5);if(u<2*t-o.FLOAT64_TOLERANCE){var h=Math.sqrt(t*t-u*u/4);!0===n!=(!1===r)&&(h=-h);var d=o.Vector2.normalize([],[-a[1],a[0]]);o.Vector2.scaleAndAdd(l,l,d,h)}var p=[0,0,n?1:-1],g=new c.Circle;g.set([l[0],l[1],0],p,[t,0,0]);var f=g.closestToPointParam([e[0],e[1],0]),v=g.closestToPointParam([s[0],s[1],0]);return v<=f&&(v+=2*Math.PI),g.limitRange([f,v]),g}}function C(e,t){var r=e.slice(1);r=r.replace(/([^e])-/g,\"$1 -\");for(var o=0;o<2;++o)r=r.replace(/\\.[0-9]*\\./g,(function(e){return e.slice(0,-1)+\" .\"}));for(var i=r.split(/[,\\s]/),n=[],s=0;s<i.length;++s)if(i[s].length>0){var a=Number(i[s]);t(!isNaN(a),\"could not parse command\"),n.push(a)}return n}v.prototype.numWires=function(){var e=this._wireBody.getWires().length;return this._curves.length>0&&(e+=1),e},v.prototype.numClosed=function(){for(var e=0,t=0;t<this._wireBody.getWires().length;++t)this._wireBody.getWires()[t].isClosed()&&(e+=1);return this._areCurvesClosed()&&(e+=1),e},v.prototype._fixCoincidentControlPoints=function(){for(var e=i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE,t=0;t<this._curves.length;++t){var r=this._curves[t];r.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&3===r.getDegree()&&4===r.getNumControlPoints()&&!1===r.isRational()&&E(r,e)&&x(r,e)}},v.prototype._snapBCurvesTangent=function(){for(var e=0;e<this._curves.length;++e){var t=(e+1)%this._curves.length;if(0===t&&!this._areCurvesClosed())break;var r=this._curves[e],n=this._curves[t],s=r.evaluateDt(r.getRange()[1]),a=n.evaluateDt(n.getRange()[0]);o.Vector3.isParallel(s,a,1,this._tangentTol)&&(r.getGeometryType()!==i.GEOMETRY_TYPES.BCURVE&&n.getGeometryType()===i.GEOMETRY_TYPES.BCURVE?(o.Vector3.normalize(s,s),R(n,s)):r.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&n.getGeometryType()!==i.GEOMETRY_TYPES.BCURVE&&(o.Vector3.normalize(a,a),A(r,a)))}},v.prototype._areCurvesClosed=function(){if(0===this._curves.length)return!1;var e=this._curves[this._curves.length-1],t=this._curves[0];return o.Vector3.squaredDistance(e.evaluatePosition(e.getRange()[1]),t.evaluatePosition(t.getRange()[0]))<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE},v.prototype._mergeShortLinesWithBCurves=function(){for(var e=!1,t=0;t<this._curves.length;++t){var r=(t+1)%this._curves.length;if(0===r&&!this._areCurvesClosed())break;var n=this._curves[t],s=this._curves[r],a=n.evaluateDt(n.getRange()[1]),c=s.evaluateDt(s.getRange()[0]);o.Vector3.isParallel(a,c,1,i.KERNEL_ANGULAR_TOLERANCE)&&(n.getGeometryType()===i.GEOMETRY_TYPES.LINE&&s.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&V(n,s)?(this._curves.splice(t,1,T(P(n),s)),this._curves.splice(r,1),t-=1,e=!0):n.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&s.getGeometryType()===i.GEOMETRY_TYPES.LINE&&V(s,n)&&(this._curves.splice(t,1,T(n,P(s))),this._curves.splice(r,1),t-=1,e=!0))}return e},v.prototype._mergeAdjacentBCurves=function(){for(var e=0;e<this._curves.length;++e){var t=(e+1)%this._curves.length;if(0===t&&!this._areCurvesClosed())break;var r=this._curves[e],n=this._curves[t],s=r.evaluateDt(r.getRange()[1]),a=n.evaluateDt(n.getRange()[0]);o.Vector3.isParallel(s,a,1,this._tangentTol)&&r.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&n.getGeometryType()===i.GEOMETRY_TYPES.BCURVE&&(o.Vector3.squaredLength(s)<o.Vector3.squaredLength(a)?(o.Vector3.normalize(s,s),R(n,s)):(o.Vector3.normalize(a,a),A(r,a)),r!==n&&(T(r,n),this._curves.splice(t,1),e-=1))}},v.prototype.setMergeBCurves=function(e){this._mergeBCurves=e},v.prototype.setHealForASM=function(e,t){this._healPath=e,this._tangentTol=void 0!==t?t:.01745240643728351},v.prototype._addWire=function(){if(0!==this._curves.length){if(this._healPath&&(this._fixCoincidentControlPoints(),this._snapBCurvesTangent()),(this._mergeBCurves||this._healPath)&&this._mergeAdjacentBCurves(),this._healPath)this._mergeShortLinesWithBCurves()&&this._mergeAdjacentBCurves();var e=(0,h.createWiresFromEdges)((0,h.createEdgesFromCurves)(this._curves));p.ConsoleUtils.assert(1===e.length),this._wireBody.addWire(e[0]),this._curves=[]}},v.prototype._discardIfOpen=function(){if(0!==this._curves.length){var e=this._curves[0].evaluatePosition(this._curves[0].getRange()[0]),t=[this._xy[0],this._xy[1],0];o.Vector3.squaredDistance(e,t)>=i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE&&(this._curves=[])}},v.prototype.moveTo=function(e,t){var r=\"Path2D.moveTo(x, y)\";return f.assert_number(e,\"x\",r),f.assert_number(t,\"y\",r),this._addWire(),this._xy[0]=e,this._xy[1]=t,this},v.prototype.lineTo=function(e,t){var r=\"Path2D.lineTo(x, y)\";f.assert_number(e,\"x\",r),f.assert_number(t,\"y\",r);var o=e-this._xy[0],n=t-this._xy[1];if(o*o+n*n>i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE){var s=new l.Line;s.set([this._xy[0],this._xy[1],0],[o,n,0]),s.limitRange([0,1]),this._curves.push(s)}return this._xy[0]=e,this._xy[1]=t,this},v.prototype.quadraticCurveTo=function(e,t,r,o){var i=\"Path2D.quadraticCurveTo(cpx, cpy, x, y)\";f.assert_number(e,\"cpx\",i),f.assert_number(t,\"cpy\",i),f.assert_number(r,\"x\",i),f.assert_number(o,\"y\",i);var n=new a.BCurve,s=1/3*this._xy[0]+2/3*e,c=1/3*this._xy[1]+2/3*t,u=1/3*r+2/3*e,l=1/3*o+2/3*t,h=[this._xy[0],this._xy[1],0,s,c,0,u,l,0,r,o,0];return n.set(h,[1,1,1,1],3,[0,0,0,0,1,1,1,1]),this._curves.push(n),this._xy[0]=r,this._xy[1]=o,this},v.prototype.bezierCurveTo=function(e,t,r,o,i,n){var s=\"Path2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\";f.assert_number(e,\"cp1x\",s),f.assert_number(t,\"cp1y\",s),f.assert_number(r,\"cp2x\",s),f.assert_number(o,\"cp2y\",s),f.assert_number(i,\"x\",s),f.assert_number(n,\"y\",s);var c=new a.BCurve,u=[this._xy[0],this._xy[1],0,e,t,0,r,o,0,i,n,0];return c.set(u,[1,1,1,1],3,[0,0,0,0,1,1,1,1]),this._curves.push(c),this._xy[0]=i,this._xy[1]=n,this},v.prototype.circleArcTo=function(e,t,r,o,i){var n=\"Path2D.circleArcTo(radius, longest, anticlockwise, x, y)\";f.assert_number(e,\"radius\",n),f.assert_arg(e>0,\"radius\",\"must be positive\",n),f.assert_boolean(t,\"longest\",n),f.assert_boolean(r,\"anticlockwise\",n),f.assert_number(o,\"x\",n),f.assert_number(i,\"y\",n);var s=b(this._xy,e,t,r,[o,i]);return s&&(this._curves.push(s),this._xy[0]=o,this._xy[1]=i),this},v.prototype.ellipseArcTo=function(e,t,r,i,n,s,a){var c=\"Path2D.ellipseArcTo(xRadius, yRadius, rotation, longest, anticlockwise, x, y)\";if(f.assert_number(e,\"xRadius\",c),f.assert_arg(e>0,\"xRadius\",\"must be positive\",c),f.assert_number(t,\"yRadius\",c),f.assert_arg(t>0,\"yRadius\",\"must be positive\",c),f.assert_number(r,\"rotation\",c),f.assert_boolean(i,\"longest\",c),f.assert_boolean(n,\"anticlockwise\",c),f.assert_number(s,\"x\",c),f.assert_number(a,\"y\",c),e<t){var l=e;e=t,t=l,r+=Math.PI/2}var h=Math.cos(r),d=Math.sin(r),p=e/t,g=o.Matrix22.multiply([],[1,0,0,p],[h,-d,d,h]),v=b(o.Vector2.transformMatrix22([],this._xy,g),e,i,n,o.Vector2.transformMatrix22([],[s,a],g));if(v){var _=[v.getCenter()[0],v.getCenter()[1]];o.Matrix22.invert(g,g),o.Vector2.transformMatrix22(_,_,g),_[2]=0;var y=v.getRadius(),m=[y*h,y*d,0],E=new u.Ellipse;E.set(_,v.getNormal(),m,1/p),E.limitRange(v.getRange()),this._curves.push(E),this._xy[0]=s,this._xy[1]=a}return this},v.prototype.closePath=function(){if(this._curves.length>0){var e=this._curves[0],t=e.evaluatePosition(e.getRange()[0]);this.lineTo(t[0],t[1]),this._addWire()}return this},v.prototype.addCircle=function(e,t,r){var o=\"Path2D.addCircle(x, y, radius)\";f.assert_number(e,\"x\",o),f.assert_number(t,\"y\",o),f.assert_number(r,\"radius\",o),f.assert_arg(r>0,\"radius\",\"must be positive\",o),this._addWire();var i=new c.Circle;return i.set([e,t,0],[0,0,1],[r,0,0]),this._curves.push(i),this._addWire(),this},v.prototype.addEllipse=function(e,t,r,o,i){i=void 0===i?0:i;var n=\"Path2D.addEllipse(x, y, xRadius, yRadius, rotation)\";if(f.assert_number(e,\"x\",n),f.assert_number(t,\"y\",n),f.assert_number(r,\"xRadius\",n),f.assert_arg(r>0,\"xRadius\",\"must be positive\",n),f.assert_number(o,\"yRadius\",n),f.assert_arg(o>0,\"yRadius\",\"must be positive\",n),f.assert_number(i,\"rotation\",n),this._addWire(),r<o){var s=r;r=o,o=s,i+=Math.PI/2}var a=new u.Ellipse,c=Math.cos(i),l=Math.sin(i),h=o/r;return a.set([e,t,0],[0,0,1],[r*c,r*l,0],h),this._curves.push(a),this._addWire(),this},v.prototype.addSVGPath=function(e,t){t=void 0!==t&&t;var r=\"Path2D.addSVGPath(pathString, [includeOpen])\";f.assert_string(e,\"pathString\",r),f.assert_boolean(t,\"includeOpen\",r),this._addWire(),this._xy[0]=0,this._xy[1]=0;var o=function(e){for(var t=[];e.length>0;){var r=e.slice(1).search(/[MmZzLlHhVvCcSsQqTtAa]/)+1;r<=0&&(r=e.length);var o=e.slice(0,r).trim();o.length>0&&t.push(o),e=e.slice(r).trim()}return t}(e);f.assert_arg(o.length>0,\"pathString\",\"cannot be empty string\",r);for(var n=[this._xy[0],this._xy[1]],s=[this._xy[0],this._xy[1]],a=0;a<o.length;++a){var c,u,l,h,d,p,g,v=function(e,t){f.assert_arg(e,\"pathString\",t+' \"'+o[a]+'\"',r)},_=o[a].charAt(0).toUpperCase(),y=_!==o[a].charAt(0),m=C(o[a],v),E=y?this._xy:[0,0];switch(_){case\"M\":for(v(m.length>=2,\"insufficient arguments in command\"),v(m.length%2==0,\"command requires pairs of x,y arguments\"),t||this._discardIfOpen(),this.moveTo(m[0]+E[0],m[1]+E[1]),g=2;g<m.length;g+=2)this.lineTo(m[g]+E[0],m[g+1]+E[1]);break;case\"Z\":v(0===m.length,\"command should not have arguments\"),this.closePath();break;case\"L\":for(v(m.length>=2,\"insufficient arguments in command\"),v(m.length%2==0,\"command requires pairs of x,y arguments\"),g=0;g<m.length;g+=2)this.lineTo(m[g]+E[0],m[g+1]+E[1]);break;case\"H\":for(v(m.length>=1,\"insufficient arguments in command\"),g=0;g<m.length;g+=1)this.lineTo(m[g]+E[0],this._xy[1]);break;case\"V\":for(v(m.length>=1,\"insufficient arguments in command\"),g=0;g<m.length;g+=1)this.lineTo(this._xy[0],m[g]+E[1]);break;case\"C\":for(v(m.length>=6,\"insufficient arguments in command\"),v(m.length%6==0,\"command requires sets of 6 arguments\"),g=0;g<m.length;g+=6)c=m[g]+E[0],u=m[g+1]+E[1],l=m[g+2]+E[0],h=m[g+3]+E[1],d=m[g+4]+E[0],p=m[g+5]+E[1],this.bezierCurveTo(c,u,l,h,d,p),s[0]=l,s[1]=h;break;case\"S\":for(v(m.length>=4,\"insufficient arguments in command\"),v(m.length%4==0,\"command requires sets of 4 arguments\"),g=0;g<m.length;g+=4)c=2*this._xy[0]-s[0],u=2*this._xy[1]-s[1],l=m[g]+E[0],h=m[g+1]+E[1],d=m[g+2]+E[0],p=m[g+3]+E[1],this.bezierCurveTo(c,u,l,h,d,p),s[0]=l,s[1]=h;break;case\"Q\":for(v(m.length>=4,\"insufficient arguments in command\"),v(m.length%4==0,\"command requires sets of 4 arguments\"),g=0;g<m.length;g+=4)c=m[g]+E[0],u=m[g+1]+E[1],l=m[g+2]+E[0],h=m[g+3]+E[1],this.quadraticCurveTo(c,u,l,h),n[0]=c,n[1]=u;break;case\"T\":for(v(m.length>=2,\"insufficient arguments in command\"),v(m.length%2==0,\"command requires pairs of arguments\"),g=0;g<m.length;g+=2)c=2*this._xy[0]-n[0],u=2*this._xy[1]-n[1],l=m[g]+E[0],h=m[g+1]+E[1],this.quadraticCurveTo(c,u,l,h),n[0]=c,n[1]=u;break;case\"A\":for(v(m.length>=7,\"insufficient arguments in command\"),v(m.length%7==0,\"command requires sets of 7 arguments\"),g=0;g<m.length;g+=7){var x=Math.abs(m[g]),R=Math.abs(m[g+1]),A=m[g+2]*Math.PI/180,P=0!==m[g+3],V=0!==m[g+4],T=m[g+5]+E[0],b=m[g+6]+E[1];x<i.KERNEL_TOLERANCE||R<i.KERNEL_TOLERANCE?this.lineTo(T,b):this.ellipseArcTo(x,R,A,P,V,T,b)}break;default:v(!1,\"unrecognised command\")}\"Q\"!==_&&\"T\"!==_&&(n=[this._xy[0],this._xy[1]]),\"C\"!==_&&\"S\"!==_&&(s=[this._xy[0],this._xy[1]])}return t||this._discardIfOpen(),this._addWire(),this},v.prototype.getWireBody=function(){return this._addWire(),this._wireBody},v.prototype.computeRegionizedWireBody=function(){this.getWireBody();for(var e=new n.WireBody,t=(0,d.mergeSketchRegions)(this._wireBody.getWires()),r=0;r<t.length;++r)for(var o=t[r].getLoops(),i=0;i<o.length;++i){var a=o[i],c=new s.Wire;c.addEdges(Array.from(a.collectEdges())),e.addWire(c)}return e},v.prototype.reset=function(){this._wireBody=new n.WireBody,this._curves=[],this._xy=[0,0]},t.Path2D=v},2208:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.ProgenitorMap=void 0;var o=r(2468),i=r(4728),n=function(){this._newToOldMap=new Map,this._oldToNewMap=new Map,this._labelMap=new Map};n.prototype.addEntry=function(e,t,r){t=Array.from(new Set(t)),i.ConsoleUtils.assert(!this._newToOldMap.has(e)),this._newToOldMap.set(e,t),r&&this._labelMap.set(e,r);for(var o=0;o<t.length;o++){var n=t[o],s=this._oldToNewMap.get(n);s?s.indexOf(e)<0&&s.push(e):this._oldToNewMap.set(n,[e])}},n.prototype.hasEntry=function(e){return this._newToOldMap.has(e)},n.prototype.removeEntry=function(e){var t=this._newToOldMap.get(e);if(t){this._newToOldMap.delete(e),this._labelMap.delete(e);for(var r=0;r<t.length;r++){var o=this._oldToNewMap.get(t[r]),n=o.indexOf(e);i.ConsoleUtils.assert(n>=0),o.splice(n,1),0===o.length&&this._oldToNewMap.delete(t[r])}}},n.prototype.size=function(){return this._newToOldMap.size},n.prototype.getProgenitors=function(e){return this._newToOldMap.get(e)},n.prototype.getDescendants=function(e){return this._oldToNewMap.get(e)||[]},n.prototype.getLabel=function(e){return this._labelMap.get(e)||\"\"},n.prototype.getAllNewTopology=function(){return Array.from(this._newToOldMap.keys())},n.prototype.getAllOldTopology=function(){return Array.from(this._oldToNewMap.keys())},n.prototype.clear=function(){this._newToOldMap.clear(),this._oldToNewMap.clear(),this._labelMap.clear()},n.prototype.mergeMaps=function(e){var t=new n,r=new Set(this._newToOldMap.keys());return e._newToOldMap.keys().forEach((function(e){r.add(e)})),r.forEach((function(r){var o=this.getProgenitors(r)||[],i=e.getProgenitors(r)||[],n=this.getLabel(r)||e.getLabel(r);t.addEntry(r,o.concat(i),n)})),t},n.prototype.collapseMaps=function(e,t){var r=!1,o=!1;t&&(void 0!==t.keepIntermediates&&(r=t.keepIntermediates),void 0!==t.keepAllDescendants&&(o=t.keepAllDescendants));var i=new n,s=void 0;return o&&(s=new Set(e._newToOldMap.keys())),this._newToOldMap.forEach((function(t,n){for(var a=new Set,c=0;c<t.length;c++){var u=t[c],l=e.getProgenitors(u);l&&l.length>0?(l.forEach((function(e){a.add(e)})),r&&a.add(u)):a.add(u),o&&s.delete(u)}i.addEntry(n,Array.from(a))})),o&&s.forEach((function(t){var r=e.getProgenitors(t);i.hasEntry(t)&&(r=r.concat(i.getProgenitors(t)),i.removeEntry(t)),i.addEntry(t,r)})),i},n.prototype.toString=function(){for(var e=\"ProgenitorMap:\\n\",t=this.getAllNewTopology(),r=0;r<t.length;r++){var i=t[r];e+=o.TOPOLOGY_TYPES.toString(i.getTopologyType())+\":\"+i.getGuid();var n=this.getLabel(i);n&&(e+=\" '\"+n+\"'\"),e+=\" -> [ \";for(var s=this.getProgenitors(i),a=0;a<s.length;a++)a>0&&(e+=\", \"),e+=o.TOPOLOGY_TYPES.toString(s[a].getTopologyType())+\":\"+s[a].getGuid();e+=\" ]\\n\"}return e},t.ProgenitorMap=n},3332:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createBlock=void 0;var o=r(64),i=r(2472),n=r(2468),s=r(4728);t.createBlock=function(e,t){var r=[Math.min(e[0],t[0]),Math.min(e[1],t[1]),Math.min(e[2],t[2])],a=[Math.max(e[0],t[0]),Math.max(e[1],t[1]),Math.max(e[2],t[2])];s.ConsoleUtils.assert(a[0]-r[0]>n.KERNEL_TOLERANCE,\"block is degenerate in x axis\"),s.ConsoleUtils.assert(a[1]-r[1]>n.KERNEL_TOLERANCE,\"block is degenerate in y axis\"),s.ConsoleUtils.assert(a[2]-r[2]>n.KERNEL_TOLERANCE,\"block is degenerate in z axis\");var c=[[r[0],r[1],r[2]],[a[0],r[1],r[2]],[a[0],a[1],r[2]],[r[0],a[1],r[2]]],u=(0,o.createFaceFromPolyline)(c),l=a[2]-r[2];return(0,i.extrudeFace)(u,l)}},9128:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.createCylinder=t.createCone=void 0;var o=r(1972),i=r(64),n=r(2468),s=r(8292),a=r(2984),c=r(3440),u=r(8360),l=r(2956),h=r(4524),d=r(6776),p=r(6508),g=r(5837),f=r(9984),v=r(4728),_=function(e,t,r,_,y,m){var E=e,x=t,R=Math.abs(r),A=void 0===_?R:Math.abs(_);if(R<n.KERNEL_TOLERANCE){E=t,x=e;var P=R;R=A,A=P}v.ConsoleUtils.assert(R>n.KERNEL_TOLERANCE);var V=o.Vector3.createFloat64();o.Vector3.subtract(V,x,E);var T=o.Vector3.length(V);v.ConsoleUtils.assert(T>n.KERNEL_TOLERANCE),o.Vector3.scale(V,V,1/T);var b=A-R,C=Math.abs(b)>n.KERNEL_TOLERANCE,O=0;C&&(O=Math.atan2(b,T));var L,S=o.Vector3.createFloat64();m&&o.Vector3.subtract(S,m,o.Vector3.scale(S,V,o.Vector3.dot(m,V))),(!m||o.Vector3.squaredLength(S)<n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE)&&o.Vector3.computeOrthogonal(S,V),o.Vector3.normalize(S,S),o.Vector3.scale(S,S,R);var M=y||1;v.ConsoleUtils.assert(M>0&&M<=1);var w=Math.max(R,A);Math.abs(w*(1-M))<n.KERNEL_TOLERANCE?C?(L=new a.Cone).set(E,R,V,O,S,1):(L=new c.Cylinder).set(E,R,V,S,1):C?(L=new l.EllipticalCone).set(E,S,M,V,O,1):(L=new u.EllipticalCylinder).set(E,S,M,V,1);var N=[0,T/Math.cos(O)];L.limitRangeU(N);var F=(0,i.makeConeOrCylinderVParamLoop)(L,N[0]),I=(0,i.makeConeOrCylinderVParamLoop)(L,N[1]);F.getCoedges()[0].setReversed(!0);var D=[];D[0]=new d.Face,D[0].setSurface(L),D[0].addLoops([F,I]);var j=F.getCoedges()[0].getEdge();if(j.getCurve()){var B=new h.Loop;B.addCoedge((0,i.createCoedgeOnEdge)(j)),(G=new d.Face).addLoop(B);var U=new s.Plane;U.set(E,V),G.setSurface(U),G.setReversed(!0),D.push(G),v.ConsoleUtils.assert(B.getCoedges()[0].uvAngleSubtended(E)<-n.KERNEL_TOLERANCE)}var k=I.getCoedges()[0].getEdge();if(k.getCurve()){var G,z=new h.Loop;z.addCoedge((0,i.createCoedgeOnEdge)(k)),(G=new d.Face).addLoop(z);var Y=new s.Plane;Y.set(x,V),G.setSurface(Y),D.push(G),v.ConsoleUtils.assert(z.getCoedges()[0].uvAngleSubtended(x)<-n.KERNEL_TOLERANCE)}var K=new p.Shell;K.addFaces(D);var q=new g.Lump;q.addShell(K);var W=new f.Body;return W.addLump(q),W};t.createCone=_,t.createCylinder=function(e,t,r,o,i){return _(e,t,r,r,o,i)}},4268:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.svgFromWire=void 0;var o=r(2468),i=r(4728);t.svgFromWire=function(e){e.getTopologyType()===o.TOPOLOGY_TYPES.WIREBODY&&console.warn(\"svgFromWire: Pass a wire, not a wire body.\"),i.ConsoleUtils.assert(e.getTopologyType()===o.TOPOLOGY_TYPES.WIRE,\"Input topology is not a Wire\");var t=e.getOrderedEdges();if(0===t.edges.length)return\"\";for(var r=t.start,n=r.getPosition(),s=\"M \"+n[0]+\" \"+n[1],a=0;a<t.edges.length;++a){var c=t.edges[a];n=(r=r===c.getStartVertex()?c.getEndVertex():c.getStartVertex()).getPosition();var u=c.getCurve();if(u)if(u.getGeometryType()===o.GEOMETRY_TYPES.LINE)s+=\" L \"+n[0]+\" \"+n[1];else if(u.getGeometryType()!==o.GEOMETRY_TYPES.BCURVE||3!==u.getDegree()||u.isRational())console.warn(\"Unhandled curve type in svgFromWire\");else{for(var l=[],h=u.getBezierSegments(),d=0;d<h.length;d++){var p=h[d];if(p)for(var g=p.getControlPoints(),f=0;f<g.length;f+=3)l.push([g[f],g[f+1]])}r===c.getStartVertex()!==c.isReversed()&&l.reverse(),i.ConsoleUtils.assert(l.length===4*h.length,\"Unexpected number of control points\");for(var v=0;v<h.length;++v)s+=\" C \"+l[4*v+1][0]+\" \"+l[4*v+1][1]+\" \"+l[4*v+2][0]+\" \"+l[4*v+2][1]+\" \",v===h.length-1?s+=n[0]+\" \"+n[1]:s+=l[4*v+3][0]+\" \"+l[4*v+3][1]}}return s}},7616:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.mergeConnectedFaces=t.mergeFaces=t.findConnectedFaces=t.findConnectedEdges=t.mergeCoincidentVertices=t.transformTopology=t.reverseFace=void 0;var o=r(1972),i=r(2468),n=r(4524),s=r(4728),a=function(e,t){var r=!1,o=!0,i=new Set;t&&(void 0!==t.inputFacesOnly&&(r=t.inputFacesOnly),void 0!==t.allowVertexConnections&&(o=t.allowVertexConnections),void 0!==t.barrierEdges&&(i=new Set(t.barrierEdges)));var n=new Set,s=new Set(e);for(var a,c=[];s.size>0;){n.clear();var u=s.values().next().value;a=u,s.delete(a),n.add(a),n.forEach((function(t){var a=new Set;o?t.collectVertices().forEach((function(e){e.collectEdges(a)})):(t.collectEdges(a),i.forEach((function(e){a.delete(e)}))),a.forEach((function(t){for(var o=t.getCoedge(),i=o;i;){if(i.getLoop()){var a=i.getLoop().getFace();n.has(a)||r&&!(e.indexOf(a)>=0)||(n.add(a),s.delete(a))}(i=i.getPartner())===o&&(i=void 0)}}))})),c.push(Array.from(n))}return c},c=function(e){if(1!==e.length){var t=new Set;e.forEach((function(e){e.collectEdges(t)}));var r=new Set,o=[];t.forEach((function(t){var i=t.getCoedges(),n=i.map((function(t){return e.indexOf(t.getFace())>=0}));if(2===i.length&&n[0]&&n[1])o.push(t);else for(var s=0;s<i.length;s++)n[s]&&(r.add(i[s]),i[s].resetUVCurve())}));for(var i=[];r.size>0;){for(var a=[],c=r.values().next().value;c;){a.push(c),r.delete(c);var u=c,l=void 0,h=2*c.getEndVertex().getEdges().length;do{if(u=u.getNext(),r.has(u)){l=u;break}u=u.getPartner()}while(u&&u!==c&&--h>0);c=l}s.ConsoleUtils.assert(a[0].getStartVertex()===a[a.length-1].getEndVertex()),i.push(a)}o.forEach((function(e){e.setStartVertex(null),e.setEndVertex(null)}));var d=e[0];d.setLoops([]),i.forEach((function(e){var t=new n.Loop;t.addCoedges(e),d.addLoop(t)}));for(var p=1;p<e.length;p++)e[p].getShell()&&e[p].getShell().removeFace(e[p]);var g=d.getSurface();g.unlimitRangeU(),g.unlimitRangeV()}};t.reverseFace=function(e){e.setReversed(!e.isReversed());for(var t,r=e.getLoops(),o=0;o<r.length;++o){for(var i=r[o].getCoedges(),n=0;n<i.length;++n)(t=i[n]).setReversed(!t.isReversed());i.reverse()}},t.transformTopology=function(e,t){Array.isArray(e)||(e=[e]);for(var r=new Set,o=new Set,n=new Set,s=0;s<e.length;++s){var a=e[s],c=a.getTopologyType();a.collectVertices(r),c!==i.TOPOLOGY_TYPES.VERTEX&&a.collectEdges(o),c!==i.TOPOLOGY_TYPES.VERTEX&&c!==i.TOPOLOGY_TYPES.EDGE&&c!==i.TOPOLOGY_TYPES.COEDGE&&c!==i.TOPOLOGY_TYPES.LOOP&&a.collectFaces(n)}r.forEach((function(e){e.getPoint()&&e.getPoint().transform(t)})),o.forEach((function(e){e.getCurve()&&e.getCurve().transform(t)})),n.forEach((function(e){e.getSurface()&&e.getSurface().transform(t)}))},t.mergeCoincidentVertices=function(e){for(var t=i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE,r=[],n=0;n<e.length;++n){var s,a=e[n],c=a.getStartVertex(),u=a.getEndVertex();for(s=0;s<r.length&&!(o.Vector3.squaredDistance(c.getPosition(),r[s].getPosition())<t);++s);if(s===r.length?r.push(c):(r[s].setPrecision(Math.max(r[s].getPrecision(),c.getPrecision())),a.setStartVertex(r[s])),c!==u)for(s=0;s<r.length&&!(o.Vector3.squaredDistance(u.getPosition(),r[s].getPosition())<t);++s);s===r.length?r.push(u):(r[s].setPrecision(Math.max(r[s].getPrecision(),u.getPrecision())),a.setEndVertex(r[s]))}},t.findConnectedEdges=function(e,t){for(var r=t||!1,o=[],i=new Set,n=0;n<e.length;++n){var s=e[n];if(!i.has(s)){for(var a=[],c=[s],u=0;u<c.length;++u){var l=c[u];i.has(l)||r&&!(e.indexOf(l)>=0)||(i.add(l),a.push(l),c=c.concat(l.getStartVertex().getEdges(),l.getEndVertex().getEdges()))}o.push(a)}}return o},t.findConnectedFaces=a,t.mergeFaces=c,t.mergeConnectedFaces=function(e){var t=[];return a(e,{inputFacesOnly:!0,allowVertexConnections:!1}).forEach((function(e){c(e),t.push(e[0])})),t}},4728:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r={assert:function(e,t){if(!e)throw new Error(t)}};t.ConsoleUtils=r},6120:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=!1,o=!1,i={},n={init3D:function(e){for(var t in r=!0,e)\"function\"==typeof e[t]&&(n[t]=e[t].bind(e))},setLevel:function(e,t){var r=i[e];return i[e]=t,console.log(\"Debug of \"+e+\" set to level \"+t),r},level:function(e){if(!r)return 0;var t=i[e];return void 0===t?0:t},setConsoleWarnings:function(e){o=e},warn:function(e){o&&console.warn(e)}};t.DebugUtils=n},6344:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.edgesAreCoincident=t.curvesAreCoincident=void 0;var o=r(1972),i=r(2468),n=r(4728),s=r(6120);function a(e,t,r,i,n){var s=e.evaluatePosition(t),a=r.closestToPointParam(s,i),c=r.evaluatePosition(a);return o.Vector3.squaredDistance(s,c)<n*n}function c(e,t,r,i,n,s){var c=[0,0,0];if(o.Vector3.isParallel(e,t.getNormal()))return!0;o.Vector3.add(c,t.getCenter(),e);var u=t.closestToPointParam(c,i);if(u>i[0]&&u<i[1]&&!a(t,u,r,n,s))return!1;o.Vector3.sub(c,t.getCenter(),e);var l=t.closestToPointParam(c,i);return!(l>i[0]&&l<i[1]&&!a(t,l,r,n,s))}function u(e,t,r,o,i){if(!a(e,.5*(r[0]+r[1]),t,o,i))return!1;var n=t.closestToPointParam(e.getCenter(),o);return!(n>o[0]&&n<o[1]&&!a(t,n,e,r,i))}var l=function(e,t,r,l,h){r?0===r.length&&(r=e.getRangeUnlimited()):r=e.getRange(),l?0===l.length&&(l=t.getRangeUnlimited()):l=t.getRange(),h||(h=i.KERNEL_TOLERANCE);var d=e.getGeometryType(),p=t.getGeometryType();if(!(isFinite(r[0])&&isFinite(r[1])&&isFinite(l[0])&&isFinite(l[1]))){var g=r[0]===Number.NEGATIVE_INFINITY&&r[1]===Number.POSITIVE_INFINITY,f=l[0]===Number.NEGATIVE_INFINITY&&l[1]===Number.POSITIVE_INFINITY;return!(!g||!f)&&(n.ConsoleUtils.assert(d===i.GEOMETRY_TYPES.LINE&&p===i.GEOMETRY_TYPES.LINE),function(e,t,r){if(e===t)return!0;if(!a(e,0,t,[],r)||!a(t,0,e,[],r))return!1;var i=e.evaluateDt(0);o.Vector3.normalize(i,i);var n=t.evaluateDt(0);return o.Vector3.normalize(n,n),o.Vector3.dot(i,n)<0&&o.Vector3.negate(n,n),o.Vector3.equals(i,n,o.FLOAT64_TOLERANCE)}(e,t,h))}return e===t&&Math.abs(r[0]-l[0])<o.FLOAT64_TOLERANCE&&Math.abs(r[1]-l[1])<o.FLOAT64_TOLERANCE||!!(a(e,r[0],t,l,h)&&a(e,r[1],t,l,h)&&a(t,l[0],e,r,h)&&a(t,l[1],e,r,h))&&(d===i.GEOMETRY_TYPES.LINE&&p===i.GEOMETRY_TYPES.LINE||(d===i.GEOMETRY_TYPES.CIRCLE&&p===i.GEOMETRY_TYPES.CIRCLE?function(e,t,r,i,n){var s=.5*(r[0]+r[1]),u=.5*(i[0]+i[1]);if(!a(e,s,t,i,n)||!a(t,u,e,r,n))return!1;var l=o.Vector3.sub([0,0,0],t.getCenter(),e.getCenter());if(o.Vector3.squaredLength(l)>o.FLOAT64_TOLERANCE*o.FLOAT64_TOLERANCE){if(o.Vector3.normalize(l,l),!c(l,e,t,r,i,n))return!1;if(!c(l,t,e,i,r,n))return!1}if(o.Vector3.dot(e.getNormal(),t.getNormal())<0?o.Vector3.add(l,e.getNormal(),t.getNormal()):o.Vector3.sub(l,e.getNormal(),t.getNormal()),o.Vector3.squaredLength(l)>o.FLOAT64_TOLERANCE*o.FLOAT64_TOLERANCE){if(o.Vector3.normalize(l,l),!c(l,e,t,r,i,n))return!1;if(!c(l,t,e,i,r,n))return!1}if(r[1]-r[0]<2*Math.PI-o.FLOAT64_TOLERANCE){var h=e.evaluatePosition(s+Math.PI),d=t.closestToPointParam(h,i);if(d>i[0]&&d<i[1]&&!a(t,d,e,r,n))return!1}if(i[1]-i[0]<2*Math.PI-o.FLOAT64_TOLERANCE){var p=t.evaluatePosition(u+Math.PI),g=e.closestToPointParam(p,r);if(g>r[0]&&g<r[1]&&!a(e,g,t,i,n))return!1}return!0}(e,t,r,l,h):d===i.GEOMETRY_TYPES.CIRCLE&&p===i.GEOMETRY_TYPES.LINE?u(e,t,r,l,h):d===i.GEOMETRY_TYPES.LINE&&p===i.GEOMETRY_TYPES.CIRCLE?u(t,e,l,r,h):function(e,t,r,i,n){for(var a=[r[0],r[1]],c=[e.evaluatePosition(r[0]),e.evaluatePosition(r[1])],u=0;u<100;++u){var l=.5*(a[0]+a[1]),h=e.evaluatePosition(l),d=t.closestToPointParam(h,i),p=t.evaluatePosition(d),g=o.Vector3.sub([0,0,0],p,h);if(o.Vector3.squaredLength(g)>n*n)return!1;if(o.Vector3.distance(c[0],h)+o.Vector3.distance(h,c[1])<n)return!0;var f=e.evaluateDt(l);o.Vector3.dot(f,g)<0?(a[0]=l,c[0]=h):(a[1]=l,c[1]=h)}return s.DebugUtils.warn(\"Binary search in coincidence check exceeded maximum iterations\"),!0}(e,t,r,l,h)))};t.curvesAreCoincident=l,t.edgesAreCoincident=function(e,t){if(e===t)return!0;var r=Math.max(i.KERNEL_TOLERANCE,e.getPrecision(),t.getPrecision()),n=e.getCurve(),s=t.getCurve();if(!n||!s){if(n||s)return!1;var a=e.getStartVertex(),c=t.getStartVertex();r=Math.max(r,a.getPrecision(),c.getPrecision());var u=a.getPosition(),h=c.getPosition();return o.Vector3.squaredDistance(u,h)<r*r}var d=e.getRange();e.isReversed()&&(d=[-d[1],-d[0]]);var p=t.getRange();return t.isReversed()&&(p=[-p[1],-p[0]]),l(n,s,d,p,r)}},3900:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.CCI=void 0;var o=r(1972),i=r(9892),n=r(880),s=function(e,t){this.cutInfo=e,this.cutByInfo=t},a=function(e,t,r,o,n){this._cu1=e,this._range1=t,this._cu2=r,this._range2=o,this._epsilon=n,this._tree=new i.SubCurveTree(e,t,r,o,n)};a.prototype.intersect=function(){var e=[];this._tree.build();for(var t=0;t<this._tree._overlaps.length;++t){var r=this._tree._overlaps[t][0],o=this._tree._overlaps[t][1];e=e.concat(this._solve(r._range,o._range))}return this._merge(e),e},a.prototype._distanceSquared=function(e,t){var r=this._cu1.evaluatePosition(e),i=this._cu2.evaluatePosition(t);return o.Vector3.squaredDistance(r,i)},a.prototype._solve=function(e,t){var r=[],o=[.5*(e[0]+e[1]),.5*(t[0]+t[1])],i=this._relaxNR(o,[e,t]),a=i===n.RelaxResult.Success;if(i===n.RelaxResult.OutOfRange){var c=o[0]<e[0]+1e-12||o[0]>e[1]-1e-12,u=o[1]<t[0]+1e-12||o[1]>t[1]-1e-12;if(c||u)this._distanceSquared(o[0],o[1])<this._epsilon*this._epsilon&&(a=!0)}return a&&r.push(new s({param:o[0],atVertex:void 0},{param:o[1],atVertex:void 0})),r},a.prototype._relaxNR=function(e,t){var r=this,i=(0,n.newtonRaphson2D)((function(e){var t=r._cu1.evaluatePosition(e[0]),i=r._cu2.evaluatePosition(e[1]),n=[t[0]-i[0],t[1]-i[1]],s=r._cu1.evaluateDt(e[0]),a=r._cu2.evaluateDt(e[1]);return o.Vector3.negate(a,a),{val:n,deriv1:s,deriv2:a}}),e,t);return e[0]=i.param[0],e[1]=i.param[1],i.status},a.prototype._merge=function(e){e.sort((function(e,t){return e.cutInfo.param-t.cutInfo.param}));for(var t=0;t<e.length;t++)if(e[t])for(var r=e[t].cutInfo.param,o=e[t].cutByInfo.param,i=t+1;i<e.length;i++)if(e[i]){var n=e[i].cutInfo.param,s=e[i].cutByInfo.param;if(n>r+1e-11)break;if(Math.abs(s-o)<=1e-11){e[t]=void 0;break}}for(t=0;t<e.length;t++)e[t]||(e.splice(t,1),t--)},t.CCI=a},8460:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.computeCurveCurveIntersections=void 0;var o=r(1972),i=r(2468),n=r(3565),s=r(1096),a=r(7580),c=r(6940),u=r(5856),l=r(5416),h=r(5896),d=r(3900),p=i.KERNEL_TOLERANCE,g=function(e,t,r,i){var n=t,s=e.getRange();if(e.getCurve().isPeriodicUnlimited()&&(n<s[0]-o.FLOAT64_TOLERANCE||n>s[1]+o.FLOAT64_TOLERANCE)){var a=e.getCurve().getPeriodUnlimited();n=(0,h.foldNearTo)(n,.5*(s[0]+s[1]),a)}var c=Math.abs(n-s[0])<Math.abs(n-s[1])?0:1,u=o.Vector3.length(e.evaluateDt(n));return Math.abs(n-s[c])*u<r?{param:s[c],atVertex:e.getVertex(c)}:n>=s[0]&&n<=s[1]?{param:n,atVertex:void 0}:!e.isClosed()&&i.distanceToPoint(e.getVertex(c).getPosition())<r?{param:s[c],atVertex:e.getVertex(c)}:void 0},f=function(e,t,r,i,n){var s=g(e,t,n,r);if(s){if(s.atVertex){var a=r.getRange();if(e===r)a=[i-.1*(l=Math.abs(a[1]-a[0])),i+.1*l];var c=r.closestToPointParam(s.atVertex.getPosition(),a);o.Vector3.distance(r.evaluatePosition(c),s.atVertex.getPosition())<n&&(i=c)}var u=g(r,i,n,e);if(u){if(u.atVertex){var l;a=e.getRange();if(e===r)a=[t-.1*(l=Math.abs(a[1]-a[0])),t+.1*l];c=e.closestToPointParam(u.atVertex.getPosition(),a);o.Vector3.distance(e.evaluatePosition(c),u.atVertex.getPosition())<n&&(s=g(e,t=c,n,r))}if(s)return{cutInfo:s,cutByInfo:u}}}},v=function(e,t,r){var o=[t-e.getRange()[0],t-e.getRange()[1]];if(o[0]>=r&&o[1]<=-r)return{param:t,atVertex:void 0};var i=Math.abs(o[0])<Math.abs(o[1])?0:1;return Math.abs(o[i])<r?{param:e.getRange()[i],atVertex:e.getVertex(i)}:void 0},_=function(e,t,r,n,s,a,c){var u=e.getCurve().getPeriodUnlimited(),l=t.getCurve().getPeriodUnlimited(),d=[r[0],r[2]],p=[n[0],n[2]],f=[s/o.Vector3.length(e.evaluateDt(d[0])),s/o.Vector3.length(e.evaluateDt(d[1]))],v=[s/o.Vector3.length(t.evaluateDt(p[0])),s/o.Vector3.length(t.evaluateDt(p[1]))];if(((0,h.isParameterWithinPeriodicRange)(d[0],e.getRange(),u,f[0])||(0,h.isParameterWithinPeriodicRange)(d[1],e.getRange(),u,f[1]))&&((0,h.isParameterWithinPeriodicRange)(p[0],t.getRange(),l,v[0])||(0,h.isParameterWithinPeriodicRange)(p[1],t.getRange(),l,v[1]))){for(var _=0;_<2;_++){d[_]=(0,h.adjustParameterToPeriodicRange)(d[_],e.getRange(),u,!1,!0),p[_]=(0,h.adjustParameterToPeriodicRange)(p[_],t.getRange(),l,!1,!0);var y=(0,h.periodicDifference)(d[_],e.getRange()[0],u)<3e-15||(0,h.periodicDifference)(d[_],e.getRange()[1],u)<3e-15,m=(0,h.periodicDifference)(p[_],t.getRange()[0],l)<3e-15||(0,h.periodicDifference)(p[_],t.getRange()[1],l)<3e-15;if(d[_]-e.getRange()[0]<f[_]&&(d[_]=e.getRange()[0],y=!0),e.getRange()[1]-d[_]<f[_]&&(d[_]=e.getRange()[1],y=!0),p[_]-t.getRange()[0]<v[_]&&(p[_]=t.getRange()[0],m=!0),t.getRange()[1]-p[_]<v[_]&&(p[_]=t.getRange()[1],m=!0),y){var E=t.closestToPointParam(e.evaluatePosition(d[_]));p[_]=(0,h.adjustParameterToPeriodicRange)(E,t.getRange(),l,!1,!0)}if(m){var x=e.closestToPointParam(t.evaluatePosition(p[_]));if(d[_]=(0,h.adjustParameterToPeriodicRange)(x,e.getRange(),u,!1,!0),(0,h.periodicDifference)(d[_],e.getRange()[0],u)<3e-15||(0,h.periodicDifference)(d[_],e.getRange()[1],u)<3e-15){E=t.closestToPointParam(e.evaluatePosition(d[_]));p[_]=(0,h.adjustParameterToPeriodicRange)(E,t.getRange(),l,!1,!0)}}}var R,A;if((0,h.periodicDifference)(d[0],d[1],u)<Math.min(f[0],f[1])&&(0,h.periodicDifference)(p[0],p[1],l)<Math.min(v[0],v[1]))R=g(e,.5*(d[0]+d[1]),s,e),A=g(t,.5*(p[0]+p[1]),s,t);else{R=g(e,r[1],s,e),A=g(t,n[1],s,t);for(_=0;_<2;_++)if(!((0,h.periodicDifference)(d[_],R.param,u)<f[_]&&(0,h.periodicDifference)(p[_],A.param,l)<v[_])){var P,V,T=g(e,d[_],s,e),b=g(t,p[_],s,t);if(isFinite(u)){var C=(0,h.getShortestParametricRange)(T.param,R.param,u);P=(0,h.periodicDifference)(R.param,C[0],u)<=i.KERNEL_ANGULAR_TOLERANCE}else P=T.param>R.param;if(isFinite(l)){C=(0,h.getShortestParametricRange)(b.param,A.param,l);V=(0,h.periodicDifference)(A.param,C[0],l)<=i.KERNEL_ANGULAR_TOLERANCE}else V=b.param>A.param;a.push({rangeInfo:P?[R,T]:[T,R],rangeByInfo:V?[A,b]:[b,A]})}}c&&c.push({firstParam:R.param,secondParam:A.param})}},y=function(e,t,r,i){var n=e.getRange(),s=e.evaluatePosition(0),a=e.evaluateDt(0),c=o.Vector2.length(a),u=t.getRange(),l=t.evaluatePosition(0),d=t.evaluateDt(0),p=o.Vector2.length(d),g=[a[1]/c,-a[0]/c],_=t.evaluatePosition(u[0]);o.Vector2.subtract(_,_,s);var y=o.Vector2.dot(_,g),m=t.evaluatePosition(u[1]);o.Vector2.subtract(m,m,s);var E=o.Vector2.dot(m,g);if(Math.abs(y)<=i&&Math.abs(E)<=i){var x=o.Vector2.dot(_,a)/(c*c),R=o.Vector2.dot(m,a)/(c*c),A=[Math.min(x,R),Math.max(x,R)],P=i/c,V=i/p;if(A[1]<n[0]-P||A[0]>n[1]+P)return[];var T=[Math.max(n[0],A[0]),Math.min(n[1],A[1])];if(T[1]-T[0]<P){var b=.5*(T[0]+T[1]),C=Math.abs(R-x)>o.FLOAT64_TOLERANCE?u[0]+(u[1]-u[0])*(b-x)/(R-x):.5*(u[0]+u[1]);return[{cutInfo:v(e,b,P),cutByInfo:v(t,C,V)}]}if(!r)return[];var O=u[0]+(u[1]-u[0])*(T[0]-x)/(R-x),L=u[0]+(u[1]-u[0])*(T[1]-x)/(R-x);return[{rangeInfo:[v(e,T[0],P),v(e,T[1],P)],rangeByInfo:[v(t,Math.min(O,L),V),v(t,Math.max(O,L),V)]}]}if(y>i&&E>i||y<-i&&E<-i)return[];var S=[[a[0],-d[0],l[0]-s[0]],[a[1],-d[1],l[1]-s[1]]],M=(0,h.solveTwoEquationsTwoVariables)(S);if(M){var w=f(e,M[0],t,M[1],i);if(w)return[w]}return[]},m=function(e,t,r){var i,n=t.getCenter(),s=e.closestToPointParam(n,[]),a=e.evaluatePosition(s),c=o.Vector3.squaredDistance(a,n),u=[],l=t.getRadius(),h=l-Math.sqrt(c);if(h<-r);else if(h<r)i=t.closestToPointParam(a,[]),u.push({lineParam:s,circleParam:i});else for(var d=Math.sqrt(l*l-c)/o.Vector3.length(e.evaluateDt(0)),p=0;p<2;++p){var g=s+(0===p?-1:1)*d,f=e.evaluatePosition(g);i=t.closestToPointParam(f,[]),u.push({lineParam:g,circleParam:i})}return u},E=function(e,t,r,o,i,n){var s=[r[0]+t*o[0]-e*o[1],r[1]+t*o[1]+e*o[0],0];return{firstParam:i.closestToPointParam(s,[0,2*Math.PI]),secondParam:n.closestToPointParam(s,[0,2*Math.PI])}},x=function(e,t){t||(t=i.KERNEL_TOLERANCE);for(var r=[],o=!1,n=[],s=[],a=0;a<e.length;++a)e[a].hasOwnProperty(\"rangeInfo\")?(!1===o?(n=e[a].rangeInfo,s=e[a].rangeByInfo):Math.abs(n[1].param-e[a].rangeInfo[0].param)<t&&Math.abs(s[1].param-e[a].rangeByInfo[0].param)<t?(n[1]=e[a].rangeInfo[1],s[1]=e[a].rangeByInfo[1]):(r.push({rangeInfo:n,rangeByInfo:s}),n=e[a].rangeInfo,s=e[a].rangeByInfo),o=!0):e[a].hasOwnProperty(\"cutInfo\")?(o&&r.push({rangeInfo:n,rangeByInfo:s}),r.push(e[a]),o=!1):console.warn(\"unknown segment type in intersection code\");return o&&r.push({rangeInfo:n,rangeByInfo:s}),r},R=function(e,t,r,i,n){var s=r.getControlPoints(),a=r.getKnotVector(),c=e.getBoundingBox(),u=[];if(!r.getBoundingBox([a[0],a[a.length-1]]).intersectsWithTolerance(c,n))return u;var d=new Float64Array(s.length),p=s.length/3-1,y=o.Vector2.createFloat64FromValues(e.getStartVertex().getPosition()[0],e.getStartVertex().getPosition()[1]),m=o.Vector3.createFloat64();o.Vector3.sub(m,e.getEndVertex().getPosition(),e.getStartVertex().getPosition()),o.Vector3.normalize(m,m);for(var E=o.Vector2.createFloat64FromValues(m[0],m[1]),x=o.Vector2.createFloat64(),R=!0,A=0;A<=p;++A)x[0]=s[3*A+0],x[1]=s[3*A+1],d[3*A+0]=A/p,d[3*A+1]=(0,h.signedDistanceTo2DLine)(y,E,x),Math.abs(d[3*A+1])>n&&(R=!1),d[3*A+2]=0;if(R)return i?(u=function(e,t,r,i,n){var s=i.length/3-1,a=o.Vector3.createFloat64FromValues(i[0],i[1],i[2]),c=e.closestToPointParam(a),u=o.Vector3.createFloat64FromValues(i[3*s+0],i[3*s+1],i[3*s+2]),l=e.closestToPointParam(u),h=[v(e,c,r),v(e,l,r)];if(h[0].param>h[1].param){var d=h[0];h[0]=h[1],h[1]=d}var p=n[0],f=n[n.length-1];if(t.isReversed()){var _=p;p=-f,f=-_}var y=[g(t,p,r,e),g(t,f,r,e)];return h[0]&&h[1]&&y[0]&&y[1]?[{rangeInfo:h,rangeByInfo:y}]:(console.warn(\"Error in intersection computation.\"),[])}(e,t,n,s,a),u):[];var P=new Float64Array(3),V=[];return u=function(e,t,r,o,i,n,s,a,c){var u,l=[],h=o.length/3-1;3===n?(s[0]>s[1]&&(u=s[0],s[0]=s[1],s[1]=u),s[1]>s[2]&&(u=s[1],s[1]=s[2],s[2]=u),s[0]>s[1]&&(u=s[0],s[0]=s[1],s[1]=u)):2===n&&s[0]>s[1]&&(u=s[0],s[0]=s[1],s[1]=u);var d=[!1,!1,!1],p=i[i.length-1]-i[0],v=t.getCurve().tangentLength(i[0])*p;Math.abs(o[1])<r&&(0===n||s[0]>r/v)&&(n++,s[2]=s[1],s[1]=s[0],s[0]=0,d[0]=!0);var y=t.getCurve().tangentLength(i[i.length-1])*p;Math.abs(o[3*h+1])<r&&(0===n||1-s[n-1]>r/y)&&(s[n]=1,d[n]=!0,n++);for(var m=e.isReversed()?-1:1,E=t.isReversed()?-1:1,x=0,R=0;R<n+1;++R){var A=!1;if(R!==n){var P=s[R];s[R]=i[0]+(i[i.length-1]-i[0])*s[R];var V=t.getCurve().evaluatePosition(s[R]),T=e.getCurve().closestToPointParam(V,[]),b=f(e,T*m,t,s[R]*E,r);b&&(b.cutInfo.virtualIntersection=d[R],b.cutByInfo.virtualIntersection=d[R],l.push(b))}else P=i[i.length-1],A=Math.abs(o[3*h+1])>r;if(0===R&&P>0&&Math.abs(o[0])>r&&(A=!0),c){var C=void 0;if(a.length>0&&a[0][0]>=x&&a[0][0]<=P&&(C=a[0]),a.length>1&&a[1][0]>=x&&a[1][0]<=P&&(C=a[1]),void 0!==C&&Math.abs(C[1])<r&&!A){var O=[i[0]+(i[i.length-1]-i[0])*x,i[0]+(i[i.length-1]-i[0])*P],L=[e.getCurve().closestToPointParam(t.getCurve().evaluatePosition(O[0]),[]),e.getCurve().closestToPointParam(t.getCurve().evaluatePosition(O[1]),[])];if(Math.abs(L[0]-L[1])>r){var S=[g(e,L[0]*m,r,t),g(e,L[1]*m,r,t)],M=[g(t,O[0]*E,r,e),g(t,O[1]*E,r,e)];if(S[0]&&S[1]&&M[0]&&M[1]){var w=i[0]+(i[i.length-1]-i[0])*C[0];w!==O[0]&&w!==O[1]||(w=.5*(O[0]+O[1]));var N=e.getCurve().closestToPointParam(t.getCurve().evaluatePosition(w),[]);_(e,t,[L[0]*m,N*m,L[1]*m],[O[0]*E,w*E,O[1]*E],r,l);var F={cutInfo:g(e,N*m,r,e),cutByInfo:g(t,w*E,r,e)};F.cutInfo.virtualIntersection=!0,F.cutByInfo.virtualIntersection=!0,l.push(F)}}}}x=P}return l}(e,t,n,d,a,l.SplineCurveHelper.intersect_xAxis_NonRationalCubicBSpline_XYPlanar3D([0,0,0],d,P,V),P,V,i),u},A=function(e,t,r,o){var i=e.getBoundingBox(),n=[];if(!t.getBoundingBox().intersectsWithTolerance(i,o))return n;for(var s=t.getCurve().getBezierSegments(),a=s.length,c=0;c<a;c++)for(var u=R(e,t,s[c],r,o),l=0;l<u.length;++l)n.push(u[l]);return n=x(n)},P=function(e,t,r,i,n){var a=r.getControlPoints(),c=r.getKnotVector(),l=e.getBoundingBox(),d=[];if(!r.getBoundingBox([c[0],c[c.length-1]]).intersectsWithTolerance(l,n))return d;for(var v=!0,_=o.Vector2.createFloat64(),y=o.Vector2.createFloat64(),E=o.Vector2.createFloat64(),x=0;x<a.length/3-2&&v;++x)_[0]=a[3*x+0],_[1]=a[3*x+1],y[0]=a[3*x+3],y[1]=a[3*x+4],E[0]=a[3*x+6],E[1]=a[3*x+7],v=Math.abs((0,h.orient2D)(_,y,E))<p;if(v){var R=new s.Line,A=o.Vector3.createFloat64FromValues(a[0],a[1],a[2]),P=o.Vector3.createFloat64FromValues(a[a.length-3],a[a.length-2],a[a.length-1]);R.setFromEndpoints(A,P);var V=o.Vector3.distance(P,A),T=m(R,e.getCurve(),n);for(x=0;x<T.length;++x)if(T[x].lineParam>=0&&T[x].lineParam<=V){T[x].lineParam=t.getCurve().closestToPointParam(R.evaluatePosition(T[x].lineParam),[]);var b=g(e,T[x].circleParam*(e.isReversed()?-1:1),n,t),C=g(t,T[x].lineParam*(t.isReversed()?-1:1),n,e);C&&b&&d.push({cutInfo:b,cutByInfo:C})}return d}var O=o.Vector2.createFloat64(),L=o.Vector2.createFloat64(),S=o.Vector2.createFloat64(),M=o.Vector2.createFloat64();O[0]=-a[0]+3*a[3]-3*a[6]+a[9],O[1]=-a[1]+3*a[4]-3*a[7]+a[10],L[0]=3*a[0]-6*a[3]+3*a[6],L[1]=3*a[1]-6*a[4]+3*a[7],S[0]=-3*a[0]+3*a[3],S[1]=-3*a[1]+3*a[4],M[0]=a[0],M[1]=a[1];var w=e.getCurve().getCenter(),N=e.getCurve().getRadius()*e.getCurve().getRadius(),F=N,I=new Float64Array(7);I[0]=F*O[0]*O[0]+N*O[1]*O[1],I[1]=2*F*O[0]*L[0]+2*L[1]*N*O[1],I[2]=2*S[0]*F*O[0]+L[1]*L[1]*N+F*L[0]*L[0]+2*S[1]*N*O[1],I[3]=-2*w[1]*N*O[1]+2*L[1]*S[1]*N+2*S[0]*F*L[0]-2*F*O[0]*w[0]+2*F*O[0]*M[0]+2*M[1]*N*O[1],I[4]=-2*F*w[0]*L[0]+S[1]*S[1]*N-2*w[1]*L[1]*N+2*F*M[0]*L[0]+S[0]*S[0]*F+2*M[1]*L[1]*N,I[5]=-2*w[1]*S[1]*N-2*S[0]*F*w[0]+2*S[0]*F*M[0]+2*M[1]*S[1]*N,I[6]=F*w[0]*w[0]-2*M[1]*w[1]*N-F*N+w[1]*w[1]*N+M[1]*M[1]*N-2*F*w[0]*M[0]+F*M[0]*M[0];var D=(0,u.getRealPolynomialRoots)(I);for(x=0;x<D.length;++x)if(D[x]>=0&&D[x]<=1){D[x]=c[0]+(c[c.length-1]-c[0])*D[x];var j=t.getCurve().evaluatePosition(D[x]),B=e.getCurve().closestToPointParam(j,[]),U=f(e,B*(e.isReversed()?-1:1),t,D[x]*(t.isReversed()?-1:1),n);U&&d.push(U)}return d},V=function(e,t,r,o,i){var n=e.getBoundingBox(),s=[];if(!t.getBoundingBox().intersectsWithTolerance(n,i))return s;var a=0;e.isClosed()&&o&&(a=1);for(var c=t.getCurve().getBezierSegments(),u=c.length,l=0;l<u;l++)for(var h=P(e,t,c[l],0,i),d=0;d<h.length;++d)for(var p=-a;p<=a;++p)s.push({cutInfo:{atVertex:h[d].cutInfo.atVertex,param:h[d].cutInfo.param+p*Math.PI*2},cutByInfo:h[d].cutByInfo});return s=x(s)},T=function(e,t,r,l,d,v,_){var m=r.getControlPoints(),E=r.getKnotVector(),x=l.getControlPoints(),A=l.getKnotVector(),P=r.getBoundingBox([E[0],E[E.length-1]]),V=l.getBoundingBox([A[0],A[A.length-1]]),T=e===t,b=!1,C=!1;T&&Math.abs(m[m.length-3]-x[0])<v&&Math.abs(m[x.length-2]-x[1])<v&&Math.abs(m[x.length-1]-x[2])<v&&(b=!0),T&&Math.abs(m[0]-x[m.length-3])<v&&Math.abs(m[1]-x[x.length-2])<v&&Math.abs(m[2]-x[x.length-1])<v&&(C=!0);var O=[];if(!P.intersectsWithTolerance(V,v))return O;var L=!0,S=!0,M=o.Vector2.createFloat64(),w=o.Vector2.createFloat64(),N=o.Vector2.createFloat64();for(we=0;we<m.length/3-2&&L;++we)M[0]=m[3*we+0],M[1]=m[3*we+1],w[0]=m[3*we+3],w[1]=m[3*we+4],N[0]=m[3*we+6],N[1]=m[3*we+7],L=Math.abs((0,h.orient2D)(M,w,N))<p;for(we=0;we<x.length/3-2&&S;++we)M[0]=x[3*we+0],M[1]=x[3*we+1],w[0]=x[3*we+3],w[1]=x[3*we+4],N[0]=x[3*we+6],N[1]=x[3*we+7],S=Math.abs((0,h.orient2D)(M,w,N))<p;if(L||S)return O=function(e,t,r,u,l,h,d,p,v){var _=l.getControlPoints(),m=h.getControlPoints(),E=[];if(e&&!t||!e&&t){var x,A,P=new s.Line;e?(x=o.Vector3.createFloat64FromValues(_[0],_[1],_[2]),A=o.Vector3.createFloat64FromValues(_[_.length-3],_[_.length-2],_[_.length-1])):(x=o.Vector3.createFloat64FromValues(m[0],m[1],m[2]),A=o.Vector3.createFloat64FromValues(m[m.length-3],m[m.length-2],m[m.length-1])),P.setFromEndpoints(x,A);var V=new a.Edge(P),T=o.Vector3.distance(A,x);V.setRange([0,T]);var b=new n.Point;b.setPosition(x[0],x[1],x[2]);var C=new n.Point;C.setPosition(A[0],A[1],A[2]);var O,L=new c.Vertex(b),S=new c.Vertex(C);V.setStartVertex(L),V.setEndVertex(S),ee=e?R(V,u,h,d,p):R(V,r,l,d,p);for(var M=0;M<ee.length;++M)if(ee[M].hasOwnProperty(\"cutInfo\")&&ee[M].hasOwnProperty(\"cutByInfo\")){if(ee[M].cutInfo.param>=0&&ee[M].cutInfo.param<=T&&(e?(ee[M].cutInfo.param=r.closestToPointParam(P.evaluatePosition(ee[M].cutInfo.param)),O=f(r,ee[M].cutInfo.param,u,ee[M].cutByInfo.param,p)):(ee[M].cutInfo.param=u.closestToPointParam(P.evaluatePosition(ee[M].cutInfo.param)),O=f(r,ee[M].cutByInfo.param,u,ee[M].cutInfo.param,p)),O))if(v){var w=O.cutInfo.param,N=O.cutByInfo.param;(F=Math.abs(w-N)*o.Vector3.length(r.evaluateDt(w)))>i.KERNEL_TOLERANCE&&!ee[M].cutInfo.virtualIntersection&&E.push(O)}else E.push(O)}else if(ee[M].hasOwnProperty(\"rangeInfo\")&&ee[M].hasOwnProperty(\"rangeByInfo\")&&ee[M].rangeInfo[0].param>=0&&ee[M].rangeInfo[0].param<=T&&ee[M].rangeInfo[1].param>=0&&ee[M].rangeInfo[1].param<=T)if(e?(ee[M].rangeInfo[0].param=r.closestToPointParam(P.evaluatePosition(ee[M].rangeInfo[0].param)),ee[M].rangeInfo[1].param=r.closestToPointParam(P.evaluatePosition(ee[M].rangeInfo[1].param))):(ee[M].rangeInfo[0].param=u.closestToPointParam(P.evaluatePosition(ee[M].rangeInfo[0].param)),ee[M].rangeInfo[1].param=u.closestToPointParam(P.evaluatePosition(ee[M].rangeInfo[1].param))),e?(te=[g(r,ee[M].rangeInfo[0].param,p,u),g(r,ee[M].rangeInfo[1].param,p,u)],re=[g(u,ee[M].rangeByInfo[0].param,p,r),g(u,ee[M].rangeByInfo[1].param,p,r)]):(te=[g(r,ee[M].rangeByInfo[0].param,p,u),g(r,ee[M].rangeByInfo[1].param,p,u)],re=[g(u,ee[M].rangeInfo[0].param,p,r),g(u,ee[M].rangeInfo[1].param,p,r)]),te[0]&&te[1]&&re[0]&&re[1]){var F=Math.abs(te[1].param-re[0].param)*o.Vector3.length(r.evaluateDt(te[1]));(!v||v&&F>i.KERNEL_TOLERANCE)&&E.push({rangeInfo:te,rangeByInfo:re})}else console.warn(\"Error in intersection computation.\")}else{var I=new s.Line,D=new s.Line,j=o.Vector3.createFloat64FromValues(_[0],_[1],_[2]),B=o.Vector3.createFloat64FromValues(_[_.length-3],_[_.length-2],_[_.length-1]),U=o.Vector3.createFloat64FromValues(m[0],m[1],m[2]),k=o.Vector3.createFloat64FromValues(m[m.length-3],m[m.length-2],m[m.length-1]);I.setFromEndpoints(j,B),D.setFromEndpoints(U,k);var G=new a.Edge(I),z=o.Vector3.distance(B,j),Y=new a.Edge(D),K=o.Vector3.distance(k,U);G.setRange([0,z]),Y.setRange([0,K]);var q=new n.Point;q.setPosition(j[0],j[1],j[2]);var W=new n.Point;W.setPosition(B[0],B[1],B[2]);var H=new n.Point;H.setPosition(U[0],U[1],U[2]);var X=new n.Point;X.setPosition(k[0],k[1],k[2]);var J=new c.Vertex(q),$=new c.Vertex(W),Z=new c.Vertex(H),Q=new c.Vertex(X);G.setStartVertex(J),G.setEndVertex($),Y.setStartVertex(Z),Y.setEndVertex(Q);var ee=y(G,Y,d,p);for(M=0;M<ee.length;++M)if(ee[M].hasOwnProperty(\"cutInfo\")&&ee[M].hasOwnProperty(\"cutByInfo\"))ee[M].cutInfo.param>=0&&ee[M].cutInfo.param<=z&&ee[M].cutByInfo.param>=0&&ee[M].cutByInfo.param<=K&&(ee[M].cutInfo.param=r.closestToPointParam(I.evaluatePosition(ee[M].cutInfo.param)),ee[M].cutByInfo.param=u.closestToPointParam(D.evaluatePosition(ee[M].cutByInfo.param)),O=f(r,ee[M].cutInfo.param,u,ee[M].cutByInfo.param,p))&&(w=O.cutInfo.param,N=O.cutByInfo.param,F=Math.abs(w-N)*o.Vector3.length(r.evaluateDt(w)),(!v||v&&F>i.KERNEL_TOLERANCE)&&E.push(O));else if(ee[M].hasOwnProperty(\"rangeInfo\")&&ee[M].hasOwnProperty(\"rangeByInfo\")&&ee[M].rangeInfo[0].param>=0&&ee[M].rangeInfo[0].param<=z&&ee[M].rangeInfo[1].param>=0&&ee[M].rangeInfo[1].param<=z&&ee[M].rangeByInfo[0].param>=0&&ee[M].rangeByInfo[0].param<=K&&ee[M].rangeByInfo[1].param>=0&&ee[M].rangeByInfo[1].param<=K){ee[M].rangeInfo[0].param=r.closestToPointParam(I.evaluatePosition(ee[M].rangeInfo[0].param)),ee[M].rangeInfo[1].param=r.closestToPointParam(I.evaluatePosition(ee[M].rangeInfo[1].param)),ee[M].rangeByInfo[0].param=u.closestToPointParam(D.evaluatePosition(ee[M].rangeByInfo[0].param)),ee[M].rangeByInfo[1].param=u.closestToPointParam(D.evaluatePosition(ee[M].rangeByInfo[1].param));var te=[g(r,ee[M].rangeInfo[0].param,p,u),g(r,ee[M].rangeInfo[1].param,p,u)],re=[g(u,ee[M].rangeByInfo[0].param,p,r),g(u,ee[M].rangeByInfo[1].param,p,r)];te[0]&&te[1]&&re[0]&&re[1]?(F=Math.abs(te[1].param-re[0].param)*o.Vector3.length(r.evaluateDt(te[1])),(!v||v&&F>i.KERNEL_TOLERANCE)&&E.push({rangeInfo:te,rangeByInfo:re})):console.warn(\"Error in intersection computation.\")}}return E}(L,S,e,t,r,l,d,v,_),O;var F=-m[0]+3*m[3]-3*m[6]+m[9],I=3*m[0]-6*m[3]+3*m[6],D=-3*m[0]+3*m[3],j=m[0],B=-m[1]+3*m[4]-3*m[7]+m[10],U=3*m[1]-6*m[4]+3*m[7],k=-3*m[1]+3*m[4],G=m[1],z=j*j,Y=D*D,K=I*I,q=F*F,W=j*j*j,H=D*D*D,X=I*I*I,J=F*F*F,$=G*G,Z=k*k,Q=U*U,ee=B*B,te=G*G*G,re=k*k*k,oe=U*U*U,ie=B*B*B,ne=-x[0]+3*x[3]-3*x[6]+x[9],se=3*x[0]-6*x[3]+3*x[6],ae=-3*x[0]+3*x[3],ce=x[0],ue=-x[1]+3*x[4]-3*x[7]+x[10],le=3*x[1]-6*x[4]+3*x[7],he=-3*x[1]+3*x[4],de=x[1],pe=ce*ce,ge=ce*ce*ce,fe=de*de,ve=de*de*de,_e=ae*ae,ye=ae*ae*ae,me=he*he,Ee=he*he*he,xe=se*se,Re=se*se*se,Ae=le*le,Pe=le*le*le,Ve=ne*ne,Te=ue*ue,be=new Float64Array(10),Ce=F*ue-B*ne;be[0]=Ce*Ce*Ce,be[1]=3*(F*le-B*se)*Ce*Ce,be[2]=3*(F*ue-B*ne)*(q*he*ue+q*Ae-F*B*ae*ue-2*F*B*se*le-F*B*ne*he+ee*ae*ne+ee*xe),be[3]=3*j*q*B*Te-6*j*F*ee*ne*ue+3*j*ie*Ve-3*D*I*F*B*Te+3*D*I*ee*ne*ue+2*D*q*U*Te-D*F*U*B*ne*ue-D*U*ee*Ve+X*B*Te-K*F*U*Te-2*K*U*B*ne*ue+I*q*k*Te+I*F*k*B*ne*ue+2*I*F*Q*ne*ue-2*I*k*ee*Ve+I*Q*B*Ve-3*J*G*Te+3*J*de*Te+6*J*he*le*ue+J*Pe+6*q*G*B*ne*ue-3*q*k*U*ne*ue-3*q*B*ce*Te-6*q*B*ae*le*ue-6*q*B*se*he*ue-3*q*B*se*Ae-6*q*B*ne*de*ue-6*q*B*ne*he*le-3*F*G*ee*Ve+3*F*k*U*B*Ve-F*oe*Ve+6*F*ee*ce*ne*ue+6*F*ee*ae*se*ue+6*F*ee*ae*ne*le+3*F*ee*xe*le+6*F*ee*se*ne*he+3*F*ee*Ve*de-3*ie*ce*Ve-6*ie*ae*se*ne-ie*Re,be[4]=6*j*q*B*le*ue-6*j*F*ee*se*ue-6*j*F*ee*ne*le+6*j*ie*se*ne-6*D*I*F*B*le*ue+3*D*I*ee*se*ue+3*D*I*ee*ne*le+4*D*q*U*le*ue-D*F*U*B*se*ue-D*F*U*B*ne*le-2*D*U*ee*se*ne+2*X*B*le*ue-2*K*F*U*le*ue-2*K*U*B*se*ue-2*K*U*B*ne*le+2*I*q*k*le*ue+I*F*k*B*se*ue+I*F*k*B*ne*le+2*I*F*Q*se*ue+2*I*F*Q*ne*le-4*I*k*ee*se*ne+2*I*Q*B*se*ne-6*J*G*le*ue+6*J*de*le*ue+3*J*me*ue+3*J*he*Ae+6*q*G*B*se*ue+6*q*G*B*ne*le-3*q*k*U*se*ue-3*q*k*U*ne*le-6*q*B*ce*le*ue-6*q*B*ae*he*ue-3*q*B*ae*Ae-6*q*B*se*de*ue-6*q*B*se*he*le-6*q*B*ne*de*le-3*q*B*ne*me-6*F*G*ee*se*ne+6*F*k*U*B*se*ne-2*F*oe*se*ne+6*F*ee*ce*se*ue+6*F*ee*ce*ne*le+3*F*ee*_e*ue+6*F*ee*ae*se*le+6*F*ee*ae*ne*he+3*F*ee*xe*he+6*F*ee*se*ne*de-6*ie*ce*se*ne-3*ie*_e*ne-3*ie*ae*xe,be[5]=6*j*q*B*he*ue+3*j*q*B*Ae-6*j*F*ee*ae*ue-6*j*F*ee*se*le-6*j*F*ee*ne*he+6*j*ie*ae*ne+3*j*ie*xe-6*D*I*F*B*he*ue-3*D*I*F*B*Ae+3*D*I*ee*ae*ue+3*D*I*ee*se*le+3*D*I*ee*ne*he+4*D*q*U*he*ue+2*D*q*U*Ae-D*F*U*B*ae*ue-D*F*U*B*se*le-D*F*U*B*ne*he-2*D*U*ee*ae*ne-D*U*ee*xe+2*X*B*he*ue+X*B*Ae-2*K*F*U*he*ue-K*F*U*Ae-2*K*U*B*ae*ue-2*K*U*B*se*le-2*K*U*B*ne*he+2*I*q*k*he*ue+I*q*k*Ae+I*F*k*B*ae*ue+I*F*k*B*se*le+I*F*k*B*ne*he+2*I*F*Q*ae*ue+2*I*F*Q*se*le+2*I*F*Q*ne*he-4*I*k*ee*ae*ne-2*I*k*ee*xe+2*I*Q*B*ae*ne+I*Q*B*xe-6*J*G*he*ue-3*J*G*Ae+6*J*de*he*ue+3*J*de*Ae+3*J*me*le+6*q*G*B*ae*ue+6*q*G*B*se*le+6*q*G*B*ne*he-3*q*k*U*ae*ue-3*q*k*U*se*le-3*q*k*U*ne*he-6*q*B*ce*he*ue-3*q*B*ce*Ae-6*q*B*ae*de*ue-6*q*B*ae*he*le-6*q*B*se*de*le-3*q*B*se*me-6*q*B*ne*de*he-6*F*G*ee*ae*ne-3*F*G*ee*xe+6*F*k*U*B*ae*ne+3*F*k*U*B*xe-2*F*oe*ae*ne-F*oe*xe+6*F*ee*ce*ae*ue+6*F*ee*ce*se*le+6*F*ee*ce*ne*he+3*F*ee*_e*le+6*F*ee*ae*se*he+6*F*ee*ae*ne*de+3*F*ee*xe*de-6*ie*ce*ae*ne-3*ie*ce*xe-3*ie*_e*se,be[6]=3*z*F*ee*ue-3*z*ie*ne-3*j*D*I*ee*ue+j*D*F*U*B*ue+2*j*D*U*ee*ne+2*j*K*U*B*ue-j*I*F*k*B*ue-2*j*I*F*Q*ue+4*j*I*k*ee*ne-2*j*I*Q*B*ne-6*j*q*G*B*ue+3*j*q*k*U*ue+6*j*q*B*de*ue+6*j*q*B*he*le+6*j*F*G*ee*ne-6*j*F*k*U*B*ne+2*j*F*oe*ne-6*j*F*ee*ce*ue-6*j*F*ee*ae*le-6*j*F*ee*se*he-6*j*F*ee*ne*de+6*j*ie*ce*ne+6*j*ie*ae*se+H*ee*ue-Y*I*U*B*ue-2*Y*F*k*B*ue+Y*F*Q*ue-Y*k*ee*ne+D*K*k*B*ue+6*D*I*F*G*B*ue-D*I*F*k*U*ue-6*D*I*F*B*de*ue-6*D*I*F*B*he*le-3*D*I*G*ee*ne+D*I*k*U*B*ne+3*D*I*ee*ce*ue+3*D*I*ee*ae*le+3*D*I*ee*se*he+3*D*I*ee*ne*de-4*D*q*G*U*ue+D*q*Z*ue+4*D*q*U*de*ue+4*D*q*U*he*le+D*F*G*U*B*ne+2*D*F*Z*B*ne-D*F*k*Q*ne-D*F*U*B*ce*ue-D*F*U*B*ae*le-D*F*U*B*se*he-D*F*U*B*ne*de-2*D*U*ee*ce*ne-2*D*U*ee*ae*se-2*X*G*B*ue+2*X*B*de*ue+2*X*B*he*le+2*K*F*G*U*ue-2*K*F*U*de*ue-2*K*F*U*he*le+2*K*G*U*B*ne-K*Z*B*ne-2*K*U*B*ce*ue-2*K*U*B*ae*le-2*K*U*B*se*he-2*K*U*B*ne*de-2*I*q*G*k*ue+2*I*q*k*de*ue+2*I*q*k*he*le-I*F*G*k*B*ne-2*I*F*G*Q*ne+I*F*Z*U*ne+I*F*k*B*ce*ue+I*F*k*B*ae*le+I*F*k*B*se*he+I*F*k*B*ne*de+2*I*F*Q*ce*ue+2*I*F*Q*ae*le+2*I*F*Q*se*he+2*I*F*Q*ne*de-4*I*k*ee*ce*ne-4*I*k*ee*ae*se+2*I*Q*B*ce*ne+2*I*Q*B*ae*se+3*J*$*ue-6*J*G*de*ue-6*J*G*he*le+3*J*fe*ue+6*J*de*he*le+J*Ee-3*q*$*B*ne+3*q*G*k*U*ne+6*q*G*B*ce*ue+6*q*G*B*ae*le+6*q*G*B*se*he+6*q*G*B*ne*de-q*re*ne-3*q*k*U*ce*ue-3*q*k*U*ae*le-3*q*k*U*se*he-3*q*k*U*ne*de-6*q*B*ce*de*ue-6*q*B*ce*he*le-6*q*B*ae*de*le-3*q*B*ae*me-6*q*B*se*de*he-3*q*B*ne*fe-6*F*G*ee*ce*ne-6*F*G*ee*ae*se+6*F*k*U*B*ce*ne+6*F*k*U*B*ae*se-2*F*oe*ce*ne-2*F*oe*ae*se+3*F*ee*pe*ue+6*F*ee*ce*ae*le+6*F*ee*ce*se*he+6*F*ee*ce*ne*de+3*F*ee*_e*he+6*F*ee*ae*se*de-3*ie*pe*ne-6*ie*ce*ae*se-ie*ye,be[7]=3*z*F*ee*le-3*z*ie*se-3*j*D*I*ee*le+j*D*F*U*B*le+2*j*D*U*ee*se+2*j*K*U*B*le-j*I*F*k*B*le-2*j*I*F*Q*le+4*j*I*k*ee*se-2*j*I*Q*B*se-6*j*q*G*B*le+3*j*q*k*U*le+6*j*q*B*de*le+3*j*q*B*me+6*j*F*G*ee*se-6*j*F*k*U*B*se+2*j*F*oe*se-6*j*F*ee*ce*le-6*j*F*ee*ae*he-6*j*F*ee*se*de+6*j*ie*ce*se+3*j*ie*_e+H*ee*le-Y*I*U*B*le-2*Y*F*k*B*le+Y*F*Q*le-Y*k*ee*se+D*K*k*B*le+6*D*I*F*G*B*le-D*I*F*k*U*le-6*D*I*F*B*de*le-3*D*I*F*B*me-3*D*I*G*ee*se+D*I*k*U*B*se+3*D*I*ee*ce*le+3*D*I*ee*ae*he+3*D*I*ee*se*de-4*D*q*G*U*le+D*q*Z*le+4*D*q*U*de*le+2*D*q*U*me+D*F*G*U*B*se+2*D*F*Z*B*se-D*F*k*Q*se-D*F*U*B*ce*le-D*F*U*B*ae*he-D*F*U*B*se*de-2*D*U*ee*ce*se-D*U*ee*_e-2*X*G*B*le+2*X*B*de*le+X*B*me+2*K*F*G*U*le-2*K*F*U*de*le-K*F*U*me+2*K*G*U*B*se-K*Z*B*se-2*K*U*B*ce*le-2*K*U*B*ae*he-2*K*U*B*se*de-2*I*q*G*k*le+2*I*q*k*de*le+I*q*k*me-I*F*G*k*B*se-2*I*F*G*Q*se+I*F*Z*U*se+I*F*k*B*ce*le+I*F*k*B*ae*he+I*F*k*B*se*de+2*I*F*Q*ce*le+2*I*F*Q*ae*he+2*I*F*Q*se*de-4*I*k*ee*ce*se-2*I*k*ee*_e+2*I*Q*B*ce*se+I*Q*B*_e+3*J*$*le-6*J*G*de*le-3*J*G*me+3*J*fe*le+3*J*de*me-3*q*$*B*se+3*q*G*k*U*se+6*q*G*B*ce*le+6*q*G*B*ae*he+6*q*G*B*se*de-q*re*se-3*q*k*U*ce*le-3*q*k*U*ae*he-3*q*k*U*se*de-6*q*B*ce*de*le-3*q*B*ce*me-6*q*B*ae*de*he-3*q*B*se*fe-6*F*G*ee*ce*se-3*F*G*ee*_e+6*F*k*U*B*ce*se+3*F*k*U*B*_e-2*F*oe*ce*se-F*oe*_e+3*F*ee*pe*le+6*F*ee*ce*ae*he+6*F*ee*ce*se*de+3*F*ee*_e*de-3*ie*pe*se-3*ie*ce*_e,be[8]=3*z*F*ee*he-3*z*ie*ae-3*j*D*I*ee*he+j*D*F*U*B*he+2*j*D*U*ee*ae+2*j*K*U*B*he-j*I*F*k*B*he-2*j*I*F*Q*he+4*j*I*k*ee*ae-2*j*I*Q*B*ae-6*j*q*G*B*he+3*j*q*k*U*he+6*j*q*B*de*he+6*j*F*G*ee*ae-6*j*F*k*U*B*ae+2*j*F*oe*ae-6*j*F*ee*ce*he-6*j*F*ee*ae*de+6*j*ie*ce*ae+H*ee*he-Y*I*U*B*he-2*Y*F*k*B*he+Y*F*Q*he-Y*k*ee*ae+D*K*k*B*he+6*D*I*F*G*B*he-D*I*F*k*U*he-6*D*I*F*B*de*he-3*D*I*G*ee*ae+D*I*k*U*B*ae+3*D*I*ee*ce*he+3*D*I*ee*ae*de-4*D*q*G*U*he+D*q*Z*he+4*D*q*U*de*he+D*F*G*U*B*ae+2*D*F*Z*B*ae-D*F*k*Q*ae-D*F*U*B*ce*he-D*F*U*B*ae*de-2*D*U*ee*ce*ae-2*X*G*B*he+2*X*B*de*he+2*K*F*G*U*he-2*K*F*U*de*he+2*K*G*U*B*ae-K*Z*B*ae-2*K*U*B*ce*he-2*K*U*B*ae*de-2*I*q*G*k*he+2*I*q*k*de*he-I*F*G*k*B*ae-2*I*F*G*Q*ae+I*F*Z*U*ae+I*F*k*B*ce*he+I*F*k*B*ae*de+2*I*F*Q*ce*he+2*I*F*Q*ae*de-4*I*k*ee*ce*ae+2*I*Q*B*ce*ae+3*J*$*he-6*J*G*de*he+3*J*fe*he-3*q*$*B*ae+3*q*G*k*U*ae+6*q*G*B*ce*he+6*q*G*B*ae*de-q*re*ae-3*q*k*U*ce*he-3*q*k*U*ae*de-6*q*B*ce*de*he-3*q*B*ae*fe-6*F*G*ee*ce*ae+6*F*k*U*B*ce*ae-2*F*oe*ce*ae+3*F*ee*pe*he+6*F*ee*ce*ae*de-3*ie*pe*ae,be[9]=W*ie-z*D*U*ee-2*z*I*k*ee+z*I*Q*B-3*z*F*G*ee+3*z*F*k*U*B-z*F*oe+3*z*F*ee*de-3*z*ie*ce+j*Y*k*ee+3*j*D*I*G*ee-j*D*I*k*U*B-3*j*D*I*ee*de-j*D*F*G*U*B-2*j*D*F*Z*B+j*D*F*k*Q+j*D*F*U*B*de+2*j*D*U*ee*ce-2*j*K*G*U*B+j*K*Z*B+2*j*K*U*B*de+j*I*F*G*k*B+2*j*I*F*G*Q-j*I*F*Z*U-j*I*F*k*B*de-2*j*I*F*Q*de+4*j*I*k*ee*ce-2*j*I*Q*B*ce+3*j*q*$*B-3*j*q*G*k*U-6*j*q*G*B*de+j*q*re+3*j*q*k*U*de+3*j*q*B*fe+6*j*F*G*ee*ce-6*j*F*k*U*B*ce+2*j*F*oe*ce-6*j*F*ee*ce*de+3*j*ie*pe-H*G*ee+H*ee*de+Y*I*G*U*B-Y*I*U*B*de+2*Y*F*G*k*B-Y*F*G*Q-2*Y*F*k*B*de+Y*F*Q*de-Y*k*ee*ce-D*K*G*k*B+D*K*k*B*de-3*D*I*F*$*B+D*I*F*G*k*U+6*D*I*F*G*B*de-D*I*F*k*U*de-3*D*I*F*B*fe-3*D*I*G*ee*ce+D*I*k*U*B*ce+3*D*I*ee*ce*de+2*D*q*$*U-D*q*G*Z-4*D*q*G*U*de+D*q*Z*de+2*D*q*U*fe+D*F*G*U*B*ce+2*D*F*Z*B*ce-D*F*k*Q*ce-D*F*U*B*ce*de-D*U*ee*pe+X*$*B-2*X*G*B*de+X*B*fe-K*F*$*U+2*K*F*G*U*de-K*F*U*fe+2*K*G*U*B*ce-K*Z*B*ce-2*K*U*B*ce*de+I*q*$*k-2*I*q*G*k*de+I*q*k*fe-I*F*G*k*B*ce-2*I*F*G*Q*ce+I*F*Z*U*ce+I*F*k*B*ce*de+2*I*F*Q*ce*de-2*I*k*ee*pe+I*Q*B*pe-J*te+3*J*$*de-3*J*G*fe+J*ve-3*q*$*B*ce+3*q*G*k*U*ce+6*q*G*B*ce*de-q*re*ce-3*q*k*U*ce*de-3*q*B*ce*fe-3*F*G*ee*pe+3*F*k*U*B*pe-F*oe*pe+3*F*ee*pe*de-ie*ge;var Oe=(0,u.getRealPolynomialRoots)(be),Le=l.getApproxParameterSpaceTolerance(),Se=-Le,Me=1+Le;b&&(Se=Le),C&&(Me=1-Le);for(var we=0;we<Oe.length;++we)if(Oe[we]>=Se&&Oe[we]<=Me){Oe[we]<0?Oe[we]=0:Oe[we]>1&&(Oe[we]=1),Oe[we]=A[0]+(A[A.length-1]-A[0])*Oe[we];var Ne=t.getCurve().evaluatePosition(Oe[we]);if(P.isPointInsideWithTolerance(Ne)){var Fe=r.closestToPointParam(Ne,[]);if(Fe>=E[0]&&Fe<=E[E.length-1]){var Ie=e.getCurve().evaluatePosition(Fe);if(o.Vector3.squaredDistance(Ie,Ne)<=v*v){var De=f(e,Fe*(e.isReversed()?-1:1),t,Oe[we]*(t.isReversed()?-1:1),v);De&&O.push(De)}}}}return O},b=function(e,t,r,i){var n=[],a=t.getControlPoints(),c=e.isReversed()?-1:1,u=new s.Line,h=o.Vector3.createFloat64FromValues(a[0],a[1],a[2]),d=o.Vector3.createFloat64FromValues(a[a.length-3],a[a.length-2],a[a.length-1]);u.setFromEndpoints(h,d);var p=o.Vector3.distance(d,h),g=o.Vector3.createFloat64FromValues(a[3],a[4],a[5]),v=o.Vector3.createFloat64FromValues(a[6],a[7],a[8]);if(u.closestToPointParam(g,[])>0&&u.closestToPointParam(g,[])<p&&u.closestToPointParam(v,[])>0&&u.closestToPointParam(v,[])<p)return n;var _,y=-a[0]+3*a[3]-3*a[6]+a[9],m=-a[1]+3*a[4]-3*a[7]+a[10],E=3*a[0]-6*a[3]+3*a[6],x=3*a[1]-6*a[4]+3*a[7],R=-3*a[0]+3*a[3],A=-3*a[1]+3*a[4],P=E/y,V=R/y,T=x/m,b=A/m;if(Math.abs(P-T)<i||Math.abs(b-V)<i)return n;var C=new Float64Array(4);if(Math.abs(y)<i&&Math.abs(m)<i)return n;Math.abs(y)<i?(_=-R/E,P=T,V=b):_=Math.abs(m)<i?-A/x:(b-V)/(P-T),C[0]=(-_*_*_-P*_*_-V*_)/2,C[1]=(3*_*_+2*_*P+2*V)/2,C[2]=-1.5*_,C[3]=1;var O,L=new Float64Array(3);if(3!==l.SplineCurveHelper.solve_cubic_uniqueRoots(C,L))return n;if(L[1]<L[0]&&(O=L[0],L[0]=L[1],L[1]=O),L[2]<L[0]&&(O=L[0],L[0]=L[2],L[2]=O),L[2]<L[1]&&(O=L[1],L[1]=L[2],L[2]=O),L[0]>=0&&L[0]<=1&&L[2]>=0&&L[2]<=1){var S=t.getKnotVector();L[0]=S[0]+(S[S.length-1]-S[0])*L[0],L[2]=S[0]+(S[S.length-1]-S[0])*L[2];var M=f(e,L[0]*c,e,L[2]*c,i);M&&n.push(M)}return n};t.computeCurveCurveIntersections=function(e,t,r,n,s){s=void 0===s?i.KERNEL_TOLERANCE:s;var a,c=e.getCurveType(),u=c===i.GEOMETRY_TYPES.CIRCLE,l=c===i.GEOMETRY_TYPES.LINE,p=c===i.GEOMETRY_TYPES.BCURVE&&!e.getCurve().isRational()&&3===e.getCurve().getDegree(),v=t.getCurveType(),R=v===i.GEOMETRY_TYPES.CIRCLE,P=v===i.GEOMETRY_TYPES.LINE,C=v===i.GEOMETRY_TYPES.BCURVE&&!t.getCurve().isRational()&&3===t.getCurve().getDegree();return a=l&&R?function(e,t,r){for(var o=m(e.getCurve(),t.getCurve(),r),i=[],n=0;n<o.length;++n){var s=(e.isReversed()?-1:1)*o[n].lineParam,a=(t.isReversed()?-1:1)*o[n].circleParam,c=f(e,s,t,a,r);c&&i.push(c)}return i}(e,t,s):u&&P?function(e,t,r,o){var i=m(t.getCurve(),e.getCurve(),o),n=[],s=0;e.isClosed()&&r&&(s=1);for(var a=0;a<i.length;++a){var c=(e.isReversed()?-1:1)*i[a].circleParam,u=(t.isReversed()?-1:1)*i[a].lineParam,l=f(e,c,t,u,o);if(l)for(var h=-s;h<=s;++h)n.push({cutInfo:{atVertex:l.cutInfo.atVertex,param:l.cutInfo.param+h*Math.PI*2},cutByInfo:l.cutByInfo})}return n}(e,t,n,s):l&&P?y(e,t,r,s):u&&R?function(e,t,r,i,n){var s=[],a=e.getCurve().getCenter(),c=e.getCurve().getRadius(),u=t.getCurve().getCenter(),l=t.getCurve().getRadius(),d=2*Math.PI,p=o.Vector3.createFloat64();o.Vector3.sub(p,u,a);var v=o.Vector3.length(p),y=Math.abs(c-l);if(v<y-n)return s;if(v+y<n){var m=n/c;if(e.getRange()[1]-e.getRange()[0]>d-m&&t.getRange()[1]-t.getRange()[0]>d-m)return s.push({rangeInfo:[g(e,e.getRange()[0],n,t),g(e,e.getRange()[1],n,t)],rangeByInfo:[g(t,t.getRange()[0],n,e),g(t,t.getRange()[1],n,e)]}),s;var x=[],R=e.closestToPointParam(t.evaluatePosition(0),[0,d]),A=o.Vector3.dot(e.evaluateDt(R),t.evaluateDt(0))<0,P=e.getRange(),V=t.getRange();V=A?[R-V[1],R-V[0]]:[R+V[0],R+V[1]];var T=(0,h.foldAbove)(V[0],P[0],d)-V[0];if((V=[V[0]+T,V[1]+T])[0]<P[1]+m&&x.push([Math.min(V[0],P[1]),Math.min(P[1],V[1])]),V[1]>P[0]+d-m&&x.push([P[0],Math.max(P[0],Math.min(P[1],V[1]-d))]),P[1]-P[0]>d-m||V[1]-V[0]>d-m)for(var b=x.length-1;b>=0&&1!==x.length;--b)x[b][1]-x[b][0]<m&&x.splice(b,1);for(b=0;b<x.length;++b){var C=x[b],O=A?[R-C[1],R-C[0]]:[C[0]-R,C[1]-R],L=(0,h.foldAbove)(O[0],t.getRange()[0],d)-O[0];if(O=[O[0]+L,O[1]+L],C[1]-C[0]<m){var S=.5*(C[0]+C[1]),M=.5*(O[0]+O[1]),w=g(e,S,n,t),N=g(t,M,n,e);w&&N&&s.push({cutInfo:w,cutByInfo:N})}else{var F=[g(e,C[0],n,t),g(e,C[1],n,t)],I=[g(t,O[0],n,e),g(t,O[1],n,e)];F[0]&&F[1]&&I[0]&&I[1]&&s.push({rangeInfo:F,rangeByInfo:I})}}return s}var D=(c*c-l*l+v*v)/(2*v),j=c*c-D*D,B=c-Math.abs(D),U=[],k=[];if(B<-n);else{var G=Math.sqrt(Math.max(0,j));if(o.Vector3.scale(p,p,1/v),G<2*n)U.push(E(0,D,a,p,e,t)),k.push(!1);else if(B<n)if(k.push(!1),r){k[k.length-1]=!0;var z=E(0,D,a,p,e,t),Y=[E(G,D,a,p,e,t),E(-G,D,a,p,e,t)];_(e,t,[Y[0].firstParam,z.firstParam,Y[1].firstParam],[Y[0].secondParam,z.secondParam,Y[1].secondParam],n,s,U)}else U.push(E(0,D,a,p,e,t));else U.push(E(G,D,a,p,e,t)),U.push(E(-G,D,a,p,e,t))}var K=0;for(e.isClosed()&&i&&(K=1),b=0;b<U.length;++b){var q=f(e,U[b].firstParam,t,U[b].secondParam,n);if(q)for(var W=-K;W<=K;++W)s.push({cutInfo:{atVertex:q.cutInfo.atVertex,param:q.cutInfo.param+W*Math.PI*2},cutByInfo:q.cutByInfo}),k[b]&&(s[s.length-1].cutInfo.virtualIntersection=!0,s[s.length-1].cutByInfo.virtualIntersection=!0)}return s}(e,t,r,n,s):l&&C?A(e,t,r,s):p&&P?function(e,t,r,o,i){var n=A(t,e,r,i),s=[],a=0,c=0;o&&e.getCurve().isPeriodicUnlimited()&&(a=1,c=e.getCurve().getPeriodUnlimited());for(var u=0;u<n.length;++u)if(n[u].hasOwnProperty(\"cutInfo\")&&n[u].hasOwnProperty(\"cutByInfo\"))for(var l=-a;l<=a;++l)s.push({cutInfo:{atVertex:n[u].cutByInfo.atVertex,param:n[u].cutByInfo.param+l*c},cutByInfo:n[u].cutInfo});else n[u].hasOwnProperty(\"rangeInfo\")&&n[u].hasOwnProperty(\"rangeByInfo\")&&s.push({rangeInfo:n[u].rangeByInfo,rangeByInfo:n[u].rangeInfo});return s}(e,t,r,n,s):u&&C?V(e,t,0,n,s):p&&R?function(e,t,r,o,i){var n=V(t,e,0,!1,i),s=[],a=0,c=0;o&&e.getCurve().isPeriodicUnlimited()&&(a=1,c=e.getCurve().getPeriodUnlimited());for(var u=0;u<n.length;++u)if(n[u].hasOwnProperty(\"cutInfo\")&&n[u].hasOwnProperty(\"cutByInfo\"))for(var l=-a;l<=a;++l)s.push({cutInfo:{atVertex:n[u].cutByInfo.atVertex,param:n[u].cutByInfo.param+l*c},cutByInfo:n[u].cutInfo});else n[u].hasOwnProperty(\"rangeInfo\")&&n[u].hasOwnProperty(\"rangeByInfo\")&&s.push({rangeInfo:n[u].rangeByInfo,rangeByInfo:n[u].rangeInfo});return s}(e,t,0,n,s):p&&C?function(e,t,r,o,i){var n=e===t,s=e.getBoundingBox(),a=t.getBoundingBox(),c=[];if(!s.intersectsWithTolerance(a,i))return c;var u,l,h,d,p=e.getCurve().getBezierSegments(),g=p.length,f=t.getCurve().getBezierSegments(),v=f.length,_=[],y=0,m=0,E=0;for(o&&e.getCurve().isPeriodic()&&e.isClosed()&&(m=1,E=e.getCurve().getPeriod()),u=0;u<g;u++)for(n&&(y=u+1),l=y;l<v;l++){var R=n&&l===u+1;for(_=T(e,t,p[u],f[l],r,i,R),h=0;h<_.length;++h)for(d=-m;d<=m;++d)_[h].cutInfo&&c.push({cutInfo:{atVertex:_[h].cutInfo.atVertex,param:_[h].cutInfo.param+d*E},cutByInfo:_[h].cutByInfo}),_[h].rangeInfo&&c.push(_[h])}if(n)for(u=0;u<g;++u)for(_=b(e,p[u],0,i),h=0;h<_.length;++h)for(d=-m;d<=m;++d)_[h].cutInfo&&c.push({cutInfo:{atVertex:_[h].cutInfo.atVertex,param:_[h].cutInfo.param+d*E},cutByInfo:_[h].cutByInfo}),_[h].rangeInfo&&c.push(_[h]);return x(c)}(e,t,r,n,s):function(e,t,r,o,n){var s=e.getBoundingBox(),a=t.getBoundingBox(),c=[];if(!s.intersectsWithTolerance(a,n))return c;var u=e.isReversed(),l=t.isReversed(),h=e.getRange();u&&(h=[-h[1],-h[0]]);var p=t.getRange();l&&(p=[-p[1],-p[0]]),c=new d.CCI(e.getCurve(),h,t.getCurve(),p,i.KERNEL_TOLERANCE).intersect();for(var g=0;g<c.length;++g)u&&(c[g].cutInfo?c[g].cutInfo.param*=-1:c[g].rangeInfo&&(c[g].rangeInfo=[c[g].rangeInfo[1],c[g].rangeInfo[0]],c[g].rangeInfo[0].param*=-1,c[g].rangeInfo[1].param*=-1)),l&&(c[g].cutByInfo?c[g].cutByInfo.param*=-1:c[g].rangeByInfo&&(c[g].rangeByInfo[0].param*=-1,c[g].rangeByInfo[1].param*=-1));return c}(e,t,0,0,s),a}},9892:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.SubCurveTree=void 0;var o=r(2468),i=1e-8,n=100*o.KERNEL_TOLERANCE,s=Math.PI/180*10,a=function(e,t,r){void 0===r&&(r=0),this._cu=e,this._range=t,this._bx=e.getBoundingBox(t).clone(),this._simple=void 0,this._split_param=void 0,this._children=[],this._depth=r};a.prototype.isSimple=function(){if(void 0===this._simple){this._simple=!1;var e=[this._range[0]+i,this._range[1]-i];if(this._split_param=this._cu.suggestSplittingParam(e),void 0===this._split_param){this._split_param=.5*(this._range[0]+this._range[1]);var t=this._cu.getTangentCone(this._range);(t.isDegenerate()||t.angle<s)&&(this._simple=!0)}}return this._simple},a.prototype.canDivide=function(){return!(this._depth>=10)&&(!(this._range[1]-this._range[0]<2e-8)&&!(Math.max(this._bx.getWidth(0),this._bx.getWidth(1),this._bx.getWidth(2))<n))},a.prototype.divide=function(){if(0===this._children.length){var e=[this._range[0],this._split_param],t=[this._split_param,this._range[1]];this._children=[new a(this._cu,e,this._depth+1),new a(this._cu,t,this._depth+1)]}},a.prototype.fullSubdivision=function(){if(!this.isSimple()&&this.canDivide()){this.divide();for(var e=0;e<this._children.length;++e)this._children[e].fullSubdivision()}},a.prototype.toString=function(){if(this._children.length>0){for(var e=\"\",t=0;t<this._children.length;++t)e+=this._children[t];return e}return\"t=[\"+this._range[0]+\" \"+this._range[1]+\"] \"+this._bx+\"\\n\"};var c=function(e,t,r,o,i){this._cu1_root_node=new a(e,t),this._cu2_root_node=new a(r,o),this._epsilon=i,this._overlaps=[]};c.prototype.process=function(e,t){if(e._bx.intersectsWithTolerance(t._bx,this._epsilon)){var r=e.canDivide(),o=t.canDivide(),i=e.isSimple()||!r,n=t.isSimple()||!o;if(i&&n)this._overlaps.push([e,t]);else if(r&&o){e.divide(),t.divide();for(var s=0;s<e._children.length;++s)for(var a=0;a<t._children.length;++a)this.process(e._children[s],t._children[a])}else if(r){e.divide();for(s=0;s<e._children.length;++s)this.process(e._children[s],t)}else if(o){t.divide();for(s=0;s<t._children.length;++s)this.process(e,t._children[s])}}},c.prototype.build=function(){this.process(this._cu1_root_node,this._cu2_root_node)},t.SubCurveTree=c},9888:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const r={setNMIAttributeStr:function(e,t){e.typeid=\"autodesk.brep:nmiattributestr-1.0.0\",e.values={primaryId:t.primaryId,secondaryId:t.secondaryId,approachId:t.approachId,operationIds:t.operationIds}},setNMIAttributeArr:function(e,t){e.typeid=\"autodesk.brep:nmiattributearr-1.0.0\";for(var r=t.tagInfo,o=new Array(r.length),i=0;i<r.length;++i){var n=r[i];o[i]={primaryId:n.primaryId,secondaryId:n.secondaryId,approachId:n.approachId,operationIds:n.operationIds}}e.values={tagInfo:o}},setTextAttribute:function(e,t){e.typeid=\"autodesk.brep:textattribute-1.0.0\",e.values={text:t.text}}};t.AttributeSetters=r},6752:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.propertyToRange=t.GeometrySetters=void 0;var o=r(1972),i=function(e,t,r){const o=t[r];e[0]=o.x,e[1]=o.y,e[2]=o.z},n=function(e,t){const r=e[t];var o=r.type;return\"infinite\"===o||0===o?[]:[r.low,r.high]},s=function(e,t){var r=n(e,\"uRange\");t.unlimitRangeU(),r.length>0&&t.limitRangeU(r);var o=n(e,\"vRange\");t.unlimitRangeV(),o.length>0&&t.limitRangeV(o)},a=function(e,t){var r=n(e,\"range\");t.unlimitRange(),r.length>0&&t.limitRange(r)},c={setBCurveFromProperty:function(e,t){var r,o,i=t.degree,n=t.knots,s=t.controlPoints,c=t.weights,u=s.length/3;if(0===c.length)for(o=new Array(u),r=0;r<u;++r)o[r]=1;else o=c;e.set(s,o,i,n),a(t,e)},setBSurfaceFromProperty:function(e,t){var r,o,i=t.uDegree,n=t.vDegree,a=t.uKnots,c=t.vKnots,u=t.controlPoints,l=t.weights;if(0===l.length){var h=u.length/3;for(o=new Array(h),r=0;r<h;++r)o[r]=1}else o=l;e.set(i,n,a,c,u,o),s(t,e)},setCircleFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),s=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"normal\"),i(s,t,\"radius\"),e.set(r,n,s),a(t,e)},setConeFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"axis\"),i(a,t,\"radius\");var c=o.Vector3.length(a);o.Vector3.normalize(a,a);var u=t.angle,l=t.uCoordScale;e.set(r,c,n,u,a,l),s(t,e)},setCylinderFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"axis\"),i(a,t,\"radius\");var c=o.Vector3.length(a);o.Vector3.normalize(a,a);var u=t.uCoordScale;e.set(r,c,n,a,u),s(t,e)},setEllipseFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),s=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"normal\"),i(s,t,\"majorRadius\");var c=t.radiusRatio;e.set(r,n,s,c),a(t,e)},setEllipticalConeFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"axis\"),i(a,t,\"majorRadius\");var c=t.angle,u=t.radiusRatio,l=t.uCoordScale;e.set(r,a,u,n,c,l),s(t,e)},setEllipticalCylinderFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"axis\"),i(a,t,\"majorRadius\");var c=t.radiusRatio,u=t.uCoordScale;e.set(r,a,c,n,u),s(t,e)},setLineFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64();i(r,t,\"position\"),i(n,t,\"direction\"),e.set(r,n),a(t,e)},setPlaneFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"origin\"),i(n,t,\"normal\"),i(a,t,\"uAxis\"),e.set(r,n,a),s(t,e)},setPointFromProperty:function(e,t){e.setPosition(t.position.x,t.position.y,t.position.z)},setSphereFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"radius\"),i(a,t,\"axis\");var c=o.Vector3.length(n);o.Vector3.normalize(n,n),e.set(r,c,a,n),s(t,e)},setTorusFromProperty:function(e,t){var r=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),a=o.Vector3.createFloat64();i(r,t,\"center\"),i(n,t,\"axis\"),i(a,t,\"coordAxis\");var c=t.majorRadius,u=t.minorRadius,l=t.lemon;e.set(r,c,u,n,a,l),s(t,e)},setHapCurveFromProperty:function(e,t){for(var r=t.spans,o=new Array(r.length),i=0;i<r.length;++i)o[i]={},o[i].polyOrder=r[i].polyOrder,o[i].lowParam=r[i].lowParam,o[i].highParam=r[i].highParam,o[i].coefs=r[i].coefs.slice(0);var n={};n.spans=o;var s=t.periodic;void 0===s&&(s=!1),n.periodic=s,n.closed=s,e.setHapDefinition(n),a(t,e)},setCurveRangeFromProperty:a,setSurfaceRangeFromProperty:s};t.GeometrySetters=c,t.propertyToRange=n},6232:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.SolidDefLoader=t.getTopologyRank=void 0;var o,i=r(3565),n=r(1096),s=r(5512),a=r(8972),c=r(8796),u=r(8292),l=r(3440),h=r(8360),d=r(4372),p=r(2984),g=r(2956),f=r(1408),v=r(92),_=r(9984),y=r(5837),m=r(6508),E=r(6776),x=r(4524),R=r(672),A=r(7580),P=r(6940),V=r(6500),T=r(7575),b=r(9324),C=r(2468),O=r(6752),L=r(7360),S=r(9888),M=r(8032),w=((o={})[C.TOPOLOGY_TYPES.BODY]=10,o[C.TOPOLOGY_TYPES.WIREBODY]=9,o[C.TOPOLOGY_TYPES.LUMP]=8,o[C.TOPOLOGY_TYPES.SHELL]=7,o[C.TOPOLOGY_TYPES.FACE]=6,o[C.TOPOLOGY_TYPES.WIRE]=5,o[C.TOPOLOGY_TYPES.LOOP]=4,o[C.TOPOLOGY_TYPES.COEDGE]=3,o[C.TOPOLOGY_TYPES.EDGE]=2,o[C.TOPOLOGY_TYPES.VERTEX]=1,function(e){var t=void 0;return\"function\"==typeof e.getTopologyType&&(t=o[e.getTopologyType()]),t||0}),N=function(){this._runTimeMap=new Map,this._typeidToFuncMap={},this.addLoader(\"body\",L.TopologySetters.setBodyData,_.Body),this.addLoader(\"wirebody\",L.TopologySetters.setWireBodyData,V.WireBody),this.addLoader(\"wire\",L.TopologySetters.setWireData,T.Wire),this.addLoader(\"lump\",L.TopologySetters.setLumpData,y.Lump),this.addLoader(\"shell\",L.TopologySetters.setShellData,m.Shell),this.addLoader(\"face\",L.TopologySetters.setFaceData,E.Face),this.addLoader(\"loop\",L.TopologySetters.setLoopData,x.Loop),this.addLoader(\"coedge\",L.TopologySetters.setCoedgeData,R.Coedge),this.addLoader(\"edge\",L.TopologySetters.setEdgeData,A.Edge),this.addLoader(\"vertex\",L.TopologySetters.setVertexData,P.Vertex),this.addLoader(\"point\",O.GeometrySetters.setPointFromProperty,i.Point),this.addLoader(\"line\",O.GeometrySetters.setLineFromProperty,n.Line),this.addLoader(\"circle\",O.GeometrySetters.setCircleFromProperty,s.Circle),this.addLoader(\"ellipse\",O.GeometrySetters.setEllipseFromProperty,a.Ellipse),this.addLoader(\"bcurve\",O.GeometrySetters.setBCurveFromProperty,c.BCurve),this.addLoader(\"plane\",O.GeometrySetters.setPlaneFromProperty,u.Plane),this.addLoader(\"sphere\",O.GeometrySetters.setSphereFromProperty,d.Sphere),this.addLoader(\"torus\",O.GeometrySetters.setTorusFromProperty,f.Torus),this.addLoader(\"cylinder\",O.GeometrySetters.setCylinderFromProperty,l.Cylinder),this.addLoader(\"cone\",O.GeometrySetters.setConeFromProperty,p.Cone),this.addLoader(\"ellipticalcylinder\",O.GeometrySetters.setEllipticalCylinderFromProperty,h.EllipticalCylinder),this.addLoader(\"ellipticalcone\",O.GeometrySetters.setEllipticalConeFromProperty,g.EllipticalCone),this.addLoader(\"bsurface\",O.GeometrySetters.setBSurfaceFromProperty,v.BSurface),this.addLoader(\"nmiattributestr\",S.AttributeSetters.setNMIAttributeStr,b.Attribute),this.addLoader(\"nmiattributearr\",S.AttributeSetters.setNMIAttributeArr,b.Attribute),this.addLoader(\"textattribute\",S.AttributeSetters.setTextAttribute,b.Attribute)};N.prototype.addLoader=function(e,t,r){this._typeidToFuncMap[e]=[t,r]},N.prototype._reset=function(){this._runTimeMap.clear()},N.prototype.getDataSettingFunction=function(e){var t=this._typeidToFuncMap[e];if(t)return t[0]},N.prototype.createRunTimeObject=function(e){var t=this.getTypeContructor(e);if(t)return new t},N.prototype.getTypeContructor=function(e){var t=this._typeidToFuncMap[e];if(t&&2===t.length)return t[1]},N.prototype.setObjectProperties=function(e,t,r){var o=this.getDataSettingFunction(e,r);const i=this;\"function\"==typeof o&&o(t,r,(e=>{if(!e)return;const t=e;return t?i._runTimeMap.get(t):void 0}))},N.prototype.makeGeometryObjectsProto=function(e){Object.keys(e).forEach((t=>{const r=e[t],o=r[r.geometry],i=this.createRunTimeObject(r.geometry);i&&(this._runTimeMap.set(t,i),this.setObjectProperties(r.geometry,i,o),i.setGuid(t))}))},N.prototype.makeGeometryObject=function(e){var t=e.getTypeid(),r=this.createRunTimeObject(t);return r?this.setObjectProperties(t,r,e):console.error(\"No constructor\"),r},N.prototype.makeTopologyObject=function(e){var t=e.getTypeid(),r=this.createRunTimeObject(t);return r||console.error(\"No constructor\"),r},N.prototype.makeAttributeObjectsProto=function(e){Object.keys(e).forEach((t=>{const r=e[t],o=r[r.attribute],i=new b.Attribute;this._runTimeMap.set(t,i),this.setObjectProperties(r.attribute,i,o),i.setGuid(t)}))},N.prototype.makeTopologyObjectsProto=function(e){var t=[];Object.keys(e).forEach((r=>{const o=e[r],i=o[o.topology],n=this.createRunTimeObject(o.topology);n&&(this._runTimeMap.set(r,n),t.push({type:o.topology,obj:n,prop:i}),n.setGuid(r))}));for(var r=0;r<t.length;++r)this.setObjectProperties(t[r].type,t[r].obj,t[r].prop)},N.prototype._collectGeometries=function(e){this._runTimeMap.forEach((function(t){void 0!==t.getGeometryType&&e.set(t.getGuid(),t)}))},N.prototype._collectTopologies=function(e){this._runTimeMap.forEach((function(t){void 0!==t.getTopologyType&&e.set(t.getGuid(),t)}))},N.prototype.loadModelPSet=function(e,t,r){var o=e.get(\"geometries\");if(o){var i=e.get(\"attributes\"),n=e.get(\"topologies\");if(n)return this.makeGeometryObjects(o),i&&this.makeAttributeObjects(i),this.makeTopologyObjects(n),this.getHighestObject(t,r)}},N.prototype.getHighestObject=function(e,t){var r=void 0,o=0;return this._runTimeMap.forEach((function(e){if(10!==o){var t=w(e);t>o&&t>0&&(o=t,r=e)}})),e&&this._collectGeometries(e),t&&this._collectTopologies(t),this._reset(),r},N.prototype.loadModelProtoMessage=function(e,t,r){const o=e.geometries;if(!o)return;const i=e.attributes,n=e.topologies;return n?(this.makeGeometryObjectsProto(o),i&&this.makeAttributeObjectsProto(i),this.makeTopologyObjectsProto(n),this.getHighestObject(t,r)):void 0},N.prototype.loadProtoBinary=function(e,t,r){let o=e;o instanceof ArrayBuffer&&(o=new Uint8Array(o));const i=M.Autodesk.lookupType(\"SolidDef.model_1_0_0\").decode(o);return this.loadModelProtoMessage(i,t,r)},t.getTopologyRank=w,t.SolidDefLoader=N},8032:(e,t,r)=>{\"use strict\";var o=r(4883),i=(o.roots.default||(o.roots.default=new o.Root)).addJSON({Autodesk:{nested:{SolidDef:{nested:{SolidDef_grpc:{methods:{}},point3d_1_0_0:{fields:{x:{type:\"double\",id:1},y:{type:\"double\",id:2},z:{type:\"double\",id:3}}},vector3d_1_0_0:{fields:{x:{type:\"double\",id:1},y:{type:\"double\",id:2},z:{type:\"double\",id:3}}},geometry_1_0_0:{fields:{}},geometry_1_0_0_Type:{oneofs:{geometry:{oneof:[\"point\",\"bsurface\",\"cone\",\"cylinder\",\"ellipticalcone\",\"ellipticalcylinder\",\"plane\",\"sphere\",\"surface\",\"torus\",\"bcurve\",\"circle\",\"curve\",\"ellipse\",\"line\"]}},fields:{point:{type:\"point_1_0_0\",id:1},bsurface:{type:\"bsurface_1_0_0\",id:2},cone:{type:\"cone_1_0_0\",id:3},cylinder:{type:\"cylinder_1_0_0\",id:4},ellipticalcone:{type:\"ellipticalcone_1_0_0\",id:5},ellipticalcylinder:{type:\"ellipticalcylinder_1_0_0\",id:6},plane:{type:\"plane_1_0_0\",id:7},sphere:{type:\"sphere_1_0_0\",id:8},surface:{type:\"surface_1_0_0\",id:9},torus:{type:\"torus_1_0_0\",id:10},bcurve:{type:\"bcurve_1_0_0\",id:11},circle:{type:\"circle_1_0_0\",id:12},curve:{type:\"curve_1_0_0\",id:13},ellipse:{type:\"ellipse_1_0_0\",id:14},line:{type:\"line_1_0_0\",id:15}}},paramrange_1_0_0:{fields:{low:{type:\"double\",id:1},high:{type:\"double\",id:2},type:{type:\"typeEnum\",id:3}},nested:{typeEnum:{values:{infinite:0,finite:1,boundBelow:2,boundAbove:3}}}},point_1_0_0:{fields:{position:{type:\"point3d_1_0_0\",id:1}}},bsurface_1_0_0:{fields:{uDegree:{type:\"uint32\",id:1},vDegree:{type:\"uint32\",id:2},uKnots:{rule:\"repeated\",type:\"double\",id:3},vKnots:{rule:\"repeated\",type:\"double\",id:4},controlPoints:{rule:\"repeated\",type:\"double\",id:5},weights:{rule:\"repeated\",type:\"double\",id:6},uRange:{type:\"paramrange_1_0_0\",id:7},vRange:{type:\"paramrange_1_0_0\",id:8}}},cone_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},axis:{type:\"vector3d_1_0_0\",id:2},radius:{type:\"vector3d_1_0_0\",id:3},angle:{type:\"double\",id:4},uCoordScale:{type:\"double\",id:5},uRange:{type:\"paramrange_1_0_0\",id:6},vRange:{type:\"paramrange_1_0_0\",id:7}}},cylinder_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},axis:{type:\"vector3d_1_0_0\",id:2},radius:{type:\"vector3d_1_0_0\",id:3},uCoordScale:{type:\"double\",id:4},uRange:{type:\"paramrange_1_0_0\",id:5},vRange:{type:\"paramrange_1_0_0\",id:6}}},ellipticalcone_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},axis:{type:\"vector3d_1_0_0\",id:2},majorRadius:{type:\"vector3d_1_0_0\",id:3},radiusRatio:{type:\"double\",id:4},angle:{type:\"double\",id:5},uCoordScale:{type:\"double\",id:6},uRange:{type:\"paramrange_1_0_0\",id:7},vRange:{type:\"paramrange_1_0_0\",id:8}}},ellipticalcylinder_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},axis:{type:\"vector3d_1_0_0\",id:2},majorRadius:{type:\"vector3d_1_0_0\",id:3},radiusRatio:{type:\"double\",id:4},uCoordScale:{type:\"double\",id:5},uRange:{type:\"paramrange_1_0_0\",id:6},vRange:{type:\"paramrange_1_0_0\",id:7}}},plane_1_0_0:{fields:{origin:{type:\"point3d_1_0_0\",id:1},normal:{type:\"vector3d_1_0_0\",id:2},uAxis:{type:\"vector3d_1_0_0\",id:3},uRange:{type:\"paramrange_1_0_0\",id:4},vRange:{type:\"paramrange_1_0_0\",id:5}}},sphere_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},radius:{type:\"vector3d_1_0_0\",id:2},axis:{type:\"vector3d_1_0_0\",id:3},uRange:{type:\"paramrange_1_0_0\",id:4},vRange:{type:\"paramrange_1_0_0\",id:5}}},surface_1_0_0:{fields:{uRange:{type:\"paramrange_1_0_0\",id:1},vRange:{type:\"paramrange_1_0_0\",id:2}}},surface_1_0_0_Type:{oneofs:{surface:{oneof:[\"bsurface\",\"cone\",\"cylinder\",\"ellipticalcone\",\"ellipticalcylinder\",\"plane\",\"sphere\",\"torus\"]}},fields:{bsurface:{type:\"bsurface_1_0_0\",id:1},cone:{type:\"cone_1_0_0\",id:2},cylinder:{type:\"cylinder_1_0_0\",id:3},ellipticalcone:{type:\"ellipticalcone_1_0_0\",id:4},ellipticalcylinder:{type:\"ellipticalcylinder_1_0_0\",id:5},plane:{type:\"plane_1_0_0\",id:6},sphere:{type:\"sphere_1_0_0\",id:7},torus:{type:\"torus_1_0_0\",id:8}}},torus_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},axis:{type:\"vector3d_1_0_0\",id:2},majorRadius:{type:\"double\",id:3},minorRadius:{type:\"double\",id:4},coordAxis:{type:\"vector3d_1_0_0\",id:5},lemon:{type:\"bool\",id:6},uRange:{type:\"paramrange_1_0_0\",id:7},vRange:{type:\"paramrange_1_0_0\",id:8}}},bcurve_1_0_0:{fields:{degree:{type:\"uint32\",id:1},knots:{rule:\"repeated\",type:\"double\",id:2},controlPoints:{rule:\"repeated\",type:\"double\",id:3},weights:{rule:\"repeated\",type:\"double\",id:4},range:{type:\"paramrange_1_0_0\",id:5}}},circle_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},normal:{type:\"vector3d_1_0_0\",id:2},radius:{type:\"vector3d_1_0_0\",id:3},range:{type:\"paramrange_1_0_0\",id:4}}},curve_1_0_0:{fields:{range:{type:\"paramrange_1_0_0\",id:1}}},curve_1_0_0_Type:{oneofs:{curve:{oneof:[\"bcurve\",\"circle\",\"ellipse\",\"line\"]}},fields:{bcurve:{type:\"bcurve_1_0_0\",id:1},circle:{type:\"circle_1_0_0\",id:2},ellipse:{type:\"ellipse_1_0_0\",id:3},line:{type:\"line_1_0_0\",id:4}}},ellipse_1_0_0:{fields:{center:{type:\"point3d_1_0_0\",id:1},normal:{type:\"vector3d_1_0_0\",id:2},majorRadius:{type:\"vector3d_1_0_0\",id:3},radiusRatio:{type:\"double\",id:4},range:{type:\"paramrange_1_0_0\",id:5}}},line_1_0_0:{fields:{position:{type:\"point3d_1_0_0\",id:1},direction:{type:\"vector3d_1_0_0\",id:2},range:{type:\"paramrange_1_0_0\",id:3}}},attribute_1_0_0:{fields:{}},attribute_1_0_0_Type:{oneofs:{attribute:{oneof:[\"nmiattribute\",\"nmiattributearr\",\"nmiattributestr\",\"textattribute\"]}},fields:{nmiattribute:{type:\"nmiattribute_1_0_0\",id:1},nmiattributearr:{type:\"nmiattributearr_1_0_0\",id:4},nmiattributestr:{type:\"nmiattributestr_1_0_0\",id:2},textattribute:{type:\"textattribute_1_0_0\",id:3}}},body_1_0_0:{fields:{lumps:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},coedge_1_0_0:{fields:{edge:{type:\"string\",id:1},partner:{type:\"string\",id:2},reversed:{type:\"bool\",id:3},attributes:{rule:\"repeated\",type:\"string\",id:4}}},edge_1_0_0:{fields:{vertex0:{type:\"string\",id:1},vertex1:{type:\"string\",id:2},precision:{type:\"double\",id:3},range:{type:\"paramrange_1_0_0\",id:4},reversed:{type:\"bool\",id:5},geometry:{type:\"string\",id:6},attributes:{rule:\"repeated\",type:\"string\",id:7}}},face_1_0_0:{fields:{loops:{rule:\"repeated\",type:\"string\",id:1},reversed:{type:\"bool\",id:2},geometry:{type:\"string\",id:3},attributes:{rule:\"repeated\",type:\"string\",id:4}}},loop_1_0_0:{fields:{coedges:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},lump_1_0_0:{fields:{shells:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},model_1_0_0:{fields:{geometries:{keyType:\"string\",type:\"geometry_1_0_0_Type\",id:1},topologies:{keyType:\"string\",type:\"topology_1_0_0_Type\",id:2},attributes:{keyType:\"string\",type:\"attribute_1_0_0_Type\",id:3}}},shell_1_0_0:{fields:{faces:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},topology_1_0_0:{fields:{attributes:{rule:\"repeated\",type:\"string\",id:1}}},topology_1_0_0_Type:{oneofs:{topology:{oneof:[\"body\",\"coedge\",\"edge\",\"face\",\"loop\",\"lump\",\"shell\",\"vertex\",\"wire\",\"wirebody\"]}},fields:{body:{type:\"body_1_0_0\",id:1},coedge:{type:\"coedge_1_0_0\",id:2},edge:{type:\"edge_1_0_0\",id:3},face:{type:\"face_1_0_0\",id:4},loop:{type:\"loop_1_0_0\",id:5},lump:{type:\"lump_1_0_0\",id:6},shell:{type:\"shell_1_0_0\",id:7},vertex:{type:\"vertex_1_0_0\",id:8},wire:{type:\"wire_1_0_0\",id:9},wirebody:{type:\"wirebody_1_0_0\",id:10}}},vertex_1_0_0:{fields:{precision:{type:\"double\",id:1},geometry:{type:\"string\",id:2},attributes:{rule:\"repeated\",type:\"string\",id:3}}},wire_1_0_0:{fields:{edges:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},wirebody_1_0_0:{fields:{wires:{rule:\"repeated\",type:\"string\",id:1},attributes:{rule:\"repeated\",type:\"string\",id:2}}},nmiattribute_1_0_0:{fields:{primaryId:{type:\"uint64\",id:1},secondaryId:{type:\"int64\",id:2},approachId:{type:\"int64\",id:3},operationIds:{rule:\"repeated\",type:\"int64\",id:4}}},nmiattributearr_1_0_0:{fields:{tagInfo:{rule:\"repeated\",type:\"nmiattributestr_1_0_0\",id:1}}},nmiattributestr_1_0_0:{fields:{primaryId:{type:\"string\",id:1},secondaryId:{type:\"string\",id:2},approachId:{type:\"string\",id:3},operationIds:{rule:\"repeated\",type:\"string\",id:4}}},textattribute_1_0_0:{fields:{text:{type:\"string\",id:1}}},entity:{oneofs:{entity:{oneof:[\"point3d\",\"vector3d\",\"geometry\",\"paramrange\",\"point\",\"bsurface\",\"cone\",\"cylinder\",\"ellipticalcone\",\"ellipticalcylinder\",\"plane\",\"sphere\",\"surface\",\"torus\",\"bcurve\",\"circle\",\"curve\",\"ellipse\",\"line\",\"attribute\",\"body\",\"coedge\",\"edge\",\"face\",\"loop\",\"lump\",\"model\",\"shell\",\"topology\",\"vertex\",\"wire\",\"wirebody\",\"nmiattribute\",\"nmiattributearr\",\"nmiattributestr\",\"textattribute\"]}},fields:{id:{type:\"string\",id:1},point3d:{type:\"point3d_1_0_0\",id:2},vector3d:{type:\"vector3d_1_0_0\",id:3},geometry:{type:\"geometry_1_0_0\",id:4},paramrange:{type:\"paramrange_1_0_0\",id:5},point:{type:\"point_1_0_0\",id:6},bsurface:{type:\"bsurface_1_0_0\",id:7},cone:{type:\"cone_1_0_0\",id:8},cylinder:{type:\"cylinder_1_0_0\",id:9},ellipticalcone:{type:\"ellipticalcone_1_0_0\",id:10},ellipticalcylinder:{type:\"ellipticalcylinder_1_0_0\",id:11},plane:{type:\"plane_1_0_0\",id:12},sphere:{type:\"sphere_1_0_0\",id:13},surface:{type:\"surface_1_0_0\",id:14},torus:{type:\"torus_1_0_0\",id:15},bcurve:{type:\"bcurve_1_0_0\",id:16},circle:{type:\"circle_1_0_0\",id:17},curve:{type:\"curve_1_0_0\",id:18},ellipse:{type:\"ellipse_1_0_0\",id:19},line:{type:\"line_1_0_0\",id:20},attribute:{type:\"attribute_1_0_0\",id:21},body:{type:\"body_1_0_0\",id:22},coedge:{type:\"coedge_1_0_0\",id:23},edge:{type:\"edge_1_0_0\",id:24},face:{type:\"face_1_0_0\",id:25},loop:{type:\"loop_1_0_0\",id:26},lump:{type:\"lump_1_0_0\",id:27},model:{type:\"model_1_0_0\",id:28},shell:{type:\"shell_1_0_0\",id:29},topology:{type:\"topology_1_0_0\",id:30},vertex:{type:\"vertex_1_0_0\",id:31},wire:{type:\"wire_1_0_0\",id:32},wirebody:{type:\"wirebody_1_0_0\",id:33},nmiattribute:{type:\"nmiattribute_1_0_0\",id:34},nmiattributearr:{type:\"nmiattributearr_1_0_0\",id:37},nmiattributestr:{type:\"nmiattributestr_1_0_0\",id:35},textattribute:{type:\"textattribute_1_0_0\",id:36}}}}}}}});e.exports=i},5316:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.saveToProtoBinary=t.saveToProtoMessage=t.SolidDefSaver=void 0;var o=r(8032),i=function(){};i.prototype.setVersion=function(e){console.warn(\"SolidDefSaver.prototype.setVersion is deprecated,\")};const n=function(e){const t=o.Autodesk.lookupType(\"SolidDef.model_1_0_0\"),r={topologies:{},geometries:{},attributes:{}};return e.addToModelObject(r),t.create(r)};t.SolidDefSaver=i,t.saveToProtoMessage=n,t.saveToProtoBinary=function(e){const t=o.Autodesk.lookupType(\"SolidDef.model_1_0_0\"),r=n(e);return t.encode(r).finish()}},7360:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TopologySetters=void 0;var o=r(6752);const i={},n=function(e,t,r){const o=t.attributes;if(o){e.removeAllAttributes();for(var i=0;i<o.length;++i){let t=r(o[i]);e.addAttribute(t)}}};i.setBodyData=function(e,t,r){for(var o=t.lumps,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setBody(e)}e.setLumps(i),n(e,t,r)},i.setLumpData=function(e,t,r){for(var o=t.shells,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setLump(e)}e.setShells(i),n(e,t,r)},i.setShellData=function(e,t,r){for(var o=t.faces,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setShell(e)}e.setFaces(i),n(e,t,r)},i.setFaceData=function(e,t,r){for(var o=t.loops,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setFace(e)}e.setLoops(i),e.setReversed(t.reversed),e.setSurface(r(t.geometry)),n(e,t,r)},i.setLoopData=function(e,t,r){for(var o=t.coedges,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setLoop(e)}e.setCoedges(i),n(e,t,r)},i.setCoedgeData=function(e,t,r){e.setEdge(r(t.edge)),e.setReversed(t.reversed),e.setPartner(r(t.partner)),e.getEdge()&&!e.getEdge().getCoedge()&&e.getEdge().setCoedge(e),n(e,t,r)},i.setEdgeData=function(e,t,r){e.setVertex(0,r(t.vertex0)),e.setVertex(1,r(t.vertex1));var i=(0,o.propertyToRange)(t,\"range\");e.sett0(i[0]),e.sett1(i[1]),e.setReversed(t.reversed),e.setPrecision(t.precision),e.setCurve(r(t.geometry)),n(e,t,r)},i.setVertexData=function(e,t,r){e.setPrecision(t.precision),e.setPoint(r(t.geometry)),n(e,t,r)},i.setWireBodyData=function(e,t,r){for(var o=t.wires,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setWireBody(e)}e.setWires(i),n(e,t,r)},i.setWireData=function(e,t,r){for(var o=t.edges,i=new Array(o.length),s=0;s<o.length;++s){var a=o[s];i[s]=r(a),i[s].setWire(e)}e.setEdges(i),n(e,t,r)},t.TopologySetters=i},3888:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.controlPointsFromHomogeneous=t.controlPointsToHomogeneous=t.getUniqueKnots=t.findKnotSpanAndMultiplicity=t.findKnotSpan=void 0;var o=r(2468),i=r(4728),n=function(e,t){var r=0,o=t.length-1;if(e<=t[r]){for(;t[r]===t[r+1]&&r<o-1;)r+=1;return r}if(e>=t[o]){for(;t[o]===t[o-1]&&o>r+1;)o-=1;return o-1}for(var i=Math.floor((r+o)/2);e<t[i]||e>=t[i+1];)e<t[i]?o=i:r=i,i=Math.floor((r+o)/2);return i};t.findKnotSpan=n,t.findKnotSpanAndMultiplicity=function(e,t){var r=o.PARAMETER_SPACE_TOLERANCE,i=n(e,t),s=0,a=e,c=i;if(e<t[c]+r)for(a=t[c];c>=0&&Math.abs(t[c]-a)<r;)--c,++s;else if(e>t[c+1]-r){for(a=t[++c];c<t.length&&Math.abs(t[c]-a)<r;)++c,++s;a=c<t.length?t[i=c-1]:t[t.length-1]}return{span:i,multiplicity:s,knot:a}},t.getUniqueKnots=function(e){for(var t=[e[0]],r=1;r<e.length;++r)e[r]!==e[r-1]&&t.push(e[r]);return t},t.controlPointsToHomogeneous=function(e,t){i.ConsoleUtils.assert(e.length>0&&e.length===3*t.length);for(var r=t.length,o=new Array(4*r),n=0;n<r;++n){var s=t[n];o[4*n]=e[3*n]*s,o[4*n+1]=e[3*n+1]*s,o[4*n+2]=e[3*n+2]*s,o[4*n+3]=s}return o},t.controlPointsFromHomogeneous=function(e){i.ConsoleUtils.assert(e.length>0&&e.length%4==0);for(var t=e.length/4,r=new Array(3*t),o=new Array(t),n=0;n<t;++n){var s=e[4*n+3];r[3*n]=e[4*n]/s,r[3*n+1]=e[4*n+1]/s,r[3*n+2]=e[4*n+2]/s,o[n]=s}return{P:r,w:o}}},5564:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.relaxBCurveToPerpendicular=t.closestBCurveSegments=t.maxDistanceSqrToHull=t.minDistanceSqrToHull=void 0;var o=r(1972),i=r(2468),n=r(48),s=r(1e3),a=function(e,t){var r,n=t.length/3,s=o.Vector3.asFloat64(0,0,0);for(r=0;r<n;++r)s[0]+=t[3*r],s[1]+=t[3*r+1],s[2]+=t[3*r+2];o.Vector3.scale(s,s,1/n),o.Vector3.sub(s,s,e);var a=o.Vector3.squaredLength(s);if(a<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)return 0;var c=Number.POSITIVE_INFINITY;for(r=0;r<n;++r){var u=s[0]*(t[3*r]-e[0])+s[1]*(t[3*r+1]-e[1])+s[2]*(t[3*r+2]-e[2]);u<c&&(c=u)}return c<=0?0:c*c/a},c=function(e,t){for(var r=t.length/3,o=0,i=0;i<r;++i){var n=t[3*i]-e[0],s=t[3*i+1]-e[1],a=t[3*i+2]-e[2],c=n*n+s*s+a*a;c>o&&(o=c)}return o};t.minDistanceSqrToHull=a,t.maxDistanceSqrToHull=c,t.closestBCurveSegments=function(e,t,r,i){for(var n=Number.POSITIVE_INFINITY,s=[],u=0;u<t.length;++u){var l,h=t[u],d=h.getRangeUnlimited();if(i){l=!1;for(var p=0;p<i.length;++p)if(d[1]>=i[p][0]+o.FLOAT64_TOLERANCE&&d[0]<=i[p][1]-o.FLOAT64_TOLERANCE){l=!0;break}}else l=!0;if(l){var g=r?r[u]:0,f=h.getControlPoints(),v=a(e,f);if((v=Math.max(0,v-g))<=n){var _=c(e,f)+g;s.push({index:u,minDistSqr:v,maxDistSqr:_}),_<n&&(n=_)}}}return(s=s.filter((function(e){return e.minDistSqr<=n}))).sort((function(e,t){var r=e.minDistSqr-t.minDistSqr;return 0===r?e.maxDistSqr-t.maxDistSqr:r})),s},t.relaxBCurveToPerpendicular=function(e,t,r,i,a,c,u,l){var h=u||o.FLOAT64_TOLERANCE,d=l||32,p=t.length/3,g=e.length-p-1;return(0,s.newtonRaphson1D)((function(o){var s=(0,n.evaluateBCurveDerivs)(o,2,g,e,t,r),a=s[0],c=s[1],u=s[2],l=[a[0]-i[0],a[1]-i[1],a[2]-i[2]];return{val:2*(l[0]*c[0]+l[1]*c[1]+l[2]*c[2]),deriv:2*(l[0]*u[0]+l[1]*u[1]+l[2]*u[2]+(c[0]*c[0]+c[1]*c[1]+c[2]*c[2]))}}),c,a,h,d)}},6200:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.decomposeBCurveFlags=t.decomposeBCurveToBezier=t.decomposeBCurveControlPoints=void 0;var o=r(3888),i=r(4728),n=function(e,t,r){i.ConsoleUtils.assert(t.length%r==0);var o,n,s,a=e.length-t.length/r-1;i.ConsoleUtils.assert(a>0);var c=e.length-1,u=a,l=a+1,h=0,d=[],p=[];for(p[h]=new Array((a+1)*r),o=0;o<=a;++o)for(s=0;s<r;++s)p[h][o*r+s]=t[o*r+s];for(;l<c;){for(var g=1;l<c&&e[l+1]===e[l];)++l,++g;var f=l===c;if(f||(p[h+1]=new Array((a+1)*r)),g<a){var v=e[l]-e[u];for(n=a;n>g;--n)d[n-g-1]=v/(e[u+n]-e[u]);var _=a-g;for(n=1;n<=_;++n){for(var y=_-n,m=g+n,E=a;E>=m;--E){var x=d[E-m];for(s=0;s<r;++s)p[h][E*r+s]=p[h][E*r+s]*x+p[h][(E-1)*r+s]*(1-x)}if(!f)for(s=0;s<r;++s)p[h+1][y*r+s]=p[h][a*r+s]}}if(f)break;for(++h,o=a-g;o<=a;++o)for(s=0;s<r;++s)p[h][o*r+s]=t[(l-a+o)*r+s];u=l,++l}return p};t.decomposeBCurveControlPoints=n,t.decomposeBCurveToBezier=function(e,t,r){var s,a=r&&r.length>0;i.ConsoleUtils.assert(t.length>0&&t.length%3==0),i.ConsoleUtils.assert(!a||t.length===3*r.length);var c,u,l=e.length-t.length/3-1;if(i.ConsoleUtils.assert(l>0),a){var h=(0,o.controlPointsToHomogeneous)(t,r);for(c=n(e,h,4),u=[],s=0;s<c.length;++s){var d=(0,o.controlPointsFromHomogeneous)(c[s]);c[s]=d.P,u[s]=d.w}}else c=n(e,t,3),u=void 0;var p=(0,o.getUniqueKnots)(e);i.ConsoleUtils.assert(p.length===c.length+1);var g=new Array(p.length-1);for(s=0;s<g.length;++s)g[s]=new Array(2*l+2),g[s].fill(p[s],0,l+1),g[s].fill(p[s+1],l+1);return{U:g,P:c,w:u}},t.decomposeBCurveFlags=function(e,t){var r,o=e.length-t.length-1,i=new Array(t.length);i.fill(!1);var n=o-1;for(r=0;r<t.length;++r)if(t[r]){var s=Math.max(r-n,0),a=Math.min(r+n,i.length-1);i.fill(!0,s,a+1)}var c=[],u=e.length-1,l=o+1,h=0;for(c[h]=!1,r=0;r<=o;++r)i[r]&&(c[h]=!0);for(;l<u;){for(var d=1;l<u&&e[l+1]===e[l];)++l,++d;if(l===u)break;for(c[++h]=!1,r=o-d;r<=o;++r)i[l-o+r]&&(c[h]=!0);++l}return c}},48:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.evaluateBCurveDerivs=t.evaluateBCurvePoint=t.evaluateBasisDerivatives=t.evaluateBasisFunctions=void 0;var o,i,n,s,a=r(1972),c=r(5896),u=r(3888),l=(o=null,i=null,function(e,t,r,n){(null===o||o.length<r+1)&&(o=new Float64Array(r+1),i=new Float64Array(r+1));var s=new Float64Array(r+1);s[0]=1;for(var a=1;a<=r;++a){o[a]=t-n[e+1-a],i[a]=n[e+a]-t;for(var c=0,u=0;u<a;++u){var l=s[u]/(i[u+1]+o[a-u]);s[u]=c+i[u+1]*l,c=o[a-u]*l}s[a]=c}return s}),h=function(){var e=null,t=null,r=null,o=null;return function(i,n,s,a,c,u){var l,h,d;if(null===t||t.length<s+1){for(e=[new Float64Array(s+1),new Float64Array(s+1)],t=new Array(s+1),l=0;l<s+1;++l)t[l]=new Float64Array(s+1);r=new Float64Array(s+1),o=new Float64Array(s+1)}if(!u)for(u=new Array(a+1),l=0;l<=a;++l)u[l]=new Float64Array(s+1);for(t[0][0]=1,l=1;l<=s;++l){r[l]=n-c[i+1-l],o[l]=c[i+l]-n;var p=0;for(d=0;d<l;++d){t[l][d]=o[d+1]+r[l-d];var g=t[d][l-1]/t[l][d];t[d][l]=p+o[d+1]*g,p=r[l-d]*g}t[l][l]=p}for(l=0;l<=s;++l)u[0][l]=t[l][s];for(d=0;d<=s;++d){var f=0,v=1;for(e[0][0]=1,h=1;h<=a;++h){var _,y=0,m=d-h,E=s-h;for(d>=h&&(e[v][0]=e[f][0]/t[E+1][m],y=e[v][0]*t[m][E]),_=d-1<=E?h-1:s-d,l=m>=-1?1:-m;l<=_;++l)e[v][l]=(e[f][l]-e[f][l-1])/t[E+1][m+l],y+=e[v][l]*t[m+l][E];d<=E&&(e[v][h]=-e[f][h-1]/t[E+1][d],y+=e[v][h]*t[d][E]),u[h][d]=y,l=f,f=v,v=l}}for(d=s,h=1;h<=a;++h){for(l=0;l<=s;++l)u[h][l]*=d;d*=s-h}return u}}(),d=(n=null,s=null,function(e,t,r,o,i,l){var d,p,g;if(null===n||n.length<r+1){for(n=new Array(r+1),d=0;d<=r;++d)n[d]=new Float64Array(r+1);s=new Float64Array(r+1)}var f=Math.min(t,r),v=l&&l.length>0,_=(0,u.findKnotSpan)(e,o);h(_,e,r,f,o,n);var y=new Array(t+1);for(d=0;d<=t;++d)y[d]=a.Vector3.createFloat64();for(p=0;p<=f;++p){var m=3*(_-r);if(v)for(s[p]=0,d=0;d<=r;++d)g=l[_-r+d]*n[p][d],y[p][0]+=i[m]*g,y[p][1]+=i[m+1]*g,y[p][2]+=i[m+2]*g,s[p]+=g,m+=3;else for(d=0;d<=r;++d)g=n[p][d],y[p][0]+=i[m]*g,y[p][1]+=i[m+1]*g,y[p][2]+=i[m+2]*g,m+=3}if(v)for(p=0;p<=f;++p){var E=y[p];for(d=1;d<=p;++d)g=-c.binomialCoefficients[p][d]*s[d],a.Vector3.scaleAndAdd(E,E,y[p-d],g);a.Vector3.scale(E,E,1/s[0])}return y});t.evaluateBasisFunctions=l,t.evaluateBasisDerivatives=h,t.evaluateBCurvePoint=function(e,t,r,o,i){var n,s,c=(0,u.findKnotSpan)(e,r),h=l(c,e,t,r),d=i&&i.length>0,p=a.Vector3.createFloat64(),g=0,f=3*(c-t);if(d){for(n=0;n<=t;++n)s=i[c-t+n]*h[n],p[0]+=o[f]*s,p[1]+=o[f+1]*s,p[2]+=o[f+2]*s,g+=s,f+=3;a.Vector3.scale(p,p,1/g)}else for(n=0;n<=t;++n)s=h[n],p[0]+=o[f]*s,p[1]+=o[f+1]*s,p[2]+=o[f+2]*s,f+=3;return p},t.evaluateBCurveDerivs=d},9952:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=function(e,t){this.content=[],this.scoreFunction=e,this.lookupFunction=t,this.lookupFunction&&(this.nodeDict={})};r.prototype={push:function(e){this.content.push(e),this.lookupFunction&&(this.nodeDict[this.lookupFunction(e)]=this.content.length-1),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.lookupFunction&&(this.nodeDict[this.lookupFunction(t)]=0),this.sinkDown(0)),this.lookupFunction&&delete this.nodeDict[this.lookupFunction(e)],e},peek:function(){return this.content[0]},getNodeIndex:function(e){if(this.lookupFunction)return this.nodeDict[this.lookupFunction(e)];for(var t=this.content.length,r=0;r<t;r++)if(this.content[r]===e)return r;throw new Error(\"Node not found.\")},updated:function(e){var t=this.getNodeIndex(e),r=this.scoreFunction(e),o=Math.floor((t+1)/2)-1,i=this.content[o];if(t>0&&r<this.scoreFunction(i))this.bubbleUp(t);else{var n=2*(t+1),s=n-1,a=this.content[s],c=this.content[n];(a&&r>this.scoreFunction(a)||c&&r>this.scoreFunction(c))&&this.sinkDown(t)}},remove:function(e){var t=this.content.length,r=this.getNodeIndex(e),o=this.content.pop();r!==t-1&&(this.content[r]=o,this.scoreFunction(o)<this.scoreFunction(e)?this.bubbleUp(r):this.sinkDown(r))},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e];e>0;){var r=Math.floor((e+1)/2)-1,o=this.content[r];if(!(this.scoreFunction(t)<this.scoreFunction(o)))break;this.content[r]=t,this.content[e]=o,this.lookupFunction&&(this.nodeDict[this.lookupFunction(t)]=r,this.nodeDict[this.lookupFunction(o)]=e),e=r}},sinkDown:function(e){for(var t=this.content.length,r=this.content[e],o=this.scoreFunction(r);;){var i=2*(e+1),n=i-1,s=null;if(n<t){var a=this.content[n],c=this.scoreFunction(a);c<o&&(s=n)}if(i<t){var u=this.content[i];this.scoreFunction(u)<(null===s?o:c)&&(s=i)}if(null===s)break;this.content[e]=this.content[s],this.content[s]=r,this.lookupFunction&&(this.nodeDict[this.lookupFunction(this.content[e])]=e,this.nodeDict[this.lookupFunction(this.content[s])]=s),e=s}}},t.BinaryHeap=r},3344:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.BoundingBox=void 0;var o=r(1972),i=r(2468),n=function(e,t){this.min=e?o.Vector3.createFloat64FromValues(e[0],e[1],e[2]):o.Vector3.createFloat64FromValues(1/0,1/0,1/0),this.max=t?o.Vector3.createFloat64FromValues(t[0],t[1],t[2]):o.Vector3.createFloat64FromValues(-1/0,-1/0,-1/0)};n.prototype.toString=function(){return\"(x:\"+this.min[0]+\", y:\"+this.min[1]+\", z:\"+this.min[2]+\") -> (x:\"+this.max[0]+\", y:\"+this.max[1]+\", z:\"+this.max[2]+\")\"},n.prototype.copy=function(e){return o.Vector3.copy(this.min,e.min),o.Vector3.copy(this.max,e.max),this},n.prototype.clone=function(){return new n(this.min,this.max)},n.prototype.getWidth=function(e){var t=0;return 0<=e&&e<=2?(t=this.max[e]-this.min[e],isFinite(t)?t:0):(console.error(\"wrong axis argument supplied to BoundingBox.getWidth(): \"+e),0)},n.prototype.getMaxMinAligned=function(e,t,r){for(var i,s,a,c=this.getCorners(),u=[],l=[],h=[],d=0;d<c.length;++d)i=o.Vector3.dot(c[d],e),s=o.Vector3.dot(c[d],t),a=o.Vector3.dot(c[d],r),u.push(i),l.push(s),h.push(a);var p=Math.min.apply(void 0,u),g=Math.min.apply(void 0,l),f=Math.min.apply(void 0,h),v=Math.max.apply(void 0,u),_=Math.max.apply(void 0,l),y=Math.max.apply(void 0,h);return new n([p,g,f],[v,_,y])},n.prototype.include=function(e){return this.includeX(e.min[0],e.max[0]),this.includeY(e.min[1],e.max[1]),this.includeZ(e.min[2],e.max[2]),this},n.prototype.includeX=function(e,t){return this.min[0]=Math.min(this.min[0],e),this.max[0]=Math.max(this.max[0],t),this},n.prototype.includeY=function(e,t){return this.min[1]=Math.min(this.min[1],e),this.max[1]=Math.max(this.max[1],t),this},n.prototype.includeZ=function(e,t){return this.min[2]=Math.min(this.min[2],e),this.max[2]=Math.max(this.max[2],t),this},n.prototype.includeSphere=function(e){var t=e.getCenter(),r=e.getRadius();return this.includeX(t[0]-r,t[0]+r),this.includeY(t[1]-r,t[1]+r),this.includeZ(t[2]-r,t[2]+r),this},n.prototype.translate=function(e){return o.Vector3.add(this.min,this.min,e),o.Vector3.add(this.max,this.max,e),this},n.prototype.getCorners=function(){var e=this.getDiagonal();return[o.Vector3.clone(this.min),o.Vector3.createFloat64FromValues(this.min[0]+e[0],this.min[1],this.min[2]),o.Vector3.createFloat64FromValues(this.min[0],this.min[1]+e[1],this.min[2]),o.Vector3.createFloat64FromValues(this.min[0],this.min[1],this.min[2]+e[2]),o.Vector3.createFloat64FromValues(this.min[0]+e[0],this.min[1]+e[1],this.min[2]),o.Vector3.createFloat64FromValues(this.min[0]+e[0],this.min[1],this.min[2]+e[2]),o.Vector3.createFloat64FromValues(this.min[0],this.min[1]+e[1],this.min[2]+e[2]),o.Vector3.clone(this.max)]},n.prototype.transform=function(e){if(!this.isEmpty()){var t=this.getCorners();this.max[0]=-1/0,this.max[1]=-1/0,this.max[2]=-1/0,this.min[0]=1/0,this.min[1]=1/0,this.min[2]=1/0;for(var r=0;r<t.length;++r)o.Vector3.transformMatrix44(t[r],t[r],e),o.Vector3.max(this.max,this.max,t[r]),o.Vector3.min(this.min,this.min,t[r])}return this},n.prototype.includePointXYZ=function(e){return this.includeX(e.x,e.x),this.includeY(e.y,e.y),this.includeZ(e.z,e.z),this},n.prototype.includePoint=function(e){return this.includeX(e[0],e[0]),this.includeY(e[1],e[1]),this.includeZ(e[2],e[2]),this},n.prototype.getCenter=function(){var e=o.Vector3.createFloat64();return o.Vector3.add(e,this.min,this.max),o.Vector3.scale(e,e,.5),e},n.prototype.getDiagonal=function(){var e=o.Vector3.createFloat64();return o.Vector3.sub(e,this.max,this.min),e},n.prototype.isPointInside=function(e){return!(e[0]<this.min[0]||e[0]>this.max[0])&&(!(e[1]<this.min[1]||e[1]>this.max[1])&&!(e[2]<this.min[2]||e[2]>this.max[2]))},n.prototype.isPointInsideWithTolerance=function(e,t){return t||(t=i.KERNEL_TOLERANCE),!(e[0]<this.min[0]-t||e[0]>this.max[0]+t)&&(!(e[1]<this.min[1]-t||e[1]>this.max[1]+t)&&!(e[2]<this.min[2]-t||e[2]>this.max[2]+t))},n.prototype.intersects=function(e){return!(e.min[0]>this.max[0]||e.max[0]<this.min[0])&&(!(e.min[1]>this.max[1]||e.max[1]<this.min[1])&&!(e.min[2]>this.max[2]||e.max[2]<this.min[2]))},n.prototype.intersectsWithTolerance=function(e,t){return t||(t=i.KERNEL_TOLERANCE),!(e.min[0]>this.max[0]+t||e.max[0]<this.min[0]-t)&&(!(e.min[1]>this.max[1]+t||e.max[1]<this.min[1]-t)&&!(e.min[2]>this.max[2]+t||e.max[2]<this.min[2]-t))},n.prototype.isEmpty=function(){return this.max[0]<this.min[0]||this.max[1]<this.min[1]||this.max[2]<this.min[2]},n.prototype.setEmpty=function(){return this.max[0]=-1/0,this.min[0]=1/0,this.max[1]=-1/0,this.min[1]=1/0,this.max[2]=-1/0,this.min[2]=1/0,this},n.prototype.isBounded=function(){return isFinite(this.max[0])&&isFinite(this.max[1])&&isFinite(this.max[2])&&isFinite(this.min[0])&&isFinite(this.min[1])&&isFinite(this.min[2])},t.BoundingBox=n},1288:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.closestBSurfacePointApprox=t.closestBSurfacePatches=void 0;var o=r(1972),i=r(5896),n=r(5564),s=r(6824);t.closestBSurfacePatches=function(e,t,r){for(var i=Number.POSITIVE_INFINITY,s=[],a=0;a<t.length;++a)for(var c=0;c<t[a].length;++c){var u,l=t[a][c],h=l.getRangeUnlimitedU(),d=l.getRangeUnlimitedV();if(r){u=!1;for(var p=0;p<r.length;++p)if(h[1]>=r[p][0][0]+o.FLOAT64_TOLERANCE&&h[0]<=r[p][0][1]-o.FLOAT64_TOLERANCE&&d[1]>=r[p][1][0]+o.FLOAT64_TOLERANCE&&d[0]<=r[p][1][1]-o.FLOAT64_TOLERANCE){u=!0;break}}else u=!0;if(u){var g=l.getControlPoints(),f=(0,n.minDistanceSqrToHull)(e,g,!0);if(f<=i){var v=(0,n.maxDistanceSqrToHull)(e,g);s.push({index:[a,c],minDistSqr:f,maxDistSqr:v}),v<i&&(i=v)}}}return(s=s.filter((function(e){return e.minDistSqr<=i}))).sort((function(e,t){var r=e.minDistSqr-t.minDistSqr;return 0===r?e.maxDistSqr-t.maxDistSqr:r})),s},t.closestBSurfacePointApprox=function(e,t,r,n,a,c,u,l,h){var d=t>1?2*t:1,p=r>1?2*r:1,g=(l[1]-l[0])/(n[n.length-1]-n[0]),f=(h[1]-h[0])/(a[a.length-1]-a[0]);d=Math.max(1,Math.round(d*g)),p=Math.max(1,Math.round(p*f));for(var v=(l[1]-l[0])/d,_=(h[1]-h[0])/p,y=Number.POSITIVE_INFINITY,m={u:void 0,v:void 0},E=void 0,x=o.Vector3.createFloat64(),R=0;R<=p;++R){for(var A=h[0]+R*_,P=[],V=0;V<=d;++V){var T,b,C=l[0]+V*v;if(P[V]=(0,s.evaluateBSurfacePoint)(C,A,t,r,n,a,c,u),V>0&&R>0)T=(0,i.closestPointToTriangle)(e,E[V-1],E[V],P[V-1],x),(b=o.Vector3.squaredDistance(e,x))<y&&(y=b,m.u=C+v*(T.coordA-1),m.v=A+_*(T.coordB-1)),T=(0,i.closestPointToTriangle)(e,P[V],P[V-1],E[V],x),(b=o.Vector3.squaredDistance(e,x))<y&&(y=b,m.u=C-v*T.coordA,m.v=A-_*T.coordB)}E=P}return m}},192:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.decomposeBSurfaceToBezier=t.decomposeBSurfaceControlPoints=t.decomposeBSurfaceControlPointsV=t.decomposeBSurfaceControlPointsU=void 0;var o=r(3888),i=r(4728),n=function(e,t,r,o){i.ConsoleUtils.assert(r.length%o==0);var n=t.length-e-1;i.ConsoleUtils.assert(r.length/o%n==0);var s,a,c,u,l=r.length/(o*n),h=e+1,d=l,p=t.length-1,g=e,f=e+1,v=0,_=[],y=[];for(y[v]=new Array(h*d*o),s=0;s<=e;++s)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(s*d+c)*o+u]=r[(s*l+c)*o+u];for(;f<p;){for(var m=1;f<p&&t[f+1]===t[f];)++f,++m;var E=f===p;if(E||(y[v+1]=new Array(h*d*o)),m<e){var x=t[f]-t[g];for(a=e;a>m;--a)_[a-m-1]=x/(t[g+a]-t[g]);var R=e-m;for(a=1;a<=R;++a){for(var A=R-a,P=m+a,V=e;V>=P;--V){var T=_[V-P];for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(V*d+c)*o+u]=y[v][(V*d+c)*o+u]*T+y[v][((V-1)*d+c)*o+u]*(1-T)}if(!E)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v+1][(A*d+c)*o+u]=y[v][(e*d+c)*o+u]}}if(E)break;for(++v,s=e-m;s<=e;++s)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(s*d+c)*o+u]=r[((f-e+s)*l+c)*o+u];g=f,++f}return y},s=function(e,t,r,o){i.ConsoleUtils.assert(r.length%o==0);var n=t.length-e-1;i.ConsoleUtils.assert(r.length/o%n==0);var s,a,c,u,l=r.length/(o*n),h=l,d=e+1,p=t.length-1,g=e,f=e+1,v=0,_=[],y=[];for(y[v]=new Array(h*d*o),s=0;s<=e;++s)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(s+c*d)*o+u]=r[(s+c*n)*o+u];for(;f<p;){for(var m=1;f<p&&t[f+1]===t[f];)++f,++m;var E=f===p;if(E||(y[v+1]=new Array(h*d*o)),m<e){var x=t[f]-t[g];for(a=e;a>m;--a)_[a-m-1]=x/(t[g+a]-t[g]);var R=e-m;for(a=1;a<=R;++a){for(var A=R-a,P=m+a,V=e;V>=P;--V){var T=_[V-P];for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(V+c*d)*o+u]=y[v][(V+c*d)*o+u]*T+y[v][(V-1+c*d)*o+u]*(1-T)}if(!E)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v+1][(A+c*d)*o+u]=y[v][(e+c*d)*o+u]}}if(E)break;for(++v,s=e-m;s<=e;++s)for(c=0;c<l;++c)for(u=0;u<o;++u)y[v][(s+c*d)*o+u]=r[(f-e+s+c*n)*o+u];g=f,++f}return y},a=function(e,t,r,o,a,c){i.ConsoleUtils.assert(a.length%c==0),i.ConsoleUtils.assert(a.length/c==(r.length-e-1)*(o.length-t-1));var u,l=r.length>2*e+2,h=o.length>2*t+2;if(!l&&!h)return[[a.slice()]];u=l?n(e,r,a,c):[a];for(var d=0;d<u.length;++d)u[d]=h?s(t,o,u[d],c):[u[d]];return u};t.decomposeBSurfaceControlPointsU=n,t.decomposeBSurfaceControlPointsV=s,t.decomposeBSurfaceControlPoints=a,t.decomposeBSurfaceToBezier=function(e,t,r,n,s,c){var u,l,h,d,p=c&&c.length>0;if(i.ConsoleUtils.assert(s.length>0&&s.length%3==0),i.ConsoleUtils.assert(!p||s.length===3*c.length),p){var g=(0,o.controlPointsToHomogeneous)(s,c);for(h=a(e,t,r,n,g,4),d=[],u=0;u<h.length;++u)for(d[u]=[],l=0;l<h[u].length;++l){var f=(0,o.controlPointsFromHomogeneous)(h[u][l]);h[u][l]=f.P,d[u][l]=f.w}}else h=a(e,t,r,n,s,3),d=void 0;var v=(0,o.getUniqueKnots)(r);i.ConsoleUtils.assert(v.length===h.length+1);var _=new Array(v.length-1);for(u=0;u<_.length;++u)_[u]=new Array(2*e+2),_[u].fill(v[u],0,e+1),_[u].fill(v[u+1],e+1);var y=(0,o.getUniqueKnots)(n);i.ConsoleUtils.assert(y.length===h[0].length+1);var m=new Array(y.length-1);for(u=0;u<m.length;++u)m[u]=new Array(2*t+2),m[u].fill(y[u],0,t+1),m[u].fill(y[u+1],t+1);return{U:_,V:m,P:h,w:d}}},6824:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.evaluateBSurfaceDerivs=t.evaluateBSurfacePoint=void 0;var o=r(1972),i=r(5896),n=r(3888),s=r(48);t.evaluateBSurfacePoint=function(e,t,r,i,a,c,u,l){return l&&l.length>0?function(e,t,r,i,a,c,u,l){for(var h,d=c.length-i-1,p=(0,n.findKnotSpan)(e,a),g=(0,s.evaluateBasisFunctions)(p,e,r,a),f=(0,n.findKnotSpan)(t,c),v=(0,s.evaluateBasisFunctions)(f,t,i,c),_=p-r,y=o.Vector4.createFloat64(),m=o.Vector4.createFloat64(),E=0;E<=i;E++){o.Vector4.set(m,0,0,0,0),h=f-i+E;for(var x=0;x<=r;x++){var R=(_+x)*d+h,A=g[x]*l[R];m[0]+=A*u[3*R],m[1]+=A*u[3*R+1],m[2]+=A*u[3*R+2],m[3]+=A}y[0]+=v[E]*m[0],y[1]+=v[E]*m[1],y[2]+=v[E]*m[2],y[3]+=v[E]*m[3]}return o.Vector3.createFloat64FromValues(y[0]/y[3],y[1]/y[3],y[2]/y[3])}(e,t,r,i,a,c,u,l):function(e,t,r,i,a,c,u){for(var l,h=c.length-i-1,d=(0,n.findKnotSpan)(e,a),p=(0,s.evaluateBasisFunctions)(d,e,r,a),g=(0,n.findKnotSpan)(t,c),f=(0,s.evaluateBasisFunctions)(g,t,i,c),v=d-r,_=o.Vector3.createFloat64(),y=o.Vector3.createFloat64(),m=0;m<=i;m++){o.Vector3.set(y,0,0,0),l=g-i+m;for(var E=0;E<=r;E++){var x=(v+E)*h+l;y[0]+=p[E]*u[3*x],y[1]+=p[E]*u[3*x+1],y[2]+=p[E]*u[3*x+2]}_[0]+=f[m]*y[0],_[1]+=f[m]*y[1],_[2]+=f[m]*y[2]}return _}(e,t,r,i,a,c,u)},t.evaluateBSurfaceDerivs=function(e,t,r,a,c,u,l,h,d){return function(e,t,r,a,c,u,l,h,d){var p,g,f,v,_,y,m=new Array(r+1),E=new Array(r+1),x=new Array(r+1),R=new Array(r+1);for(p=0;p<=r;p++){for(m[p]=new Array(r+1-p),E[p]=new Array(r+1-p),g=0;g<=r-p;g++)m[p][g]=o.Vector3.createFloat64(),E[p][g]=0;x[p]=new Array(a+1),R[p]=new Array(c+1)}var A=Math.min(r,a),P=(0,n.findKnotSpan)(e,u);(0,s.evaluateBasisDerivatives)(P,e,a,A,u,x);var V=Math.min(r,c),T=(0,n.findKnotSpan)(t,l);(0,s.evaluateBasisDerivatives)(T,t,c,V,l,R);var b=d&&d.length>0,C=l.length-c-1,O=new Array(c+1);for(p=0;p<=A;p++){for(f=0;f<=c;f++)for(O[f]=[0,0,0,0],v=0;v<=a;v++){var L=(P-a+v)*C+(T-c+f),S=x[p][v];b&&(S*=d[L],O[f][3]+=S),O[f][0]+=S*h[3*L],O[f][1]+=S*h[3*L+1],O[f][2]+=S*h[3*L+2]}var M=Math.min(r-p,V);for(g=0;g<=M;g++)for(f=0;f<=c;f++)m[p][g][0]+=R[g][f]*O[f][0],m[p][g][1]+=R[g][f]*O[f][1],m[p][g][2]+=R[g][f]*O[f][2],b&&(E[p][g]+=R[g][f]*O[f][3])}if(b){var w=i.binomialCoefficients,N=o.Vector3.createFloat64();for(p=0;p<=r;p++)for(g=0;g<=r-p;g++){var F=m[p][g];for(y=1;y<=g;y++)o.Vector3.scaleAndAdd(F,F,m[p][g-y],-w[g][y]*E[0][y]);for(_=1;_<=p;_++){for(o.Vector3.scaleAndAdd(F,F,m[p-_][g],-w[p][_]*E[_][0]),o.Vector3.set(N,0,0,0),y=1;y<=g;y++)o.Vector3.scaleAndAdd(N,N,m[p-_][g-y],w[g][y]*E[_][y]);o.Vector3.scaleAndAdd(F,F,N,-w[p][_])}o.Vector3.scale(F,F,1/E[0][0])}}return m}(e,t,r,a,c,u,l,h,d)}},6275:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.extractBSurfaceParamLineV=t.extractBSurfaceParamLineU=t.insertBSurfaceKnotV=t.insertBSurfaceKnotU=void 0;var o=r(1972),i=r(3888),n=r(2468),s=function(e,t,r,i,n,s,a){var c,u,l=new Array(i);for(u=0;u<i;++u){l[u]=new Array(n-u-r);var h=t-n+u+1;for(c=0;c<n-u-r;++c)l[u][c]=(e-s[h+c])/(s[c+t+1]-s[h+c])}for(var d=a.length,p=new Array(d),g=new Array(n-r+1),f=0;f<d;++f){for(p[f]=new Array(n-r+i-1),c=0;c<=n-r;++c)g[c]=o.Vector4.clone(a[f][c]);for(u=0;u<i;++u){for(c=0;c<n-u-r;++c)o.Vector4.lerp(g[c],g[c],g[c+1],l[u][c]);p[f][u]=o.Vector4.clone(g[0]),p[f][n+i-r-u-2]=o.Vector4.clone(g[n-u-r-1])}for(c=i;c<n-r-1;c++)p[f][c]=o.Vector4.clone(g[c-i+1])}return p};t.insertBSurfaceKnotU=function(e,t,r,a,c,u,l,h){t=Math.min(t,r);var d=h&&h.length>0,p=(0,i.findKnotSpanAndMultiplicity)(e,c);e=p.knot;var g=p.span,f=p.multiplicity,v=t-f;if(e<c[0]+n.PARAMETER_SPACE_TOLERANCE||e>c[c.length-1]-n.PARAMETER_SPACE_TOLERANCE||f>=t)return{uknots:c.slice(),P:l.slice(),weights:d?h.slice():void 0};var _,y,m=c.length-r-1,E=u.length-a-1,x=new Array(E),R=g-r,A=g-f;for(y=0;y<E;++y)for(x[y]=new Array(A-R+1),_=R;_<=A;++_){var P=_*E+y,V=d?h[P]:1;x[y][_-R]=o.Vector4.createFloat64FromValues(V*l[3*P],V*l[3*P+1],V*l[3*P+2],V)}var T=s(e,g,f,v,r,c,x),b=c.slice(0,g+1);for(_=0;_<v;++_)b.push(e);b=b.concat(c.slice(g+1));var C,O=new Array(3*(m+v)*E),L=new Array((m+v)*E);for(y=0;y<E;++y){for(_=0;_<=R;++_)P=C=_*E+y,O[3*C]=l[3*P],O[3*C+1]=l[3*P+1],O[3*C+2]=l[3*P+2],L[C]=h[P];for(_=0;_<T[y].length;++_){C=(_+R+1)*E+y;var S=T[y][_];O[3*C]=S[0]/S[3],O[3*C+1]=S[1]/S[3],O[3*C+2]=S[2]/S[3],L[C]=S[3]}for(_=A;_<m;++_)P=_*E+y,O[3*(C=(_+v)*E+y)]=l[3*P],O[3*C+1]=l[3*P+1],O[3*C+2]=l[3*P+2],L[C]=h[P]}return{uknots:b,P:O,weights:d?L:void 0}},t.insertBSurfaceKnotV=function(e,t,r,a,c,u,l,h){t=Math.min(t,a);var d=h&&h.length>0,p=(0,i.findKnotSpanAndMultiplicity)(e,u);e=p.knot;var g=p.span,f=p.multiplicity,v=t-f;if(e<u[0]+n.PARAMETER_SPACE_TOLERANCE||e>u[u.length-1]-n.PARAMETER_SPACE_TOLERANCE||f>=t)return{vknots:u.slice(),P:l.slice(),weights:d?h.slice():void 0};var _,y,m=c.length-r-1,E=u.length-a-1,x=new Array(m),R=g-a,A=g-f;for(_=0;_<m;++_)for(x[_]=new Array(A-R+1),y=R;y<=A;++y){var P=_*E+y,V=d?h[P]:1;x[_][y-R]=o.Vector4.createFloat64FromValues(V*l[3*P],V*l[3*P+1],V*l[3*P+2],V)}var T=s(e,g,f,v,a,u,x),b=u.slice(0,g+1);for(y=0;y<v;++y)b.push(e);b=b.concat(u.slice(g+1));var C,O=new Array(3*m*(E+v)),L=new Array(m*(E+v));for(_=0;_<m;++_){for(y=0;y<=R;++y)P=_*E+y,O[3*(C=_*(E+v)+y)]=l[3*P],O[3*C+1]=l[3*P+1],O[3*C+2]=l[3*P+2],L[C]=h[P];for(y=0;y<T[_].length;++y){C=_*(E+v)+(y+R+1);var S=T[_][y];O[3*C]=S[0]/S[3],O[3*C+1]=S[1]/S[3],O[3*C+2]=S[2]/S[3],L[C]=S[3]}for(y=A;y<E;++y)P=_*E+y,O[3*(C=_*(E+v)+(y+v))]=l[3*P],O[3*C+1]=l[3*P+1],O[3*C+2]=l[3*P+2],L[C]=h[P]}return{vknots:b,P:O,weights:d?L:void 0}},t.extractBSurfaceParamLineU=function(e,t,r,n,a,c,u){var l=u&&u.length>0,h=(0,i.findKnotSpanAndMultiplicity)(e,a);e=h.knot;var d,p,g,f=h.span,v=e===a[a.length-1],_=v?r+1:h.multiplicity,y=r-_,m=n.length-t-1,E=a.length-r-1,x=new Array(3*m),R=new Array(m);if(_>=r)for(p=v?E-1:f-r,d=0;d<m;++d)g=d*E+p,x[3*d]=c[3*g],x[3*d+1]=c[3*g+1],x[3*d+2]=c[3*g+2],R[d]=l?u[g]:1;else{var A=new Array(m),P=f-r,V=f-_;for(d=0;d<m;++d)for(A[d]=new Array(V-P+1),p=P;p<=V;++p){g=d*E+p;var T=l?u[g]:1;A[d][p-P]=o.Vector4.createFloat64FromValues(T*c[3*g],T*c[3*g+1],T*c[3*g+2],T)}var b=s(e,f,_,y,r,a,A);for(p=y-1,d=0;d<m;++d){var C=b[d][p];x[3*d]=C[0]/C[3],x[3*d+1]=C[1]/C[3],x[3*d+2]=C[2]/C[3],R[d]=C[3]}}return{ctrlPts:x,weights:l?R:void 0}},t.extractBSurfaceParamLineV=function(e,t,r,n,a,c,u){var l=u&&u.length>0,h=(0,i.findKnotSpanAndMultiplicity)(e,n);e=h.knot;var d,p,g,f=h.span,v=e===n[n.length-1],_=v?t+1:h.multiplicity,y=t-_,m=n.length-t-1,E=a.length-r-1,x=new Array(3*E),R=new Array(E);if(_>=t)for(d=v?m-1:f-t,p=0;p<E;++p)g=d*E+p,x[3*p]=c[3*g],x[3*p+1]=c[3*g+1],x[3*p+2]=c[3*g+2],R[p]=l?u[g]:1;else{var A=new Array(E),P=f-t,V=f-_;for(p=0;p<E;++p)for(A[p]=new Array(V-P+1),d=P;d<=V;++d){g=d*E+p;var T=l?u[g]:1;A[p][d-P]=o.Vector4.createFloat64FromValues(T*c[3*g],T*c[3*g+1],T*c[3*g+2],T)}var b=s(e,f,_,y,t,n,A);for(d=y-1,p=0;p<E;++p){var C=b[p][d];x[3*p]=C[0]/C[3],x[3*p+1]=C[1]/C[3],x[3*p+2]=C[2]/C[3],R[p]=C[3]}}return{ctrlPts:x,weights:l?R:void 0}}},4336:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TessellationCache=t.CurveTessellator=void 0;var o=r(1972),i=r(2468),n=r(5896),s=r(6120),a={};a.getCircularArcRenderPoints=function(e,t,r,o,i){var n=e.getRadius(),s=2*Math.acos((n-r)/n),a=t[1]-t[0],c=Math.ceil(a/s),u=0;for(!1===o&&u++;u<=c;++u){var l=u/c,h=t[0]*(1-l)+t[1]*l;i.push(e.evaluatePosition(h))}return n*(1-Math.cos(a/c*.5))},a.getAdaptiveRenderPoints=function(e,t,r,n){for(var a=t||.001,c=a*a,u=[],l=[],h=o.Vector3.createFloat64(),d=0,p=function(t,r,n,a,g){var f=n-t,v=.5*(t+n),_=e.evaluatePosition(v);o.Vector3.scaleAndAdd(h,[0,0,0],r,.5),o.Vector3.scaleAndAdd(h,h,a,.5);var y=o.Vector3.squaredDistance(h,_);if(g>64)s.DebugUtils.warn(\"Max recursion depth reach in getAdaptiveRenderPoints\");else if(f>10*i.PARAMETER_SPACE_TOLERANCE&&y>c)return p(t,r,v,_,g+1),void p(v,_,n,a,g+1);d=Math.max(d,y),u.push(r),l.push(t)},g=n||function(e,t,r){for(var o=new Array(e),i=t,n=(r-t)/(e-1),s=0;s<e;s++){var a=i;s>0&&s<e-1&&(a+=Math.sin(s)*n*.1),o[s]=a,i+=n}return o}(7,r[0],r[1]),f=0;f<g.length-1;++f){var v=g[f],_=g[f+1],y=e.evaluatePosition(v),m=e.evaluatePosition(_);p(v,y,_,m,0),f===g.length-2&&(u.push(m),l.push(_))}return{positions:u,params:l,tolerance:Math.sqrt(d)}};var c=function(){this._hasDirtyTessellation=!0,this._tessellationCache=void 0,this._trimmedTessellationCache={positions:void 0,offsets:void 0,transitions:[1,-1]}};c.prototype.setDirty=function(e){this._hasDirtyTessellation=e},c.prototype.isDirty=function(){return this._hasDirtyTessellation},c.prototype.reset=function(){this._hasDirtyTessellation=!0,this._tessellationCache=void 0,this._trimmedTessellationCache={positions:void 0,offsets:void 0,transitions:[1,-1]}},c.prototype.setCache=function(e){this._tessellationCache=e,this._hasDirtyTessellation=!1},c.prototype.getCache=function(){return this._tessellationCache},c.prototype.getTolerance=function(){if(this._tessellationCache)return this._tessellationCache.tolerance},c.prototype.getTessellation=function(e,t,r,s){var a=!1;if(!1===this._hasDirtyTessellation&&this._tessellationCache.tolerance>r+o.FLOAT64_TOLERANCE&&(this._hasDirtyTessellation=!0),this._hasDirtyTessellation){this._hasDirtyTessellation=!1;var c=s(r);this._tessellationCache={positions:c.positions,params:c.params,tolerance:c.tolerance},a=c.didRetessellate}var u=[e[0],e[e.length-1]],l=0,h=t.getRangeUnlimited();t.isPeriodicUnlimited()&&(l=(u=(0,n.normalizeParametricRangeToShiftedRange)(u,h))[0]-e[0]);var d=this._trimmedTessellationCache,p=d.transitions[0]-u[0],g=d.transitions[d.transitions.length-1]-u[1],f=p*p+g*g<o.FLOAT64_TOLERANCE;if(f&&e.length>2){f=d.transitions.length===e.length;for(var v=1;f&&v<e.length-1;++v)f=d.transitions[v-1]===e[v-1]+l}if(!f||a){var _;for(d.transitions.length=e.length,_=0;_<e.length;++_)d.transitions[_]=e[_]+l;d.positions=[t.evaluatePosition(e[0])],d.offsets=[0];var y,m,E=1,x=u[0];for(_=1;_<e.length;_++){var R=e[_]+l;for(m=0;m<this._tessellationCache.positions.length;m++)if((y=this._tessellationCache.params[m])>x+i.PARAMETER_SPACE_TOLERANCE){if(y>=R-i.PARAMETER_SPACE_TOLERANCE)break;o.Vector3.sqrDist(d.positions[E-1],this._tessellationCache.positions[m])>i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE&&(d.positions[E++]=o.Vector3.clone(this._tessellationCache.positions[m]))}if(t.isPeriodicUnlimited()&&R>h[1])for(m=1;m<this._tessellationCache.positions.length&&(y=this._tessellationCache.params[m])<R-(h[1]-h[0])-i.PARAMETER_SPACE_TOLERANCE;m++)o.Vector3.sqrDist(d.positions[E-1],this._tessellationCache.positions[m])>i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE&&(d.positions[E++]=o.Vector3.clone(this._tessellationCache.positions[m]));var A=t.evaluatePosition(R);o.Vector3.sqrDist(d.positions[E-1],A)<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE&&E>d.offsets[d.offsets.length-1]+1&&E--,d.positions[E++]=A,d.offsets.push(d.positions.length-1),x=R}}return{positions:d.positions,offsets:d.offsets,tolerance:this._tessellationCache.tolerance}},t.CurveTessellator=a,t.TessellationCache=c},1e3:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.invertIntegral1D=t.integrateFunction1D=t.newtonRaphson1D=void 0;var o,i,n,s=r(2468),a=r(5896),c=r(6120),u=(o=[.9914553711208126,.9491079123427585,.8648644233597691,.7415311855993945,.5860872354676911,.4058451513773972,.20778495500789848,0],i=[.022935322010529224,.06309209262997856,.10479001032225019,.14065325971552592,.1690047266392679,.19035057806478542,.20443294007529889,.20948214108472782],n=[.1294849661688697,.27970539148927664,.3818300505051189,.4179591836734694],function(e,t,r){var a=function(e,t,r){for(var s=.5*(t+r),a=.5*(r-t),c=e(s),u=c*i[7],l=c*n[3],h=0;h<7;++h){var d=a*o[h],p=e(s-d)+e(s+d);u+=p*i[h],h%2==1&&(l+=p*n[Math.floor(h/2)])}var g=200*Math.abs(u-l)*a;return{length:u*a,error:g*=Math.sqrt(g)}}(e,t[0],t[1]);if(void 0===r)r=0;else if(r>8)return c.DebugUtils.warn(\"Max depth reached in integrateFunction1D!\"),a.length;if(a.error>s.KERNEL_TOLERANCE){var l=.5*(t[0]+t[1]);return u(e,[t[0],l],r+1)+u(e,[l,t[1]],r+1)}return a.length});t.newtonRaphson1D=function(e,t,r,o,i){var n,s=r;t&&(s=(0,a.clamp)(s,t[0],t[1]));var u=0;do{++u;var l=e(s),h=s-l.val/l.deriv;t&&(h=(0,a.clamp)(h,t[0],t[1])),n=Math.abs(h-s),s=h}while(n>o&&u<i);return u>=i&&c.DebugUtils.warn(\"Maximum number of iterations reached. Something wrong is going on here !!!\"),s},t.integrateFunction1D=u,t.invertIntegral1D=function(e,t,r){var o=s.KERNEL_TOLERANCE,i=u(e,r);if(t<o)return r[0];if(t>i-o)return r[1];for(var n=r[0],c=r[1],l=t;c-n>s.PARAMETER_SPACE_TOLERANCE;){var h=l/i,d=n+(h=(0,a.clamp)(h,.01,.99))*(c-n),p=u(e,[n,d]),g=i-(p=(0,a.clamp)(p,0,i));if(Math.abs(l-p)<o)return d;p>l?(c=d,i=p):(n=d,l-=p,i=g)}return.5*(n+c)}},880:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.newtonRaphson2D=t.RelaxResult=void 0;var o=r(1972),i=function(){},n={};n[n.Success=0]=\"Success\",n[n.OutOfRange=1]=\"OutOfRange\",n[n.DegenerateStep=2]=\"DegenerateStep\",n[n.TooManySteps=3]=\"TooManySteps\",n[n.RootNotFound=4]=\"RootNotFound\";t.RelaxResult=n,t.newtonRaphson2D=function(e,t,r,s,a){s=s||1e-12,a=a||100;var c=[void 0,void 0];r&&2===r.length&&(r[0]&&2===r[0].length&&(c[0]=r[0]),r[1]&&2===r[1].length&&(c[1]=r[1])),i(\"Newton-Raphson 2D:\"),i(\"  range u: \"+(c[0]?\"[\"+c[0][0]+\",\"+c[0][1]+\"]\":\"none\")),i(\"  range v: \"+(c[1]?\"[\"+c[1][0]+\",\"+c[1][1]+\"]\":\"none\"));for(var u=[0,0],l=1/0,h=1/0,d=!1,p=o.Matrix22.createFloat64(),g=o.Matrix22.createFloat64(),f=o.Vector2.clone(t),v=n.Success,_=0;_<=a;_++){var y=e(f);if(l=o.Vector2.squaredLength(y.val),i(\"Step \"+_+\": uv=(\"+f[0]+\",\"+f[1]+\"), error=\"+l),l<o.FLOAT64_TOLERANCE*o.FLOAT64_TOLERANCE){i(\"  zero error, stopping\"),v=n.Success;break}if(_>0){var m=Math.max(Math.abs(u[0]),Math.abs(u[1]));if(m<s){i(\"  step (\"+m+\") smaller than tolerance (\"+s+\"), stopping\"),l>=h&&(i(\"  previous step had smaller error, returning that\"),o.Vector2.sub(f,f,u),l=h,y=e(f));var E=10*s*(o.Vector2.len(y.deriv1)+o.Vector2.len(y.deriv2)),x=E*E;l>x?(i(\"  final error is greater than tolerance (\"+x+\")\"),d?(i(\"  stopped on a boundary, root may be out of range\"),v=n.OutOfRange):(i(\"  final point is not a root\"),v=n.RootNotFound)):v=n.Success;break}}if(_===a){i(\"  reached maximum iterations, stopping\"),l>=h&&(i(\"  previous step had smaller error, returning that\"),o.Vector2.sub(f,f,u),l=h),v=n.TooManySteps;break}if(_>0&&l>=h){var R=h/(h+l);R=Math.max(R,.1),i(\"  error has increased, reducing previous step by factor \"+R),o.Vector2.sub(f,f,u),o.Vector2.scale(u,u,R),o.Vector2.add(f,f,u),l=h}else{if(h=l,o.Matrix22.set(p,-y.deriv1[0],-y.deriv1[1],-y.deriv2[0],-y.deriv2[1]),Math.abs(o.Matrix22.determinant(p))<o.FLOAT64_TOLERANCE){i(\"  matrix is singular, stopping\"),v=n.DegenerateStep;break}o.Matrix22.invert(g,p),o.Vector2.transformMatrix22(u,y.val,g),i(\"  new step duv=(\"+u[0]+\",\"+u[1]+\")\"),o.Vector2.add(f,f,u),d=!1;for(var A=0;A<3;A++){var P=A>=2,V=A%2;if(c[V]){var T=0;if(f[V]<c[V][0]?(T=f[V]-c[V][0],f[V]=c[V][0]):f[V]>c[V][1]&&(T=f[V]-c[V][1],f[V]=c[V][1]),0!==T){i(\"  out-of-range, boundary \"+(0===V?\"u\":\"v\")+\"=\"+f[V]);var b=u[V];if(u[V]-=T,P)i(\"  clamping \"+(0===V?\"u\":\"v\")+\" to boundary\");else{var C=1-V;if(f[C]-=u[C],Math.abs(u[V])>s){var O=u[V]/b;i(\"  shrinking step by factor \"+O+\" to land on boundary\"),u[C]*=O}else{i(\"  clamping \"+(0===V?\"u\":\"v\")+\" to boundary\"),i(\"  cannot step to solution, minimizing error along boundary instead\"),d=!0;var L=0===C?y.deriv1:y.deriv2;u[C]=-o.Vector2.dot(y.val,L)/Math.max(o.Vector2.dot(L,L),o.FLOAT64_TOLERANCE)}f[C]+=u[C],i(\"  modified step duv=(\"+u[0]+\",\"+u[1]+\")\")}}}}}}return i(\"Result: \"+n[v]+\", uv=(\"+f[0]+\",\"+f[1]+\")\"),{param:f,status:v}}},6704:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=16777619,o=function(e,t){if(t<1)return\"\";for(var r=\"\";t>1;)1&t&&(r+=e),t>>=1,e+=e;return r+e},i={isInitialized:!1,rngA:4027999010,rngB:3993266363,rngC:3605298456,rotl32:function(e,t){return(e<<t>>>0|e>>>32-t)>>>0},initialize:function(e,t){if(i.isInitialized&&!t)return 0;var r;(i.isInitialized&&(i.rngA=4027999010,i.rngB=3993266363,i.rngC=3605298456),i.isInitialized=!0,void 0!==e)?r=e:(r=(new Date).getTime(),r^=Math.floor(2147483647*Math.random()+1));return i.rngA+=2097151&r,i.rngB+=r>>7&524287,i.rngC+=r>>13,r},genRandUInt32:function(){return i.rngA=~(2911329625*i.rngA),i.rngA=i.rotl32(i.rngA,17),i.rngB=4031235431*i.rngB,i.rngB=i.rotl32(i.rngB,15),i.rngC=3286325185-i.rotl32(i.rngC,19),i.rngA+i.rngB^i.rngC}},n=function(e){for(var t=\"\",r=0;r<4;r++){var i=e[r].toString(16);t+=o(\"0\",8-i.length)+i}return t.substr(0,8)+\"-\"+t.substr(8,4)+\"-\"+t.substr(12,4)+\"-\"+t.substr(16,4)+\"-\"+t.substr(20,12)},s=function(e,t){var r=t;return void 0===r&&(r=new Uint32Array(4)),r[0]=parseInt(\"0x\"+e.substr(0,8),16),r[1]=parseInt(\"0x\"+e.substr(9,4)+e.substr(14,4),16),r[2]=parseInt(\"0x\"+e.substr(19,4)+e.substr(24,4),16),r[3]=parseInt(\"0x\"+e.substr(28,8),16),r},a=function(e,t){var o=new Uint32Array(t);return o[0]+=2654435769,o[1]+=104395303,o[2]+=452930477,o[3]+=982451653,o[0]+=e[3]<<6,o[1]+=e[0]<<6,o[2]+=e[1]<<6,o[3]+=e[2]<<6,o[0]+=e[2]>>2,o[1]+=e[3]>>2,o[2]+=e[0]>>2,o[3]+=e[1]>>2,o[0]=(o[0]^e[1])*r>>>0,o[1]=(o[1]^e[2])*r>>>0,o[2]=(o[2]^e[3])*r>>>0,o[3]=(o[3]^e[0])*r>>>0,o};i.initialize(),t.uint32x4ToGUID=n,t.guidToUint32x4=s,t.generateGUID=function(){var e=new Uint32Array(4);return e[0]=i.genRandUInt32(),e[1]=i.genRandUInt32(),e[2]=i.genRandUInt32(),e[3]=i.genRandUInt32(),n(e)},t.isGUID=function(e){return/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(e)},t.combineGuids=function(e,t){var r=s(e),o=s(t),i=a(r,o);return n(i)},t.hashCombine4xUint32=a},5896:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.definePlaneThroughPoints=t.getPlaneTransforms=t.limitRange=t.PI2=t.sortedIndex=t.clamp=t.orient2D=t.signedDistanceTo2DLine=t.intersectIntervals=t.solveTwoEquationsTwoVariables=t.closestPointToTriangle=t.closestPointToPolyline=t.distancePointToLineSegment=t.projectPointToLineSegment=t.angleDifference=t.periodicDifference=t.minMaxCosSinFunc=t.convertToOtherPeriodicRange=t.adjustParameterToPeriodicRange=t.getShortestParametricRange=t.isParameterWithinPeriodicRange=t.normalizeSegmentsToPeriodicRange=t.normalizeParametricRange=t.normalizeParametricRangeToShiftedRange=t.normalizeParameterToShiftedRange=t.adjustAngleToRange=t.normalizeAngleRange=t.normalizeAngle=t.normalizeParameter=t.foldNearTo=t.foldAbove=t.fold=t.modulus=t.getSignedAngle=t.isPointInsidePolygon2D=t.binomialCoefficients=void 0;var o=r(1972),i=r(2468),n=r(4728),s=2*Math.PI,a=[];!function(){for(var e=0;e<8;++e){a[e]=[1];for(var t=1;t<e;++t)a[e][t]=a[e-1][t-1]+a[e-1][t];a[e][e]=1}}();var c=function(e,t,r){return Math.min(Math.max(t,e),r)},u=function(e,t){return e-t*Math.floor(e/t)},l=function(e,t){var r=e%t;return r<0?r+t:r},h=function(e,t,r){return l(e-t,r)+t},d=function(e,t){return e<0?t+e%t:e%t},p=function(e,t){return d(e-t[0],t[1]-t[0])+t[0]},g=function(e,t){n.ConsoleUtils.assert(e[1]>=e[0],\"normalizeParametricRange: in_range ends not in order.\");var r=e[1]-e[0],o=d(e[0],t);return[o,o+r]},f=function(e,t,r,o,i){if(!isFinite(r))return e;var n=g(t,r),s=d(e,r),a=s+r;if(o=!!o,s>=n[0]&&s<=n[1])return t[0]+(s-n[0]);if(a>=n[0]&&a<=n[1])return t[0]+(a-n[0]);var c=Math.abs(n[0]-s),u=Math.abs(s-n[1]),l=Math.abs(n[0]-a),h=Math.abs(a-n[1]);return i?Math.min(c,l)<Math.min(u,h)?t[0]:t[1]:Math.min(c,u)>Math.min(l,h)&&!o?t[0]+(a-n[0]):t[0]+(s-n[0])},v=function(e,t,r){var o=Math.abs(e-t);return isFinite(r)&&(o%=r)>r/2?r-o:o},_=function(e,t,r){var n=o.Vector3.sub(o.Vector3.createFloat64(),t,e),s=o.Vector3.dot(n,n);if(s<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)return 0;var a=o.Vector3.sub(o.Vector3.createFloat64(),r,e);return o.Vector3.dot(a,n)/s};t.binomialCoefficients=a,t.isPointInsidePolygon2D=function(e,t){for(var r=!1,o=t.length,i=0,n=o-2;i<o;i+=2)t[i+1]>e[1]!=t[n+1]>e[1]&&e[0]<(t[n]-t[i])*(e[1]-t[i+1])/(t[n+1]-t[i+1])+t[i]&&(r=!r),n=i;return r},t.getSignedAngle=function(e,t){var r=c(o.Vector2.dot(e,t),-1,1),i=t[0]*e[1]-t[1]*e[0];return 0===i?.5*Math.PI*(r-1):i<0?-Math.acos(r):Math.acos(r)},t.modulus=u,t.fold=l,t.foldAbove=h,t.foldNearTo=function(e,t,r){return h(e,t-r/2,r)},t.normalizeParameter=d,t.normalizeAngle=function(e){return d(e,s)},t.normalizeAngleRange=function(e){return g(e,2*Math.PI)},t.adjustAngleToRange=function(e,t){return f(e,t,2*Math.PI)},t.normalizeParameterToShiftedRange=p,t.normalizeParametricRangeToShiftedRange=function(e,t){n.ConsoleUtils.assert(e[1]>=e[0],\"normalizeParametricRangeToShiftedRange: in_range ends not in order.\");var r=e[1]-e[0],o=p(e[0],t);return[o,o+r]},t.normalizeParametricRange=g,t.normalizeSegmentsToPeriodicRange=function(e,t,r,o,n){for(var s=void 0!==o?o:i.KERNEL_TOLERANCE,a=void 0!==n?n:t[1]-t[0],c=[],u=0;u<e.length;u++){var l=p(e[u][0],t),h=e[u][1]-e[u][0];if(h>=a)return[[t[0],t[1]]];var d=l+h;d<t[1]?c.push([l,d]):(c.push([l,t[1]]),c.push([t[0],d-t[1]+t[0]]))}var g=[];c.sort((function(e,t){return e[0]-t[0]}));for(u=0;u<c.length;u++){for(var f=c[u];u+1<c.length&&c[u+1][0]<f[1];)f[1]=Math.max(f[1],c[u+1][1]),u++;(Math.abs(f[1]-f[0])>s||!r)&&g.push(f)}return g},t.isParameterWithinPeriodicRange=function(e,t,r,o){var i=f(e,t,r);return o=o||0,i>t[0]-o&&i<t[1]+o},t.getShortestParametricRange=function(e,t,r){if((e=d(e,r))>(t=d(t,r))){var o=e;e=t,t=o}return e-t+r<t-e?[t,e+r]:[e,t]},t.adjustParameterToPeriodicRange=f,t.convertToOtherPeriodicRange=function(e,t,r,o){if(!isFinite(r))return n.ConsoleUtils.assert(e[0]>=t[0]-o,\"The start of the input range doesn't lie in the target range.\"),n.ConsoleUtils.assert(e[1]<=t[1]+o,\"The input range doesn't lie within the target range.\"),e;if(o=o||0,e[1]-e[0]>=r-o)return t[1]-t[0]<r-o&&console.error(\"The input range is larger than the target range.\"),t;var i=f(e[0],t,r);n.ConsoleUtils.assert(i>=t[0]-o,\"The start of the input range doesn't lie in the target range.\");var s=i+e[1]-e[0];return n.ConsoleUtils.assert(s<=t[1]+o,\"The input range doesn't lie within the target range.\"),[i,s]},t.minMaxCosSinFunc=function(e,t,r,o){if(0===e&&0===t)return[r,r];var i,n=g(o,2*Math.PI),s=f(Math.atan(t/e),n,Math.PI,!0),a=[];for(i=0;i<3;++i)n[0]<=s&&n[1]>=s&&a.push(e*Math.cos(s)+t*Math.sin(s)),s+=Math.PI;if(o[1]-o[0]<2*Math.PI)for(i=0;i<2;i++)a.push(e*Math.cos(o[i])+t*Math.sin(o[i]));return[Math.min.apply(null,a)+r,Math.max.apply(null,a)+r]},t.periodicDifference=v,t.angleDifference=function(e,t){return v(e,t,2*Math.PI)},t.projectPointToLineSegment=_,t.distancePointToLineSegment=function(e,t,r,i){var n=_(e,t,r);n=c(n,0,1);var s=i||o.Vector3.createFloat64();return o.Vector3.lerp(s,e,t,n),o.Vector3.distance(s,r)},t.closestPointToPolyline=function(e,t,r,i,n){for(var s=\"number\"==typeof t[0],a=s?t.length/3:t.length,u=void 0,l=Number.POSITIVE_INFINITY,h=o.Vector3.createFloat64(),d=0;d<a-1;++d){var p=r?r[d]:d,g=r?r[d+1]:d+1,f=0,v=1;if(!(i&&(i[0]>p&&(f=(i[0]-p)/(g-p)),i[1]<g&&(v=(i[1]-p)/(g-p)),v<f))){var y,m;s?(y=[t[3*d],t[3*d+1],t[3*d+2]],m=[t[3*d+3],t[3*d+4],t[3*d+5]]):(y=t[d],m=t[d+1]);var E=_(y,m,e);E=c(E,f,v),o.Vector3.lerp(h,y,m,E);var x=o.Vector3.squaredDistance(h,e);x<l&&(u=(1-E)*p+E*g,l=x,n&&o.Vector3.copy(n,h))}}return u},t.closestPointToTriangle=function(e,t,r,n,s){var a,u,l=o.Vector3.sub(o.Vector3.createFloat64(),r,t),h=o.Vector3.sub(o.Vector3.createFloat64(),n,t),d=o.Vector3.sub(o.Vector3.createFloat64(),e,t),p=o.Vector3.squaredLength(l),g=o.Vector3.squaredLength(h),f=o.Vector3.dot(l,h),v=o.Vector3.dot(d,l),y=o.Vector3.dot(d,h);if(p<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE&&g<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)a=u=0;else if(p<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)a=0,u=c(y/g,0,1);else if(g<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)a=c(v/p,0,1),u=0;else{var m=o.Matrix22.createFloat64FromValues(p,f,f,g);if(Math.abs(o.Matrix22.determinant(m))>o.FLOAT64_TOLERANCE){o.Matrix22.invert(m,m);var E=[v,y];o.Vector2.transformMatrix22(E,E,m),a=E[0],u=E[1]}else u=y/g,(a=v/p)<=0||u<=0?(a=c(a,0,1),u=c(u,0,1)):a<u?(a=c(a,0,1),u=0):(a=0,u=c(u,0,1))}if(a<0&&y>=0&&y<=g&&(a=0,u=y/g),u<0&&v>=0&&v<=p&&(a=v/p,u=0),a+u>1){var x=_(r,n,e);x>=0&&x<=1&&(a=1-x,u=x)}if(a<0||u<0||a+u>1){var R=o.Vector3.squaredLength(d),A=o.Vector3.squaredDistance(e,r),P=o.Vector3.squaredDistance(e,n);A<=R&&A<=P?(a=1,u=0):P<=R&&P<=A?(a=0,u=1):a=u=0}return s&&(o.Vector3.scaleAndAdd(s,t,l,a),o.Vector3.scaleAndAdd(s,s,h,u)),{coordA:a,coordB:u}},t.solveTwoEquationsTwoVariables=function(e){var t=e[0][0],r=e[0][1],o=e[1][0],i=e[1][1],n=t*i-r*o;if(0!==n){var s=i*e[0][2]-r*e[1][2],a=-o*e[0][2]+t*e[1][2];return[s/=n,a/=n]}},t.intersectIntervals=function(e,t,r){r=r||0;for(var o=[],i=0;i<e.length;i++)for(var n=0;n<t.length;n++){var s=Math.max(e[i][0],t[n][0]),a=Math.min(e[i][1],t[n][1]);a-r>s&&(a>s?o.push([s,a]):o.push([a,a]))}return o},t.signedDistanceTo2DLine=function(e,t,r){var o=r[0]-e[0],i=r[1]-e[1];return t[1]*o-t[0]*i},t.orient2D=function(e,t,r){var o=e[0]-r[0],i=t[0]-r[0],n=e[1]-r[1];return o*(t[1]-r[1])-n*i},t.clamp=c,t.sortedIndex=function(e,t){for(var r=0,o=e.length;o>r;){var i=Math.floor((r+o)/2);t>e[i]?r=i+1:o=i}return o},t.PI2=s,t.limitRange=function(e,t,r,i){if(n.ConsoleUtils.assert(2===t.length),n.ConsoleUtils.assert(t[0]<=t[1]),r)return t[1]-t[0]<i+o.FLOAT64_TOLERANCE?[t[0],t[1]]:(console.warn(\"limitRange : in_limitRange length cannot be greater than in_period\"),[t[0],t[0]+i]);var s=Math.max(e[0],t[0]),a=Math.min(e[1],t[1]);return s>a&&(s>a+o.FLOAT64_TOLERANCE&&console.warn(\"limitRange : requested range must overlap in_oldRange\"),s=a=t[0]>e[1]?e[1]:e[0]),[s,a]},t.getPlaneTransforms=function(e){var t,r,i=e.evaluateDu(0,0),n=e.evaluateDv(0,0),s=e.getOrigin();if(!o.Vector3.isParallel(i,[1,0,0],1)||!o.Vector3.isParallel(n,[0,1,0],1)||Math.abs(s[2])>o.FLOAT64_TOLERANCE){var a=e.evaluateNormal(0,0);t=o.Matrix44.createFloat64FromValues(i[0],i[1],i[2],0,n[0],n[1],n[2],0,a[0],a[1],a[2],0,s[0],s[1],s[2],1),r=o.Matrix44.createFloat64(),o.Matrix44.invert(r,t)}return{uvToThreeSpace:t,threeSpaceToUV:r}},t.definePlaneThroughPoints=function(e){var t,r,n,s=[0,0,0],a=[0,0,0];if(!(e.length<3)){var c=[0,0,0];for(t=0;t<e.length;++t)o.Vector3.add(c,c,e[t]);o.Vector3.scale(c,c,1/e.length);var l=[0,0,0];r=0;var h=0,d=0;for(t=0;t<e.length;++t){(n=o.Vector3.squaredDistance(c,e[t]))>d&&(d=n,h=t),(n/=100)>r&&(r=n,o.Vector3.sub(l,e[t],c));var p=(t+1)%e.length;(n=o.Vector3.squaredDistance(e[t],e[p]))>r&&(r=n,o.Vector3.sub(l,e[p],e[t]))}if(!(d<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)){o.Vector3.normalize(l,l);var g=[0,0,0];for(r=0,t=0;t<e.length;++t)o.Vector3.sub(s,e[t],c),o.Vector3.cross(s,s,l),(n=o.Vector3.squaredLength(s))>r&&(r=n,o.Vector3.copy(g,s));if(!(r<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)){o.Vector3.normalize(g,g);var f=e[h],v=e[u(h-1,e.length)],_=e[u(h+1,e.length)];o.Vector3.sub(s,v,f),o.Vector3.sub(a,_,f),o.Vector3.dot(o.Vector3.cross(a,a,s),g)<0&&o.Vector3.negate(g,g);var y=[0,0,0];o.Vector3.cross(y,g,l),o.Vector3.normalize(y,y);var m=Number.POSITIVE_INFINITY,E=Number.NEGATIVE_INFINITY,x=Number.POSITIVE_INFINITY,R=Number.NEGATIVE_INFINITY;for(t=0;t<e.length;++t){o.Vector3.sub(s,e[t],c);var A=o.Vector3.dot(s,l),P=o.Vector3.dot(s,y);m=Math.min(m,A),E=Math.max(E,A),x=Math.min(x,P),R=Math.max(R,P)}return{origin:c,normal:g,uAxis:l,vAxis:y,uRange:[m,E],vRange:[x,R]}}}}}},5416:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.SplineCurveHelper=void 0;var o=r(1972),i=r(2468),n=r(5896),s=r(6120),a=r(3888),c=r(48),u=r(5856),l=function(){};l.getApproxBezierParameterSpaceTolerance=function(e,t){var r=e.getDiagonal(),n=2*t/o.Vector3.length(r);return n<.01*i.PARAMETER_SPACE_TOLERANCE?.01*i.PARAMETER_SPACE_TOLERANCE:n};l.solve_cubic_uniqueRoots=function(e,t){var r=e[2]*e[2]-3*e[1],o=e[2]*(2*e[2]*e[2]-9*e[1])+27*e[0];if(0===o&&0===r)return t[0]=-e[2]/3,1;if(o*o/4<r*r*r){var i=-2*Math.sqrt(r),n=Math.acos(-o/(r*i));return t[0]=(i*Math.cos(n/3)-e[2])/3,t[1]=(i*Math.cos((n+2*Math.PI)/3)-e[2])/3,t[2]=(i*Math.cos((n-2*Math.PI)/3)-e[2])/3,3}var s=Math.pow(Math.abs(o)/2+Math.sqrt(o*o/4-r*r*r),1/3)/3;return o>0&&(s=-s),t[0]=s+r/(9*s)-e[2]/3,1};var h=function(e,t,r){return 6*((1-r)*(e[6+t]-2*e[3+t]+e[t])+r*(e[9+t]-2*e[6+t]+e[3+t]))},d=function(e,t){return 6*(e[9+t]-e[t]+3*(e[3+t]-e[6+t]))},p=function(e,t){var r=new Array(3);!function(e,t,r){r[0]=3*(e[3+t]-e[t]),r[1]=6*(e[t]+e[6+t]-2*e[3+t]),r[2]=3*(e[9+t]-e[t]+3*(e[3+t]-e[6+t]))}(e,t,r);var o,i=new Array(2),n=function(e,t){var r=e[1]*e[1]-4*e[2]*e[0];if(r<0)return 0;if(0===r)return t[0]=-.5*e[1]/e[2],1;var o=e[1]>0?-.5*(e[1]+Math.sqrt(r)):-.5*(e[1]-Math.sqrt(r));return t[0]=o/e[2],t[1]=e[0]/o,2}(r,i);2===n&&i[0]>i[1]&&(o=i[0],i[0]=i[1],i[1]=o);for(var s=[],a=0;a<n;a++)i[a]>0&&i[a]<1&&((o=Math.abs(h(e,t,i[a]))<1e-12)?(o=Math.abs(d(e,t))<1e-12)&&s.push(i[a]):s.push(i[a]));return s},g=function(e,t,r){return e+t[0]+t[1]*r+t[2]*r*r+t[3]*r*r*r};l.intersect_xAxis_NonRationalCubicBSpline_XYPlanar3D=function(e,t,r,o){var n=new Float64Array(4),s=new Float64Array(4);n[0]=t[0]-e[0],n[1]=3*(t[3]-t[0]),n[2]=3*(t[0]+t[6]-2*t[3]),n[3]=t[9]-t[0]+3*(t[3]-t[6]),s[0]=t[1]-e[1],s[1]=3*(t[4]-t[1]),s[2]=3*(t[1]+t[7]-2*t[4]),s[3]=t[10]-t[1]+3*(t[4]-t[7]);var a,c=s;if(Math.abs(c[3])>1e-4)c[0]/=c[3],c[1]/=c[3],c[2]/=c[3],c[3]=1,a=this.solve_cubic_uniqueRoots(c,r);else{var l=[].slice.call(c).reverse();0===l[0]&&(l=l.slice(1));var h=(0,u.getRealPolynomialRoots)(l);a=h.length;for(var d=0;d<a;d++)r[d]=h[d]}if(1===a)return(f=r[0])<0||f>1?0:(r[0]=g(e[0],n,f),1);d=0;for(var p=0;p<a;++p)(f=r[p])>=0&&f<=1&&(r[d]=g(e[0],n,f),++d);if(void 0!==o){var f,v;if(Math.abs(s[3])<1e-12)Math.abs(s[2])<1e-12?v=-1:(f=-s[1]/(2*s[2]),v=0);else{var _=2/3*s[2]/s[3];v=_*_/4-1/3*s[1]/s[3],f=-_/2}if(0===v)if(f<0||f>1){var y=g(e[0],s,0),m=g(e[0],s,1);Math.abs(y)>Math.abs(m)?o.push([g(e[0],n,0),y]):o.push([g(e[0],n,1),m])}else o.push([g(e[0],n,f),g(e[0],s,f)]);else if(v>0){for(p=0;p<2;p++)(f=-_/2+(0===p?-1:1)*Math.sqrt(v))<-i.PARAMETER_SPACE_TOLERANCE||f>1+i.PARAMETER_SPACE_TOLERANCE||(f=Math.max(Math.min(1,f),0),o.push([g(e[0],n,f),g(e[0],s,f)]));if(o.length>1&&o[0][0]>o[1][0]){var E=o[0];o[0]=o[1],o[1]=E}}}return d},l.isPointInsideSplineRegionXYPlanar3D=function(e,t,r){var i,s,a=new Float64Array(3),c=t.getBezierSegments();if(t.isRational()||!c||3!==t.getDegree()){for(var u=t.tessellate().positions,l=new Float64Array(2*u.length),h=0;h<u.length;++h)l[2*h]=u[h].x,l[2*h+1]=u[h].y;return(0,n.isPointInsidePolygon2D)(e,l)}var d,p=0,g=o.Vector3.createFloat64();for(h=0;h<c.length;++h){s=c[h].getControlPoints(),i=this.intersect_xAxis_NonRationalCubicBSpline_XYPlanar3D(e,s,a);for(var f=0;f<i;++f)o.Vector3.set(g,a[f],e[1],0),(d=t.closestToPointParam(g))>=r[0]&&d<=r[1]&&a[f]>e[0]&&++p}var v=t.evaluatePosition(r[0]),_=t.evaluatePosition(r[1]),y=o.Vector3.createFloat64();o.Vector3.normalize(y,o.Vector3.sub(y,_,v)),y[1]<0&&o.Vector3.negate(y,y);var m=o.Vector2.createFloat64FromValues(e[0],e[1]);return(0,n.signedDistanceTo2DLine)(v,y,m)<=0&&e[1]>=Math.min(v[1],_[1])&&e[1]<=Math.max(v[1],_[1])&&++p,1&p},l.insertKnot=function(e,t,r,o,i){var n,s,c,u=[],l=[],h=[],d=r.length/4,p=d+e+1,g=(0,a.findKnotSpanAndMultiplicity)(o,t),f=i-g.multiplicity;if(f<1)return{U:u=t.slice(),Pw:l=r.slice()};for(n=0;n<=g.span;++n)u[n]=t[n];for(n=1;n<=f;++n)u[g.span+n]=o;for(n=g.span+1;n<p;++n)u[n+f]=t[n];for(n=0;n<=g.span-e;++n)for(s=0;s<4;++s)l[4*n+s]=r[4*n+s];for(n=g.span-g.multiplicity;n<d;++n)for(s=0;s<4;++s)l[4*(n+f)+s]=r[4*n+s];for(n=0;n<=e-g.multiplicity;++n)for(s=0;s<4;++s)h[4*n+s]=r[4*(g.span-e+n)+s];for(var v=1;v<=f;++v){for(c=g.span-e+v,n=0;n<=e-v-g.multiplicity;++n){var _=(o-t[c+n])/(t[n+g.span+1]-t[c+n]);for(s=0;s<4;++s)h[4*n+s]=h[4*(n+1)+s]*_+h[4*n+s]*(1-_)}for(s=0;s<4;++s)l[4*c+s]=h[s],l[4*(g.span+f-v-g.multiplicity)+s]=h[4*(e-v-g.multiplicity)+s]}for(n=c+1;n<g.span-g.multiplicity;++n)for(s=0;s<4;++s)l[4*n+s]=h[4*(n-c)+s];return{U:u,Pw:l}},l.refineKnotVector=function(e,t,r,o){var n,s,c=[],u=[],l=r.length/4-1,h=o.length-1,d=l+e+1,p=(0,a.findKnotSpan)(o[0],t),g=(0,a.findKnotSpan)(o[h],t)+1;for(n=0;n<=p-e;++n)for(s=0;s<4;++s)u[4*n+s]=r[4*n+s];for(n=g-1;n<=l;++n)for(s=0;s<4;++s)u[4*(n+h+1)+s]=r[4*n+s];for(n=0;n<=p;++n)c[n]=t[n];for(n=g+e;n<=d;++n)c[n+h+1]=t[n];var f=g+e-1,v=g+e+h;for(n=h;n>=0;--n){for(;o[n]<=t[f]&&f>p;){for(s=0;s<4;++s)u[4*(v-e-1)+s]=r[4*(f-e-1)+s];c[v]=t[f],--v,--f}for(s=0;s<4;++s)u[4*(v-e-1)+1]=u[4*(v-e)+s];for(var _=1;_<=e;++_){var y=v-e+_,m=c[v+_]-o[n];if(Math.abs(m)<i.KERNEL_TOLERANCE)for(s=0;s<4;++s)u[4*(y-1)+s]=u[4*y+s];else for(m/=c[v+_]-t[f-e+_],s=0;s<4;++s)u[4*(y-1)+s]=u[4*(y-1)+s]*m+u[4*y+s]*(1-m)}c[v]=o[n],--v}return{U:c,Pw:u}};var f=function(e,t,r,i){var s=(0,n.projectPointToLineSegment)(t,r,e);return i&&(s=(0,n.clamp)(s,0,1)),o.Vector3.lerp(o.Vector3.createFloat64(),t,r,s)};l.validControlPolygon=function(e){for(var t=e.length/3,r=e.length,i=o.Vector3.createFloat64(),n=o.Vector3.createFloat64(),s=o.Vector3.createFloat64(),a=3,c=1;c<t-1;++c){o.Vector3.set(i,e[a],e[a+1],e[a+2]),o.Vector3.set(n,e[a-3],e[a-2],e[a-1]),o.Vector3.set(s,e[a+3],e[a+4],e[a+5]);var u=f(i,n,s,!1);if(o.Vector3.sub(i,i,u),c<t/2?o.Vector3.sub(n,[e[r-3],e[r-2],e[r-1]],u):o.Vector3.sub(n,[e[0],e[1],e[2]],u),o.Vector3.dot(i,n)>0)return!1;a+=3}return!0};var v,_,y,m,E,x,R,A,P,V,T,b,C=function(e){if(e)for(var t=0;t<e.length;++t)if(Math.abs(e[t]-1)>o.FLOAT64_TOLERANCE)return!0;return!1},O=(v=new Float64Array(4),_=new Float64Array(4),y=new Float64Array(4),m=new Float64Array(16),function(e,t,r,o,i){var n,s,a,c,u,l,h=1-r;if(v[0]=h*h*h,v[1]=3*r*h*h,v[2]=3*r*r*h,v[3]=r*r*r,_[0]=-3*h*h,_[1]=3*(r-1)*(3*r-1),_[2]=3*r*(2-3*r),_[3]=3*r*r,y[0]=6*h,y[1]=6*(3*r-2),y[2]=6*(1-3*r),y[3]=6*r,void 0===i?C(t):i){for(var d=0;d<4;++d)m[4*d+o]=e[3*d+o]*t[d],m[4*d+3]=t[d];for(n=m[o]*v[0],s=m[o]*_[0],a=m[o]*y[0],d=1;d<4;++d)n+=m[4*d+o]*v[d],s+=m[4*d+o]*_[d],a+=m[4*d+o]*y[d];for(c=m[3]*v[0],u=m[3]*_[0],l=m[3]*y[0],d=1;d<4;++d)c+=m[4*d+3]*v[d],u+=m[4*d+3]*_[d],l+=m[4*d+3]*y[d];n/=c,s/=u,a/=l}else for(n=e[o]*v[0],s=e[o]*_[0],a=e[o]*y[0],d=1;d<4;++d)n+=e[3*d+o]*v[d],s+=e[3*d+o]*_[d],a+=e[3*d+o]*y[d];return[n,s,a]}),L=function(e,t,r,o){var i=o;i[0]=r[0]-t[0],i[1]=r[1]-t[1];var n=i[0]*i[0]+i[1]*i[1],s=(e[0]-t[0])*i[0]+(e[1]-t[1])*i[1];if(0===n||s<=0)o[0]=e[0]-t[0],o[1]=e[1]-t[1],o[1]=o[0]*o[0]+o[1]*o[1],o[0]=0;else if(s>n)o[0]=e[0]-r[0],o[1]=e[1]-r[1],o[1]=o[0]*o[0]+o[1]*o[1],o[0]=1;else{var a=s/n;o[0]=t[0]+a*i[0]-e[0],o[1]=t[1]+a*i[1]-e[1],o[1]=o[0]*o[0]+o[1]*o[1],o[0]=a}},S=function(e,t,r,o){var i=o;i[0]=r[0]-t[0],i[1]=r[1]-t[1],i[2]=r[2]-t[2];var n=i[0]*i[0]+i[1]*i[1]+i[2]*i[2],s=(e[0]-t[0])*i[0]+(e[1]-t[1])*i[1]+(e[2]-t[2])*i[2];if(0===n||s<=0)o[0]=e[0]-t[0],o[1]=e[1]-t[1],o[2]=e[2]-t[2],o[1]=o[0]*o[0]+o[1]*o[1]+o[1]*o[1],o[0]=0;else if(s>n)o[0]=e[0]-r[0],o[1]=e[1]-r[1],o[2]=e[2]-r[2],o[1]=o[0]*o[0]+o[1]*o[1]+o[1]*o[1],o[0]=1;else{var a=s/n;o[0]=t[0]+a*i[0]-e[0],o[1]=t[1]+a*i[1]-e[1],o[2]=t[2]+a*i[2]-e[2],o[1]=o[0]*o[0]+o[1]*o[1]+o[2]*o[2],o[0]=a}};l.closestStartPoint=(P=new Float64Array(3),V=new Float64Array(3),T=new Float64Array(3),b=new Float64Array(2),function(e,t,r,o){if(r)for(b[0]=0,b[1]=1/0,R=t.points.length,A=0;A<R-3;A+=3)P[0]=t.points[A],P[1]=t.points[A+1],V[0]=t.points[A+3],V[1]=t.points[A+4],L(e,P,V,T),T[1]<b[1]&&(E=A/3,x=(1-T[0])*t.offset[E]+T[0]*t.offset[E+1],(!o||x>=o[0]&&x<=o[1])&&(b[0]=x,b[1]=T[1]));else for(b[1]=1/0,R=t.points.length,A=0;A<R-3;A+=3)P[0]=t.points[A],P[1]=t.points[A+1],P[2]=t.points[A+2],V[0]=t.points[A+3],V[1]=t.points[A+4],V[2]=t.points[A+5],S(e,P,V,T),T[1]<b[1]&&(E=A/3,x=(1-T[0])*t.offset[E]+T[0]*t.offset[E+1],(!o||x>=o[0]&&x<=o[1])&&(b[0]=x,b[1]=T[1]));return b[0]}),l.extremalParams=function(e,t){if(3!==e.getDegree())return s.DebugUtils.warn(\"SplineCurveHelper.extremalParams called with non-degree 3 curve\"),[];var r,n,a=e.getBezierSegments(),c=[];for(r=0;r<a.length;++r){var u=a[r].getControlPoints(),h=a[r].getWeights(),d=a[r].getKnotVector(),p=l.extremalParamsXYPlanarBezierCurve(u,h,t),g=[];for(n=0;n<p.length;n++)g.push(d[0]*(1-p[n])+d[d.length-1]*p[n]);c.push(g)}var f=[];for(r=0;r<a.length;++r)if(f=f.concat(c[r]),r<a.length-1||e.isPeriodicUnlimited()){var v=a[r],_=a[(r+1)%a.length],y=c[r],m=c[(r+1)%a.length],E=v.getRangeUnlimited()[1],x=_.getRangeUnlimited()[0],R=0===y.length||E-y[y.length-1]>i.PARAMETER_SPACE_TOLERANCE,A=0===m.length||m[0]-x>i.PARAMETER_SPACE_TOLERANCE;if(R&&A){var P=v.evaluateDt(E)[t],V=_.evaluateDt(x)[t];(Math.abs(P)<o.FLOAT64_TOLERANCE||Math.abs(V)<o.FLOAT64_TOLERANCE||Math.sign(P)!==Math.sign(V))&&f.push(E)}}return f},l.extremalParamsXYPlanarBezierCurve=function(e,t,r,o,i){var n=C(t);if(!n)return h=p(e,r);for(var s,a,c=1e-6,u=o||16,l=i||1e-12,h=[],d=void 0,g=0;g<8;g++){if(a=O(e,t,g/7,r,n),void 0!==d&&Math.sign(a[1])!==d){var f=(g-1+Math.abs(s)/(Math.abs(a[1])+Math.abs(s)))/7;h.push(f)}d=Math.sign(a[1]),s=a[1]}0===h.length&&(h[0]=0+l,h[1]=1-l),h.length>2&&console.error(\"More than two roots in the second derivative of a cubic polynomial. This should not happen.\");var v,_,y,m=[],E=[];for(g=0;g<h.length;g++){var x=0;do{++x,y=0!==(a=O(e,t,h[g],r,n))[2]?h[g]-a[1]/a[2]:h[g],v=Math.abs(a[1]),_=Math.abs(h[g]-y),h[g]=y}while((v>l||_>c)&&x<u);m[g]=v,E[g]=a[2]}for(g=0;g<h.length;g++)if(h[g]<0||h[g]>1||m[g]>l)h.splice(g,1),g--;else if(Math.abs(E[g])<c){var R=(O(e,t,h[g]+5e-7,r,n)[2]-O(e,t,h[g]-5e-7,r,n)[2])/c;Math.abs(R)>c&&(h.splice(g,1),g--)}if(2===h.length){if(Math.abs(h[0]-h[1])<c){var A=m[0]/(m[0]+m[1]);return[h[0]*(1-A)+h[1]*A]}return h}return h},l.evaluateNURBSCurvePointWithFactors=function(e,t,r,o,i,n){var s,u,l,h=(0,a.findKnotSpan)(i,t),d=(0,c.evaluateBasisFunctions)(h,i,e,t),p=new Float64Array(3),g=0,f=3*(h-e);for(n.rangeMin=h-e,n.rangeMax=h,u=0;u<=e;++u){for(s=o[h-e+u]*d[u],n.factors[u]=s,l=0;l<3;++l)p[l]+=r[f+l]*s;g+=s,f+=3}for(u=0;u<3;++u)p[u]/=g;for(u=0;u<=e;++u)n.factors[u]/=g;return p};var M=function(e,t,r,i,n,s,a,u,h,d,p,g,v){var _=.5*(r+n),y=(0,c.evaluateBCurvePoint)(_,e,t,a,h?u:void 0);if(g>v)p.push({offset:_,point:y});else{var m=f(y,i,s,!1),E=o.Vector3.squaredDistance(s,i),x=o.Vector3.squaredDistance(m,y);l.validControlPolygon(a)&&x<d*E?p.push({offset:_,point:y}):(M(e,t,r,i,_,y,a,u,h,d,p,g+1,v),M(e,t,_,y,n,s,a,u,h,d,p,g+1,v))}};l.renderNURBSCurve=function(e,t,r,n,s,a,u,l){var h=a||i.DEFAULT_CURVE_RESOLUTION,d=u||[t[0],t[t.length-1]];l=void 0===l||l;var p,g=C(n);if(s){var f,v,_=[];f=(0,c.evaluateBCurvePoint)(d[0],e,t,r,g?n:void 0),v=(0,c.evaluateBCurvePoint)(d[1],e,t,r,g?n:void 0),_.push({offset:d[0],point:f}),M(e,t,d[0],f,d[1],v,r,n,g,i.SPLINE_DISTANCE_TOLERANCE,_,0,4),_.push({offset:d[1],point:v}),p=new Array(4*_.length);for(var y=l?0:1,m=l?0:1;m<_.length;m++)p[y]=_[m].point[0],p[y+1]=_[m].point[1],p[y+2]=_[m].point[2],p[y+3]=_[m].offset,y+=4}else{for(var E=0,x=3;x<r.length;x+=3)E+=o.Vector3.distance([r[x-3],r[x-2],r[x-1]],[r[x],r[x+1],r[x+2]]);for(h=10*Math.round(E),l?(x=0,p=new Float32Array(3*h)):(x=1,p=new Float32Array(3*(h-1)));x<h;++x){var R,A=d[0]+(d[1]-d[0])*x/(h-1);R=(0,c.evaluateBCurvePoint)(A,e,t,r,g?n:void 0);for(var P=3*x,V=0;V<3;++V)p[P+V]=R[V]}}return p},l.evaluateCurve=function(e,t,r,o,n,s){if(n){var a=(0,c.evaluateBCurvePoint)(t[0],e,t,r,o),u=(0,c.evaluateBCurvePoint)(t[t.length-1],e,t,r,o),l=[];l.push({offset:t[0],point:a}),M(e,t,t[0],a,t[t.length-1],u,r,o,!0,i.SPLINE_DISTANCE_TOLERANCE,l,0,3),l.push({offset:t[t.length-1],point:u});for(var h=[],d=[],p=0;p<l.length;++p)h.push(l[p].offset),d.push(l[p].point[0],l[p].point[1],l[p].point[2])}else{var g=s||.01,f=t[0],v=0;h=[],d=[];do{var _=(0,c.evaluateBCurvePoint)(f,e,t,r,o);h[v]=f;for(p=0;p<3;++p)d[3*v+p]=_[p];++v,f+=g}while(f<=t[t.length-1])}return{offset:h,points:d}};var w=function(e,t,r){var o=new Float64Array(2);o[0]=r[0]-t[0],o[1]=r[1]-t[1];var i=o[0]*o[0]+o[1]*o[1];if(0===i)return o[0]=e[0]-t[0],o[1]=e[1]-t[1],o[0]*o[0]+o[1]*o[1];var n=(e[0]-t[0])*o[0]+(e[1]-t[1])*o[1];return n<0?(o[0]=e[0]-t[0],o[1]=e[1]-t[1]):n>i?(o[0]=e[0]-r[0],o[1]=e[1]-r[1]):(n/=i,o[0]=t[0]+n*o[0]-e[0],o[1]=t[1]+n*o[1]-e[1]),o[0]*o[0]+o[1]*o[1]},N=function(e,t){var r,o=!1,i=t.length;r=0;for(var n=i-3;r<i;r+=3)t[r+1]>e[1]!=t[n+1]>e[1]&&e[0]<(t[n]-t[r])*(e[1]-t[r+1])/(t[n+1]-t[r+1])+t[r]&&(o=!o),n=r;return o},F=function(e,t){for(var r,o=new Float64Array(2),i=Number.NEGATIVE_INFINITY,n=0;n<t.length;n+=3)o[0]=t[n]-e[0],o[1]=t[n+1]-e[1],(r=o[0]*o[0]+o[1]*o[1])>i&&(i=r);return i},I=function(e,t,r){for(var o,i=t.length,n=new Float64Array(2),s=new Float64Array(2),a=Number.POSITIVE_INFINITY,c=0;c<i-3;c+=3)n[0]=t[c],n[1]=t[c+1],s[0]=t[c+3],s[1]=t[c+4],(o=w(e,n,s))<a&&(a=o);return void 0!==r&&r&&(n[0]=t[i-3],n[1]=t[i-2],s[0]=t[0],s[1]=t[1],(o=w(e,n,s))<a&&(a=o)),a};l.closestSegmentsXYPlanar=function(e,t,r,o){for(var i=Number.POSITIVE_INFINITY,n=[],s=0;s<t.length;++s){var a,c=t[s],u=c.getRangeUnlimited();if(o){a=!1;for(var l=0;l<o.length;++l)if(u[1]>=o[l][0]&&u[0]<=o[l][1]){a=!0;break}}else a=!0;if(a){var h,d,p=r?r[s]:0,g=c.getControlPoints();N(e,g)?h=0:(h=I(e,g,!0),h=Math.max(0,h-p)),h<=i&&(d=F(e,g)+p,n.push({index:s,minDistSqr:h,maxDistSqr:d}),d<i&&(i=d))}}var f=[];for(s=0;s<n.length;++s)n[s].minDistSqr<=i&&f.push(n[s]);return f.sort((function(e,t){var r=e.minDistSqr-t.minDistSqr;return 0===r?e.maxDistSqr-t.maxDistSqr:r})),f},l.findKnotMultiplicity=function(e,t){for(var r=0,o=0;o<t.length;++o){if(t[o]>e+1e-8)return r;Math.abs(t[o]-e)<1e-8&&r++}return r},l.unclampCurve=function(e,t,r,o){var i,n,s,a,c,u=r.length/4-1,l=o||1;for(i=0;i<e-1;++i)for(t[e-i-1]=t[e-i]-(t[u-i+1]-t[u-i])*l,s=e-1,n=i;n>=0;--n){for(a=(t[e]-t[s])/(t[e+n+1]-t[s]),c=0;c<4;++c)r[4*n+c]=(r[4*n+c]-a*r[4*(n+1)+c])/(1-a);s-=1}for(t[0]=t[1]-(t[u-e+2]-t[u-e+1])*l,i=0;i<e-1;++i)for(t[u+i+2]=t[u+i+1]+(t[e+i+1]-t[e+i])*l,n=i;n>=0;--n)for(a=(t[u+1]-t[u-n])/(t[u-n+i+2]-t[u-n]),c=0;c<4;++c)r[4*(u-n)+c]=(r[4*(u-n)+c]-(1-a)*r[4*(u-n-1)+c])/a;t[u+e+1]=t[u+e]+(t[2*e]-t[2*e-1])*l},l.extractCurveSegment=function(e,t,r,o,i){var n=this.insertKnot(e,o,i,t,e);n=this.insertKnot(e,n.U,n.Pw,r,e);var s,c=(0,a.findKnotSpan)(t,n.U);for(o.length=n.U.length-(c-e),o[0]=t,s=1;s<o.length;++s)o[s]=n.U[s+c-e];var u=o.length-e-1,l=4*(n.Pw.length/4-u);for(i.length=n.Pw.length-l,s=0;s<i.length;++s)i[s]=n.Pw[s+l];c=(0,a.findKnotSpan)(r,o),o.length=c+1,o.push(r),i.length=4*(o.length-e-1)};var D=function(e,t,r,o){for(var i=0,n=0;n<4;++n)i+=(e[t+n]-r[o+n])*(e[t+n]-r[o+n]);return i=Math.sqrt(i)};l.removeKnot=function(e,t,r,o,n){if(t<=o[0]||t>=o[o.length-1])return 0;var s,c,u,l,h,d=[],p=e+1,g=(0,a.findKnotSpanAndMultiplicity)(t,o);if(g.multiplicity<1)return 0;for(var f,v,_,y,m=(2*g.span-g.multiplicity-e)/2,E=i.KERNEL_TOLERANCE,x=g.span-g.multiplicity,R=g.span-e,A=!1,P=[0,0,0,0],V=0;V<r;++V){for(f=R-1,h=0;h<4;++h)d[0+h]=n[4*f+h],d[4*(x+1-f)+h]=n[4*(x+1)+h];for(s=R,c=x,u=1,l=x-f,A=!1;c-s>V;){for(v=(t-o[s])/(o[s+p+V]-o[s]),_=(t-o[c-V])/(o[c+p]-o[c-V]),h=0;h<4;++h)d[4*u+h]=(n[4*s+h]-(1-v)*d[4*(u-1)+h])/v,d[4*l+h]=(n[4*c+h]-_*d[4*(l+1)+h])/(1-_);++s,++u,--c,--l}if(c-s<V)D(d,4*(u-1),d,4*(l+1))<=E&&(A=!0);else{for(v=(t-o[s])/(o[s+p+V]-o[s]),h=0;h<4;++h)P[h]=v*d[4*(u+V+1)+h]+(1-v)*d[4*(u-1)+h];D(n,4*s,P,0)<=E&&(A=!0)}if(!A)break;for(s=R,c=x;c-s>V;){for(h=0;h<4;++h)n[4*s+h]=d[4*(s-f)+h],n[4*c+h]=d[4*(c-f)+h];++s,--c}--R,++x}if(0===V)return 0;for(y=g.span+1;y<o.length;++y)o[y-V]=o[y];for(o.length=o.length-V,s=c=m,y=1;y<V;++y)y%2==1?s+=1:c-=1;for(y=s+1;y<n.length/4;++y){for(h=0;h<4;++h)n[4*c+h]=n[4*y+h];c+=1}return n.length=n.length-4*V,V},l.joinCurves=function(e,t,r,o,i){var n,s=t[t.length-1];for(t.length=t.length-1,n=e+1;n<o.length;++n)t.push(o[n]);for(n=4;n<i.length;++n)r.push(i[n]);var a=this.removeKnot(e,s,e-1,t,r);a!==e-1&&console.warn(\"Failed knot removal, only removed seam knot \"+a+\" times.\")},l.clampCurve=function(e,t,r){var o=t[e],i=t[t.length-e-1];this.extractCurveSegment(e,o,i,t,r)};l.makePeriodic=function(e,t,r){var o,i,n=function(e,t,r){var o,i,n,s=0;for(o=1;o<r.length/4;++o){for(n=0,i=0;i<3;++i)n+=(r[4*o+i]-r[4*(o-1)+i])*(r[4*o+i]-r[4*(o-1)+i]);s+=Math.sqrt(n)}for(n=0,i=0;i<3;++i)n+=(r[i]-r[r.length-4+i])*(r[i]-r[r.length-4+i]);var a=Math.sqrt(n),c=(t[t.length-1]-t[0])/s,u=r.length/4-1,l=t.slice();for(o=0;o<e-1;++o)l[e-o-1]=l[e-o]-(l[u-o+1]-l[u-o]),l[u+o+2]=l[u+o+1]+(l[e+o+1]-l[e+o]);var h=l[1]-(l[u-e+2]-l[u-e+1]),d=l[u+e]+(l[2*e]-l[2*e-1]);return c/((t[0]-h+d-t[t.length-1])/a)}(e,t,r);this.unclampCurve(e,t,r,n);var s=t.length;for(o=e-1;o>=0;--o)t[s-o]=t[s-o-1]+(t[e-(o-1)]-t[e-o]);var a=r.length/4;for(r.length=4*a+4*e,t.length=s+e,o=0;o<e;++o){for(i=0;i<4;++i)r[4*(a+o)+i]=r[4*o+i];t[s+o]=t[s+o-1]+(t[e+o+1]-t[e+o])}this.clampCurve(e,t,r)},t.SplineCurveHelper=l},2355:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TangentCone=void 0;var o=r(1972),i=r(2468),n=r(5896),s=function(e,t){this.set(e,t)};s.prototype.set=function(e,t){void 0===e||void 0===t?(this.axis=void 0,this.angle=void 0):(this.axis=o.Vector3.clone(e),this.angle=t)},s.prototype.toString=function(){return this.isDegenerate()?\"degenerate\":\"(x:\"+this.axis[0]+\", y:\"+this.axis[1]+\", z:\"+this.axis[2]+\", radians:\"+this.angle+\")\"},s.prototype.copy=function(e){return e.isDegenerate()?(this.axis=void 0,this.angle=void 0):(this.axis=o.Vector3.clone(e.axis),this.angle=e.angle),this},s.prototype.clone=function(){return new s(this.axis,this.angle)},s.prototype.isDegenerate=function(){return void 0===this.axis||void 0===this.angle},s.prototype.includeVector=function(e){if(o.Vector3.squaredLength(e)<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)return this;if(this.isDegenerate())return this.axis||(this.axis=o.Vector3.createFloat64()),o.Vector3.normalize(this.axis,e),this.angle=0,this;var t=o.Vector3.dot(this.axis,e)/o.Vector3.length(e);t=(0,n.clamp)(t,-1,1);var r=Math.acos(t);return this.angle=Math.max(this.angle,r),this},s.prototype.includeCone=function(e){if(e.isDegenerate())return this;if(this.isDegenerate())return this.copy(e);var t=o.Vector3.dot(this.axis,e.axis),r=Math.acos((0,n.clamp)(t,-1,1));if(this.angle>=e.angle+r)return this;if(e.angle>=this.angle+r)return this.copy(e);if(r>Math.PI-i.KERNEL_ANGULAR_TOLERANCE)return this.angle=Math.PI,this;var s=(this.angle+e.angle+r)/2;if(s>=Math.PI)return this.angle=Math.PI,this;var a=Math.sin(s-e.angle),c=Math.sin(s-this.angle);return o.Vector3.scale(this.axis,this.axis,a),o.Vector3.scaleAndAdd(this.axis,this.axis,e.axis,c),o.Vector3.normalize(this.axis,this.axis),this.angle=s,this},s.prototype.contains=function(e,t){if(t=\"number\"==typeof t?t:i.KERNEL_ANGULAR_TOLERANCE,!this.isDegenerate())return o.Vector3.squaredLength(e)<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE||o.Vector3.angle(this.axis,e)<this.angle+t},t.TangentCone=s},9608:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getOrderedFacesOnVertex=function(e){const t=e.getEdges(),o=new r(e),i=[];return t.forEach((t=>{const r=t.getCoedges();for(let t=0;t<r.length;++t)if(r[t].getStartVertex()===e){const e=o.marchFan(r[t]);e.faces.length>0&&i.push(e);break}})),i};class r{constructor(e){this._vertex=e,this._visitedCoeds=new Set,this._unvisitedCoeds=new Set,this._faces=[],this._type=\"unset\"}addVisitedCoedge(e){this._visitedCoeds.add(e),this._unvisitedCoeds.delete(e)}getNextFace(e){const t=e.getFace();t&&this._faces.push(t),this.addVisitedCoedge(e)}getPrevFace(e){const t=e.getFace();t&&this._faces.unshift(t),this.addVisitedCoedge(e)}collectUnvisitedCoeds(e){e.getEdge().getCoedges().forEach((e=>{this._visitedCoeds.has(e)||e.getStartVertex()!==this._vertex||this._unvisitedCoeds.add(e)}))}nextFace(e){const t=e.getPartner();if(!t)return void(\"unset\"===this._type&&(this._type=\"chain\"));if(this._visitedCoeds.has(t))return;if(t.getPartner()!==e&&(this._type=\"unordered\",this.collectUnvisitedCoeds(e)),t.getEndVertex()!==this._vertex)return this._type=\"unordered\",void this.collectUnvisitedCoeds(t);this.addVisitedCoedge(t);const r=t.getNext();if(!this._visitedCoeds.has(r))return this.getNextFace(r),r;\"unset\"===this._type&&(this._type=\"cycle\")}prevFace(e){const t=e.getPrevious();if(this._visitedCoeds.has(t))return;const r=t.getPartner();return r&&!this._visitedCoeds.has(r)?(r.getPartner()!==t&&(this._type=\"unordered\",this.collectUnvisitedCoeds(t)),r.getStartVertex()!==this._vertex?(this._type=\"unordered\",void this.collectUnvisitedCoeds(r.getNext())):(this.addVisitedCoedge(t),this.getPrevFace(r),r)):void 0}collectFanFaces(e){if(this._visitedCoeds.has(e))return;const t=e;this.getNextFace(t);let r=t;for(;r;)r=this.nextFace(r);for(r=t;r;)r=this.prevFace(r)}marchFan(e){for(this._faces=[],this._type=\"unset\",this.collectFanFaces(e);this._unvisitedCoeds.size>0;){const e=this._unvisitedCoeds.values();this.collectFanFaces(e.next().value)}return{faces:this._faces,type:this._type}}}},3584:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.facetPlanarFace=void 0;var o,i=r(1972),n=r(2468),s=r(2640),a=r(5896),c=r(9140),u=r(2856),l=(o=u)&&o.__esModule?o:{default:o},h=r(6120);var d=1e-6,p=1e-8,g=n.KERNEL_TOLERANCE,f=function(e,t,r){var o,n=e[(0,a.modulus)(t-1,e.length)],s=e[(0,a.modulus)(t+1,e.length)],c=e[t],u=c[0]-n[0],l=c[1]-n[1],h=s[0]-c[0],d=s[1]-c[1],p=Math.sqrt(u*u+l*l),f=Math.sqrt(h*h+d*d);u*h+l*d<-.95*p*f?(u*=-1,l*=-1):r?(o=u,u=-l,l=o,o=h,h=-d,d=o):(o=u,u=l,l=-o,o=h,h=d,d=-o);var v=.5*(u/p+h/f),_=.5*(l/p+d/f),y=Math.sqrt(v*v+_*_);e[t]=i.Vector3.clone(c),e[t][0]+=g*v/y,e[t][1]+=g*_/y},v=function(e){return String(e[0])+String(e[1])},_=function(e){for(var t=!1,r={},o=0;o<e.length;o++){var i=v(e[o]);void 0===r[i]?r[i]=[]:t=!0,r[i].push(o)}return{table:r,foundSelfIntersection:t}},y=function(e){var t=_(e);if(t.foundSelfIntersection){for(var r=(0,s.isLoopCCW)(e),o=[],i=0;i<e.length-1;i++)o[i]=!1;var n=[];for(i=0;i<e.length-1;i++)if(!o[i]){var c=[],u=i;o[u]=!0,c.push(e[u]);var l=v(c[0]),h=e[(0,a.modulus)(u+1,e.length)],d=v(h),p=[];for(t.table[l].length>1&&p.push(0);d!==l;){if(c.push(h),c.length>e.length)throw new Error(\"splitHole failure\");var g=t.table[d];if(1===g.length)u++;else{p.push(c.length-1);for(var y=[],m=0;m<g.length;m++)g[m]!==u&&y.push(g[m]);var E=Math.atan2(e[u+1][1]-e[u][1],e[u+1][0]-e[u][0]);E=(0,a.normalizeParameterToShiftedRange)(E-Math.PI,[-Math.PI,Math.PI]);var x=-1,R=0;for(m=0;m<y.length;m++){var A=Math.atan2(e[(0,a.modulus)(y[m]+1,e.length)][1]-e[y[m]][1],e[(0,a.modulus)(y[m]+1,e.length)][0]-e[y[m]][0]);A<E&&r?A+=a.PI2:A>E&&!r&&(A-=a.PI2);var P=Math.abs(A-E);P>R&&(R=P,x=y[m])}u=x}h=e[(0,a.modulus)(u+1,e.length)],d=v(h),o[u]=!0}for(m=0;m<p.length;m++)f(c,p[m],r);n.push(c)}return n}return[e]},m=function(e,t){for(var r=[],o=0;o<e.length;o++){r[o]={index:void 0,loop:void 0};for(var i=e[o],n=0;n<t.length;n++)for(var s=t[n],a=0;a<s.length;a++)if(s[a][0]===i[0]&&s[a][1]===i[1]){r[o].index=a,r[o].loop=s;break}}return r};function E(e,t){var r,o=!1,i=t.length,n=i-1;for(r=0;r<i;r+=2)t[r][1]>e[1]!=t[n][1]>e[1]&&e[0]<(t[n][0]-t[r][0])*(e[1]-t[r][1])/(t[n][1]-t[r][1])+t[r][0]&&(o=!o),n=r;return o}function x(e,t,r){for(var o,n,a=m(e,[t].concat(r)),c=[],u=[],l=void 0,d=void 0,g=0;g<4;++g){if(a[g]&&void 0!==a[g].index)l?d||a[g].loop===l||(d=a[g].loop):l=a[g].loop,a[g].loop===l?(o=l,n=c):(o=d,n=u),(P=[a[g].index-1,a[g].index])[0]<0&&(P[0]=o.length-1),n.push(P),n.push([a[g].index,(a[g].index+1)%o.length])}d||(d=l,u=c);var f,v,_=void 0,y=l,x=c;for(g=0;g<3;++g){for(f=0;f<c.length;++f){for(v=0;v<u.length&&(c===u&&v>=f||!(_=(0,s.intersectSegments)(l[c[f][0]],l[c[f][1]],d[u[v][0]],d[u[v][1]],0))||!_.intersection);++v);if(_&&_.intersection)break}if(_&&_.intersection||l===d)break;0===g?(l=d,c=u):1===g&&(l=y,c=x,d=y,u=x)}if(void 0!==_&&_.intersection){var R=i.Vector3.subtract(i.Vector3.createFloat64(),l[c[f][1]],l[c[f][0]]);i.Vector3.scale(R,R,_.solutions[0]);var A=i.Vector3.add(R,R,l[c[f][0]]);if(c[f][0]>c[f][1]){var P=c[f][1];c[f][1]=c[f][0],c[f][0]=P}if(0===c[f][0]&&1!==c[f][1]&&(c[f][0]=c[f][1],c[f][1]=0),u[v][0]>u[v][1]&&0!==u[v][1]){P=u[v][1];u[v][1]=u[v][0],u[v][0]=P}if(0===u[v][0]&&1!==u[v][1]&&(u[v][0]=u[v][1],u[v][1]=0),l===d){if(l.length<4)return void console.error(\"REGION: Failed to fix loop tessellation! [loop too short]\");console.log(\"REGION: Fixing self-intersection\");var V=new Array(4);c[f][0]<u[v][0]?(V[0]=c[f][0],V[1]=c[f][1],V[2]=u[v][0],V[3]=u[v][1]):(V[0]=u[v][0],V[1]=u[v][1],V[2]=c[f][0],V[3]=c[f][1]);var T=[];for(g=0;g<=V[0];++g)T.push(l[g]);var b=i.Vector3.subtract(i.Vector3.createFloat64(),l[V[0]],l[V[1]]);i.Vector3.normalize(b,b),i.Vector3.scale(b,b,p);var C=i.Vector3.add(i.Vector3.createFloat64(),A,b);T.push(C);for(g=V[2];g>=V[1];--g)T.push(l[g]);var O=i.Vector3.subtract(i.Vector3.createFloat64(),A,b);if(T.push(O),V[3]>V[2])for(g=V[3];g<l.length;++g)T.push(l[g]);l.length=T.length;for(g=0;g<T.length;++g)l[g]=T[g]}else{console.log(\"REGION: Fixing loop-loop intersection\");var L=l,S=d,M=u[v][0],w=u[v][1],N=c[f][0],F=c[f][1];(t===S||S.length>L.length&&t!==L)&&(L=d,S=l,M=c[f][0],w=c[f][1],N=u[v][0],F=u[v][1]);var I=1;t!==S&&t!==L&&(I=-1);var D=1;if(E(S[w],L)){D=-1;P=M;M=w,w=P}i.Vector3.subtract(S[w],S[M],S[w]),i.Vector3.normalize(S[w],S[w]),i.Vector3.scale(S[w],S[w],I*p),i.Vector3.add(S[w],A,S[w]);var j,B,U=w;do{(w+=D)<0?w=S.length-1:w%=S.length}while(w!==M&&!E(S[w],L));(M=w-D)<0&&(M=S.length-1),F=N;do{j=L[F],B=L[F=++F%L.length],_=(0,s.intersectSegments)(j,B,S[M],S[w],0)}while(N!==F&&!_.intersection);_.intersection&&(i.Vector3.scale(R,i.Vector3.subtract(R,B,j),_.solutions[0]),i.Vector3.add(A,R,j),i.Vector3.subtract(S[M],S[w],S[M]),i.Vector3.normalize(S[M],S[M]),i.Vector3.scale(S[M],S[M],I*p),i.Vector3.add(S[M],A,S[M])),Math.min(Math.abs(U-M),Math.abs(U-M-S.length))>1&&console.warn(\"REGION: Remove loop segment! FIXME!\")}}else h.DebugUtils.warn(\"REGION: Failed to fix loop tessellation! [no intersected segments]\")}var R=function(e,t){var r=e;for(r<0?r+=t.length:r%=t.length;t[r]!==r;)r=t[r];return r},A=function(e,t,r,o){return i.Vector3.distance(r[e],r[t])<d?(o[0]=e,o[1]=e,1):0},P=function(e,t,r,o,n){var s=new Array(2);if(s[0]=o[e],s[1]=o[r],i.Vector3.length(i.Vector3.subtract(i.Vector3.createFloat64(),s[0],s[1]))<d)return n[0]=e,n[1]=e,n[2]=e,2;var a=(s[0][0]-s[1][0])*(o[t][1]-s[1][1])-(s[0][1]-s[1][1])*(o[t][0]-s[1][0]);return a>-10000000000000001e-32&&a<10000000000000001e-32?(n[0]=e,n[1]=e,n[2]=r,1):0},V=function(e,t,r,o,i,n){return(0,s.intersectSegments)(i[e],i[t],i[r],i[o]).intersection?(n[0]=e,n[1]=t,n[2]=t,n[3]=o,1):(n[0]=-1,0)},T=function(e){if(e.length<4)return e;for(var t,r,o,i,n=e.length,s=new Int32Array(n),a=0;a<n;++a)s[a]=a;var c,u=new Array(3),l=new Array(3);l[0]=0,l[1]=0,l[2]=0;for(a=0;a<n;++a)t=R(a,s),r=R(a+1,s),(c=A(t,r,e,u))&&(++l[0],s[t]=u[0],s[r]=u[1],t=R(a+=c,s),r=R(a+1,s)),o=R(a+2,s),(c=P(t,r,o,e,u))&&(++l[1],s[t]=u[0],s[r]=u[1],s[o]=u[2],t=R(a+=c,s),r=R(a+1,s),o=R(a+2,s)),i=R(a+3,s),(c=V(t,r,o,i,e,u))&&(++l[2],s[t]=u[0],s[r]=u[1],s[o]=u[2],s[i]=u[3],a+=c);var h=[];for(a=0;a<e.length;++a)s[a]===a&&h.push(e[a]);return h},b=function(e,t,r){for(var o=m(e,[t].concat(r)),i=0;i<o.length;i++)f(o[i].loop,o[i].index,(0,s.isLoopCCW)(o[i].loop))},C=function(e,t){var r=!1;!function(e){var t=_(e);if(t.foundSelfIntersection)for(var r=(0,s.isLoopCCW)(e),o=l.default.keys(t.table),i=0;i<o.length;i++)if(t.table[o[i]].length>1)for(var n=t.table[o[i]],a=0;a<n.length;a++)f(e,n[a],r)}(e);for(var o=[],i=0;i<t.length;i++)o.push.apply(o,y(t[i]));var n=T(e),a=[];for(i=0;i<o.length;i++)a.push(T(o[i]));var u=8;do{r=!0;var d=(0,l.default)(n).map((function(e){return new c.poly2tri.Point(e[0],e[1])})),p=new c.poly2tri.SweepContext(d);for(i=0;i<a.length;i++){var g=(0,l.default)(a[i]).map((function(e){return new c.poly2tri.Point(e[0],e[1])}));p.addHole(g)}try{p.triangulate()}catch(e){if(\"poly2tri Intersecting Constraints\"===e.message.substr(0,33))r=!1,x(e.points,n,a);else if(\"poly2tri EdgeEvent: Collinear not supported\"===e.message.substr(0,43))r=!1,b(e.points,n,a);else{if(!e.points)throw e;r=!1,x(e.points,n,a)}}}while(!r&&u-- >0);return u<=0&&h.DebugUtils.warn(\"Computation of region tessellation failed, due to too many intersections.\"),p};t.facetPlanarFace=function(e,t){var r=e.getSurface(),o=(0,a.getPlaneTransforms)(r),n=new s.LoopCalculator(e,o.threeSpaceToUV).getRank0Loops();if(1!==n.length)throw new Error(\"Each region should have exactly one top-loop\");var c=n[0],u=(0,s.tessellateLoop)(c._loop,t);if(o.threeSpaceToUV)for(var l=0;l<u.length;l++)i.Vector3.transformMatrix44(u[l],u[l],o.threeSpaceToUV);for(var h=[],d=c.getImmediatelyInsideLoops(),p=0;p<d.length;p++){var g=(0,s.tessellateLoop)(d[p]._loop,t);if(h.push(g),o.threeSpaceToUV)for(l=0;l<g.length;l++)i.Vector3.transformMatrix44(g[l],g[l],o.threeSpaceToUV)}var f=C(u,h),v=f.getTriangles(),_=new Uint32Array(3*v.length),y=new Float32Array(3*f.pointCount()),m=i.Vector3.createFloat64();for(l=0;l<f.pointCount();l++){var E=f.getPoint(l);i.Vector3.set(m,E.x,E.y,0),o.uvToThreeSpace&&i.Vector3.transformMatrix44(m,m,o.uvToThreeSpace),y[3*l]=m[0],y[3*l+1]=m[1],y[3*l+2]=m[2],E.index=l}for(l=0;l<v.length;l++){var x=v[l].getPoints();for(e.isReversed()&&x.reverse(),p=0;p<x.length;p++){var R=x[p];_[3*l+p]=R.index}}return{indexBuffer:_,vertexBuffer:y}}},2640:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.LoopCalculator=t.intersectSegments=t.isLoopCCW=t.tessellateLoop=void 0;var o=r(1972),i=r(2468),n=r(5896),s=function(e,t){this._loop=e,this._enclosureRank=0,this._isOuterLoop=!1,this._insideLoops=[],this._isOpen=!1,this._coedges=this._loop.getCoedges();for(var r=0;r<this._coedges.length;++r)this._coedges[r].generateUVCurve(t)};s.prototype.addInsideLoop=function(e){this._insideLoops.push(e)},s.prototype.uvAngleSubtended=function(e){if(!this.isClosedLoop())throw new Error(\"uvAngleSubtended cannot work with open loops\");for(var t=0,r=0;r<this._coedges.length;r++){t+=this._coedges[r].uvAngleSubtended(e)}return t},s.prototype.getArbitraryPointOnLoop=function(){if(1===this._coedges.length){var e=this._coedges[0].t0();return this._coedges[0].evaluatePosition(e)}var t=this._coedges[0].getStartVertex();if(t)return t.getPosition()},s.prototype.isInside=function(e){var t=this.getArbitraryPointOnLoop(),r=Math.abs(e.uvAngleSubtended(t)),o=Math.floor(r/(2*Math.PI)),n=r-2*o*Math.PI;return!!(Math.abs(n)<i.KERNEL_TOLERANCE&&o||Math.abs(n-2*Math.PI)<i.KERNEL_TOLERANCE)},s.prototype.getEnclosureRank=function(){return this._enclosureRank},s.prototype.resetEnclosureRank=function(){this._enclosureRank=0},s.prototype.decreaseEnclosureRank=function(){this._enclosureRank--},s.prototype.setIsOuterLoop=function(e){this._isOuterLoop=e},s.prototype.isOuterLoop=function(){return this._isOuterLoop},s.prototype.isClosedLoop=function(){return!this._isOpen},s.prototype.addInsideLoop=function(e){this._insideLoops.push(e)},s.prototype.getImmediatelyInsideLoops=function(){for(var e=[],t=0;t<this._insideLoops.length;t++)this._insideLoops[t].getEnclosureRank()===this._enclosureRank-1&&e.push(this._insideLoops[t]);return e};var a=function(e,t){this._face=e,this._loops=[];for(var r=0;r<this._face.getLoops().length;++r)this._loops.push(new s(this._face.getLoops()[r],t));this._calcSenses()};a.prototype._calcSenses=function(){for(var e=this._loops.length,t=0;t<e;t++)this._loops[t].resetEnclosureRank();for(t=0;t<e;t++)if(this._loops[t].isClosedLoop())for(var r=0;r<e;r++)this._loops[r].isClosedLoop()&&t!==r&&this._loops[t].isInside(this._loops[r])&&!this._loops[r].isInside(this._loops[t])&&(this._loops[t].decreaseEnclosureRank(),this._loops[r].addInsideLoop(this._loops[t]));for(t=0;t<e;t++){var o=0-this._loops[t].getEnclosureRank();this._loops[t].setIsOuterLoop(o%2==0)}},a.prototype.getRank0Loops=function(){var e=[];return this._loops.forEach((function(t){0===t.getEnclosureRank()&&e.push(t)})),e};t.tessellateLoop=function(e,t){for(var r=[],i=0,n=e.getCoedges().length;i<n;++i){var s=e.getCoedges()[i],a=s.getEdge(),c=a.tessellate(void 0,t).positions;c=c.slice(1,c.length-1),(c=[o.Vector3.clone(a.getStartVertex().getPosition())].concat(c)).push(o.Vector3.clone(a.getEndVertex().getPosition())),s.isReversed()&&c.reverse(),r=r.concat(c.slice(0,c.length-1))}return r},t.isLoopCCW=function(e){for(var t=0,r=0;r<e.length;r++){var o=(r+1)%e.length;t+=e[r][0]*e[o][1]-e[r][1]*e[o][0]}return t>0},t.intersectSegments=function(e,t,r,i,s){var a=[[t[0]-e[0],-(i[0]-r[0]),r[0]-e[0]],[t[1]-e[1],-(i[1]-r[1]),r[1]-e[1]]],c=(0,n.solveTwoEquationsTwoVariables)(a);if(void 0===c)return!1;var u=o.Vector3.distance(e,t),l=o.Vector3.distance(r,i);return{intersection:-s<c[0]*u&&(c[0]-1)*u<s&&-s<c[1]*l&&(c[1]-1)*l<s,solutions:c}},t.LoopCalculator=a},8080:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getBoundedRegionFaces=t.getRegionEdges=t.mergeSketchRegions=void 0;var o=r(2468),i=r(7616),n=r(8768),s=function(e,t){var r=e.getProgenitorMap(),i=new Set;return t.forEach((function(e){r.getDescendants(e).forEach((function(e){e.getTopologyType()===o.TOPOLOGY_TYPES.EDGE&&i.add(e)}))})),Array.from(i)},a=function(e,t){var r=(0,i.findConnectedFaces)(e,{allowVertexConnections:!1,barrierEdges:t}),o=[];return r.forEach((function(e){(function(e,t){e=new Set(e),t=new Set(t);var r=new Set;e.forEach((function(e){e.collectEdges(r)})),r=Array.from(r);for(var o=0;o<r.length;o++){var i=r[o];if(!t.has(i)){var n=i.getCoedges();if(n.length<2)return!1;for(var s=0;s<n.length;s++)if(!e.has(n[s].getFace()))return!1}}return!0})(e,t)&&(o=o.concat(e))})),o},c=function(e,t){for(var r=0;r<e.length;r++)if(t.indexOf(e[r])<0)return!1;return!0};t.mergeSketchRegions=function(e){var t,r,o=[];e.forEach((function(e){o=o.concat(e.getEdges())}));var u=new n.SketchRegionSolver;u.compute(o);var l=u.getFaces(),h=[],d=[];for(t=0;t<e.length;t++){var p=s(u,e[t].getEdges());if(0!==p.length){var g=a(l,p);0!==g.length&&(d.push(p),h.push(g))}}for(var f=[],v=new Set(l),_=!0;h.length>0;){var y=[];for(t=0;t<h.length;t++){var m=!1;for(r=0;r<h.length;r++)if(t!==r&&c(h[t],h[r])){m=!0;break}y.push(m)}var E=new Set;for(t=h.length-1;t>=0;t--)y[t]?h[t].forEach((function(e){E.add(e),v.delete(e)})):(h.splice(t,1),d.splice(t,1));_&&(f=f.concat(Array.from(v))),v=E,_=!_}return(0,i.mergeConnectedFaces)(f)},t.getRegionEdges=s,t.getBoundedRegionFaces=a},3227:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.RegionTopologyFace=t.RegionTopologyEdge=t.RegionTopologyVertex=void 0;var o,i=r(1972),n=r(6940),s=r(7580),a=r(6776),c=r(2468),u=r(4728),l=r(2856),h=(o=l)&&o.__esModule?o:{default:o};var d=function(e){n.Vertex.call(this,e),this._associatedVertices=[]};(d.prototype=Object.create(n.Vertex.prototype)).setAssociatedEntities=function(e){this._associatedVertices=h.default.clone(e)},d.prototype.getAssociatedEntities=function(){return this._associatedVertices};var p=function(e){s.Edge.call(this,e),this._sourceEdge=void 0,this._associatedEdges=[],this._isDangling=!1};(p.prototype=Object.create(s.Edge.prototype)).setAssociatedEdges=function(e){this._associatedEdges=e},p.prototype.getAssociatedEntities=function(){return h.default.map(this._associatedEdges,(function(e){return e.edge}))},p.prototype.getAssociatedEdgeInfo=function(){return this._associatedEdges},p.prototype.setToEdgeSegment=function(e,t){this._sourceEdge=e,this._curve=e.getCurve(),this._reversed=e.isReversed(),this.setRange(t)},p.prototype.setIsDangling=function(e){this._isDangling=e},p.prototype.isDangling=function(){return this._isDangling},p.prototype.getSourceEdge=function(){return this._sourceEdge};var g=function(e){a.Face.call(this,e),this._danglingEdges=[]};(g.prototype=Object.create(a.Face.prototype)).addDanglingEdge=function(e){this._danglingEdges.push(e)},g.prototype.isPointInsideFace=function(e){for(var t=0,r=0;r<this.getLoops().length;++r)for(var o=this.getLoops()[r],i=0;i<o.getCoedges().length;++i){var n=o.getCoedges()[i];if(!n.getEdge().isDangling())t+=n.uvAngleSubtended(e)}t=Math.abs(t);var s=Math.floor(t/(2*Math.PI)),a=t-2*s*Math.PI;return!!(Math.abs(a)<c.PARAMETER_SPACE_TOLERANCE&&s||Math.abs(a-2*Math.PI)<c.PARAMETER_SPACE_TOLERANCE)},g.prototype.getRepresentativePoint=function(){var e,t,r=i.Vector3.createFloat64(),o=this.getBoundingBox(),n=(o.max[0]-o.min[0])/33,s=(o.max[1]-o.min[1])/33;for(e=1;e<32;++e)for(t=1;t<32;++t)if(r[0]=o.min[0]+n*e,r[1]=o.min[1]+s*t,this.isPointInsideFace(r))return r;return u.ConsoleUtils.assert(!1),o.getCenter()},g.prototype.getDanglingEdges=function(){return this._danglingEdges},t.RegionTopologyVertex=d,t.RegionTopologyEdge=p,t.RegionTopologyFace=g},744:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.matchRegionEdgeRecipe=t.deserializeRegionEdgeRecipe=t.serializeRegionEdgeRecipe=t.createRecipeFromRegionEdge=t.matchRegionFaceRecipe=t.deserializeRegionFaceRecipe=t.serializeRegionFaceRecipe=t.createRecipeFromRegionFace=void 0;var o,i=r(1972),n=r(5896),s=r(2468),a=r(9952),c=r(4728),u=r(6120),l=r(2856),h=(o=l)&&o.__esModule?o:{default:o};var d=0,p=1,g=2,f=1,v=1,_=function(e,t){var r=h.default.filter(t.regionVertices,(function(t){return h.default.contains(t.getAssociatedEntities(),e.getStartVertex())}));c.ConsoleUtils.assert(1===r.length),r=r[0];var o=[],i=[],n=new Set,s=r,a=void 0;if(s)do{o.push(s);var u=h.default.filter(s.getEdges(),(function(t){return t!==a&&h.default.contains(t.getAssociatedEntities(),e)&&!n.has(t)}));if(0===u.length){c.ConsoleUtils.assert(!e.isClosed()),c.ConsoleUtils.assert(h.default.contains(s.getAssociatedEntities(),e.getEndVertex()));break}var l=void 0;if(u.length>1){u.sort((function(e,t){return e.t0()-t.t0()}));for(var d=0;d<u.length;d++)if(u[d].getStartVertex()===s){l=u[d];break}c.ConsoleUtils.assert(l)}else l=u[0];s=l.getOtherVertex(s),c.ConsoleUtils.assert(s),a=l,n.add(a),i.push(a)}while(s!==r);return{edges:i,vertices:o}},y=function(e,t,r){var o=[],n=h.default.filter(t,(function(t){return t!==e}));if(0===n.length);else for(var a=r.vertices,c=0;c<a.length;c++){for(var u=a[c],l=!1,d=u.getEdges(),p=0;p<d.length;p++)if(h.default.intersection(n,d[p].getAssociatedEntities()).length>0){l=!0;break}l&&o.push({vertex:u,indexInTopology:c})}if(e.isClosed()&&2===o.length&&1===n.length){var g=!1;if(n[0].getCurveType()===s.GEOMETRY_TYPES.LINE){var f=n[0],v=f.closestToPointParam(o[0].vertex.getPosition());g=f.closestToPointParam(o[1].vertex.getPosition())<v}else if(e.getCurveType()===s.GEOMETRY_TYPES.CIRCLE&&n[0].getCurveType()===s.GEOMETRY_TYPES.CIRCLE){var _=e.getCurve().getCenter(),y=i.Vector3.sub([0,0,0],n[0].getCurve().getCenter(),_);if(i.Vector3.length(y)>0){i.Vector3.normalize(y,y);var m=i.Vector3.sub([0,0,0],o[0].vertex.getPosition(),_),E=i.Vector3.sub([0,0,0],o[1].vertex.getPosition(),_),x=m.x*y.y-m.y*y.x,R=E.x*y.y-E.y*y.x;x>0&&R<0&&(g=!0)}}if(g){var A=o[1];o[1]=o[0],o[0]=A}}return o},m=function(e,t,r,o,i){var n,s={};s[e.getGuid()]={dist:0,prev:null,prevEdge:null,vertex:e,guid:e.getGuid()};var c=new a.BinaryHeap((function(e){return e.dist}),(function(e){return e.guid}));for(c.push(s[e.getGuid()]);0!==c.size();){var u=c.pop();if(u===t)break;n=u.vertex.getEdges();for(var l=0;l<n.length;l++){var d=n[l].getOtherVertex(u.vertex);if(d&&!o[n[l].getGuid()]&&(!r[d.getGuid()]||d===t)){for(var p=n[l].getEndVertex()===d,g=!1,f=n[l].getAssociatedEntities(),_=0;_<i.length;_++)if(h.default.contains(f,i[_].edge)&&i[_].orientation===p){g=!0;break}var y=s[u.guid].dist;g||(y+=v),void 0===s[d.getGuid()]?(s[d.getGuid()]={dist:y,prev:u,prevEdge:n[l],vertex:d,guid:d.getGuid()},c.push(s[d.getGuid()])):s[d.getGuid()].dist>y&&(s[d.getGuid()].dist=y,s[d.getGuid()].prev=u,s[d.getGuid()].prevEdge=n[l],c.updated(s[d.getGuid()]))}}}var m=s[t.getGuid()];if(m){n=[];for(var E=[],x=m,R=t;x.prevEdge;){var A=x.prevEdge;n.push(A),x=x.prev,E.push(A.getEndVertex()===R),R=A.getOtherVertex(R)}return{dist:m.dist,edges:n.reverse(),orientations:E.reverse(),startVertex:e,endVertex:t}}return{dist:1/0,edges:[]}},E=function(e,t,r,o,i,s,a){for(var c=e[i],u={},l=0;l<c.length;l++)null!==c[l].endVertex&&(u[c[l].endVertex.getGuid()]?u[c[l].endVertex.getGuid()].incomingEdges.push({edge:c[l].edge,orientation:c[l].edgeOriented}):u[c[l].endVertex.getGuid()]={edgeIndex:l,edgeInfo:c[l],vertex:c[l].endVertex,incomingEdges:[{edge:c[l].edge,orientation:c[l].edgeOriented}]});if(h.default.values(u).length>0){var d=s.vertices,p=s.edges,g=h.default.keys(u),f={dist:1/0},v=o;do{v=(0,n.modulus)(v-1,e.length);for(var _=h.default.keys(a[v]),y=0;y<_.length;y++){var E=a[v][_[y]].vertex;if(E)for(var x=0;x<g.length;x++){var R=u[g[x]].vertex,A=a[v][_[y]].outgoingEdges.concat(u[g[x]].incomingEdges),P=m(E,R,d,p,A);P.dist<f.dist&&((f=P).startIndex=v)}}}while(v!==t&&f.dist===1/0);if(f.dist<1/0){var V=a[f.startIndex][f.startVertex.getGuid()],T=a[i][f.endVertex.getGuid()],b=V.cost+f.dist;(!T||b<T.cost||i===t&&f.endVertex.getGuid()===r.getGuid()&&null===T.previousGuid)&&(a[i][f.endVertex.getGuid()]={previousGuid:f.startVertex.getGuid(),edgeSegment:null,indexRange:[],cost:V.cost+f.dist,vertex:f.endVertex,previousIndex:f.startIndex,connectionEdges:f.edges,connectionOrientation:f.orientations,outgoingEdges:[]})}}},x=function(e,t,r,o,i){var s=[],a=e[t][r].endVertex;s[t]={},s[t][a.getGuid()]={previousGuid:null,edgeSegment:null,previousIndex:null,cost:0,vertex:a,outgoingEdges:[]};var c=t;do{var u=(0,n.modulus)(c+1,e.length),l=e[u];s[u]=s[u]||{};for(var d=h.default.keys(s[c]),p=0,g=0;g<d.length;g++)for(var v=d[g],_=0;_<l.length;_++)if(l[_].startVertices[v]){s[c][v].outgoingEdges.push({edge:l[_].edge,orientation:l[_].edgeOriented});var y=l[_].endVertex;if(null!==y){var m=s[c][v].cost;if(!l[_].edge.isClosed())l[_].endVertexTopologyIndex>l[_].startVertices[v].vertexIndex!==l[_].edgeOriented&&(m+=f);(!s[u][y.getGuid()]||s[u][y.getGuid()].cost>m||u===t&&y.getGuid()===a.getGuid()&&null===s[u][y.getGuid()].previousGuid)&&(s[u][y.getGuid()]={previousGuid:v,edgeSegment:l[_],indexRange:[l[_].startVertices[v].vertexIndex,l[_].endVertexTopologyIndex],cost:m,vertex:y,previousIndex:c,outgoingEdges:[]},p++)}else m=s[c][v].cost,(!s[u][v]||s[u][v].cost>m)&&(s[u][v]={previousGuid:v,edgeSegment:l[_],indexRange:[],cost:m,previousIndex:c,outgoingEdges:[]})}0===p&&E(e,t,a,c,u,o,s),c=u}while(c!==t);null!==s[t][a.getGuid()].previousGuid&&s[t][a.getGuid()].cost<i.cost&&(i.cost=s[t][a.getGuid()].cost,i.state=s,i.startGuid=a.getGuid())},R=function(e,t){for(var r=function(e,t){var r={},o={},i={},s=t;do{var a=(0,n.modulus)(s+1,e.length),c=e[s],u=e[a],l=i;i={};for(var h=0;h<u.length;h++){var d=u[h].topologyAlongEdge.vertices,p=u[h].topologyAlongEdge.edges;u[h].startVertices={};var g=void 0,f=void 0,v=c.length;void 0!==l[u[h].edge.getGuid()]&&v++;for(var _=0;_<v;_++){var y=void 0;if(_===c.length)y=l[u[h].edge.getGuid()];else{if(!c[_].endVertex)continue;y=c[_].endVertex.getGuid()}for(var m=void 0,E=0;E<d.length;E++)if(d[E].getGuid()===y){m=E;break}void 0!==m&&(u[h].startVertices[y]={vertex:d[m],vertexIndex:m},null!==u[h].endVertex&&(u[h].edgeOriented?(g=void 0!==g?Math.min(g,m):m,f=void 0!==f?Math.max(f,u[h].endVertexTopologyIndex):u[h].endVertexTopologyIndex):(g=void 0!==g?Math.max(g,m):m,f=void 0!==f?Math.min(f,u[h].endVertexTopologyIndex):u[h].endVertexTopologyIndex)),void 0===i[u[h].edge.getGuid()]&&(i[u[h].edge.getGuid()]=y))}if(void 0!==g&&void 0!==f){if(g!==f){var x;x=u[h].edge.isClosed()?u[h].edgeOriented?1:-1:g<f?1:-1;var R=g;do{if(r[d[R].getGuid()]=d[R],x>0)R!==f&&(o[p[R].getGuid()]=p[R]);else{var A=(0,n.modulus)(R-1,p.length);o[p[A].getGuid()]=p[A]}R=(0,n.modulus)(R+x,d.length)}while(R!==f)}r[d[f].getGuid()]=d[f]}}s=a}while(s!==t);return{vertices:r,edges:o}}(e,t),o={cost:1/0,state:void 0,startGuid:void 0},i=0;i<e[t].length;i++)null!==e[t][i].endVertex&&x(e,t,i,r,o);if(o.cost===1/0)return{edges:void 0,edgeOrientedFlags:void 0,score:1/0};var s=function(e,t){var r=[],o=e.startGuid,i=t;do{r.push(e.state[i][o]);var s=e.state[i][o].previousIndex;o=e.state[i][o].previousGuid,i=s}while(i!==t);r=r.reverse();var a=[],c=[];for(i=0;i<r.length;i++)if(0!==r[i].indexRange.length){var u,l,h,d,p=r[i].edgeSegment.topologyAlongEdge;r[i].indexRange[0]<r[i].indexRange[1]?(u=r[i].indexRange[0],l=r[i].indexRange[1],r[i].edgeSegment.edge.isClosed()&&!r[i].edgeSegment.edgeOriented?(h=-1,u=(0,n.modulus)(r[i].indexRange[0]-1,p.edges.length),l=(0,n.modulus)(r[i].indexRange[1]-1,p.edges.length),d=!1):(h=1,u=(0,n.modulus)(r[i].indexRange[0],p.edges.length),l=(0,n.modulus)(r[i].indexRange[1],p.edges.length),d=!0)):r[i].edgeSegment.edge.isClosed()&&r[i].edgeSegment.edgeOriented?(h=1,u=(0,n.modulus)(r[i].indexRange[0],p.edges.length),l=(0,n.modulus)(r[i].indexRange[1],p.edges.length),d=!0):(h=-1,u=(0,n.modulus)(r[i].indexRange[0]-1,p.edges.length),l=(0,n.modulus)(r[i].indexRange[1]-1,p.edges.length),d=!1);var g=u;do{a.push(p.edges[g]),c.push(d),g=(0,n.modulus)(g+h,p.edges.length)}while(g!==l)}else if(r[i].connectionEdges)for(g=0;g<r[i].connectionEdges.length;g++)a.push(r[i].connectionEdges[g]),c.push(r[i].connectionOrientation[g]);return{topologyEdges:a,edgeOrientedFlags:c}}(o,t);return{edges:s.topologyEdges,edgeOrientedFlags:s.edgeOrientedFlags,score:o.cost}},A=function(e,t){var r,o=function(e,t){for(var r=[],o=0;o<e.length;o++){for(var i=e[o],n=[],s=0;s<i.length;s++){var a=i[s],c=t.sketchEdges[a.edgeRef];c&&n.push({edgeRef:a.edgeRef,edgeOriented:a.edgeOriented,intersectionNumber:a.intersectionNumber,totalIntersections:a.totalIntersections,edge:c,topologyAlongEdge:_(c,t),endVertex:null,endVertexTopologyIndex:null})}r.push(n)}return r}(e,t);if(u.DebugUtils.level(\"region_match\")>=2){var i=h.default.pluck(h.default.flatten(o),\"edge\");for(r=0;r<i.length;r++)u.DebugUtils.drawEdge3D(i[r],{color:0,render:!1});u.DebugUtils.render()}if(function(e){for(var t=0;t<e.length;t++)for(var r=h.default.pluck(e[(t+1)%e.length],\"edge\"),o=0;o<e[t].length;o++){var i=e[t][o],n=y(i.edge,r,i.topologyAlongEdge);if(0===i.totalIntersections)i.endVertex=null;else if(n.length===i.totalIntersections){var s=n[i.intersectionNumber];i.endVertexTopologyIndex=s.indexInTopology,i.endVertex=s.vertex}else 0===n.length||u.DebugUtils.warn(\"Region matching problem! Intersection counts do not match\"),i.endVertex=null}}(o),u.DebugUtils.level(\"region_match\")>=2){var n=h.default.pluck(h.default.flatten(o),\"endVertex\");for(r=0;r<n.length;r++)null!==n[r]&&u.DebugUtils.drawVertex3D(n[r],{color:65280,render:!1});u.DebugUtils.render()}var s=function(e){for(var t=1/0,r=void 0,o=0;o<e.length;o++){var i=e[o];if(0!==i.length){for(var n=0,s=0;s<i.length;s++)null!==i[s].endVertex&&n++;var a=i.length-n;if(0===a)return o;n>0&&a<t&&(t=a,r=o)}}return r}(o);if(void 0===s){for(var a=0;a<o[0].length;a++){var c=o[0][a].edge;if(c.isClosed()&&h.default.all(o,(function(e){for(var t=0;t<e.length;t++)if(e[t].edge===c)return!0;return!1}))){var l=o[0][a].topologyAlongEdge.edges,f=new Array(l.length);for(r=0;r<f.length;r++)f[r]=o[0][a].edgeOriented;return o[0][a].edgeOriented||l.reverse(),u.DebugUtils.level(\"region_match\")>=2&&u.DebugUtils.drawEdge3D(c,{color:16711680}),{edges:l,edgeOrientedFlags:f,matchStatus:g}}}return{edges:void 0,edgeOrientedFlags:void 0,matchStatus:d}}var v,m=R(o,s);if(u.DebugUtils.level(\"region_match\")>=2&&void 0!==m.edges){for(r=0;r<m.edges.length;r++)u.DebugUtils.drawEdge3D(m.edges[r],{color:16711680,render:!1});u.DebugUtils.render()}return v=0===m.score?g:m.score===1/0?d:p,{edges:m.edges,edgeOrientedFlags:m.edgeOrientedFlags,matchStatus:v}},P=function(e,t){if(!e||!e.edges)return new Set;for(var r=new Set,o=0;o<e.edges.length;o++){var i=e.edgeOrientedFlags[o]===t,n=e.edges[o].getCoedges();c.ConsoleUtils.assert(n.length>=1&&n.length<=2);for(var s=void 0,a=0;a<n.length;a++)if(n[a].isReversed()===i){s=n[a].getFace();break}s&&!r.has(s)&&r.add(s)}var u=new Set(e.edges);return r.forEach((function(e){for(var t=Array.from(e.collectEdges()),o=0;o<t.length;o++){var i=t[o];if(!u.has(i)){var n=void 0,s=i.getFaces();c.ConsoleUtils.assert(s.length>=1&&s.length<=2),1===s.length?c.ConsoleUtils.assert(s[0]===e):2===s.length&&(c.ConsoleUtils.assert(s[0]===e||s[1]===e),n=s[0]===e?s[1]:s[0]),n&&!r.has(n)&&r.add(n)}}})),r};t.createRecipeFromRegionFace=function(e,t){for(var r=[],o=e.getLoops(),i=0;i<o.length;i++){for(var n=o[i].getCoedges(),s=[],a=0;a<n.length;a++){for(var c=n[a],u=c.getEdge().getAssociatedEdgeInfo(),l=c.getEndVertex(),d=n[(a+1)%n.length].getEdge().getAssociatedEdgeInfo(),p=h.default.pluck(d,\"edge\"),g=[],f=0;f<u.length;f++){for(var v=_(u[f].edge,t),m=y(u[f].edge,p,v),E=0,x=0;x<m.length;x++)if(m[x].vertex===l){E=x;break}var R={edgeRef:u[f].edge.getGuid(),edgeOriented:!(c.isReversed()^u[f].flipped),intersectionNumber:E,totalIntersections:m.length,edge:u[f].edge};g.push(R)}s.push(g)}r.push(s)}return r},t.serializeRegionFaceRecipe=function(e){for(var t=[],r=0;r<e.length;r++){for(var o=[],i=e[r],n=0;n<i.length;n++){for(var s=[],a=i[n],c=0;c<a.length;c++){var u=a[c];s.push(u.edgeRef+\"_\"+(u.edgeOriented?\"t\":\"f\")+\"_\"+u.intersectionNumber+\"_\"+u.totalIntersections)}o.push(s.join(\";\"))}t.push(o.join(\"+\"))}return t.join(\"/\")},t.deserializeRegionFaceRecipe=function(e){for(var t=e.split(\"/\"),r=0;r<t.length;r++){t[r]=t[r].split(\"+\");for(var o=t[r],i=0;i<o.length;i++){o[i]=o[i].split(\";\");for(var n=o[i],s=0;s<n.length;s++){var a=n[s].split(\"_\");n[s]={edgeRef:a[0],edgeOriented:\"t\"===a[1],intersectionNumber:parseInt(a[2],10),totalIntersections:parseInt(a[3],10)}}}}return t},t.matchRegionFaceRecipe=function(e,t){var r,o,i,n=g,s=[];for(r=0;r<e.length;r++){var a=A(e[r],t);if(a.matchStatus===d&&0===r)return{regions:[],matchStatus:d};a.matchStatus!==g&&(n=p),s.push(a)}if(u.DebugUtils.level(\"region_match\")>0){for(u.DebugUtils.clearView(),i=h.default.values(t.sketchEdges),r=0;r<i.length;r++)u.DebugUtils.drawEdge3D(i[r],{color:0,render:!1});for(r=0;r<s.length;r++)for(o=0;o<s[r].edges.length;o++){var c=0===r?65280:16711680;u.DebugUtils.drawEdge3D(s[r].edges[o],{color:c,render:!1})}u.DebugUtils.render()}var l=P(s[0],!1);for(o=1;o<s.length;o++){P(s[o],!0).forEach((function(e){l.delete(e)}))}if(l=Array.from(l),u.DebugUtils.level(\"region_match\")>0){for(r=0;r<l.length;r++)for(i=Array.from(l[r].collectEdges()),o=0;o<i.length;o++)u.DebugUtils.drawEdge3D(i[o],{color:13684736,render:!1});u.DebugUtils.render()}return{regions:l,matchStatus:n}},t.createRecipeFromRegionEdge=function(e,t){var r,o,i={startEdgeRefs:[],endEdgeRefs:[],edgeRef:[],edgeOriented:[],intersectionNumberStart:[],totalIntersectionsStart:[],intersectionNumberEnd:[],totalIntersectionsEnd:[]},n=e.getStartVertex(),s=[];n.getOtherEdges(e).forEach((function(e){var t=h.default.pluck(e.getAssociatedEdgeInfo(),\"edge\");for(r=0;r<t.length;r++)s.indexOf(t[r])<0&&(s.push(t[r]),i.startEdgeRefs.push(t[r].getGuid()))}));var a=e.getEndVertex(),c=[];a.getOtherEdges(e).forEach((function(e){var t=h.default.pluck(e.getAssociatedEdgeInfo(),\"edge\");for(r=0;r<t.length;r++)c.indexOf(t[r])<0&&(c.push(t[r]),i.endEdgeRefs.push(t[r].getGuid()))}));var u=e.getAssociatedEdgeInfo(),l=h.default.pluck(u,\"edge\");for(r=0;r<u.length;r++){var d=l[r],p=!u[r].flipped,g=_(d,t),f=h.default.unique(s.concat(l)),v=y(d,f,g),m=0;for(o=0;o<v.length;o++)if(v[o].vertex===n){m=o;break}var E=h.default.unique(c.concat(l)),x=y(d,E,g),R=0;for(o=0;o<x.length;o++)if(x[o].vertex===a){R=o;break}i.edgeRef.push(d.getGuid()),i.edgeOriented.push(p),i.intersectionNumberStart.push(m),i.totalIntersectionsStart.push(v.length),i.intersectionNumberEnd.push(R),i.totalIntersectionsEnd.push(x.length)}return i},t.serializeRegionEdgeRecipe=function(e){var t={edge:e.edgeRef,orient:e.edgeOriented,start:e.startEdgeRefs,end:e.endEdgeRefs,sIdx:e.intersectionNumberStart,sNum:e.totalIntersectionsStart,eIdx:e.intersectionNumberEnd,eNum:e.totalIntersectionsEnd};return JSON.stringify(t)},t.deserializeRegionEdgeRecipe=function(e){var t=JSON.parse(e);return{edgeRef:t.edge,edgeOriented:t.orient,startEdgeRefs:t.start,endEdgeRefs:t.end,intersectionNumberStart:t.sIdx,totalIntersectionsStart:t.sNum,intersectionNumberEnd:t.eIdx,totalIntersectionsEnd:t.eNum}},t.matchRegionEdgeRecipe=function(e,t){var r=[],o=d,i=[];e.startEdgeRefs.forEach((function(e){var r=t.sketchEdges[e];r&&i.push(r)}));var n=[];e.endEdgeRefs.forEach((function(e){var r=t.sketchEdges[e];r&&n.push(r)})),e.edgeRef.forEach((function(e){var r=t.sketchEdges[e];r&&i.indexOf(r)<0&&i.push(r),r&&n.indexOf(r)<0&&n.push(r)}));for(var s=0;s<e.edgeRef.length;s++){var a=t.sketchEdges[e.edgeRef[s]];if(a){var c=_(a,t),l=void 0,h=void 0,p=y(a,i,c);if(0===e.totalIntersectionsStart[s])l=c.vertices[0],h=0;else if(p.length===e.totalIntersectionsStart[s]){var f=p[e.intersectionNumberStart[s]];l=f.vertex,h=f.indexInTopology}var v=void 0,m=void 0,E=y(a,n,c);if(0===e.totalIntersectionsEnd[s])v=c.vertices[0],m=c.vertices.length;else if(E.length===e.totalIntersectionsEnd[s]){var x=E[e.intersectionNumberEnd[s]];v=x.vertex,0===(m=x.indexInTopology)&&a.isClosed()&&(m=c.vertices.length)}if(!e.edgeOriented[s]){var R=l;l=v,v=R,R=h,h=m,m=R}if(l&&v){if(!(h>=m)){r=c.edges.slice(h,m),o=g;break}u.DebugUtils.warn(\"Edge recipe match should find start vertex before end vertex\")}}}return{edges:r,matchStatus:o}}},8768:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.SketchRegionSolver=void 0;var o,i=r(1972),n=r(5896),s=r(2468),a=r(8292),c=r(1096),u=r(5512),l=r(8796),h=r(8972),d=r(3565),p=r(4524),g=r(672),f=r(8460),v=r(6344),_=r(6704),y=r(5416),m=r(2536),E=r(2208),x=r(3227),R=r(744),A=r(4728),P=r(6120),V=r(2856),T=(o=V)&&o.__esModule?o:{default:o};let b;var C=1e-5,O=function(){this.SIDE={LEFT:0,RIGHT:1},this._sketch=void 0,this._intersectionVertices=[],this._edgeSegments=[],this._cells=[],this._faces=[],this._workspace={edgeIntersections:[],edgeOverlapRegions:[],segmentBlackList:[],edges:[],edgeIDs:[],sweepLineIntersections:void 0,sweepLineRegions:void 0,currentVertex:void 0,nextVertex:void 0,edgesPerCell:void 0},this._sketchRegionTopologies={},this._planeGeometry=new a.Plane,this._planeGeometry.set([0,0,0],[0,0,1],[1,0,0]),this._sketchSummary={},this._internalToFinalMap=null,this._finalFaces=[],this._progenitorMap=null};O.prototype.compute=function(e){this._sketchEdges=e,this._initializeWorkspace(),this._findIntersections(),this._addGraphEdges(),this._mergeCoincidentSegments(),this._sortEdgesAroundVertex(),this._assignAdjacentEdges(),this._sweepRegions(),this._assignleftmostEdges(),this._removeGrazingIntersectionVertices(),this._updateVertexGuidLists(),this._removeTemporaryVertices(),this._assignLoops(),this._updateSketchRegionTopology(),this._clearWorkspace(),this._prepareResult()},O.prototype._initializeWorkspace=function(){var e=this._workspace;e.edges={};for(var t=0;t<this._sketchEdges.length;++t)e.edges[this._sketchEdges[t].getGuid()]=this._sketchEdges[t];for(e.edgeIDs=Object.getOwnPropertyNames(e.edges).sort(),e.edgeIntersections={},e.edgeOverlapRegions={},e.segmentBlackList={},t=0;t<e.edgeIDs.length;t++)e.edgeIntersections[e.edgeIDs[t]]=[],e.edgeOverlapRegions[e.edgeIDs[t]]=[],e.segmentBlackList[e.edgeIDs[t]]=[];e.sweepLineIntersections=void 0,e.sweepLineRegions=void 0,e.edgesPerCell=[],this._faces=[]},O.prototype._clearWorkspace=function(){this._workspace={edgeIntersections:[],edgeOverlapRegions:[],segmentBlackList:[],edges:[],edgeIDs:[],sweepLineIntersections:void 0,sweepLineRegions:void 0,currentVertex:void 0,nextVertex:void 0,sweepLinePosition:void 0,edgesPerCell:[]}},O.prototype._findIntersections=function(){for(var e=this._workspace,t=0;t<e.edgeIDs.length;t++){for(var r=e.edges[e.edgeIDs[t]],o=t;o<e.edgeIDs.length;o++){var a=e.edges[e.edgeIDs[o]];if(o>t||r.getCurveType()===s.GEOMETRY_TYPES.BCURVE)for(var c=(0,f.computeCurveCurveIntersections)(r,a,!0,!1,s.KERNEL_TOLERANCE),u=0;u<c.length;u++){var l=c[u];if(l.rangeInfo)e.edgeIntersections[e.edgeIDs[t]].push(T.default.extend(l.rangeInfo[0],{temporary:!1})),e.edgeIntersections[e.edgeIDs[t]].push(T.default.extend(l.rangeInfo[1],{temporary:!1})),e.edgeIntersections[e.edgeIDs[o]].push(T.default.extend(l.rangeByInfo[0],{temporary:!1})),e.edgeIntersections[e.edgeIDs[o]].push(T.default.extend(l.rangeByInfo[1],{temporary:!1})),e.edgeOverlapRegions[e.edgeIDs[t]].push({overlapRange:(0,n.convertToOtherPeriodicRange)([l.rangeInfo[0].param,l.rangeInfo[1].param],r.getRange(),r.getCurve().getPeriod(),s.KERNEL_TOLERANCE),otherEdge:e.edgeIDs[o],otherRange:(0,n.convertToOtherPeriodicRange)([l.rangeByInfo[0].param,l.rangeByInfo[1].param],a.getRange(),a.getCurve().getPeriod(),s.KERNEL_TOLERANCE)}),e.edgeOverlapRegions[e.edgeIDs[o]].push({overlapRange:(0,n.convertToOtherPeriodicRange)([l.rangeByInfo[0].param,l.rangeByInfo[1].param],a.getRange(),a.getCurve().getPeriod(),s.KERNEL_TOLERANCE),otherEdge:e.edgeIDs[t],otherRange:(0,n.convertToOtherPeriodicRange)([l.rangeInfo[0].param,l.rangeInfo[1].param],r.getRange(),r.getCurve().getPeriod(),s.KERNEL_TOLERANCE)});else{if(l.cutInfo.param<r.t0()||l.cutInfo.param>r.t1()){P.DebugUtils.warn(\"Intersection outside the bounds of the edge, ignoring\");continue}e.edgeIntersections[e.edgeIDs[t]].push(T.default.defaults(l.cutInfo,{temporary:!1,virtualIntersection:!1})),e.edgeIntersections[e.edgeIDs[o]].push(T.default.defaults(l.cutByInfo,{temporary:!1,virtualIntersection:!1}))}}}var h=r.getStartVertex(),d=r.getEndVertex(),p=r.t0();h&&void 0!==T.default.findWhere(e.edgeIntersections[e.edgeIDs[t]],{param:p,atVertex:h})||e.edgeIntersections[e.edgeIDs[t]].push({param:p,atVertex:h,temporary:!1,virtualIntersection:void 0});var g=r.t1();d&&void 0!==T.default.findWhere(e.edgeIntersections[e.edgeIDs[t]],{param:g,atVertex:d})||e.edgeIntersections[e.edgeIDs[t]].push({param:g,atVertex:d,temporary:!1,virtualIntersection:void 0}),this._makeEdgeXMonotone(r,e.edgeIntersections[e.edgeIDs[t]])}var v=[];for(t=0;t<e.edgeIDs.length;t++)for(o=0;o<e.edgeIntersections[e.edgeIDs[t]].length;o++)v.push({position:e.edges[e.edgeIDs[t]].evaluatePosition(e.edgeIntersections[e.edgeIDs[t]][o].param),virtualIntersection:e.edgeIntersections[e.edgeIDs[t]][o].virtualIntersection});for(t=0;t<e.edgeIDs.length;t++){var _=e.edges[e.edgeIDs[t]];for(o=0;o<v.length;o++){var y=v[o];if(_.getBoundingBox().isPointInsideWithTolerance(y.position,s.KERNEL_TOLERANCE)){var m=_.closestToPointParam(y.position);i.Vector3.distance(y.position,_.evaluatePosition(m))<s.KERNEL_TOLERANCE&&m>_.t0()+s.PARAMETER_SPACE_TOLERANCE&&m<_.t1()-s.PARAMETER_SPACE_TOLERANCE&&e.edgeIntersections[e.edgeIDs[t]].push({param:m,atVertex:null,temporary:!0,virtualIntersection:y.virtualIntersection})}}}},O.prototype._addGraphEdges=function(){var e=this._workspace;this._intersectionVertices=[],this._edgeSegments=[];for(var t=function(t,r){var o=e.segmentBlackList[t],i=e.edges[t].getCurve(),a=i.getPeriod(),c=e.edges[t].isReversed()?-1:1,u=s.KERNEL_TOLERANCE/i.tangentLength(c*r[0]),l=s.KERNEL_TOLERANCE/i.tangentLength(c*r[1]);if(e.edges[t].getCurve().isPeriodic()){for(var h=0;h<o.length;h++)if((0,n.periodicDifference)(o[h].range[0],r[0],a)<u&&(0,n.periodicDifference)(o[h].range[1],r[1],a)<l)return o[h].edge}else for(h=0;h<o.length;h++)if(Math.abs(o[h].range[0]-r[0])<u&&Math.abs(o[h].range[1]-r[1])<l)return o[h].edge},r=0;r<e.edgeIDs.length;r++){var o=e.edges[e.edgeIDs[r]],a=1,c=this._createGUIDfromEdgeAndLocalID(o,a);e.edgeIntersections[e.edgeIDs[r]]=e.edgeIntersections[e.edgeIDs[r]].sort((function(e,t){return e.param-t.param}));for(var u=e.edgeIntersections[e.edgeIDs[r]],l=void 0,h=0;h<u.length;h++){var d=o.evaluatePosition(u[h].param),p=this._findVertexIndex(d);void 0===p?(p=this._intersectionVertices.length,this._intersectionVertices.push({position:d,adjacentEdges:[],vertices:[],index:p,guidList:[],mergedPositions:[],topologyVertex:void 0,temporary:u[h].temporary,virtualIntersection:u[h].virtualIntersection})):(this._intersectionVertices[p].temporary=this._intersectionVertices[p].temporary&&u[h].temporary,void 0!==u[h].virtualIntersection&&(void 0===this._intersectionVertices[p].virtualIntersection?this._intersectionVertices[p].virtualIntersection=u[h].virtualIntersection:this._intersectionVertices[p].virtualIntersection=this._intersectionVertices[p].virtualIntersection&&u[h].virtualIntersection),this._intersectionVertices[p].mergedPositions.push(d));var g=this._intersectionVertices[p];if(u[h].atVertex&&-1===g.vertices.indexOf(u[h].atVertex)&&g.vertices.push(u[h].atVertex),h>0&&l!==p){c=this._createGUIDfromEdgeAndLocalID(o,a),a++;var f=[u[h-1].param,u[h].param],v=t(o.getGuid(),f);if(void 0===v){var _={originalEdge:o,parameterRange:f,startVertex:this._intersectionVertices[l],endVertex:this._intersectionVertices[p],coincidentRanges:[],adjacent:[{prevEdge:void 0,nextEdge:void 0,face:void 0},{prevEdge:void 0,nextEdge:void 0,face:void 0}],index:this._edgeSegments.length,localGuid:c,topologyEdge:void 0};this._edgeSegments.push(_),this._intersectionVertices[l].adjacentEdges.push(_),this._intersectionVertices[p].adjacentEdges.push(_);for(var y=0;y<e.edgeOverlapRegions[e.edgeIDs[r]].length;y++){var m=e.edgeOverlapRegions[e.edgeIDs[r]][y],E=f,x=s.KERNEL_TOLERANCE;if(o.getCurve().isPeriodic()&&(o.getCurveType()===s.GEOMETRY_TYPES.CIRCLE&&(x/=o.getCurve().getRadius()),E=(0,n.convertToOtherPeriodicRange)(E,o.getRange(),o.getCurve().getPeriod(),x)),E[0]>=m.overlapRange[0]-s.KERNEL_TOLERANCE&&E[1]<=m.overlapRange[1]+s.KERNEL_TOLERANCE){var R=m.otherEdge,A=[e.edges[R].getCurve().closestToPointParam(_.startVertex.position),e.edges[R].getCurve().closestToPointParam(_.endVertex.position)];if(e.edges[R].getCurve().isPeriodic()){var P=_.originalEdge.getCurve().evaluateDt(_.parameterRange[0]),V=e.edges[R].getCurve().evaluateDt(A[0]);if(i.Vector3.dot(P,V)<0){T=A[0];A[0]=A[1],A[1]=T}for(;A[1]<A[0];)A[1]+=e.edges[R].getCurve().getPeriod()}else if(A[0]>A[1]){var T=A[0];A[0]=A[1],A[1]=T}e.segmentBlackList[m.otherEdge].push({range:A,edge:_})}}}else{var b,C=i.Vector3.distance(v.startVertex.position,o.evaluatePosition(f[0]))>i.Vector3.distance(v.startVertex.position,o.evaluatePosition(f[1]));if(v.coincidentRanges.push({originalEdge:o,parameterRange:f,localGuid:c,flipped:C}),0===g.adjacentEdges.length)(b=i.Vector3.distance(d,v.startVertex.position)<i.Vector3.distance(d,v.endVertex.position)?v.startVertex:v.endVertex).mergedPositions.push(d),d=b.position,p=b.index,u[h].atVertex&&-1===b.vertices.indexOf(u[h].atVertex)&&b.vertices.push(u[h].atVertex),this._intersectionVertices.pop();if(v.startVertex.index!==l&&v.endVertex.index!==l){var O=v.startVertex.index===p?v.endVertex:v.startVertex,L=this._intersectionVertices[l];for(y=0;y<L.adjacentEdges.length;y++){var S=L.adjacentEdges[y];S.startVertex===L&&(S.startVertex=O),S.endVertex===L&&(S.endVertex=O),O.adjacentEdges.push(S)}O.mergedPositions.push(L.position);for(y=0;y<L.mergedPositions.length;y++)O.mergedPositions.push(L.mergedPositions[y]);u[h].atVertex&&-1===O.vertices.indexOf(u[h].atVertex)&&O.vertices.push(u[h].atVertex),this._intersectionVertices.splice(l,1);for(y=l;y<this._intersectionVertices.length;y++)this._intersectionVertices[y].index=y}}}l=p}}},O.prototype._mergeCoincidentSegments=function(){for(var e,t={},r=0;r<this._intersectionVertices.length;r++){for(var o=this._intersectionVertices[r],i={},n=0;n<o.adjacentEdges.length;n++){var a=(e=o.adjacentEdges[n]).startVertex===o?e.endVertex:e.startVertex;t[String(o.index)+\"_\"+String(a.index)]||(i[String(a.index)]=i[String(a.index)]||[],i[String(a.index)].push(e))}var c=T.default.keys(i);for(n=0;n<c.length;n++)if(t[c[n]+\"_\"+String(o.index)]=!0,i[c[n]].length>1)for(var u=i[c[n]],l=0;l<u.length;l++){for(var h=[],d=l+1;d<u.length;d++)(0,v.curvesAreCoincident)(u[l].originalEdge.getCurve(),u[d].originalEdge.getCurve(),u[l].parameterRange,u[d].parameterRange,s.KERNEL_TOLERANCE)&&(h.push(u[d]),u.splice(d,1),d--);for(d=0;d<h.length;d++){var p=h[d];u[l].coincidentRanges.push({originalEdge:p.originalEdge,parameterRange:p.parameterRange,localGuid:p.localGuid,flipped:p.startVertex!==u[l].startVertex}),p.startVertex.adjacentEdges.splice(p.startVertex.adjacentEdges.indexOf(p),1),p.endVertex.adjacentEdges.splice(p.endVertex.adjacentEdges.indexOf(p),1);var g=this._edgeSegments.indexOf(p);this._edgeSegments.splice(g,1);for(var f=g;f<this._edgeSegments.length;f++)this._edgeSegments[f].index=f}}}},O.prototype._sortEdgesAroundVertex=function(){for(var e=0;e<this._intersectionVertices.length;e++){for(var t=this._intersectionVertices[e],r=[],o=0;o<t.adjacentEdges.length;o++){var a=this._computeAngleAndPositionForEdge(o,t);r.push({index:o,originalAngle:a.angle,angle:a.angle,position:a.position,derivative:void 0})}for(var c=0,u=!1;!u;){u=!0;var l=-Math.PI+c;for(o=0;o<r.length;o++)if((0,n.angleDifference)(l,r[o].angle)<C){u=!1;break}if(u)break;c+=2e-5}for(o=0;o<t.adjacentEdges.length;o++)r[o].angle=(0,n.normalizeParameterToShiftedRange)(r[o].angle-c,[-Math.PI,Math.PI]);var h=this;r=r.sort((function(e,r){if((0,n.angleDifference)(e.angle,r.angle)>C)return e.angle-r.angle;var o=t.adjacentEdges[e.index],a=t.adjacentEdges[r.index],c=o.startVertex===t?o.parameterRange[0]:o.parameterRange[1],u=a.startVertex===t?a.parameterRange[0]:a.parameterRange[1],l=o.originalEdge.evaluatePosition(c),d=a.originalEdge.evaluatePosition(u),p=i.Vector3.distance(l,d),g=i.Vector3.createFloat64(),f=i.Vector3.createFloat64(),v=o.originalEdge.evaluateCurvature(c,g),_=a.originalEdge.evaluateCurvature(u,f);if(0===v&&0===_)return e.angle-r.angle;if(0===v||0===_){var y=1/Math.max(v,_);p+=1.5*Math.sqrt(Math.pow(y,2)-Math.pow(y-p,2))+s.KERNEL_TOLERANCE}else{var m=1/v,E=1/_;if(m<E){var x=m;m=E,E=x}if(i.Vector3.dot(g,f)<0)p+=1.5*(-Math.sqrt(-.25*Math.pow(p,4)+Math.pow(p,3)*m-p*p*m*m-(p*p-2*p*m)*E*E+(p*p*p-3*p*p*m+2*p*m*m)*E)/(p-m-E));else p+=1.5*(Math.sqrt(-.25*Math.pow(p,4)-Math.pow(p,3)*m-p*p*m*m-(p*p+2*p*m)*E*E+(p*p*p+3*p*p*m+2*p*m*m)*E)/(p+m-E))}var R=Math.min(i.Vector3.distance(o.endVertex.position,o.startVertex.position),i.Vector3.distance(a.endVertex.position,a.startVertex.position));p=Math.max(s.KERNEL_TOLERANCE,p),p=Math.min(.9*R,p);var A=!1;do{var P=h._computeEdgeDirectionAtVertex(e,t,p),V=h._computeEdgeDirectionAtVertex(r,t,p);A=(0,n.angleDifference)(P,V)>1e-8,p*=5}while(!A&&p<R);var T=P-V;return T>Math.PI?T-=n.PI2:T<-Math.PI&&(T+=n.PI2),T})),t.adjacentEdges=T.default.map(r,(function(e){return t.adjacentEdges[e.index]}))}},O.prototype._assignAdjacentEdges=function(){for(var e=0;e<this._edgeSegments.length;e++){var t=this._edgeSegments[e];this._assignAdjacentEdgesToSegment(t)}},O.prototype._assignAdjacentEdgesToSegment=function(e){var t=e.startVertex.adjacentEdges,r=t.indexOf(e);A.ConsoleUtils.assert(-1!==r,\"Error in topology\");for(var o=0,i=e.endVertex.adjacentEdges;o<i.length&&i[o]!==e;)o++;A.ConsoleUtils.assert(o<i.length,\"Error in topology\"),e.adjacent[this.SIDE.LEFT].nextEdge=i[(0,n.modulus)(o-1,i.length)],e.adjacent[this.SIDE.LEFT].prevEdge=t[(0,n.modulus)(r+1,t.length)],e.adjacent[this.SIDE.RIGHT].nextEdge=i[(0,n.modulus)(o+1,i.length)],e.adjacent[this.SIDE.RIGHT].prevEdge=t[(0,n.modulus)(r-1,t.length)]},O.prototype._sweepRegions=function(){var e=this._workspace,t=T.default.clone(this._intersectionVertices).sort((function(e,t){if(Math.abs(e.position[0]-t.position[0])<1e-9){for(var r=0;r<e.adjacentEdges.length;r++)for(var o=0;o<t.adjacentEdges.length;o++)if(e.adjacentEdges[r].originalEdge===t.adjacentEdges[o].originalEdge){var n=e.adjacentEdges[r],a=t.adjacentEdges[o],c=n.startVertex===e?n.parameterRange[0]:n.parameterRange[1],u=a.startVertex===t?a.parameterRange[0]:a.parameterRange[1],l=!0,h=i.Vector3.createFloat64();i.Vector3.normalize(h,n.originalEdge.evaluateDt(c));var d=i.Vector3.createFloat64();if(i.Vector3.normalize(d,a.originalEdge.evaluateDt(u)),Math.sign(h[0])!==Math.sign(d[0]))continue;if(Math.abs(h[0])>s.KERNEL_TOLERANCE&&Math.abs(d[0])>s.KERNEL_TOLERANCE)l=h[0]>0;else{if(Math.abs(e.position[1]-t.position[1])<s.KERNEL_TOLERANCE)continue;l=h[1]>0}return(c-u)*(l?1:-1)}return e.position[1]-t.position[1]}return e.position[0]-t.position[0]}));this._cells=[];var r={index:-1,loops:[],loopOrientations:[],dangling:[],leftmostVertex:void 0};e.sweepLineIntersections=[-1/0,1/0],e.sweepLineRegions=e.sweepLineRegions=[r];for(var o=[],n=0;n<t.length;n++){e.sweepLineRegions.length!==e.sweepLineIntersections.length-1&&console.error(\"Error during sweep computation\");var a=t[n];false;var c=T.default.clone(a.adjacentEdges),u=void 0;if(o[a.index]){for(var l=o[a.index],h=[],d=0;d<e.sweepLineIntersections.length-1;d++)T.default.contains(l,e.sweepLineIntersections[d])&&(void 0===u&&(u=d-1),T.default.contains(l,e.sweepLineIntersections[d+1])&&h.push(d));for(d=0;d<l.length;d++){for(var p=l[d],g=0;g<e.sweepLineIntersections.length;g++)e.sweepLineIntersections[g]===p&&e.sweepLineIntersections.splice(g,1);for(g=0;g<c.length;g++)c[g]===p&&c.splice(g,1)}for(d=h.length-1;d>=0;d--)e.sweepLineRegions.splice(h[d],1)}else u=this._findVertexOnSweepLine(a),e.sweepLineRegions.splice(u+1,0,e.sweepLineRegions[u]);if(c.length>0){var f=u+1;for(d=0;d<c.length;d++){var v=c[d];e.sweepLineIntersections.splice(f,0,v);var _=v.startVertex===a?v.endVertex:v.startVertex;if(void 0===o[_.index]&&(o[_.index]=[]),o[_.index].push(v),d>0){var y={index:this._cells.length,loops:[],loopOrientations:[],dangling:[],leftmostVertex:a};this._cells.push(y),e.sweepLineRegions.splice(f-1,0,y)}f++}f=u;for(d=0;d<c.length;d++){var m=(v=c[d]).startVertex!==a;v.adjacent[m?this.SIDE.RIGHT:this.SIDE.LEFT].face=e.sweepLineRegions[f+1],v.adjacent[m?this.SIDE.LEFT:this.SIDE.RIGHT].face=e.sweepLineRegions[f],f++}}else if(e.sweepLineRegions[u]!==e.sweepLineRegions[u+1]){var E=e.sweepLineRegions[u+1],x=e.sweepLineRegions[u];x===r?(x=E,E=r,e.sweepLineRegions.splice(u,1)):(void 0!==x.leftmostVertex&&(void 0===E.leftmostVertex||E.leftmostVertex.position[0]>x.leftmostVertex.position[0])&&(E.leftmostVertex=x.leftmostVertex),e.sweepLineRegions.splice(u+1,1));for(d=0;d<this._edgeSegments.length;d++)this._edgeSegments[d].adjacent[this.SIDE.LEFT].face===x&&(this._edgeSegments[d].adjacent[this.SIDE.LEFT].face=E),this._edgeSegments[d].adjacent[this.SIDE.RIGHT].face===x&&(this._edgeSegments[d].adjacent[this.SIDE.RIGHT].face=E);for(d=0;d<e.sweepLineRegions.length;d++)e.sweepLineRegions[d]===x&&(e.sweepLineRegions[d]=E);this._cells[x.index]=void 0}else e.sweepLineRegions.splice(u+1,1)}for(n=0;n<this._cells.length;n++)void 0===this._cells[n]&&(this._cells.splice(n,1),n--);for(n=0;n<this._cells.length;n++)this._cells[n].index=n},O.prototype._assignleftmostEdges=function(){for(var e=this,t=0;t<this._cells.length;t++){var r=this._cells[t],o=r.leftmostVertex,i=T.default.filter(o.adjacentEdges,(function(t){var o=t.adjacent[e.SIDE.LEFT].face,i=t.adjacent[e.SIDE.RIGHT].face;return(o===r||i===r)&&o!==i}));if(A.ConsoleUtils.assert(i.length>=2,\"In each loop there should be at least two adjacent edges\"),i.length>2)for(var n=0;n<i.length;n++){var s=i[n].adjacent[e.SIDE.LEFT].face===r?e.SIDE.LEFT:e.SIDE.RIGHT,a=i[n].adjacent[s],c=i[n].startVertex===o?a.prevEdge:a.nextEdge;if(T.default.contains(i,c)){i=[i[n],c];break}}var u=i[0];u.loopsCurveAligned=!!(u.startVertex===o^i[0].adjacent[e.SIDE.RIGHT].face===r),r.leftmostEdge=u,r.leftmostVertex=void 0}},O.prototype._removeGrazingIntersectionVertices=function(){for(var e={},t=0,r=this._intersectionVertices.slice();r.length>0;){var o=r.pop();if(2===o.adjacentEdges.length&&(1===o.adjacentEdges[0].coincidentRanges.length||1===o.adjacentEdges[1].coincidentRanges.length)&&o.virtualIntersection){var i,s,a=1===o.adjacentEdges[0].coincidentRanges.length&&1===o.adjacentEdges[1].coincidentRanges.length,c=o.adjacentEdges.slice();if(a){if(i=[c[0].originalEdge,c[0].coincidentRanges[0].originalEdge],s=[c[1].originalEdge,c[1].coincidentRanges[0].originalEdge],!(i[0]===s[0]&&i[1]===s[1]||i[0]===s[1]&&i[1]===s[0]))continue;e[c[0].originalEdge.getGuid()]=!0,e[c[0].coincidentRanges[0].originalEdge.getGuid()]=!0,e[c[1].originalEdge.getGuid()]=!0,e[c[1].coincidentRanges[0].originalEdge]=!0;var u=[c[0].startVertex===o?c[0].endVertex:c[0].startVertex,o,c[1].startVertex===o?c[1].endVertex:c[1].startVertex]}else{var l;c[0].coincidentRanges.length>0?(l=0,i=[c[0].originalEdge,c[0].coincidentRanges[0].originalEdge]):(l=1,i=[c[1].originalEdge,c[1].coincidentRanges[0].originalEdge]),e[i[0].getGuid()]=!0,e[i[1].getGuid()]=!0;u=[c[l].startVertex===o?c[l].endVertex:c[l].startVertex,o];c=[c[l]]}var h=void 0,d=void 0;if(u[0].vertices.length>0?(h=u[0],d=a?[u[1],u[2]]:[u[1]]):a&&u[2].vertices.length>0?(h=u[2],d=[u[0],u[1]]):(h=u[1],d=a?[u[0],u[2]]:[u[0]]),d[0].vertices.length>0||d[1]&&(d[1].vertices.length>0||d[0]===d[1]))continue;for(var p=!0,g=T.default.without(d,o),f=0;f<g.length;f++){var v=g[f].adjacentEdges;if((v=T.default.difference(v,c)).length>2){p=!1;break}for(var _=0;_<v.length;_++)if(v[_].coincidentRanges.length>0||v[_].originalEdge!==i[0]&&v[_].originalEdge!==i[1]){p=!1;break}}if(!p)continue;for(f=0;f<g.length;f++){var y=g[f],m=T.default.intersection(c,y.adjacentEdges)[0],E=o!==h&&a?T.default.without(c,m)[0]:m,x=T.default.without(y.adjacentEdges,m);for(y.adjacentEdges[1]===m&&(x=x.reverse()),_=0;_<x.length;_++){var R=x[_],A=E.startVertex===h?0:1,P=void 0;if(E.originalEdge===R.originalEdge)P=E.parameterRange[A];else{var V=E.coincidentRanges[0].flipped?1-A:A;P=E.coincidentRanges[0].parameterRange[V]}R.startVertex===y?(R.startVertex=h,R.parameterRange[0]=P):(R.endVertex=h,R.parameterRange[1]=P);for(var b=0;b<R.adjacent.length;b++){var C=R.adjacent[b].face;C.leftmostEdge!==m&&C.leftmostEdge!==E||(R.loopsCurveAligned=C.leftmostEdge.loopsCurveAligned,C.leftmostEdge=R),(C.leftmostVertex===d[0]||void 0!==d[1]&&C.leftmostVertex===d[1])&&(C.leftmostVertex=h)}}var O=h.adjacentEdges.indexOf(E);Array.prototype.splice.apply(h.adjacentEdges,[O,1].concat(x));var L=h.adjacentEdges.length,S=[(0,n.modulus)(O-1,L),O,O+1,(O+2)%L];for(_=0;_<S.length;_++){var M=h.adjacentEdges[S[_]];this._assignAdjacentEdgesToSegment(M)}}this._intersectionVertices=T.default.difference(this._intersectionVertices,d),r=T.default.difference(r,d),this._edgeSegments=T.default.difference(this._edgeSegments,c),t++}}if(t>0){for(var w=0;w<this._intersectionVertices.length;w++)this._intersectionVertices[w].index=w;for(w=0;w<this._edgeSegments.length;w++)this._edgeSegments[w].index=w}var N=T.default.keys(e);for(w=0;w<N.length;w++){var F=N[w],I=[];for(f=0;f<this._edgeSegments.length;f++){(D=this._edgeSegments[f]).originalEdge.getGuid()===F&&I.push([D,D.parameterRange[0]]);for(_=0;_<D.coincidentRanges.length;_++)D.coincidentRanges[_].originalEdge.getGuid()===F&&I.push([D,D.coincidentRanges[_].parameterRange[0]])}I.sort((function(e,t){return e[1]-t[1]}));for(f=0;f<I.length;f++){var D;(D=I[f][0]).originalEdge.getGuid()===F&&(D.localGuid=this._createGUIDfromEdgeAndLocalID(D.originalEdge,f+1));for(_=0;_<D.coincidentRanges.length;_++)D.coincidentRanges[_].originalEdge.getGuid()===F&&(D.coincidentRanges[_].localGuid=this._createGUIDfromEdgeAndLocalID(D.coincidentRanges[_].originalEdge,f+1))}}},O.prototype._removeTemporaryVertices=function(){for(var e=0,t=0;t<this._intersectionVertices.length;t++){var r=this._intersectionVertices[t];if(r.temporary&&2===r.adjacentEdges.length&&r.adjacentEdges[0].originalEdge===r.adjacentEdges[1].originalEdge&&r.adjacentEdges[0]!==r.adjacentEdges[1]){var o,i;r.adjacentEdges[0].endVertex===r?(o=r.adjacentEdges[0],i=r.adjacentEdges[1]):(o=r.adjacentEdges[1],i=r.adjacentEdges[0]),A.ConsoleUtils.assert(o.adjacent[this.SIDE.LEFT].face===i.adjacent[this.SIDE.LEFT].face),A.ConsoleUtils.assert(o.adjacent[this.SIDE.RIGHT].face===i.adjacent[this.SIDE.RIGHT].face);var n=o.parameterRange[1]-i.parameterRange[0],a=(o.originalEdge.isReversed()?-1:1)*o.parameterRange[0],c=s.KERNEL_TOLERANCE/o.originalEdge.getCurve().tangentLength(a);if(o.originalEdge.getCurve().isPeriodic()&&Math.abs(n-o.originalEdge.getCurve().getPeriod())<c)o.parameterRange[1]=i.parameterRange[1]+n;else{if(Math.abs(n)>c)continue;o.parameterRange[1]=i.parameterRange[1]}o.endVertex=i.endVertex,o.adjacent[this.SIDE.LEFT].nextEdge=i.adjacent[this.SIDE.LEFT].nextEdge,o.adjacent[this.SIDE.RIGHT].nextEdge=i.adjacent[this.SIDE.RIGHT].nextEdge,o.adjacent[this.SIDE.LEFT].prevEdge===i&&(o.adjacent[this.SIDE.LEFT].prevEdge=o),o.adjacent[this.SIDE.RIGHT].prevEdge===i&&(o.adjacent[this.SIDE.RIGHT].prevEdge=o);var u=o.adjacent[this.SIDE.LEFT].nextEdge;u.adjacent[this.SIDE.LEFT].prevEdge===i&&(u.adjacent[this.SIDE.LEFT].prevEdge=o),u.adjacent[this.SIDE.LEFT].nextEdge===i&&(u.adjacent[this.SIDE.LEFT].nextEdge=o),u.adjacent[this.SIDE.RIGHT].prevEdge===i&&(u.adjacent[this.SIDE.RIGHT].prevEdge=o),u.adjacent[this.SIDE.RIGHT].nextEdge===i&&(u.adjacent[this.SIDE.RIGHT].nextEdge=o);var l=o.adjacent[this.SIDE.RIGHT].nextEdge;l.adjacent[this.SIDE.LEFT].prevEdge===i&&(l.adjacent[this.SIDE.LEFT].prevEdge=o),l.adjacent[this.SIDE.LEFT].nextEdge===i&&(l.adjacent[this.SIDE.LEFT].nextEdge=o),l.adjacent[this.SIDE.RIGHT].prevEdge===i&&(l.adjacent[this.SIDE.RIGHT].prevEdge=o),l.adjacent[this.SIDE.RIGHT].nextEdge===i&&(l.adjacent[this.SIDE.RIGHT].nextEdge=o),i.adjacent[this.SIDE.LEFT].face.leftmostEdge===i&&(i.adjacent[this.SIDE.LEFT].face.leftmostEdge=o),i.adjacent[this.SIDE.RIGHT].face.leftmostEdge===i&&(i.adjacent[this.SIDE.RIGHT].face.leftmostEdge=o),void 0===o.loopsCurveAligned&&(o.loopsCurveAligned=i.loopsCurveAligned),(0,_.hashCombine4xUint32)(o.localGuid,i.localGuid,o.localGuid);var h=o.endVertex.adjacentEdges.indexOf(i);o.endVertex.adjacentEdges[h]=o,this._intersectionVertices.splice(t,1),this._edgeSegments.splice(i.index-e,1),t--,e++}else this._intersectionVertices[t].index-=e}for(t=0;t<this._edgeSegments.length;t++)this._edgeSegments[t].index=t},O.prototype._updateVertexGuidLists=function(){for(var e=0;e<this._intersectionVertices.length;e++){var t=this._intersectionVertices[e];if(t.vertices.length>0)for(var r=0;r<t.vertices.length;r++)t.guidList.push((0,_.guidToUint32x4)(t.vertices[r].getGuid()));else{var o={};for(r=0;r<t.adjacentEdges.length;r++){var i=t.adjacentEdges[r];if(!o[i.index]){o[i.index]=!0,t.guidList.push(i.localGuid);for(var n=0;n<i.coincidentRanges.length;n++)t.guidList.push(i.coincidentRanges[n].localGuid)}}}}},O.prototype._assignLoops=function(){var e=this._workspace;e.edgesPerCell=[];for(var t=0;t<this._cells.length;t++)e.edgesPerCell[t]=[];for(t=0;t<this._edgeSegments.length;t++){var r=this._edgeSegments[t],o=r.adjacent[this.SIDE.LEFT].face.index;o>=0&&e.edgesPerCell[o].push(r);var i=r.adjacent[this.SIDE.RIGHT].face.index;i>=0&&o!==i&&e.edgesPerCell[i].push(r)}var n=[];for(t=0;t<this._cells.length;t++){var s=[];n[t]=s;for(var a=this._followLoopFromEdge(this._cells[t].leftmostEdge,this._cells[t],!1,!0),c=0;c<a.loop.length;c++)s[a.loop[c].index]=!0;this._cells[t].loops.push(a.loop),this._cells[t].loopOrientations.push(a.orientations)}for(t=0;t<this._cells.length;t++){s=n[t];for(var u=0;u<e.edgesPerCell[t].length;u++){var l=e.edgesPerCell[t][u];if(l.adjacent[this.SIDE.LEFT].face!==l.adjacent[this.SIDE.RIGHT].face){if(!0!==s[l.index]){for(a=this._followLoopFromEdge(l,this._cells[t],!0,!1),c=0;c<a.loop.length;c++)s[a.loop[c].index]=!0;this._cells[t].loops.push(a.loop),this._cells[t].loopOrientations.push(a.orientations)}}else this._cells[t].dangling.push(l)}}},O.prototype._updateSketchRegionTopology=function(){for(var e=this._workspace,t=T.default.keys(this._sketchRegionTopologies),r=0;r<t.length;r++){var o=t[r];this._sketchRegionTopologies[o].updated=!1,\"FaceID\"===this._sketchRegionTopologies[o].topology.tuid&&this._sketchRegionTopologies[o].topology.removeAllEdges()}var i={},n={};for(r=0;r<this._intersectionVertices.length;r++){var a=this._addOrFindTopologySubcomponent(\"VertexID\",s.GEOMETRY_TYPES.POINT,this._intersectionVertices[r].guidList,n);a.setPoint(new d.Point(this._intersectionVertices[r].position)),a.setAssociatedEntities(T.default.clone(this._intersectionVertices[r].vertices));for(var c=0;c<this._intersectionVertices[r].vertices.length;++c){var u=this._intersectionVertices[r].vertices[c].getGuid();A.ConsoleUtils.assert(!i[u],\"vertex should only map to one topology vertex\"),i[u]=a}this._intersectionVertices[r].topologyVertex=a}for(r=0;r<this._edgeSegments.length;r++){var l=this._edgeSegments[r],h=[l.localGuid];for(c=0;c<l.coincidentRanges.length;c++)h.push(l.coincidentRanges[c].localGuid);(P=this._addOrFindTopologySubcomponent(\"EdgeID\",l.originalEdge.getCurveType(),h,n)).setToEdgeSegment(l.originalEdge,l.parameterRange),P.setStartVertex(l.startVertex.topologyVertex),P.setEndVertex(l.endVertex.topologyVertex);var f=[{edge:l.originalEdge,range:T.default.clone(l.parameterRange),flipped:!1}];for(c=0;c<l.coincidentRanges.length;c++)f.push({edge:l.coincidentRanges[c].originalEdge,range:T.default.clone(l.coincidentRanges[c].parameterRange),flipped:l.coincidentRanges[c].flipped});P.setAssociatedEdges(f),l.topologyEdge=P}for(r=0;r<this._cells.length;r++){var v=this._cells[r];for(h=[],c=0;c<e.edgesPerCell[r].length;c++)h.push((0,_.guidToUint32x4)(e.edgesPerCell[r][c].topologyEdge.getGuid()));var y=this._addOrFindTopologySubcomponent(\"FaceID\",s.GEOMETRY_TYPES.PLANE,h,n);y.setSurface(this._planeGeometry);var m=[];for(c=0;c<v.loops.length;c++){var E=new p.Loop;E.setFace(y),m.push(E);for(var x=[],R=0;R<v.loops[c].length;R++){var P=v.loops[c][R].topologyEdge,V=new g.Coedge;V.setLoop(E),x.push(V),V.setEdge(P),V.setReversed(!v.loopOrientations[c][R]),P.getCoedge()?P.getCoedge().getPartner()||(P.getCoedge().setPartner(V),V.setPartner(P.getCoedge())):P.setCoedge(V),v.loops[c][R].topologyEdge.setIsDangling(!1)}E.setCoedges(x)}y.setLoops(m),this._faces.push(y);for(c=0;c<v.dangling.length;c++)y.addDanglingEdge(v.dangling[c].topologyEdge),v.dangling[c].topologyEdge.setIsDangling(!0)}for(r=0;r<t.length;r++)this._sketchRegionTopologies[t[r]].updated||delete this._sketchRegionTopologies[t[r]]},O.prototype._followLoopFromEdge=function(e,t,r,o){var i=[],n=[],s=e,a=[],c=e.adjacent[this.SIDE.LEFT].face===t?this.SIDE.LEFT:this.SIDE.RIGHT,u=!!(s.loopsCurveAligned^c!==this.SIDE.LEFT),l=u?e.startVertex:e.endVertex;do{if(s.adjacent[c].face!==t){console.error(\"REGION: Adjacent edge face does not match cell! FIXME!\");break}if(a[s.index]){console.error(\"REGION: Malformed edges; walking edge lead us to despair\");break}a[s.index]=!0,i.push(s),n.push(u);do{u?(l=s.endVertex,s=s.adjacent[c].nextEdge):(l=s.startVertex,s=s.adjacent[c].prevEdge),s.startVertex===s.endVertex?c=s.adjacent[this.SIDE.LEFT].face===t?this.SIDE.LEFT:this.SIDE.RIGHT:(c=s.startVertex===l?this.SIDE.LEFT:this.SIDE.RIGHT,s.adjacent[this.SIDE.LEFT].face===s.adjacent[this.SIDE.RIGHT].face&&(c=1-c,l=s.startVertex===l?s.endVertex:s.startVertex)),u=c===this.SIDE.LEFT}while(s.adjacent[this.SIDE.LEFT].face===s.adjacent[this.SIDE.RIGHT].face);o&&void 0===s.loopsCurveAligned&&(s.loopsCurveAligned=!!(u^c!==this.SIDE.LEFT))}while(s!==e);return{loop:i,orientations:n}},O.prototype._addNewRegionTopology=function(e){switch(e.tuid){case\"VertexID\":var t=new x.RegionTopologyVertex(new d.Point);return t.setGuid(e.guid),t;case\"EdgeID\":var r=void 0;switch(e.minortype){case s.GEOMETRY_TYPES.LINE:r=new c.Line;break;case s.GEOMETRY_TYPES.CIRCLE:r=new u.Circle;break;case s.GEOMETRY_TYPES.ELLIPSE:r=new h.Ellipse;break;case s.GEOMETRY_TYPES.BCURVE:r=new l.BCurve;break;default:console.error(\"Unhandled curve type\")}var o=new x.RegionTopologyEdge(r);return o.setGuid(e.guid),o;case\"FaceID\":r=void 0;if(e.minortype===s.GEOMETRY_TYPES.PLANE)r=new a.Plane;else console.error(\"Unhandled surface type\");var i=new x.RegionTopologyFace(r);return i.setGuid(e.guid),i;default:console.error(\"Unhandled topology type\")}},O.prototype._addOrFindTopologySubcomponent=function(e,t,r,o){var i=this._createNameFromGuidList(e,t,r,o);if(this._sketchRegionTopologies[i]){var n=this._sketchRegionTopologies[i];return n.updated=!0,n.topology}var s=this._addNewRegionTopology({tuid:e,minortype:t,guid:i});return this._sketchRegionTopologies[i]={topology:s,updated:!0},s};var L={VertexID:[1168004130,3764602020,2270554856,1368826480],EdgeID:[2942887333,1472546498,2159971906,413489693],FaceID:[2166479754,2329626594,2838556660,1584616933]},S={};S[s.GEOMETRY_TYPES.POINT]=[2299429810,2248164535,3202574069,2684287321],S[s.GEOMETRY_TYPES.LINE]=[910992607,3428993096,3010390753,2966835859],S[s.GEOMETRY_TYPES.CIRCLE]=[2229232555,842549819,2526558959,4217038233],S[s.GEOMETRY_TYPES.PLANE]=[2122299449,3667741317,2812958731,939246365],S[s.GEOMETRY_TYPES.BCURVE]=[420548527,2703575863,2792852189,2595995847],S[s.GEOMETRY_TYPES.ELLIPSE]=[902753991,1129557208,9277753211,1913737389];var M,w=16777619,N=function(e,t){var r=2166136261;return t&&(r=(r^t)*w>>>0),r=(((r=(((r=(((r=((r^255&e)>>>0)*w>>>0)^e>>8&255)>>>0)*w>>>0)^e>>16&255)>>>0)*w>>>0)^e>>24&255)>>>0)*w>>>0},F=(M=new Uint32Array(4),function(e){return M[0]=e,M[1]=w,M[2]=e,M[3]=e,(0,_.hashCombine4xUint32)(M,M)}),I=function(e,t){for(var r=0;r<e.length;r++)e[r]=(e[r]^t[r])>>>0};O.prototype._createNameFromGuidList=function(e,t,r,o){var i=T.default.clone(L[e]),n=S[t];A.ConsoleUtils.assert(i&&n,\"Unsupported tuid or minortype!\"),I(i,n);for(var s=0;s<r.length;s++)I(i,r[s]);var a=(0,_.uint32x4ToGUID)(i);if(o[a]){var c=++o[a];return(r=T.default.clone(r)).push(F(N(c))),this._createNameFromGuidList(e,t,r,o)}return o[a]=1,a},O.prototype._createGUIDfromEdgeAndLocalID=function(e,t){var r=(0,_.guidToUint32x4)(e.getGuid()),o=F(N(t));return(0,_.hashCombine4xUint32)(r,o)},O.prototype._findVertexIndex=function(e){for(var t=0;t<this._intersectionVertices.length;t++){if(i.Vector3.distance(this._intersectionVertices[t].position,e)<s.KERNEL_TOLERANCE)return t;for(var r=0;r<this._intersectionVertices[t].mergedPositions.length;r++)if(i.Vector3.distance(this._intersectionVertices[t].mergedPositions[r],e)<s.KERNEL_TOLERANCE)return t}},O.prototype._findVertexOnSweepLine=function(e){for(var t=this._workspace,r=0,o=t.sweepLineIntersections.length-1;o>=r;){if(r+1>=o)return r;var i=Math.floor((r+o)/2);this._isVertexAboveEdgeSegment(t.sweepLineIntersections[i],e)?r=i:o=i}console.error(\"Error in binary search function!\")},O.prototype._isVertexAboveEdgeSegment=function(e,t){if(e===-1/0)return!0;if(e===1/0)return!1;var r=e.originalEdge;switch(r.getCurveType()){case s.GEOMETRY_TYPES.LINE:var o=r.getStartVertex().getPosition(),n=i.Vector3.createFloat64();i.Vector3.subtract(n,r.getEndVertex().getPosition(),o);var a=i.Vector3.createFloat64();return i.Vector3.subtract(a,t.position,o),(n[0]<0||0===n[0]&&n[1]<0)&&i.Vector3.negate(n,n),a[1]*n[0]-a[0]*n[1]>0;case s.GEOMETRY_TYPES.CIRCLE:var c=t.position[0]-r.getCurve().getCenter()[0],u=.5*(e.parameterRange[0]+e.parameterRange[1]),l=r.getCurve().evaluateDtt(u)[1]>0?-1:1;return Math.abs(c)>r.getCurve().getRadius()?r.getCurve().getCenter()[1]<t.position[1]:r.getCurve().getCenter()[1]+l*Math.sqrt(r.getCurve().getRadius()*r.getCurve().getRadius()-c*c)<t.position[1];default:return this.getYvalueForX(e,t.position[0])<t.position[1]}},O.prototype._makeEdgeXMonotone=function(e,t){var r=e.getCurve(),o=[];switch(e.getCurveType()){case s.GEOMETRY_TYPES.LINE:break;case s.GEOMETRY_TYPES.CIRCLE:var a=r.evaluatePosition(0);i.Vector3.subtract(a,a,r.getCenter());var c=r.getNormal()[2]>0?-1:1;o[0]=c*Math.atan2(a[1],a[0]),o[1]=o[0]-Math.PI;break;case s.GEOMETRY_TYPES.ELLIPSE:var u=r.getMajorAxis()[0]*r.getMajorRadius(),l=r.getMinorAxis()[0]*r.getMinorRadius();o[0]=Math.atan2(l,u),o[1]=o[0]-Math.PI;break;case s.GEOMETRY_TYPES.BCURVE:o=y.SplineCurveHelper.extremalParams(r,0);break;default:console.warn(\"Unsupported edge type in sketch region op\")}for(var h=0;h<o.length;h++){var d=o[h];e.isReversed()&&(d=-d),r.isPeriodicUnlimited()&&(d=(0,n.adjustParameterToPeriodicRange)(d,e.getRange(),r.getPeriodUnlimited())),d>=e.t0()&&d<=e.t1()&&(t.push({param:d,atVertex:null,temporary:!0}),P.DebugUtils.level(\"region3D\")>0&&P.DebugUtils.drawPoint3D(e.evaluatePosition(d),{color:16711935,label:\"x monotonic\"}))}},O.prototype.plotSegments=function(e,t){var r=this._workspace;b.hold(\"on\"),b.clearFigure(),b.delayUpdates(!0);for(var o=0;o<this._intersectionVertices.length;o++){var n=b.plotColorForIndex(this._intersectionVertices[o].adjacentEdges.length);if(\"sweepLineState\"===e&&(n=\"k\",this._intersectionVertices[o]===r.currentVertex&&(n=\"g\"),this._intersectionVertices[o]===r.nextVertex&&(n=\"b\")),b.plot([this._intersectionVertices[o].position],n+\"o\"),\"orderColored\"===e)for(var s=this._intersectionVertices[o],a=[],c=0;c<s.adjacentEdges.length;c++){n=b.plotColorForIndex(c);var u=s.adjacentEdges[c],l=T.default.clone(u.parameterRange);u.startVertex!==s||a[u.index]?l[0]=.5*(l[0]+l[1]):l[1]=.5*(l[0]+l[1]),a[u.index]=!0;var h=u.originalEdge.tessellate(l).positions;b.plot(h,n+\"-\")}}if(\"orderColored\"!==e)for(o=0;o<this._edgeSegments.length;o++){u=this._edgeSegments[o];if(\"coincidenceCount\"===e){var d=u.coincidentRanges.length+1;n=b.plotColorForIndex(d)}else n=b.plotColorForIndex(o);\"sweepLineState\"===e&&(n=r.sweepLineIntersections.indexOf(u)>-1?\"r\":\"k\"),t&&t.highlightLoop&&(n=T.default.contains(t.highlightLoop,u)?\"R\":\"k\");h=u.originalEdge.tessellate(u.parameterRange).positions;if(\"regions\"===e){var p=[],g=[];for(c=0;c<h.length;c++){if(c<h.length-1){var f=i.Vector3.createFloat64();i.Vector3.subtract(f,h[c+1],h[c])}else{f=i.Vector3.createFloat64();i.Vector3.subtract(f,h[c],h[c-1])}i.Vector3.normalize(f,f),i.Vector3.scale(f,f,.05),i.Vector3.cross(f,[0,0,1],f);var v=i.Vector3.clone(h[c]);p.push(i.Vector3.add(v,v,f));var _=i.Vector3.clone(h[c]);g.push(i.Vector3.subtract(_,_,f))}var y=u.adjacent[this.SIDE.LEFT].face.index;n=b.plotColorForIndex(y);b.plot(p,n+\"-\");var m=u.adjacent[this.SIDE.RIGHT].face.index;n=b.plotColorForIndex(m);b.plot(g,n+\"-\")}else b.plot(h,n+\"-\")}if(\"sweepLineState\"===e&&r.sweepLinePosition){var E=r.sweepLinePosition,x=void 0;for(o=0;o<r.sweepLineIntersections.length;o++){var R=0,A=r.sweepLineIntersections[o];if(void 0!==(R=A===1/0?5:A===-1/0?-5:this.getYvalueForX(A,E))){if(b.plot([E],[R],\"y.\"),void 0!==x){n=b.plotColorForIndex(r.sweepLineRegions[o-1].index);b.plot([E,E],[x,R],n+\"-\")}x=R}}}if(t&&t.showOrientation){h=[];var P=[],V=[];for(o=0;o<this._edgeSegments.length;o++){var C=!(void 0===(u=this._edgeSegments[o]).loopsCurveAligned||!0===u.loopsCurveAligned),O=C?.05:.95,L=u.parameterRange[0]*(1-O)+u.parameterRange[1]*O,S=u.originalEdge.evaluatePosition(L);h.push(S);var M=t.arrowSize||.1,w=C?-M:M;if(u.adjacent[this.SIDE.LEFT].face.index>=0){var N=u.originalEdge.evaluateDt(L);i.Vector3.normalize(N,N);var F=[S[0]-M*N[1],S[1]+M*N[0]];P.push(F),V.push([w*N[0],w*N[1]])}if(u.adjacent[this.SIDE.RIGHT].face.index>=0){var I=u.parameterRange[0]*O+u.parameterRange[1]*(1-O),D=u.originalEdge.evaluatePosition(I),j=u.originalEdge.evaluateDt(I);i.Vector3.normalize(j,j);var B=[D[0]+M*j[1],D[1]-M*j[0]];P.push(B),V.push([-w*j[0],-w*j[1]])}}b.plot(h,\"k.\"),b.quiver(P,V,\"g\",\"c\")}b.delayUpdates(!1),b.equalAxis()},O.prototype.plotEdgeSegment=function(e,t){b.plotEdgeList([e.originalEdge],!1,t+\"-\",{ranges:[e.parameterRange]})},O.prototype.plotEdgesAroundVertex=function(e,t){b.plot([e.position],\"gx\");for(var r=0;r<e.adjacentEdges.length;r++){var o,i=e.adjacentEdges[r];console.log(r),o=i.startVertex===e?[i.parameterRange[0],i.parameterRange[0]+t/i.originalEdge.getCurve().tangentLength(i.parameterRange[0])]:[i.parameterRange[1]-t/i.originalEdge.getCurve().tangentLength(i.parameterRange[0]),i.parameterRange[1]],b.plotEdgeList([i.originalEdge],!1,\"-\"+b.plotColorForIndex(r),{ranges:[o],showOrientation:!1,resolution:1e4})}},O.prototype.getYvalueForX=function(e,t){var r=e.parameterRange[0],o=e.parameterRange[1],i=e.originalEdge.evaluatePosition(r),n=e.originalEdge.evaluatePosition(o),a=i[0],c=n[0];if(a>c){var u=r;r=o,o=u,u=a,a=c,c=u,u=i,i=n,n=u}if(t<=a+s.KERNEL_TOLERANCE||t>=c-s.KERNEL_TOLERANCE)return Math.abs(t-a)<=s.KERNEL_TOLERANCE?i[1]:Math.abs(t-c)<=s.KERNEL_TOLERANCE?n[1]:void console.warn(\"Failure in getYvalueForX, in_x oustide segment range, returning undefined\");for(;c>=a;){if(a+s.KERNEL_TOLERANCE>=c)return h[1];var l=(r+o)/2,h=e.originalEdge.evaluatePosition(l);if(Math.abs(r-o)<=s.PARAMETER_SPACE_TOLERANCE)return A.ConsoleUtils.assert(!1,\"Could not converge to a solution for getYvalueForX\"),h[1];h[0]<t?(a=h[0],r=l):(c=h[0],o=l)}console.warn(\"Failure in getYvalueForX, returning undefined\")},O.prototype._computeAngleAndPositionForEdge=function(e,t,r){var o=t.adjacentEdges[e],n=o.startVertex===t,s=o.parameterRange[n?0:1];if(void 0!==r&&((s=s+(n?1:-1)*r)<o.parameterRange[0]||s>o.parameterRange[1]))return;var a=i.Vector3.createFloat64();return i.Vector3.normalize(a,o.originalEdge.evaluateDt(s)),n||i.Vector3.negate(a,a),{angle:Math.atan2(a[1],a[0]),position:o.originalEdge.evaluatePosition(s)}},O.prototype._computeEdgeDirectionAtVertex=function(e,t,r){var o=t.adjacentEdges[e.index],n=o.startVertex===t,s=o.parameterRange[n?0:1],a=s+(n?1:-1)*r/i.Vector3.length(o.originalEdge.evaluateDt(s)),c=o.originalEdge.evaluatePosition(a),u=i.Vector3.subtract(c,c,t.position);return Math.atan2(u[1],u[0])},O.prototype._prepareResult=function(){var e=new m.TopologyCloner;this._finalFaces=e.cloneFaces(this._faces),this._internalToFinalMap=e.getProgenitorMap(),this._progenitorMap=new E.ProgenitorMap;for(var t=e.getProgenitorMap().getAllNewTopology(),r=0;r<t.length;r++){var o=t[r],i=e.getProgenitorMap().getProgenitors(o)[0],n=void 0;if(o.getTopologyType()===s.TOPOLOGY_TYPES.FACE)n=new Set,i.collectEdges().forEach((function(e){e.getAssociatedEntities().forEach((function(e){n.add(e)}))})),n=Array.from(n);else(o.getTopologyType()===s.TOPOLOGY_TYPES.EDGE||o.getTopologyType()===s.TOPOLOGY_TYPES.VERTEX)&&(n=i.getAssociatedEntities());n&&this._progenitorMap.addEntry(o,n)}this._sketchSummary={regionFaces:[],regionEdges:[],regionVertices:[],sketchEdges:{}};for(var a=T.default.keys(this._sketchRegionTopologies),c=0;c<a.length;c++){var u=this._sketchRegionTopologies[a[c]].topology;u instanceof x.RegionTopologyFace?this._sketchSummary.regionFaces.push(u):u instanceof x.RegionTopologyEdge?this._sketchSummary.regionEdges.push(u):u instanceof x.RegionTopologyVertex?this._sketchSummary.regionVertices.push(u):A.ConsoleUtils.assert(!1)}for(var l=0;l<this._sketchEdges.length;l++){var h=this._sketchEdges[l];this._sketchSummary.sketchEdges[h.getGuid()]=h}},O.prototype.getFaces=function(){return this._finalFaces},O.prototype.getRegionTopologyFaces=function(){return this._faces},O.prototype.getProgenitorMap=function(){return this._progenitorMap},O.prototype.createFaceRecipe=function(e){var t=this._finalFaces.indexOf(e);if(t<0)return\"\";var r=this._faces[t],o=(0,R.createRecipeFromRegionFace)(r,this._sketchSummary);return(0,R.serializeRegionFaceRecipe)(o)},O.prototype.matchFaceRecipe=function(e){for(var t=(0,R.deserializeRegionFaceRecipe)(e),r=(0,R.matchRegionFaceRecipe)(t,this._sketchSummary),o=[],i=0;i<r.regions.length;i++){var n=this._faces.indexOf(r.regions[i]);A.ConsoleUtils.assert(n>=0),o.push(this._finalFaces[n])}return o},O.prototype.createEdgeRecipe=function(e){var t=this._internalToFinalMap.getProgenitors(e);if(!t||1!==t.length)return\"\";var r=(0,R.createRecipeFromRegionEdge)(t[0],this._sketchSummary);return(0,R.serializeRegionEdgeRecipe)(r)},O.prototype.matchEdgeRecipe=function(e){for(var t=(0,R.deserializeRegionEdgeRecipe)(e),r=(0,R.matchRegionEdgeRecipe)(t,this._sketchSummary),o=[],i=0;i<r.edges.length;i++){var n=this._internalToFinalMap.getDescendants(r.edges[i]);A.ConsoleUtils.assert(1===n.length),o.push(n[0])}return o},t.SketchRegionSolver=O},9324:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Attribute=void 0;var o=r(40);const i={\"autodesk.brep:nmiattributestr-1.0.0\":\"nmiattributestr\",\"autodesk.brep:nmiattributearr-1.0.0\":\"nmiattributearr\",\"autodesk.brep:textattribute-1.0.0\":\"textattribute\"};var n=function(e,t){o.Base.call(this),this._topologies=[],this.typeid=e,this.values=t||{}};(n.prototype=Object.create(o.Base.prototype)).getValues=function(){return this.values},n.prototype.getTypeid=function(){return this.typeid},n.prototype.getTopologies=function(){return this._topologies},n.prototype.addTopology=function(e){this._topologies?this._topologies.push(e):this._topologies=[e]},n.prototype.removeTopology=function(e){var t=this._topologies.indexOf(e);return t>-1&&(this._topologies.splice(t,1),!0)},n.prototype.toObject=function(){return this.values},n.prototype.addToModelObject=function(e){if(!e.attributes[this.getGuid()]){const t=i[this.typeid];if(t){const r={};r[t]=this.toObject(),e.attributes[this.getGuid()]=r}else console.warn(\"Attribute.addToModelObject : Unknown attribute type for proto object!\")}},t.Attribute=n},40:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Base=void 0;var o=r(6704);const i=r(8032).Autodesk.lookup(\"SolidDef.paramrange_1_0_0.typeEnum\");var n=function(){this._guid=\"\"};n.prototype.setGuid=function(e){this._guid=e},n.prototype.getGuid=function(){return this._guid||(this._guid=(0,o.generateGUID)()),this._guid},n.prototype.refsToStrings=function(e){if(e){const t=new Array(e.length);for(let r=0;r<e.length;++r)t[r]=e[r].getGuid();return t}return[]},n.prototype.refToString=function(e){return e?e.getGuid():\"\"},n.prototype.toObject=function(){return console.warn(\"Base.toObject : abstract method invoked!\"),{}},n.prototype.vectorToObject=function(e){return{x:e[0],y:e[1],z:e[2]}},n.prototype.rangeToObject=function(e,t){var r=1,o=0;t&&void 0!==e&&2===e.length&&isFinite(e[0])&&isFinite(e[1])&&(r=e[0],o=e[1]);var n=r<=o?\"finite\":\"infinite\";return{low:r,high:o,type:i.values[n]}},n.prototype.addToModelObject=function(e){console.warn(\"Base.addToModelObject : abstract method invoked!\")},t.Base=n},9024:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.BaseGeometry=void 0;var o=r(40),i=r(2468),n=function(){o.Base.call(this)};(n.prototype=Object.create(o.Base.prototype)).getGeometryType=function(){console.warn(\"BaseGeometry.getGeometryType : abstract method invoked!\")},n.prototype.clone=function(){console.warn(\"BaseGeometry.clone : abstract method invoked\")},n.prototype.copy=function(e){this._guid=\"\"},n.prototype.addToModelObject=function(e){if(!e.geometries[this.getGuid()]){const t={};t[i.GEOMETRY_TYPES.toString(this.getGeometryType()).toLowerCase()]=this.toObject(),e.geometries[this.getGuid()]=t}},t.BaseGeometry=n},9547:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.BaseTopology=void 0;var o=r(40),i=r(2468),n=function(){o.Base.call(this),this._attributes=[]};(n.prototype=Object.create(o.Base.prototype)).getTopologyType=function(){console.warn(\"BaseTopology.getTopologyType : abstract method invoked!\")},n.prototype.getBoundingBox=function(){console.warn(\"BaseTopology.getBoundingBox : abstract method invoked!\")},n.prototype.getBody=function(){console.warn(\"BaseTopology.getBody : abstract method invoked!\")},n.prototype.collectFaces=function(e){return console.warn(\"BaseTopology.collectFaces : abstract method invoked!\"),e||new Set},n.prototype.collectEdges=function(e){return console.warn(\"BaseTopology.collectEdges : abstract method invoked!\"),e||new Set},n.prototype.collectVertices=function(e){return console.warn(\"BaseTopology.collectVertices : abstract method invoked!\"),e||new Set},n.prototype.getAttributes=function(){return this._attributes},n.prototype.addAttribute=function(e){this._attributes?this._attributes.push(e):this._attributes=[e],e.addTopology(this)},n.prototype.removeAttribute=function(e){var t=this._attributes.indexOf(e);return t>-1&&(this._attributes.splice(t,1),e.removeTopology(this),!0)},n.prototype.removeAllAttributes=function(){if(this._attributes)for(let e=0;e<this._attributes.length;e++)this.removeAttribute(this._attributes[e])},n.prototype.isVertex=function(){return this.getTopologyType()===i.TOPOLOGY_TYPES.VERTEX},n.prototype.getFaces=function(){return Array.from(this.collectFaces())},n.prototype.getEdges=function(){return Array.from(this.collectEdges())},n.prototype.getVertices=function(){return Array.from(this.collectVertices())},n.prototype.addAllToModelObject=function(e,t){if(!e.topologies[this.getGuid()]){const t={};t[i.TOPOLOGY_TYPES.toString(this.getTopologyType()).toLowerCase()]=this.toObject(),e.topologies[this.getGuid()]=t}t.forEach((t=>{null!=t&&(Array.isArray(t)?t.forEach((t=>{t.addToModelObject(e)})):t.addToModelObject(e))}))},t.BaseTopology=n},8796:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.BCurve=void 0;var o=r(1972),i=r(3344),n=r(2355),s=r(2468),a=r(1472),c=r(1096),u=r(5896),l=r(1e3),h=r(4728),d=r(6120),p=r(4336),g=r(5416),f=r(3888),v=r(48),_=r(6200),y=r(5564),m=function(){a.Curve.call(this),this._controlPoints=[],this._weights=[],this._degree=0,this._knots=[],this._isRational=void 0,this._isPeriodic=void 0,this._isClosed=void 0,this._isPlanarXY=void 0,this._discretizationCache=void 0,this._segments=void 0,this._hasDirtySegments=!0,this._isDirtyControlPoint=[],this._tessellationCache=new p.TessellationCache};(m.prototype=Object.create(a.Curve.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.BCURVE},m.prototype.clone=function(){var e=new m;return e.copy(this),e},m.prototype.getControlPointsVector3=function(){for(var e=new Array(this._controlPoints.length/3),t=0;t<this._controlPoints.length/3;t++)e[t]=o.Vector3.createFloat64FromValues(this._controlPoints[3*t],this._controlPoints[3*t+1],this._controlPoints[3*t+2]);return e},m.prototype.copy=function(e){a.Curve.prototype.copy.call(this,e),this._isRational=e._isRational,this._weights=e._weights.slice(0),this._degree=e._degree,this._knots=e._knots.slice(0),this._isPeriodic=e._isPeriodic,this._isClosed=e._isClosed,this._weights=e._weights.slice(0),this._controlPoints=e._controlPoints.slice(0),this._isPlanarXY=e._isPlanarXY,this._hasDirtySegments=!0,this._tessellationCache.reset()},m.prototype.set=function(e,t,r,i){this.dirtyCurveRepresentation(),this._weights=Array.prototype.slice.call(t),this._degree=r;var n=0;if(this._isRational=!1,this._weights.length!==t.length){this._weights=Array.prototype.slice.call(t);var s=this._weights[0];for(n=1;n<this._weights.length;++n)if(Math.abs(this._weights[n]-s)>o.FLOAT64_TOLERANCE){this._isRational=!0;break}}else{s=this._weights[0];for(n=1;n<this._weights.length;++n)this._weights[n]=t[n],Math.abs(this._weights[n]-s)>o.FLOAT64_TOLERANCE&&(this._isRational=!0)}if(this._knots.length!==i.length)this._knots=Array.prototype.slice.call(i);else for(n=0;n<this._knots.length;++n)this._knots[n]=i[n];var a=e.length/3;if(0===this._weights.length)for(this._weights=new Array(a),n=0;n<a;++n)this._weights[n]=1;if(this._controlPoints.length!==e.length)this._controlPoints=Array.prototype.slice.call(e);else for(n=0;n<e.length;++n)this._controlPoints[n]=e[n];this._isDirtyControlPoint.length!==a&&(this._isDirtyControlPoint=new Array(a)),this._isDirtyControlPoint.fill(!1)},m.prototype.dirtyCurveRepresentation=function(){this._isPlanarXY=void 0,this._isRational=void 0,this._isClosed=void 0,this._isPeriodic=void 0,this._discretizationCache=void 0,this._hasDirtySegments=!0,this._tessellationCache.setDirty(!0)},m.prototype.hasDirtyTessellation=function(){return this._tessellationCache.isDirty()},m.prototype.getTessellationCacheTolerance=function(){return this._tessellationCache.getTolerance()},m.prototype.weightedControlPoints=function(){for(var e=[],t=0;t<this._controlPoints.length/3;++t){var r=this._weights[t];e.push(this._controlPoints[3*t]*r,this._controlPoints[3*t+1]*r,this._controlPoints[3*t+2]*r,r)}return e},m.prototype.getControlPoints=function(){return this._controlPoints},m.prototype._findChangedControlPoints=function(e){var t=e.length===this._controlPoints.length;t||(this._isDirtyControlPoint=new Array(e.length/3),this._isDirtyControlPoint.fill(!0));for(var r=0;r<e.length/3;++r)if(t){var o=e[3*r]-this._controlPoints[3*r],i=e[3*r+1]-this._controlPoints[3*r+1],n=e[3*r+2]-this._controlPoints[3*r+2];o*o+i*i+n*n>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE&&(this._isDirtyControlPoint[r]=!0)}else this._isDirtyControlPoint[r]=!0},m.prototype.setControlPoints=function(e){this._findChangedControlPoints(e),this._controlPoints=e,this.dirtyCurveRepresentation()},m.prototype.copyControlPoints=function(e){if(this._findChangedControlPoints(e),e!==this._controlPoints){this._controlPoints.length=e.length;for(var t=0;t<e.length;++t)this._controlPoints[t]=e[t]}this.dirtyCurveRepresentation()},m.prototype.transform=function(e){for(var t=[],r=o.Vector3.createFloat64(),i=0;i<this._controlPoints.length;i+=3)o.Vector3.set(r,this._controlPoints[i],this._controlPoints[i+1],this._controlPoints[i+2]),o.Vector3.transformMatrix44(r,r,e),t.push(r[0],r[1],r[2]);this.setControlPoints(t)},m.prototype.getControlPointPosition=function(e){return o.Vector3.createFloat64FromValues(this._controlPoints[3*e],this._controlPoints[3*e+1],this._controlPoints[3*e+2])},m.prototype.extendBBoxFromControlPoints=function(e){for(var t=o.Vector3.createFloat64(),r=0;r<this._controlPoints.length;r+=3)o.Vector3.set(t,this._controlPoints[r],this._controlPoints[r+1],this._controlPoints[r+2]),e.includePoint(t)},m.prototype.setControlPointPosition=function(e,t,r,o){this._controlPoints[3*e]=t,this._controlPoints[3*e+1]=r,this._controlPoints[3*e+2]=o,this._isDirtyControlPoint[e]=!0,this.dirtyCurveRepresentation()},m.prototype.getWeights=function(){return this._weights},m.prototype.setWeights=function(e){this._weights=e,this.dirtyCurveRepresentation()},m.prototype.getKnotVector=function(){return this._knots},m.prototype.setKnotVector=function(e){this._knots=e,this.dirtyCurveRepresentation()},m.prototype.getDegree=function(){return this._degree},m.prototype.isRational=function(){if(void 0===this._isRational&&(this._isRational=!1,this._weights))for(var e=this._weights[0],t=0;t<this._weights.length;++t)if(Math.abs(this._weights[t]-e)>o.FLOAT64_TOLERANCE)return this._isRational=!0,!0;return this._isRational},m.prototype.isSimpleBezier=function(){return this._knots.length===2*this._degree+2},m.prototype.getNumControlPoints=function(){return this._controlPoints.length/3},m.prototype.getTessellationCache=function(){return this._tessellationCache.getCache()},m.prototype.getEvaluationCache=function(){return void 0===this._discretizationCache&&this.evaluate(),this._discretizationCache},m.prototype.getRangeUnlimited=function(){return[this._knots[0],this._knots[this._knots.length-1]]},m.prototype.isPeriodicUnlimited=function(){return this._checkClosure(),this._isPeriodic},m.prototype.isClosedUnlimited=function(){return this._checkClosure(),this._isClosed},m.prototype._checkClosure=function(){if(void 0===this._isClosed||void 0===this._isPeriodic){this._isClosed=this._isPeriodic=!1;var e=this.getRangeUnlimited(),t=this.evaluatePosition(e[0]),r=this.evaluatePosition(e[1]);if(o.Vector3.equals(t,r,s.KERNEL_TOLERANCE)){this._isClosed=!0;var i=this.evaluateDt(e[0]),n=this.evaluateDt(e[1]);o.Vector3.isParallel(i,n,1,s.KERNEL_ANGULAR_TOLERANCE)&&(this._isPeriodic=!0)}}},m.prototype.getBezierSegments=function(){return this._decomposeCurve(),this.isSimpleBezier()?[this]:this._segments},m.prototype.isPlanarXY=function(){if(void 0===this._isPlanarXY){var e=s.SPLINE_DISTANCE_TOLERANCE;this._isPlanarXY=!0;for(var t=1/0,r=-1/0,o=2;o<this._controlPoints.length;o+=3)t=Math.min(t,this._controlPoints[o]),r=Math.max(r,this._controlPoints[o]);Math.abs(r-t)>2*e&&(this._isPlanarXY=!1)}return this._isPlanarXY},m.prototype.getBezierSegmentsInRange=function(e,t){for(var r=this.getBezierSegments(),o=e||this._knots[0],i=t||this._knots[this._knots.length-1],n=[],s=0;s<r.length;++s){var a=r[s].getKnotVector();o<=a[a.length-1]&&a[0]>=i&&n.push(r[s])}return n},m.prototype.getApproxParameterSpaceTolerance=function(){if(12===this.getControlPoints().length)return g.SplineCurveHelper.getApproxBezierParameterSpaceTolerance(this.getBoundingBox(),s.KERNEL_TOLERANCE);this._decomposeCurve();for(var e=0,t=0;t<this._segments.size();++t)e+=g.SplineCurveHelper.getApproxBezierParameterSpaceTolerance(this._segments[t].getBoundingBox(),s.KERNEL_TOLERANCE);return e},m.prototype.getArcLength=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());for(var t=this._restrictRangeToUnlimited(e),r=0,i=this.getBezierSegments(),n=0;n<i.length;++n)for(var a=i[n],c=a.getRangeUnlimited(),u=0;u<t.length;++u){var h=[Math.max(c[0],t[u][0]),Math.min(c[1],t[u][1])];h[1]-h[0]>s.PARAMETER_SPACE_TOLERANCE&&(r+=(0,l.integrateFunction1D)((function(e){return o.Vector3.length(a.evaluateDt(e))}),h))}return r},m.prototype.getParameterFromArcLength=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());var r=this;return(0,l.invertIntegral1D)((function(e){return o.Vector3.length(r.evaluateDt(e))}),e,t)},m.prototype._decomposeCurve=function(){if(this._hasDirtySegments)if(this._hasDirtySegments=!1,this.isSimpleBezier())this._segments=void 0;else{var e;this._isDirtyControlPoint.length===this.getNumControlPoints()?e=(0,_.decomposeBCurveFlags)(this.getKnotVector(),this._isDirtyControlPoint):(this._isDirtyControlPoint=new Array(this.getNumControlPoints()),(e=new Array(this.getNumControlPoints())).fill(!0)),this._isDirtyControlPoint.fill(!1);var t=(0,_.decomposeBCurveToBezier)(this._knots,this._controlPoints,this.isRational()?this._weights:void 0);this._segments&&this._segments.length===t.P.length||(this._segments=[]);for(var r=0;r<t.P.length;++r)void 0===this._segments[r]&&(this._segments[r]=new m,e[r]=!0),e[r]&&this._segments[r].set(t.P[r],t.w?t.w[r]:new Array(2*this._degree+2).fill(1),this._degree,t.U[r])}},m.prototype.evaluatePosition=function(e){this.isPeriodicUnlimited()&&(e=(0,u.normalizeParameterToShiftedRange)(e,[this._knots[0],this._knots[this._knots.length-1]]));var t=this.isRational()?this._weights:void 0;return(0,v.evaluateBCurvePoint)(e,this._degree,this._knots,this._controlPoints,t)},m.prototype.evaluateDt=function(e){this.isPeriodicUnlimited()&&(e=(0,u.normalizeParameterToShiftedRange)(e,[this._knots[0],this._knots[this._knots.length-1]]));var t=this.isRational()?this._weights:void 0;return(0,v.evaluateBCurveDerivs)(e,1,this._degree,this._knots,this._controlPoints,t)[1]},m.prototype.closestToRayParam=function(e,t,r,i){if(!(this._controlPoints.length<9)){if(this.isPlanarXY()){var n=t[2],a=o.Vector3.createFloat64();if(Math.abs(n)<s.KERNEL_ANGULAR_TOLERANCE)o.Vector3.copy(a,e);else{var c=(this._controlPoints[2]-e[2])/n;o.Vector3.add(a,o.Vector3.scale(a,t,c),e)}return this.closestToPointParam(a)}d.DebugUtils.warn(\"BCurve.closestToRayParam() only defined for planar curves\")}},m.prototype.closestToPointParam=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());for(var r=this._restrictRangeToUnlimited(t),i=o.FLOAT64_TOLERANCE,n=this.getBezierSegments(),s=(0,y.closestBCurveSegments)(e,n,void 0,r),a=Number.POSITIVE_INFINITY,c=void 0,l=0;l<s.length;++l)if(!(s[l].minDistSqr>a))for(var h=n[s[l].index],d=h.getRangeUnlimited(),p=0;p<r.length;++p){var g=[Math.max(d[0],r[p][0]),Math.min(d[1],r[p][1])];if(!(g[1]-g[0]<=o.FLOAT64_TOLERANCE)){var f=h.getEvaluationCache(),v=(0,u.closestPointToPolyline)(e,f.points,f.offset,g),_=(0,y.relaxBCurveToPerpendicular)(this._knots,this._controlPoints,this.isRational()?this._weights:void 0,e,v,g,i,32),m=h.evaluatePosition(_),E=o.Vector3.squaredDistance(m,e);E<a&&(a=E,c=_);var x=h.evaluatePosition(g[0]),R=o.Vector3.squaredDistance(x,e);R<a&&(a=R,c=g[0]);var A=h.evaluatePosition(g[1]),P=o.Vector3.squaredDistance(A,e);P<a&&(a=P,c=g[1])}}return this.isPeriodicUnlimited()&&(c=(0,u.foldNearTo)(c,.5*(t[0]+t[1]),this.getPeriodUnlimited())),c},m.prototype.evaluate=function(){var e=this.getBezierSegments();if(e[0]===this)void 0===this._discretizationCache&&(this._discretizationCache=g.SplineCurveHelper.evaluateCurve(this.getDegree(),this.getKnotVector(),this.getControlPoints(),this.getWeights(),!0));else for(var t=0;t<e.length;++t){var r=e[t];void 0===r._discretizationCache&&(r._discretizationCache=g.SplineCurveHelper.evaluateCurve(r.getDegree(),r.getKnotVector(),r.getControlPoints(),r.getWeights(),!0))}},m.prototype._getFullTessellation=function(e){var t,r,i=this.getBezierSegments(),n=0,s=!1;if(i[0]===this){s=!0;var a=p.CurveTessellator.getAdaptiveRenderPoints(this,e,this.getRangeUnlimited());t=a.positions,r=a.params,n=Math.max(n,a.tolerance)}else{t=[],r=[];for(var c=0;c<i.length;++c){var u=i[c];if(u.hasDirtyTessellation()||u.getTessellationCacheTolerance()>e+o.FLOAT64_TOLERANCE){s=!0;var l=p.CurveTessellator.getAdaptiveRenderPoints(u,e,u.getRangeUnlimited());u._tessellationCache.setCache(l),n=Math.max(n,l.tolerance)}u._tessellationCache&&(0===c?(t.push.apply(t,u._tessellationCache.getCache().positions),r.push.apply(r,u._tessellationCache.getCache().params)):(t.push.apply(t,u._tessellationCache.getCache().positions.slice(1)),r.push.apply(r,u._tessellationCache.getCache().params.slice(1))))}}return{positions:t,params:r,didRetessellate:s,tolerance:n}},m.prototype.tessellate=function(e,t){return t=t||s.TESSELLATION.LINEAR_PRECISION,this._tessellationCache.getTessellation(e,this,t,this._getFullTessellation.bind(this))},m.prototype.getBoundingBox=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=this._restrictRangeToUnlimited(e),r=new i.BoundingBox,o=this.getRangeUnlimited();if(t[0][0]<o[0]+s.PARAMETER_SPACE_TOLERANCE&&t[0][1]>o[1]-s.PARAMETER_SPACE_TOLERANCE)this.extendBBoxFromControlPoints(r);else for(var n=this.getBezierSegments(),a=0;a<t.length;a++)for(var c=0;c<n.length;c++){var u=n[c];(u=u._getSubset(t[a][0],t[a][1]))&&u.extendBBoxFromControlPoints(r)}return r},m.prototype.getTangentCone=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=this.evaluatePosition(e[0]),r=this.evaluatePosition(e[1]);o.Vector3.sub(r,r,t),o.Vector3.squaredLength(r)<.01*s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE&&(r=this.evaluateDt(.5*(e[0]+e[1]))),o.Vector3.normalize(r,r);for(var i=new n.TangentCone(r,0),a=this._restrictRangeToUnlimited(e),c=o.Vector3.createFloat64FromValues(0,0,0),u=this.getBezierSegments(),l=0;l<a.length;l++)for(var h=0;h<u.length;h++){var d=u[h];if(d=d._getSubset(a[l][0],a[l][1]))for(var p=d._controlPoints,g=0;g<p.length-3;g+=3)c[0]=p[g+3]-p[g],c[1]=p[g+4]-p[g+1],c[2]=p[g+5]-p[g+2],o.Vector3.dot(c,r)>=0?i.includeVector(c):i.angle=Math.PI}return i},m.prototype._getSubset=function(e,t){var r;if(this.isPeriodicUnlimited())return t-e>this.getPeriodUnlimited()-s.PARAMETER_SPACE_TOLERANCE?this:((r=this.clone())._periodicTrimToParams(e,t),r);var o=this.getRangeUnlimited();return e>o[1]-s.PARAMETER_SPACE_TOLERANCE||t<o[0]+s.PARAMETER_SPACE_TOLERANCE?void 0:e<o[0]+s.PARAMETER_SPACE_TOLERANCE&&t>o[1]-s.PARAMETER_SPACE_TOLERANCE?this:(r=this.clone(),e>o[0]+s.PARAMETER_SPACE_TOLERANCE&&r.trimToParam(!0,e),t<o[1]-s.PARAMETER_SPACE_TOLERANCE&&r.trimToParam(!1,t),r)},m.prototype._periodicTrimToParams=function(e,t){h.ConsoleUtils.assert(this._isPeriodic);var r=this.getRangeUnlimited(),o=(0,u.normalizeParametricRangeToShiftedRange)([e,t],r);if(o[1]>r[1])this._isClosed=this._isPeriodic=!1,this.trimToParam(!0,o[1]-(r[1]-r[0]),void 0),this.trimToParam(!1,o[0],void 0);else{var i,n,s=this.getControlPoints(),a=this.getKnotVector(),c=this.getWeights(),l=this.getDegree(),d=this.getPeriodUnlimited(),p=[],f=a.slice(),v=a.slice(),_=[];for(n=0;n<s.length/3;++n)p[4*n+0]=s[3*n+0]*c[n],p[4*n+1]=s[3*n+1]*c[n],p[4*n+2]=s[3*n+2]*c[n],p[4*n+3]=c[n];for(i=p.slice(),g.SplineCurveHelper.extractCurveSegment(l,o[1],r[1],f,p),g.SplineCurveHelper.extractCurveSegment(l,r[0],o[0],v,i),n=0;n<v.length;++n)v[n]=v[n]+d;g.SplineCurveHelper.joinCurves(l,f,p,v,i);var y=p.length/4,m=[];for(_.length=y,m.length=3*y,n=0;n<y;++n){var E=p[4*n+3];m[3*n]=p[4*n]/E,m[3*n+1]=p[4*n+1]/E,m[3*n+2]=p[4*n+2]/E,_[n]=E}this.set(m,_,l,f),this._isClosed=this._isPeriodic=!1}},m.prototype.trimToParam=function(e,t,r){if(this.isPeriodicUnlimited())return h.ConsoleUtils.assert(void 0!==r),void this._periodicTrimToParams(t,r);var o,i,n=this.getControlPoints(),s=this.getKnotVector(),a=this.getWeights(),c=this.getDegree(),u=[];for(o=0;o<n.length/3;++o)u[4*o+0]=n[3*o+0]*a[o],u[4*o+1]=n[3*o+1]*a[o],u[4*o+2]=n[3*o+2]*a[o],u[4*o+3]=a[o];var l=[],d=0,p=g.SplineCurveHelper.insertKnot(c,s,u,t,c),v=(0,f.findKnotSpan)(t,p.U);for(e?(p.U.splice(0,v-c+1,t),i=p.U.length-c-1,d=4*(p.Pw.length/4-i)):(p.U.splice(v+1,p.U.length,t),i=p.U.length-c-1),u.length=3*i,l.length=i,o=0;o<i;++o){var _=p.Pw[4*o+3+d];u[3*o]=p.Pw[4*o+0+d]/_,u[3*o+1]=p.Pw[4*o+1+d]/_,u[3*o+2]=p.Pw[4*o+2+d]/_,l[o]=_}this.set(u,l,c,p.U)},m.prototype.addControlPoint=function(e,t){var r=this.getControlPoints(),i=this.getNumControlPoints(),n=this.getKnotVector(),a=this.getWeights(),u=this.getDegree(),l=this.getControlPointPosition(e),h=this.getControlPointPosition(e+1),d=new c.Line;d.setFromEndpoints(l,h);var p=d.closestToPointParam(t),f=d.evaluatePosition(p),v=o.Vector3.distance(f,l),_=o.Vector3.distance(f,h),y=a[e]*v+a[e+1]*_;if(Math.abs(y)<s.KERNEL_TOLERANCE)console.warn(\"numerical error in addControlPoints -- coincident control points / negative weights?\");else{for(var m=a[e]*v/y,E=n[e+1]+m*(n[e+u+1]-n[e+1]),x=[],R=0;R<r.length/3;++R)x[4*R]=r[3*R]*a[R],x[4*R+1]=r[3*R+1]*a[R],x[4*R+2]=r[3*R+2]*a[R],x[4*R+3]=a[R];var A=g.SplineCurveHelper.findKnotMultiplicity(E,n),P=g.SplineCurveHelper.insertKnot(u,n,x,E,A+1),V=[];for(x.length=3*(i+1),V.length=i+1,R=0;R<=i;++R){var T=P.Pw[4*R+3];x[3*R]=P.Pw[4*R]/T,x[3*R+1]=P.Pw[4*R+1]/T,x[3*R+2]=P.Pw[4*R+2]/T,V[R]=T}this.set(x,V,u,P.U)}},m.prototype.addControlPointOnCurve=function(e){for(var t=this.getNumControlPoints(),r=Number.MAX_VALUE,i=-1,n=o.Vector3.createFloat64FromValues(0,0,0),s=o.Vector3.createFloat64FromValues(0,0,0),a=0;a<t-1;++a){n[0]=this._controlPoints[3*a+0],n[1]=this._controlPoints[3*a+1],s[0]=this._controlPoints[3*a+3],s[1]=this._controlPoints[3*a+4];var c=(0,u.distancePointToLineSegment)(n,s,e);c<r&&(r=c,i=a)}-1!==i&&this.addControlPoint(i,e)},m.prototype.makePeriodic=function(){if(!this.isPeriodicUnlimited()){for(var e=this.getControlPoints(),t=this.getKnotVector(),r=this.getWeights(),o=this.getDegree(),i=[],n=0;n<e.length/3;++n)i[4*n]=e[3*n]*r[n],i[4*n+1]=e[3*n+1]*r[n],i[4*n+2]=e[3*n+2]*r[n],i[4*n+3]=r[n];var s=t.slice();g.SplineCurveHelper.makePeriodic(o,s,i);var a=[],c=[],u=i.length/4;for(a.length=u,c.length=3*u,n=0;n<u;++n){var l=i[4*n+3];c[3*n]=i[4*n]/l,c[3*n+1]=i[4*n+1]/l,c[3*n+2]=i[4*n+2]/l,a[n]=l}this.set(c,a,o,s),this._isClosed=this._isPeriodic=!0}},m.prototype.suggestSplittingParam=function(e){var t,r=this.getKnotVector(),o=.5*(e[0]+e[1]),i=(0,u.sortedIndex)(r,o);if(0===i)t=r[i];else if(i===r.length)t=r[i-1];else{var n=r[i-1],s=r[i];t=o-n<s-o?n:s}return t>=e[0]&&t<=e[1]?t:void 0},m.prototype.toObject=function(){return{degree:this._degree,knots:this._knots,controlPoints:this._controlPoints,weights:this._weights,range:this.rangeToObject(this.getRange(),this.isLimited())}},t.BCurve=m},9984:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Body=void 0;var o=r(9547),i=r(2468),n=r(3344),s=r(7616),a=function(){o.BaseTopology.call(this),this._lumps=[]};(a.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.BODY},a.prototype.getLumps=function(){return this._lumps},a.prototype.setLumps=function(e){this._lumps=new Array(e.length);for(var t=0;t<e.length;++t)this._lumps[t]=e[t]},a.prototype.addLump=function(e){this._lumps?this._lumps.push(e):this._lumps=[e],e.setBody(this)},a.prototype.addLumps=function(e){this._lumps||(this._lumps=[]);for(var t=0;t<e.length;++t)e[t].setBody(this);this._lumps=this._lumps.concat(e)},a.prototype.removeLump=function(e){var t=this._lumps.indexOf(e);return t>-1&&(this._lumps.splice(t,1),e.getBody()===this&&e.setBody(void 0),!0)},a.prototype.getBody=function(){return this},a.prototype.collectFaces=function(e){e=e||new Set;for(var t=0;t<this._lumps.length;++t)this._lumps[t].collectFaces(e);return e},a.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._lumps.length;++t)this._lumps[t].collectEdges(e);return e},a.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._lumps.length;++t)this._lumps[t].collectVertices(e);return e},a.prototype.getBoundingBox=function(){for(var e=new n.BoundingBox,t=0;t<this._lumps.length;++t)e.include(this._lumps[t].getBoundingBox());return e},a.prototype.transform=function(e){(0,s.transformTopology)(this,e)},a.prototype.toObject=function(){return{lumps:this.refsToStrings(this._lumps),attributes:this.refsToStrings(this._attributes)}},a.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._lumps,this._attributes])},t.Body=a},92:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.BSurface=void 0;var o=r(1972),i=r(3344),n=r(2468),s=r(412),a=r(8796),c=r(5896),u=r(6824),l=r(6275),h=r(192),d=r(1288),p=r(880),g=r(4728),f=function(){s.Surface.call(this),this._uDegree=0,this._vDegree=0,this._uKnots=[],this._vKnots=[],this._controlPoints=[],this._weights=[],this._isClosedU=void 0,this._isClosedV=void 0,this._isPeriodicU=void 0,this._isPeriodicV=void 0,this._patches=void 0};(f.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.BSURFACE},f.prototype.clone=function(){var e=new f;return e.copy(this),e},f.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._uDegree=e._uDegree,this._vDegree=e._vDegree,this._uKnots=e._uKnots.slice(0),this._vKnots=e._vKnots.slice(0),this._controlPoints=e._controlPoints.slice(0),this._weights=e._weights.slice(0),this._clearCaches()},f.prototype.set=function(e,t,r,o,i,n){g.ConsoleUtils.assert(e>=1),this._uDegree=e,g.ConsoleUtils.assert(t>=1),this._vDegree=t,g.ConsoleUtils.assert(r.length>=2*(e+1)),this._uKnots=Array.prototype.slice.call(r),g.ConsoleUtils.assert(o.length>=2*(t+1)),this._vKnots=Array.prototype.slice.call(o);var s=r.length-e-1,a=o.length-t-1;g.ConsoleUtils.assert(i.length===3*s*a),this._controlPoints=Array.prototype.slice.call(i),n&&n.length>0?(g.ConsoleUtils.assert(n.length===s*a),this._weights=Array.prototype.slice.call(n)):this._weights=[],this._clearCaches()},f.prototype.getDegreeU=function(){return this._uDegree},f.prototype.getDegreeV=function(){return this._vDegree},f.prototype.setDegreeU=function(e){g.ConsoleUtils.assert(e>=1),this._uDegree=e,this._clearCaches()},f.prototype.setDegreeV=function(e){g.ConsoleUtils.assert(e>=1),this._vDegree=e,this._clearCaches()},f.prototype.getNumKnotsU=function(){return this._uKnots.length},f.prototype.getNumKnotsV=function(){return this._vKnots.length},f.prototype.getKnotsU=function(){return this._uKnots},f.prototype.getKnotsV=function(){return this._vKnots},f.prototype.setKnotsU=function(e){this._uKnots=e,this._clearCaches()},f.prototype.setKnotsV=function(e){this._vKnots=e,this._clearCaches()},f.prototype.getNumControlPointsU=function(){return this._uKnots.length-this._uDegree-1},f.prototype.getNumControlPointsV=function(){return this._vKnots.length-this._vDegree-1},f.prototype.getControlPoints=function(){return this._controlPoints},f.prototype.setControlPoints=function(e){this._controlPoints=e,this._clearCaches()},f.prototype.getWeights=function(){return this._weights},f.prototype.setWeights=function(e){e&&e.length>0?this._weights=e:this._weights=[],this._clearCaches()},f.prototype.isRational=function(){return this._weights.length>0},f.prototype.evaluate=function(e,t,r,o,i){g.ConsoleUtils.assert(r>=0),this.isPeriodicUnlimitedU()&&(e=(0,c.normalizeParameterToShiftedRange)(e,this.getRangeUnlimitedU())),this.isPeriodicUnlimitedV()&&(t=(0,c.normalizeParameterToShiftedRange)(t,this.getRangeUnlimitedV()));var n=(0,u.evaluateBSurfaceDerivs)(e,t,Math.min(r,3),this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights),s={pos:n[0][0]};return r>=1&&(s.du=n[1][0],s.dv=n[0][1]),r>=2&&(s.duu=n[2][0],s.duv=n[1][1],s.dvv=n[0][2]),r>=3&&(s.duuu=n[3][0],s.duuv=n[2][1],s.duvv=n[1][2],s.dvvv=n[0][3]),s},f.prototype.evaluatePosition=function(e,t){return this.isPeriodicUnlimitedU()&&(e=(0,c.normalizeParameterToShiftedRange)(e,this.getRangeUnlimitedU())),this.isPeriodicUnlimitedV()&&(t=(0,c.normalizeParameterToShiftedRange)(t,this.getRangeUnlimitedV())),(0,u.evaluateBSurfacePoint)(e,t,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights)},f.prototype.evaluateNormal=function(e,t){return this.isPeriodicUnlimitedU()&&(e=(0,c.normalizeParameterToShiftedRange)(e,this.getRangeUnlimitedU())),this.isPeriodicUnlimitedV()&&(t=(0,c.normalizeParameterToShiftedRange)(t,this.getRangeUnlimitedV())),s.Surface.prototype.evaluateNormal.call(this,e,t)},f.prototype.evaluateDu=function(e,t){return this.isPeriodicUnlimitedU()&&(e=(0,c.normalizeParameterToShiftedRange)(e,this.getRangeUnlimitedU())),this.isPeriodicUnlimitedV()&&(t=(0,c.normalizeParameterToShiftedRange)(t,this.getRangeUnlimitedV())),(0,u.evaluateBSurfaceDerivs)(e,t,1,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights)[1][0]},f.prototype.evaluateDv=function(e,t){return this.isPeriodicUnlimitedU()&&(e=(0,c.normalizeParameterToShiftedRange)(e,this.getRangeUnlimitedU())),this.isPeriodicUnlimitedV()&&(t=(0,c.normalizeParameterToShiftedRange)(t,this.getRangeUnlimitedV())),(0,u.evaluateBSurfaceDerivs)(e,t,1,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights)[0][1]},f.prototype.insertKnotU=function(e,t){var r=(0,l.insertBSurfaceKnotU)(e,t,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights);this._uKnots=r.uknots,this._controlPoints=r.P,this._weights=r.weights||[],this._clearCaches()},f.prototype.insertKnotV=function(e,t){var r=(0,l.insertBSurfaceKnotV)(e,t,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights);this._vKnots=r.vknots,this._controlPoints=r.P,this._weights=r.weights||[],this._clearCaches()},f.prototype.relaxToPerpendicular=function(e,t,r,i,n,s,a){var c=this;i&&0!==i.length||(i=this.getRangeU()),n&&0!==n.length||(n=this.getRangeV());var u=(0,p.newtonRaphson2D)((function(t){var r=c.evaluate(t[0],t[1],2);o.Vector3.sub(r.pos,r.pos,e);var i=o.Vector3.dot(r.du,r.pos),n=o.Vector3.dot(r.dv,r.pos),s=o.Vector3.dot(r.duu,r.pos)+o.Vector3.dot(r.du,r.du),a=o.Vector3.dot(r.duv,r.pos)+o.Vector3.dot(r.du,r.dv);return{val:[i,n],deriv1:[s,a],deriv2:[a,o.Vector3.dot(r.dvv,r.pos)+o.Vector3.dot(r.dv,r.dv)]}}),[t,r],[i,n]);return{u:u.param[0],v:u.param[1],status:u.status}},f.prototype.closestParam=function(e){for(var t=o.FLOAT64_TOLERANCE,r=[[this.getRangeU(),this.getRangeV()]],i=this.getBezierPatches(),n=(0,d.closestBSurfacePatches)(e,i,r),s=Number.POSITIVE_INFINITY,a={u:void 0,v:void 0},u=0;u<n.length;++u)if(!(n[u].minDistSqr>s))for(var l=n[u].index,h=i[l[0]][l[1]],p=h.getRangeUnlimitedU(),g=h.getRangeUnlimitedV(),f=0;f<r.length;++f){var v=[Math.max(p[0],r[f][0][0]),Math.min(p[1],r[f][0][1])],_=[Math.max(g[0],r[f][1][0]),Math.min(g[1],r[f][1][1])];if(!(v[1]-v[0]<=o.FLOAT64_TOLERANCE||_[1]-_[0]<=o.FLOAT64_TOLERANCE)){var y=(0,d.closestBSurfacePointApprox)(e,h.getDegreeU(),h.getDegreeV(),h.getKnotsU(),h.getKnotsV(),h.getControlPoints(),h.isRational()?h.getWeights():void 0,v,_),m=this.relaxToPerpendicular(e,y.u,y.v,v,_,t,64),E=h.evaluatePosition(m.u,m.v),x=o.Vector3.squaredDistance(E,e);x<s&&(s=x,a.u=m.u,a.v=m.v)}}return this.isPeriodicUnlimitedU()&&(a.u=(0,c.foldNearTo)(a.u,.5*(this.getRangeU()[0]+this.getRangeU()[1]),this.getPeriodUnlimitedU())),this.isPeriodicUnlimitedV()&&(a.v=(0,c.foldNearTo)(a.v,.5*(this.getRangeV()[0]+this.getRangeV()[1]),this.getPeriodUnlimitedV())),a},f.prototype.vParamLine=function(e){var t=(0,l.extractBSurfaceParamLineV)(e,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights),r=t.ctrlPts.length/3;t.weights&&0!==t.weights.length||(t.weights=new Array(r),t.weights.fill(1));var o=new a.BCurve;return o.set(t.ctrlPts,t.weights,this._vDegree,this._vKnots),o},f.prototype.uParamLine=function(e){var t=(0,l.extractBSurfaceParamLineU)(e,this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights),r=t.ctrlPts.length/3;t.weights&&0!==t.weights.length||(t.weights=new Array(r),t.weights.fill(1));var o=new a.BCurve;return o.set(t.ctrlPts,t.weights,this._uDegree,this._uKnots),o},f.prototype.getBoundingBox=function(e,t){for(var r=new i.BoundingBox,n=o.Vector3.createFloat64(),s=0;s<this._controlPoints.length;s+=3)o.Vector3.set(n,this._controlPoints[s],this._controlPoints[s+1],this._controlPoints[s+2]),r.includePoint(n);return r},f.prototype.transform=function(e){for(var t=o.Vector3.createFloat64(),r=0;r<this._controlPoints.length;r+=3)o.Vector3.set(t,this._controlPoints[r],this._controlPoints[r+1],this._controlPoints[r+2]),o.Vector3.transformMatrix44(t,t,e),this._controlPoints[r]=t[0],this._controlPoints[r+1]=t[1],this._controlPoints[r+2]=t[2];this._clearCaches()},f.prototype.getRangeUnlimitedU=function(){return[this._uKnots[0],this._uKnots[this._uKnots.length-1]]},f.prototype.getRangeUnlimitedV=function(){return[this._vKnots[0],this._vKnots[this._vKnots.length-1]]},f.prototype.isPeriodicUnlimitedU=function(){return this._checkClosure(),this._isPeriodicU},f.prototype.isPeriodicUnlimitedV=function(){return this._checkClosure(),this._isPeriodicV},f.prototype.isClosedUnlimitedU=function(){return this._checkClosure(),this._isClosedU},f.prototype.isClosedUnlimitedV=function(){return this._checkClosure(),this._isClosedV},f.prototype._checkClosure=function(){void 0!==this._isClosedU&&void 0!==this._isPeriodicU||(this._isClosedU=this._isPeriodicU=!1),void 0!==this._isClosedV&&void 0!==this._isPeriodicV||(this._isClosedV=this._isPeriodicV=!1)},f.prototype.isSimpleBezier=function(){return this._uKnots.length===2*this._uDegree+2&&this._vKnots.length===2*this._vDegree+2},f.prototype.getBezierPatches=function(){if(this.isSimpleBezier())return this._patches=void 0,[[this]];if(!this._patches){var e=(0,h.decomposeBSurfaceToBezier)(this._uDegree,this._vDegree,this._uKnots,this._vKnots,this._controlPoints,this._weights);this._patches=[];for(var t=0;t<e.U.length;++t){this._patches[t]=[];for(var r=0;r<e.V.length;++r){var o=new f;o.set(this._uDegree,this._vDegree,e.U[t],e.V[r],e.P[t][r],e.w?e.w[t][r]:void 0),this._patches[t][r]=o}}}return this._patches},f.prototype._clearCaches=function(){this._isClosedU=void 0,this._isClosedV=void 0,this._isPeriodicU=void 0,this._isPeriodicV=void 0,this._patches=void 0},f.prototype.toObject=function(){return{uDegree:this._uDegree,vDegree:this._vDegree,uKnots:this._uKnots,vKnots:this._vKnots,controlPoints:this._controlPoints,weights:this._weights,uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.BSurface=f},2236:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.checkValidity=void 0;var o=r(1972),i=r(2468),n=r(1472),s=r(3565),a=r(412),c=r(7616);function u(e){var t=[],r=e.getGuid();return r&&\"string\"==typeof r||t.push({error:\"BaseTopology has invalid GUID\",source:[e]}),t}function l(e){var t=u(e),r=0,o=0,n=0,s=e.getLumps();if(s.length>0){for(var a=new Set,c=0;c<s.length;++c){var l=s[c];a.add(l),l&&l.getTopologyType()===i.TOPOLOGY_TYPES.LUMP?l.getBody()!==e&&t.push({error:\"Body is not the parent of child Lump\",source:[e,l]}):t.push({error:\"Body has invalid element in Lump array\",source:[e,l]}),r+=l.collectFaces().size,o+=l.collectEdges().size,n+=l.collectVertices().size}a.size!==s.length&&t.push({error:\"Body has non-unique Lumps\",source:[e]})}return r!==e.collectFaces().size&&t.push({error:\"Body has Lumps which share Faces\",source:[e]}),o!==e.collectEdges().size&&t.push({error:\"Body has Lumps which share Edges\",source:[e]}),n!==e.collectVertices().size&&t.push({error:\"Body has Lumps which share Vertices\",source:[e]}),t}function h(e){var t=u(e),r=e.getBody();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.BODY&&t.push({error:\"Lump has invalid parent Body\",source:[e]});var o=0,n=0,s=0,a=e.getShells();if(a.length>0){for(var c=new Set,l=0;l<a.length;++l){var h=a[l];c.add(h),h&&h.getTopologyType()===i.TOPOLOGY_TYPES.SHELL?h.getLump()!==e&&t.push({error:\"Lump is not the parent of child Shell\",source:[e,h]}):t.push({error:\"Lump has invalid element in Shell array\",source:[e,h]}),o+=h.collectFaces().size,n+=h.collectEdges().size,s+=h.collectVertices().size}c.size!==a.length&&t.push({error:\"Lump has non-unique Shells\",source:[e]})}else t.push({error:\"Lump has no Shells\",source:[e]});return o!==e.collectFaces().size&&t.push({error:\"Lump has Shells which share Faces\",source:[e]}),n!==e.collectEdges().size&&t.push({error:\"Lump has Shells which share Edges\",source:[e]}),s!==e.collectVertices().size&&t.push({error:\"Lump has Shells which share Vertices\",source:[e]}),t}function d(e){var t=u(e),r=e.getLump();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.LUMP&&t.push({error:\"Shell has invalid parent Lump\",source:[e]});var o=e.getFaces();if(o.length>0){for(var n=new Set,s=0;s<o.length;++s){var a=o[s];n.add(a),a&&a.getTopologyType()===i.TOPOLOGY_TYPES.FACE?a.getShell()!==e&&t.push({error:\"Shell is not the parent of child Face\",source:[e,a]}):t.push({error:\"Shell has invalid element in Face array\",source:[e,a]})}n.size!==o.length&&t.push({error:\"Shell has non-unique Faces\",source:[e]})}else t.push({error:\"Shell has no Faces\",source:[e]});1!==(0,c.findConnectedFaces)(e.getFaces()).length&&t.push({error:\"Shell is disconnected\",source:[e]});var l=e.collectVertices(),h=e.collectEdges(),d=new Set,p=new Set;return l.forEach((function(e){e.collectEdges(d),e.collectFaces(p)})),d.size!==h.size&&t.push({error:\"Shell has rogue edges\",source:[e]}),l.size>0&&p.size!==e.getFaces().length&&t.push({error:\"Shell has rogue faces\",source:[e]}),t}function p(e){var t=u(e),r=e.getShell();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.SHELL&&t.push({error:\"Face has invalid parent Shell\",source:[e]});var o=0,n=0,s=e.getLoops(),c=e.getSurface();if(s.length>0){for(var l=new Set,h=0;h<s.length;++h){var d=s[h];l.add(d),d&&d.getTopologyType()===i.TOPOLOGY_TYPES.LOOP?d.getFace()!==e&&t.push({error:\"Face is not the parent of child Loop\",source:[e,d]}):t.push({error:\"Face has invalid element in Loop array\",source:[e,d]}),o+=d.collectEdges().size,n+=d.collectVertices().size}l.size!==s.length&&t.push({error:\"Face has non-unique Loops\",source:[e]})}else{var p=c.getGeometryType()===i.GEOMETRY_TYPES.SPHERE,g=c.getGeometryType()===i.GEOMETRY_TYPES.TORUS&&c.isDoughnut();p||g||t.push({error:\"Face has no Loops\",source:[e]})}return o!==e.collectEdges().size&&t.push({error:\"Face has Loops which share Edges\",source:[e]}),n!==e.collectVertices().size&&t.push({error:\"Face has Loops which share Vertices\",source:[e]}),c?c instanceof a.Surface||t.push({error:\"Face has invalid Surface geometry\",source:[e,c]}):t.push({error:\"Face has no Surface geometry\",source:[e]}),t}function g(e){var t=u(e),r=e.getFace();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.FACE&&t.push({error:\"Loop has invalid parent Face\",source:[e]});var o=e.getCoedges();if(o.length>0){for(var n=new Set,s=0;s<o.length;++s){var a=o[s];if(n.add(a),a&&a.getTopologyType()===i.TOPOLOGY_TYPES.COEDGE){a.getLoop()!==e&&t.push({error:\"Loop is not the parent of child Coedge\",source:[e,a]});var c=o[(s+1)%o.length];a.getEndVertex()!==c.getStartVertex()&&t.push({error:\"Loop has disconnected Coedges\",source:[e,a,c]})}else t.push({error:\"Loop has invalid element in Coedge array\",source:[e,a]})}n.size!==o.length&&t.push({error:\"Loop has non-unique Coedges\",source:[e]})}else t.push({error:\"Loop has no Coedges\",source:[e]});return t}function f(e){var t=u(e),r=e.getLoop();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.LOOP&&t.push({error:\"Coedge has invalid parent Loop\",source:[e]});var o=e.getBody(),n=new Set,s=e;do{if(n.has(s)){t.push({error:\"Coedge partner list does not form a loop\",source:[e]});break}if(n.add(s),!s.getPartner()){s!==e&&t.push({error:\"Coedge has no partner\",source:[e,s]});break}if((s=s.getPartner()).getTopologyType()!==i.TOPOLOGY_TYPES.COEDGE){t.push({error:\"Coedge has invalid entry in partner list\",source:[e,s]});break}s.getEdge()!==e.getEdge()&&t.push({error:\"Coedge partner refers to a different Edge\",source:[e,s]}),s.getBody()!==o&&t.push({error:\"Coedge partner is part of a different Body\",source:[e,s]})}while(s!==e);var a=e.getEdge();return a?a.getTopologyType()!==i.TOPOLOGY_TYPES.EDGE?t.push({error:\"Coedge has invalid Edge\",source:[e,a]}):(s=a.getCoedge())&&n.has(s)||t.push({error:\"Coedge partner list does not include parent of Edge\",source:[e,a]}):t.push({error:\"Coedge has no Edge\",source:[e]}),t}function v(e){var t=u(e),r=e.getCoedge(),s=e.getWire();s&&r?t.push({error:\"Edge has too many parents, both Wire and Coedge\",source:[e]}):s?s.getTopologyType()!==i.TOPOLOGY_TYPES.WIRE&&t.push({error:\"Edge has invalid parent Wire\",source:[e]}):r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.COEDGE&&t.push({error:\"Edge has invalid parent Coedge\",source:[e]});for(var a=e.getVertices(),c=0;c<a.length;++c){var l=a[c];l&&l.getTopologyType()===i.TOPOLOGY_TYPES.VERTEX?l.isAdjacentEdge(e)||t.push({error:\"Edge is not adjacent to own Vertex\",source:[e,l]}):t.push({error:\"Edge has invalid Vertex\",source:[e,l]})}var h=e.getCurve();return h?h instanceof n.Curve?t=t.concat(function(e,t){var r=[],n=e.isReversed(),s=e.getRange();if(void 0===s||2!==s.length||void 0===s[0]||void 0===s[1]||s[1]<s[0])return r.push({error:\"Edge range is not defined\",source:[e,s]}),r;var a=e.getStartVertex(),c=n?-e.t0():e.t0(),u=t.evaluatePosition(c),l=Math.max(i.KERNEL_TOLERANCE,a.getPrecision());o.Vector3.equals(a.getPosition(),u,l)||r.push({error:\"Edge start position not consistent with Vertex\",source:[e,a,u]});var h=e.getEndVertex(),d=n?-e.t1():e.t1(),p=t.evaluatePosition(d),g=Math.max(i.KERNEL_TOLERANCE,h.getPrecision());return o.Vector3.equals(h.getPosition(),p,g)||r.push({error:\"Edge end position not consistent with Vertex\",source:[e,h,p]}),e.isClosed()?(a!==h&&r.push({error:\"Edge is closed but has different start and end Vertices\",source:[e]}),o.Vector3.equals(u,p,i.KERNEL_TOLERANCE)||r.push({error:\"Edge is closed but has different start and end positions\",source:[e,u,p]}),t.isClosed()||r.push({error:\"Edge is closed but its curve is not\",source:[e]})):(a===h&&r.push({error:\"Edge is open but has same start and end Vertices\",source:[e]}),o.Vector3.equals(u,p,i.KERNEL_TOLERANCE)&&r.push({error:\"Edge is open but has same start and end positions\",source:[e,u,p]})),t.isPeriodic()?Math.abs(d-c)>t.getPeriod()+i.PARAMETER_SPACE_TOLERANCE&&r.push({error:\"Edge parameter range is longer than curve period\",source:[e]}):((c+i.PARAMETER_SPACE_TOLERANCE<t.getRange()[0]||c-i.PARAMETER_SPACE_TOLERANCE>t.getRange()[1])&&r.push({error:\"Edge start parameter is outside of curve range\",source:[e]}),(d+i.PARAMETER_SPACE_TOLERANCE<t.getRange()[0]||d-i.PARAMETER_SPACE_TOLERANCE>t.getRange()[1])&&r.push({error:\"Edge end parameter is outside of curve range\",source:[e]})),r}(e,h)):t.push({error:\"Edge has invalid Curve geometry\",source:[e,h]}):t=t.concat(function(e){if(e.getWire())return[{error:\"Degenerate Edge is part of a Wire\",source:[e]}];if(e.getStartVertex()!==e.getEndVertex())return[{error:\"Degenerate Edge has different start and end vertices\",source:[e]}];var t=Array.from(e.collectFaces());if(0===t.length)return[];if(1!==t.length)return[{error:\"Degenerate Edge is part of multiple Faces\",source:[e]}];var r=e.getStartVertex().getPosition(),n=t[0].getSurface(),s=n.getGeometryType();if(s===i.GEOMETRY_TYPES.PLANE||s===i.GEOMETRY_TYPES.CYLINDER||s===i.GEOMETRY_TYPES.ELLIPTICAL_CYLINDER||s===i.GEOMETRY_TYPES.SPHERE)return[{error:\"Degenerate Edge is on a surface with no singularities\",source:[e,n]}];if(s===i.GEOMETRY_TYPES.CONE||s===i.GEOMETRY_TYPES.ELLIPTICAL_CONE){if(!(l=n.getApexPosition()))return[{error:\"Degenerate Edge is on a surface with no singularities\",source:[e,n]}];if(!o.Vector3.equals(r,l,i.KERNEL_TOLERANCE))return[{error:\"Degenerate Edge is not at a surface singularity\",source:[e,n]}]}else{if(s!==i.GEOMETRY_TYPES.TORUS)return[{error:\"Degenerate Edge is not on an analytic surface\",source:[e]}];for(var a=!1,c=n.getSingularUParams(),u=0;u<c.length;++u){var l=n.evaluatePosition(c[u],0);o.Vector3.equals(r,l,i.KERNEL_TOLERANCE)&&(a=!0)}if(!a)return[{error:\"Degenerate Edge is not at a surface singularity\",source:[e,n]}]}return[]}(e)),t}function _(e){var t=u(e),r=e.getEdges();if(r.length>0)for(var o=e.getBody(),n=0;n<r.length;++n){var a=r[n];a&&a.getTopologyType()===i.TOPOLOGY_TYPES.EDGE?a.getStartVertex()!==e&&a.getEndVertex()!==e?t.push({error:\"Vertex is not an end-point of adjacent Edge\",source:[e,a]}):a.getBody()!==o&&t.push({error:\"Vertex has adjacent Edge from a different body\",source:[e,a]}):t.push({error:\"Vertex has invalid entry in Edge list\",source:[e,a]})}else t.push({error:\"Vertex has no adjacent Edges\",source:[e]});var c=e.getPoint();return c?c instanceof s.Point||t.push({error:\"Vertex has invalid Point geometry\",source:[e,c]}):t.push({error:\"Vertex has no Point geometry\",source:[e]}),t}function y(e){var t=u(e),r=0,o=0,n=e.getWires();if(n.length>0){for(var s=new Set,a=0;a<n.length;++a){var c=n[a];s.add(c),c&&c.getTopologyType()===i.TOPOLOGY_TYPES.WIRE?c.getWireBody()!==e&&t.push({error:\"WireBody is not the parent of child Wire\",source:[e,c]}):t.push({error:\"WireBody has invalid element in Wire array\",source:[e,c]}),r+=c.collectEdges().size,o+=c.collectVertices().size}s.size!==n.length&&t.push({error:\"WireBody has non-unique Wires\",source:[e]})}else t.push({error:\"WireBody has no Wires\",source:[e]});return r!==e.collectEdges().size&&t.push({error:\"WireBody has Wires which share Edges\",source:[e]}),o!==e.collectVertices().size&&t.push({error:\"WireBody has Wires which share Vertices\",source:[e]}),t}function m(e){var t=u(e),r=e.getWireBody();r&&r.getTopologyType()!==i.TOPOLOGY_TYPES.WIREBODY&&t.push({error:\"Wire has invalid parent WireBody\",source:[e]});var o=e.getEdges();if(o.length>0){for(var n=new Set,s=0;s<o.length;++s){var a=o[s];n.add(a),a&&a.getTopologyType()===i.TOPOLOGY_TYPES.EDGE?a.getWire()!==e&&t.push({error:\"Wire is not the parent of child Edge\",source:[e,a]}):t.push({error:\"Wire has invalid element in Edge array\",source:[e,a]})}n.size!==o.length&&t.push({error:\"Wire has non-unique Edges\",source:[e]});var l=(0,c.findConnectedEdges)(o);1!==l.length?t.push({error:\"Wire is not a connected set of Edges\",source:[e]}):l[0].length!==o.length&&t.push({error:\"Wire is connected to other unknown Edges\",source:[e]})}else t.push({error:\"Wire has no Edges\",source:[e]});return t}t.checkValidity=function(e){for(var t,r,o,n=[],s=[e],a=new Set,c=new Map;s.length>0;){a.clear();var u=new Set;for(t=0;t<s.length;++t){switch((r=s[t]).getTopologyType()){case i.TOPOLOGY_TYPES.BODY:n=n.concat(l(r)),r.getLumps().forEach((function(e){a.add(e)}));break;case i.TOPOLOGY_TYPES.LUMP:n=n.concat(h(r)),r.getShells().forEach((function(e){a.add(e)}));break;case i.TOPOLOGY_TYPES.SHELL:n=n.concat(d(r)),r.getFaces().forEach((function(e){a.add(e)}));break;case i.TOPOLOGY_TYPES.FACE:n=n.concat(p(r)),r.getLoops().forEach((function(e){a.add(e)})),r.getSurface()&&u.add(r.getSurface());break;case i.TOPOLOGY_TYPES.LOOP:n=n.concat(g(r)),r.getCoedges().forEach((function(e){a.add(e)}));break;case i.TOPOLOGY_TYPES.COEDGE:n=n.concat(f(r)),a.add(r.getEdge());break;case i.TOPOLOGY_TYPES.EDGE:n=n.concat(v(r)),r.getVertices().forEach((function(e){e&&a.add(e)})),r.getCurve()&&u.add(r.getCurve());break;case i.TOPOLOGY_TYPES.VERTEX:n=n.concat(_(r)),r.getPoint()&&u.add(r.getPoint());break;case i.TOPOLOGY_TYPES.WIREBODY:n=n.concat(y(r)),r.getWires().forEach((function(e){a.add(e)}));break;case i.TOPOLOGY_TYPES.WIRE:n=n.concat(m(r)),r.getEdges().forEach((function(e){a.add(e)}))}o=r.getGuid(),c.has(o)?n.push({error:\"Objects have clashing GUIDs\",source:[r,c.get(o)]}):c.set(o,r)}for(u=Array.from(u),t=0;t<u.length;++t)o=(r=u[t]).getGuid(),c.has(o)?n.push({error:\"Objects have clashing GUIDs\",source:[r,c.get(o)]}):c.set(o,r);s=Array.from(a)}return n}},5512:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Circle=void 0;var o=r(1972),i=r(3344),n=r(2355),s=r(2468),a=r(1472),c=r(5896),u=r(4728),l=r(4336),h=function(){a.Curve.call(this),this._center=o.Vector3.createFloat64FromValues(0,0,0),this._normal=o.Vector3.createFloat64FromValues(0,0,1),this._xAxis=o.Vector3.createFloat64FromValues(1,0,0),this._yAxis=o.Vector3.createFloat64FromValues(0,1,0),this._radius=1};(h.prototype=Object.create(a.Curve.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.CIRCLE},h.prototype.set=function(e,t,r){u.ConsoleUtils.assert(o.Vector3.squaredLength(t)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),u.ConsoleUtils.assert(o.Vector3.squaredLength(r)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),u.ConsoleUtils.assert(o.Vector3.isOrthogonal(t,r,s.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.copy(this._center,e),o.Vector3.normalize(this._normal,t),o.Vector3.normalize(this._xAxis,r),this._radius=o.Vector3.length(r),this._computeYAxis()},h.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._normal,this._xAxis)},h.prototype.clone=function(){var e=new h;return e.copy(this),e},h.prototype.getCenter=function(){return this._center},h.prototype.getNormal=function(){return this._normal},h.prototype.setNormal=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),this._normal!==e&&(o.Vector3.normalize(this._normal,e),o.Vector3.isOrthogonal(this._xAxis,this._normal)||(o.Vector3.computeOrthogonal(this._xAxis,this._normal),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis())},h.prototype.getRadius=function(){return this._radius},h.prototype.setRadius=function(e){u.ConsoleUtils.assert(e>s.KERNEL_TOLERANCE),this._radius=e},h.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},h.prototype.setOrigin=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),u.ConsoleUtils.assert(o.Vector3.isOrthogonal(e,this._normal,s.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},h.prototype.copy=function(e){a.Curve.prototype.copy.call(this,e),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),this._radius=e._radius,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._normal,e._normal)},h.prototype.getRangeUnlimited=function(){return[-Math.PI,Math.PI]},h.prototype.isPeriodicUnlimited=function(){return!0},h.prototype.isClosedUnlimited=function(){return!0},h.prototype._computeRadiusVector=function(){return o.Vector3.scale(o.Vector3.createFloat64(),this._xAxis,this._radius)},h.prototype.tessellate=function(e,t){t=t||s.TESSELLATION.LINEAR_PRECISION;var r={positions:[],offsets:[],tolerance:0};r.offsets.push(0);for(var o=e[0],i=1;i<e.length;++i){var n=e[i],a=l.CurveTessellator.getCircularArcRenderPoints(this,[o,n],t,1===i,r.positions);r.offsets.push(r.positions.length-1),o=n,r.tolerance=Math.max(r.tolerance,a)}return r},h.prototype.evaluatePosition=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,Math.cos(e)*this._radius),o.Vector3.scaleAndAdd(t,t,this._yAxis,Math.sin(e)*this._radius),o.Vector3.add(t,t,this._center),t},h.prototype.evaluateDt=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,-Math.sin(e)*this._radius),o.Vector3.scaleAndAdd(t,t,this._yAxis,Math.cos(e)*this._radius),t},h.prototype.evaluateDtt=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,-Math.cos(e)*this._radius),o.Vector3.scaleAndAdd(t,t,this._yAxis,-Math.sin(e)*this._radius),t},h.prototype.tangentLength=function(e){return this.getRadius()},h.prototype.getArcLength=function(e){return void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited()),this.getRadius()*(e[1]-e[0])},h.prototype.getParameterFromArcLength=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());var r=t[0]+e/this.getRadius();return(0,c.clamp)(r,t[0],t[1])},h.prototype.getBoundingBox=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=(0,c.minMaxCosSinFunc)(this._xAxis[0]*this._radius,this._yAxis[0]*this._radius,this._center[0],e),r=(0,c.minMaxCosSinFunc)(this._xAxis[1]*this._radius,this._yAxis[1]*this._radius,this._center[1],e),o=(0,c.minMaxCosSinFunc)(this._xAxis[2]*this._radius,this._yAxis[2]*this._radius,this._center[2],e),n=new i.BoundingBox;return n.min[0]=t[0],n.max[0]=t[1],n.min[1]=r[0],n.max[1]=r[1],n.min[2]=o[0],n.max[2]=o[1],n},h.prototype.getTangentCone=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=.5*(e[0]+e[1]),r=o.Vector3.createFloat64FromValues(0,0,0);o.Vector3.scaleAndAdd(r,r,this._xAxis,-Math.sin(t)),o.Vector3.scaleAndAdd(r,r,this._yAxis,Math.cos(t));var i=Math.min(Math.PI,.5*(e[1]-e[0]));return new n.TangentCone(r,i)},h.prototype.closestToRayParam=function(e,t,r){var i=o.Vector3.createFloat64();o.Vector3.sub(i,this._center,e);var n=o.Vector3.dot(i,this._normal)/o.Vector3.dot(t,this._normal);if(isFinite(n)){var s=o.Vector3.createFloat64();return o.Vector3.scaleAndAdd(s,e,t,n),this.closestToPointParam(s,r)}},h.prototype.getRadiusAndRangeFromEndpoints=function(e,t,r){var i=o.Vector3.createFloat64();o.Vector3.sub(i,e,this._center);var n=o.Vector3.createFloat64();o.Vector3.sub(n,t,this._center);var a,u=.5*(o.Vector3.length(i)+o.Vector3.length(n)),l=o.Vector3.dot(i,this._xAxis),h=o.Vector3.dot(i,this._yAxis),d=(0,c.normalizeAngle)(Math.atan2(h,l));if(e===t||o.Vector3.squaredDistance(e,t)<s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE)a=d+c.PI2;else{var p=o.Vector3.dot(n,this._xAxis),g=o.Vector3.dot(n,this._yAxis);if((a=(0,c.normalizeAngle)(Math.atan2(g,p)))<d&&(a+=c.PI2),r){var f=a;a=d,d=f-c.PI2}}return{radius:u,range:[d,a]}},h.prototype.closestToPointParam=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());var r=o.Vector3.createFloat64();o.Vector3.sub(r,e,this._center);var i,n=o.Vector3.dot(r,this._xAxis),a=o.Vector3.dot(r,this._yAxis);return i=n*n+a*a<s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE?.5*Math.PI:Math.atan2(a,n),i=(0,c.foldNearTo)(i,.5*(t[0]+t[1]),2*Math.PI),i=(0,c.clamp)(i,t[0],t[1])},h.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._normal,this._normal,e),o.Vector3.scale(this._xAxis,this._xAxis,this._radius),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),this._radius=o.Vector3.length(this._xAxis),o.Vector3.normalize(this._normal,this._normal),o.Vector3.normalize(this._xAxis,this._xAxis),this._computeYAxis()},h.prototype.suggestSplittingParam=function(e){},h.prototype.toObject=function(){const e=this.evaluatePosition(0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),radius:this.vectorToObject(e),normal:this.vectorToObject(this._normal),range:this.rangeToObject(this.getRange(),this.isLimited())}},t.Circle=h},672:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Coedge=void 0;var o=r(1972),i=r(9547),n=r(2468),s=r(4728),a=r(5896),c=r(5416),u=function(e){i.BaseTopology.call(this),this._reversed=!1,this._edge=e,this._loop=void 0,this._partner=void 0,this._uvCurve=void 0};(u.prototype=Object.create(i.BaseTopology.prototype)).getTopologyType=function(){return n.TOPOLOGY_TYPES.COEDGE},u.prototype.getEdge=function(){return this._edge},u.prototype.getLoop=function(){return this._loop},u.prototype.getPartner=function(){return this._partner},u.prototype.setEdge=function(e){this._edge=e},u.prototype.setLoop=function(e){this._loop=e},u.prototype.setPartner=function(e){this._partner=e},u.prototype.getStartVertex=function(){return this._reversed?this._edge.getEndVertex():this._edge.getStartVertex()},u.prototype.getEndVertex=function(){return this._reversed?this._edge.getStartVertex():this._edge.getEndVertex()},u.prototype.getFace=function(){return this._loop?this._loop.getFace():void 0},u.prototype.getNext=function(){if(this._loop){var e=this._loop.getCoedges(),t=e.indexOf(this);return s.ConsoleUtils.assert(t>=0),e[(t+1)%e.length]}},u.prototype.getPrevious=function(){if(this._loop){var e=this._loop.getCoedges(),t=e.indexOf(this);return s.ConsoleUtils.assert(t>=0),e[(0,a.modulus)(t-1,e.length)]}},u.prototype.isReversed=function(){return this._reversed},u.prototype.setReversed=function(e){this._reversed=e},u.prototype.getRange=function(){if(this._edge)return this._reversed?[-this._edge.t1(),-this._edge.t0()]:[this._edge.t0(),this._edge.t1()]},u.prototype.t0=function(){if(this._edge)return this._reversed?-this._edge.t1():this._edge.t0()},u.prototype.t1=function(){if(this._edge)return this._reversed?-this._edge.t0():this._edge.t1()},u.prototype.evaluatePosition=function(e){if(this._edge)return this.isReversed()&&(e=-e),this._edge.evaluatePosition(e)},u.prototype.evaluateDt=function(e){if(this._edge){this.isReversed()&&(e=-e);var t=this._edge.evaluateDt(e);return this.isReversed()&&o.Vector3.negate(t,t),t}},u.prototype.evaluateCurvature=function(e,t){if(this._edge)return this.isReversed()&&(e=-e),this._edge.evaluateCurvature(e,t)},u.prototype.evaluateFaceUV=function(e){var t=this.getFace();if(t){var r=this.evaluatePosition(e);return t.closestParam(r)}},u.prototype.evaluateInwardDirection=function(e){var t=this.getFace();if(t){var r=this.evaluateDt(e),i=this.evaluateFaceUV(e),n=t.evaluateNormal(i.u,i.v),s=[0,0,0];return o.Vector3.cross(s,n,r),o.Vector3.normalize(s,s),s}},u.prototype.getBoundingBox=function(){if(this._edge)return this._edge.getBoundingBox()},u.prototype.generateUVCurve=function(e){if(!this._uvCurve&&this._edge){var t=this._edge.getCurve();if(t&&this._loop&&this._loop.getFace()){var r=this._loop.getFace().getSurface();r&&r.getGeometryType()===n.GEOMETRY_TYPES.PLANE&&(e||(e=(0,a.getPlaneTransforms)(r).threeSpaceToUV),e?(this._uvCurve=t.clone(),this._uvCurve.transform(e)):this._uvCurve=t)}}},u.prototype.resetUVCurve=function(){this._uvCurve=void 0},u.prototype.uvAngleSubtended=function(e){var t=this._loop.getFace().getSurface().closestParam(e),r=[t.u,t.v,0];this.generateUVCurve(),s.ConsoleUtils.assert(this._uvCurve);var i=this.getRange(),u=1;this.isReversed()!==this._edge.isReversed()&&(i=[-i[1],-i[0]],u=-1),this._loop&&this._loop.getFace()&&this._loop.getFace().isReversed()&&(u*=-1);var l=!1,h=this._uvCurve.getRange();this._uvCurve.isClosed()&&i[1]-i[0]>=h[1]-h[0]-2*n.PARAMETER_SPACE_TOLERANCE&&(l=!0);var d=this._uvCurve.evaluatePosition(i[0]),p=this._uvCurve.evaluatePosition(i[1]),g=o.Vector3.createFloat64();o.Vector3.sub(g,d,r),o.Vector3.normalize(g,g);var f=o.Vector3.createFloat64();o.Vector3.sub(f,p,r),o.Vector3.normalize(f,f);var v=(0,a.getSignedAngle)(g,f),_=v<0,y=!1,m=!1;switch(this._edge.getCurveType()){case n.GEOMETRY_TYPES.LINE:break;case n.GEOMETRY_TYPES.CIRCLE:m=this._uvCurve.getNormal()[2]>0,y=o.Vector3.distance(r,this._uvCurve.getCenter())<this._uvCurve.getRadius(),l||(y=y&&_!==m);break;case n.GEOMETRY_TYPES.ELLIPSE:m=this._uvCurve.getNormal()[2]>0;var E=o.Vector3.sub([0,0,0],r,this._uvCurve.getCenter()),x=o.Vector3.dot(E,this._uvCurve.getMajorAxis())/this._uvCurve.getMajorRadius(),R=o.Vector3.dot(E,this._uvCurve.getMinorAxis())/this._uvCurve.getMinorRadius();y=x*x+R*R<=1,l||(y=y&&_!==m);break;case n.GEOMETRY_TYPES.BCURVE:this._uvCurve.isPlanarXY()||console.warn(\"Unsupported non-planar curve for uvAngleSubtended\");var A=[r[0],r[1]];y=c.SplineCurveHelper.isPointInsideSplineRegionXYPlanar3D(A,this._uvCurve,i),m=!0;break;default:throw new Error(\"Unsupported curve type for uvAngleSubtended\")}return l?v=y?2*Math.PI*(m?-1:1):0:y&&(v<0?v=2*Math.PI+v:v-=2*Math.PI),v*u},u.prototype.getBody=function(){return this._loop?this._loop.getBody():void 0},u.prototype.collectFaces=function(e){return e=e||new Set,this._loop&&this._loop.collectFaces(e),e},u.prototype.collectEdges=function(e){return e=e||new Set,this._edge&&e.add(this._edge),e},u.prototype.collectVertices=function(e){return e=e||new Set,this._edge&&this._edge.collectVertices(e),e},u.prototype.toString=function(){return\"Coedge\"},u.prototype.toObject=function(){return{edge:this.refToString(this._edge),partner:this.refToString(this._partner),reversed:this._reversed,attributes:this.refsToStrings(this._attributes)}},u.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._edge,this._attributes])},t.Coedge=u},2984:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Cone=void 0;var o=r(1972),i=r(3344),n=r(2468),s=r(412),a=r(3565),c=r(1096),u=r(5512),l=r(4728),h=function(){s.Surface.call(this),this._center=o.Vector3.createFloat64(),this._radius=0,this._angle=0,this._uScale=1,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(h.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.CONE},h.prototype.clone=function(){var e=new h;return e.copy(this),e},h.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._radius=e._radius,this._angle=e._angle,this._uScale=e._uScale,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},h.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},h.prototype.set=function(e,t,r,i,s,a){o.Vector3.copy(this._center,e),l.ConsoleUtils.assert(t>n.KERNEL_TOLERANCE),this._radius=t,l.ConsoleUtils.assert(o.Vector3.squaredLength(r)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,r),l.ConsoleUtils.assert(Math.abs(i)<Math.PI/2),this._angle=i,void 0!==s&&o.Vector3.squaredLength(s)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?(l.ConsoleUtils.assert(o.Vector3.isOrthogonal(r,s,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,s)):(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._uScale=a||1,l.ConsoleUtils.assert(this._uScale>n.PARAMETER_SPACE_TOLERANCE),this._computeYAxis()},h.prototype.getRadius=function(){return this._radius},h.prototype.setRadius=function(e){l.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._radius=e},h.prototype.getCenter=function(){return this._center},h.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},h.prototype.getAxisDir=function(){return this._zAxis},h.prototype.setAxisDir=function(e){l.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),(o.Vector3.squaredLength(this._xAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._xAxis,this._zAxis,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis()},h.prototype.getUvOriginDir=function(){return this._xAxis},h.prototype.setUvOriginDir=function(e){l.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},h.prototype.getUScale=function(){return this._uScale},h.prototype.setUScale=function(e){l.ConsoleUtils.assert(e>n.PARAMETER_SPACE_TOLERANCE),this._uScale=e},h.prototype.getAngle=function(){return this._angle},h.prototype.setAngle=function(e){l.ConsoleUtils.assert(Math.abs(e)<Math.PI/2-n.KERNEL_ANGULAR_TOLERANCE),this._angle=e},h.prototype.isCylinder=function(){return Math.abs(this._angle)<n.KERNEL_ANGULAR_TOLERANCE},h.prototype.getApexParam=function(){return this.isCylinder()?void 0:-this._radius/(this._uScale*Math.sin(this._angle))},h.prototype.getApexPosition=function(){if(!this.isCylinder()){var e=-this._radius/Math.tan(this._angle),t=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(t,t,this._zAxis,e),t}},h.prototype.evaluatePosition=function(e,t){var r=this._radius+e*this._uScale*Math.sin(this._angle),i=r*Math.cos(t),n=r*Math.sin(t),s=e*this._uScale*Math.cos(this._angle),a=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(a,a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},h.prototype.evaluateNormal=function(e,t){var r=Math.sin(this._angle),i=Math.cos(this._angle),n=i*Math.cos(t),s=i*Math.sin(t),a=-r,c=o.Vector3.createFloat64();return o.Vector3.scale(c,this._xAxis,n),o.Vector3.scaleAndAdd(c,c,this._yAxis,s),o.Vector3.scaleAndAdd(c,c,this._zAxis,a),c},h.prototype.evaluateDu=function(e,t){var r=this._uScale*Math.sin(this._angle),i=r*Math.cos(t),n=r*Math.sin(t),s=this._uScale*Math.cos(this._angle),a=o.Vector3.createFloat64();return o.Vector3.scale(a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},h.prototype.evaluateDv=function(e,t){var r=this._radius+e*this._uScale*Math.sin(this._angle),i=-r*Math.sin(t),n=r*Math.cos(t),s=o.Vector3.createFloat64();return o.Vector3.scale(s,this._xAxis,i),o.Vector3.scaleAndAdd(s,s,this._yAxis,n),s},h.prototype.closestParam=function(e){var t=Math.sin(this._angle),r=Math.cos(this._angle),i=o.Vector3.createFloat64();o.Vector3.sub(i,e,this._center);var s=o.Vector3.dot(i,this._xAxis),a=o.Vector3.dot(i,this._yAxis),c=o.Vector3.dot(i,this._zAxis),u=Math.sqrt(s*s+a*a),l=this.getApexParam();if(void 0!==l){var h=l*this._uScale*r;(h>0&&c>h||h<0&&c<h)&&(s=-s,a=-a,u=-u)}return{u:((u-this._radius)*t+c*r)/this._uScale,v:Math.abs(u)>n.KERNEL_TOLERANCE?Math.atan2(a,s):0}},h.prototype.vParamLine=function(e){var t=this._radius+e*this._uScale*Math.sin(this._angle);if(Math.abs(t)>n.KERNEL_TOLERANCE){var r=new u.Circle,i=o.Vector3.clone(this._center),s=e*this._uScale*Math.cos(this._angle);o.Vector3.scaleAndAdd(i,i,this._zAxis,s);var c=o.Vector3.clone(this._xAxis);o.Vector3.scale(c,c,t);var l=o.Vector3.clone(this._zAxis);return o.Vector3.negate(l,l),r.set(i,l,c),r}return new a.Point(this.getApexPosition())},h.prototype.uParamLine=function(e){var t=new c.Line,r=o.Vector3.clone(this._center),i=this._radius*Math.cos(e),n=this._radius*Math.sin(e);return o.Vector3.scaleAndAdd(r,r,this._xAxis,i),o.Vector3.scaleAndAdd(r,r,this._yAxis,n),t.set(r,this.evaluateDu(0,e)),t},h.prototype.getBoundingBox=function(e,t){if(e){var r=e[0],o=e[1],n=this.vParamLine(r).getBoundingBox(t);return n.include(this.vParamLine(o).getBoundingBox(t)),n}return new i.BoundingBox([-1/0,-1/0,-1/0],[1/0,1/0,1/0])},h.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._radius*=t,this._uScale*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},h.prototype.getRangeUnlimitedU=function(){return[-1/0,1/0]},h.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},h.prototype.isPeriodicUnlimitedU=function(){return!1},h.prototype.isPeriodicUnlimitedV=function(){return!0},h.prototype.isClosedUnlimitedU=function(){return!1},h.prototype.isClosedUnlimitedV=function(){return!0},h.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),radius:this.vectorToObject(e),axis:this.vectorToObject(this.getAxisDir()),uCoordScale:this.getUScale(),angle:this.getAngle(),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.Cone=h},1472:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Curve=void 0;var o=r(1972),i=r(9024),n=r(2468),s=r(5896),a=r(4728),c=function(){i.BaseGeometry.call(this),this._subrange=[]};(c.prototype=Object.create(i.BaseGeometry.prototype)).copy=function(e){i.BaseGeometry.prototype.copy.call(this,e),this._subrange=e.isLimited()?[e._subrange[0],e._subrange[1]]:[]},c.prototype.isLimited=function(){return this._subrange.length>0},c.prototype.getRange=function(){return this.isLimited()?this._subrange:this.getRangeUnlimited()},c.prototype.getRangeUnlimited=function(){console.warn(\"Curve.getRangeUnlimited : abstract method invoked!\")},c.prototype.limitRange=function(e){this._subrange=(0,s.limitRange)(this.getRange(),e,this.isPeriodic(),this.getPeriod())},c.prototype.unlimitRange=function(){this._subrange=[]},c.prototype.isPeriodic=function(){return this.isPeriodicUnlimited()&&!this.isLimited()},c.prototype.isPeriodicUnlimited=function(){console.warn(\"Curve.isPeriodicUnlimited : abstract method invoked!\")},c.prototype.getPeriod=function(){return this.isLimited()?void 0:this.getPeriodUnlimited()},c.prototype.getPeriodUnlimited=function(){if(this.isPeriodicUnlimited()){var e=this.getRangeUnlimited();return e[1]-e[0]}},c.prototype.isClosed=function(){if(this.isClosedUnlimited()){if(this.isLimited()){var e=this.getRangeUnlimited(),t=e[1]-e[0];return this._subrange[1]-this._subrange[0]>t-n.PARAMETER_SPACE_TOLERANCE}return!0}return!1},c.prototype.isClosedUnlimited=function(){console.warn(\"Curve.isClosedUnlimited : abstract method invoked!\")},c.prototype._restrictRangeToUnlimited=function(e){a.ConsoleUtils.assert(2===e.length),a.ConsoleUtils.assert(e[0]<=e[1]);var t=this.getRangeUnlimited(),r=[];if(this.isPeriodicUnlimited()){var i=t[1]-t[0];if(e[1]-e[0]>i-n.PARAMETER_SPACE_TOLERANCE)r.push([t[0],t[1]]);else{var c=(0,s.foldAbove)(e[0],t[0],i)-e[0];r.push([e[0]+c,e[1]+c]),r[0][1]>t[1]+n.PARAMETER_SPACE_TOLERANCE&&(r.push([t[0],r[0][1]-i]),r[0][1]=t[1])}}else{var u=Math.max(e[0],t[0]),l=Math.min(e[1],t[1]);u>t[1]?u<t[1]+o.FLOAT64_TOLERANCE&&r.push([t[1],t[1]]):l<t[0]?l>t[0]-o.FLOAT64_TOLERANCE&&r.push([t[0],t[0]]):r.push([u,l])}return r},c.prototype.transform=function(e){console.warn(\"Curve.transform : abstract method invoked! Doing nothing.\")},c.prototype.evaluatePosition=function(e){console.warn(\"Curve.evaluatePosition : abstract method invoked! Returning undefined.\")},c.prototype.evaluateDt=function(e){console.warn(\"Curve.evaluateDt : abstract method invoked! Returning undefined.\")},c.prototype.evaluateCurvature=function(e,t){var r=this.evaluateDt(e),i=this.evaluateDt(e+n.KERNEL_TOLERANCE);o.Vector3.sub(i,i,r);var s=o.Vector3.createFloat64();o.Vector3.scale(s,i,1/n.KERNEL_TOLERANCE),t&&(o.Vector3.copy(t,s),o.Vector3.normalize(t,t));var a=o.Vector3.squaredLength(r);return o.Vector3.cross(s,r,s),o.Vector3.length(s)/Math.pow(a,1.5)},c.prototype.tangentLength=function(e){return o.Vector3.length(this.evaluateDt(e))},c.prototype.suggestSplittingParam=function(e){console.warn(\"Curve.suggestSplittingParam : abstract method invoked! Returning undefined.\")},c.prototype.getTangentCone=function(e){console.warn(\"Curve.getTangentCone : abstract method invoked! Returning undefined.\")},c.prototype.closestToRayParam=function(e,t,r){console.warn(\"Curve.closestToRayParam : abstract method invoked! Returning undefined.\")},c.prototype.closestToPointParam=function(e,t){console.warn(\"Curve.closestToPointParam : abstract method invoked! Returning undefined.\")},c.prototype.getArcLength=function(e){console.warn(\"Curve.getArcLength : abstract method invoked!\")},c.prototype.getParameterFromArcLength=function(e,t){console.warn(\"Curve.getParameterFromArcLength : abstract method invoked!\")},c.prototype.getBoundingBox=function(e){console.warn(\"Curve.getBoundingBox : abstract method invoked! Returning undefined.\")},c.prototype.tessellate=function(e,t){console.warn(\"Curve.tessellate : abstract method invoked! Returning undefined.\")},t.Curve=c},3440:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Cylinder=void 0;var o=r(1972),i=r(3344),n=r(2468),s=r(412),a=r(1096),c=r(5512),u=r(4728),l=function(){s.Surface.call(this),this._center=o.Vector3.createFloat64(),this._radius=0,this._uScale=1,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(l.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.CYLINDER},l.prototype.clone=function(){var e=new l;return e.copy(this),e},l.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._radius=e._radius,this._uScale=e._uScale,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},l.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},l.prototype.set=function(e,t,r,i,s){o.Vector3.copy(this._center,e),u.ConsoleUtils.assert(t>n.KERNEL_TOLERANCE),this._radius=t,u.ConsoleUtils.assert(o.Vector3.squaredLength(r)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,r),void 0!==i&&o.Vector3.squaredLength(i)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?(u.ConsoleUtils.assert(o.Vector3.isOrthogonal(r,i,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,i)):(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._uScale=s||1,u.ConsoleUtils.assert(this._uScale>n.PARAMETER_SPACE_TOLERANCE),this._computeYAxis()},l.prototype.getRadius=function(){return this._radius},l.prototype.setRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._radius=e},l.prototype.getCenter=function(){return this._center},l.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},l.prototype.getAxisDir=function(){return this._zAxis},l.prototype.setAxisDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),(o.Vector3.squaredLength(this._xAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._xAxis,this._zAxis,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis()},l.prototype.getUvOriginDir=function(){return this._xAxis},l.prototype.setUvOriginDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},l.prototype.getUScale=function(){return this._uScale},l.prototype.setUScale=function(e){u.ConsoleUtils.assert(e>n.PARAMETER_SPACE_TOLERANCE),this._uScale=e},l.prototype.evaluatePosition=function(e,t){var r=this._radius*Math.cos(t),i=this._radius*Math.sin(t),n=this._uScale*e,s=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(s,s,this._xAxis,r),o.Vector3.scaleAndAdd(s,s,this._yAxis,i),o.Vector3.scaleAndAdd(s,s,this._zAxis,n),s},l.prototype.evaluateNormal=function(e,t){var r=Math.cos(t),i=Math.sin(t),n=o.Vector3.createFloat64();return o.Vector3.scale(n,this._xAxis,r),o.Vector3.scaleAndAdd(n,n,this._yAxis,i),n},l.prototype.evaluateDu=function(e,t){var r=o.Vector3.createFloat64();return o.Vector3.scale(r,this._zAxis,this._uScale),r},l.prototype.evaluateDv=function(e,t){var r=-this._radius*Math.sin(t),i=this._radius*Math.cos(t),n=o.Vector3.createFloat64();return o.Vector3.scale(n,this._xAxis,r),o.Vector3.scaleAndAdd(n,n,this._yAxis,i),n},l.prototype.closestParam=function(e){var t=o.Vector3.createFloat64();o.Vector3.sub(t,e,this._center);var r=o.Vector3.dot(t,this._xAxis),i=o.Vector3.dot(t,this._yAxis),s=o.Vector3.dot(t,this._zAxis)/this._uScale,a=0;return r*r+i*i>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE&&(a=Math.atan2(i,r)),{u:s,v:a}},l.prototype.vParamLine=function(e){var t=new c.Circle,r=o.Vector3.clone(this._center),i=e*this._uScale;o.Vector3.scaleAndAdd(r,r,this._zAxis,i);var n=o.Vector3.clone(this._xAxis);o.Vector3.scale(n,n,this._radius);var s=o.Vector3.clone(this._zAxis);return o.Vector3.negate(s,s),t.set(r,s,n),t},l.prototype.uParamLine=function(e){var t=new a.Line,r=o.Vector3.clone(this._center),i=this._radius*Math.cos(e),n=this._radius*Math.sin(e);return o.Vector3.scaleAndAdd(r,r,this._xAxis,i),o.Vector3.scaleAndAdd(r,r,this._yAxis,n),t.set(r,this.evaluateDu(0,e)),t},l.prototype.getBoundingBox=function(e,t){if(e){var r=e[0],o=e[1],n=this.vParamLine(r).getBoundingBox(t);return n.include(this.vParamLine(o).getBoundingBox(t)),n}return new i.BoundingBox([-1/0,-1/0,-1/0],[1/0,1/0,1/0])},l.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._radius*=t,this._uScale*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},l.prototype.getRangeUnlimitedU=function(){return[-1/0,1/0]},l.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},l.prototype.isPeriodicUnlimitedU=function(){return!1},l.prototype.isPeriodicUnlimitedV=function(){return!0},l.prototype.isClosedUnlimitedU=function(){return!1},l.prototype.isClosedUnlimitedV=function(){return!0},l.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),radius:this.vectorToObject(e),axis:this.vectorToObject(this.getAxisDir()),uCoordScale:this.getUScale(),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.Cylinder=l},7580:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Edge=void 0;var o=r(1972),i=r(9547),n=r(2468),s=r(4728),a=function(e){i.BaseTopology.call(this),this._curve=e,this._reversed=!1,this._vertices=[null,null],this._range=[0,0],this._precision=0,this._coedge=void 0,this._wire=void 0,this._tessellationPoints=[]};(a.prototype=Object.create(i.BaseTopology.prototype)).getTopologyType=function(){return n.TOPOLOGY_TYPES.EDGE},a.prototype.getCurveType=function(){return this._curve?this._curve.getGeometryType():void 0},a.prototype.clone=function(){var e=new a;return e._curve=this._curve?this._curve.clone():void 0,e._reversed=this._reversed,e._vertices[0]=this._vertices[0],e._vertices[1]=this._vertices[1],e._range[0]=this._range[0],e._range[1]=this._range[1],e._precision=this._precision,e._coedge=this._coedge,e._wire=this._wire,e._tessellationPoints=[],e},a.prototype.getCurve=function(){return this._curve},a.prototype.setCurve=function(e){this._curve=e},a.prototype.getArcLength=function(){var e=this.getRange();return this.isReversed()&&(e=[-e[1],-e[0]]),this._curve.getArcLength(e)},a.prototype.getVertices=function(){return this._vertices},a.prototype.getVertex=function(e){return s.ConsoleUtils.assert(0===e||1===e),this._vertices[e]},a.prototype.getStartVertex=function(){return this._vertices[0]},a.prototype.getEndVertex=function(){return this._vertices[1]},a.prototype.setCoedge=function(e){this._coedge=e},a.prototype.getCoedge=function(){return this._coedge},a.prototype.getCoedges=function(){for(var e=[],t=this._coedge;t;)e.push(t),(t=t.getPartner())===this._coedge&&(t=void 0);return e},a.prototype.setWire=function(e){this._wire=e},a.prototype.getWire=function(){return this._wire},a.prototype.getRange=function(){return this._range},a.prototype.setRange=function(e){s.ConsoleUtils.assert(2===e.length),this._range[0]=e[0],this._range[1]=e[1]},a.prototype.t0=function(){return this._range[0]},a.prototype.sett0=function(e){this._range[0]=e},a.prototype.t1=function(){return this._range[1]},a.prototype.sett1=function(e){this._range[1]=e},a.prototype.isClosed=function(){return this._curve&&this._vertices[0]&&this._vertices[0]===this._vertices[1]},a.prototype.getOtherVertex=function(e){return s.ConsoleUtils.assert(this._vertices[0]===e||this._vertices[1]===e),this._vertices[0]===e?this._vertices[1]:this._vertices[0]},a.prototype.getCommonVertex=function(e){var t=this.getStartVertex(),r=this.getEndVertex(),o=e.getStartVertex(),i=e.getEndVertex();return t===o||t===i?t:r===o||r===i?r:null},a.prototype.setVertex=function(e,t){s.ConsoleUtils.assert(0===e||1===e),t!==this._vertices[e]&&(this._vertices[e]&&this._vertices[0]!==this._vertices[1]&&this._vertices[e].removeEdge(this),this._vertices[e]=t,t&&this._vertices[e].addEdge(this))},a.prototype.setStartVertex=function(e){this.setVertex(0,e)},a.prototype.setEndVertex=function(e){this.setVertex(1,e)},a.prototype.getCoedgeForFace=function(e){for(var t=this._coedge;t;){if(t.getFace()===e)return t;if((t=t.getPartner())===this._coedge)break}},a.prototype.getOtherFace=function(e){var t=this.getCoedgeForFace(e);s.ConsoleUtils.assert(t);var r=t.getPartner();if(r&&r!==t)return r.getFace()},a.prototype.isReversed=function(){return this._reversed},a.prototype.setReversed=function(e){this._reversed=e},a.prototype.getPrecision=function(){return this._precision},a.prototype.setPrecision=function(e){s.ConsoleUtils.assert(e>=0),this._precision=e},a.prototype.evaluatePosition=function(e){return this.isReversed()&&(e=-e),this._curve.evaluatePosition(e)},a.prototype.evaluateDt=function(e){this.isReversed()&&(e=-e);var t=this._curve.evaluateDt(e);return this.isReversed()&&o.Vector3.negate(t,t),t},a.prototype.evaluateCurvature=function(e,t){return this.isReversed()&&(e=-e),this._curve.evaluateCurvature(e,t)},a.prototype.closestToPointParam=function(e,t){if(this._curve){var r=t||this.getRange();this.isReversed()&&(r=[-r[1],-r[0]]);var o=this._curve.closestToPointParam(e,r);return this.isReversed()?-o:o}},a.prototype.includesPoint=function(e){var t=Math.max(this.getPrecision(),n.KERNEL_TOLERANCE),r=this.closestToPointParam(e),i=this.evaluatePosition(r);return o.Vector3.squaredDistance(i,e)<t*t},a.prototype.distanceToPoint=function(e){var t=this.closestToPointParam(e),r=this.evaluatePosition(t);return o.Vector3.distance(r,e)},a.prototype.tessellate=function(e,t){var r,i;if(!1===this.isReversed())r=e||[this._range[0],this._range[1]];else if(e){r=new Array(e.length);for(var n=0;n<e.length;++n)r[n]=-e[e.length-1-n]}else r=[-this._range[1],-this._range[0]];var s,a=this._curve.tessellate(r,t);if(this._tessellationPoints.length!==a.positions.length)for(this._tessellationPoints=new Array(a.positions.length),n=0;n<a.positions.length;n++)this._tessellationPoints[n]=o.Vector3.createFloat64();if(!1===this.isReversed())for(s=a.offsets,i=0;i<a.positions.length;++i)o.Vector3.copy(this._tessellationPoints[i],a.positions[i]);else{for(i=0;i<a.positions.length;++i)o.Vector3.copy(this._tessellationPoints[i],a.positions[a.positions.length-1-i]);for(s=new Array(a.offsets.length),i=0;i<a.offsets.length;++i)s[i]=a.positions.length-1-a.offsets[a.offsets.length-1-i]}return{positions:this._tessellationPoints,offsets:s,tolerance:a.tolerance}},a.prototype.getBody=function(){return s.ConsoleUtils.assert(void 0===this._coedge||void 0===this._wire),this._coedge?this._coedge.getBody():this._wire?this._wire.getBody():void 0},a.prototype.collectFaces=function(e){e=e||new Set;for(var t=this._coedge;t;)t.collectFaces(e),(t=t.getPartner())===this._coedge&&(t=void 0);return e},a.prototype.collectEdges=function(e){return(e=e||new Set).add(this),e},a.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._vertices.length;++t)this._vertices[t]&&e.add(this._vertices[t]);return e},a.prototype.getBoundingBox=function(){var e=this.getRange();return!0===this.isReversed()&&(e=[-e[1],-e[0]]),this._curve.getBoundingBox(e)},a.prototype.closestToRayParam=function(e,t,r){var o=this.getRange();!0===this.isReversed()&&(o=[-o[1],-o[0]]);var i=this._curve.closestToRayParam(e,t,o,r);return!0===this.isReversed()?-i:i},a.prototype.toString=function(){return n.GEOMETRY_TYPES.toString(this.getCurveType())+\" \"+String(this.getStartVertex())+\" -> \"+String(this.getEndVertex())},a.prototype.getLoops=function(){const e=this.getCoedges(),t=new Set;for(let r=0;r<e.length;r++)t.add(e[r].getLoop());return Array.from(t)},a.prototype.toObject=function(){return{vertex0:this.refToString(this._vertices[0]),vertex1:this.refToString(this._vertices[1]),precision:this._precision,range:this.rangeToObject(this._range,!0),reversed:this._reversed,geometry:this.refToString(this._curve),attributes:this.refsToStrings(this._attributes)}},a.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._vertices[0],this._vertices[1],this._curve,this._attributes])},t.Edge=a},8972:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Ellipse=void 0;var o=r(1972),i=r(3344),n=r(2355),s=r(2468),a=r(1472),c=r(5896),u=r(1e3),l=r(4728),h=r(4336),d=function(){a.Curve.call(this),this._center=o.Vector3.createFloat64FromValues(0,0,0),this._normal=o.Vector3.createFloat64FromValues(0,0,1),this._xAxis=o.Vector3.createFloat64FromValues(1,0,0),this._yAxis=o.Vector3.createFloat64FromValues(0,1,0),this._majorRadius=0,this._minorRadius=0,this._tessellationCache=new h.TessellationCache};(d.prototype=Object.create(a.Curve.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.ELLIPSE},d.prototype.set=function(e,t,r,i){l.ConsoleUtils.assert(o.Vector3.squaredLength(t)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),l.ConsoleUtils.assert(o.Vector3.squaredLength(r)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),l.ConsoleUtils.assert(o.Vector3.isOrthogonal(t,r,s.KERNEL_ANGULAR_TOLERANCE)),l.ConsoleUtils.assert(i>o.FLOAT64_TOLERANCE&&i<=1,\"Invalid radius ratio\"),o.Vector3.copy(this._center,e),o.Vector3.normalize(this._normal,t),o.Vector3.normalize(this._xAxis,r),this._majorRadius=o.Vector3.length(r),this._minorRadius=this._majorRadius*i,this._computeYAxis(),this._dirtyTessellation()},d.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._normal,this._xAxis)},d.prototype.getCenter=function(){return this._center},d.prototype.getNormal=function(){return this._normal},d.prototype.setCenter=function(e){o.Vector3.copy(this._center,e),this._dirtyTessellation()},d.prototype.setNormal=function(e){l.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),this._normal!==e&&(o.Vector3.normalize(this._normal,e),o.Vector3.isOrthogonal(this._xAxis,this._normal)||(o.Vector3.computeOrthogonal(this._xAxis,this._normal),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis(),this._dirtyTessellation())},d.prototype.setMajorAxis=function(e){l.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),l.ConsoleUtils.assert(o.Vector3.isOrthogonal(e,this._normal,s.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,e),this._computeYAxis(),this._dirtyTessellation()},d.prototype.getMajorAxis=function(){return this._xAxis},d.prototype.getMinorAxis=function(){return this._yAxis},d.prototype.clone=function(){var e=new d;return e.copy(this),e},d.prototype.copy=function(e){a.Curve.prototype.copy.call(this,e),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),this._majorRadius=e._majorRadius,this._minorRadius=e._minorRadius,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._normal,e._normal)},d.prototype.getMajorRadius=function(){return this._majorRadius},d.prototype.getMinorRadius=function(){return this._minorRadius},d.prototype.setMajorRadius=function(e){l.ConsoleUtils.assert(e>s.KERNEL_TOLERANCE),this._majorRadius=e,this._dirtyTessellation()},d.prototype.setMinorRadius=function(e){l.ConsoleUtils.assert(e>s.KERNEL_TOLERANCE),this._minorRadius=e,this._dirtyTessellation()},d.prototype.getRangeUnlimited=function(){return[-Math.PI,Math.PI]},d.prototype.isPeriodicUnlimited=function(){return!0},d.prototype.isClosedUnlimited=function(){return!0},d.prototype._dirtyTessellation=function(){this._tessellationCache.setDirty(!0)},d.prototype._evaluateArcLengthIntegrand=function(e){var t=this._majorRadius*Math.sin(e),r=this._minorRadius*Math.cos(e);return Math.sqrt(t*t+r*r)},d.prototype.getArcLength=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());for(var t=e[0],r=0;t<e[1]+s.PARAMETER_SPACE_TOLERANCE;){for(var o=t,i=[this._evaluateArcLengthIntegrand(t)];i.length<5&&t<e[1]+s.PARAMETER_SPACE_TOLERANCE;)t+=.01,i.push(this._evaluateArcLengthIntegrand(t));switch(o=t-o,i.length){case 1:break;case 2:r+=(i[0]+i[1])*o/2;break;case 3:r+=(i[0]+4*i[1]+i[2])*o/6;break;case 4:r+=(i[0]+3*i[1]+3*i[2]+i[3])*o/8;break;default:r+=(7*i[0]+32*i[1]+12*i[2]+32*i[3]+7*i[4])*o/90}(o=t-e[1])>s.PARAMETER_SPACE_TOLERANCE&&(r-=this._evaluateArcLengthIntegrand(e[1])*o)}return r},d.prototype.getParameterFromArcLength=function(e,t){return void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited()),(0,u.invertIntegral1D)(this._evaluateArcLengthIntegrand.bind(this),e,t)},d.prototype.evaluatePosition=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,Math.cos(e)*this._majorRadius),o.Vector3.scaleAndAdd(t,t,this._yAxis,Math.sin(e)*this._minorRadius),o.Vector3.add(t,t,this._center),t},d.prototype.evaluateDt=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,-Math.sin(e)*this._majorRadius),o.Vector3.scaleAndAdd(t,t,this._yAxis,Math.cos(e)*this._minorRadius),t},d.prototype.evaluateDtt=function(e){var t=o.Vector3.createFloat64FromValues(0,0,0);return o.Vector3.scaleAndAdd(t,t,this._xAxis,-Math.cos(e)*this._majorRadius),o.Vector3.scaleAndAdd(t,t,this._yAxis,-Math.sin(e)*this._minorRadius),t},d.prototype._getFullTessellation=function(e){var t=[-Math.PI,-Math.PI/2,0,Math.PI/2,Math.PI],r=h.CurveTessellator.getAdaptiveRenderPoints(this,e,[-Math.PI,Math.PI],t);return r.didRetessellate=!0,r},d.prototype.tessellate=function(e,t){return t=t||s.TESSELLATION.LINEAR_PRECISION,this._tessellationCache.getTessellation(e,this,t,this._getFullTessellation.bind(this))},d.prototype.getBoundingBox=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=(0,c.minMaxCosSinFunc)(this._xAxis[0]*this._majorRadius,this._yAxis[0]*this._minorRadius,this._center[0],e),r=(0,c.minMaxCosSinFunc)(this._xAxis[1]*this._majorRadius,this._yAxis[1]*this._minorRadius,this._center[1],e),o=(0,c.minMaxCosSinFunc)(this._xAxis[2]*this._majorRadius,this._yAxis[2]*this._minorRadius,this._center[2],e),n=new i.BoundingBox;return n.min[0]=t[0],n.max[0]=t[1],n.min[1]=r[0],n.max[1]=r[1],n.min[2]=o[0],n.max[2]=o[1],n},d.prototype.getTangentCone=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=this.evaluateDt(e[0]);o.Vector3.normalize(t,t);var r=this.evaluateDt(e[1]);o.Vector3.normalize(r,r);var i=o.Vector3.createFloat64(),a=o.Vector3.dot(t,r),u=o.Vector3.dot(o.Vector3.cross(i,t,r),this._normal),l=Math.atan2(u,a);l<0?l+=c.PI2:e[1]-e[0]>c.PI2-s.PARAMETER_SPACE_TOLERANCE&&(l=c.PI2),l*=.5,a=Math.cos(l),u=Math.sin(l);var h=o.Vector3.clone(t);return o.Vector3.scale(h,h,a),o.Vector3.cross(i,this._normal,t),o.Vector3.scaleAndAdd(h,h,i,u),new n.TangentCone(h,l)},d.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._normal,this._normal,e),o.Vector3.scale(this._xAxis,this._xAxis,this._majorRadius),o.Vector3.scale(this._yAxis,this._yAxis,this._minorRadius),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),this._majorRadius=o.Vector3.length(this._xAxis),this._minorRadius=o.Vector3.length(this._yAxis),o.Vector3.normalize(this._normal,this._normal),o.Vector3.normalize(this._xAxis,this._xAxis),this._computeYAxis(),this._dirtyTessellation()},d.prototype.closestToRayParam=function(e,t,r){var i=o.Vector3.createFloat64();o.Vector3.sub(i,this._center,e);var n=o.Vector3.dot(i,this._normal)/o.Vector3.dot(t,this._normal);if(isFinite(n)){var s=o.Vector3.createFloat64();return o.Vector3.scaleAndAdd(s,e,t,n),this.closestToPointParam(s,r)}},d.prototype.isCircular=function(){return Math.abs(this._majorRadius-this._minorRadius)<s.KERNEL_TOLERANCE},d.prototype.closestToPointParam=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());var r=o.Vector3.createFloat64();o.Vector3.sub(r,e,this._center);var i=o.Vector3.dot(r,this._xAxis),n=o.Vector3.dot(r,this._yAxis);if(i*i+n*n<s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE){var a=.5*Math.PI;if(((a=(0,c.adjustParameterToPeriodicRange)(a,t,c.PI2))<t[0]||a>t[1])&&(a=(0,c.adjustParameterToPeriodicRange)(.5*-Math.PI,t,c.PI2)),a<t[0]||a>t[1]){var l=this.evaluatePosition(t[0]),h=this.evaluatePosition(t[1]);a=o.Vector3.squaredDistance(this._center,l)<o.Vector3.squaredDistance(this._center,h)?t[0]:t[1]}return a}var d=this._majorRadius,p=this._minorRadius,g=Math.atan2(d*n,p*i),f=this.evaluatePosition(g);(o.Vector3.sub(f,f,this._center),i*i+n*n<o.Vector3.squaredLength(f))&&(g=(n<s.KERNEL_TOLERANCE?-1:1)*Math.acos(i/d));var v,_=o.FLOAT64_TOLERANCE,y=function(t){var r=this.evaluatePosition(t),o=this.evaluateDt(t),i=this.evaluateDtt(t),n=[r[0]-e[0],r[1]-e[1],r[2]-e[2]];return{val:2*(n[0]*o[0]+n[1]*o[1]+n[2]*o[2]),deriv:2*(n[0]*i[0]+n[1]*i[1]+n[2]*i[2]+(o[0]*o[0]+o[1]*o[1]+o[2]*o[2]))}},m=(0,u.newtonRaphson1D)(y.bind(this),void 0,g,_,32);(m=(0,c.adjustParameterToPeriodicRange)(m,t,c.PI2))<t[0]||m>t[1]?(m=(0,u.newtonRaphson1D)(y.bind(this),void 0,-m,_,32),v=(m=(0,c.adjustParameterToPeriodicRange)(m,t,c.PI2))<t[0]||m>t[1]?1/0:o.Vector3.squaredDistance(e,this.evaluatePosition(m))):v=o.Vector3.squaredDistance(e,this.evaluatePosition(m));var E=o.Vector3.squaredDistance(e,this.evaluatePosition(t[0])),x=o.Vector3.squaredDistance(e,this.evaluatePosition(t[1]));return E<v&&(v=E,m=t[0]),x<v&&(m=t[1]),m},d.prototype.suggestSplittingParam=function(e){},d.prototype.toObject=function(){const e=this.evaluatePosition(0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),majorRadius:this.vectorToObject(e),normal:this.vectorToObject(this._normal),radiusRatio:this.getMinorRadius()/this.getMajorRadius(),range:this.rangeToObject(this.getRange(),this.isLimited())}},t.Ellipse=d},2956:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.EllipticalCone=void 0;var o=r(1972),i=r(3344),n=r(1e3),s=r(2468),a=r(412),c=r(3565),u=r(1096),l=r(8972),h=r(4728),d=function(){a.Surface.call(this),this._center=o.Vector3.createFloat64(),this._majorRadius=0,this._minorRadius=0,this._angle=0,this._uScale=1,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(d.prototype=Object.create(a.Surface.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.ELLIPTICAL_CONE},d.prototype.clone=function(){var e=new d;return e.copy(this),e},d.prototype.copy=function(e){a.Surface.prototype.copy.call(this,e),this._majorRadius=e._majorRadius,this._minorRadius=e._minorRadius,this._angle=e._angle,this._uScale=e._uScale,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},d.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},d.prototype.set=function(e,t,r,i,n,a){o.Vector3.copy(this._center,e),this._majorRadius=o.Vector3.length(t),h.ConsoleUtils.assert(this._majorRadius>s.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,t),h.ConsoleUtils.assert(r<=1),this._minorRadius=r*this._majorRadius,h.ConsoleUtils.assert(this._minorRadius>s.KERNEL_TOLERANCE),h.ConsoleUtils.assert(o.Vector3.squaredLength(i)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),h.ConsoleUtils.assert(o.Vector3.isOrthogonal(i,t,s.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._zAxis,i),h.ConsoleUtils.assert(Math.abs(n)<Math.PI/2),this._angle=n,this._uScale=a||1,h.ConsoleUtils.assert(this._uScale>s.PARAMETER_SPACE_TOLERANCE),this._computeYAxis()},d.prototype.getMajorRadius=function(){return this._majorRadius},d.prototype.setMajorRadius=function(e){h.ConsoleUtils.assert(e>s.KERNEL_TOLERANCE),this._majorRadius=e},d.prototype.getMinorRadius=function(){return this._minorRadius},d.prototype.setMinorRadius=function(e){h.ConsoleUtils.assert(e>s.KERNEL_TOLERANCE),this._minorRadius=e},d.prototype.getMajorAxis=function(){return this._xAxis},d.prototype.setMajorAxis=function(e){h.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},d.prototype.getCenter=function(){return this._center},d.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},d.prototype.getAxisDir=function(){return this._zAxis},d.prototype.setAxisDir=function(e){h.ConsoleUtils.assert(o.Vector3.squaredLength(e)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),this._computeYAxis()},d.prototype.getUScale=function(){return this._uScale},d.prototype.setUScale=function(e){h.ConsoleUtils.assert(e>s.PARAMETER_SPACE_TOLERANCE),this._uScale=e},d.prototype.getAngle=function(){return this._angle},d.prototype.setAngle=function(e){h.ConsoleUtils.assert(Math.abs(e)<Math.PI/2-s.KERNEL_ANGULAR_TOLERANCE),this._angle=e},d.prototype.isCylinder=function(){return Math.abs(this._angle)<s.KERNEL_ANGULAR_TOLERANCE},d.prototype.getApexParam=function(){return this.isCylinder()?void 0:-this._majorRadius/(this._uScale*Math.sin(this._angle))},d.prototype.getApexPosition=function(){if(!this.isCylinder()){var e=-this._majorRadius/Math.tan(this._angle),t=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(t,t,this._zAxis,e),t}},d.prototype.evaluatePosition=function(e,t){var r=1+e*this._uScale*Math.sin(this._angle)/this._majorRadius,i=r*this._majorRadius*Math.cos(t),n=r*this._minorRadius*Math.sin(t),s=e*this._uScale*Math.cos(this._angle),a=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(a,a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},d.prototype.evaluateNormal=function(e,t){var r=Math.cos(this._angle),i=r*this._minorRadius*Math.cos(t),n=r*this._majorRadius*Math.sin(t),s=-Math.sin(this._angle)*this._minorRadius,a=o.Vector3.createFloat64();return o.Vector3.scale(a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),o.Vector3.normalize(a,a),a},d.prototype.evaluateDu=function(e,t){var r=this._uScale*Math.sin(this._angle)/this._majorRadius,i=r*this._majorRadius*Math.cos(t),n=r*this._minorRadius*Math.sin(t),s=this._uScale*Math.cos(this._angle),a=o.Vector3.createFloat64();return o.Vector3.scale(a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},d.prototype.evaluateDv=function(e,t){var r=1+e*this._uScale*Math.sin(this._angle)/this._majorRadius,i=-r*this._majorRadius*Math.sin(t),n=r*this._minorRadius*Math.cos(t),s=o.Vector3.createFloat64();return o.Vector3.scale(s,this._xAxis,i),o.Vector3.scaleAndAdd(s,s,this._yAxis,n),s},d.prototype.closestParam=function(e){var t,r;if(this.isCylinder()){var i=o.Vector3.createFloat64();o.Vector3.sub(i,e,this._center),t=o.Vector3.dot(i,this._zAxis)/this._uScale,r=this.vParamLine(t).closestToPointParam(e)}else{var a=o.Vector3.createFloat64();o.Vector3.sub(a,e,this.getApexPosition());var c=o.Vector3.dot(a,this._xAxis),u=o.Vector3.dot(a,this._yAxis),l=o.Vector3.dot(a,this._zAxis),h=this._uScale*Math.sin(this._angle),d=h*this._minorRadius/this._majorRadius,p=this._uScale*Math.cos(this._angle),g=this._majorRadius/h,f=function(e,t,r,i,a,c){if(i*i+a*a+c*c<s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE)return{u:0,v:0};var u=o.FLOAT64_TOLERANCE,l=c*e>=0?1:-1,h=(i*l>=0?.25:.75)*(a*l>=0?1:-1),d=h*Math.PI,p=[(h-.25)*Math.PI,(h+.25)*Math.PI],g=(0,n.newtonRaphson1D)((function(o){var n=Math.sin(o),s=Math.cos(o),u=e*(t*t+r*r)*i,l=t*(e*e+r*r)*a,h=r*(e*e-t*t)*c;return{val:u*n-l*s-h*n*s,deriv:u*s+l*n-h*(s*s-n*n)}}),p,d,u,32),f=e*Math.cos(g),v=t*Math.sin(g);return{u:(f*i+v*a+r*c)/(f*f+v*v+r*r),v:g}}(h,d,p,c,u,l);t=f.u-g,r=f.v}return{u:t,v:r}},d.prototype.vParamLine=function(e){var t=this._majorRadius+e*this._uScale*Math.sin(this._angle);if(Math.abs(t)>s.KERNEL_TOLERANCE){var r=new l.Ellipse,i=o.Vector3.clone(this._center),n=e*this._uScale*Math.cos(this._angle);o.Vector3.scaleAndAdd(i,i,this._zAxis,n);var a=o.Vector3.clone(this._xAxis);o.Vector3.scale(a,a,t);var u=o.Vector3.clone(this._zAxis);return o.Vector3.negate(u,u),r.set(i,u,a,this._minorRadius/this._majorRadius),r}return new c.Point(this.getApexPosition())},d.prototype.uParamLine=function(e){var t=new u.Line,r=o.Vector3.clone(this._center),i=this._majorRadius*Math.cos(e),n=this._minorRadius*Math.sin(e);return o.Vector3.scaleAndAdd(r,r,this._xAxis,i),o.Vector3.scaleAndAdd(r,r,this._yAxis,n),t.set(r,this.evaluateDu(0,e)),t},d.prototype.getBoundingBox=function(e,t){if(e){var r=e[0],o=e[1],n=this.vParamLine(r).getBoundingBox(t);return n.include(this.vParamLine(o).getBoundingBox(t)),n}return new i.BoundingBox([-1/0,-1/0,-1/0],[1/0,1/0,1/0])},d.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._majorRadius*=t,this._minorRadius*=t,this._uScale*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},d.prototype.getRangeUnlimitedU=function(){return[-1/0,1/0]},d.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},d.prototype.isPeriodicUnlimitedU=function(){return!1},d.prototype.isPeriodicUnlimitedV=function(){return!0},d.prototype.isClosedUnlimitedU=function(){return!1},d.prototype.isClosedUnlimitedV=function(){return!0},d.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),majorRadius:this.vectorToObject(e),axis:this.vectorToObject(this.getAxisDir()),uCoordScale:this.getUScale(),radiusRatio:this.getMinorRadius()/this.getMajorRadius(),angle:this.getAngle(),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.EllipticalCone=d},8360:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.EllipticalCylinder=void 0;var o=r(1972),i=r(3344),n=r(2468),s=r(412),a=r(1096),c=r(8972),u=r(4728),l=function(){s.Surface.call(this),this._center=o.Vector3.createFloat64(),this._majorRadius=0,this._minorRadius=0,this._uScale=1,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(l.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.ELLIPTICAL_CYLINDER},l.prototype.clone=function(){var e=new l;return e.copy(this),e},l.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._majorRadius=e._majorRadius,this._minorRadius=e._minorRadius,this._uScale=e._uScale,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},l.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},l.prototype.set=function(e,t,r,i,s){o.Vector3.copy(this._center,e),this._majorRadius=o.Vector3.length(t),u.ConsoleUtils.assert(this._majorRadius>n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,t),u.ConsoleUtils.assert(r<=1),this._minorRadius=r*this._majorRadius,u.ConsoleUtils.assert(this._minorRadius>n.KERNEL_TOLERANCE),u.ConsoleUtils.assert(o.Vector3.squaredLength(i)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),u.ConsoleUtils.assert(o.Vector3.isOrthogonal(i,t,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._zAxis,i),this._uScale=s||1,u.ConsoleUtils.assert(this._uScale>n.PARAMETER_SPACE_TOLERANCE),this._computeYAxis()},l.prototype.getMajorRadius=function(){return this._majorRadius},l.prototype.setMajorRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._majorRadius=e},l.prototype.getMinorRadius=function(){return this._minorRadius},l.prototype.setMinorRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._minorRadius=e},l.prototype.getMajorAxis=function(){return this._xAxis},l.prototype.setMajorAxis=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},l.prototype.getCenter=function(){return this._center},l.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},l.prototype.getAxisDir=function(){return this._zAxis},l.prototype.setAxisDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),this._computeYAxis()},l.prototype.getUScale=function(){return this._uScale},l.prototype.setUScale=function(e){u.ConsoleUtils.assert(e>n.PARAMETER_SPACE_TOLERANCE),this._uScale=e},l.prototype.evaluatePosition=function(e,t){var r=this._majorRadius*Math.cos(t),i=this._minorRadius*Math.sin(t),n=this._uScale*e,s=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(s,s,this._xAxis,r),o.Vector3.scaleAndAdd(s,s,this._yAxis,i),o.Vector3.scaleAndAdd(s,s,this._zAxis,n),s},l.prototype.evaluateNormal=function(e,t){var r=this._minorRadius*Math.cos(t),i=this._majorRadius*Math.sin(t),n=Math.sqrt(r*r+i*i),s=o.Vector3.createFloat64();return o.Vector3.scale(s,this._xAxis,r/n),o.Vector3.scaleAndAdd(s,s,this._yAxis,i/n),s},l.prototype.evaluateDu=function(e,t){var r=o.Vector3.createFloat64();return o.Vector3.scale(r,this._zAxis,this._uScale),r},l.prototype.evaluateDv=function(e,t){var r=-this._majorRadius*Math.sin(t),i=this._minorRadius*Math.cos(t),n=o.Vector3.createFloat64();return o.Vector3.scale(n,this._xAxis,r),o.Vector3.scaleAndAdd(n,n,this._yAxis,i),n},l.prototype.closestParam=function(e){var t=o.Vector3.createFloat64();o.Vector3.sub(t,e,this._center);var r=o.Vector3.dot(t,this._zAxis)/this._uScale;return{u:r,v:this.vParamLine(r).closestToPointParam(e)}},l.prototype.vParamLine=function(e){var t=new c.Ellipse,r=o.Vector3.clone(this._center),i=e*this._uScale;o.Vector3.scaleAndAdd(r,r,this._zAxis,i);var n=o.Vector3.clone(this._xAxis);o.Vector3.scale(n,n,this._majorRadius);var s=o.Vector3.clone(this._zAxis);return o.Vector3.negate(s,s),t.set(r,s,n,this._minorRadius/this._majorRadius),t},l.prototype.uParamLine=function(e){var t=new a.Line,r=o.Vector3.clone(this._center),i=this._majorRadius*Math.cos(e),n=this._minorRadius*Math.sin(e);return o.Vector3.scaleAndAdd(r,r,this._xAxis,i),o.Vector3.scaleAndAdd(r,r,this._yAxis,n),t.set(r,this.evaluateDu(0,e)),t},l.prototype.getBoundingBox=function(e,t){if(e){var r=e[0],o=e[1],n=this.vParamLine(r).getBoundingBox(t);return n.include(this.vParamLine(o).getBoundingBox(t)),n}return new i.BoundingBox([-1/0,-1/0,-1/0],[1/0,1/0,1/0])},l.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._majorRadius*=t,this._minorRadius*=t,this._uScale*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},l.prototype.getRangeUnlimitedU=function(){return[-1/0,1/0]},l.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},l.prototype.isPeriodicUnlimitedU=function(){return!1},l.prototype.isPeriodicUnlimitedV=function(){return!0},l.prototype.isClosedUnlimitedU=function(){return!1},l.prototype.isClosedUnlimitedV=function(){return!0},l.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this._center),majorRadius:this.vectorToObject(e),axis:this.vectorToObject(this.getAxisDir()),uCoordScale:this.getUScale(),radiusRatio:this.getMinorRadius()/this.getMajorRadius(),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.EllipticalCylinder=l},6776:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Face=void 0;var o=r(1972),i=r(9547),n=r(2468),s=r(6120),a=function(e){i.BaseTopology.call(this),this._surface=e,this._reversed=!1,this._loops=[],this._shell=void 0};(a.prototype=Object.create(i.BaseTopology.prototype)).getTopologyType=function(){return n.TOPOLOGY_TYPES.FACE},a.prototype.getSurfaceType=function(){return this._surface?this._surface.getGeometryType():void 0},a.prototype.clone=function(){var e=new a;return e._surface=this._surface?this._surface.clone():void 0,e._reversed=this._reversed,e.setLoops(this._loops),e._shell=this._shell,e._vertexUvData=void 0,e},a.prototype.getSurface=function(){return this._surface},a.prototype.setSurface=function(e){this._surface=e},a.prototype.getShell=function(){return this._shell},a.prototype.setShell=function(e){this._shell=e},a.prototype.getLoops=function(){return this._loops},a.prototype.setLoops=function(e){this._loops=new Array(e.length);for(var t=0;t<e.length;++t)this._loops[t]=e[t]},a.prototype.addLoop=function(e){this._loops?this._loops.push(e):this._loops=[e],e.setFace(this)},a.prototype.addLoops=function(e){this._loops||(this._loops=[]);for(var t=0;t<e.length;++t)e[t].setFace(this);this._loops=this._loops.concat(e)},a.prototype.removeLoop=function(e){var t=this._loops.indexOf(e);return t>-1&&(this._loops.splice(t,1),e.getFace()===this&&e.setFace(void 0),!0)},a.prototype.isReversed=function(){return this._reversed},a.prototype.setReversed=function(e){this._reversed=e},a.prototype.getVertices=function(){return Array.from(this.collectVertices())},a.prototype.evaluatePosition=function(e,t){return this._surface.evaluatePosition(e,t)},a.prototype.evaluateNormal=function(e,t){var r=this._surface.evaluateNormal(e,t);return!0===this.isReversed()&&o.Vector3.negate(r,r),r},a.prototype.getBody=function(){return this._shell?this._shell.getBody():void 0},a.prototype.collectFaces=function(e){return(e=e||new Set).add(this),e},a.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._loops.length;++t)this._loops[t].collectEdges(e);return e},a.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._loops.length;++t)this._loops[t].collectVertices(e);return e},a.prototype.getBoundingBox=function(){var e=this._surface.getRangeU(),t=this._surface.getRangeV();return isFinite(e[0])&&isFinite(e[1])||(s.DebugUtils.warn(\"Face.getBoundingBox: Surface is unbounded in u.\"),e=[0,1]),isFinite(t[0])&&isFinite(t[1])||(s.DebugUtils.warn(\"Face.getBoundingBox: Surface is unbounded in v.\"),t=[0,1]),this._surface.getBoundingBox(e,t)},a.prototype.closestParam=function(e){return this._surface.closestParam(e)},a.prototype.isPlanarFace=function(){return this.getSurfaceType()===n.GEOMETRY_TYPES.PLANE},a.prototype.toObject=function(){return{loops:this.refsToStrings(this._loops),reversed:this._reversed,geometry:this.refToString(this._surface),attributes:this.refsToStrings(this._attributes)}},a.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._loops,this._surface,this._attributes])},t.Face=a},1096:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Line=void 0;var o=r(1972),i=r(3344),n=r(2355),s=r(2468),a=r(1472),c=r(5896),u=r(4728),l=function(){a.Curve.call(this),this._position=o.Vector3.createFloat64FromValues(0,0,0),this._direction=o.Vector3.createFloat64FromValues(1,0,0)};(l.prototype=Object.create(a.Curve.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.LINE},l.prototype.set=function(e,t){u.ConsoleUtils.assert(o.Vector3.squaredLength(t)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),o.Vector3.copy(this._position,e),o.Vector3.copy(this._direction,t)},l.prototype.clone=function(){var e=new l;return e.copy(this),e},l.prototype.tessellate=function(e,t){var r={positions:[],offsets:[],tolerance:0};r.offsets.push(0);var o=e[0];r.positions.push(this.evaluatePosition(o));for(var i=1;i<e.length;++i){var n=e[i];r.positions.push(this.evaluatePosition(n)),r.offsets.push(r.positions.length-1),o=n}return r},l.prototype.copy=function(e){a.Curve.prototype.copy.call(this,e),o.Vector3.copy(this._position,e._position),o.Vector3.copy(this._direction,e._direction)},l.prototype.getRangeUnlimited=function(){return[-1/0,1/0]},l.prototype.isPeriodicUnlimited=function(){return!1},l.prototype.isClosedUnlimited=function(){return!1},l.prototype.evaluatePosition=function(e){var t=o.Vector3.createFloat64();return o.Vector3.scaleAndAdd(t,this._position,this._direction,e)},l.prototype.evaluateDt=function(e){return o.Vector3.clone(this._direction)},l.prototype.tangentLength=function(e){return o.Vector3.length(this._direction)},l.prototype.getTangentCone=function(e){var t=o.Vector3.createFloat64();return new n.TangentCone(o.Vector3.normalize(t,this.evaluateDt(0)),0)},l.prototype.getArcLength=function(e){return void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited()),isFinite(e[0])&&isFinite(e[1])?(e[1]-e[0])*o.Vector3.length(this._direction):1/0},l.prototype.getParameterFromArcLength=function(e,t){if(void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited()),isFinite(t[0])&&isFinite(t[1])){var r=t[0]+e/o.Vector3.length(this._direction);return(0,c.clamp)(r,t[0],t[1])}return NaN},l.prototype.getBoundingBox=function(e){void 0===e?e=this.getRange():0===e.length&&(e=this.getRangeUnlimited());var t=new i.BoundingBox;return isFinite(e[0])&&isFinite(e[1])?(t.includePoint(this.evaluatePosition(e[0])),t.includePoint(this.evaluatePosition(e[1]))):(t.includePoint([1/0,1/0,1/0]),t.includePoint([-1/0,-1/0,-1/0])),t},l.prototype.closestToRayParam=function(e,t,r,i){var n=o.Vector3.createFloat64();o.Vector3.sub(n,this._position,e);var s=o.Vector3.squaredLength(this._direction),a=o.Vector3.squaredLength(t),c=o.Vector3.dot(this._direction,t),u=o.Vector3.dot(n,this._direction),l=o.Vector3.dot(n,t),h=s*a-c*c,d=(c*l-a*u)/h,p=(c*u-s*l)/h;if(isFinite(d)&&isFinite(p)){if(r)if(d<r[0]){if(d=r[0],void 0!==i){var g=this.evaluatePosition(r[0]),f=o.Vector3.createFloat64();o.Vector3.sub(f,g,e),p=o.Vector3.dot(f,t)/a}}else if(d>r[1]&&(d=r[1],void 0!==i)){var v=this.evaluatePosition(r[1]);f=o.Vector3.createFloat64();o.Vector3.sub(f,v,e),p=o.Vector3.dot(f,t)/a}if(void 0!==i){var _=this.evaluatePosition(d),y=o.Vector3.createFloat64();if(o.Vector3.scaleAndAdd(y,e,t,p),o.Vector3.squaredDistance(_,y)>i*i)return}return d}},l.prototype.setFromEndpoints=function(e,t){u.ConsoleUtils.assert(o.Vector3.squaredDistance(e,t)>s.KERNEL_TOLERANCE*s.KERNEL_TOLERANCE),this._position=o.Vector3.clone(e),o.Vector3.normalize(this._direction,o.Vector3.sub(this._direction,t,e)),this.unlimitRange()},l.prototype.transform=function(e){o.Vector3.transformMatrix44(this._position,this._position,e),o.Vector3.transformAsDirectionMatrix44(this._direction,this._direction,e)},l.prototype.closestToPointParam=function(e,t){void 0===t?t=this.getRange():0===t.length&&(t=this.getRangeUnlimited());var r=o.Vector3.createFloat64();o.Vector3.sub(r,e,this._position);var i=this._direction,n=o.Vector3.dot(r,i)/o.Vector3.squaredLength(i);return isFinite(t[0])&&isFinite(t[1])?(0,c.clamp)(n,t[0],t[1]):n},l.prototype.suggestSplittingParam=function(e){},l.prototype.toObject=function(){return{position:this.vectorToObject(this._position),direction:this.vectorToObject(this._direction),range:this.rangeToObject(this.getRange(),this.isLimited())}},t.Line=l},4524:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Loop=void 0;var o=r(9547),i=r(2468),n=function(){o.BaseTopology.call(this),this._coedges=[],this._face=void 0};(n.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.LOOP},n.prototype.getFace=function(){return this._face},n.prototype.setFace=function(e){this._face=e},n.prototype.getCoedges=function(){return this._coedges},n.prototype.setCoedges=function(e){this._coedges=new Array(e.length);for(var t=0;t<e.length;++t)this._coedges[t]=e[t]},n.prototype.addCoedge=function(e){this._coedges?this._coedges.push(e):this._coedges=[e],e.setLoop(this)},n.prototype.addCoedges=function(e){this._coedges||(this._coedges=[]);for(var t=0;t<e.length;++t)e[t].setLoop(this);this._coedges=this._coedges.concat(e)},n.prototype.removeCoedge=function(e){var t=this._coedges.indexOf(e);return t>-1&&(this._coedges.splice(t,1),e.getLoop()===this&&e.setLoop(void 0),!0)},n.prototype.getBody=function(){return this._face?this._face.getBody():void 0},n.prototype.collectFaces=function(e){return e=e||new Set,this._face&&e.add(this._face),e},n.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._coedges.length;++t)this._coedges[t].collectEdges(e);return e},n.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._coedges.length;++t)this._coedges[t].collectVertices(e);return e},n.prototype.toString=function(){return\"Loop\"},n.prototype.toObject=function(){return{coedges:this.refsToStrings(this._coedges),attributes:this.refsToStrings(this._attributes)}},n.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._coedges,this._attributes])},t.Loop=n},5837:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Lump=void 0;var o=r(9547),i=r(2468),n=r(3344),s=function(){o.BaseTopology.call(this),this._shells=[],this._body=void 0};(s.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.LUMP},s.prototype.getBody=function(){return this._body},s.prototype.setBody=function(e){this._body=e},s.prototype.getShells=function(){return this._shells},s.prototype.setShells=function(e){this._shells=new Array(e.length);for(var t=0;t<e.length;++t)this._shells[t]=e[t]},s.prototype.addShell=function(e){this._shells?this._shells.push(e):this._shells=[e],e.setLump(this)},s.prototype.addShells=function(e){this._shells||(this._shells=[]);for(var t=0;t<e.length;++t)e[t].setLump(this);this._shells=this._shells.concat(e)},s.prototype.removeShell=function(e){var t=this._shells.indexOf(e);return t>-1&&(this._shells.splice(t,1),e.getLump()===this&&e.setLump(void 0),!0)},s.prototype.collectFaces=function(e){e=e||new Set;for(var t=0;t<this._shells.length;++t)this._shells[t].collectFaces(e);return e},s.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._shells.length;++t)this._shells[t].collectEdges(e);return e},s.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._shells.length;++t)this._shells[t].collectVertices(e);return e},s.prototype.getBoundingBox=function(){for(var e=new n.BoundingBox,t=0;t<this._shells.length;++t)e.include(this._shells[t].getBoundingBox());return e},s.prototype.toString=function(){return\"Lump\"},s.prototype.toObject=function(){return{shells:this.refsToStrings(this._shells),attributes:this.refsToStrings(this._attributes)}},s.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._shells,this._attributes])},t.Lump=s},8292:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Plane=void 0;var o=r(1972),i=r(3344),n=r(2468),s=r(412),a=r(1096),c=r(4728),u=function(){s.Surface.call(this),this._origin=o.Vector3.createFloat64(),this._normal=o.Vector3.createFloat64(),this._uAxis=o.Vector3.createFloat64(),this._vAxis=o.Vector3.createFloat64()};(u.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.PLANE},u.prototype.clone=function(){var e=new u;return e.copy(this),e},u.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),o.Vector3.copy(this._origin,e._origin),o.Vector3.copy(this._normal,e._normal),o.Vector3.copy(this._uAxis,e._uAxis),o.Vector3.copy(this._vAxis,e._vAxis)},u.prototype._computeVAxis=function(){o.Vector3.cross(this._vAxis,this._normal,this._uAxis)},u.prototype.set=function(e,t,r){o.Vector3.copy(this._origin,e),c.ConsoleUtils.assert(o.Vector3.squaredLength(t)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._normal,t),void 0===r||o.Vector3.squaredLength(r)<n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?(o.Vector3.computeOrthogonal(this._uAxis,this._normal),o.Vector3.normalize(this._uAxis,this._uAxis)):(c.ConsoleUtils.assert(o.Vector3.isOrthogonal(r,t,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.copy(this._uAxis,r)),this._computeVAxis()},u.prototype.getOrigin=function(){return this._origin},u.prototype.setOrigin=function(e){o.Vector3.copy(this._origin,e)},u.prototype.getNormal=function(){return this._normal},u.prototype.setNormal=function(e){c.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._normal,e),(o.Vector3.squaredLength(this._uAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._uAxis,this._normal,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._uAxis,this._normal),o.Vector3.normalize(this._uAxis,this._uAxis)),this._computeVAxis()},u.prototype.getUAxis=function(){return this._uAxis},u.prototype.setUAxis=function(e){c.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.copy(this._uAxis,e),this._computeVAxis()},u.prototype.evaluatePosition=function(e,t){var r=o.Vector3.clone(this._origin);return o.Vector3.scaleAndAdd(r,r,this._uAxis,e),o.Vector3.scaleAndAdd(r,r,this._vAxis,t),r},u.prototype.evaluateNormal=function(e,t){return o.Vector3.clone(this._normal)},u.prototype.evaluateDu=function(e,t){return o.Vector3.clone(this._uAxis)},u.prototype.evaluateDv=function(e,t){return o.Vector3.clone(this._vAxis)},u.prototype.closestParam=function(e){var t=o.Vector3.createFloat64();return o.Vector3.sub(t,e,this._origin),{u:o.Vector3.dot(t,this._uAxis)/o.Vector3.squaredLength(this._uAxis),v:o.Vector3.dot(t,this._vAxis)/o.Vector3.squaredLength(this._vAxis)}},u.prototype.vParamLine=function(e){var t=new a.Line;return t.set(this.evaluatePosition(e,0),this._vAxis),t},u.prototype.uParamLine=function(e){var t=new a.Line;return t.set(this.evaluatePosition(0,e),this._uAxis),t},u.prototype.getBoundingBox=function(e,t){var r=new i.BoundingBox;return e&&t?(r.includePoint(this.evaluatePosition(e[0],t[0])),r.includePoint(this.evaluatePosition(e[0],t[1])),r.includePoint(this.evaluatePosition(e[1],t[1])),r.includePoint(this.evaluatePosition(e[1],t[0]))):(r.includePoint([-1/0,-1/0,-1/0]),r.includePoint([1/0,1/0,1/0])),r},u.prototype.transform=function(e){o.Vector3.transformMatrix44(this._origin,this._origin,e),o.Vector3.transformAsDirectionMatrix44(this._uAxis,this._uAxis,e),o.Vector3.transformAsDirectionMatrix44(this._vAxis,this._vAxis,e),o.Vector3.transformAsDirectionMatrix44(this._normal,this._normal,e),o.Vector3.normalize(this._normal,this._normal)},u.prototype.getRangeUnlimitedU=function(){return[-1/0,1/0]},u.prototype.getRangeUnlimitedV=function(){return[-1/0,1/0]},u.prototype.isPeriodicUnlimitedU=function(){return!1},u.prototype.isPeriodicUnlimitedV=function(){return!1},u.prototype.isClosedUnlimitedU=function(){return!1},u.prototype.isClosedUnlimitedV=function(){return!1},u.prototype.toObject=function(){return{origin:this.vectorToObject(this._origin),normal:this.vectorToObject(this._normal),uAxis:this.vectorToObject(this._uAxis),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.Plane=u},3565:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Point=void 0;var o=r(1972),i=r(9024),n=r(3344),s=r(2468),a=function(e){i.BaseGeometry.call(this),this._position=o.Vector3.createFloat64(),e&&o.Vector3.copy(this._position,e)};(a.prototype=Object.create(i.BaseGeometry.prototype)).getGeometryType=function(){return s.GEOMETRY_TYPES.POINT},a.prototype.clone=function(){var e=new a;return e.copy(this),e},a.prototype.copy=function(e){i.BaseGeometry.prototype.copy.call(this,e),this.copyPosition(e.getPosition())},a.prototype.getPosition=function(){return this._position},a.prototype.copyPosition=function(e){o.Vector3.copy(this._position,e)},a.prototype.setPosition=function(e,t,r){o.Vector3.set(this._position,e,t,r)},a.prototype.getBoundingBox=function(){var e=new n.BoundingBox;return e.includePoint(this.getPosition()),e},a.prototype.transform=function(e){o.Vector3.transformMatrix44(this._position,this._position,e)},a.prototype.toObject=function(){return{position:this.vectorToObject(this._position)}},t.Point=a},6508:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Shell=void 0;var o=r(9547),i=r(2468),n=r(3344),s=function(){o.BaseTopology.call(this),this._faces=[],this._lump=void 0};(s.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.SHELL},s.prototype.getLump=function(){return this._lump},s.prototype.setLump=function(e){this._lump=e},s.prototype.getFaces=function(){return this._faces},s.prototype.setFaces=function(e){this._faces=new Array(e.length);for(var t=0;t<e.length;++t)this._faces[t]=e[t]},s.prototype.addFace=function(e){this._faces?this._faces.push(e):this._faces=[e],e.setShell(this)},s.prototype.addFaces=function(e){this._faces||(this._faces=[]);for(var t=0;t<e.length;++t)e[t].setShell(this);this._faces=this._faces.concat(e)},s.prototype.removeFace=function(e){var t=this._faces.indexOf(e);return t>-1&&(this._faces.splice(t,1),e.getShell()===this&&e.setShell(void 0),!0)},s.prototype.getBody=function(){return this._lump?this._lump.getBody():void 0},s.prototype.collectFaces=function(e){e=e||new Set;for(var t=0;t<this._faces.length;++t)e.add(this._faces[t]);return e},s.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._faces.length;++t)this._faces[t].collectEdges(e);return e},s.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._faces.length;++t)this._faces[t].collectVertices(e);return e},s.prototype.getBoundingBox=function(){for(var e=new n.BoundingBox,t=0;t<this._faces.length;++t)e.include(this._faces[t].getBoundingBox());return e},s.prototype.toString=function(){return\"Shell\"},s.prototype.toObject=function(){return{faces:this.refsToStrings(this._faces),attributes:this.refsToStrings(this._attributes)}},s.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._faces,this._attributes])},t.Shell=s},2468:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var r=!1;\"undefined\"!=typeof window&&window.isJaguar&&(t.isSceneComposerEnv=r=!0);var o=!1;r&&(t.USE_LEGACY_LEIDS=o=window.isJaguar&&window.isJaguar()||!!JSON.parse(localStorage.getItem(\"USE_LEGACY_LEIDS\")));t.KERNEL_TOLERANCE=1e-6,t.KERNEL_ANGULAR_TOLERANCE=1e-10,t.PARAMETER_SPACE_TOLERANCE=1e-10,t.SPLINE_TANGENT_HANDLE_SCALE=1,t.SPLINE_DISTANCE_TOLERANCE=1e-4,t.DEFAULT_CURVE_RESOLUTION=64;t.isSceneComposerEnv=r,t.NO_ID=\"\",t.USE_LEGACY_LEIDS=o,t.TESSELLATION={LINEAR_PRECISION:1e-4,ANGULAR_PRECISION:1e-5},t.GEOMETRY_TYPES={POINT:1,BCURVE:2,CIRCLE:3,ELLIPSE:4,HAPCURVE:5,LINE:6,BSURFACE:7,CONE:8,CYLINDER:9,ELLIPTICAL_CONE:10,ELLIPTICAL_CYLINDER:11,PLANE:12,SPHERE:13,TORUS:14,toString:function(e){switch(e){case this.POINT:return\"Point\";case this.BCURVE:return\"BCurve\";case this.CIRCLE:return\"Circle\";case this.ELLIPSE:return\"Ellipse\";case this.HAPCURVE:return\"HapCurve\";case this.LINE:return\"Line\";case this.BSURFACE:return\"BSurface\";case this.CONE:return\"Cone\";case this.CYLINDER:return\"Cylinder\";case this.ELLIPTICAL_CONE:return\"EllipticalCone\";case this.ELLIPTICAL_CYLINDER:return\"EllipticalCylinder\";case this.PLANE:return\"Plane\";case this.SPHERE:return\"Sphere\";case this.TORUS:return\"Torus\";default:return\"unknown\"}}},t.TOPOLOGY_TYPES={VERTEX:1,EDGE:2,COEDGE:3,LOOP:4,FACE:5,SHELL:6,LUMP:7,BODY:8,WIRE:9,WIREBODY:10,toString:function(e){switch(e){case this.VERTEX:return\"Vertex\";case this.EDGE:return\"Edge\";case this.COEDGE:return\"Coedge\";case this.LOOP:return\"Loop\";case this.FACE:return\"Face\";case this.SHELL:return\"Shell\";case this.LUMP:return\"Lump\";case this.BODY:return\"Body\";case this.WIRE:return\"Wire\";case this.WIREBODY:return\"WireBody\";default:return\"unknown\"}}}},4372:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Sphere=void 0;var o=r(1972),i=r(5896),n=r(2468),s=r(412),a=r(3565),c=r(5512),u=r(4728),l=function(){s.Surface.call(this),this._center=o.Vector3.createFloat64(),this._radius=0,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(l.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.SPHERE},l.prototype.clone=function(){var e=new l;return e.copy(this),e},l.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._radius=e._radius,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},l.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},l.prototype.set=function(e,t,r,i){o.Vector3.copy(this._center,e),u.ConsoleUtils.assert(t>n.KERNEL_TOLERANCE),this._radius=t;var s=void 0===r||o.Vector3.squaredLength(r)<n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE,a=void 0===i||o.Vector3.squaredLength(i)<n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE;s&&a?(o.Vector3.set(this._xAxis,1,0,0),o.Vector3.set(this._zAxis,0,0,1)):s?(o.Vector3.normalize(this._xAxis,i),o.Vector3.computeOrthogonal(this._zAxis,this._xAxis),o.Vector3.normalize(this._zAxis,this._zAxis)):a?(o.Vector3.normalize(this._zAxis,r),o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)):(u.ConsoleUtils.assert(o.Vector3.isOrthogonal(r,i,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,i),o.Vector3.normalize(this._zAxis,r)),this._computeYAxis()},l.prototype.getRadius=function(){return this._radius},l.prototype.setRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._radius=e},l.prototype.getCenter=function(){return this._center},l.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},l.prototype.getAxisDir=function(){return this._zAxis},l.prototype.setAxisDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),(o.Vector3.squaredLength(this._xAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._xAxis,this._zAxis,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis()},l.prototype.getUvOriginDir=function(){return this._xAxis},l.prototype.setUvOriginDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),(o.Vector3.squaredLength(this._zAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._xAxis,this._zAxis,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._zAxis,this._xAxis),o.Vector3.normalize(this._zAxis,this._zAxis)),this._computeYAxis()},l.prototype.evaluatePosition=function(e,t){var r=Math.sin(e),i=Math.cos(e),n=Math.sin(t),s=Math.cos(t),a=this._radius*i*s,c=this._radius*i*n,u=this._radius*r,l=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(l,l,this._xAxis,a),o.Vector3.scaleAndAdd(l,l,this._yAxis,c),o.Vector3.scaleAndAdd(l,l,this._zAxis,u),l},l.prototype.evaluateNormal=function(e,t){var r=Math.sin(e),i=Math.cos(e),n=Math.sin(t),s=i*Math.cos(t),a=i*n,c=r,u=o.Vector3.createFloat64();return o.Vector3.scale(u,this._xAxis,s),o.Vector3.scaleAndAdd(u,u,this._yAxis,a),o.Vector3.scaleAndAdd(u,u,this._zAxis,c),u},l.prototype.evaluateDu=function(e,t){var r=Math.sin(e),i=Math.cos(e),n=Math.sin(t),s=Math.cos(t),a=-this._radius*r*s,c=-this._radius*r*n,u=this._radius*i,l=o.Vector3.createFloat64();return o.Vector3.scale(l,this._xAxis,a),o.Vector3.scaleAndAdd(l,l,this._yAxis,c),o.Vector3.scaleAndAdd(l,l,this._zAxis,u),l},l.prototype.evaluateDv=function(e,t){var r=Math.cos(e),i=Math.sin(t),n=Math.cos(t),s=-this._radius*r*i,a=this._radius*r*n,c=o.Vector3.createFloat64();return o.Vector3.scale(c,this._xAxis,s),o.Vector3.scaleAndAdd(c,c,this._yAxis,a),c},l.prototype.closestParam=function(e){var t=o.Vector3.createFloat64();o.Vector3.sub(t,e,this._center);var r=o.Vector3.length(t);if(r<n.KERNEL_TOLERANCE)return{u:0,v:0};var s=o.Vector3.dot(t,this._xAxis),a=o.Vector3.dot(t,this._yAxis),c=o.Vector3.dot(t,this._zAxis);return{u:Math.asin((0,i.clamp)(c/r,-1,1)),v:Math.atan2(a,s)}},l.prototype.vParamLine=function(e){var t=Math.cos(e),r=Math.sin(e),i=this._radius*t,s=this._radius*r;if(Math.abs(i)>n.KERNEL_TOLERANCE){var u=new c.Circle,l=o.Vector3.clone(this._center);o.Vector3.scaleAndAdd(l,l,this._zAxis,s);var h=o.Vector3.clone(this._xAxis);o.Vector3.scale(h,h,i);var d=o.Vector3.clone(this._zAxis);return o.Vector3.negate(d,d),u.set(l,d,h),u}var p=o.Vector3.clone(this._center);return s=s<0?-this._radius:this._radius,o.Vector3.scaleAndAdd(p,p,this._zAxis,s),new a.Point(p)},l.prototype.uParamLine=function(e){var t=new c.Circle,r=Math.sin(e),i=Math.cos(e),n=this._radius*i,s=this._radius*r,a=o.Vector3.clone(this._xAxis);o.Vector3.scale(a,a,-s),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.normalize(a,a);var u=o.Vector3.clone(this._xAxis);return o.Vector3.scale(u,u,n),o.Vector3.scaleAndAdd(u,u,this._yAxis,s),t.set(this._center,a,u),t},l.prototype.getBoundingBox=function(e,t){e=e||[-Math.PI/2,Math.PI/2],t=t||[-Math.PI,Math.PI];var r=e[0],n=e[1],s=t[0],a=t[1],c=this.vParamLine(r).getBoundingBox(t);c.include(this.vParamLine(n).getBoundingBox(t)),c.include(this.uParamLine(s).getBoundingBox(e)),c.include(this.uParamLine(a).getBoundingBox(e));for(var u=o.Vector3.createFloat64(),l=0;l<3;++l)for(var h=0;h<2;++h){var d=0===h?1:-1,p=Math.atan2(d*this._yAxis[l],d*this._xAxis[l]),g=Math.asin(d*this._zAxis[l]);p=(0,i.adjustParameterToPeriodicRange)(p,t,i.PI2),g>r&&g<n&&p>s&&p<a&&(o.Vector3.set(u,0,0,0),u[l]=d*this._radius,c.includePoint(o.Vector3.add(u,this._center,u)))}return c},l.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._radius*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},l.prototype.getRangeUnlimitedU=function(){return[-Math.PI/2,Math.PI/2]},l.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},l.prototype.isPeriodicUnlimitedU=function(){return!1},l.prototype.isPeriodicUnlimitedV=function(){return!0},l.prototype.isClosedUnlimitedU=function(){return!1},l.prototype.isClosedUnlimitedV=function(){return!0},l.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this.getCenter()),radius:this.vectorToObject(e),axis:this.vectorToObject(this.getAxisDir()),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.Sphere=l},412:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Surface=void 0;var o=r(1972),i=r(9024),n=r(2468),s=r(5896),a=function(){i.BaseGeometry.call(this),this._subrangeU=[],this._subrangeV=[]};(a.prototype=Object.create(i.BaseGeometry.prototype)).copy=function(e){i.BaseGeometry.prototype.copy.call(this,e),this._subrangeU=e.isLimitedU()?[e._subrangeU[0],e._subrangeU[1]]:[],this._subrangeV=e.isLimitedV()?[e._subrangeV[0],e._subrangeV[1]]:[]},a.prototype.isLimitedU=function(){return this._subrangeU.length>0},a.prototype.isLimitedV=function(){return this._subrangeV.length>0},a.prototype.getRangeU=function(){return this.isLimitedU()?this._subrangeU:this.getRangeUnlimitedU()},a.prototype.getRangeV=function(){return this.isLimitedV()?this._subrangeV:this.getRangeUnlimitedV()},a.prototype.getRangeUnlimitedU=function(){console.warn(\"Surface.getRangeUnlimitedU : abstract method invoked!\")},a.prototype.getRangeUnlimitedV=function(){console.warn(\"Surface.getRangeUnlimitedV : abstract method invoked!\")},a.prototype.limitRangeU=function(e){var t=this.getRangeU();this._subrangeU=(0,s.limitRange)(t,e,this.isPeriodicU(),this.getPeriodU())},a.prototype.limitRangeV=function(e){var t=this.getRangeV();this._subrangeV=(0,s.limitRange)(t,e,this.isPeriodicV(),this.getPeriodV())},a.prototype.unlimitRangeU=function(){this._subrangeU=[]},a.prototype.unlimitRangeV=function(){this._subrangeV=[]},a.prototype.isPeriodicU=function(){return this.isPeriodicUnlimitedU()&&!this.isLimitedU()},a.prototype.isPeriodicV=function(){return this.isPeriodicUnlimitedV()&&!this.isLimitedV()},a.prototype.isPeriodicUnlimitedU=function(){console.warn(\"Surface.isPeriodicUnlimitedU : abstract method invoked!\")},a.prototype.isPeriodicUnlimitedV=function(){console.warn(\"Surface.isPeriodicUnlimitedV : abstract method invoked!\")},a.prototype.getPeriodU=function(){return this.isLimitedU()?void 0:this.getPeriodUnlimitedU()},a.prototype.getPeriodV=function(){return this.isLimitedV()?void 0:this.getPeriodUnlimitedV()},a.prototype.getPeriodUnlimitedU=function(){if(this.isPeriodicUnlimitedU()){var e=this.getRangeUnlimitedU();return e[1]-e[0]}},a.prototype.getPeriodUnlimitedV=function(){if(this.isPeriodicUnlimitedV()){var e=this.getRangeUnlimitedV();return e[1]-e[0]}},a.prototype.isClosedU=function(){if(this.isClosedUnlimitedU()){if(this.isLimitedU()){var e=this.getRangeUnlimitedU(),t=e[1]-e[0];return this._subrangeU[1]-this._subrangeU[0]>t-n.PARAMETER_SPACE_TOLERANCE}return!0}return!1},a.prototype.isClosedV=function(){if(this.isClosedUnlimitedV()){if(this.isLimitedV()){var e=this.getRangeUnlimitedV(),t=e[1]-e[0];return this._subrangeV[1]-this._subrangeV[0]>t-n.PARAMETER_SPACE_TOLERANCE}return!0}return!1},a.prototype.isClosedUnlimitedU=function(){console.warn(\"Surface.isClosedUnlimitedU : abstract method invoked!\")},a.prototype.isClosedUnlimitedV=function(){console.warn(\"Surface.isClosedUnlimitedV : abstract method invoked!\")},a.prototype.evaluatePosition=function(e,t){console.warn(\"Surface.evaluatePosition : abstract method invoked\")},a.prototype.evaluateDu=function(e,t){console.warn(\"Surface.evaluateDu : abstract method invoked\")},a.prototype.evaluateDv=function(e,t){console.warn(\"Surface.evaluateDv : abstract method invoked\")},a.prototype.evaluateNormal=function(e,t){var r=this.evaluateDu(e,t);return o.Vector3.cross(r,r,this.evaluateDv(e,t)),o.Vector3.normalize(r,r),r},a.prototype.closestParam=function(e){console.warn(\"Surface.closestParam : abstract method invoked\")},a.prototype.vParamLine=function(e){console.warn(\"Surface.vParamLine : abstract method invoked, returning undefined\")},a.prototype.uParamLine=function(e){console.warn(\"Surface.uParamLine : abstract method invoked, returning undefined\")},a.prototype.getBoundingBox=function(e,t){console.warn(\"Surface.getBoundingBox : abstract method invoked, returning undefined\")},a.prototype.transform=function(e){console.warn(\"Surface.transform : abstract method invoked\")},t.Surface=a},1408:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Torus=void 0;var o=r(1972),i=r(5896),n=r(2468),s=r(412),a=r(3565),c=r(5512),u=r(4728),l=function(){s.Surface.call(this),this._center=o.Vector3.createFloat64(),this._majorRadius=0,this._minorRadius=0,this._lemon=!1,this._xAxis=o.Vector3.createFloat64(),this._yAxis=o.Vector3.createFloat64(),this._zAxis=o.Vector3.createFloat64()};(l.prototype=Object.create(s.Surface.prototype)).getGeometryType=function(){return n.GEOMETRY_TYPES.TORUS},l.prototype.clone=function(){var e=new l;return e.copy(this),e},l.prototype.copy=function(e){s.Surface.prototype.copy.call(this,e),this._majorRadius=e._majorRadius,this._minorRadius=e._minorRadius,this._lemon=e._lemon,o.Vector3.copy(this._center,e._center),o.Vector3.copy(this._xAxis,e._xAxis),o.Vector3.copy(this._yAxis,e._yAxis),o.Vector3.copy(this._zAxis,e._zAxis)},l.prototype._computeYAxis=function(){o.Vector3.cross(this._yAxis,this._xAxis,this._zAxis)},l.prototype.set=function(e,t,r,i,s,a){o.Vector3.copy(this._center,e),u.ConsoleUtils.assert(t>n.KERNEL_TOLERANCE),this._majorRadius=t,u.ConsoleUtils.assert(r>n.KERNEL_TOLERANCE),this._minorRadius=r,u.ConsoleUtils.assert(o.Vector3.squaredLength(i)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,i),void 0!==s&&o.Vector3.squaredLength(s)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?(u.ConsoleUtils.assert(o.Vector3.isOrthogonal(i,s,n.KERNEL_ANGULAR_TOLERANCE)),o.Vector3.normalize(this._xAxis,s)):(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._lemon=!0===a,this._computeYAxis()},l.prototype.getMajorRadius=function(){return this._majorRadius},l.prototype.setMajorRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._majorRadius=e},l.prototype.getMinorRadius=function(){return this._minorRadius},l.prototype.setMinorRadius=function(e){u.ConsoleUtils.assert(e>n.KERNEL_TOLERANCE),this._minorRadius=e},l.prototype.getCenter=function(){return this._center},l.prototype.setCenter=function(e){o.Vector3.copy(this._center,e)},l.prototype.getAxisDir=function(){return this._zAxis},l.prototype.setAxisDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._zAxis,e),(o.Vector3.squaredLength(this._xAxis)<=n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE||!o.Vector3.isOrthogonal(this._xAxis,this._zAxis,n.KERNEL_ANGULAR_TOLERANCE))&&(o.Vector3.computeOrthogonal(this._xAxis,this._zAxis),o.Vector3.normalize(this._xAxis,this._xAxis)),this._computeYAxis()},l.prototype.getUvOriginDir=function(){return this._xAxis},l.prototype.setUvOriginDir=function(e){u.ConsoleUtils.assert(o.Vector3.squaredLength(e)>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE),o.Vector3.normalize(this._xAxis,e),this._computeYAxis()},l.prototype.isDoughnut=function(){return this._majorRadius>this._minorRadius+n.KERNEL_TOLERANCE},l.prototype.isVortex=function(){return Math.abs(this._majorRadius-this._minorRadius)<=n.KERNEL_TOLERANCE},l.prototype.isApple=function(){return this._majorRadius<this._minorRadius-n.KERNEL_TOLERANCE&&!this._lemon},l.prototype.isLemon=function(){return this._majorRadius<this._minorRadius-n.KERNEL_TOLERANCE&&this._lemon},l.prototype.setLemon=function(e){this._lemon=e},l.prototype.getSingularUParams=function(){var e,t,r;return this.isDoughnut()?[]:this.isApple()?(e=-this._majorRadius,t=this._minorRadius,[-(r=Math.acos(e/t)),r]):this.isLemon()?(e=this._minorRadius-this._majorRadius,t=this._minorRadius,[-(r=Math.acos(e/t)),r]):[-Math.PI,Math.PI]},l.prototype.evaluatePosition=function(e,t){var r=this._minorRadius*Math.cos(e);this.isLemon()?r-=this._majorRadius:r+=this._majorRadius;var i=r*Math.cos(t),n=r*Math.sin(t),s=this._minorRadius*Math.sin(e),a=o.Vector3.clone(this._center);return o.Vector3.scaleAndAdd(a,a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},l.prototype.evaluateNormal=function(e,t){var r=Math.sin(e),i=Math.cos(e),n=Math.sin(t),s=i*Math.cos(t),a=i*n,c=r,u=o.Vector3.createFloat64();return o.Vector3.scale(u,this._xAxis,s),o.Vector3.scaleAndAdd(u,u,this._yAxis,a),o.Vector3.scaleAndAdd(u,u,this._zAxis,c),u},l.prototype.evaluateDu=function(e,t){var r=-this._minorRadius*Math.sin(e),i=r*Math.cos(t),n=r*Math.sin(t),s=this._minorRadius*Math.cos(e),a=o.Vector3.createFloat64();return o.Vector3.scale(a,this._xAxis,i),o.Vector3.scaleAndAdd(a,a,this._yAxis,n),o.Vector3.scaleAndAdd(a,a,this._zAxis,s),a},l.prototype.evaluateDv=function(e,t){var r=this._minorRadius*Math.cos(e);this.isLemon()?r-=this._majorRadius:r+=this._majorRadius;var i=-r*Math.sin(t),n=r*Math.cos(t),s=o.Vector3.createFloat64();return o.Vector3.scale(s,this._xAxis,i),o.Vector3.scaleAndAdd(s,s,this._yAxis,n),s},l.prototype.closestParam=function(e){var t=o.Vector3.createFloat64();o.Vector3.sub(t,e,this._center);var r=o.Vector3.dot(t,this._xAxis),i=o.Vector3.dot(t,this._yAxis),s=o.Vector3.dot(t,this._zAxis),a=Math.sqrt(r*r+i*i);return this.isLemon()?a+=this._majorRadius:a-=this._majorRadius,{u:s*s+a*a>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?Math.atan2(s,a):0,v:r*r+i*i>n.KERNEL_TOLERANCE*n.KERNEL_TOLERANCE?Math.atan2(i,r):0}},l.prototype.vParamLine=function(e){var t=this._minorRadius*Math.cos(e);this.isLemon()?t-=this._majorRadius:t+=this._majorRadius;var r=this._minorRadius*Math.sin(e);if(Math.abs(t)>n.KERNEL_TOLERANCE){var i=new c.Circle,s=o.Vector3.clone(this._center);o.Vector3.scaleAndAdd(s,s,this._zAxis,r);var u=o.Vector3.clone(this._xAxis);o.Vector3.scale(u,u,t);var l=o.Vector3.clone(this._zAxis);return o.Vector3.negate(l,l),i.set(s,l,u),i}var h=o.Vector3.clone(this._center),d=this.getSingularUParams();return d[0]&&r<0?r=this._minorRadius*Math.sin(d[0]):d[1]&&r>0&&(r=this._minorRadius*Math.sin(d[1])),o.Vector3.scaleAndAdd(h,h,this._zAxis,r),new a.Point(h)},l.prototype.uParamLine=function(e){var t=new c.Circle,r=Math.sin(e),i=Math.cos(e),n=this._majorRadius*i,s=this._majorRadius*r;this.isLemon()&&(n=-n,s=-s);var a=o.Vector3.clone(this._center);o.Vector3.scaleAndAdd(a,a,this._xAxis,n),o.Vector3.scaleAndAdd(a,a,this._yAxis,s);var u=this._minorRadius*i,l=this._minorRadius*r,h=o.Vector3.clone(this._xAxis);o.Vector3.scale(h,h,-l),o.Vector3.scaleAndAdd(h,h,this._yAxis,u),o.Vector3.normalize(h,h);var d=o.Vector3.clone(this._xAxis);return o.Vector3.scale(d,d,u),o.Vector3.scaleAndAdd(d,d,this._yAxis,l),t.set(a,h,d),t},l.prototype.getBoundingBox=function(e,t){e=e||(this.isDoughnut()?[-Math.PI,Math.PI]:this.getSingularUParams()),t=t||[-Math.PI,Math.PI];var r=e[0],n=e[1],s=t[0],a=t[1],c=this.vParamLine(r).getBoundingBox(t);c.include(this.vParamLine(n).getBoundingBox(t)),c.include(this.uParamLine(s).getBoundingBox(e)),c.include(this.uParamLine(a).getBoundingBox(e));for(var u=o.Vector3.createFloat64(),l=o.Vector3.createFloat64(),h=0;h<3;++h)for(var d=0;d<2;++d){var p=0===d?-1:1,g=Math.atan2(p*this._yAxis[h],p*this._xAxis[h]);if((g=(0,i.adjustParameterToPeriodicRange)(g,t,i.PI2))>s&&g<a){var f=this.uParamLine(g);u=f.evaluatePosition(0),o.Vector3.sub(u,u,f.getCenter()),l=f.evaluatePosition(Math.PI/2),o.Vector3.sub(l,l,f.getCenter());var v=(0,i.minMaxCosSinFunc)(u[h],l[h],f.getCenter()[h],e);0===h?c.includeX(v[d]):1===h?c.includeY(v[d]):c.includeZ(v[d])}}return c},l.prototype.transform=function(e){o.Vector3.transformMatrix44(this._center,this._center,e),o.Vector3.transformAsDirectionMatrix44(this._xAxis,this._xAxis,e),o.Vector3.transformAsDirectionMatrix44(this._yAxis,this._yAxis,e),o.Vector3.transformAsDirectionMatrix44(this._zAxis,this._zAxis,e);var t=o.Vector3.length(this._xAxis);this._majorRadius*=t,this._minorRadius*=t,o.Vector3.normalize(this._xAxis,this._xAxis),o.Vector3.normalize(this._yAxis,this._yAxis),o.Vector3.normalize(this._zAxis,this._zAxis)},l.prototype.getRangeUnlimitedU=function(){return this.isDoughnut()?[-Math.PI,Math.PI]:this.getSingularUParams()},l.prototype.getRangeUnlimitedV=function(){return[-Math.PI,Math.PI]},l.prototype.isPeriodicUnlimitedU=function(){return this.isDoughnut()},l.prototype.isPeriodicUnlimitedV=function(){return!0},l.prototype.isClosedUnlimitedU=function(){return this.isDoughnut()||this.isVortex()},l.prototype.isClosedUnlimitedV=function(){return!0},l.prototype.toObject=function(){const e=this.evaluatePosition(0,0);return o.Vector3.sub(e,e,this.getCenter()),{center:this.vectorToObject(this.getCenter()),coordAxis:this.vectorToObject(this.getUvOriginDir()),axis:this.vectorToObject(this.getAxisDir()),majorRadius:this.getMajorRadius(),minorRadius:this.getMinorRadius(),lemon:this.isLemon(),uRange:this.rangeToObject(this.getRangeU(),this.isLimitedU()),vRange:this.rangeToObject(this.getRangeV(),this.isLimitedV())}},t.Torus=l},6940:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Vertex=void 0;var o=r(9547),i=r(2468),n=r(4728),s=r(9608),a=function(e){o.BaseTopology.call(this),this._point=e,this._precision=0,this._edges=[]};(a.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.VERTEX},a.prototype.getPoint=function(){return this._point},a.prototype.setPoint=function(e){this._point=e},a.prototype.getPrecision=function(){return this._precision},a.prototype.setPrecision=function(e){n.ConsoleUtils.assert(e>=0),this._precision=e},a.prototype.getEdges=function(){return this._edges},a.prototype.isAdjacentEdge=function(e){return-1!==this._edges.indexOf(e)},a.prototype.getOtherEdge=function(e){for(var t=0;t<this._edges.length;t++){var r=this._edges[t];if(r!==e)return r}return null},a.prototype.getOtherEdges=function(e){for(var t=[],r=0;r<this._edges.length;r++){var o=this._edges[r];o!==e&&t.push(o)}return t},a.prototype.getAdjacentVertices=function(){for(var e=[],t=0;t<this._edges.length;t++){var r=this._edges[t].getOtherVertex(this);r!==this&&e.indexOf(r)<0&&e.push(r)}return e},a.prototype.getCommonEdges=function(e){for(var t=[],r=0;r<this._edges.length;r++){var o=this._edges[r],i=o.getStartVertex(),n=o.getEndVertex();(i===this&&n===e||n===this&&i===e)&&t.push(o)}return t},a.prototype.addEdge=function(e){-1===this._edges.indexOf(e)&&this._edges.push(e)},a.prototype.removeEdge=function(e){var t=this._edges.indexOf(e);return t>=0&&(this._edges.splice(t,1),!0)},a.prototype.getPosition=function(){return this._point.getPosition()},a.prototype.getBody=function(){return this._edges.length>0?this._edges[0].getBody():void 0},a.prototype.collectFaces=function(e){e=e||new Set;for(var t=0;t<this._edges.length;++t)this._edges[t].collectFaces(e);return e},a.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._edges.length;++t)e.add(this._edges[t]);return e},a.prototype.collectVertices=function(e){return(e=e||new Set).add(this),e},a.prototype.getBoundingBox=function(){return this._point.getBoundingBox()},a.prototype.toString=function(){return String(this._point.getPosition())},a.prototype.getOrderedFaces=function(){const e=[],t=(0,s.getOrderedFacesOnVertex)(this);for(let r=0;r<t.length;r++)t[r].faces.forEach((t=>{e.push(t)}));return e},a.prototype.toObject=function(){return{geometry:this.refToString(this._point),precision:this.getPrecision(),attributes:this.refsToStrings(this._attributes)}},a.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._point,this._attributes])},t.Vertex=a},7575:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.Wire=void 0;var o=r(9547),i=r(3344),n=r(2468),s=function(){o.BaseTopology.call(this),this._wireBody=void 0,this._edges=[]};(s.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return n.TOPOLOGY_TYPES.WIRE},s.prototype.getWireBody=function(){return this._wireBody},s.prototype.setWireBody=function(e){this._wireBody=e},s.prototype.getEdges=function(){return this._edges},s.prototype.setEdges=function(e){this._edges=new Array(e.length);for(var t=0;t<e.length;++t)this._edges[t]=e[t]},s.prototype.addEdge=function(e){this._edges?this._edges.push(e):this._edges=[e],e.setWire(this),e.setCoedge(void 0)},s.prototype.addEdges=function(e){this._edges||(this._edges=[]);for(var t=0;t<e.length;++t)e[t].setWire(this),e[t].setCoedge(void 0);this._edges=this._edges.concat(e)},s.prototype.removeEdge=function(e){var t=this._edges.indexOf(e);return t>-1&&(this._edges.splice(t,1),e.getWire()===this&&e.setWire(void 0),!0)},s.prototype.getBody=function(){return this._wireBody},s.prototype.collectFaces=function(e){return e||new Set},s.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._edges.length;++t)e.add(this._edges[t]);return e},s.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._edges.length;++t)this._edges[t].collectVertices(e);return e},s.prototype.isBranched=function(){for(var e=0;e<this._edges.length;++e){var t=this._edges[e],r=t.getStartVertex(),o=t.getEndVertex();if(r===o&&r.getOtherEdge(t))return!0;if(r.getEdges().length>2||o.getEdges().length>2)return!0}return!1},s.prototype.getOrderedEdges=function(){if(0===this._edges.length)return{edges:[],start:void 0,end:void 0};var e=[];e.push(this._edges[0]);for(var t=new Set(this._edges.slice(1)),r=e[0].getStartVertex(),o=e[0].getEndVertex();t.size>0;){var i=t.size;if(t.forEach((function(i){i.getEndVertex()===r?(e.unshift(i),r=i.getStartVertex(),t.delete(i)):i.getStartVertex()===r?(e.unshift(i),r=i.getEndVertex(),t.delete(i)):i.getEndVertex()===o?(e.push(i),o=i.getStartVertex(),t.delete(i)):i.getStartVertex()===o&&(e.push(i),o=i.getEndVertex(),t.delete(i))})),i===t.size){console.warn(\"Wire is disconnected or branching.\");break}}return{edges:e,start:r,end:o}},s.prototype.isClosed=function(){if(1===this._edges.length)return this._edges[0].getStartVertex()===this._edges[0].getEndVertex();for(var e=this._edges[0],t=void 0,r=0;r<this._edges.length;++r){var o,i=e.getStartVertex(),n=e.getEndVertex();if(i===n||2!==i.getEdges().length||2!==n.getEdges().length)return!1;if(t&&i.getOtherEdge(e)!==t){if(n.getOtherEdge(e)!==t)return!1;o=i.getOtherEdge(e)}else o=n.getOtherEdge(e);t=e,e=o}return e===this._edges[0]},s.prototype.getBoundingBox=function(){for(var e=new i.BoundingBox,t=0;t<this._edges.length;++t)e.include(this._edges[t].getBoundingBox());return e},s.prototype.toString=function(){return\"Wire\"},s.prototype.toObject=function(){return{edges:this.refsToStrings(this._edges),attributes:this.refsToStrings(this._attributes)}},s.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._edges,this._attributes])},t.Wire=s},6500:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.WireBody=void 0;var o=r(9547),i=r(2468),n=r(3344),s=r(7616),a=function(){o.BaseTopology.call(this),this._wires=[]};(a.prototype=Object.create(o.BaseTopology.prototype)).getTopologyType=function(){return i.TOPOLOGY_TYPES.WIREBODY},a.prototype.getWires=function(){return this._wires},a.prototype.setWires=function(e){this._wires=new Array(e.length);for(var t=0;t<e.length;++t)this._wires[t]=e[t]},a.prototype.addWire=function(e){this._wires?this._wires.push(e):this._wires=[e],e.setWireBody(this)},a.prototype.addWires=function(e){this._wires||(this._wires=[]);for(var t=0;t<e.length;++t)e[t].setWireBody(this);this._wires=this._wires.concat(e)},a.prototype.removeWire=function(e){var t=this._wires.indexOf(e);return t>-1&&(this._wires.splice(t,1),e.getWireBody()===this&&e.setWireBody(void 0),!0)},a.prototype.getBody=function(){return this},a.prototype.collectFaces=function(e){return e||new Set},a.prototype.collectEdges=function(e){e=e||new Set;for(var t=0;t<this._wires.length;++t)this._wires[t].collectEdges(e);return e},a.prototype.collectVertices=function(e){e=e||new Set;for(var t=0;t<this._wires.length;++t)this._wires[t].collectVertices(e);return e},a.prototype.getBoundingBox=function(){for(var e=new n.BoundingBox,t=0;t<this._wires.length;++t)e.include(this._wires[t].getBoundingBox());return e},a.prototype.transform=function(e){(0,s.transformTopology)(this,e)},a.prototype.toString=function(){return\"WireBody\"},a.prototype.toObject=function(){return{wires:this.refsToStrings(this._wires),attributes:this.refsToStrings(this._attributes)}},a.prototype.addToModelObject=function(e){this.addAllToModelObject(e,[this._wires,this._attributes])},t.WireBody=a},7392:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.MatchFinder=void 0;var o=r(1972),i=r(2468),n=r(7808),s=r(6344),a=r(2208),c=r(4728),u=function(){this._edges1=[],this._edges2=[],this._verts1=[],this._verts2=[],this._vertexMatchMap=new Map,this._edgeMatchMap=new Map,this._sameEdgeLists=!1,this._newVertices=new Set,this._edgeProgenitors=new a.ProgenitorMap};u.prototype.addMergeToMap=function(e,t,r){var o=r.get(e),i=r.get(t);if(o&&!i)o.push(t),r.set(t,o);else if(!o&&i)i.push(e),r.set(e,i);else if(o||i){if(o&&i&&o!==i)for(var n=0;n<i.length;++n)o.push(i[n]),r.set(i[n],o)}else{var s=[e,t];r.set(e,s),r.set(t,s)}},u.prototype.addVertexMerge=function(e,t){this.addMergeToMap(e,t,this._vertexMatchMap)},u.prototype.addEdgeMerge=function(e,t){this.addMergeToMap(e,t,this._edgeMatchMap)},u.prototype.verticesMatch=function(e,t){var r=Math.max(e.getPrecision(),t.getPrecision(),i.KERNEL_TOLERANCE);return o.Vector3.squaredDistance(e.getPosition(),t.getPosition())<r*r},u.prototype.findEdgeSplitParam=function(e,t){var r=e.getStartVertex();if(r!==t){var n=e.getEndVertex();if(n!==t){var s=this._vertexMatchMap.get(r);if(!s||-1===s.indexOf(t)){var a=this._vertexMatchMap.get(n);if(!a||-1===a.indexOf(t)){var c=t.getPosition(),u=Math.max(t.getPrecision(),i.KERNEL_TOLERANCE),l=e.closestToPointParam(c);if(void 0!==l){var h=e.evaluatePosition(l);if(!(o.Vector3.squaredDistance(c,h)>u*u))return{param:l,position:h}}}}}}},u.prototype.matchVertices=function(){for(var e=new Set,t=0;t<this._edges1.length;++t)this._edges1[t].collectVertices(e);this._verts1=Array.from(e);var r=new Set;for(t=0;t<this._edges2.length;++t)this._edges2[t].collectVertices(r);this._verts2=Array.from(r);var o=this;e.forEach((function(e){r.forEach((function(t){e!==t&&o.verticesMatch(e,t)&&o.addVertexMerge(e,t)}))}))},u.prototype.findVertexOnEdgeSplits=function(e,t){for(var r=t.length,o=0;o<r;++o){for(var i=t[o],n=[],s=0;s<e.length;++s){var a=e[s],c=this.findEdgeSplitParam(i,a);c&&n.push({vertex:a,param:c.param,position:c.position})}if(n.length>0){var u=this.splitEdgeAtParams(i,n);if(u.length>0){t[o]=u[0];for(var l=1;l<u.length;++l)t.push(u[l])}}}},u.prototype.doEdgeSplits=function(){this.findVertexOnEdgeSplits(this._verts1,this._edges2),this._sameEdgeLists||this.findVertexOnEdgeSplits(this._verts2,this._edges1)},u.prototype.splitEdgeAtParams=function(e,t){t.sort((function(e,t){return e.param-t.param}));for(var r=[],s=e,a=0;a<t.length;++a){var c=t[a].vertex,u=t[a].param,l=t[a].position,h=s.getStartVertex().getPosition();if(o.Vector3.squaredDistance(l,h)<i.KERNEL_TOLERANCE*i.KERNEL_TOLERANCE)this.addVertexMerge(c,s.getStartVertex());else{0===r.length&&(s=(0,n.replaceEdge)(s),r.push(s),this._edgeProgenitors.addEntry(s,[e]));var d=(0,n.splitEdge)(s,u,l);r.push(d),this._edgeProgenitors.addEntry(d,[e]);var p=d.getStartVertex();this.addVertexMerge(c,p),this._newVertices.add(p),s=d}}return r},u.prototype.edgesMatch=function(e,t){return(0,s.edgesAreCoincident)(e,t)},u.prototype.matchEdges=function(){for(var e=this,t=0;t<this._edges1.length;++t)for(var r=this._edges1[t],o=r.getStartVertex(),i=r.getEndVertex(),n=0;n<this._edges2.length;++n){var s=this._edges2[n],a=s.getStartVertex(),c=s.getEndVertex();if(!(this._sameEdgeLists&&n<=t)&&r!==s){var u,l=o===a||o===c;if(!l){var h=e._vertexMatchMap.get(o);h&&(l=h===e._vertexMatchMap.get(a)||h===e._vertexMatchMap.get(c))}if(l&&!(u=i===a||i===c)){var d=e._vertexMatchMap.get(i);d&&(u=d===e._vertexMatchMap.get(a)||d===e._vertexMatchMap.get(c))}l&&u&&this.edgesMatch(r,s)&&this.addEdgeMerge(r,s)}}},u.prototype.setEdges=function(e,t){e instanceof Set?this._edges1=Array.from(e):e instanceof Array&&(this._edges1=e),t&&t!==e?t instanceof Set?this._edges2=Array.from(t):t instanceof Array&&(this._edges2=t):this._edges2=this._edges1,this._sameEdgeLists=this._edges1===this._edges2,c.ConsoleUtils.assert(this._edges1&&this._edges2)},u.prototype.compute=function(){this.matchVertices(),this.doEdgeSplits(),this.matchEdges()},u.prototype.getVertexMatches=function(){var e=new Set;return this._vertexMatchMap.forEach((function(t,r){e.add(t)})),Array.from(e)},u.prototype.getEdgeMatches=function(){var e=new Set;return this._edgeMatchMap.forEach((function(t,r){e.add(t)})),Array.from(e)},u.prototype.getNewVertices=function(){return this._newVertices},u.prototype.getEdgeProgenitors=function(){return this._edgeProgenitors},t.MatchFinder=u},7808:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.replaceEdge=t.splitEdge=void 0;var o=r(6940),i=r(7580),n=r(672),s=r(3565),a=function(e,t){var r=new n.Coedge;r.setEdge(t),e.getEdge().getCoedge()===e&&t.setCoedge(r),r.setReversed(e.isReversed()),r.setLoop(e.getLoop());var o=e.getLoop().getCoedges(),i=o.indexOf(e);return r.isReversed()?o.splice(i,0,r):o.splice((i+1)%o.length,0,r),r};t.splitEdge=function(e,t,r){var n=new o.Vertex(new s.Point(r)),c=[e.getRange()[0],e.getRange()[1]],u=e.getEndVertex();e.setRange([c[0],t]),e.setEndVertex(n);var l=new i.Edge;l.setCurve(e.getCurve()),l.setReversed(e.isReversed()),l.setRange([t,c[1]]),l.setStartVertex(n),l.setEndVertex(u),l.setPrecision(e.getPrecision()),l.setWire(e.getWire());for(var h=[],d=e.getCoedge();d;)h.push(a(d,l)),(d=d.getPartner())===e.getCoedge()&&(d=void 0);for(var p=0;p<h.length;++p){var g=(p+1)%h.length;h[p].setPartner(h[g])}if(l.getWire()){var f=l.getWire().getEdges().slice(),v=f.indexOf(e);f.splice(v+1,0,l),l.getWire().setEdges(f)}return l},t.replaceEdge=function(e){var t=new i.Edge;t.setCurve(e.getCurve()),t.setReversed(e.isReversed()),t.setRange([e.getRange()[0],e.getRange()[1]]),t.setStartVertex(e.getStartVertex()),t.setEndVertex(e.getEndVertex()),t.setPrecision(e.getPrecision()),t.setCoedge(e.getCoedge()),t.setWire(e.getWire()),e.setStartVertex(null),e.setEndVertex(null),e.setCoedge(void 0),e.setWire(void 0);for(var r=t.getCoedge();r;)r.setEdge(t),(r=r.getPartner())===t.getCoedge()&&(r=void 0);if(t.getWire()){var o=t.getWire().getEdges().slice(),n=o.indexOf(e);o[n]=t,t.getWire().setEdges(o)}return t}},1008:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.TopologyStitcher=void 0;var o=r(1972),i=r(7392),n=r(2208),s=r(4728),a=function(){this._shellSet=new Set,this._lumpSet=new Set,this._bodySet=new Set,this._wireSet=new Set,this._progenitorMap=new n.ProgenitorMap};a.prototype.initMerge=function(){this._shellSet.clear(),this._lumpSet.clear(),this._bodySet.clear(),this._wireSet.clear()},a.prototype.getEdgeOwnerToMerge=function(e){var t=e.getWire();if(t)this._wireSet.add(t);else{var r=function(e){var t=e.getCoedge();if(t){var r=t.getFace();if(r)return r.getShell()}}(e);r&&this._shellSet.add(r)}},a.prototype.getVertexOwnerToMerge=function(e){var t=e.getEdges();t.length>0&&this.getEdgeOwnerToMerge(t[0])},a.prototype.stitchVertices=function(e,t){var r;this.initMerge();var o=void 0;for(r=0;r<e.length;++r)if(!t||!t.has(e[r])){o=e[r];break}s.ConsoleUtils.assert(o);var i=[];for(r=0;r<e.length;++r)if(this.getVertexOwnerToMerge(e[r]),e[r]!==o){for(var n=e[r],a=n.getEdges().slice(0),c=0;c<a.length;++c){var u=a[c];u.getStartVertex()===n&&u.setStartVertex(o),u.getEndVertex()===n&&u.setEndVertex(o)}s.ConsoleUtils.assert(0===n.getEdges().length),t&&t.has(n)||i.push(n)}i.length>0&&this._progenitorMap.addEntry(o,i),this.mergeTopology()},a.prototype.stitchEdges=function(e,t){var r,i=e[0];for(r=0;r<e.length;++r)if(!t||!t.has(e[r])){i=e[r];break}var n=[],s=[];for(r=0;r<e.length;++r){var a=e[r],c=!1;if(a.getStartVertex()!==i.getStartVertex()&&a.getStartVertex()===i.getEndVertex()){var u=a.evaluateDt(a.t0()),l=i.evaluateDt(i.t1());o.Vector3.dot(u,l)<0&&(c=!0)}for(var h=a.getCoedge();h;)n.push(h),c&&h.setReversed(!h.isReversed()),(h=h.getPartner())===a.getCoedge()&&(h=void 0);a!==i&&(a.setStartVertex(null),a.setEndVertex(null),s.push(a))}for(this.initMerge(),r=0;r<n.length;++r){var d=n[r];this.getEdgeOwnerToMerge(d.getEdge()),d.setEdge(i);var p=(r+1)%n.length;d.setPartner(n[p])}this.mergeTopology(),this._progenitorMap.addEntry(i,s)},a.prototype.mergeTopology=function(){if(this._shellSet.size>1&&this.mergeShells(),this._wireSet.size>1)throw new Error(\"Merging wires in TopologyStitcher is not yet supported.\")},a.prototype.mergeShells=function(){var e=new n.ProgenitorMap;if(this._shellSet.size>1){var t=Array.from(this._shellSet),r=t[0],o=r.getLump();o&&this._lumpSet.add(o);for(var i=1;i<t.length;++i){var s=t[i];r.addFaces(s.getFaces()),s.setFaces([]),(o=s.getLump())&&(o.removeShell(s),this._lumpSet.add(o))}e.addEntry(r,t.slice(1))}if(this._lumpSet.size>1){var a=Array.from(this._lumpSet),c=a[0],u=c.getBody();for(u&&this._bodySet.add(u),i=1;i<a.length;++i){var l=a[i];c.addShells(l.getShells()),l.setShells([]),(u=l.getBody())&&(u.removeLump(l),this._bodySet.add(u))}e.addEntry(c,a.slice(1))}if(this._bodySet.size>1){var h=Array.from(this._bodySet),d=h[0];for(i=1;i<h.length;++i){for(var p=h[i],g=p.getLumps().slice(0),f=0;f<g.length;++f)g[f].getShells().length>0&&d.addLump(g[f]);p.setLumps([])}e.addEntry(d,h.slice(1))}e.size()>0&&(this._progenitorMap=e.collapseMaps(this._progenitorMap,{keepIntermediates:!0,keepAllDescendants:!0}))},a.prototype.getProgenitorMap=function(){return this._progenitorMap},a.prototype.stitchTwoEdgeSets=function(e,t){var r=new i.MatchFinder;r.setEdges(e,t),r.compute();for(var o=r.getVertexMatches(),n=r.getEdgeMatches(),s=r.getNewVertices(),a=new Set(r.getEdgeProgenitors().getAllNewTopology()),c=0;c<o.length;++c)this.stitchVertices(o[c],s);for(c=0;c<n.length;++c)this.stitchEdges(n[c],a);this._progenitorMap=this._progenitorMap.collapseMaps(r.getEdgeProgenitors(),{keepIntermediates:!1,keepAllDescendants:!0})},a.prototype.stitchTwoTopology=function(e,t){s.ConsoleUtils.assert(\"function\"==typeof e.collectEdges),s.ConsoleUtils.assert(\"function\"==typeof t.collectEdges);var r=e.collectEdges(),o=t.collectEdges();this.stitchTwoEdgeSets(r,o)},a.prototype.stitchEdgeSet=function(e){this.stitchTwoEdgeSets(e,e)},t.TopologyStitcher=a},4883:(e,t,r)=>{\"use strict\";e.exports=r(4392)},3056:(e,t,r)=>{\"use strict\";var o=t,i=r(1376),n=r(32);function s(e,t,r,o){var n=!1;if(t.resolvedType)if(t.resolvedType instanceof i){e(\"switch(d%s){\",o);for(var s=t.resolvedType.values,a=Object.keys(s),c=0;c<a.length;++c)s[a[c]]!==t.typeDefault||n||(e(\"default:\")('if(typeof(d%s)===\"number\"){m%s=d%s;break}',o,o,o),t.repeated||e(\"break\"),n=!0),e(\"case%j:\",a[c])(\"case %i:\",s[a[c]])(\"m%s=%j\",o,s[a[c]])(\"break\");e(\"}\")}else e('if(typeof d%s!==\"object\")',o)(\"throw TypeError(%j)\",t.fullName+\": object expected\")(\"m%s=types[%i].fromObject(d%s)\",o,r,o);else{var u=!1;switch(t.type){case\"double\":case\"float\":e(\"m%s=Number(d%s)\",o,o);break;case\"uint32\":case\"fixed32\":e(\"m%s=d%s>>>0\",o,o);break;case\"int32\":case\"sint32\":case\"sfixed32\":e(\"m%s=d%s|0\",o,o);break;case\"uint64\":u=!0;case\"int64\":case\"sint64\":case\"fixed64\":case\"sfixed64\":e(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\",o,o,u)('else if(typeof d%s===\"string\")',o)(\"m%s=parseInt(d%s,10)\",o,o)('else if(typeof d%s===\"number\")',o)(\"m%s=d%s\",o,o)('else if(typeof d%s===\"object\")',o)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\",o,o,o,u?\"true\":\"\");break;case\"bytes\":e('if(typeof d%s===\"string\")',o)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\",o,o,o)(\"else if(d%s.length >= 0)\",o)(\"m%s=d%s\",o,o);break;case\"string\":e(\"m%s=String(d%s)\",o,o);break;case\"bool\":e(\"m%s=Boolean(d%s)\",o,o)}}return e}function a(e,t,r,o){if(t.resolvedType)t.resolvedType instanceof i?e(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\",o,r,o,o,r,o,o):e(\"d%s=types[%i].toObject(m%s,o)\",o,r,o);else{var n=!1;switch(t.type){case\"double\":case\"float\":e(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\",o,o,o,o);break;case\"uint64\":n=!0;case\"int64\":case\"sint64\":case\"fixed64\":case\"sfixed64\":e('if(typeof m%s===\"number\")',o)(\"d%s=o.longs===String?String(m%s):m%s\",o,o,o)(\"else\")(\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\",o,o,o,o,n?\"true\":\"\",o);break;case\"bytes\":e(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\",o,o,o,o,o);break;default:e(\"d%s=m%s\",o,o)}}return e}o.fromObject=function(e){var t=e.fieldsArray,r=n.codegen([\"d\"],e.name+\"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");if(!t.length)return r(\"return new this.ctor\");r(\"var m=new this.ctor\");for(var o=0;o<t.length;++o){var a=t[o].resolve(),c=n.safeProp(a.name);a.map?(r(\"if(d%s){\",c)('if(typeof d%s!==\"object\")',c)(\"throw TypeError(%j)\",a.fullName+\": object expected\")(\"m%s={}\",c)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\",c),s(r,a,o,c+\"[ks[i]]\")(\"}\")(\"}\")):a.repeated?(r(\"if(d%s){\",c)(\"if(!Array.isArray(d%s))\",c)(\"throw TypeError(%j)\",a.fullName+\": array expected\")(\"m%s=[]\",c)(\"for(var i=0;i<d%s.length;++i){\",c),s(r,a,o,c+\"[i]\")(\"}\")(\"}\")):(a.resolvedType instanceof i||r(\"if(d%s!=null){\",c),s(r,a,o,c),a.resolvedType instanceof i||r(\"}\"))}return r(\"return m\")},o.toObject=function(e){var t=e.fieldsArray.slice().sort(n.compareFieldsById);if(!t.length)return n.codegen()(\"return {}\");for(var r=n.codegen([\"m\",\"o\"],e.name+\"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\"),o=[],s=[],c=[],u=0;u<t.length;++u)t[u].partOf||(t[u].resolve().repeated?o:t[u].map?s:c).push(t[u]);if(o.length){for(r(\"if(o.arrays||o.defaults){\"),u=0;u<o.length;++u)r(\"d%s=[]\",n.safeProp(o[u].name));r(\"}\")}if(s.length){for(r(\"if(o.objects||o.defaults){\"),u=0;u<s.length;++u)r(\"d%s={}\",n.safeProp(s[u].name));r(\"}\")}if(c.length){for(r(\"if(o.defaults){\"),u=0;u<c.length;++u){var l=c[u],h=n.safeProp(l.name);if(l.resolvedType instanceof i)r(\"d%s=o.enums===String?%j:%j\",h,l.resolvedType.valuesById[l.typeDefault],l.typeDefault);else if(l.long)r(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\",l.typeDefault.low,l.typeDefault.high,l.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\",h)(\"}else\")(\"d%s=o.longs===String?%j:%i\",h,l.typeDefault.toString(),l.typeDefault.toNumber());else if(l.bytes){var d=\"[\"+Array.prototype.slice.call(l.typeDefault).join(\",\")+\"]\";r(\"if(o.bytes===String)d%s=%j\",h,String.fromCharCode.apply(String,l.typeDefault))(\"else{\")(\"d%s=%s\",h,d)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\",h,h)(\"}\")}else r(\"d%s=%j\",h,l.typeDefault)}r(\"}\")}var p=!1;for(u=0;u<t.length;++u){l=t[u];var g=e._fieldsArray.indexOf(l);h=n.safeProp(l.name);l.map?(p||(p=!0,r(\"var ks2\")),r(\"if(m%s&&(ks2=Object.keys(m%s)).length){\",h,h)(\"d%s={}\",h)(\"for(var j=0;j<ks2.length;++j){\"),a(r,l,g,h+\"[ks2[j]]\")(\"}\")):l.repeated?(r(\"if(m%s&&m%s.length){\",h,h)(\"d%s=[]\",h)(\"for(var j=0;j<m%s.length;++j){\",h),a(r,l,g,h+\"[j]\")(\"}\")):(r(\"if(m%s!=null&&m.hasOwnProperty(%j)){\",h,l.name),a(r,l,g,h),l.partOf&&r(\"if(o.oneofs)\")(\"d%s=%j\",n.safeProp(l.partOf.name),l.name)),r(\"}\")}return r(\"return d\")}},9708:(e,t,r)=>{\"use strict\";e.exports=function(e){var t=n.codegen([\"r\",\"l\"],e.name+\"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\"+(e.fieldsArray.filter((function(e){return e.map})).length?\",k,value\":\"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\");e.group&&t(\"if((t&7)===4)\")(\"break\");t(\"switch(t>>>3){\");for(var r=0;r<e.fieldsArray.length;++r){var a=e._fieldsArray[r].resolve(),c=a.resolvedType instanceof o?\"int32\":a.type,u=\"m\"+n.safeProp(a.name);t(\"case %i: {\",a.id),a.map?(t(\"if(%s===util.emptyObject)\",u)(\"%s={}\",u)(\"var c2 = r.uint32()+r.pos\"),void 0!==i.defaults[a.keyType]?t(\"k=%j\",i.defaults[a.keyType]):t(\"k=null\"),void 0!==i.defaults[c]?t(\"value=%j\",i.defaults[c]):t(\"value=null\"),t(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\",a.keyType)(\"case 2:\"),void 0===i.basic[c]?t(\"value=types[%i].decode(r,r.uint32())\",r):t(\"value=r.%s()\",c),t(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\"),void 0!==i.long[a.keyType]?t('%s[typeof k===\"object\"?util.longToHash(k):k]=value',u):t(\"%s[k]=value\",u)):a.repeated?(t(\"if(!(%s&&%s.length))\",u,u)(\"%s=[]\",u),void 0!==i.packed[c]&&t(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\",u,c)(\"}else\"),void 0===i.basic[c]?t(a.resolvedType.group?\"%s.push(types[%i].decode(r))\":\"%s.push(types[%i].decode(r,r.uint32()))\",u,r):t(\"%s.push(r.%s())\",u,c)):void 0===i.basic[c]?t(a.resolvedType.group?\"%s=types[%i].decode(r)\":\"%s=types[%i].decode(r,r.uint32())\",u,r):t(\"%s=r.%s()\",u,c),t(\"break\")(\"}\")}for(t(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\"),r=0;r<e._fieldsArray.length;++r){var l=e._fieldsArray[r];l.required&&t(\"if(!m.hasOwnProperty(%j))\",l.name)(\"throw util.ProtocolError(%j,{instance:m})\",s(l))}return t(\"return m\")};var o=r(1376),i=r(1908),n=r(32);function s(e){return\"missing required '\"+e.name+\"'\"}},4752:(e,t,r)=>{\"use strict\";e.exports=function(e){for(var t,r=n.codegen([\"m\",\"w\"],e.name+\"$encode\")(\"if(!w)\")(\"w=Writer.create()\"),a=e.fieldsArray.slice().sort(n.compareFieldsById),c=0;c<a.length;++c){var u=a[c].resolve(),l=e._fieldsArray.indexOf(u),h=u.resolvedType instanceof o?\"int32\":u.type,d=i.basic[h];t=\"m\"+n.safeProp(u.name),u.map?(r(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\",t,u.name)(\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\",t)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\",(u.id<<3|2)>>>0,8|i.mapKey[u.keyType],u.keyType),void 0===d?r(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\",l,t):r(\".uint32(%i).%s(%s[ks[i]]).ldelim()\",16|d,h,t),r(\"}\")(\"}\")):u.repeated?(r(\"if(%s!=null&&%s.length){\",t,t),u.packed&&void 0!==i.packed[h]?r(\"w.uint32(%i).fork()\",(u.id<<3|2)>>>0)(\"for(var i=0;i<%s.length;++i)\",t)(\"w.%s(%s[i])\",h,t)(\"w.ldelim()\"):(r(\"for(var i=0;i<%s.length;++i)\",t),void 0===d?s(r,u,l,t+\"[i]\"):r(\"w.uint32(%i).%s(%s[i])\",(u.id<<3|d)>>>0,h,t)),r(\"}\")):(u.optional&&r(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\",t,u.name),void 0===d?s(r,u,l,t):r(\"w.uint32(%i).%s(%s)\",(u.id<<3|d)>>>0,h,t))}return r(\"return w\")};var o=r(1376),i=r(1908),n=r(32);function s(e,t,r,o){return t.resolvedType.group?e(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\",r,o,(t.id<<3|3)>>>0,(t.id<<3|4)>>>0):e(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\",r,o,(t.id<<3|2)>>>0)}},1376:(e,t,r)=>{\"use strict\";e.exports=s;var o=r(5392);((s.prototype=Object.create(o.prototype)).constructor=s).className=\"Enum\";var i=r(2088),n=r(32);function s(e,t,r,i,n,s){if(o.call(this,e,r),t&&\"object\"!=typeof t)throw TypeError(\"values must be an object\");if(this.valuesById={},this.values=Object.create(this.valuesById),this.comment=i,this.comments=n||{},this.valuesOptions=s,this.reserved=void 0,t)for(var a=Object.keys(t),c=0;c<a.length;++c)\"number\"==typeof t[a[c]]&&(this.valuesById[this.values[a[c]]=t[a[c]]]=a[c])}s.fromJSON=function(e,t){var r=new s(e,t.values,t.options,t.comment,t.comments);return r.reserved=t.reserved,r},s.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return n.toObject([\"options\",this.options,\"valuesOptions\",this.valuesOptions,\"values\",this.values,\"reserved\",this.reserved&&this.reserved.length?this.reserved:void 0,\"comment\",t?this.comment:void 0,\"comments\",t?this.comments:void 0])},s.prototype.add=function(e,t,r,o){if(!n.isString(e))throw TypeError(\"name must be a string\");if(!n.isInteger(t))throw TypeError(\"id must be an integer\");if(void 0!==this.values[e])throw Error(\"duplicate name '\"+e+\"' in \"+this);if(this.isReservedId(t))throw Error(\"id \"+t+\" is reserved in \"+this);if(this.isReservedName(e))throw Error(\"name '\"+e+\"' is reserved in \"+this);if(void 0!==this.valuesById[t]){if(!this.options||!this.options.allow_alias)throw Error(\"duplicate id \"+t+\" in \"+this);this.values[e]=t}else this.valuesById[this.values[e]=t]=e;return o&&(void 0===this.valuesOptions&&(this.valuesOptions={}),this.valuesOptions[e]=o||null),this.comments[e]=r||null,this},s.prototype.remove=function(e){if(!n.isString(e))throw TypeError(\"name must be a string\");var t=this.values[e];if(null==t)throw Error(\"name '\"+e+\"' does not exist in \"+this);return delete this.valuesById[t],delete this.values[e],delete this.comments[e],this.valuesOptions&&delete this.valuesOptions[e],this},s.prototype.isReservedId=function(e){return i.isReservedId(this.reserved,e)},s.prototype.isReservedName=function(e){return i.isReservedName(this.reserved,e)}},8376:(e,t,r)=>{\"use strict\";e.exports=u;var o=r(5392);((u.prototype=Object.create(o.prototype)).constructor=u).className=\"Field\";var i,n=r(1376),s=r(1908),a=r(32),c=/^required|optional|repeated$/;function u(e,t,r,i,n,u,l){if(a.isObject(i)?(l=n,u=i,i=n=void 0):a.isObject(n)&&(l=u,u=n,n=void 0),o.call(this,e,u),!a.isInteger(t)||t<0)throw TypeError(\"id must be a non-negative integer\");if(!a.isString(r))throw TypeError(\"type must be a string\");if(void 0!==i&&!c.test(i=i.toString().toLowerCase()))throw TypeError(\"rule must be a string rule\");if(void 0!==n&&!a.isString(n))throw TypeError(\"extend must be a string\");\"proto3_optional\"===i&&(i=\"optional\"),this.rule=i&&\"optional\"!==i?i:void 0,this.type=r,this.id=t,this.extend=n||void 0,this.required=\"required\"===i,this.optional=!this.required,this.repeated=\"repeated\"===i,this.map=!1,this.message=null,this.partOf=null,this.typeDefault=null,this.defaultValue=null,this.long=!!a.Long&&void 0!==s.long[r],this.bytes=\"bytes\"===r,this.resolvedType=null,this.extensionField=null,this.declaringField=null,this._packed=null,this.comment=l}u.fromJSON=function(e,t){return new u(e,t.id,t.type,t.rule,t.extend,t.options,t.comment)},Object.defineProperty(u.prototype,\"packed\",{get:function(){return null===this._packed&&(this._packed=!1!==this.getOption(\"packed\")),this._packed}}),u.prototype.setOption=function(e,t,r){return\"packed\"===e&&(this._packed=null),o.prototype.setOption.call(this,e,t,r)},u.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return a.toObject([\"rule\",\"optional\"!==this.rule&&this.rule||void 0,\"type\",this.type,\"id\",this.id,\"extend\",this.extend,\"options\",this.options,\"comment\",t?this.comment:void 0])},u.prototype.resolve=function(){if(this.resolved)return this;if(void 0===(this.typeDefault=s.defaults[this.type])?(this.resolvedType=(this.declaringField?this.declaringField.parent:this.parent).lookupTypeOrEnum(this.type),this.resolvedType instanceof i?this.typeDefault=null:this.typeDefault=this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]):this.options&&this.options.proto3_optional&&(this.typeDefault=null),this.options&&null!=this.options.default&&(this.typeDefault=this.options.default,this.resolvedType instanceof n&&\"string\"==typeof this.typeDefault&&(this.typeDefault=this.resolvedType.values[this.typeDefault])),this.options&&(!0!==this.options.packed&&(void 0===this.options.packed||!this.resolvedType||this.resolvedType instanceof n)||delete this.options.packed,Object.keys(this.options).length||(this.options=void 0)),this.long)this.typeDefault=a.Long.fromNumber(this.typeDefault,\"u\"===this.type.charAt(0)),Object.freeze&&Object.freeze(this.typeDefault);else if(this.bytes&&\"string\"==typeof this.typeDefault){var e;a.base64.test(this.typeDefault)?a.base64.decode(this.typeDefault,e=a.newBuffer(a.base64.length(this.typeDefault)),0):a.utf8.write(this.typeDefault,e=a.newBuffer(a.utf8.length(this.typeDefault)),0),this.typeDefault=e}return this.map?this.defaultValue=a.emptyObject:this.repeated?this.defaultValue=a.emptyArray:this.defaultValue=this.typeDefault,this.parent instanceof i&&(this.parent.ctor.prototype[this.name]=this.defaultValue),o.prototype.resolve.call(this)},u.d=function(e,t,r,o){return\"function\"==typeof t?t=a.decorateType(t).name:t&&\"object\"==typeof t&&(t=a.decorateEnum(t).name),function(i,n){a.decorateType(i.constructor).add(new u(n,e,t,r,{default:o}))}},u._configure=function(e){i=e}},4392:(e,t,r)=>{\"use strict\";var o=e.exports=r(8040);o.build=\"light\",o.load=function(e,t,r){return\"function\"==typeof t?(r=t,t=new o.Root):t||(t=new o.Root),t.load(e,r)},o.loadSync=function(e,t){return t||(t=new o.Root),t.loadSync(e)},o.encoder=r(4752),o.decoder=r(9708),o.verifier=r(1688),o.converter=r(3056),o.ReflectionObject=r(5392),o.Namespace=r(2088),o.Root=r(968),o.Enum=r(1376),o.Type=r(9288),o.Field=r(8376),o.OneOf=r(8232),o.MapField=r(188),o.Service=r(8616),o.Method=r(4208),o.Message=r(8700),o.wrappers=r(1508),o.types=r(1908),o.util=r(32),o.ReflectionObject._configure(o.Root),o.Namespace._configure(o.Type,o.Service,o.Enum),o.Root._configure(o.Type),o.Field._configure(o.Type)},8040:(e,t,r)=>{\"use strict\";var o=t;function i(){o.util._configure(),o.Writer._configure(o.BufferWriter),o.Reader._configure(o.BufferReader)}o.build=\"minimal\",o.Writer=r(2664),o.BufferWriter=r(8135),o.Reader=r(4064),o.BufferReader=r(6388),o.util=r(9712),o.rpc=r(1164),o.roots=r(6696),o.configure=i,i()},188:(e,t,r)=>{\"use strict\";e.exports=s;var o=r(8376);((s.prototype=Object.create(o.prototype)).constructor=s).className=\"MapField\";var i=r(1908),n=r(32);function s(e,t,r,i,s,a){if(o.call(this,e,t,i,void 0,void 0,s,a),!n.isString(r))throw TypeError(\"keyType must be a string\");this.keyType=r,this.resolvedKeyType=null,this.map=!0}s.fromJSON=function(e,t){return new s(e,t.id,t.keyType,t.type,t.options,t.comment)},s.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return n.toObject([\"keyType\",this.keyType,\"type\",this.type,\"id\",this.id,\"extend\",this.extend,\"options\",this.options,\"comment\",t?this.comment:void 0])},s.prototype.resolve=function(){if(this.resolved)return this;if(void 0===i.mapKey[this.keyType])throw Error(\"invalid key type: \"+this.keyType);return o.prototype.resolve.call(this)},s.d=function(e,t,r){return\"function\"==typeof r?r=n.decorateType(r).name:r&&\"object\"==typeof r&&(r=n.decorateEnum(r).name),function(o,i){n.decorateType(o.constructor).add(new s(i,e,t,r))}}},8700:(e,t,r)=>{\"use strict\";e.exports=i;var o=r(9712);function i(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)this[t[r]]=e[t[r]]}i.create=function(e){return this.$type.create(e)},i.encode=function(e,t){return this.$type.encode(e,t)},i.encodeDelimited=function(e,t){return this.$type.encodeDelimited(e,t)},i.decode=function(e){return this.$type.decode(e)},i.decodeDelimited=function(e){return this.$type.decodeDelimited(e)},i.verify=function(e){return this.$type.verify(e)},i.fromObject=function(e){return this.$type.fromObject(e)},i.toObject=function(e,t){return this.$type.toObject(e,t)},i.prototype.toJSON=function(){return this.$type.toObject(this,o.toJSONOptions)}},4208:(e,t,r)=>{\"use strict\";e.exports=n;var o=r(5392);((n.prototype=Object.create(o.prototype)).constructor=n).className=\"Method\";var i=r(32);function n(e,t,r,n,s,a,c,u,l){if(i.isObject(s)?(c=s,s=a=void 0):i.isObject(a)&&(c=a,a=void 0),void 0!==t&&!i.isString(t))throw TypeError(\"type must be a string\");if(!i.isString(r))throw TypeError(\"requestType must be a string\");if(!i.isString(n))throw TypeError(\"responseType must be a string\");o.call(this,e,c),this.type=t||\"rpc\",this.requestType=r,this.requestStream=!!s||void 0,this.responseType=n,this.responseStream=!!a||void 0,this.resolvedRequestType=null,this.resolvedResponseType=null,this.comment=u,this.parsedOptions=l}n.fromJSON=function(e,t){return new n(e,t.type,t.requestType,t.responseType,t.requestStream,t.responseStream,t.options,t.comment,t.parsedOptions)},n.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return i.toObject([\"type\",\"rpc\"!==this.type&&this.type||void 0,\"requestType\",this.requestType,\"requestStream\",this.requestStream,\"responseType\",this.responseType,\"responseStream\",this.responseStream,\"options\",this.options,\"comment\",t?this.comment:void 0,\"parsedOptions\",this.parsedOptions])},n.prototype.resolve=function(){return this.resolved?this:(this.resolvedRequestType=this.parent.lookupType(this.requestType),this.resolvedResponseType=this.parent.lookupType(this.responseType),o.prototype.resolve.call(this))}},2088:(e,t,r)=>{\"use strict\";e.exports=h;var o=r(5392);((h.prototype=Object.create(o.prototype)).constructor=h).className=\"Namespace\";var i,n,s,a=r(8376),c=r(32),u=r(8232);function l(e,t){if(e&&e.length){for(var r={},o=0;o<e.length;++o)r[e[o].name]=e[o].toJSON(t);return r}}function h(e,t){o.call(this,e,t),this.nested=void 0,this._nestedArray=null}function d(e){return e._nestedArray=null,e}h.fromJSON=function(e,t){return new h(e,t.options).addJSON(t.nested)},h.arrayToJSON=l,h.isReservedId=function(e,t){if(e)for(var r=0;r<e.length;++r)if(\"string\"!=typeof e[r]&&e[r][0]<=t&&e[r][1]>t)return!0;return!1},h.isReservedName=function(e,t){if(e)for(var r=0;r<e.length;++r)if(e[r]===t)return!0;return!1},Object.defineProperty(h.prototype,\"nestedArray\",{get:function(){return this._nestedArray||(this._nestedArray=c.toArray(this.nested))}}),h.prototype.toJSON=function(e){return c.toObject([\"options\",this.options,\"nested\",l(this.nestedArray,e)])},h.prototype.addJSON=function(e){if(e)for(var t,r=Object.keys(e),o=0;o<r.length;++o)t=e[r[o]],this.add((void 0!==t.fields?i.fromJSON:void 0!==t.values?s.fromJSON:void 0!==t.methods?n.fromJSON:void 0!==t.id?a.fromJSON:h.fromJSON)(r[o],t));return this},h.prototype.get=function(e){return this.nested&&this.nested[e]||null},h.prototype.getEnum=function(e){if(this.nested&&this.nested[e]instanceof s)return this.nested[e].values;throw Error(\"no such enum: \"+e)},h.prototype.add=function(e){if(!(e instanceof a&&void 0!==e.extend||e instanceof i||e instanceof u||e instanceof s||e instanceof n||e instanceof h))throw TypeError(\"object must be a valid nested object\");if(this.nested){var t=this.get(e.name);if(t){if(!(t instanceof h&&e instanceof h)||t instanceof i||t instanceof n)throw Error(\"duplicate name '\"+e.name+\"' in \"+this);for(var r=t.nestedArray,o=0;o<r.length;++o)e.add(r[o]);this.remove(t),this.nested||(this.nested={}),e.setOptions(t.options,!0)}}else this.nested={};return this.nested[e.name]=e,e.onAdd(this),d(this)},h.prototype.remove=function(e){if(!(e instanceof o))throw TypeError(\"object must be a ReflectionObject\");if(e.parent!==this)throw Error(e+\" is not a member of \"+this);return delete this.nested[e.name],Object.keys(this.nested).length||(this.nested=void 0),e.onRemove(this),d(this)},h.prototype.define=function(e,t){if(c.isString(e))e=e.split(\".\");else if(!Array.isArray(e))throw TypeError(\"illegal path\");if(e&&e.length&&\"\"===e[0])throw Error(\"path must be relative\");for(var r=this;e.length>0;){var o=e.shift();if(r.nested&&r.nested[o]){if(!((r=r.nested[o])instanceof h))throw Error(\"path conflicts with non-namespace objects\")}else r.add(r=new h(o))}return t&&r.addJSON(t),r},h.prototype.resolveAll=function(){for(var e=this.nestedArray,t=0;t<e.length;)e[t]instanceof h?e[t++].resolveAll():e[t++].resolve();return this.resolve()},h.prototype.lookup=function(e,t,r){if(\"boolean\"==typeof t?(r=t,t=void 0):t&&!Array.isArray(t)&&(t=[t]),c.isString(e)&&e.length){if(\".\"===e)return this.root;e=e.split(\".\")}else if(!e.length)return this;if(\"\"===e[0])return this.root.lookup(e.slice(1),t);var o=this.get(e[0]);if(o){if(1===e.length){if(!t||t.indexOf(o.constructor)>-1)return o}else if(o instanceof h&&(o=o.lookup(e.slice(1),t,!0)))return o}else for(var i=0;i<this.nestedArray.length;++i)if(this._nestedArray[i]instanceof h&&(o=this._nestedArray[i].lookup(e,t,!0)))return o;return null===this.parent||r?null:this.parent.lookup(e,t)},h.prototype.lookupType=function(e){var t=this.lookup(e,[i]);if(!t)throw Error(\"no such type: \"+e);return t},h.prototype.lookupEnum=function(e){var t=this.lookup(e,[s]);if(!t)throw Error(\"no such Enum '\"+e+\"' in \"+this);return t},h.prototype.lookupTypeOrEnum=function(e){var t=this.lookup(e,[i,s]);if(!t)throw Error(\"no such Type or Enum '\"+e+\"' in \"+this);return t},h.prototype.lookupService=function(e){var t=this.lookup(e,[n]);if(!t)throw Error(\"no such Service '\"+e+\"' in \"+this);return t},h._configure=function(e,t,r){i=e,n=t,s=r}},5392:(e,t,r)=>{\"use strict\";e.exports=n,n.className=\"ReflectionObject\";var o,i=r(32);function n(e,t){if(!i.isString(e))throw TypeError(\"name must be a string\");if(t&&!i.isObject(t))throw TypeError(\"options must be an object\");this.options=t,this.parsedOptions=null,this.name=e,this.parent=null,this.resolved=!1,this.comment=null,this.filename=null}Object.defineProperties(n.prototype,{root:{get:function(){for(var e=this;null!==e.parent;)e=e.parent;return e}},fullName:{get:function(){for(var e=[this.name],t=this.parent;t;)e.unshift(t.name),t=t.parent;return e.join(\".\")}}}),n.prototype.toJSON=function(){throw Error()},n.prototype.onAdd=function(e){this.parent&&this.parent!==e&&this.parent.remove(this),this.parent=e,this.resolved=!1;var t=e.root;t instanceof o&&t._handleAdd(this)},n.prototype.onRemove=function(e){var t=e.root;t instanceof o&&t._handleRemove(this),this.parent=null,this.resolved=!1},n.prototype.resolve=function(){return this.resolved||this.root instanceof o&&(this.resolved=!0),this},n.prototype.getOption=function(e){if(this.options)return this.options[e]},n.prototype.setOption=function(e,t,r){return r&&this.options&&void 0!==this.options[e]||((this.options||(this.options={}))[e]=t),this},n.prototype.setParsedOption=function(e,t,r){this.parsedOptions||(this.parsedOptions=[]);var o=this.parsedOptions;if(r){var n=o.find((function(t){return Object.prototype.hasOwnProperty.call(t,e)}));if(n){var s=n[e];i.setProperty(s,r,t)}else(n={})[e]=i.setProperty({},r,t),o.push(n)}else{var a={};a[e]=t,o.push(a)}return this},n.prototype.setOptions=function(e,t){if(e)for(var r=Object.keys(e),o=0;o<r.length;++o)this.setOption(r[o],e[r[o]],t);return this},n.prototype.toString=function(){var e=this.constructor.className,t=this.fullName;return t.length?e+\" \"+t:e},n._configure=function(e){o=e}},8232:(e,t,r)=>{\"use strict\";e.exports=s;var o=r(5392);((s.prototype=Object.create(o.prototype)).constructor=s).className=\"OneOf\";var i=r(8376),n=r(32);function s(e,t,r,i){if(Array.isArray(t)||(r=t,t=void 0),o.call(this,e,r),void 0!==t&&!Array.isArray(t))throw TypeError(\"fieldNames must be an Array\");this.oneof=t||[],this.fieldsArray=[],this.comment=i}function a(e){if(e.parent)for(var t=0;t<e.fieldsArray.length;++t)e.fieldsArray[t].parent||e.parent.add(e.fieldsArray[t])}s.fromJSON=function(e,t){return new s(e,t.oneof,t.options,t.comment)},s.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return n.toObject([\"options\",this.options,\"oneof\",this.oneof,\"comment\",t?this.comment:void 0])},s.prototype.add=function(e){if(!(e instanceof i))throw TypeError(\"field must be a Field\");return e.parent&&e.parent!==this.parent&&e.parent.remove(e),this.oneof.push(e.name),this.fieldsArray.push(e),e.partOf=this,a(this),this},s.prototype.remove=function(e){if(!(e instanceof i))throw TypeError(\"field must be a Field\");var t=this.fieldsArray.indexOf(e);if(t<0)throw Error(e+\" is not a member of \"+this);return this.fieldsArray.splice(t,1),(t=this.oneof.indexOf(e.name))>-1&&this.oneof.splice(t,1),e.partOf=null,this},s.prototype.onAdd=function(e){o.prototype.onAdd.call(this,e);for(var t=0;t<this.oneof.length;++t){var r=e.get(this.oneof[t]);r&&!r.partOf&&(r.partOf=this,this.fieldsArray.push(r))}a(this)},s.prototype.onRemove=function(e){for(var t,r=0;r<this.fieldsArray.length;++r)(t=this.fieldsArray[r]).parent&&t.parent.remove(t);o.prototype.onRemove.call(this,e)},s.d=function(){for(var e=new Array(arguments.length),t=0;t<arguments.length;)e[t]=arguments[t++];return function(t,r){n.decorateType(t.constructor).add(new s(r,e)),Object.defineProperty(t,r,{get:n.oneOfGetter(e),set:n.oneOfSetter(e)})}}},4064:(e,t,r)=>{\"use strict\";e.exports=c;var o,i=r(9712),n=i.LongBits,s=i.utf8;function a(e,t){return RangeError(\"index out of range: \"+e.pos+\" + \"+(t||1)+\" > \"+e.len)}function c(e){this.buf=e,this.pos=0,this.len=e.length}var u,l=\"undefined\"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new c(e);throw Error(\"illegal buffer\")}:function(e){if(Array.isArray(e))return new c(e);throw Error(\"illegal buffer\")},h=function(){return i.Buffer?function(e){return(c.create=function(e){return i.Buffer.isBuffer(e)?new o(e):l(e)})(e)}:l};function d(){var e=new n(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw a(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw a(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error(\"invalid varint encoding\")}function p(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function g(){if(this.pos+8>this.len)throw a(this,8);return new n(p(this.buf,this.pos+=4),p(this.buf,this.pos+=4))}c.create=h(),c.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,c.prototype.uint32=(u=4294967295,function(){if(u=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return u;if(u=(u|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return u;if(u=(u|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return u;if(u=(u|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return u;if(u=(u|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return u;if((this.pos+=5)>this.len)throw this.pos=this.len,a(this,10);return u}),c.prototype.int32=function(){return 0|this.uint32()},c.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},c.prototype.bool=function(){return 0!==this.uint32()},c.prototype.fixed32=function(){if(this.pos+4>this.len)throw a(this,4);return p(this.buf,this.pos+=4)},c.prototype.sfixed32=function(){if(this.pos+4>this.len)throw a(this,4);return 0|p(this.buf,this.pos+=4)},c.prototype.float=function(){if(this.pos+4>this.len)throw a(this,4);var e=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},c.prototype.double=function(){if(this.pos+8>this.len)throw a(this,4);var e=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},c.prototype.bytes=function(){var e=this.uint32(),t=this.pos,r=this.pos+e;if(r>this.len)throw a(this,e);if(this.pos+=e,Array.isArray(this.buf))return this.buf.slice(t,r);if(t===r){var o=i.Buffer;return o?o.alloc(0):new this.buf.constructor(0)}return this._slice.call(this.buf,t,r)},c.prototype.string=function(){var e=this.bytes();return s.read(e,0,e.length)},c.prototype.skip=function(e){if(\"number\"==typeof e){if(this.pos+e>this.len)throw a(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw a(this)}while(128&this.buf[this.pos++]);return this},c.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error(\"invalid wire type \"+e+\" at offset \"+this.pos)}return this},c._configure=function(e){o=e,c.create=h(),o._configure();var t=i.Long?\"toLong\":\"toNumber\";i.merge(c.prototype,{int64:function(){return d.call(this)[t](!1)},uint64:function(){return d.call(this)[t](!0)},sint64:function(){return d.call(this).zzDecode()[t](!1)},fixed64:function(){return g.call(this)[t](!0)},sfixed64:function(){return g.call(this)[t](!1)}})}},6388:(e,t,r)=>{\"use strict\";e.exports=n;var o=r(4064);(n.prototype=Object.create(o.prototype)).constructor=n;var i=r(9712);function n(e){o.call(this,e)}n._configure=function(){i.Buffer&&(n.prototype._slice=i.Buffer.prototype.slice)},n.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString(\"utf-8\",this.pos,this.pos=Math.min(this.pos+e,this.len))},n._configure()},968:(e,t,r)=>{\"use strict\";e.exports=h;var o=r(2088);((h.prototype=Object.create(o.prototype)).constructor=h).className=\"Root\";var i,n,s,a=r(8376),c=r(1376),u=r(8232),l=r(32);function h(e){o.call(this,\"\",e),this.deferred=[],this.files=[]}function d(){}h.fromJSON=function(e,t){return t||(t=new h),e.options&&t.setOptions(e.options),t.addJSON(e.nested)},h.prototype.resolvePath=l.path.resolve,h.prototype.fetch=l.fetch,h.prototype.load=function e(t,r,o){\"function\"==typeof r&&(o=r,r=void 0);var i=this;if(!o)return l.asPromise(e,i,t,r);var a=o===d;function c(e,t){if(o){if(a)throw e;var r=o;o=null,r(e,t)}}function u(e){var t=e.lastIndexOf(\"google/protobuf/\");if(t>-1){var r=e.substring(t);if(r in s)return r}return null}function h(e,t){try{if(l.isString(t)&&\"{\"===t.charAt(0)&&(t=JSON.parse(t)),l.isString(t)){n.filename=e;var o,s=n(t,i,r),h=0;if(s.imports)for(;h<s.imports.length;++h)(o=u(s.imports[h])||i.resolvePath(e,s.imports[h]))&&p(o);if(s.weakImports)for(h=0;h<s.weakImports.length;++h)(o=u(s.weakImports[h])||i.resolvePath(e,s.weakImports[h]))&&p(o,!0)}else i.setOptions(t.options).addJSON(t.nested)}catch(e){c(e)}a||g||c(null,i)}function p(e,t){if(e=u(e)||e,!(i.files.indexOf(e)>-1))if(i.files.push(e),e in s)a?h(e,s[e]):(++g,setTimeout((function(){--g,h(e,s[e])})));else if(a){var r;try{r=l.fs.readFileSync(e).toString(\"utf8\")}catch(e){return void(t||c(e))}h(e,r)}else++g,i.fetch(e,(function(r,n){--g,o&&(r?t?g||c(null,i):c(r):h(e,n))}))}var g=0;l.isString(t)&&(t=[t]);for(var f,v=0;v<t.length;++v)(f=i.resolvePath(\"\",t[v]))&&p(f);if(a)return i;g||c(null,i)},h.prototype.loadSync=function(e,t){if(!l.isNode)throw Error(\"not supported\");return this.load(e,t,d)},h.prototype.resolveAll=function(){if(this.deferred.length)throw Error(\"unresolvable extensions: \"+this.deferred.map((function(e){return\"'extend \"+e.extend+\"' in \"+e.parent.fullName})).join(\", \"));return o.prototype.resolveAll.call(this)};var p=/^[A-Z]/;function g(e,t){var r=t.parent.lookup(t.extend);if(r){var o=new a(t.fullName,t.id,t.type,t.rule,void 0,t.options);return r.get(o.name)||(o.declaringField=t,t.extensionField=o,r.add(o)),!0}return!1}h.prototype._handleAdd=function(e){if(e instanceof a)void 0===e.extend||e.extensionField||g(0,e)||this.deferred.push(e);else if(e instanceof c)p.test(e.name)&&(e.parent[e.name]=e.values);else if(!(e instanceof u)){if(e instanceof i)for(var t=0;t<this.deferred.length;)g(0,this.deferred[t])?this.deferred.splice(t,1):++t;for(var r=0;r<e.nestedArray.length;++r)this._handleAdd(e._nestedArray[r]);p.test(e.name)&&(e.parent[e.name]=e)}},h.prototype._handleRemove=function(e){if(e instanceof a){if(void 0!==e.extend)if(e.extensionField)e.extensionField.parent.remove(e.extensionField),e.extensionField=null;else{var t=this.deferred.indexOf(e);t>-1&&this.deferred.splice(t,1)}}else if(e instanceof c)p.test(e.name)&&delete e.parent[e.name];else if(e instanceof o){for(var r=0;r<e.nestedArray.length;++r)this._handleRemove(e._nestedArray[r]);p.test(e.name)&&delete e.parent[e.name]}},h._configure=function(e,t,r){i=e,n=t,s=r}},6696:e=>{\"use strict\";e.exports={}},1164:(e,t,r)=>{\"use strict\";t.Service=r(44)},44:(e,t,r)=>{\"use strict\";e.exports=i;var o=r(9712);function i(e,t,r){if(\"function\"!=typeof e)throw TypeError(\"rpcImpl must be a function\");o.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(r)}(i.prototype=Object.create(o.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function e(t,r,i,n,s){if(!n)throw TypeError(\"request must be specified\");var a=this;if(!s)return o.asPromise(e,a,t,r,i,n);if(a.rpcImpl)try{return a.rpcImpl(t,r[a.requestDelimited?\"encodeDelimited\":\"encode\"](n).finish(),(function(e,r){if(e)return a.emit(\"error\",e,t),s(e);if(null!==r){if(!(r instanceof i))try{r=i[a.responseDelimited?\"decodeDelimited\":\"decode\"](r)}catch(e){return a.emit(\"error\",e,t),s(e)}return a.emit(\"data\",r,t),s(null,r)}a.end(!0)}))}catch(e){return a.emit(\"error\",e,t),void setTimeout((function(){s(e)}),0)}else setTimeout((function(){s(Error(\"already ended\"))}),0)},i.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit(\"end\").off()),this}},8616:(e,t,r)=>{\"use strict\";e.exports=a;var o=r(2088);((a.prototype=Object.create(o.prototype)).constructor=a).className=\"Service\";var i=r(4208),n=r(32),s=r(1164);function a(e,t){o.call(this,e,t),this.methods={},this._methodsArray=null}function c(e){return e._methodsArray=null,e}a.fromJSON=function(e,t){var r=new a(e,t.options);if(t.methods)for(var o=Object.keys(t.methods),n=0;n<o.length;++n)r.add(i.fromJSON(o[n],t.methods[o[n]]));return t.nested&&r.addJSON(t.nested),r.comment=t.comment,r},a.prototype.toJSON=function(e){var t=o.prototype.toJSON.call(this,e),r=!!e&&Boolean(e.keepComments);return n.toObject([\"options\",t&&t.options||void 0,\"methods\",o.arrayToJSON(this.methodsArray,e)||{},\"nested\",t&&t.nested||void 0,\"comment\",r?this.comment:void 0])},Object.defineProperty(a.prototype,\"methodsArray\",{get:function(){return this._methodsArray||(this._methodsArray=n.toArray(this.methods))}}),a.prototype.get=function(e){return this.methods[e]||o.prototype.get.call(this,e)},a.prototype.resolveAll=function(){for(var e=this.methodsArray,t=0;t<e.length;++t)e[t].resolve();return o.prototype.resolve.call(this)},a.prototype.add=function(e){if(this.get(e.name))throw Error(\"duplicate name '\"+e.name+\"' in \"+this);return e instanceof i?(this.methods[e.name]=e,e.parent=this,c(this)):o.prototype.add.call(this,e)},a.prototype.remove=function(e){if(e instanceof i){if(this.methods[e.name]!==e)throw Error(e+\" is not a member of \"+this);return delete this.methods[e.name],e.parent=null,c(this)}return o.prototype.remove.call(this,e)},a.prototype.create=function(e,t,r){for(var o,i=new s.Service(e,t,r),a=0;a<this.methodsArray.length;++a){var c=n.lcFirst((o=this._methodsArray[a]).resolve().name).replace(/[^$\\w_]/g,\"\");i[c]=n.codegen([\"r\",\"c\"],n.isReserved(c)?c+\"_\":c)(\"return this.rpcCall(m,q,s,r,c)\")({m:o,q:o.resolvedRequestType.ctor,s:o.resolvedResponseType.ctor})}return i}},9288:(e,t,r)=>{\"use strict\";e.exports=y;var o=r(2088);((y.prototype=Object.create(o.prototype)).constructor=y).className=\"Type\";var i=r(1376),n=r(8232),s=r(8376),a=r(188),c=r(8616),u=r(8700),l=r(4064),h=r(2664),d=r(32),p=r(4752),g=r(9708),f=r(1688),v=r(3056),_=r(1508);function y(e,t){o.call(this,e,t),this.fields={},this.oneofs=void 0,this.extensions=void 0,this.reserved=void 0,this.group=void 0,this._fieldsById=null,this._fieldsArray=null,this._oneofsArray=null,this._ctor=null}function m(e){return e._fieldsById=e._fieldsArray=e._oneofsArray=null,delete e.encode,delete e.decode,delete e.verify,e}Object.defineProperties(y.prototype,{fieldsById:{get:function(){if(this._fieldsById)return this._fieldsById;this._fieldsById={};for(var e=Object.keys(this.fields),t=0;t<e.length;++t){var r=this.fields[e[t]],o=r.id;if(this._fieldsById[o])throw Error(\"duplicate id \"+o+\" in \"+this);this._fieldsById[o]=r}return this._fieldsById}},fieldsArray:{get:function(){return this._fieldsArray||(this._fieldsArray=d.toArray(this.fields))}},oneofsArray:{get:function(){return this._oneofsArray||(this._oneofsArray=d.toArray(this.oneofs))}},ctor:{get:function(){return this._ctor||(this.ctor=y.generateConstructor(this)())},set:function(e){var t=e.prototype;t instanceof u||((e.prototype=new u).constructor=e,d.merge(e.prototype,t)),e.$type=e.prototype.$type=this,d.merge(e,u,!0),this._ctor=e;for(var r=0;r<this.fieldsArray.length;++r)this._fieldsArray[r].resolve();var o={};for(r=0;r<this.oneofsArray.length;++r)o[this._oneofsArray[r].resolve().name]={get:d.oneOfGetter(this._oneofsArray[r].oneof),set:d.oneOfSetter(this._oneofsArray[r].oneof)};r&&Object.defineProperties(e.prototype,o)}}}),y.generateConstructor=function(e){for(var t,r=d.codegen([\"p\"],e.name),o=0;o<e.fieldsArray.length;++o)(t=e._fieldsArray[o]).map?r(\"this%s={}\",d.safeProp(t.name)):t.repeated&&r(\"this%s=[]\",d.safeProp(t.name));return r(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\")(\"this[ks[i]]=p[ks[i]]\")},y.fromJSON=function(e,t){var r=new y(e,t.options);r.extensions=t.extensions,r.reserved=t.reserved;for(var u=Object.keys(t.fields),l=0;l<u.length;++l)r.add((void 0!==t.fields[u[l]].keyType?a.fromJSON:s.fromJSON)(u[l],t.fields[u[l]]));if(t.oneofs)for(u=Object.keys(t.oneofs),l=0;l<u.length;++l)r.add(n.fromJSON(u[l],t.oneofs[u[l]]));if(t.nested)for(u=Object.keys(t.nested),l=0;l<u.length;++l){var h=t.nested[u[l]];r.add((void 0!==h.id?s.fromJSON:void 0!==h.fields?y.fromJSON:void 0!==h.values?i.fromJSON:void 0!==h.methods?c.fromJSON:o.fromJSON)(u[l],h))}return t.extensions&&t.extensions.length&&(r.extensions=t.extensions),t.reserved&&t.reserved.length&&(r.reserved=t.reserved),t.group&&(r.group=!0),t.comment&&(r.comment=t.comment),r},y.prototype.toJSON=function(e){var t=o.prototype.toJSON.call(this,e),r=!!e&&Boolean(e.keepComments);return d.toObject([\"options\",t&&t.options||void 0,\"oneofs\",o.arrayToJSON(this.oneofsArray,e),\"fields\",o.arrayToJSON(this.fieldsArray.filter((function(e){return!e.declaringField})),e)||{},\"extensions\",this.extensions&&this.extensions.length?this.extensions:void 0,\"reserved\",this.reserved&&this.reserved.length?this.reserved:void 0,\"group\",this.group||void 0,\"nested\",t&&t.nested||void 0,\"comment\",r?this.comment:void 0])},y.prototype.resolveAll=function(){for(var e=this.fieldsArray,t=0;t<e.length;)e[t++].resolve();var r=this.oneofsArray;for(t=0;t<r.length;)r[t++].resolve();return o.prototype.resolveAll.call(this)},y.prototype.get=function(e){return this.fields[e]||this.oneofs&&this.oneofs[e]||this.nested&&this.nested[e]||null},y.prototype.add=function(e){if(this.get(e.name))throw Error(\"duplicate name '\"+e.name+\"' in \"+this);if(e instanceof s&&void 0===e.extend){if(this._fieldsById?this._fieldsById[e.id]:this.fieldsById[e.id])throw Error(\"duplicate id \"+e.id+\" in \"+this);if(this.isReservedId(e.id))throw Error(\"id \"+e.id+\" is reserved in \"+this);if(this.isReservedName(e.name))throw Error(\"name '\"+e.name+\"' is reserved in \"+this);return e.parent&&e.parent.remove(e),this.fields[e.name]=e,e.message=this,e.onAdd(this),m(this)}return e instanceof n?(this.oneofs||(this.oneofs={}),this.oneofs[e.name]=e,e.onAdd(this),m(this)):o.prototype.add.call(this,e)},y.prototype.remove=function(e){if(e instanceof s&&void 0===e.extend){if(!this.fields||this.fields[e.name]!==e)throw Error(e+\" is not a member of \"+this);return delete this.fields[e.name],e.parent=null,e.onRemove(this),m(this)}if(e instanceof n){if(!this.oneofs||this.oneofs[e.name]!==e)throw Error(e+\" is not a member of \"+this);return delete this.oneofs[e.name],e.parent=null,e.onRemove(this),m(this)}return o.prototype.remove.call(this,e)},y.prototype.isReservedId=function(e){return o.isReservedId(this.reserved,e)},y.prototype.isReservedName=function(e){return o.isReservedName(this.reserved,e)},y.prototype.create=function(e){return new this.ctor(e)},y.prototype.setup=function(){for(var e=this.fullName,t=[],r=0;r<this.fieldsArray.length;++r)t.push(this._fieldsArray[r].resolve().resolvedType);this.encode=p(this)({Writer:h,types:t,util:d}),this.decode=g(this)({Reader:l,types:t,util:d}),this.verify=f(this)({types:t,util:d}),this.fromObject=v.fromObject(this)({types:t,util:d}),this.toObject=v.toObject(this)({types:t,util:d});var o=_[e];if(o){var i=Object.create(this);i.fromObject=this.fromObject,this.fromObject=o.fromObject.bind(i),i.toObject=this.toObject,this.toObject=o.toObject.bind(i)}return this},y.prototype.encode=function(e,t){return this.setup().encode(e,t)},y.prototype.encodeDelimited=function(e,t){return this.encode(e,t&&t.len?t.fork():t).ldelim()},y.prototype.decode=function(e,t){return this.setup().decode(e,t)},y.prototype.decodeDelimited=function(e){return e instanceof l||(e=l.create(e)),this.decode(e,e.uint32())},y.prototype.verify=function(e){return this.setup().verify(e)},y.prototype.fromObject=function(e){return this.setup().fromObject(e)},y.prototype.toObject=function(e,t){return this.setup().toObject(e,t)},y.d=function(e){return function(t){d.decorateType(t,e)}}},1908:(e,t,r)=>{\"use strict\";var o=t,i=r(32),n=[\"double\",\"float\",\"int32\",\"uint32\",\"sint32\",\"fixed32\",\"sfixed32\",\"int64\",\"uint64\",\"sint64\",\"fixed64\",\"sfixed64\",\"bool\",\"string\",\"bytes\"];function s(e,t){var r=0,o={};for(t|=0;r<e.length;)o[n[r+t]]=e[r++];return o}o.basic=s([1,5,0,0,0,5,5,0,0,0,1,1,0,2,2]),o.defaults=s([0,0,0,0,0,0,0,0,0,0,0,0,!1,\"\",i.emptyArray,null]),o.long=s([0,0,0,1,1],7),o.mapKey=s([0,0,0,5,5,0,0,0,1,1,0,2],2),o.packed=s([1,5,0,0,0,5,5,0,0,0,1,1,0])},32:(e,t,r)=>{\"use strict\";var o,i,n=e.exports=r(9712),s=r(6696);n.codegen=r(4824),n.fetch=r(1560),n.path=r(7256),n.fs=n.inquire(\"fs\"),n.toArray=function(e){if(e){for(var t=Object.keys(e),r=new Array(t.length),o=0;o<t.length;)r[o]=e[t[o++]];return r}return[]},n.toObject=function(e){for(var t={},r=0;r<e.length;){var o=e[r++],i=e[r++];void 0!==i&&(t[o]=i)}return t};var a=/\\\\/g,c=/\"/g;n.isReserved=function(e){return/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(e)},n.safeProp=function(e){return!/^[$\\w_]+$/.test(e)||n.isReserved(e)?'[\"'+e.replace(a,\"\\\\\\\\\").replace(c,'\\\\\"')+'\"]':\".\"+e},n.ucFirst=function(e){return e.charAt(0).toUpperCase()+e.substring(1)};var u=/_([a-z])/g;n.camelCase=function(e){return e.substring(0,1)+e.substring(1).replace(u,(function(e,t){return t.toUpperCase()}))},n.compareFieldsById=function(e,t){return e.id-t.id},n.decorateType=function(e,t){if(e.$type)return t&&e.$type.name!==t&&(n.decorateRoot.remove(e.$type),e.$type.name=t,n.decorateRoot.add(e.$type)),e.$type;o||(o=r(9288));var i=new o(t||e.name);return n.decorateRoot.add(i),i.ctor=e,Object.defineProperty(e,\"$type\",{value:i,enumerable:!1}),Object.defineProperty(e.prototype,\"$type\",{value:i,enumerable:!1}),i};var l=0;n.decorateEnum=function(e){if(e.$type)return e.$type;i||(i=r(1376));var t=new i(\"Enum\"+l++,e);return n.decorateRoot.add(t),Object.defineProperty(e,\"$type\",{value:t,enumerable:!1}),t},n.setProperty=function(e,t,r){if(\"object\"!=typeof e)throw TypeError(\"dst must be an object\");if(!t)throw TypeError(\"path must be specified\");return function e(t,r,o){var i=r.shift();if(\"__proto__\"===i||\"prototype\"===i)return t;if(r.length>0)t[i]=e(t[i]||{},r,o);else{var n=t[i];n&&(o=[].concat(n).concat(o)),t[i]=o}return t}(e,t=t.split(\".\"),r)},Object.defineProperty(n,\"decorateRoot\",{get:function(){return s.decorated||(s.decorated=new(r(968)))}})},8864:(e,t,r)=>{\"use strict\";e.exports=i;var o=r(9712);function i(e,t){this.lo=e>>>0,this.hi=t>>>0}var n=i.zero=new i(0,0);n.toNumber=function(){return 0},n.zzEncode=n.zzDecode=function(){return this},n.length=function(){return 1};var s=i.zeroHash=\"\\0\\0\\0\\0\\0\\0\\0\\0\";i.fromNumber=function(e){if(0===e)return n;var t=e<0;t&&(e=-e);var r=e>>>0,o=(e-r)/4294967296>>>0;return t&&(o=~o>>>0,r=~r>>>0,++r>4294967295&&(r=0,++o>4294967295&&(o=0))),new i(r,o)},i.from=function(e){if(\"number\"==typeof e)return i.fromNumber(e);if(o.isString(e)){if(!o.Long)return i.fromNumber(parseInt(e,10));e=o.Long.fromString(e)}return e.low||e.high?new i(e.low>>>0,e.high>>>0):n},i.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,r=~this.hi>>>0;return t||(r=r+1>>>0),-(t+4294967296*r)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(e){return o.Long?new o.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var a=String.prototype.charCodeAt;i.fromHash=function(e){return e===s?n:new i((a.call(e,0)|a.call(e,1)<<8|a.call(e,2)<<16|a.call(e,3)<<24)>>>0,(a.call(e,4)|a.call(e,5)<<8|a.call(e,6)<<16|a.call(e,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},i.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},i.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:r<128?9:10}},9712:function(e,t,r){\"use strict\";var o=t;function i(e,t,r){for(var o=Object.keys(t),i=0;i<o.length;++i)void 0!==e[o[i]]&&r||(e[o[i]]=t[o[i]]);return e}function n(e){function t(e,r){if(!(this instanceof t))return new t(e,r);Object.defineProperty(this,\"message\",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,\"stack\",{value:(new Error).stack||\"\"}),r&&i(this,r)}return t.prototype=Object.create(Error.prototype,{constructor:{value:t,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return e},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+\": \"+this.message},writable:!0,enumerable:!1,configurable:!0}}),t}o.asPromise=r(5320),o.base64=r(752),o.EventEmitter=r(3947),o.float=r(3732),o.inquire=r(1528),o.utf8=r(1888),o.pool=r(6264),o.LongBits=r(8864),o.isNode=Boolean(void 0!==r.g&&r.g&&r.g.process&&r.g.process.versions&&r.g.process.versions.node),o.global=o.isNode&&r.g||\"undefined\"!=typeof window&&window||\"undefined\"!=typeof self&&self||this,o.emptyArray=Object.freeze?Object.freeze([]):[],o.emptyObject=Object.freeze?Object.freeze({}):{},o.isInteger=Number.isInteger||function(e){return\"number\"==typeof e&&isFinite(e)&&Math.floor(e)===e},o.isString=function(e){return\"string\"==typeof e||e instanceof String},o.isObject=function(e){return e&&\"object\"==typeof e},o.isset=o.isSet=function(e,t){var r=e[t];return!(null==r||!e.hasOwnProperty(t))&&(\"object\"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},o.Buffer=function(){try{var e=o.inquire(\"buffer\").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),o._Buffer_from=null,o._Buffer_allocUnsafe=null,o.newBuffer=function(e){return\"number\"==typeof e?o.Buffer?o._Buffer_allocUnsafe(e):new o.Array(e):o.Buffer?o._Buffer_from(e):\"undefined\"==typeof Uint8Array?e:new Uint8Array(e)},o.Array=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,o.Long=o.global.dcodeIO&&o.global.dcodeIO.Long||o.global.Long||o.inquire(\"long\"),o.key2Re=/^true|false|0|1$/,o.key32Re=/^-?(?:0|[1-9][0-9]*)$/,o.key64Re=/^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,o.longToHash=function(e){return e?o.LongBits.from(e).toHash():o.LongBits.zeroHash},o.longFromHash=function(e,t){var r=o.LongBits.fromHash(e);return o.Long?o.Long.fromBits(r.lo,r.hi,t):r.toNumber(Boolean(t))},o.merge=i,o.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},o.newError=n,o.ProtocolError=n(\"ProtocolError\"),o.oneOfGetter=function(e){for(var t={},r=0;r<e.length;++r)t[e[r]]=1;return function(){for(var e=Object.keys(this),r=e.length-1;r>-1;--r)if(1===t[e[r]]&&void 0!==this[e[r]]&&null!==this[e[r]])return e[r]}},o.oneOfSetter=function(e){return function(t){for(var r=0;r<e.length;++r)e[r]!==t&&delete this[e[r]]}},o.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},o._configure=function(){var e=o.Buffer;e?(o._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,r){return new e(t,r)},o._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):o._Buffer_from=o._Buffer_allocUnsafe=null}},1688:(e,t,r)=>{\"use strict\";e.exports=function(e){var t=i.codegen([\"m\"],e.name+\"$verify\")('if(typeof m!==\"object\"||m===null)')(\"return%j\",\"object expected\"),r=e.oneofsArray,o={};r.length&&t(\"var p={}\");for(var c=0;c<e.fieldsArray.length;++c){var u=e._fieldsArray[c].resolve(),l=\"m\"+i.safeProp(u.name);if(u.optional&&t(\"if(%s!=null&&m.hasOwnProperty(%j)){\",l,u.name),u.map)t(\"if(!util.isObject(%s))\",l)(\"return%j\",n(u,\"object\"))(\"var k=Object.keys(%s)\",l)(\"for(var i=0;i<k.length;++i){\"),a(t,u,\"k[i]\"),s(t,u,c,l+\"[k[i]]\")(\"}\");else if(u.repeated)t(\"if(!Array.isArray(%s))\",l)(\"return%j\",n(u,\"array\"))(\"for(var i=0;i<%s.length;++i){\",l),s(t,u,c,l+\"[i]\")(\"}\");else{if(u.partOf){var h=i.safeProp(u.partOf.name);1===o[u.partOf.name]&&t(\"if(p%s===1)\",h)(\"return%j\",u.partOf.name+\": multiple values\"),o[u.partOf.name]=1,t(\"p%s=1\",h)}s(t,u,c,l)}u.optional&&t(\"}\")}return t(\"return null\")};var o=r(1376),i=r(32);function n(e,t){return e.name+\": \"+t+(e.repeated&&\"array\"!==t?\"[]\":e.map&&\"object\"!==t?\"{k:\"+e.keyType+\"}\":\"\")+\" expected\"}function s(e,t,r,i){if(t.resolvedType)if(t.resolvedType instanceof o){e(\"switch(%s){\",i)(\"default:\")(\"return%j\",n(t,\"enum value\"));for(var s=Object.keys(t.resolvedType.values),a=0;a<s.length;++a)e(\"case %i:\",t.resolvedType.values[s[a]]);e(\"break\")(\"}\")}else e(\"{\")(\"var e=types[%i].verify(%s);\",r,i)(\"if(e)\")(\"return%j+e\",t.name+\".\")(\"}\");else switch(t.type){case\"int32\":case\"uint32\":case\"sint32\":case\"fixed32\":case\"sfixed32\":e(\"if(!util.isInteger(%s))\",i)(\"return%j\",n(t,\"integer\"));break;case\"int64\":case\"uint64\":case\"sint64\":case\"fixed64\":case\"sfixed64\":e(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\",i,i,i,i)(\"return%j\",n(t,\"integer|Long\"));break;case\"float\":case\"double\":e('if(typeof %s!==\"number\")',i)(\"return%j\",n(t,\"number\"));break;case\"bool\":e('if(typeof %s!==\"boolean\")',i)(\"return%j\",n(t,\"boolean\"));break;case\"string\":e(\"if(!util.isString(%s))\",i)(\"return%j\",n(t,\"string\"));break;case\"bytes\":e('if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))',i,i,i)(\"return%j\",n(t,\"buffer\"))}return e}function a(e,t,r){switch(t.keyType){case\"int32\":case\"uint32\":case\"sint32\":case\"fixed32\":case\"sfixed32\":e(\"if(!util.key32Re.test(%s))\",r)(\"return%j\",n(t,\"integer key\"));break;case\"int64\":case\"uint64\":case\"sint64\":case\"fixed64\":case\"sfixed64\":e(\"if(!util.key64Re.test(%s))\",r)(\"return%j\",n(t,\"integer|Long key\"));break;case\"bool\":e(\"if(!util.key2Re.test(%s))\",r)(\"return%j\",n(t,\"boolean key\"))}return e}},1508:(e,t,r)=>{\"use strict\";var o=t,i=r(8700);o[\".google.protobuf.Any\"]={fromObject:function(e){if(e&&e[\"@type\"]){var t=e[\"@type\"].substring(e[\"@type\"].lastIndexOf(\"/\")+1),r=this.lookup(t);if(r){var o=\".\"===e[\"@type\"].charAt(0)?e[\"@type\"].slice(1):e[\"@type\"];return-1===o.indexOf(\"/\")&&(o=\"/\"+o),this.create({type_url:o,value:r.encode(r.fromObject(e)).finish()})}}return this.fromObject(e)},toObject:function(e,t){var r=\"\",o=\"\";if(t&&t.json&&e.type_url&&e.value){o=e.type_url.substring(e.type_url.lastIndexOf(\"/\")+1),r=e.type_url.substring(0,e.type_url.lastIndexOf(\"/\")+1);var n=this.lookup(o);n&&(e=n.decode(e.value))}if(!(e instanceof this.ctor)&&e instanceof i){var s=e.$type.toObject(e,t);return\"\"===r&&(r=\"type.googleapis.com/\"),o=r+(\".\"===e.$type.fullName[0]?e.$type.fullName.slice(1):e.$type.fullName),s[\"@type\"]=o,s}return this.toObject(e,t)}}},2664:(e,t,r)=>{\"use strict\";e.exports=h;var o,i=r(9712),n=i.LongBits,s=i.base64,a=i.utf8;function c(e,t,r){this.fn=e,this.len=t,this.next=void 0,this.val=r}function u(){}function l(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function h(){this.len=0,this.head=new c(u,0,0),this.tail=this.head,this.states=null}var d=function(){return i.Buffer?function(){return(h.create=function(){return new o})()}:function(){return new h}};function p(e,t,r){t[r]=255&e}function g(e,t){this.len=e,this.next=void 0,this.val=t}function f(e,t,r){for(;e.hi;)t[r++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[r++]=127&e.lo|128,e.lo=e.lo>>>7;t[r++]=e.lo}function v(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}h.create=d(),h.alloc=function(e){return new i.Array(e)},i.Array!==Array&&(h.alloc=i.pool(h.alloc,i.Array.prototype.subarray)),h.prototype._push=function(e,t,r){return this.tail=this.tail.next=new c(e,t,r),this.len+=t,this},g.prototype=Object.create(c.prototype),g.prototype.fn=function(e,t,r){for(;e>127;)t[r++]=127&e|128,e>>>=7;t[r]=e},h.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new g((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},h.prototype.int32=function(e){return e<0?this._push(f,10,n.fromNumber(e)):this.uint32(e)},h.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},h.prototype.uint64=function(e){var t=n.from(e);return this._push(f,t.length(),t)},h.prototype.int64=h.prototype.uint64,h.prototype.sint64=function(e){var t=n.from(e).zzEncode();return this._push(f,t.length(),t)},h.prototype.bool=function(e){return this._push(p,1,e?1:0)},h.prototype.fixed32=function(e){return this._push(v,4,e>>>0)},h.prototype.sfixed32=h.prototype.fixed32,h.prototype.fixed64=function(e){var t=n.from(e);return this._push(v,4,t.lo)._push(v,4,t.hi)},h.prototype.sfixed64=h.prototype.fixed64,h.prototype.float=function(e){return this._push(i.float.writeFloatLE,4,e)},h.prototype.double=function(e){return this._push(i.float.writeDoubleLE,8,e)};var _=i.Array.prototype.set?function(e,t,r){t.set(e,r)}:function(e,t,r){for(var o=0;o<e.length;++o)t[r+o]=e[o]};h.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(p,1,0);if(i.isString(e)){var r=h.alloc(t=s.length(e));s.decode(e,r,0),e=r}return this.uint32(t)._push(_,t,e)},h.prototype.string=function(e){var t=a.length(e);return t?this.uint32(t)._push(a.write,t,e):this._push(p,1,0)},h.prototype.fork=function(){return this.states=new l(this),this.head=this.tail=new c(u,0,0),this.len=0,this},h.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new c(u,0,0),this.len=0),this},h.prototype.ldelim=function(){var e=this.head,t=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=e.next,this.tail=t,this.len+=r),this},h.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),r=0;e;)e.fn(e.val,t,r),r+=e.len,e=e.next;return t},h._configure=function(e){o=e,h.create=d(),o._configure()}},8135:(e,t,r)=>{\"use strict\";e.exports=n;var o=r(2664);(n.prototype=Object.create(o.prototype)).constructor=n;var i=r(9712);function n(){o.call(this)}function s(e,t,r){e.length<40?i.utf8.write(e,t,r):t.utf8Write?t.utf8Write(e,r):t.write(e,r)}n._configure=function(){n.alloc=i._Buffer_allocUnsafe,n.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&\"set\"===i.Buffer.prototype.set.name?function(e,t,r){t.set(e,r)}:function(e,t,r){if(e.copy)e.copy(t,r,0,e.length);else for(var o=0;o<e.length;)t[r++]=e[o++]}},n.prototype.bytes=function(e){i.isString(e)&&(e=i._Buffer_from(e,\"base64\"));var t=e.length>>>0;return this.uint32(t),t&&this._push(n.writeBytesBuffer,t,e),this},n.prototype.string=function(e){var t=i.Buffer.byteLength(e);return this.uint32(t),t&&this._push(s,t,e),this},n._configure()},2856:(e,t,r)=>{\"use strict\";r.r(t),r.d(t,{VERSION:()=>i,after:()=>Nt,all:()=>er,allKeys:()=>ve,any:()=>tr,assign:()=>Ne,before:()=>Ft,bind:()=>Rt,bindAll:()=>Vt,chain:()=>yt,chunk:()=>Dr,clone:()=>je,collect:()=>Ht,compact:()=>Tr,compose:()=>wt,constant:()=>Z,contains:()=>rr,countBy:()=>vr,create:()=>De,debounce:()=>Lt,default:()=>Gr,defaults:()=>Fe,defer:()=>Ct,delay:()=>bt,detect:()=>Kt,difference:()=>Cr,drop:()=>Pr,each:()=>Wt,escape:()=>st,every:()=>er,extend:()=>we,extendOwn:()=>Ne,filter:()=>Zt,find:()=>Kt,findIndex:()=>Bt,findKey:()=>Dt,findLastIndex:()=>Ut,findWhere:()=>qt,first:()=>Ar,flatten:()=>br,foldl:()=>Jt,foldr:()=>$t,forEach:()=>Wt,functions:()=>Se,get:()=>ze,groupBy:()=>gr,has:()=>Ye,head:()=>Ar,identity:()=>Ke,include:()=>rr,includes:()=>rr,indexBy:()=>fr,indexOf:()=>zt,initial:()=>Rr,inject:()=>Jt,intersection:()=>Mr,invert:()=>Le,invoke:()=>or,isArguments:()=>X,isArray:()=>q,isArrayBuffer:()=>D,isBoolean:()=>C,isDataView:()=>K,isDate:()=>w,isElement:()=>O,isEmpty:()=>ce,isEqual:()=>fe,isError:()=>F,isFinite:()=>J,isFunction:()=>U,isMap:()=>Pe,isMatch:()=>ue,isNaN:()=>$,isNull:()=>T,isNumber:()=>M,isObject:()=>V,isRegExp:()=>N,isSet:()=>Te,isString:()=>S,isSymbol:()=>I,isTypedArray:()=>ie,isUndefined:()=>b,isWeakMap:()=>Ve,isWeakSet:()=>be,iteratee:()=>Je,keys:()=>ae,last:()=>Vr,lastIndexOf:()=>Yt,map:()=>Ht,mapObject:()=>Ze,matcher:()=>qe,matches:()=>qe,max:()=>sr,memoize:()=>Tt,methods:()=>Se,min:()=>ar,mixin:()=>Br,negate:()=>Mt,noop:()=>Qe,now:()=>ot,object:()=>Fr,omit:()=>xr,once:()=>It,pairs:()=>Oe,partial:()=>xt,partition:()=>_r,pick:()=>Er,pluck:()=>ir,property:()=>We,propertyOf:()=>et,random:()=>rt,range:()=>Ir,reduce:()=>Jt,reduceRight:()=>$t,reject:()=>Qt,rest:()=>Pr,restArguments:()=>P,result:()=>ft,sample:()=>lr,select:()=>Zt,shuffle:()=>hr,size:()=>yr,some:()=>tr,sortBy:()=>dr,sortedIndex:()=>kt,tail:()=>Pr,take:()=>Ar,tap:()=>Be,template:()=>gt,templateSettings:()=>ct,throttle:()=>Ot,times:()=>tt,toArray:()=>ur,toPath:()=>Ue,transpose:()=>wr,unescape:()=>at,union:()=>Sr,uniq:()=>Lr,unique:()=>Lr,uniqueId:()=>_t,unzip:()=>wr,values:()=>Ce,where:()=>nr,without:()=>Or,wrap:()=>St,zip:()=>Nr});var o={};r.r(o),r.d(o,{VERSION:()=>i,after:()=>Nt,all:()=>er,allKeys:()=>ve,any:()=>tr,assign:()=>Ne,before:()=>Ft,bind:()=>Rt,bindAll:()=>Vt,chain:()=>yt,chunk:()=>Dr,clone:()=>je,collect:()=>Ht,compact:()=>Tr,compose:()=>wt,constant:()=>Z,contains:()=>rr,countBy:()=>vr,create:()=>De,debounce:()=>Lt,default:()=>Ur,defaults:()=>Fe,defer:()=>Ct,delay:()=>bt,detect:()=>Kt,difference:()=>Cr,drop:()=>Pr,each:()=>Wt,escape:()=>st,every:()=>er,extend:()=>we,extendOwn:()=>Ne,filter:()=>Zt,find:()=>Kt,findIndex:()=>Bt,findKey:()=>Dt,findLastIndex:()=>Ut,findWhere:()=>qt,first:()=>Ar,flatten:()=>br,foldl:()=>Jt,foldr:()=>$t,forEach:()=>Wt,functions:()=>Se,get:()=>ze,groupBy:()=>gr,has:()=>Ye,head:()=>Ar,identity:()=>Ke,include:()=>rr,includes:()=>rr,indexBy:()=>fr,indexOf:()=>zt,initial:()=>Rr,inject:()=>Jt,intersection:()=>Mr,invert:()=>Le,invoke:()=>or,isArguments:()=>X,isArray:()=>q,isArrayBuffer:()=>D,isBoolean:()=>C,isDataView:()=>K,isDate:()=>w,isElement:()=>O,isEmpty:()=>ce,isEqual:()=>fe,isError:()=>F,isFinite:()=>J,isFunction:()=>U,isMap:()=>Pe,isMatch:()=>ue,isNaN:()=>$,isNull:()=>T,isNumber:()=>M,isObject:()=>V,isRegExp:()=>N,isSet:()=>Te,isString:()=>S,isSymbol:()=>I,isTypedArray:()=>ie,isUndefined:()=>b,isWeakMap:()=>Ve,isWeakSet:()=>be,iteratee:()=>Je,keys:()=>ae,last:()=>Vr,lastIndexOf:()=>Yt,map:()=>Ht,mapObject:()=>Ze,matcher:()=>qe,matches:()=>qe,max:()=>sr,memoize:()=>Tt,methods:()=>Se,min:()=>ar,mixin:()=>Br,negate:()=>Mt,noop:()=>Qe,now:()=>ot,object:()=>Fr,omit:()=>xr,once:()=>It,pairs:()=>Oe,partial:()=>xt,partition:()=>_r,pick:()=>Er,pluck:()=>ir,property:()=>We,propertyOf:()=>et,random:()=>rt,range:()=>Ir,reduce:()=>Jt,reduceRight:()=>$t,reject:()=>Qt,rest:()=>Pr,restArguments:()=>P,result:()=>ft,sample:()=>lr,select:()=>Zt,shuffle:()=>hr,size:()=>yr,some:()=>tr,sortBy:()=>dr,sortedIndex:()=>kt,tail:()=>Pr,take:()=>Ar,tap:()=>Be,template:()=>gt,templateSettings:()=>ct,throttle:()=>Ot,times:()=>tt,toArray:()=>ur,toPath:()=>Ue,transpose:()=>wr,unescape:()=>at,union:()=>Sr,uniq:()=>Lr,unique:()=>Lr,uniqueId:()=>_t,unzip:()=>wr,values:()=>Ce,where:()=>nr,without:()=>Or,wrap:()=>St,zip:()=>Nr});var i=\"1.13.6\",n=\"object\"==typeof self&&self.self===self&&self||\"object\"==typeof global&&global.global===global&&global||Function(\"return this\")()||{},s=Array.prototype,a=Object.prototype,c=\"undefined\"!=typeof Symbol?Symbol.prototype:null,u=s.push,l=s.slice,h=a.toString,d=a.hasOwnProperty,p=\"undefined\"!=typeof ArrayBuffer,g=\"undefined\"!=typeof DataView,f=Array.isArray,v=Object.keys,_=Object.create,y=p&&ArrayBuffer.isView,m=isNaN,E=isFinite,x=!{toString:null}.propertyIsEnumerable(\"toString\"),R=[\"valueOf\",\"isPrototypeOf\",\"toString\",\"propertyIsEnumerable\",\"hasOwnProperty\",\"toLocaleString\"],A=Math.pow(2,53)-1;function P(e,t){return t=null==t?e.length-1:+t,function(){for(var r=Math.max(arguments.length-t,0),o=Array(r),i=0;i<r;i++)o[i]=arguments[i+t];switch(t){case 0:return e.call(this,o);case 1:return e.call(this,arguments[0],o);case 2:return e.call(this,arguments[0],arguments[1],o)}var n=Array(t+1);for(i=0;i<t;i++)n[i]=arguments[i];return n[t]=o,e.apply(this,n)}}function V(e){var t=typeof e;return\"function\"===t||\"object\"===t&&!!e}function T(e){return null===e}function b(e){return void 0===e}function C(e){return!0===e||!1===e||\"[object Boolean]\"===h.call(e)}function O(e){return!(!e||1!==e.nodeType)}function L(e){var t=\"[object \"+e+\"]\";return function(e){return h.call(e)===t}}const S=L(\"String\"),M=L(\"Number\"),w=L(\"Date\"),N=L(\"RegExp\"),F=L(\"Error\"),I=L(\"Symbol\"),D=L(\"ArrayBuffer\");var j=L(\"Function\"),B=n.document&&n.document.childNodes;\"object\"!=typeof Int8Array&&\"function\"!=typeof B&&(j=function(e){return\"function\"==typeof e||!1});const U=j,k=L(\"Object\");var G=g&&k(new DataView(new ArrayBuffer(8))),z=\"undefined\"!=typeof Map&&k(new Map),Y=L(\"DataView\");const K=G?function(e){return null!=e&&U(e.getInt8)&&D(e.buffer)}:Y,q=f||L(\"Array\");function W(e,t){return null!=e&&d.call(e,t)}var H=L(\"Arguments\");!function(){H(arguments)||(H=function(e){return W(e,\"callee\")})}();const X=H;function J(e){return!I(e)&&E(e)&&!isNaN(parseFloat(e))}function $(e){return M(e)&&m(e)}function Z(e){return function(){return e}}function Q(e){return function(t){var r=e(t);return\"number\"==typeof r&&r>=0&&r<=A}}function ee(e){return function(t){return null==t?void 0:t[e]}}const te=ee(\"byteLength\"),re=Q(te);var oe=/\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;const ie=p?function(e){return y?y(e)&&!K(e):re(e)&&oe.test(h.call(e))}:Z(!1),ne=ee(\"length\");function se(e,t){t=function(e){for(var t={},r=e.length,o=0;o<r;++o)t[e[o]]=!0;return{contains:function(e){return!0===t[e]},push:function(r){return t[r]=!0,e.push(r)}}}(t);var r=R.length,o=e.constructor,i=U(o)&&o.prototype||a,n=\"constructor\";for(W(e,n)&&!t.contains(n)&&t.push(n);r--;)(n=R[r])in e&&e[n]!==i[n]&&!t.contains(n)&&t.push(n)}function ae(e){if(!V(e))return[];if(v)return v(e);var t=[];for(var r in e)W(e,r)&&t.push(r);return x&&se(e,t),t}function ce(e){if(null==e)return!0;var t=ne(e);return\"number\"==typeof t&&(q(e)||S(e)||X(e))?0===t:0===ne(ae(e))}function ue(e,t){var r=ae(t),o=r.length;if(null==e)return!o;for(var i=Object(e),n=0;n<o;n++){var s=r[n];if(t[s]!==i[s]||!(s in i))return!1}return!0}function le(e){return e instanceof le?e:this instanceof le?void(this._wrapped=e):new le(e)}function he(e){return new Uint8Array(e.buffer||e,e.byteOffset||0,te(e))}le.VERSION=i,le.prototype.value=function(){return this._wrapped},le.prototype.valueOf=le.prototype.toJSON=le.prototype.value,le.prototype.toString=function(){return String(this._wrapped)};var de=\"[object DataView]\";function pe(e,t,r,o){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=typeof e;return(\"function\"===i||\"object\"===i||\"object\"==typeof t)&&ge(e,t,r,o)}function ge(e,t,r,o){e instanceof le&&(e=e._wrapped),t instanceof le&&(t=t._wrapped);var i=h.call(e);if(i!==h.call(t))return!1;if(G&&\"[object Object]\"==i&&K(e)){if(!K(t))return!1;i=de}switch(i){case\"[object RegExp]\":case\"[object String]\":return\"\"+e==\"\"+t;case\"[object Number]\":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case\"[object Date]\":case\"[object Boolean]\":return+e==+t;case\"[object Symbol]\":return c.valueOf.call(e)===c.valueOf.call(t);case\"[object ArrayBuffer]\":case de:return ge(he(e),he(t),r,o)}var n=\"[object Array]\"===i;if(!n&&ie(e)){if(te(e)!==te(t))return!1;if(e.buffer===t.buffer&&e.byteOffset===t.byteOffset)return!0;n=!0}if(!n){if(\"object\"!=typeof e||\"object\"!=typeof t)return!1;var s=e.constructor,a=t.constructor;if(s!==a&&!(U(s)&&s instanceof s&&U(a)&&a instanceof a)&&\"constructor\"in e&&\"constructor\"in t)return!1}o=o||[];for(var u=(r=r||[]).length;u--;)if(r[u]===e)return o[u]===t;if(r.push(e),o.push(t),n){if((u=e.length)!==t.length)return!1;for(;u--;)if(!pe(e[u],t[u],r,o))return!1}else{var l,d=ae(e);if(u=d.length,ae(t).length!==u)return!1;for(;u--;)if(!W(t,l=d[u])||!pe(e[l],t[l],r,o))return!1}return r.pop(),o.pop(),!0}function fe(e,t){return pe(e,t)}function ve(e){if(!V(e))return[];var t=[];for(var r in e)t.push(r);return x&&se(e,t),t}function _e(e){var t=ne(e);return function(r){if(null==r)return!1;var o=ve(r);if(ne(o))return!1;for(var i=0;i<t;i++)if(!U(r[e[i]]))return!1;return e!==Re||!U(r[ye])}}var ye=\"forEach\",me=[\"clear\",\"delete\"],Ee=[\"get\",\"has\",\"set\"],xe=me.concat(ye,Ee),Re=me.concat(Ee),Ae=[\"add\"].concat(me,ye,\"has\");const Pe=z?_e(xe):L(\"Map\"),Ve=z?_e(Re):L(\"WeakMap\"),Te=z?_e(Ae):L(\"Set\"),be=L(\"WeakSet\");function Ce(e){for(var t=ae(e),r=t.length,o=Array(r),i=0;i<r;i++)o[i]=e[t[i]];return o}function Oe(e){for(var t=ae(e),r=t.length,o=Array(r),i=0;i<r;i++)o[i]=[t[i],e[t[i]]];return o}function Le(e){for(var t={},r=ae(e),o=0,i=r.length;o<i;o++)t[e[r[o]]]=r[o];return t}function Se(e){var t=[];for(var r in e)U(e[r])&&t.push(r);return t.sort()}function Me(e,t){return function(r){var o=arguments.length;if(t&&(r=Object(r)),o<2||null==r)return r;for(var i=1;i<o;i++)for(var n=arguments[i],s=e(n),a=s.length,c=0;c<a;c++){var u=s[c];t&&void 0!==r[u]||(r[u]=n[u])}return r}}const we=Me(ve),Ne=Me(ae),Fe=Me(ve,!0);function Ie(e){if(!V(e))return{};if(_)return _(e);var t=function(){};t.prototype=e;var r=new t;return t.prototype=null,r}function De(e,t){var r=Ie(e);return t&&Ne(r,t),r}function je(e){return V(e)?q(e)?e.slice():we({},e):e}function Be(e,t){return t(e),e}function Ue(e){return q(e)?e:[e]}function ke(e){return le.toPath(e)}function Ge(e,t){for(var r=t.length,o=0;o<r;o++){if(null==e)return;e=e[t[o]]}return r?e:void 0}function ze(e,t,r){var o=Ge(e,ke(t));return b(o)?r:o}function Ye(e,t){for(var r=(t=ke(t)).length,o=0;o<r;o++){var i=t[o];if(!W(e,i))return!1;e=e[i]}return!!r}function Ke(e){return e}function qe(e){return e=Ne({},e),function(t){return ue(t,e)}}function We(e){return e=ke(e),function(t){return Ge(t,e)}}function He(e,t,r){if(void 0===t)return e;switch(null==r?3:r){case 1:return function(r){return e.call(t,r)};case 3:return function(r,o,i){return e.call(t,r,o,i)};case 4:return function(r,o,i,n){return e.call(t,r,o,i,n)}}return function(){return e.apply(t,arguments)}}function Xe(e,t,r){return null==e?Ke:U(e)?He(e,t,r):V(e)&&!q(e)?qe(e):We(e)}function Je(e,t){return Xe(e,t,1/0)}function $e(e,t,r){return le.iteratee!==Je?le.iteratee(e,t):Xe(e,t,r)}function Ze(e,t,r){t=$e(t,r);for(var o=ae(e),i=o.length,n={},s=0;s<i;s++){var a=o[s];n[a]=t(e[a],a,e)}return n}function Qe(){}function et(e){return null==e?Qe:function(t){return ze(e,t)}}function tt(e,t,r){var o=Array(Math.max(0,e));t=He(t,r,1);for(var i=0;i<e;i++)o[i]=t(i);return o}function rt(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))}le.toPath=Ue,le.iteratee=Je;const ot=Date.now||function(){return(new Date).getTime()};function it(e){var t=function(t){return e[t]},r=\"(?:\"+ae(e).join(\"|\")+\")\",o=RegExp(r),i=RegExp(r,\"g\");return function(e){return e=null==e?\"\":\"\"+e,o.test(e)?e.replace(i,t):e}}const nt={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},st=it(nt),at=it(Le(nt)),ct=le.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,escape:/<%-([\\s\\S]+?)%>/g};var ut=/(.)^/,lt={\"'\":\"'\",\"\\\\\":\"\\\\\",\"\\r\":\"r\",\"\\n\":\"n\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},ht=/\\\\|'|\\r|\\n|\\u2028|\\u2029/g;function dt(e){return\"\\\\\"+lt[e]}var pt=/^\\s*(\\w|\\$)+\\s*$/;function gt(e,t,r){!t&&r&&(t=r),t=Fe({},t,le.templateSettings);var o=RegExp([(t.escape||ut).source,(t.interpolate||ut).source,(t.evaluate||ut).source].join(\"|\")+\"|$\",\"g\"),i=0,n=\"__p+='\";e.replace(o,(function(t,r,o,s,a){return n+=e.slice(i,a).replace(ht,dt),i=a+t.length,r?n+=\"'+\\n((__t=(\"+r+\"))==null?'':_.escape(__t))+\\n'\":o?n+=\"'+\\n((__t=(\"+o+\"))==null?'':__t)+\\n'\":s&&(n+=\"';\\n\"+s+\"\\n__p+='\"),t})),n+=\"';\\n\";var s,a=t.variable;if(a){if(!pt.test(a))throw new Error(\"variable is not a bare identifier: \"+a)}else n=\"with(obj||{}){\\n\"+n+\"}\\n\",a=\"obj\";n=\"var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\\n\"+n+\"return __p;\\n\";try{s=new Function(a,\"_\",n)}catch(e){throw e.source=n,e}var c=function(e){return s.call(this,e,le)};return c.source=\"function(\"+a+\"){\\n\"+n+\"}\",c}function ft(e,t,r){var o=(t=ke(t)).length;if(!o)return U(r)?r.call(e):r;for(var i=0;i<o;i++){var n=null==e?void 0:e[t[i]];void 0===n&&(n=r,i=o),e=U(n)?n.call(e):n}return e}var vt=0;function _t(e){var t=++vt+\"\";return e?e+t:t}function yt(e){var t=le(e);return t._chain=!0,t}function mt(e,t,r,o,i){if(!(o instanceof t))return e.apply(r,i);var n=Ie(e.prototype),s=e.apply(n,i);return V(s)?s:n}var Et=P((function(e,t){var r=Et.placeholder,o=function(){for(var i=0,n=t.length,s=Array(n),a=0;a<n;a++)s[a]=t[a]===r?arguments[i++]:t[a];for(;i<arguments.length;)s.push(arguments[i++]);return mt(e,o,this,this,s)};return o}));Et.placeholder=le;const xt=Et,Rt=P((function(e,t,r){if(!U(e))throw new TypeError(\"Bind must be called on a function\");var o=P((function(i){return mt(e,o,t,this,r.concat(i))}));return o})),At=Q(ne);function Pt(e,t,r,o){if(o=o||[],t||0===t){if(t<=0)return o.concat(e)}else t=1/0;for(var i=o.length,n=0,s=ne(e);n<s;n++){var a=e[n];if(At(a)&&(q(a)||X(a)))if(t>1)Pt(a,t-1,r,o),i=o.length;else for(var c=0,u=a.length;c<u;)o[i++]=a[c++];else r||(o[i++]=a)}return o}const Vt=P((function(e,t){var r=(t=Pt(t,!1,!1)).length;if(r<1)throw new Error(\"bindAll must be passed function names\");for(;r--;){var o=t[r];e[o]=Rt(e[o],e)}return e}));function Tt(e,t){var r=function(o){var i=r.cache,n=\"\"+(t?t.apply(this,arguments):o);return W(i,n)||(i[n]=e.apply(this,arguments)),i[n]};return r.cache={},r}const bt=P((function(e,t,r){return setTimeout((function(){return e.apply(null,r)}),t)})),Ct=xt(bt,le,1);function Ot(e,t,r){var o,i,n,s,a=0;r||(r={});var c=function(){a=!1===r.leading?0:ot(),o=null,s=e.apply(i,n),o||(i=n=null)},u=function(){var u=ot();a||!1!==r.leading||(a=u);var l=t-(u-a);return i=this,n=arguments,l<=0||l>t?(o&&(clearTimeout(o),o=null),a=u,s=e.apply(i,n),o||(i=n=null)):o||!1===r.trailing||(o=setTimeout(c,l)),s};return u.cancel=function(){clearTimeout(o),a=0,o=i=n=null},u}function Lt(e,t,r){var o,i,n,s,a,c=function(){var u=ot()-i;t>u?o=setTimeout(c,t-u):(o=null,r||(s=e.apply(a,n)),o||(n=a=null))},u=P((function(u){return a=this,n=u,i=ot(),o||(o=setTimeout(c,t),r&&(s=e.apply(a,n))),s}));return u.cancel=function(){clearTimeout(o),o=n=a=null},u}function St(e,t){return xt(t,e)}function Mt(e){return function(){return!e.apply(this,arguments)}}function wt(){var e=arguments,t=e.length-1;return function(){for(var r=t,o=e[t].apply(this,arguments);r--;)o=e[r].call(this,o);return o}}function Nt(e,t){return function(){if(--e<1)return t.apply(this,arguments)}}function Ft(e,t){var r;return function(){return--e>0&&(r=t.apply(this,arguments)),e<=1&&(t=null),r}}const It=xt(Ft,2);function Dt(e,t,r){t=$e(t,r);for(var o,i=ae(e),n=0,s=i.length;n<s;n++)if(t(e[o=i[n]],o,e))return o}function jt(e){return function(t,r,o){r=$e(r,o);for(var i=ne(t),n=e>0?0:i-1;n>=0&&n<i;n+=e)if(r(t[n],n,t))return n;return-1}}const Bt=jt(1),Ut=jt(-1);function kt(e,t,r,o){for(var i=(r=$e(r,o,1))(t),n=0,s=ne(e);n<s;){var a=Math.floor((n+s)/2);r(e[a])<i?n=a+1:s=a}return n}function Gt(e,t,r){return function(o,i,n){var s=0,a=ne(o);if(\"number\"==typeof n)e>0?s=n>=0?n:Math.max(n+a,s):a=n>=0?Math.min(n+1,a):n+a+1;else if(r&&n&&a)return o[n=r(o,i)]===i?n:-1;if(i!=i)return(n=t(l.call(o,s,a),$))>=0?n+s:-1;for(n=e>0?s:a-1;n>=0&&n<a;n+=e)if(o[n]===i)return n;return-1}}const zt=Gt(1,Bt,kt),Yt=Gt(-1,Ut);function Kt(e,t,r){var o=(At(e)?Bt:Dt)(e,t,r);if(void 0!==o&&-1!==o)return e[o]}function qt(e,t){return Kt(e,qe(t))}function Wt(e,t,r){var o,i;if(t=He(t,r),At(e))for(o=0,i=e.length;o<i;o++)t(e[o],o,e);else{var n=ae(e);for(o=0,i=n.length;o<i;o++)t(e[n[o]],n[o],e)}return e}function Ht(e,t,r){t=$e(t,r);for(var o=!At(e)&&ae(e),i=(o||e).length,n=Array(i),s=0;s<i;s++){var a=o?o[s]:s;n[s]=t(e[a],a,e)}return n}function Xt(e){return function(t,r,o,i){var n=arguments.length>=3;return function(t,r,o,i){var n=!At(t)&&ae(t),s=(n||t).length,a=e>0?0:s-1;for(i||(o=t[n?n[a]:a],a+=e);a>=0&&a<s;a+=e){var c=n?n[a]:a;o=r(o,t[c],c,t)}return o}(t,He(r,i,4),o,n)}}const Jt=Xt(1),$t=Xt(-1);function Zt(e,t,r){var o=[];return t=$e(t,r),Wt(e,(function(e,r,i){t(e,r,i)&&o.push(e)})),o}function Qt(e,t,r){return Zt(e,Mt($e(t)),r)}function er(e,t,r){t=$e(t,r);for(var o=!At(e)&&ae(e),i=(o||e).length,n=0;n<i;n++){var s=o?o[n]:n;if(!t(e[s],s,e))return!1}return!0}function tr(e,t,r){t=$e(t,r);for(var o=!At(e)&&ae(e),i=(o||e).length,n=0;n<i;n++){var s=o?o[n]:n;if(t(e[s],s,e))return!0}return!1}function rr(e,t,r,o){return At(e)||(e=Ce(e)),(\"number\"!=typeof r||o)&&(r=0),zt(e,t,r)>=0}const or=P((function(e,t,r){var o,i;return U(t)?i=t:(t=ke(t),o=t.slice(0,-1),t=t[t.length-1]),Ht(e,(function(e){var n=i;if(!n){if(o&&o.length&&(e=Ge(e,o)),null==e)return;n=e[t]}return null==n?n:n.apply(e,r)}))}));function ir(e,t){return Ht(e,We(t))}function nr(e,t){return Zt(e,qe(t))}function sr(e,t,r){var o,i,n=-1/0,s=-1/0;if(null==t||\"number\"==typeof t&&\"object\"!=typeof e[0]&&null!=e)for(var a=0,c=(e=At(e)?e:Ce(e)).length;a<c;a++)null!=(o=e[a])&&o>n&&(n=o);else t=$e(t,r),Wt(e,(function(e,r,o){((i=t(e,r,o))>s||i===-1/0&&n===-1/0)&&(n=e,s=i)}));return n}function ar(e,t,r){var o,i,n=1/0,s=1/0;if(null==t||\"number\"==typeof t&&\"object\"!=typeof e[0]&&null!=e)for(var a=0,c=(e=At(e)?e:Ce(e)).length;a<c;a++)null!=(o=e[a])&&o<n&&(n=o);else t=$e(t,r),Wt(e,(function(e,r,o){((i=t(e,r,o))<s||i===1/0&&n===1/0)&&(n=e,s=i)}));return n}var cr=/[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;function ur(e){return e?q(e)?l.call(e):S(e)?e.match(cr):At(e)?Ht(e,Ke):Ce(e):[]}function lr(e,t,r){if(null==t||r)return At(e)||(e=Ce(e)),e[rt(e.length-1)];var o=ur(e),i=ne(o);t=Math.max(Math.min(t,i),0);for(var n=i-1,s=0;s<t;s++){var a=rt(s,n),c=o[s];o[s]=o[a],o[a]=c}return o.slice(0,t)}function hr(e){return lr(e,1/0)}function dr(e,t,r){var o=0;return t=$e(t,r),ir(Ht(e,(function(e,r,i){return{value:e,index:o++,criteria:t(e,r,i)}})).sort((function(e,t){var r=e.criteria,o=t.criteria;if(r!==o){if(r>o||void 0===r)return 1;if(r<o||void 0===o)return-1}return e.index-t.index})),\"value\")}function pr(e,t){return function(r,o,i){var n=t?[[],[]]:{};return o=$e(o,i),Wt(r,(function(t,i){var s=o(t,i,r);e(n,t,s)})),n}}const gr=pr((function(e,t,r){W(e,r)?e[r].push(t):e[r]=[t]})),fr=pr((function(e,t,r){e[r]=t})),vr=pr((function(e,t,r){W(e,r)?e[r]++:e[r]=1})),_r=pr((function(e,t,r){e[r?0:1].push(t)}),!0);function yr(e){return null==e?0:At(e)?e.length:ae(e).length}function mr(e,t,r){return t in r}const Er=P((function(e,t){var r={},o=t[0];if(null==e)return r;U(o)?(t.length>1&&(o=He(o,t[1])),t=ve(e)):(o=mr,t=Pt(t,!1,!1),e=Object(e));for(var i=0,n=t.length;i<n;i++){var s=t[i],a=e[s];o(a,s,e)&&(r[s]=a)}return r})),xr=P((function(e,t){var r,o=t[0];return U(o)?(o=Mt(o),t.length>1&&(r=t[1])):(t=Ht(Pt(t,!1,!1),String),o=function(e,r){return!rr(t,r)}),Er(e,o,r)}));function Rr(e,t,r){return l.call(e,0,Math.max(0,e.length-(null==t||r?1:t)))}function Ar(e,t,r){return null==e||e.length<1?null==t||r?void 0:[]:null==t||r?e[0]:Rr(e,e.length-t)}function Pr(e,t,r){return l.call(e,null==t||r?1:t)}function Vr(e,t,r){return null==e||e.length<1?null==t||r?void 0:[]:null==t||r?e[e.length-1]:Pr(e,Math.max(0,e.length-t))}function Tr(e){return Zt(e,Boolean)}function br(e,t){return Pt(e,t,!1)}const Cr=P((function(e,t){return t=Pt(t,!0,!0),Zt(e,(function(e){return!rr(t,e)}))})),Or=P((function(e,t){return Cr(e,t)}));function Lr(e,t,r,o){C(t)||(o=r,r=t,t=!1),null!=r&&(r=$e(r,o));for(var i=[],n=[],s=0,a=ne(e);s<a;s++){var c=e[s],u=r?r(c,s,e):c;t&&!r?(s&&n===u||i.push(c),n=u):r?rr(n,u)||(n.push(u),i.push(c)):rr(i,c)||i.push(c)}return i}const Sr=P((function(e){return Lr(Pt(e,!0,!0))}));function Mr(e){for(var t=[],r=arguments.length,o=0,i=ne(e);o<i;o++){var n=e[o];if(!rr(t,n)){var s;for(s=1;s<r&&rr(arguments[s],n);s++);s===r&&t.push(n)}}return t}function wr(e){for(var t=e&&sr(e,ne).length||0,r=Array(t),o=0;o<t;o++)r[o]=ir(e,o);return r}const Nr=P(wr);function Fr(e,t){for(var r={},o=0,i=ne(e);o<i;o++)t?r[e[o]]=t[o]:r[e[o][0]]=e[o][1];return r}function Ir(e,t,r){null==t&&(t=e||0,e=0),r||(r=t<e?-1:1);for(var o=Math.max(Math.ceil((t-e)/r),0),i=Array(o),n=0;n<o;n++,e+=r)i[n]=e;return i}function Dr(e,t){if(null==t||t<1)return[];for(var r=[],o=0,i=e.length;o<i;)r.push(l.call(e,o,o+=t));return r}function jr(e,t){return e._chain?le(t).chain():t}function Br(e){return Wt(Se(e),(function(t){var r=le[t]=e[t];le.prototype[t]=function(){var e=[this._wrapped];return u.apply(e,arguments),jr(this,r.apply(le,e))}})),le}Wt([\"pop\",\"push\",\"reverse\",\"shift\",\"sort\",\"splice\",\"unshift\"],(function(e){var t=s[e];le.prototype[e]=function(){var r=this._wrapped;return null!=r&&(t.apply(r,arguments),\"shift\"!==e&&\"splice\"!==e||0!==r.length||delete r[0]),jr(this,r)}})),Wt([\"concat\",\"join\",\"slice\"],(function(e){var t=s[e];le.prototype[e]=function(){var e=this._wrapped;return null!=e&&(e=t.apply(e,arguments)),jr(this,e)}}));const Ur=le;var kr=Br(o);kr._=kr;const Gr=kr}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})};var __webpack_exports__={};return(()=>{\"use strict\";var e=__webpack_exports__;Object.defineProperty(e,\"__esModule\",{value:!0}),e.getBoundedRegionFaces=e.getRegionEdges=e.mergeConnectedFaces=e.getOrderedFacesOnVertex=e.saveToProtoMessage=e.saveToProtoBinary=e.SolidDefSaver=e.SolidDefLoader=e.Path2D=e.DebugUtils=e.svgFromWire=e.transformTopology=e.TopologyStitcher=e.TopologyCloner=e.extrudeFace=e.createEdgeFromCurve=e.createFaceFromPolyline=e.createShellsFromFaces=e.createPolyhedron=e.createLineEdgeBetweenVertices=e.createLineEdge=e.createCylinder=e.createCone=e.createBlock=e.computeCurveCurveIntersections=e.SketchRegionSolver=e.facetPlanarFace=e.checkValidity=e.BoundingBox=e.Attribute=e.Wire=e.WireBody=e.Vertex=e.Edge=e.Coedge=e.Loop=e.Face=e.Shell=e.Lump=e.Body=e.BSurface=e.Torus=e.EllipticalCone=e.Cone=e.Sphere=e.EllipticalCylinder=e.Cylinder=e.Plane=e.BCurve=e.Ellipse=e.Circle=e.Line=e.Point=e.TOPOLOGY_TYPES=e.GEOMETRY_TYPES=e.KERNEL_TOLERANCE=void 0;var t=__webpack_require__(2468),r=__webpack_require__(3344),o=__webpack_require__(3565),i=__webpack_require__(1096),n=__webpack_require__(5512),s=__webpack_require__(8972),a=__webpack_require__(8796),c=__webpack_require__(8292),u=__webpack_require__(3440),l=__webpack_require__(8360),h=__webpack_require__(4372),d=__webpack_require__(2984),p=__webpack_require__(2956),g=__webpack_require__(1408),f=__webpack_require__(92),v=__webpack_require__(9984),_=__webpack_require__(5837),y=__webpack_require__(6508),m=__webpack_require__(6776),E=__webpack_require__(4524),x=__webpack_require__(672),R=__webpack_require__(7580),A=__webpack_require__(6940),P=__webpack_require__(6500),V=__webpack_require__(7575),T=__webpack_require__(9324),b=__webpack_require__(2236),C=__webpack_require__(3584),O=__webpack_require__(8768),L=__webpack_require__(8460),S=__webpack_require__(3332),M=__webpack_require__(9128),w=__webpack_require__(7620),N=__webpack_require__(64),F=__webpack_require__(2472),I=__webpack_require__(2536),D=__webpack_require__(1008),j=__webpack_require__(7616),B=__webpack_require__(4268),U=__webpack_require__(6120),k=__webpack_require__(268),G=__webpack_require__(6232),z=__webpack_require__(5316),Y=__webpack_require__(8080),K=__webpack_require__(9608);e.KERNEL_TOLERANCE=t.KERNEL_TOLERANCE,e.GEOMETRY_TYPES=t.GEOMETRY_TYPES,e.TOPOLOGY_TYPES=t.TOPOLOGY_TYPES,e.Point=o.Point,e.Line=i.Line,e.Circle=n.Circle,e.Ellipse=s.Ellipse,e.BCurve=a.BCurve,e.Plane=c.Plane,e.Cylinder=u.Cylinder,e.EllipticalCylinder=l.EllipticalCylinder,e.Sphere=h.Sphere,e.Cone=d.Cone,e.EllipticalCone=p.EllipticalCone,e.Torus=g.Torus,e.BSurface=f.BSurface,e.Body=v.Body,e.Lump=_.Lump,e.Shell=y.Shell,e.Face=m.Face,e.Loop=E.Loop,e.Coedge=x.Coedge,e.Edge=R.Edge,e.Vertex=A.Vertex,e.WireBody=P.WireBody,e.Wire=V.Wire,e.Attribute=T.Attribute,e.BoundingBox=r.BoundingBox,e.checkValidity=b.checkValidity,e.facetPlanarFace=C.facetPlanarFace,e.SketchRegionSolver=O.SketchRegionSolver,e.computeCurveCurveIntersections=L.computeCurveCurveIntersections,e.createBlock=S.createBlock,e.createCone=M.createCone,e.createCylinder=M.createCylinder,e.createLineEdge=N.createLineEdge,e.createLineEdgeBetweenVertices=N.createLineEdgeBetweenVertices,e.createPolyhedron=w.createPolyhedron,e.createShellsFromFaces=N.createShellsFromFaces,e.createFaceFromPolyline=N.createFaceFromPolyline,e.createEdgeFromCurve=N.createEdgeFromCurve,e.extrudeFace=F.extrudeFace,e.TopologyCloner=I.TopologyCloner,e.TopologyStitcher=D.TopologyStitcher,e.transformTopology=j.transformTopology,e.svgFromWire=B.svgFromWire,e.DebugUtils=U.DebugUtils,e.Path2D=k.Path2D,e.SolidDefLoader=G.SolidDefLoader,e.SolidDefSaver=z.SolidDefSaver,e.saveToProtoBinary=z.saveToProtoBinary,e.saveToProtoMessage=z.saveToProtoMessage,e.getOrderedFacesOnVertex=K.getOrderedFacesOnVertex,e.mergeConnectedFaces=j.mergeConnectedFaces,e.getRegionEdges=Y.getRegionEdges,e.getBoundedRegionFaces=Y.getBoundedRegionFaces})(),__webpack_exports__})()));\n//# sourceMappingURL=solid-definition.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@adsk/solid-definition/dist/solid-definition.min.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Actions.js":
/*!**************************************!*\
  !*** ./extensions/Edit2D/Actions.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Actions: () => (/* binding */ Actions)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _BooleanOps_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BooleanOps.js */ \"./extensions/Edit2D/BooleanOps.js\");\n// Collection of basic edit actions that support undo/redo.\n//\n// Each action provides undo() and redo() functions. UndoStack takes care that actions are always called in consistent order.\n// I.e., an individual action can assume that undo/redo is only called if the state allows it. (e.g. target shape exists and has expected number of vertices etc.)\n\n\n\n\nclass Action {\n  constructor(layer) {\n    this.layer = layer;\n  }\n\n  undo() {\n    throw new Error('Abstract method invoked');\n  }\n\n  redo() {\n    throw new Error('Abstract method invoked');\n  }\n\n  // Optional: Can be be implemented to guide what should be selected before/after change.\n  // @param {bool} afterUndo - If true, return recommended selection state after undo, otherwise after redo.\n  // @returns {SelectionHint|null}\n  getSelectionHint(afterUndo) {\n    return null;\n  }\n}\n\n// Struct for possible return values of getSelectionHint\nclass SelectioHint {\n  constructor() {\n    // {Shape}\n    this.shape = null;\n\n    // {Shape[]} - only needed for multiselect operations\n    this.shapes = null;\n\n    // {PolyIndex} - selected vertex\n    this.vertex = null;\n\n    // {PolyIndex} - selected edge\n    this.edge = null;\n  }\n}\n\nclass AddShape extends Action {\n  constructor(layer, shape) {\n    super(layer);\n    this.shape = shape;\n  }\n\n  undo() {\n    this.layer.removeShape(this.shape);\n  }\n\n  redo() {\n    this.layer.addShape(this.shape);\n  }\n\n  // After redo, new shape should be selected\n  getSelectionHint(afterUndo) {\n    return afterUndo ? null : { shape: this.shape };\n  }\n}\n\nclass AddShapes extends Action {\n\n  // @param {Shape[]} shapes\n  constructor(layer, shapes) {\n    super(layer);\n    this.shapes = shapes;\n  }\n\n  undo() {\n    this.shapes.forEach((s) => this.layer.removeShape(s));\n  }\n\n  redo() {\n    this.shapes.forEach((s) => this.layer.addShape(s));\n  }\n\n  // After redo, new shape should be selected\n  getSelectionHint(afterUndo) {\n    return afterUndo ? null : { shapes: this.shapes };\n  }\n}\n\nclass MoveShapes extends Action {\n  constructor(layer, shapes, dx, dy) {\n    super(layer);\n    this.shapes = shapes;\n    this.delta = { x: dx, y: dy };\n\n    // Note that transforming back and forth is not always exactly 1:1.\n    this.beforeState = this.shapes.map((s) => s.clone());\n    this.afterState = this.shapes.map((s) => s.clone());\n\n    this.afterState.forEach((s) => s.move(dx, dy));\n  }\n\n  undo() {\n    this.shapes.forEach((s, i) => s.copy(this.beforeState[i]));\n  }\n\n  redo() {\n    this.shapes.forEach((s, i) => s.copy(this.afterState[i]));\n  }\n\n  // After undo/redo, moved shapes should be selected\n  getSelectionHint(afterUndo) {\n    return { shapes: this.shapes };\n  }\n}\n\nclass RemoveShape extends Action {\n  constructor(layer, shape) {\n    super(layer);\n    this.shape = shape;\n  }\n\n  undo() {\n    this.layer.addShape(this.shape);\n  }\n\n  redo() {\n    this.layer.removeShape(this.shape);\n  }\n\n  // After undo, recovered shape should be selected\n  getSelectionHint(afterUndo) {\n    return afterUndo ? { shape: this.shape } : null;\n  }\n}\n\nclass RemoveShapes extends Action {\n  constructor(layer, shapes) {\n    super(layer);\n    this.shapes = shapes.slice();\n  }\n\n  undo() {\n    this.shapes.forEach((s) => this.layer.addShape(s));\n  }\n\n  redo() {\n    this.shapes.forEach((s) => this.layer.removeShape(s));\n  }\n\n  // After undo, recovered shapes should be selected\n  getSelectionHint(afterUndo) {\n    return afterUndo ? { shapes: this.shapes } : null;\n  }\n}\n\nclass AddVertex extends Action {\n  constructor(layer, poly, polyIndex, p) {\n    super(layer);\n    this.poly = poly;\n    this.polyIndex = polyIndex;\n    this.point = p.clone();\n  }\n\n  undo() {\n    this.poly.removePoint(this.polyIndex.vertex, this.polyIndex.loop);\n  }\n\n  redo() {\n    this.poly.insertPoint(this.polyIndex.vertex, this.point, this.polyIndex.loop);\n  }\n\n  // After redo, select the new vertex\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.poly,\n      vertex: afterUndo ? null : this.polyIndex\n    };\n  }\n}\n\n// Only for polygons and polylines\nclass MoveVertex extends Action {\n  constructor(layer, poly, polyIndex, newPos) {\n    super(layer);\n    this.poly = poly;\n    this.polyIndex = polyIndex;\n    this.posBefore = poly.getPoint(polyIndex.vertex, polyIndex.loop);\n    this.posAfter = newPos.clone();\n  }\n\n  undo() {\n    this.poly.updatePoint(this.polyIndex.vertex, this.posBefore.x, this.posBefore.y, this.polyIndex.loop);\n  }\n  redo() {\n    this.poly.updatePoint(this.polyIndex.vertex, this.posAfter.x, this.posAfter.y, this.polyIndex.loop);\n  }\n\n  // After undo/redo, select moved vertex\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.poly,\n      vertex: this.polyIndex\n    };\n  }\n}\n\n// Returns an object that allows for recovering all arc params assoicated with a vertex\nconst copyArcParams = (poly, index, loop) => {\n  if (!poly.isPath() || !poly.edgeIndexValid(index, loop)) {\n    return null;\n  }\n\n  const type = poly.getEdgeType(index, loop);\n  switch (type) {\n    // Note that the getter already returns a copy\n    case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse:return poly.getEllipseArcParams(index, loop);\n    case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier:return {\n        cp1: poly.getControlPoint(index, 1, loop),\n        cp2: poly.getControlPoint(index, 2, loop)\n      };\n    case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line:return null;\n    default:console.warn('unexpected edge type');\n  }\n};\n\n// Recover an arc based on the result returned by copyArcParam\nconst restoreArc = (poly, index, loop, arcParams) => {\n  if (!arcParams) {\n    // nothing to restore\n    return;\n  }\n\n  if (arcParams instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams) {\n    // recover ellipse arc\n    poly.setEllipseArc(index, arcParams);\n  } else if (arcParams.cp1) {\n    // recover bezier arc\n    const cp1 = arcParams.cp1;\n    const cp2 = arcParams.cp2;\n    poly.setBezierArc(index, cp1.x, cp1.y, cp2.x, cp2.y);\n  }\n};\n\nclass RemoveVertex extends Action {\n  constructor(layer, poly, polyIndex) {\n    super(layer);\n    this.poly = poly;\n    this.vertex = polyIndex.vertex;\n    this.loop = polyIndex.loop;\n    this.point = poly.getPoint(this.vertex, this.loop);\n\n    // For consistency and simplicity, we remove arcs if start or end vertex is removed.\n    this.arcBefore = copyArcParams(poly, poly.edgeBeforeVertex(this.vertex, this.loop), this.loop);\n    this.arcAfter = copyArcParams(poly, poly.edgeAfterVertex(this.vertex, this.loop), this.loop);\n  }\n\n  undo() {\n    this.poly.insertPoint(this.vertex, this.point, this.loop);\n\n    // recover arc params\n    if (this.poly.prevEdgeExists(this.vertex, this.loop)) {\n      restoreArc(this.poly, this.poly.edgeBeforeVertex(this.vertex, this.loop), this.loop, this.arcBefore);\n    }\n    if (this.poly.nextEdgeExists(this.vertex, this.loop)) {\n      restoreArc(this.poly, this.poly.edgeAfterVertex(this.vertex, this.loop), this.loop, this.arcAfter);\n    }\n  }\n\n  redo() {\n    // remove arcs at edges starting/ending at the vertex\n    if (this.poly.isPath()) {\n      if (this.poly.prevEdgeExists(this.vertex, this.loop)) {\n        this.poly.removeArc(this.poly.edgeBeforeVertex(this.vertex, this.loop), this.loop);\n      }\n      if (this.poly.nextEdgeExists(this.vertex, this.loop)) {\n        this.poly.removeArc(this.poly.edgeAfterVertex(this.vertex, this.loop), this.loop);\n      }\n    }\n\n    this.poly.removePoint(this.vertex, this.loop);\n  }\n\n  // After undo, select recovered vertex\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.poly,\n      vertex: afterUndo ? this.polyIndex : null\n    };\n  }\n}\n\n\n// Moves an edge to a new position specified by new positions for start and end vertex.\n// Optionally, start and end vertex may be duplicated before moving the edge. In this case, the neighbar edges keep unchanged and\n// we introduce new intermediate edges to connect the old start/end position with the new one.\nclass MoveEdge extends Action {\n\n  // @param {EditLayer} layer\n  // @param {Polybase}  poly      - must be at start before the change\n  // @param {PolyIndex} polyIndex - edge to be modified\n  // @param {Vector3}   newPosA, newPosB\n  // @param {bool}      duplicateStartVertex, duplicateEndVertex - Optional, start and end vertex of the edge may be duplicated.\n  constructor(layer, poly, polyIndex, newPosA, newPosB, duplicateStartVertex, duplicateEndVertex) {\n    super(layer);\n    this.poly = poly;\n\n    // store edge index\n    this.edgeIndex = polyIndex.vertex;\n    this.loopIndex = polyIndex.loop;\n\n    // store duplicate flags\n    this.duplicateStartVertex = duplicateStartVertex;\n    this.duplicateEndVertex = duplicateEndVertex;\n\n    const ia = this.edgeIndex;\n    const ib = poly.nextIndex(ia, this.loopIndex);\n\n    // get edge\n    const a = poly.getPoint(ia, this.loopIndex);\n    const b = poly.getPoint(ib, this.loopIndex);\n\n    this.edgeBefore = {\n      a: a,\n      b: b\n    };\n    this.edgeAfter = {\n      a: newPosA.clone(),\n      b: newPosB.clone()\n    };\n  }\n\n  undo() {\n    // get current edgeIndex (after duplicating vertices)\n    const newEdgeIndex = MoveEdge.getNewEdgeIndex(this.poly, this.edgeIndex, this.loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n\n    // get indices of the two edge vertices\n    const ia = newEdgeIndex;\n    const ib = this.poly.nextIndex(ia, this.loopIndex);\n\n    // Restore original edge positions\n    this.poly.updatePoint(ia, this.edgeBefore.a.x, this.edgeBefore.a.y, this.loopIndex);\n    this.poly.updatePoint(ib, this.edgeBefore.b.x, this.edgeBefore.b.y, this.loopIndex);\n\n    // Remove extra vertices\n    MoveEdge.revertDuplicateVertices(this.poly, this.edgeIndex, this.loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n  }\n\n  redo() {\n    // Duplicate start/end vertex if wanted\n    MoveEdge.duplicateVertices(this.poly, this.edgeIndex, this.loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n\n    // get edgeIndex after duplicating vertices\n    const newEdgeIndex = MoveEdge.getNewEdgeIndex(this.poly, this.edgeIndex, this.loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n\n    // get indices of the two edge vertices\n    const ia = newEdgeIndex;\n    const ib = this.poly.nextIndex(ia, this.loopIndex);\n\n    // apply new positions\n    this.poly.updatePoint(ia, this.edgeAfter.a.x, this.edgeAfter.a.y, this.loopIndex);\n    this.poly.updatePoint(ib, this.edgeAfter.b.x, this.edgeAfter.b.y, this.loopIndex);\n  }\n\n  // Insert a duplicate of vertex i to position i+1. Note that vertex i only copies\n  // the position. If vertex i contained arc params, these will be at vertex i+1.\n  static duplicateVertex(poly, index) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const p = poly.getPoint(index, loopIndex);\n    poly.insertPoint(index, { x: p.x, y: p.y }, loopIndex);\n  }\n\n  // Duplicates start and/or end vertex of a given edge in a polyline/polygon.\n  static duplicateVertices(poly, edgeIndex, loopIndex, duplicateStartVertex, duplicateEndVertex) {\n\n    let startVertex = edgeIndex;\n\n    if (duplicateStartVertex) {\n      MoveEdge.duplicateVertex(poly, startVertex, loopIndex);\n\n      // After duplicating, the actual edge start vertex has shifted by 1.\n      startVertex++;\n    }\n\n    if (duplicateEndVertex) {\n      const vNext = poly.nextIndex(startVertex, loopIndex);\n      MoveEdge.duplicateVertex(poly, vNext, loopIndex);\n    }\n  }\n\n  // Reverts the extra vertices inserted by duplicateVertices. Note that edgeIndex refers\n  // to the polygon before duplicating the vertices, i.e., should be identical with\n  // the one used in the duplicateVertices(..) to be reverted.\n  static revertDuplicateVertices(poly, edgeIndex, loopIndex, duplicateStartVertex, duplicateEndVertex) {\n\n    // get edge index after considering vertex duplication\n    let curEdgeIndex = MoveEdge.getNewEdgeIndex(poly, edgeIndex, loopIndex, duplicateStartVertex, duplicateEndVertex);\n\n    // If the end vertex was duplicated, revert that now\n    if (duplicateStartVertex) {\n\n      // Note that it is important to remove the vertex BEFORE edge start instead of the edge start itself.\n      // Although both have identical positions, the edge start vertex may contain additional arc params.\n      let iPrev = curEdgeIndex - 1;\n      poly.removePoint(iPrev, loopIndex);\n\n      // This shifts the edgeIndex back by 1\n      curEdgeIndex--;\n    }\n\n    if (duplicateEndVertex) {\n      // Always remove the first of the two duplicate vertices. The first one is the copy that just contains\n      // the position, while the second (=original) one may contain additional arc params.\n      let iNext = poly.nextIndex(curEdgeIndex, loopIndex);\n      poly.removePoint(iNext, loopIndex);\n    }\n  }\n\n  // If we duplicate start/end vertex of an edge, the index of that edge may change.\n  // This function returns the new index of the edge after duplicating start/end vertex.\n  //\n  // Note: poly is assumed to contain the duplicated vertices.\n  static getNewEdgeIndex(poly, edgeIndex, loopIndex, duplicateStartVertex, duplicateEndVertex) {\n\n    let newIndex = edgeIndex;\n\n    // Duplicating the start vertex always shift the edgeIndex by 1\n    if (duplicateStartVertex) {\n      newIndex++;\n    }\n\n    // get vertexCount of the polygon before insertion of duplicated vertices.\n    const vertexCountBefore = poly.getVertexCount(loopIndex) - (duplicateStartVertex ? 1 : 0) - (duplicateEndVertex ? 1 : 0);\n\n    // Check if edge was the 'closing edge' of the original polygon, i.e., the edge that\n    // connects the last vertex with vertex 0\n    const isClosingEdge = edgeIndex === vertexCountBefore - 1;\n\n    // Duplicating the end vertex may also shift the edgeIndex. This happens if the edge start\n    // vertex is the last one in a polygon.\n    if (duplicateEndVertex && isClosingEdge) {\n      newIndex++;\n    }\n    return newIndex;\n  }\n\n  // After undo/redo, select the moved edge. Note that its index may change due to vertex duplication.\n  getSelectionHint(afterUndo) {\n    const edgeIndex = afterUndo ? this.edgeIndex : MoveEdge.getNewEdgeIndex(this.poly, this.edgeIndex, this.loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n    return {\n      shape: this.poly,\n      edge: new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: edgeIndex, loop: this.loopIndex })\n    };\n  }\n}\n\n// Change arc type of a Path edge. It can also be used to change arc params without changing the actual type.\nclass ChangeEdgeType extends Action {\n\n  // @param {EditLayer} layer\n  // @param {Path}      path  - must be in \"before\" state of the action\n  // @param {PolyIndex} polyIndex\n  // @param {EdgeType}  edgeType\n  // @param {Vector2}   [cp1] - Control points. Only needed when changing to Bezier\n  // @param {Vector2}   [cp2]\n  // @param {EllipseArcParams} [arcParams] - only needed when changing to EllipseArc\n  constructor(layer, path, polyIndex, edgeType, cp1, cp2, arcParams) {\n    super(layer);\n\n    this.path = path;\n    this.edgeIndex = polyIndex.vertex;\n    this.loopIndex = polyIndex.loop;\n\n    // Store previous edge props\n    const isBezier = path.isBezierArc(this.edgeIndex, this.loopIndex);\n    this.oldEdgeType = path.getEdgeType(this.edgeIndex, this.loopIndex);\n    this.oldCp1 = isBezier && path.getControlPoint(this.edgeIndex, 1, this.loopIndex);\n    this.oldCp2 = isBezier && path.getControlPoint(this.edgeIndex, 2, this.loopIndex);\n    this.oldEllipseArcParams = path.getEllipseArcParams(this.edgeIndex, this.loopIndex);\n\n    // Store new control points (if any)\n    this.newEdgeType = edgeType;\n    this.newCp1 = cp1;\n    this.newCp2 = cp2;\n    this.newEllipseArcParams = arcParams;\n  }\n\n  redo() {\n    switch (this.newEdgeType) {\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line:this.path.removeArc(this.edgeIndex, this.loopIndex);break;\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse:this.path.setEllipseArc(this.edgeIndex, this.newEllipseArcParams, this.loopIndex);break;\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier:this.path.setBezierArc(this.edgeIndex, this.newCp1.x, this.newCp1.y, this.newCp2.x, this.newCp2.y, this.loopIndex);break;\n    }\n  }\n\n  undo() {\n    switch (this.oldEdgeType) {\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line:this.path.removeArc(this.edgeIndex, this.loopIndex);break;\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier:this.path.setBezierArc(this.edgeIndex, this.oldCp1.x, this.oldCp1.y, this.oldCp2.x, this.oldCp2.y, this.loopIndex);break;\n      case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse:this.path.setEllipseArc(this.edgeIndex, this.oldEllipseArcParams, this.loopIndex);break;\n    }\n  }\n\n  // After undo/redo, select changed edge\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.path,\n      edge: new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: this.edgeIndex, loop: this.loopIndex })\n    };\n  }\n}\n\nclass ApplyCutOut extends Action {\n\n  constructor(layer, cutPath) {\n    super(layer);\n\n    // collect all other polygons and closed paths in the layer that overlap the cutPath bbox\n    const cutBox = cutPath.getBBox();\n    this.paths = layer.shapes.filter((s) => {\n\n      if (s === cutPath) {\n        return false;\n      }\n\n      // cutout is only be applied on Polygons and closed Paths\n      const isClosed = s instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase && s.isClosed;\n      if (!isClosed) {\n        return false;\n      }\n\n      const box = s.getBBox();\n      return cutBox.intersectsBox(box);\n    });\n\n    // subtract cutPath from all overlapping shapes\n    this.clippedPaths = this.paths.map((p) => {\n      return _BooleanOps_js__WEBPACK_IMPORTED_MODULE_1__.BooleanOps.apply(p, cutPath, _BooleanOps_js__WEBPACK_IMPORTED_MODULE_1__.BooleanOps.Operator.Difference);\n    });\n\n    // create backups of original paths before cutout\n    this.originalShapes = this.paths.map((p) => p.clone());\n\n    this.cutPath = cutPath;\n  }\n\n  redo() {\n    // replace geometry of all shapes by clipped versions\n    this.paths.forEach((p, i) => p.copyGeometry(this.clippedPaths[i]));\n    this.layer.update();\n  }\n\n  undo() {\n    // replace all shapes by original versions\n    this.paths.forEach((p, i) => p.copyGeometry(this.originalShapes[i]));\n  }\n\n  // After undo/redo, select shape that was used for cutout\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.cutPath\n    };\n  }\n}\n\nclass RemoveLoops extends Action {\n\n  constructor(layer, poly, loops) {\n    super(layer);\n\n    this.poly = poly;\n    this.loops = loops;\n\n    // create a backup of the shape before change\n    this.before = this.poly.clone();\n  }\n\n  redo() {\n    this.poly.removeLoops(this.loops);\n  }\n\n  undo() {\n    this.poly.copy(this.before);\n  }\n\n  // After undo/redo, select modified shape\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.poly\n    };\n  }\n}\n\nclass MoveLoop extends Action {\n\n  constructor(layer, poly, loopIndex, dx, dy) {\n    super(layer);\n\n    this.poly = poly;\n    this.loopIndex = loopIndex;\n    this.before = this.poly.clone();\n\n    this.dx = dx;\n    this.dy = dy;\n  }\n\n  redo() {\n    this.poly.moveLoop(this.dx, this.dy, this.loopIndex);\n  }\n\n  undo() {\n    this.poly.copy(this.before);\n  }\n\n  // After undo/redo, select modified shape\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.poly\n    };\n  }\n}\n\n// Merges all shapes into the first one\nclass UnifyShapes extends Action {\n\n  // @param {EditLayer}  layer\n  // @param {PolyBase[]} shapes     - shapes to merge\n  // @param {number}     shapeIndex - index within shapes array. All other shapes will be merged into this one.\n  constructor(layer, shapes, shapeIndex) {\n    super(layer);\n\n    this.merged = _BooleanOps_js__WEBPACK_IMPORTED_MODULE_1__.BooleanOps.apply(shapes[0], shapes[1], _BooleanOps_js__WEBPACK_IMPORTED_MODULE_1__.BooleanOps.Operator.Union, shapes.slice(2));\n    this.before = shapes[shapeIndex].clone();\n\n    this.mainShape = shapes[shapeIndex];\n    this.otherShapes = shapes.filter((s) => s !== this.mainShape);\n  }\n\n  redo() {\n\n    // Merge other shapes into main shape\n    this.mainShape.copyGeometry(this.merged);\n\n    // Remove all other shapes\n    this.layer.removeShapes(this.otherShapes);\n  }\n\n  undo() {\n    // Recover original main shape\n    this.mainShape.copyGeometry(this.before);\n\n    // Add other shapes back to layer\n    this.layer.addShapes(this.otherShapes);\n  }\n\n  // After undo/redo, select mainShape\n  getSelectionHint(afterUndo) {\n    return {\n      shape: this.mainShape\n    };\n  }\n}\n\n// Changes Bezier arc tangent at a vertex v. This may affect up to two edge adjacent to v.\nclass ChangeBezierTangent {\n\n  // @param {EditLayer} layer\n  // @param {Path}      path\n  // @param {number}    vertex     - index of the vertex to be changed\n  // @param {number}    loopIndex\n  // @param {Vector2}   pStart     - tangent start. This is cp2 of the previous bezier segment (if any)\n  // @param {Vector2}   pEnd       - tangent end\n  constructor(layer, path, index, loopIndex, pStart, pEnd) {\n    this.layer = layer;\n    this.path = path;\n    this.index = index;\n    this.loopIndex = loopIndex;\n    this.pStart = pStart;\n    this.pEnd = pEnd;\n\n    // Backup of original shape\n    this.before = path.clone();\n  }\n\n  // Set the two control points that define the bezier tangent. Usually, pEnd is just pStart mirrored at the vertex\n  setTangent(pStart, pEnd) {\n    this.pStart = pStart;\n    this.pEnd = pEnd;\n  }\n\n  // Apply modified tangent endpoints after dragging on of the tangent vertices.\n  //\n  // @param {Vector2} pStart, pEnd - Tangent start/end point in layer coords.\n  redo() {\n\n    // Set start point: This is cp2 of previous arc segment (if any)\n    const prevEdgeIndex = this.path.edgeBeforeVertex(this.index, this.loopIndex);\n    const prevExists = prevEdgeIndex !== -1;\n    if (prevExists && this.path.isBezierArc(prevEdgeIndex, this.loopIndex)) {\n      this.path.updateControlPoint(prevEdgeIndex, 2, this.pStart.x, this.pStart.y, this.loopIndex);\n    }\n\n    // Set end point: This is cp1 of current segment\n    const nextEdgeIndex = this.path.edgeAfterVertex(this.index, this.loopIndex);\n    const nextExists = nextEdgeIndex !== -1;\n    if (nextExists && this.path.isBezierArc(nextEdgeIndex, this.loopIndex)) {\n      this.path.updateControlPoint(this.index, 1, this.pEnd.x, this.pEnd.y, this.loopIndex);\n    }\n  }\n\n  undo() {\n    this.path.copyGeometry(this.before);\n  }\n\n  // ChangeBezierTangent may happen if a vertex or an edge is selected. So, the hint must be set from\n  // outside when the information is available.\n  //   @param {PolyIndex} vertex\n  //   @param {PolyIndex} edge\n  setSelectionItem(vertex, edge) {\n    this.selectionHint = {\n      shape: this.path,\n      vertex: vertex,\n      edge: edge\n    };\n  }\n\n  // After undo/redo, select the edge that was modified\n  getSelectionHint(afterUndo) {\n    return this.selectionHint;\n  }\n}\n\nconst Actions = {\n  Action,\n  AddShape,\n  AddShapes,\n  MoveShapes,\n  RemoveShape,\n  RemoveShapes,\n  AddVertex,\n  MoveVertex,\n  RemoveVertex,\n  MoveEdge,\n  ChangeEdgeType,\n  ApplyCutOut,\n  RemoveLoops,\n  UnifyShapes,\n  MoveLoop,\n  ChangeBezierTangent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Actions.js\n");

/***/ }),

/***/ "./extensions/Edit2D/AngleGizmo.js":
/*!*****************************************!*\
  !*** ./extensions/Edit2D/AngleGizmo.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AngleGizmo)\n/* harmony export */ });\n/* harmony import */ var _Arrow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Arrow.js */ \"./extensions/Edit2D/Arrow.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n\n\n\n\n\n\nconst Colors = {\n  Black: 'rgb(0,0,0)'\n};\n\n// An angle gizmo indicates a rotation angle using two arrows (start/end direction) and a connecting arc.\n// The arc is drawn along the shortest connection, either cw or ccw.\nclass AngleGizmo {\n\n  constructor(layer) {let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.layer = layer;\n    this.options = options;\n\n    // --- Configuration params ---\n\n    // Corner points encloding the angle\n    this.center = new THREE.Vector2(); // center of the arc\n    this.pStart = new THREE.Vector2(); // center->pStart indicates direction before rotation\n    this.pEnd = new THREE.Vector2(); // center->pEnd indicates direction after rotation\n\n    // sizes in pixels\n    this.arrowLength = 150;\n    this.arrowHeadLength = 18;\n    this.arcRadius = 100;\n\n    // Indicate which points are properly set. If only center and one point are valid, we show just an arrow.\n    this.centerValid = false;\n    this.pStartValid = false;\n    this.pEndValid = false;\n\n    // Optional: Show dotted line that connects the arrow with the points that define the direction.\n    this.showExtendLines = true;\n\n    // Specifies how far we shift the labelPosition away from the center. An offset of 0 would mean to center the label\n    // on the center point of the angle arc line.\n    this.labelPosOffset = 30;\n\n    // Angle text label\n    this.enableLabel = true;\n\n    // --- Maintained by the gizmo ---\n\n    // Arrow shapes. Auto-updated based on settings\n    this.arrowStart = new _Arrow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.arrowEnd = new _Arrow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    // Sharpness of arrow peaks\n    this.arrowStart.headAngle = 45;\n    this.arrowEnd.headAngle = 45;\n\n\n    // Arc line connecting the two arrows\n    this.arcLine = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Path().allocPoints(2);\n    this.arcArrow = new _Arrow_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    this.arcFill = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Path().allocPoints(3);\n    this.arcFill.isClosed = true;\n\n    // Used and auto-updated in upadte()\n    this.arcParams = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.EllipseArcParams();\n\n    // Update shapes on camera updates\n    this.onCameraChange = this.onCameraChange.bind(this);\n    this.layer.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n\n    // arc style\n    this.arcFillOpacity = 0.2;\n    this.arcFill.style.lineAlpha = 0;\n    this.arcFill.style.fillAlpha = this.arcFillOpacity;\n    this.arcLine.style.lineWidth = 2.0;\n    this.arcLine.style.lineColor = this.options.arcColor || Colors.Black;\n\n    this.arcArrow.line.style.lineColor = this.options.arcColor || Colors.Black;\n    this.arcArrow.line.style.lineWidth = 2.0;\n    this.arcArrow.head.style.lineAlpha = 0;\n    this.arcArrow.head.style.fillColor = this.options.arcColor || Colors.Black;\n    this.arcArrow.head.style.fillAlpha = 1;\n    this.arcArrowMaxHeadLength = 0.3; // If the arc arrow is very short (small angles), we restrict the headSize to a percentage of the arrow length\n\n    // start arrow line style\n    this.arrowStart.line.style.lineColor = this.options.startColor || Colors.Black;\n    this.arrowStart.line.style.lineWidth = 1.5;\n\n    // end arrow line style\n    this.arrowEnd.line.style.lineColor = this.options.endColor || Colors.Black;\n    this.arrowEnd.line.style.lineWidth = 1.5;\n\n    // start arrow head style\n    this.arrowStart.head.style.lineAlpha = 0;\n    this.arrowStart.head.style.fillColor = this.options.startColor || Colors.Black;\n    this.arrowStart.head.style.fillAlpha = 1;\n\n    // end arrow head style\n    this.arrowEnd.head.style.lineAlpha = 0;\n    this.arrowEnd.head.style.fillColor = this.options.endColor || Colors.Black;\n    this.arrowEnd.head.style.fillAlpha = 1;\n\n    this.label = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.TextLabel(this.layer, '', this.options.labelClassName);\n\n    // reused values for label position computation\n    this.labelPos = new THREE.Vector2(); // in layer-coords\n    this.arcCurve = new Autodesk.Extensions.CompGeom.EllipseArc();\n    this.visible = false;\n\n    // For fadeIn/Out effects\n    const setOpacity = (opacity) => {\n      this.arrowStart.line.style.lineAlpha = opacity;\n      this.arrowStart.head.style.fillAlpha = this.options.hideArrowHead ? 0 : opacity;\n      this.arrowEnd.line.style.lineAlpha = opacity;\n      this.arrowEnd.head.style.fillAlpha = this.options.hideArrowHead ? 0 : opacity;\n      this.arcLine.style.lineAlpha = opacity;\n      this.arcArrow.line.style.lineAlpha = opacity;\n      this.arcArrow.head.style.fillAlpha = opacity;\n      this.arcFill.style.fillAlpha = opacity * this.arcFillOpacity;\n      this.opacity = opacity;\n      this.layer.update();\n    };\n\n    this.opacityParam = new Autodesk.Viewing.Private.AnimatedParam(1.0, setOpacity, 0.5);\n\n    // reflects current fadeIn/fadeOut state\n    this.opacity = 1.0;\n  }\n\n  setCenter(center) {\n    if (center) {\n      this.center.copy(center);\n      this.centerValid = true;\n    } else {\n      this.centerValid = false;\n    }\n  }\n\n  setStart(pStart) {\n    if (pStart) {\n      this.pStart.copy(pStart);\n      this.pStartValid = isFinite(pStart.x) && isFinite(pStart.y);\n\n      // Warn on NaN/Inf values\n      if (!this.pStartValid) {\n        console.warn(`AngleGizmo: Invalid start point`);\n      }\n\n    } else {\n      this.pStartValid = false;\n    }\n  }\n\n  setEnd(pEnd) {\n    if (pEnd) {\n      this.pEnd.copy(pEnd);\n      this.pEndValid = isFinite(pEnd.x) && isFinite(pEnd.y);\n\n      // Warn on NaN/Inf values\n      if (!this.pEndValid) {\n        console.warn(`AngleGizmo: Invalid end point`);\n      }\n    } else {\n      this.pEndValid = false;\n    }\n  }\n\n  dtor() {\n    this.opacityParam.stopAnim(); // Stop so the opacity timer doesn't keep running without a layer\n    this.layer.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n    this.layer.dtor();\n    this.layer = null;\n  }\n\n  setVisible(visible) {\n    if (this.visible == visible) {\n      return;\n    }\n\n    this.visible = visible;\n    if (visible) {\n      this.layer.addShape(this.arrowStart);\n      this.layer.addShape(this.arrowEnd);\n      this.layer.addShape(this.arcLine);\n      this.layer.addShape(this.arcArrow);\n      this.layer.addShape(this.arcFill);\n    } else {\n      this.layer.removeShape(this.arrowStart);\n      this.layer.removeShape(this.arrowEnd);\n      this.layer.removeShape(this.arcLine);\n      this.layer.removeShape(this.arcArrow);\n      this.layer.removeShape(this.arcFill);\n    }\n  }\n\n  setOpacity(opacity) {\n    this.opacityParam.setValue(opacity);\n  }\n\n  skipFade() {\n    this.opacityParam.skipAnim();\n  }\n\n  // Fade in/out. This also sets the visibility, i.e. shapes are hidden when opacity reaches zero.\n  fadeTo(value) {\n    this.opacityParam.fadeTo(value);\n  }\n\n  // Update arc label position based on center point of the arc. Note that this.arcLine must be up to\n  updateLabel(pixelsPerUnit, arcRadius) {\n\n    const arc = this.arcLine.exportEllipseArc(0, 0, this.arcCurve);\n    let labelPos;\n\n    if (this.options.centerLabel) {\n      labelPos = this.center;\n    } else {\n      // get point at center of the angle arc\n      labelPos = arc.getPoint(0.5, this.labelPos);\n\n      // Shift label position more \"outside\", i.e. away from the center\n      const labelPosOffset = this.labelPosOffset / pixelsPerUnit;\n      labelPos.sub(this.center);\n      labelPos.normalize();\n      labelPos.multiplyScalar(arcRadius + labelPosOffset);\n      labelPos.add(this.center);\n    }\n\n    this.label.setPosition(labelPos.x, labelPos.y);\n\n    // update label text\n    const angle = THREE.Math.radToDeg(arc.getAngleDelta());\n\n    if (!isNaN(angle)) {\n      const text = angle.toFixed(1) + \"°\";\n      this.label.setText(text);\n    }\n  }\n\n  update() {\n\n    // Note: When using the gizmo on a plane in 3D, pixelsPerUnit may vary per point.\n    // Todo: Add general support for this case to Edit2D layers.\n    let pixelsPerUnit = 1;\n\n    // In case ignoreCameraDistance is set, the size of the arc won't change depending on the camera distance.\n    // In fact, the gizmo will behave more like an overlay.\n    if (!this.options.ignoreCameraDistance) {\n      const pWorld = new THREE.Vector3(this.center.x, this.center.y, 0).applyMatrix4(this.layer.layerToWorld);\n      pixelsPerUnit = this.layer.viewer.impl.camera.pixelsPerUnitAtPoint(pWorld);\n    }\n\n    // convert all sizes to layer-space\n    const arrowHeadLength = this.arrowHeadLength / pixelsPerUnit;\n    let arcRadius = this.arcRadius / pixelsPerUnit;\n\n    // Check if all directions are valid\n    const showGizmo = this.centerValid && this.pStartValid && this.pEndValid;\n\n    // Update gizmo visibility\n    this.arrowStart.setVisible(showGizmo);\n    this.arrowEnd.setVisible(showGizmo);\n    this.arcLine.setVisible(showGizmo);\n    this.arcArrow.setVisible(showGizmo);\n    this.arcFill.setVisible(showGizmo);\n\n    // Update label visibility\n    const showLabel = showGizmo && this.enableLabel;\n    this.label.setOpacity(showLabel ? 1.0 : 0.0, true); // label fades smoothly\n\n    // If everything is hidden now anyway, we are done here\n    if (!showGizmo) {\n      // Note that we still have to update in case some shapes just changed from visible to hidden.\n      this.layer.update();\n      return;\n    }\n\n    // arrows start at the angle center\n    this.arrowStart.setFrom(this.center);\n    this.arrowEnd.setFrom(this.center);\n\n    // arrows point toward pStart/pEnd\n    this.arrowStart.setTo(this.pStart);\n    this.arrowEnd.setTo(this.pEnd);\n\n    // scale arrow-head sizes for constant screen-size\n    if (!this.options.hideArrowHead) {\n      this.arrowStart.setHeadLength(arrowHeadLength);\n      this.arrowEnd.setHeadLength(arrowHeadLength);\n    }\n\n    // Compute angle\n    const startDir = this.pStart.clone().sub(this.center).normalize();\n    const endDir = this.pEnd.clone().sub(this.center).normalize();\n    const angle = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.angleBetweenDirections(startDir, endDir);\n\n    // Prevent arc from being longer than the arrows\n    arcRadius = Math.min(arcRadius, this.pStart.distanceTo(this.center), this.pEnd.distanceTo(this.center));\n\n    // Configure ellpse arc\n    this.arcParams.rx = arcRadius;\n    this.arcParams.ry = arcRadius;\n    this.arcParams.sweepFlag = angle > Math.PI;\n    this.arcParams.largeArcFlag = false; // always display the shorter connection\n\n    // Compute arc start/end\n    const arcStart = startDir.clone().multiplyScalar(arcRadius).add(this.center);\n    const arcEnd = endDir.clone().multiplyScalar(arcRadius).add(this.center);\n\n    // Configure arc line\n    this.arcLine.updatePoint(0, arcStart.x, arcStart.y);\n    this.arcLine.updatePoint(1, arcEnd.x, arcEnd.y);\n    this.arcLine.setEllipseArc(0, this.arcParams);\n\n    // Configure arc arrow\n    const poly = this.arcLine.toPoly();\n    const from = poly.getPoint(poly.getVertexCount() - 2);\n    this.arcArrow.setFrom(from);\n    this.arcArrow.setTo(this.pEnd);\n\n    // Prevent the arrow from being larger than the arc itself\n    const arcArrowLenght = Math.min(arrowHeadLength, this.arcArrowMaxHeadLength * this.pEnd.distanceTo(this.pStart));\n    this.arcArrow.setHeadLength(arcArrowLenght);\n\n    // Configure arc fill\n    this.arcFill.updatePoint(0, this.center.x, this.center.y);\n    this.arcFill.updatePoint(1, arcStart.x, arcStart.y);\n    this.arcFill.updatePoint(2, arcEnd.x, arcEnd.y);\n    this.arcFill.setEllipseArc(1, this.arcParams);\n\n    this.updateLabel(pixelsPerUnit, arcRadius);\n\n    this.layer.update();\n  }\n\n  onCameraChange() {\n    this.update();\n  }\n\n  // If true, the angle label is frozen at its current state\n  setLabelEnabled(enabled) {\n    this.enableLabel = enabled;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/AngleGizmo.js\n");

/***/ }),

/***/ "./extensions/Edit2D/AngleGizmo3d.js":
/*!*******************************************!*\
  !*** ./extensions/Edit2D/AngleGizmo3d.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AngleGizmo3d)\n/* harmony export */ });\n/* harmony import */ var _AngleGizmo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AngleGizmo.js */ \"./extensions/Edit2D/AngleGizmo.js\");\n/* harmony import */ var _EditLayer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditLayer.js */ \"./extensions/Edit2D/EditLayer.js\");\n\n\n\n\nlet nextId = 1;\n\n// Extends the AngleGizmo class by the ability to be used within a 3D scene.\n//\n// For this, AngleGizmo3d maintains an own layer that is placed within the current 3d view.\n// The layer is placed in a plane that is chosen based on selected location center and rotation axis.\nclass AngleGizmo3d extends _AngleGizmo_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n  // @param {Viewer3d} viewer\n  // @param {string}   [overlayName] - Must be the name of an existing viewer overlay. If not set, the gizmo creates its own\n  constructor(viewer, options) {let overlayName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(new _EditLayer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](viewer), options); // init own layer\n\n    this.viewer = viewer;\n\n    // Rotation center in world-coords. Serves as anchor point to place the EditLayer within 3d.\n    this.center3d = new THREE.Vector3();\n    this.pStart3d = new THREE.Vector3();\n    this.pEnd3d = new THREE.Vector3();\n\n    this.id = nextId++;\n\n    this.overlayName = overlayName;\n    this.overlayOwned = false;\n\n    // Create an own overlay if none is provided\n    if (!overlayName) {\n      // Create own overlay.\n      this.overlayName = 'Autodesk.Edit2d.AngleGizmo3d.' + this.id;\n      this.viewer.impl.createOverlayScene(this.overlayName);\n\n      // Remember that we have to clear it later\n      this.overlayOwned = true;\n    }\n\n    // Display layer in the given overlay\n    this.viewer.impl.addOverlay(this.overlayName, this.layer.scene);\n\n    // Reused for computing the layer placement\n    this.layerMatrix = new THREE.Matrix4();\n  }\n\n  dtor() {\n    // Remove layer from overlay\n    this.viewer.impl.removeOverlay(this.overlayName, this.layer.scene);\n\n    // Remove overlay if own it\n    if (this.overlayOwned) {\n      this.viewer.impl.removeOverlayScene(this.overlayName);\n    }\n  }\n\n  // Return layer coords from given 3d world position\n  toLayer(p3d) {\n    return p3d && p3d.clone().applyMatrix4(this.layer.worldToLayer);\n  }\n\n  // Set EditLayer transform so that the layer is on the same\n  // plane as center.\n  updateLayerTransform() {\n    // Todo: Generalize to different axes\n    this.layerMatrix.makeTranslation(0, 0, this.center3d.z);\n    this.layer.setMatrix(this.layerMatrix);\n  }\n\n  setCenter3d(center3d) {\n\n    // If not set, just clear 2d center as well. This will hide the gizmo until a proper center is set.\n    if (!center3d) {\n      this.setCenter(null);\n      return;\n    }\n\n    // move layer to the plane containing center3d\n    this.center3d.copy(center3d);\n    this.updateLayerTransform();\n\n    // Make sure that any previously valid 2d start/end positions keep correct.\n    // Note that a new center was just chosen anyway,\n    this.pStartValid && this.setStart(this.toLayer(this.pStart3d));\n    this.pEndValid && this.setEnd(this.toLayer(this.pEnd3d));\n\n    // set center in layer-coords\n    this.setCenter(this.toLayer(this.center3d));\n  }\n\n  setStart3d(start3d) {\n    if (start3d) {\n      this.pStart3d.copy(start3d);\n    }\n    this.setStart(this.toLayer(start3d));\n  }\n\n  setEnd3d(end3d) {\n    if (end3d) {\n      this.pEnd3d.copy(end3d);\n    }\n    this.setEnd(this.toLayer(end3d));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/AngleGizmo3d.js\n");

/***/ }),

/***/ "./extensions/Edit2D/AngleSnapper.js":
/*!*******************************************!*\
  !*** ./extensions/Edit2D/AngleSnapper.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AngleSnapper)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n\n\n\n\n// AngleSnapper is responsible for snapping based on angles and alignment on hover while choosing the position of a vertex.\n//\n// If pMov is the vertex being moved, the snapping behavior includes:\n//\n//  1. Angle to previous edge: Snap if edge ending at pMov forms a snapAngle (0, 45, 90,...) with its predecessor edge.\n//\n//  2. Angle to next edge: Snap if the edge starting at pMov forms a snapAngle with its successor edge.\n//\n//  3. Collinear Align: Snap if for pMov is collinear with any (non-adjacent) edge.\n//\n//  4. Vertical Align: Snap if pMov is collinear with the edge normal at start/center/end of any non-adjacent edge.\n//\n\n// A SnapLine is a line that we consider for snapping.\nclass SnapLine {\n\n  constructor(a, b) {\n\n    // start and end point\n    this.a = a.clone();\n    this.b = b.clone();\n\n    // normalized edge direction\n    this.dir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(a, b);\n  }\n\n  // Check for intersection with another SnapLine. If found, intersection point is written to outPoint.\n  // @returns {bool} true on success\n  intersect(line, outPoint) {\n    return _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.intersectLines(this.a, this.dir, line.a, line.dir, outPoint);\n  }\n\n  // project point to SnapLine\n  snapToLine(p) {\n    _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.projectToLine(p, this.a, this.dir);\n  }\n\n  // Checks if SnapLine is close enough to p to allow snapping. snapRadius is in layer-coords.\n  isUsable(p, snapRadius) {\n    return _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.pointLineDistance(p, this.a, this.dir) < snapRadius;\n  }\n\n  // Checks if a SnapLine is (approx.) identical with another one\n  isEqual(snapLine, precision) {\n    return _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.collinear(this.a, this.dir, snapLine.a, snapLine.dir, precision);\n  }\n};\n\n// Snap position based on 1 or 2 SnapLines.\n//  @param {Vector2}  pos         - Initial position in layer coords. Modified in-place\n//  @param {SnapLine} snapLine1   - First line to snap to\n//  @param {SnapLine} [snapLine2] - If there are 2 SnapLines, we snap to the intersection of both lines.\n// Preconditions:\n//  - SnapLine1: Is close to pos (wrt. to snap tolerance)\n//  - SnapLine2: If existing, its intersection with SnapLine1 is close to the position\nconst snapToLines = (pos, snapLine1, snapLine2) => {\n\n  // No snaplines => keep original pos\n  if (!snapLine1 && !snapLine2) {\n    return;\n  }\n\n  // If only SnapLine1 exists\n  if (!snapLine2) {\n    // project pos to snapLine1\n    snapLine1.snapToLine(pos);\n    return;\n  }\n\n  // If only snapLine2 exists\n  if (!snapLine1) {\n    // project pos to snapLine2\n    snapLine2.snapToLine(pos);\n    return;\n  }\n\n  // Snap pos to line intersection.\n  snapLine1.intersect(snapLine2, pos);\n};\n\n// Get point i within a polygon, whereby indices outside [0, ..., this.poly.length-1] are auto-corrected using modulo.\n// Accepts negative indices up to -this.poly.length.\nconst getPointMod = (poly, index, loopIndex) => {\n  const vertexCount = poly.getVertexCount(loopIndex);\n  index = (index + vertexCount) % vertexCount;\n  return poly.getPoint(index, loopIndex);\n};\n\n// Returns an array of SnapLines used to align with each edge of the given polygon.\n//  @param {Polygon}   poly\n//  @param {vIndex}    vIndex - index of the vertex being moved. We exclude edges directly adjacent to this vertex, because they are not fixed.\n//  @param {loopIndex} loopIndex\nconst findSnapLines = (poly, vIndex, loopIndex) => {\n\n  // tmp vectors\n  let normal = new THREE.Vector2();\n  let center = new THREE.Vector2();\n  let pEnd = new THREE.Vector2();\n\n  let snapLines = [];\n\n  // Given an edge of a polygon/polyline, this function collects snapping lines for alignment with this this edge.\n  // and adds it to snapLines.\n  // Generated snapLines are:\n  //  - Line spanned by the edge\n  //  - Orthogonal lines at start, center, and end point.\n  const addEdgeSnapLines = (a, b) => {\n\n    // add line spanned by the edge\n    snapLines.push(new SnapLine(a, b));\n\n    // get edge normal and center point\n    normal = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.turnLeft(_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(a, b, normal));\n    center = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeCenter(a, b, center);\n\n    // add orthogonal line add edge start\n    pEnd.copy(a).add(normal); // pEnd = p1 + normal\n    snapLines.push(new SnapLine(a, pEnd));\n\n    // add orthogonal line at edge center\n    pEnd.copy(center).add(normal); // pEnd = center + normal\n    snapLines.push(new SnapLine(center, pEnd));\n\n    // add orthogonal line at edge end\n    pEnd.copy(b).add(normal); // pEnd = p2 + normal\n    snapLines.push(new SnapLine(b, pEnd));\n  };\n\n  for (let l = 0; l < poly.loopCount; l++) {\n    poly.enumEdges((a, b, ia, ib) => {\n\n      // Exclude edges containing the moved vertex: These edges are not fixed yet and should not\n      // be used for alignment.\n      if (l === loopIndex && (ia === vIndex || ib === vIndex)) {\n        return;\n      }\n\n      // skip edge if degenerate\n      if (_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.edgeIsDegenerated(a, b)) {\n        return;\n      }\n\n      addEdgeSnapLines(a, b);\n    }, l);\n  }\n  return snapLines;\n};\n\n// Checks if the given SnapLine candidate is suitable to be used - assuming that another snapLine1 was already chosen.\n// A candidate is only suitable if...\n//  1. The intersection with snapLine1 is within snapping tolerance\n//  2. The angle formed with snapLine1 is as closer to 90° than all other candidates. This makes sure that we rather\n//     snap to orthogonal SnapLines than trying to snap to two nearly parallel ones.\n//\n//  @param {SnapLine} candidate       - SnapLine candidates to be compared\n//  @param {SnapLine} [bestCandidate] - Best candidate found so far (may be null)\n//  @param {SnapLine} snapLine1       - First SnapLine that has already been chosen to snap to.\n//  @param {Vector2}  pos             - position to be snapped\n//  @param {number}   snapRadius      - in layer coords\n//  @returns {SnapLine} Returns the best candidate - either bestCandidate or snapLineCandidate\nconst checkSecondSnapCandidate = (candidate, bestCandidate, snapLine1, pos, snapRadius) => {\n\n  // If candidate does not intersect snapLine1, we cannot use it.\n  const pIntersect = new THREE.Vector2();\n  if (!snapLine1.intersect(candidate, pIntersect)) {\n    return bestCandidate;\n  }\n\n  // If intersection point is outside snapRadius, discard candidate\n  if (pIntersect.distanceTo(pos) > snapRadius) {\n    return bestCandidate;\n  }\n\n  // If there is no competitor, the candidate made it.\n  if (!bestCandidate) {\n    return candidate;\n  }\n\n  // Check which of the candidates is \"less parallel\" to snapLine1\n  const dp1 = Math.abs(snapLine1.dir.dot(candidate.dir));\n  const dp2 = Math.abs(snapLine1.dir.dot(bestCandidate.dir));\n  return dp1 > dp2 ? candidate : bestCandidate;\n};\n\nconst xAxis = new THREE.Vector2(1, 0);\n\nconst av = Autodesk.Viewing;\n// AngleSnapper helps to draw right angles, parallel lines etc.\nclass AngleSnapper {\n\n  constructor(gizmoLayer) {\n    // Polygon/Polyline being edited. We assume that it includes the vertex being moved.\n    this.poly = null;\n\n    // Index of the vertex in this.poly that is beging moved.\n    this.vIndex = -1;\n    this.loopIndex = -1;\n\n    // If an edge forms one of these angles with the previous one, we display the helper line and snap to the angle\n    this.snapAngles = [0, 45, 90, 135, 180, 225, 270, 315, 360];\n\n    // We consider an angle \"close to\" another one if they differ by this value or less.\n    this.snapAngleTolerance = 2; // in degrees\n\n    // Allow snapping to lines within x pixels.\n    this.snapRadius = 10;\n\n    this.gizmoLayer = gizmoLayer;\n    this.setGlobalManager(gizmoLayer.globalManager);\n\n    // reused tmp points\n    this.movedPoint = new THREE.Vector2(); // the vertex being moved\n    this.prevPoint = new THREE.Vector2(); // the vertex before movedPoint\n    this.prevPoint2 = new THREE.Vector2(); // the vertex before prevPoint\n\n    this.edgeDir = new THREE.Vector2(); // direction of new edge ending at movedPoint\n    this.alignAxis = new THREE.Vector2(); // direction that we align to: Either the direction of the previous edge or the x-axis\n\n    // Array of snapLines to align a vertex position with other edges\n    this.edgeSnapLines = [];\n\n    // SnapLines that contributed to last snapping call. Used to update the SnapLine gizmos.\n    this.snapLine1 = null;\n    this.snapLine2 = null;\n\n    // Optional: External line constraint. This is used if we already snapped to a line geometry and\n    //           want to combine the snap with angle snapping.\n    this.snapLineExt = null;\n\n    // Gizmos to display the lines considered for snapping\n    this.snapLineStyle = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style({\n      lineColor: 'rgb(255, 0, 0)',\n      lineWidth: 1.0,\n      lineStyle: 10\n    });\n    this.snapLineGizmos = [];\n    this.snapLineGizmosUsed = 0;\n  }\n\n  onSetGlobalManager(globalManager) {\n    this.globalManager = globalManager;\n    this.snapLineGizmos.forEach((g) => g.setGloblaManager(globalManager));\n  }\n\n  acquireSnapLineGizmo() {\n    let gizmo = this.snapLineGizmos[this.snapLineGizmosUsed];\n    if (!gizmo) {\n      // Create new line gizmo\n      gizmo = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline([], this.snapLineStyle);\n      gizmo.setGlobalManager(this.globalManager);\n      this.snapLineGizmos[this.snapLineGizmosUsed] = gizmo;\n    }\n    this.snapLineGizmosUsed++;\n    return gizmo;\n  }\n\n  clearSnappingGizmos() {\n    const removeGizmo = (g) => this.gizmoLayer.removeShape(g);\n    this.snapLineGizmos.forEach(removeGizmo);\n    this.snapLineGizmosUsed = 0;\n  }\n\n  // Configures snapping to align to edges of the given polygon/polyline\n  //  @param {Polygon|Polyline} poly   - shape being edited. Expected to include the vertex being moved.\n  //  @param {number}           vIndex - index into poly that marks the vertex that is moved and to which snapping should be applied.\n  //  @param {number}           loopIndex\n  startSnapping(poly, vIndex, loopIndex) {\n    this.poly = poly;\n    this.vIndex = vIndex;\n    this.loopIndex = loopIndex;\n\n    // precompute snapLines for alignment. These don't change while moving a vertex.\n    this.edgeSnapLines = findSnapLines(poly, vIndex, this.loopIndex);\n  }\n\n  stopSnapping() {\n\n    this.poly = null;\n    this.vIndex = -1;\n    this.loopIndex = -1;\n\n    // Discard any outdated results and hide gizmos\n    this.snapLine1 = null;\n    this.snapLine2 = null;\n    this.clearSnappingGizmos();\n  }\n\n  // Discard latest snapping results, but polygon, vIndex, and edge snapLines. This is used when temporarily hiding the SnapLines when\n  // snapping while snapping is bypassed.\n  clearSnappingResult() {\n    this.snapLine1 = null;\n    this.snapLine2 = null;\n  }\n\n  get active() {\n    return this.poly;\n  }\n\n  // Snap angles relative to previous edge: Return a snapLine if the edge being modified forms a snapAngle (e.g. 90 degrees) with the previous edge.\n  //  @param {Vector2} pMov - point to be snapped\n  //  @returns {null|SnapLine} Returns null if no SnapLine is within this.angleTolerance.\n  getPrevSnapLine(pMov) {\n\n    // Get vertices one and two indices before the moved one.\n    const pPrev = getPointMod(this.poly, this.vIndex - 1, this.loopIndex);\n    const pPrev2 = getPointMod(this.poly, this.vIndex - 2, this.loopIndex);\n\n    // Check angle between (pPrev, pMov) and its predecessor edge (pPrev2, pPrev)\n    const alignAxis = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(pPrev2, pPrev);\n    return this.computeAngleSnapLine(pMov, pPrev, alignAxis);\n  }\n\n  // Snap angles relative to previous edge: Return a snapLine if the edge being modified forms a snapAngle (e.g. 90 degrees) with the next edge.\n  //  @param {Vector2} pMov - point to be snapped\n  //  @returns {null|SnapLine} Returns null if no SnapLine is within this.angleTolerance.\n  getNextSnapLine(pMov) {\n\n    // When moving one of the last two vertices of a polyline, there is actually no \"next edge\", because start and end\n    // vertex are not connected. Therefore, we skip snapping to \"next edge\" for this case.\n    const ignoreNextEdge = this.poly.isPolyline() && this.vIndex >= this.poly.getVertexCount(this.loopIndex) - 2;\n    if (ignoreNextEdge) {\n      return null;\n    }\n\n    const pNext = getPointMod(this.poly, this.vIndex + 1, this.loopIndex);\n    const pNext2 = getPointMod(this.poly, this.vIndex + 2, this.loopIndex);\n\n    // Snap to angle wrt. to next edge: (only for polygons)\n    //   Check angle between (pNext, pMov) and its successor edge (pNext, pNext2);\n    const alignAxis = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(pNext, pNext2);\n    return this.computeAngleSnapLine(pMov, pNext, alignAxis);\n  }\n\n  // Given a new position in layer-coords to be assigned to the moved vertex, this function checks if the adjacent edges of the moved\n  // vertex are close to a snap angle. If so, the movedPoint is corrected to match the snap angle exactly.\n  //  @param {Vector2} pMov - Position to be snapped\n  //  @param {Object}  [lineConstraint] - Optional: External line-constraint {a,b}. If specified, we only allow snapping to\n  //                                                intersections with angle snapLines and the line (lineConstraint.a, lineConstraint.b).\n  snapToAngle(pMov, lineConstraint) {\n\n    // Reset the two lines that we consider for snapping.\n    this.snapLine1 = null;\n    this.snapLine2 = null;\n\n    // Create snapLine from external line constraint (if specified)\n    this.snapLineExt = lineConstraint && new SnapLine(lineConstraint.a, lineConstraint.b);\n\n    if (!this.active || this.poly.vertexCount <= 1) {\n      return;\n    }\n\n    // Get point before the moved one.\n    const pPrev = getPointMod(this.poly, this.vIndex - 1, this.loopIndex);\n\n    // get snapRadius in layer-coords. This is the maximum distance that we allow\n    // between mouse pos and the final snap position that we obtain by projecting\n    // to a SnapLine or by intersecting two SnapLines.\n    const snapRadiusLC = this.snapRadius * this.gizmoLayer.getUnitsPerPixel();\n\n    // If we just have a single edge, we can only snap to angles relative to x-axis\n    const isFirstEdge = this.poly.vertexCount == 2;\n    if (isFirstEdge) {\n      // Get closest angle-snap line relative to mainAxis (or null if no snapAngle is close enough)\n      const snapAxis = this.computeAngleSnapLine(pMov, pPrev, xAxis);\n\n      if (snapAxis && this.snapLineExt) {\n        // If an external line constraint is set, snapAxis can only be considered as a secondary snap.\n        // This means, we can only consider if it intersects with the costraint line and the intersection is close to pMov\n        this.snapLine1 = checkSecondSnapCandidate(snapAxis, null, this.snapLineExt, pMov, snapRadiusLC);\n      } else {\n        // No other constraints. Just use the snapAxis (or no axis at all if snapAxis is null)\n        this.snapLine1 = snapAxis;\n      }\n\n      snapToLines(pMov, this.snapLine1, this.snapLineExt);\n      return;\n    }\n\n    let prevSnapLine = this.getPrevSnapLine(pMov);\n    let nextSnapLine = this.getNextSnapLine(pMov);\n\n    // Filter to lines that are close enough to pMov\n    const snapLineUsable = (snapLine) => {\n\n      if (!snapLine) {\n        return false;\n      }\n\n      if (this.snapLineExt) {\n        // Consider line-constraint: Only accept snapLine if...\n        //  1. ...it intersects constraint line\n        //  2. ...intersection point is within snapRadius.\n        return Boolean(checkSecondSnapCandidate(snapLine, null, this.snapLineExt, pMov, snapRadiusLC));\n      }\n\n      // No constraint: Accept any snapLines within snapRadius\n      return snapLine.isUsable(pMov, snapRadiusLC);\n    };\n\n    let candidates = this.edgeSnapLines.filter(snapLineUsable);\n\n    // Reject prevSnapLine/nextSnapLine if they are not usable\n    prevSnapLine = snapLineUsable(prevSnapLine) && prevSnapLine;\n    nextSnapLine = snapLineUsable(nextSnapLine) && nextSnapLine;\n\n    // choose first snapLine\n    this.snapLine1 = prevSnapLine || nextSnapLine || candidates[0];\n\n    // Stop here if there is no snapping candidate at all\n    if (!this.snapLine1) {\n      return;\n    }\n\n    // If we have an external line constraint, we can only choose a single snapLine, because we already\n    // have to intersect it with the external constraint line.\n    if (this.snapLineExt) {\n      return snapToLines(pMov, this.snapLine1, this.snapLineExt);\n    }\n\n    // If prev and next edge allow angle snapping, check if we can snap to both\n    if (prevSnapLine && nextSnapLine) {\n      this.snapLine2 = checkSecondSnapCandidate(nextSnapLine, null, this.snapLine1, pMov, snapRadiusLC);\n    }\n\n    // If prevEdge and nextEdge already gave us 2 SnapLines, give these two preference. Otherwise,\n    // check if we can snap to another edge to be aligned with other edges.\n    if (!this.snapLine2) {\n      for (let i = 0; i < candidates.length; i++) {\n        let c = candidates[i];\n        this.snapLine2 = checkSecondSnapCandidate(c, this.snapLine2, this.snapLine1, pMov, snapRadiusLC);\n      }\n    }\n\n    // We selected one or two SnapLines. Now, use them to decide snapped position\n    return snapToLines(pMov, this.snapLine1, this.snapLine2);\n  }\n\n  isSnapped() {\n    return Boolean(this.snapLine1 || this.snapLine2);\n  }\n\n  updateSnapLineGizmos(snappedPos) {\n\n    // First, clear any outdated gizmos\n    this.clearSnappingGizmos();\n\n    if (!this.poly) {\n      return;\n    }\n\n    // Collect all snapLines that we want to display\n    //\n    // Note that we don't just want to indicate SnapLines that actively affected the position,\n    // but also the \"accidentally\" matched ones. E.g., if we snapped to a geometry intersection,\n    // the actual snapping was not affected by angle snapping, but the resulting position may still\n    // match with angle snapLines as well.\n    let snapLinesToShow = [];\n\n    // We consider the snapped position p to be \"on a snapLine L\" if the distance d(p,L) is within the tolerance below.\n    const tolerance = 0.0001;\n    const shouldBeShown = (sl) => sl && sl.isUsable(snappedPos, tolerance); // Decides whether a SnapLine should be displayed\n\n    // If we only have a single edge, angle snapping is only possible wrt. to main axes\n    const isFirstEdge = this.poly.vertexCount == 2;\n\n    // Collect SnapLines to display\n    if (isFirstEdge) {\n      // Just a single edge: Only snap if this first edge forms a snapping angle with x- or y-axis.\n      const pPrev = getPointMod(this.poly, this.vIndex - 1, this.loopIndex);\n      const snapAxis = this.computeAngleSnapLine(snappedPos, pPrev, xAxis);\n\n      // Display snapAxis if the p is on this line\n      if (snapAxis && shouldBeShown(snapAxis)) {\n        snapLinesToShow.push(snapAxis);\n      }\n    } else {\n      // Consider all edge snaplines that contain pSnappedPos\n      snapLinesToShow = this.edgeSnapLines.filter(shouldBeShown);\n\n      // Consider angles to previous and next edge\n      const prevSnapLine = this.getPrevSnapLine(snappedPos);\n      const nextSnapLine = this.getNextSnapLine(snappedPos);\n      shouldBeShown(prevSnapLine) && snapLinesToShow.push(prevSnapLine);\n      shouldBeShown(nextSnapLine) && snapLinesToShow.push(nextSnapLine);\n    }\n\n    // Eliminate duplicates: If a SnapLine is collinear with another one, displaying it would just cause artifacts.\n    // Note: This is a brute-force n^2 loop. The number of SnapLines to display is usually small, so that this shouldn't be a problem.\n    const isRelevant = (sl, index) => {\n      // Check if sl is a duplicate of any previous SnapLine\n      let isDuplicate = false;\n      for (let i = 0; i < index; i++) {\n        const sl2 = snapLinesToShow[i];\n        if (sl.isEqual(sl2, tolerance)) {\n          isDuplicate = true;\n          break;\n        }\n      }\n      return !isDuplicate;\n    };\n    snapLinesToShow = snapLinesToShow.filter(isRelevant);\n\n    // Choose SnapLineLength large enough to fill whole canvas\n    const canvas = this.gizmoLayer.viewer.canvas;\n    const diag = Math.sqrt(canvas.width * canvas.width + canvas.height * canvas.height);\n    const snapLineLength = this.gizmoLayer.getUnitsPerPixel() * diag;\n\n    // A SnapLine indicator is constructed as follows:\n    //  - It starts at the snapLine start point, which \"explains where the SnapLine comes from\".\n    //    This may be start/center/end of another edge.\n    //  - It should always point towards the moved vertex (note that an original edge normal may point away from the moved vertex)\n    //  - It is enlarged to overshoot pMov\n    const showSnapLine = (line, gizmo) => {\n      if (!line) {\n        return;\n      }\n\n      const a = line.a;\n\n      // Let line start at a, point towards dir, and be long enough to leave screen\n      gizmo.makeLine(\n        a.x - snapLineLength * line.dir.x,\n        a.y - snapLineLength * line.dir.y,\n        a.x + snapLineLength * line.dir.x,\n        a.y + snapLineLength * line.dir.y\n      );\n      this.gizmoLayer.addShape(gizmo);\n    };\n\n    // Add lineGizmo for each SnapLine to be displayed\n    for (let i = 0; i < snapLinesToShow.length; i++) {\n      const snapLine = snapLinesToShow[i];\n      const gizmo = this.acquireSnapLineGizmo();\n      showSnapLine(snapLine, gizmo);\n    }\n  }\n\n  dtor() {\n    this.clearSnapping();\n  }\n\n  // Checks if the angle between edge (pPrev, p) and alignment direction is close to a snapping angle.\n  // If so, it returns a SnapLine from pPrev towards the snapped direction, otherwise null.\n  //  @param {Vector2} p              - vertex being moved\n  //  @param {Vector2} pPrev          - vertex connected to p\n  //  @param {Vector2} alignAxis      - direction that we align to. Must be normalized.\n  computeAngleSnapLine(p, pPrev, alignAxis) {\n\n    // Don't try angle snapping with degenerated edges\n    if (_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.edgeIsDegenerated(pPrev, p)) {\n      return null;\n    }\n\n    // get direction of new edge (ending at pMov)\n    const edgeDir = p.clone().sub(pPrev);\n\n    // Compute angle between new edge and alignment direction\n    const angle = THREE.Math.radToDeg(_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.angleBetweenDirections(edgeDir, alignAxis));\n\n    // Check if angle matches with any index in snapAngles array\n    let snapIndex = -1;\n    for (let i = 0; i < this.snapAngles.length; i++) {\n      let snapAngle = this.snapAngles[i];\n\n      let dif = Math.abs(snapAngle - angle);\n      if (dif < this.snapAngleTolerance) {\n        snapIndex = i;\n        break;\n      }\n    }\n\n    // Stop here if no snapAngle is found\n    if (snapIndex == -1) {\n      return null;\n    }\n\n    // Rotate alignment axis by selected snapAngle\n    const snapAngle = THREE.Math.degToRad(this.snapAngles[snapIndex]);\n    const snapDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.rotateAround(alignAxis.clone(), snapAngle);\n\n    // scale snapLine direction to the same length as (pPrev, p)\n    const dist = pPrev.distanceTo(p);\n    const snapLineEnd = snapDir.multiplyScalar(dist).add(pPrev);\n\n    // Return snapline from pPrev pointing towards snapped direction\n    return new SnapLine(pPrev, snapLineEnd);\n  }\n}\n\nav.GlobalManagerMixin.call(AngleSnapper.prototype);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/AngleSnapper.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Arrow.js":
/*!************************************!*\
  !*** ./extensions/Edit2D/Arrow.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Arrow)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n\n\n\n// Vector-shape for displaying simple arrows.\nclass Arrow extends _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Shape {\n\n  constructor() {\n    super();\n\n    // in layer coords\n    this.from = new THREE.Vector2();\n    this.to = new THREE.Vector2();\n\n    // extends of the arrow head in layer coords\n    this.headLength = 2; // along arrow direction\n    this.headAngle = 60; // in degrees. Angle at the tip of the arrow head.\n\n    this.line = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline();\n    this.head = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polygon();\n\n    // If true, head is a filled triangle, otherwise just two lines joining at the tip.\n    this.headFilled = true;\n    this.head.style.lineAlpha = 0.0;\n\n    // Add points for triangular head. We only update point positions afterwards.\n    this.head.addPoint(0, 0);\n    this.head.addPoint(0, 0);\n    this.head.addPoint(0, 0);\n\n    // normalized arrow directiom. Auto-updated based on from/to\n    this.dir = new THREE.Vector2();\n\n    // tmp vectors\n    this.tmpVec1 = new THREE.Vector2();\n    this.tmpVec2 = new THREE.Vector2();\n    this.tmpVec3 = new THREE.Vector2();\n  }\n\n  modified() {\n    super.modified();\n    this.needsUpdate = true;\n  }\n\n  draw(ctx) {\n    this.update();\n\n    // Todo: Concept to clarify style override for shapes with child shapes with different styles.\n    this.line.draw(ctx, this.line.style);\n    this.head.draw(ctx, this.head.style);\n  }\n\n  move(dx, dy) {\n    this.from.x += dx;\n    this.from.y += dy;\n    this.to.x += dx;\n    this.to.y += dy;\n    this.modified();\n    return this;\n  }\n\n  hitTest(x, y) {\n    this.update();\n    return this.line.hitTest(x, y) || this.head.hitTest(x, y);\n  }\n\n  clone() {\n    return new Arrow().copy(this);\n  }\n\n  setFrom(x, y, z) {\n    if (typeof x === 'object') {\n      this.from.copy(x);\n    } else {\n      this.from.set(x, y, z);\n    }\n    this.modified();\n  }\n\n  setTo(x, y, z) {\n    if (typeof x === 'object') {\n      this.to.copy(x);\n    } else {\n      this.to.set(x, y, z);\n    }\n  }\n\n  // Length of the arrow head. Should always be smaller than the full length of the arrow.\n  setHeadLength(len) {\n    this.headLength = len;\n    this.modified();\n  }\n\n  // Angle at the tip of the arrow head. In degrees.\n  setHeadAngle(angle) {\n    this.headAngle = angle;\n    this.modified();\n  }\n\n  copy(from) {\n    super.copy(from);\n    this.from = from.from.clone();\n    this.to = from.to.clone();\n    this.headLength = from.headLength;\n    this.headAngle = from.headAngle;\n    this.headFilled = from.headFilled;\n    this.modified();\n    return this;\n  }\n\n  computeBBox() {\n    this.line.computeBBox();\n    this.head.computeBBox();\n\n    this.bbox.makeEmpty();\n    this.bbox.union(this.line.bbox);\n    this.bbox.union(this.head.bbox);\n  }\n\n  get direction() {\n    // Normalized arrow direction\n    return this.dir.copy(this.to).sub(this.from).normalize();\n  }\n\n  getLength() {\n    return this.to.distanceTo(this.from);\n  }\n\n  // Change arrow lenght by changing one of the points.\n  //  @param {number} l - new length\n  //  @param {bool}   [changeFrom] - By default (false), we change the toPoint and keep fromPoint constant.\n  //                                 If true, we keep toPoint and change fromPoint instead.\n  setLength(l, changeFrom) {\n\n    // Scale direction by new length\n    const dir = this.direction;\n    const dx = dir.x * l;\n    const dy = dir.y * l;\n\n    // Reset fromPoint or toPoint\n    if (changeFrom) {\n      this.setFrom(this.to.x - dx, this.to.y - dy);\n    } else {\n      this.setTo(this.from.x + dx, this.from.y + dy);\n    }\n  }\n\n  update() {\n\n    if (!this.needsUpdate) {\n      return;\n    }\n\n    const dir = this.direction;\n\n    // compute line endpoint. If the head is filled, the line ends at the\n    // center of the head hypothenuse, otherwise at the to-point.\n    const ex = this.to.x - (this.headFilled ? dir.x * this.headLength : 0);\n    const ey = this.to.y - (this.headFilled ? dir.y * this.headLength : 0);\n\n    // draw arrow tail\n    this.line.makeLine(this.from.x, this.from.y, ex, ey);\n\n    // compute vector perpendicular to arrow directrion\n    const leftNormal = this.tmpVec2.copy(dir);\n    _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.turnLeft(leftNormal);\n\n    // compute distance between arrow line and left vertex of arrow head\n    const halfAngle = 0.5 * THREE.Math.degToRad(this.headAngle);\n    const dist = Math.tan(halfAngle) * this.headLength;\n\n    // compute left head vertex\n    const leftX = this.to.x - dir.x * this.headLength + leftNormal.x * dist;\n    const leftY = this.to.y - dir.y * this.headLength + leftNormal.y * dist;\n\n    // compute right head vertex\n    const rightX = this.to.x - dir.x * this.headLength - leftNormal.x * dist;\n    const rightY = this.to.y - dir.y * this.headLength - leftNormal.y * dist;\n\n    // update the 3 head vertices\n    this.head.updatePoint(0, leftX, leftY); // left vertex\n    this.head.updatePoint(1, this.to.x, this.to.y); // tip of the arrow\n    this.head.updatePoint(2, rightX, rightY); // right vertex\n\n    this.needsUpdate = false;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Arrow.js\n");

/***/ }),

/***/ "./extensions/Edit2D/BooleanOps.js":
/*!*****************************************!*\
  !*** ./extensions/Edit2D/BooleanOps.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanOps: () => (/* binding */ BooleanOps)\n/* harmony export */ });\n/* harmony import */ var _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SolidDefConvert.js */ \"./extensions/Edit2D/SolidDefConvert.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @adsk/solid-definition */ \"./node_modules/@adsk/solid-definition/dist/solid-definition.min.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _LoopContainment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LoopContainment.js */ \"./extensions/Edit2D/LoopContainment.js\");\n\n\n\n\n\n\nconst Operator = {\n  Intersect: 1, // only keep regions where path1 and path2 are overlapping\n  Union: 2, // unify both shapes\n  Difference: 3, // path1 after removing all regions that are overlapped by path2\n  Xor: 4 // only keep regions that are either covered by path1 or path2, but not both\n};\n\n// Returns all faces that are \"inside the given wireBody\", whereby:\n//  - All wires in wireBody must be closed loops without branching\n//  - A face is considered as \"inside\" if it is enclosed by an odd number of wires (\"Even-Odd-Rule\")\n//\n// @param {SketchRegionSolver} solver   - initialized with all edges of subject and cutLoop\n// @param {SolidDef.WireBody}  wireBody - must contain closed loops.\n// Returns the subset of region faces that is inside the given wireBody.\nconst getFacesInside = (solver, wireBody) => {\n\n  // Mark all faces as rank 0, indicating that we did not find an enclosing loop yet\n  // Note: It's not perfectly clean to add extra attributes, but...\n  //  a) Since faces don't have unique ids, we don't have proper way to index them without modifying\n  //  b) All faces here are only temporary.\n  const regionFaces = solver.getFaces();\n  regionFaces.forEach((f) => f.rank = 0);\n\n  // for each wire\n  const wires = wireBody.getWires();\n  wires.forEach((w) => {\n\n    // get faces inside this loop\n    const loopEdges = w.getEdges();\n    const facesInside = (0,_LoopContainment_js__WEBPACK_IMPORTED_MODULE_2__.getFacesInsideLoop)(solver, loopEdges);\n\n    // increase rank for all faces inside this loop\n    facesInside.forEach((f) => f.rank++);\n  });\n\n  // Return all faces whose rank is not a multiple of 2\n  const hasOddRank = (f) => Boolean(f.rank & 1);\n  return regionFaces.filter(hasOddRank);\n};\n\n// Apply boolean operation on two SolidDef paths (must be closed).\n//\n// @param {SolidDef.Path2D}   path1           - the path to be clipped.\n// @param {SolidDef.Path2D}   path2           - to be cut away. Must be a single loop.\n// @param {Operator}          operator\n// @param {SolidDef.Path2D[]} [extraOperands] - Unify supports more than 2 operands.\n// @returns {SolidDef.Face[]}\nconst applyOperation = (path1, path2, operator, extraOperands) => {\n\n  // get paths as wires\n  const wireBody1 = path1.getWireBody();\n  const wireBody2 = path2.getWireBody();\n\n  // get both paths as edge arrays\n  const edges1 = wireBody1.getEdges();\n  const edges2 = wireBody2.getEdges();\n\n  // get unified array with edges of both parts\n  const allEdges = edges1.concat(edges2);\n\n  // add edges of additional operands\n  extraOperands && extraOperands.forEach((p) => {\n    const wb = p.getWireBody();\n    const edges = wb.getEdges();\n    allEdges.push(...edges);\n  });\n\n  // Feed them into solver to intersect them against each other and extract the resulting region faces.\n  const solver = new _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.SketchRegionSolver();\n  solver.compute(allEdges);\n  const allFaces = solver.getFaces();\n\n  // check which of the faces are within path and cutPath\n  const facesInPath1 = getFacesInside(solver, wireBody1);\n  const facesInPath2 = getFacesInside(solver, wireBody2);\n\n  // check which faces are in any of the extra operands\n  const facesInExtraPaths = extraOperands && extraOperands.map((p) => {\n    const wb = p.getWireBody();\n    return getFacesInside(solver, wb);\n  });\n\n  // Filter faces based on operation type.\n  // Note: We have a O(numEdges^2) runtime here, which might be an issue for number of faces.\n  //       If needed, this could be optimized by tagging the edges with unique IDs in advance and indexing\n  //       the faces by id.\n  const filter = (f) => {\n    const inPath1 = facesInPath1.includes(f);\n    const inPath2 = facesInPath2.includes(f);\n\n    // Check if face is contained in any of the extra paths\n    const inExtraPath = facesInExtraPaths && facesInExtraPaths.some((faceSet) => faceSet.includes(f));\n\n    switch (operator) {\n      case Operator.Union:return inPath1 || inPath2 || inExtraPath;\n      case Operator.Intersect:return inPath1 && inPath2;\n      case Operator.Difference:return inPath1 && !inPath2;\n      case Operator.Xor:return inPath1 !== inPath2;\n    }\n  };\n  const selectedFaces = allFaces.filter(filter);\n\n  // Finally, merge these faces to obtain result\n  return (0,_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.mergeConnectedFaces)(selectedFaces);\n};\n\n//  @param {PolyBase[]} [extraOperands] - For unify, we allow moore than 2 operands.\nconst apply = (path1, path2, operator, extraOperands) => {\n  // Convert to SolidDef\n  const path1Sd = _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__.SolidDefConvert.toSolidDefPath(path1);\n  const path2Sd = _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__.SolidDefConvert.toSolidDefPath(path2);\n\n  const extraOperandsSD = extraOperands && extraOperands.map((p) => _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__.SolidDefConvert.toSolidDefPath(p));\n\n  // Run operation\n  const faces = applyOperation(path1Sd, path2Sd, operator, extraOperandsSD);\n\n  // Convert SolidDef faces back to Edit2D paths\n  const result = _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__.SolidDefConvert.facesToShape(faces);\n\n  // Let result inherit style of path1\n  result.style.copy(path1.style);\n\n  return result;\n};\n\nconst BooleanOps = {\n  Operator,\n  apply\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/BooleanOps.js\n");

/***/ }),

/***/ "./extensions/Edit2D/CanvasGizmo.js":
/*!******************************************!*\
  !*** ./extensions/Edit2D/CanvasGizmo.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlignX: () => (/* binding */ AlignX),\n/* harmony export */   AlignY: () => (/* binding */ AlignY),\n/* harmony export */   ArcEdgeGizmo: () => (/* binding */ ArcEdgeGizmo),\n/* harmony export */   AreaLabel: () => (/* binding */ AreaLabel),\n/* harmony export */   CanvasGizmo: () => (/* binding */ CanvasGizmo),\n/* harmony export */   CanvasGizmoBase: () => (/* binding */ CanvasGizmoBase),\n/* harmony export */   DefaultLabelFilter: () => (/* binding */ DefaultLabelFilter),\n/* harmony export */   EdgeGizmo: () => (/* binding */ EdgeGizmo),\n/* harmony export */   EdgeLabel: () => (/* binding */ EdgeLabel),\n/* harmony export */   EdgeMoveGizmo: () => (/* binding */ EdgeMoveGizmo),\n/* harmony export */   FadeOutStyleRule: () => (/* binding */ FadeOutStyleRule),\n/* harmony export */   GizmoManager: () => (/* binding */ GizmoManager),\n/* harmony export */   LabelFilter: () => (/* binding */ LabelFilter),\n/* harmony export */   LabelStyleRule: () => (/* binding */ LabelStyleRule),\n/* harmony export */   LengthLabel: () => (/* binding */ LengthLabel),\n/* harmony export */   ShapeLabel: () => (/* binding */ ShapeLabel),\n/* harmony export */   ShapeLabelRule: () => (/* binding */ ShapeLabelRule),\n/* harmony export */   ShapeToolTip: () => (/* binding */ ShapeToolTip),\n/* harmony export */   TextLabel: () => (/* binding */ TextLabel),\n/* harmony export */   VertexGizmo: () => (/* binding */ VertexGizmo)\n/* harmony export */ });\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n\n\n\n\n// int value to string, e.g. 50 => \"50px\" - to used for style assignments.\nconst toPixels = (val) => {\n  return val.toString() + 'px';\n};\n\nconst AlignX = {\n  Left: 1,\n  Center: 2,\n  Right: 3\n};\n\nconst AlignY = {\n  Top: 1,\n  Center: 2,\n  Bottom: 3\n};\n\nconst av = Autodesk.Viewing;\n\n// Base class for any gizmo that needs to be synchronized with the shapes of an EditLayer.\nclass CanvasGizmoBase {\n  constructor() {}\n\n  // Called whenever the layer or camera changes.\n  update() {}\n}\n\nav.GlobalManagerMixin.call(CanvasGizmoBase.prototype);\n\n// A CanvasGizmo is an html div anchored at a position in layer-coords\nclass CanvasGizmo extends CanvasGizmoBase {\n  constructor(layer) {let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;let className = arguments.length > 2 ? arguments[2] : undefined;\n    super();\n\n    this.layer = layer;\n    this.setGlobalManager(layer.globalManager);\n\n    // position in layer-coords. The transform origin of the div will appear at this position.\n    this.layerPos = new THREE.Vector2();\n\n    // position in canvas-coords (updated based on this.layerPos and camera)\n    this.canvasPos = new THREE.Vector2();\n\n    // html content to be shown\n    const _document = this.getDocument();\n    this.container = _document.createElement('div');\n\n    // Make sure that label is displayed on top of the canvas and not \"pushed away\" by it.\n    this.container.style.position = 'absolute';\n\n    // Rotate around gizmo center\n    this.container.style.transformOrigin = '50% 50%';\n    this.container.style.top = '0px';\n    this.container.style.left = \"0px\";\n\n    if (className) {\n      this.container.classList.add(className);\n    }\n\n    // Show immediately if wanted\n    this.visible = false;\n\n    this.alignX = AlignX.Center;\n    this.alignY = AlignY.Center;\n\n    // Clockwise rotation angle in degrees. Rotates around center.\n    this.angle = 0;\n\n    if (visible) {\n      this.setVisible(true, false);\n    }\n\n    // For fadeIn/Out effects\n    const setOpacity = (t) => {\n      this.container.style.opacity = t;\n    };\n    this.opacityParam = new Autodesk.Viewing.Private.AnimatedParam(1.0, setOpacity, 0.5);\n\n    // By default, just delegate to viewer context menu. Edit2DContextMenu will take care\n    // that it is properly configured.\n    this.container.addEventListener('contextmenu', (e) => {\n\n      // Workaround for Mac: By default, LMV's context menu is responds to right mouse-button.\n      // On Mac, Ctrl + Left also triggers context menu events. These must be ignored here, because:\n      //    a) Consistency: LMV ignores them as well.\n      //    b) Conflicts:   When inserting a vertex, we don't want the ContextMenu to show up.\n      const isLeftButton = e.buttons == 1;\n      if (!isLeftButton) {\n        this.layer.viewer.triggerContextMenu(e);\n      }\n    });\n  }\n\n  dtor() {\n    this.setVisible(false);\n  }\n\n  setVisible(visible) {let autoUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (visible == this.visible) {\n      return;\n    }\n\n    if (visible) {\n      this.addToCanvas(autoUpdate);\n    } else {\n      this.removeFromCanvas();\n    }\n\n    this.visible = visible;\n  }\n\n  addToCanvas() {let autoUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    // Note: It's essential that we add it to viewer.canvasWrap instead of viewer.container:\n    //       ToolController listens to events on canvasWrap. Therefore, if we would add\n    //       it to viewer.container, all mouse events captured would never reach the ToolController\n    //       no matter whether the gizmo handles them or not.\n    this.layer.viewer.canvasWrap.appendChild(this.container);\n    this.layer.addCanvasGizmo(this);\n\n    // Make sure that position is correct\n    if (autoUpdate) {\n      this.update();\n    }\n  }\n\n  removeFromCanvas() {\n    this.layer.viewer.canvasWrap.removeChild(this.container);\n    this.layer.removeCanvasGizmo(this);\n  }\n\n  setAlignX(alignX) {\n    this.alignX = alignX;\n    this.update();\n  }\n\n  setAlignY(alignY) {\n    this.alignY = alignY;\n    this.update();\n  }\n\n  // @param {number} angle - Clockwise angle in degrees\n  //\n  // Note: Do not use 'position:absolute' in child html elements.\n  //       Otherwise, the content box will be empty and it will not rotate around anymore.\n  setRotation(angle) {\n    this.angle = angle;\n    this.update();\n  }\n\n  update() {\n    this.canvasPos.copy(this.layer.layerToCanvas(this.layerPos.x, this.layerPos.y));\n\n    const p = this.canvasPos;\n    const style = this.container.style;\n\n    // set left/top to gizmo position\n    const left = toPixels(p.x);\n    const top = toPixels(p.y);\n\n    // Choose translation offset in % based on X-alignment\n    let tx;\n    switch (this.alignX) {\n      case AlignX.Left:tx = '0%';break;\n      case AlignX.Center:tx = '-50%';break;\n      case AlignX.Right:tx = '-100%';break;\n    }\n\n    let ty;\n    switch (this.alignY) {\n      case AlignY.Top:ty = '0%';break;\n      case AlignY.Center:ty = '-50%';break;\n      case AlignY.Bottom:ty = '-100%';break;\n    }\n\n    // Update transform based on rotation angle and alignment\n    style.transform = `translate(${left}, ${top}) translate(${tx}, ${ty}) rotate(${this.angle}deg)`;\n  }\n\n  // Set position in layer coords\n  setPosition(x, y) {\n    this.layerPos.set(x, y);\n    this.update();\n  }\n\n  setClassEnabled(className, enabled) {\n    if (enabled) {\n      this.container.classList.add(className);\n    } else {\n      this.container.classList.remove(className);\n    }\n  }\n\n  // Selection state is managed using a css-class 'selected'.\n  // Note that this only has an effect if the css style used for the gizmo supports it.\n  setSelected(selected) {\n    this.setClassEnabled('selected', selected);\n  }\n\n  isSelected() {\n    return this.container.classList.contains('selected');\n  }\n\n  // Optional: Hover-effect for gizmos that can be clicked or dragged.\n  setHoverEnabled(enabled) {\n    this.setClassEnabled('enable-hover', enabled);\n  }\n\n  // Optional: Assign a name to gizmo and div element to facilitate debugging and testing.\n  setName(name) {\n    this.name = name;\n    this.container.id = name ? name : '';\n  }\n\n  // Change css opacity. If wanted, the change can be smoothly faded.\n  setOpacity(value, animate) {\n    if (animate) {\n      this.opacityParam.fadeTo(value);\n    } else {\n      this.opacityParam.setValue(value);\n    }\n  }\n}\n\n// Configure CanvasGizmo as a text label.\nconst initTextLabel = (gizmo) => {\n\n  // Use measure-tool styles by default\n  gizmo.container.classList.add('edit2d-label');\n  gizmo.container.classList.add('visible');\n\n  // Create textDiv child div\n  const _document = gizmo.getDocument();\n  gizmo.textDiv = _document.createElement('div');\n  gizmo.textDiv.classList.add('edit2d-label-text');\n  gizmo.container.appendChild(gizmo.textDiv);\n\n  // Add setText convenience function\n  gizmo.setText = function (str) {\n    this.textDiv.textContent = str;\n  }.bind(gizmo);\n};\n\n// Simple TextLabel bound to a fixed position in layer coords\nclass TextLabel extends CanvasGizmo {\n\n  constructor(layer, text, className) {\n    super(layer, true, className);\n    initTextLabel(this);\n  }\n\n};\n\n// A ShapeLabel is a text label whose anchor position is synchronized with the bbox center of a shape in a layer.\nclass ShapeLabel extends CanvasGizmo {\n\n  constructor(shape, layer) {let visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;let className = arguments.length > 3 ? arguments[3] : undefined;\n    super(layer, visible, className);\n\n    initTextLabel(this);\n\n    this.shape = shape;\n\n    // Can be set to hidden to temporarily hide the label\n    this.valueValid = true;\n\n    // Optional: Shift label by a couple of pixels.\n    this.pixelOffset = new THREE.Vector2();\n\n    this.update();\n  }\n\n  update() {\n    if (this.shape && this.valueValid) {\n      // Set it to visible (in case polygon was null before)\n      this.container.style.visibility = 'visible';\n\n      if (this.shape.isPolyline()) {\n        const edgeCount = this.shape.getEdgeCount(0);\n        // For a start, simply position the label on the segment roughly in the middle of the polyline\n        const edgeToLabel = Math.floor(edgeCount / 2);\n        if (this.shape.edgeIndexValid(edgeToLabel)) {\n          // Set layer position to center point of the segment.\n          this.shape.getPointOnEdge(edgeToLabel, 0.5, 0, this.layerPos);\n        }\n      } else\n      {\n        // For a start, simply use the bbox center of the polygon. In some cases, this might end up outside the\n        // polygon, so we may consider something smarter later.\n        this.shape.computeBBox();\n        this.shape.bbox.getCenter(this.layerPos);\n      }\n\n      // Optional: Shift by a few pixels\n      if (this.pixelOffset) {\n        const toUnits = this.layer.getUnitsPerPixel();\n        const shiftX = this.pixelOffset.x * toUnits;\n        const shiftY = this.pixelOffset.y * toUnits;\n        this.layerPos.x += shiftX;\n        this.layerPos.y += shiftY;\n      }\n\n      super.update();\n    } else {\n      this.container.style.visibility = 'hidden';\n    }\n  }\n\n  setShape(shape) {\n    this.shape = shape;\n    this.update();\n  }\n}\n\n// Only works for shapes with getLength() function\nclass LengthLabel extends ShapeLabel {\n\n  // @param {Polyline}    polyline\n  // @param {EditLayer}   layer\n  // @param {UnitHandler} unitHandler - unitHandler.areaToString() is required to define how to display area values as string.\n  // @param {bool}        [visible]\n  constructor(polyline, layer, unitHandler) {let visible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    super(polyline, layer, visible);\n    this.unitHandler = unitHandler;\n  }\n\n  update() {\n    // Get shape length (if shape supports it)\n    const hasLength = this.shape && this.shape.getLength;\n    const length = hasLength && this.shape.getLength(this.unitHandler.measureTransform);\n\n    // Hide label if we don't have a well-defined length.\n    // We also hide it if length is 0.0, because the shape cannot be visible anyway.\n    this.valueValid = Boolean(length);\n\n    if (this.valueValid) {\n      const text = this.unitHandler.lengthToString(length);\n      this.setText(text);\n    }\n\n    // Let base class update position\n    super.update();\n  }\n}\n\n// Only works for shapes with getArea() function\nclass AreaLabel extends ShapeLabel {\n\n  // @param {Polygon}     polygon\n  // @param {EditLayer}   layer\n  // @param {UnitHandler} unitHandler - unitHandler.areaToString() is required to define how to display area values as string.\n  // @param {bool}        [visible]\n  constructor(polygon, layer, unitHandler) {let visible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    super(polygon, layer, visible);\n    this.unitHandler = unitHandler;\n    this.update(); // update with proper unitHandler\n  }\n\n  update() {\n    // Don't display until a unitHandler is set\n    if (!this.unitHandler) {\n      return;\n    }\n\n    // Handle PolyBase with self-intersections: Display an error indicator in this case.\n    if (this.shape && this.shape.isSelfIntersecting && this.shape.isSelfIntersecting()) {\n\n      // Show an error indicator instead\n      this.setText(av.i18n.t('Invalid shape'));\n\n      // Mark area label as error\n      this.container.classList.add('error-indicator');\n\n      // Mark sure error indicator is displayed\n      this.valueValid = true;\n      super.update();\n\n      return;\n    } else {\n      // Make sure that error indicator is toggled off\n      this.container.classList.remove('error-indicator');\n    }\n\n    // Get shape area (if shape supports it)\n    let hasArea = this.shape && this.shape.getArea;\n    let area = hasArea && this.shape.getArea(this.unitHandler.measureTransform);\n\n    // Hide label if we don't have a well-defined area.\n    // We also hide it if area is 0.0, because the shape cannot be visible anyway.\n    this.valueValid = Boolean(area);\n\n    if (this.valueValid) {\n      const text = this.unitHandler.areaToString(area);\n      this.setText(text);\n    }\n\n    // Let base class update position\n    super.update();\n  }\n}\n\n// A html element for which position and rotation is aligned with an edge\nclass EdgeGizmo extends CanvasGizmo {\n\n  // @param {EditLayer} layer\n  // @param {bool} visible\n  constructor(layer) {let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;let className = arguments.length > 2 ? arguments[2] : undefined;\n    super(layer, visible, className);\n\n    this.posA = new THREE.Vector2();\n    this.posB = new THREE.Vector2();\n\n    // Indicates if a position has been set. If not, we temporarily hide the gizmo. If the gizmo is\n    // attached to an edge, this flag is set automatically.\n    this.posValid = false;\n\n    // Temp vectors used in update\n    this.edgeDir = new THREE.Vector2();\n\n    // Optional: Positions can be synchronized with an edge of a polygon or polyline\n    this.poly = null;\n    this.loopIndex = 0;\n    this.edgeIndex = 0;\n\n    // Use measure-length css style by default\n    this.container.classList.add('edge-gizmo');\n\n    // Optional: By default, an EdgeGizmo is always placed on a segment, i.e., the gizmo will follow a curve for arc segments.\n    //           If this flag is true, the gizmo is always placed on the direct line connection.\n    this.ignoreArcs = false;\n\n    // Optional: If specified, this limits the size of the gizmo relative to the edge length on screen:\n    // We hide the gizmo if it exceeds x * edgeLength on screen.\n    this.maxRelativeLength = undefined; // in [0,1]\n  }\n\n  // If a poly is set, the gizmo is automatically synchronized with the edge.\n  // As long as the poly is visible in the same layer, the edge is automatically kept in sync with the edge.\n  //\n  //  @param {PolyBase} poly      - polygon or polyline containing the edge that we want to attach to. If null, positions can be set manually.\n  //  @param {number} edgeIndex   - edgeIndex in poly. If not valid, gizmo is hidden.\n  //  @param {number} [loopIndex] - loopIndex in poly. 0 by default\n  attachToEdge(poly, edgeIndex) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.poly = poly;\n    this.edgeIndex = edgeIndex;\n    this.loopIndex = loopIndex;\n    this.update();\n  }\n\n  detachFromEdge() {\n    this.poly = null;\n    this.edgeIndex = -1;\n    this.loopIndex = -1;\n    this.posValid = false; // hide unless a position is explicitly set\n    this.update();\n  }\n\n  edgeValid() {\n    return this.poly && this.poly.edgeIndexValid(this.edgeIndex, this.loopIndex);\n  }\n\n  update() {\n\n    // If a polygon is set, obtain positions automatically from it - or hide gizmo if edge does not exist anymore\n    if (this.poly && this.poly.edgeIndexValid(this.edgeIndex, this.loopIndex)) {\n      this.poly.getEdge(this.edgeIndex, this.posA, this.posB, this.loopIndex);\n      this.posValid = true;\n    } else {\n      // This may happen if host polygon was modified and the edge does not exist anymore.\n      this.posValid = false;\n    }\n\n    // If edge is invalid or too small on screen, just hide the gizmo\n    let show = this._shouldBeShown();\n    this.container.style.visibility = show ? 'visible' : 'hidden';\n    if (!show) {\n      return;\n    }\n\n    // Center gizmo at edge center\n    if (this.ignoreArcs) {\n      // Place on the line segment\n      _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__.PolyBase.prototype.getPointOnEdge.call(this.poly, this.edgeIndex, 0.5, this.loopIndex, this.layerPos);\n    } else {\n      // Place on line segment or arc - depending on actual edge type\n      this.poly.getPointOnEdge(this.edgeIndex, 0.5, this.loopIndex, this.layerPos);\n    }\n\n    // Set rotation angle\n    this._updateRotation();\n\n    super.update();\n  }\n\n  // Check if the gizmo should be shown: We hide it if the edge is too small or if the edge does not exist at all.\n  _shouldBeShown() {\n\n    // Positions must be properly set - either automatically from an attached edge or manually using setEdge()\n    if (!this.posValid) {\n      return false;\n    }\n\n    // Show/Hide gizmo depending on zoom:\n    // Gizmo has constant screen-size. So, we hide it if the screen-size of the edge becomes too small.\n    if (this.maxRelativeLength) {\n      const aScreen = this.layer.layerToCanvas(this.posA.x, this.posA.y);\n      const bScreen = this.layer.layerToCanvas(this.posB.x, this.posB.y);\n      const edgeLengthScreen = aScreen.distanceTo(bScreen);\n      const maxAllowedPixels = edgeLengthScreen * this.maxRelativeLength;\n      const _window = this.getWindow();\n      const width = parseFloat(_window.getComputedStyle(this.container).width);\n      return width < maxAllowedPixels;\n    }\n    return true;\n  }\n\n  // Set style rotation to align gizmo along edge direction, so that 'width' is along the edge\n  _updateRotation() {\n\n    // Compute counterClockwise angle in radians that rotates the positive x-axis to the edge direction a->b\n    // It's important to compute the angle in canvas space here. If we would compute it in layer space,\n    // the angle orientation of the result may be inverted if the layerToCanvas() transform inverts orientation (e.g. by flipped y-axis)\n    const aScreen = this.layer.layerToCanvas(this.posA.x, this.posA.y);\n    const bScreen = this.layer.layerToCanvas(this.posB.x, this.posB.y);\n\n    const dir = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.getEdgeDirection(aScreen, bScreen, this.edgeDir);\n    let angle = Math.atan2(dir.y, dir.x);\n\n    // Avoid upside-down rotation: Flip by 180 degrees if b is left of a. This is import if gizmo contains text.\n    if (dir.x < 0) {\n      angle += Math.PI;\n    }\n\n    // Convert angle to clockwise degrees and apply it to style\n    // Just set the angle here, but don't call setAngle, becaue we don't want to trigger auto-update.\n    this.angle = THREE.Math.radToDeg(angle);\n  }\n}\n\nclass EdgeMoveGizmo extends EdgeGizmo {\n\n  constructor(layer, name) {let visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;let className = arguments.length > 3 ? arguments[3] : undefined;\n    super(layer, visible, className);\n\n    this.setName(name);\n    this.container.classList.add('edge-move-gizmo');\n\n    // We place EdgeMoveGizmos always directly on the straight lines. In this way, edge moving\n    // will work in the same way - no matter whether a segment is an arc or not.\n    this.ignoreArcs = true;\n\n    // Hide gizmo if its screenWidth exceeds 0.3 * edgeLength\n    this.maxRelativeLength = 0.3; // in [0,1]\n  }\n}\n\n// An EdgeGizmo to display text\nclass EdgeLabel extends EdgeGizmo {\n\n  constructor(layer) {let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    super(layer, visible);\n    initTextLabel(this);\n\n    // Hide label if it would exceed the edge length\n    this.maxRelativeLength = 1.0;\n  }\n}\n\nclass VertexGizmo extends CanvasGizmo {\n\n  // @param {number}  x,y       - Position in layer coords\n  // @param {string}  id        - id string used to tag shapes that represent this gizmo\n  constructor(layer, x, y, name, className) {\n    super(layer, true, className);\n    this.setPosition(x, y);\n    this.setName(name);\n\n    this.pos = new THREE.Vector2();\n\n    // Optional: Positions can be synchronized with a vertex of a polygon or polyline\n    this.poly = null;\n    this.loopIndex = -1;\n    this.vertexIndex = -1;\n\n    this.container.classList.add('vertex-gizmo');\n  }\n\n  // If a poly is set, the gizmo is automatically synchronized with the vertex.\n  // As long as the poly is visible in the same layer, the vertex gizmo is automatically kept in sync with the vertex.\n  //\n  //  @param {PolyBase} poly      - polygon or polyline containing the vertex that we want to attach to. If null, positions can be set manually.\n  //  @param {number} vertexIndex   - vertexIndex in poly. If not valid, gizmo is hidden.\n  //  @param {number} [loopIndex] - loopIndex in poly. 0 by default\n  attachToVertex(poly, vertexIndex) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.poly = poly;\n    this.vertexIndex = vertexIndex;\n    this.loopIndex = loopIndex;\n    this.update();\n  }\n\n  detachFromVertex() {\n    this.poly = null;\n    this.vertexIndex = -1;\n    this.loopIndex = -1;\n    this.posValid = false; // hide unless a position is explicitly set\n    this.update();\n  }\n\n  update() {\n    // Gizmo is not attached to a polygon. Just update according to the initial position.\n    if (!this.poly) {\n      super.update();\n      return;\n    }\n\n    // If a polygon is set, obtain positions automatically from it - or hide gizmo if vertex does not exist anymore\n    if (this.poly.indexValid(this.vertexIndex, this.loopIndex)) {\n      this.poly.getPoint(this.vertexIndex, this.loopIndex, this.pos);\n      this.posValid = true;\n    } else {\n      // This may happen if host polygon was modified and the vertex does not exist anymore.\n      this.posValid = false;\n    }\n\n    // If edge is invalid, just hide the gizmo\n    let show = this.posValid;\n\n    this.container.style.visibility = show ? 'visible' : 'hidden';\n\n    if (!show) {\n      return;\n    }\n\n    this.layerPos.set(this.pos.x, this.pos.y);\n\n    super.update();\n  }\n}\n\n// A Label filter decides for which shapes we display a label\nclass LabelFilter {\n\n  constructor() {}\n\n  // If false, we don't need to acquire a label at all.\n  accepts(shape, text) {\n    return true;\n  }\n};\n\n// Get shape width in screen-pixels\nconst getShapeWidth = (shape, layer) => {\n  // get shape size in screen-pixels\n  shape.updateBBox();\n  const bbox = shape.bbox;\n  const shapeWidth = bbox.max.x - bbox.min.x;\n  return shapeWidth * layer.getPixelsPerUnit() * shapeWidth;\n};\n\n// By default, we hide labels if text is empty or if the shape size on screen falls beyond a pixel threshold\nclass DefaultLabelFilter extends LabelFilter {\n\n  // @param {number} minWidth - minimum pixel width a shape must have to receive a label\n  constructor() {let minWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    super();\n    this.minWidth = minWidth;\n  }\n\n  // Accept shape if text is not empty and its screen-width is big enough.\n  accepts(shape, text, layer) {\n    const width = getShapeWidth(shape, layer);\n    return Boolean(text) && width >= this.minWidth;\n  }\n}\n\n// A LabelStyle rule allows to apply css style modifications on a label, e.g., depending on screen size\nclass LabelStyleRule {\n\n  constructor() {}\n\n  // Note: Labels may be reused for different shapes. So, make sure that the style parameters are\n  //       not just modified for some subset of shapes, but reset for others.\n  apply(label, shape, layer) {}\n};\n\n// Fades out based on label size\nclass FadeOutStyleRule extends LabelStyleRule {\n\n  // @param {number} rangeStart - shape width in screen-pixels at which the label starts to fade-in\n  // @param {number} rangeEnd   - shape width in screen-pixels at which the label is fully opaque.\n  constructor() {let rangeStart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;let rangeEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 14;\n    super();\n    this.rangeStart = rangeStart;\n    this.rangeEnd = rangeEnd;\n  }\n\n  apply(label, shape, layer) {\n\n    // compute opacity from shape screen-width\n    const width = getShapeWidth(shape, layer);\n    const t = (width - this.rangeStart) / (this.rangeEnd - this.rangeStart);\n    const opacity = THREE.Math.clamp(t, 0, 1);\n\n    label.container.style.opacity = opacity;\n  }\n};\n\n// A ShapeLabelRule maintains a set of labels that is automatically synced with the shapes in a layer.\n// It implements the CanvasGizmoBase to update the set of maintained labels.\nclass ShapeLabelRule {\n\n  // @param {EditLayer}               layer            - Labels are shown (and synchronized) with the content of this layer.\n  // @param {function(Shape)=>string} shapeToLabelText - A mapping that defines which text to display for a shape. If null, no label is created.\n  // @param {LabelFilter}             [filter]         - Defines which labels to show. See DefaultLabelFilter for default behavior.\n  // @param {LabelStyleRule}          [styleRule]      - Defines how label style is modified dynamically. (By default, we fade-out based on label size)\n  constructor(layer, shapeToLabelText) {let labelFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new DefaultLabelFilter();let styleRule = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new FadeOutStyleRule();\n    this.layer = layer;\n    this.shapeToLabelText = shapeToLabelText;\n\n    // All labels that we created.\n    this.labels = {}; // {shapeId: ShapeLabel}\n\n    this.layer.addCanvasGizmo(this);\n    this.visible = true;\n    this.layer.update();\n\n    this.filter = labelFilter;\n    this.styleRule = styleRule;\n  }\n\n  // Replace the rule to define label texts.\n  //   @param {function(Shape)=>string} shapeToLabelText - A mapping that defines which text to display for a shape. If null, no label is created.\n  setTextRule(shapeToLabelText) {\n    this.shapeToLabelText = shapeToLabelText;\n    this.update();\n  }\n\n  setVisible(visible) {\n    if (visible === this.visible) {\n      return;\n    }\n\n    if (visible) {\n      // Note: It's essential that we add 'this' first and all maintained labels behind. In this way, this gizmo is updated first to\n      //       configure all labels - followed by the update calls for all active labels in use.\n      this.layer.addCanvasGizmo(this);\n      this.update();\n    } else {\n      this.clearLabels();\n      this.layer.removeCanvasGizmo(this);\n    }\n    this.visible = visible;\n  }\n\n  dtor() {\n    // Make sure that we don't leave any of our labels in the layer\n    this.setVisible(false);\n  }\n\n  removeLabelFromShape(shape) {\n    if (this.labels[shape.id]) {\n      this.clearLabel(this.labels[shape.id]);\n      delete this.labels[shape.id];\n    }\n  }\n\n  clearLabel(label) {\n    label.setShape(null);\n    label.setVisible(false);\n  }\n\n  // Hide + release all current labels, so that we can re-acquire them based on latest Layer state.\n  clearLabels() {\n    Object.values(this.labels).forEach((label) => {\n      this.clearLabel(label);\n    });\n\n    this.labels = {};\n  }\n\n  // Create new label or get it from cache\n  acquireLabel(shape) {\n    let label = this.labels[shape.id];\n\n    if (label) {\n      return label;\n    }\n\n    label = new ShapeLabel(null, this.layer);\n    label.setShape(shape);\n\n    this.labels[shape.id] = label;\n\n    return label;\n  }\n\n  update() {\n    const shapes = this.layer.shapes;\n    for (let i = 0; i < shapes.length; i++) {\n\n      const shape = shapes[i];\n\n      // Get label text\n      const text = this.shapeToLabelText(shape);\n\n      // Check if we want to display a label for this shape\n      if (this.filter && !this.filter.accepts(shape, text, this.layer)) {\n        this.removeLabelFromShape(shape);\n        continue;\n      }\n\n      // Configure label\n      const label = this.acquireLabel(shape);\n      label.setText(text);\n      label.setVisible(true);\n\n      // Apply optional custom style rule\n      this.styleRule && this.styleRule.apply(label, shape, this.layer);\n    }\n\n    // Clear labels that their shapes were removed.\n    // Needed when autoUpdate is disabled.\n    Object.values(this.labels).forEach((label) => {\n      // Shape no longer exists\n      if (shapes.indexOf(label.shape) === -1) {\n        this.removeLabelFromShape(label.shape);\n      }\n    });\n  }\n}\n\n// A ShapeToolTip is a label that shows up when hovering a shape.\n// By default, it appears a few pixels above the top-right corner of a shape's bbox.\nclass ShapeToolTip extends CanvasGizmoBase {\n\n  // @param {EditLayer}               layer - Tooltip will appear for all shapes in the given layer.\n  // @param {function(shape)=>string} getText - Function to define the text for a given shape\n  constructor(layer) {let getText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super();\n\n    this.layer = layer;\n    this.textCb = getText;\n    this.viewer = this.layer.viewer;\n\n    // track latest mouse position in layer coords (init on first mouse move)\n    this.mousePos = null;\n\n    // distance between tooltip and shape bbox\n    this.distanceToBox = 5; // in pixels\n\n    // Create tooltip div\n    this.container = this.getDocument().createElement('div');\n    this.container.classList.add('adsk-control-tooltip');\n\n    // Add div to viewer canvas container and layer\n    this.viewer.canvasWrap.appendChild(this.container);\n\n    // Update if layer changed\n    this.layer.addCanvasGizmo(this);\n\n    // Update if mouse moved\n    this.onMouseMoved = this.onMouseMoved.bind(this);\n    this.viewer.canvasWrap.addEventListener('mousemove', this.onMouseMoved);\n\n    this.layer.updateCanvasGizmos();\n  }\n\n  dtor() {\n    this.layer.removeCanvasGizmo();\n    this.viewer.canvasWrap.removeEventListener('mousemove', this.onMouseMoved);\n    this.viewer.canvasWrap.removeChild(this.container);\n  }\n\n  // Set callback that defines which text to display for each shape. Returning '' or null will hide the tooltip.\n  // @param {function(shape)=>string} getText - Function to define the text for a given shape\n  setTextCallback(getText) {\n    this.textCb = getText;\n    this.update();\n  }\n\n  onMouseMoved(event) {\n\n    // Add canvas coords to event\n    this.viewer.toolController.__clientToCanvasCoords(event);\n\n    // Track mouse position\n    this.mousePos = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n\n    this.update();\n  }\n\n  update() {\n\n    // If a textCb is set, check shape under mouse\n    const shape = this.mousePos && this.textCb && this.layer.hitTest(this.mousePos.x, this.mousePos.y);\n\n    // Choose label text\n    const text = shape && this.textCb(shape);\n\n    // Apply text\n    this.container.textContent = text || '';\n\n    // Stop here if nothing to display\n    if (!text) {\n      this.container.style.visibility = 'hidden';\n      return;\n    }\n\n    // Show label\n    this.container.style.visibility = 'visible';\n\n    // Get top-right corner of bbox\n    shape.updateBBox(); // Make sure bbox is up-to-date\n    const corner = shape.bbox.max;\n\n    // Get anchor in canvas coords\n    const anchor = this.layer.layerToCanvas(corner.x, corner.y);\n\n    // Add some pixels y-offset\n    anchor.y -= this.distanceToBox;\n\n    // get canvas size\n    const width = this.viewer.canvas.width;\n    const height = this.viewer.canvas.height;\n\n    // Update tooltip position\n    this.container.style.right = width - anchor.x + 'px';\n    this.container.style.bottom = height - anchor.y + 'px';\n\n    this.container.style.left = 'auto';\n    this.container.style.top = 'auto';\n  }\n}\n\n// Purpose:\n// There is no efficient and simple way to ask a div whether it is under mouse or not.\n// The most reliable way is document.elementFromPoint(), but it is rather expensive.\n// Therefore, we don't want to do it for each and every gizmo. Instead, GizmoManager tracks\n// which object is under mouse and is generally used to check which gizmo is at mouse position.\nclass GizmoManager {\n\n  constructor() {\n    // div element at mouse position\n    this.elemUnderMouse = null;\n  }\n\n  // Must be triggered on mouse events.\n  // @param {MouseEvent}\n  update(e) {\n    this.elemUnderMouse = document.elementFromPoint(e.clientX, e.clientY);\n  }\n\n  // @param {CanvasGizmo}\n  isUnderMouse(gizmo) {\n    return gizmo.container && gizmo.container === this.elemUnderMouse;\n  }\n\n  // Returns the index of the gizmo that matches with the element under mouse.\n  // Result is -1 if none of the gizmos matches.\n  //  @param {CanvasGizmo[]} gizmo\n  getGizmoIndex(gizmos) {\n    return gizmos.findIndex((g) => this.isUnderMouse(g));\n  }\n}\n\n// Display dashed lines to connect start/end of arc segments. Used by PolygonEditTool.\n// It updates itself automatically whenever the shape changed.\nclass ArcEdgeGizmo {\n  constructor(layer, gizmoLayer) {\n\n    this.layer = layer;\n    this.gizmoLayer = gizmoLayer;\n\n    // One Line shape per arc segment in the host shape\n    this.shapes = [];\n\n    this.visibility = false;\n    this.setVisible(true);\n\n    // Optional: Display one edge in another color\n    this.highlightColor = undefined;\n    this.highlightIndex = -1; // must be a valid edge index in this.poly\n    this.highlightLoopIndex = -1; // must be a valid loop index in this.poly\n  }\n\n  dtor() {\n    // Just make sure it is invisible, so that shapes are cleared and\n    // gizmo is removed from GizmoLayer.\n    this.setVisible(false);\n  }\n\n  // Set the shape for which we display lines\n  setPoly(poly) {\n    if (poly !== this.poly) {\n      this.poly = poly;\n      this.clearEdgeHighlighting();\n      this.update();\n    }\n  }\n\n  setVisible(visible) {\n\n    // Do nothing if there's no change\n    if (this.visible === visible) {\n      return;\n    }\n    this.visible = visible;\n\n    // add/remove from layer\n    if (visible) {\n      this.layer.addCanvasGizmo(this);\n    } else {\n      this.layer.removeCanvasGizmo(this);\n    }\n    this.update();\n  }\n\n  clearShapes() {\n    this.shapes.forEach((s) => this.gizmoLayer.removeShape(s));\n    this.shapes = [];\n  }\n\n  edgeShapeName(index, loopIndex) {\n    return 'ArcEdgeGizmo_' + loopIndex + '_' + index;\n  }\n\n  // Create a line shape that connects start/end vertex of segment i in poly.\n  _addEdge(index, loopIndex) {\n\n    // get edge\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    this.poly.getEdge(index, a, b, loopIndex);\n\n    // Create a line from it\n    const line = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__.Polyline([a, b]);\n    line.name = this.edgeShapeName(index, loopIndex);\n\n    // Configure line style\n    line.style.lineStyle = 11; // short dashes\n    line.style.lineWidth = this.poly.style.lineWidth / 2.0;\n    line.style.lineAlpha = this.poly.style.lineAlha / 2.0;\n\n    // Apply optional edge highlighting color\n    if (index == this.highlightIndex && this.highlightColor) {\n      line.style.lineColor = this.highlightColor;\n    }\n\n    this.gizmoLayer.addShape(line);\n    this.shapes.push(line);\n  }\n\n  clearEdgeHighlighting() {\n\n    if (this.highlightIndex === -1) {\n      return;\n    }\n\n    this.highlightColor = null;\n    this.highlightIndex = -1;\n    this.highlight;\n    this.update();\n  }\n\n  // Assign different\n  setEdgeHighlighted(index, loopIndex, color) {\n\n    // Only do work if needed\n    if (index === this.highlightIndex && color === this.highlightColor) {\n      return;\n    }\n\n    this.highlightColor = color;\n    this.highlightIndex = index;\n    this.highlightLoopIndex = loopIndex;\n    this.update();\n  }\n\n  // Updates the edges for the given Path shape\n  update() {\n\n    this.clearShapes();\n\n    // Stop if there are no arcs\n    if (!this.visible || !this.poly || !this.poly.isPath()) {\n      return;\n    }\n\n    // For each loop...\n    for (let l = 0; l < this.poly.loopCount; l++) {\n\n      // For each edge...\n      const edgeCount = this.poly.getEdgeCount(l);\n      for (let i = 0; i < edgeCount; i++) {\n\n        // Add line if it is an arc\n        const isArc = this.poly.isArc(i, l);\n        if (isArc) {\n          this._addEdge(i, l);\n        }\n      }\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9DYW52YXNHaXptby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNxQztBQUNnQjs7QUFFckQ7QUFDQSxNQUFNRyxRQUFRLEdBQUdBLENBQUNDLEdBQUcsS0FBSztFQUN0QixPQUFPQSxHQUFHLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSTtBQUNoQyxDQUFDOztBQUVNLE1BQU1DLE1BQU0sR0FBRztFQUNsQkMsSUFBSSxFQUFJLENBQUM7RUFDVEMsTUFBTSxFQUFFLENBQUM7RUFDVEMsS0FBSyxFQUFHO0FBQ1osQ0FBQzs7QUFFTSxNQUFNQyxNQUFNLEdBQUc7RUFDbEJDLEdBQUcsRUFBSyxDQUFDO0VBQ1RILE1BQU0sRUFBRSxDQUFDO0VBQ1RJLE1BQU0sRUFBRTtBQUNaLENBQUM7O0FBRUQsTUFBTUMsRUFBRSxHQUFHQyxRQUFRLENBQUNDLE9BQU87O0FBRTNCO0FBQ08sTUFBTUMsZUFBZSxDQUFDO0VBQ3pCQyxXQUFXQSxDQUFBLEVBQUcsQ0FBQzs7RUFFZjtFQUNBQyxNQUFNQSxDQUFBLEVBQUcsQ0FBQztBQUNkOztBQUVBTCxFQUFFLENBQUNNLGtCQUFrQixDQUFDQyxJQUFJLENBQUNKLGVBQWUsQ0FBQ0ssU0FBUyxDQUFDOztBQUVyRDtBQUNPLE1BQU1DLFdBQVcsU0FBU04sZUFBZSxDQUFDO0VBQzdDQyxXQUFXQSxDQUFDTSxLQUFLLEVBQTZCLEtBQTNCQyxPQUFPLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUksS0FBRUcsU0FBUyxHQUFBSCxTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0lBQ3hDLEtBQUssQ0FBQyxDQUFDOztJQUVQLElBQUksQ0FBQ0osS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ00sZ0JBQWdCLENBQUNOLEtBQUssQ0FBQ08sYUFBYSxDQUFDOztJQUUxQztJQUNBLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7O0lBRW5DO0lBQ0EsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUYsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQzs7SUFFcEM7SUFDQSxNQUFNRSxTQUFTLEdBQUcsSUFBSSxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNDLFNBQVMsR0FBR0YsU0FBUyxDQUFDRyxhQUFhLENBQUMsS0FBSyxDQUFDOztJQUUvQztJQUNBLElBQUksQ0FBQ0QsU0FBUyxDQUFDRSxLQUFLLENBQUNDLFFBQVEsR0FBRyxVQUFVOztJQUUxQztJQUNBLElBQUksQ0FBQ0gsU0FBUyxDQUFDRSxLQUFLLENBQUNFLGVBQWUsR0FBRyxTQUFTO0lBQ2hELElBQUksQ0FBQ0osU0FBUyxDQUFDRSxLQUFLLENBQUNHLEdBQUcsR0FBRyxLQUFLO0lBQ2hDLElBQUksQ0FBQ0wsU0FBUyxDQUFDRSxLQUFLLENBQUNJLElBQUksR0FBRyxLQUFLOztJQUVqQyxJQUFJZixTQUFTLEVBQUU7TUFDWCxJQUFJLENBQUNTLFNBQVMsQ0FBQ08sU0FBUyxDQUFDQyxHQUFHLENBQUNqQixTQUFTLENBQUM7SUFDM0M7O0lBRUE7SUFDQSxJQUFJLENBQUNKLE9BQU8sR0FBRyxLQUFLOztJQUVwQixJQUFJLENBQUNzQixNQUFNLEdBQUd4QyxNQUFNLENBQUNFLE1BQU07SUFDM0IsSUFBSSxDQUFDdUMsTUFBTSxHQUFHckMsTUFBTSxDQUFDRixNQUFNOztJQUUzQjtJQUNBLElBQUksQ0FBQ3dDLEtBQUssR0FBRyxDQUFDOztJQUVkLElBQUl4QixPQUFPLEVBQUU7TUFDVCxJQUFJLENBQUN5QixVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUNoQzs7SUFFQTtJQUNBLE1BQU1DLFVBQVUsR0FBR0EsQ0FBQUMsQ0FBQyxLQUFJO01BQ3BCLElBQUksQ0FBQ2QsU0FBUyxDQUFDRSxLQUFLLENBQUNhLE9BQU8sR0FBR0QsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsSUFBSSxDQUFDRSxZQUFZLEdBQUcsSUFBSXZDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDdUMsT0FBTyxDQUFDQyxhQUFhLENBQUMsR0FBRyxFQUFFTCxVQUFVLEVBQUUsR0FBRyxDQUFDOztJQUVwRjtJQUNBO0lBQ0EsSUFBSSxDQUFDYixTQUFTLENBQUNtQixnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQ0MsQ0FBQyxLQUFLOztNQUVsRDtNQUNBO01BQ0E7TUFDQTtNQUNBLE1BQU1DLFlBQVksR0FBSUQsQ0FBQyxDQUFDRSxPQUFPLElBQUksQ0FBRTtNQUNyQyxJQUFJLENBQUNELFlBQVksRUFBRTtRQUNmLElBQUksQ0FBQ25DLEtBQUssQ0FBQ3FDLE1BQU0sQ0FBQ0Msa0JBQWtCLENBQUNKLENBQUMsQ0FBQztNQUMzQztJQUNKLENBQUMsQ0FBQztFQUNOOztFQUVBSyxJQUFJQSxDQUFBLEVBQUc7SUFDSCxJQUFJLENBQUNiLFVBQVUsQ0FBQyxLQUFLLENBQUM7RUFDMUI7O0VBRUFBLFVBQVVBLENBQUN6QixPQUFPLEVBQXFCLEtBQW5CdUMsVUFBVSxHQUFBdEMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtJQUNqQyxJQUFJRCxPQUFPLElBQUksSUFBSSxDQUFDQSxPQUFPLEVBQUU7TUFDekI7SUFDSjs7SUFFQSxJQUFJQSxPQUFPLEVBQUU7TUFDVCxJQUFJLENBQUN3QyxXQUFXLENBQUNELFVBQVUsQ0FBQztJQUNoQyxDQUFDLE1BQU07TUFDSCxJQUFJLENBQUNFLGdCQUFnQixDQUFDLENBQUM7SUFDM0I7O0lBRUEsSUFBSSxDQUFDekMsT0FBTyxHQUFHQSxPQUFPO0VBQzFCOztFQUVBd0MsV0FBV0EsQ0FBQSxFQUFvQixLQUFuQkQsVUFBVSxHQUFBdEMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtJQUN6QjtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0YsS0FBSyxDQUFDcUMsTUFBTSxDQUFDTSxVQUFVLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUM5QixTQUFTLENBQUM7SUFDeEQsSUFBSSxDQUFDZCxLQUFLLENBQUM2QyxjQUFjLENBQUMsSUFBSSxDQUFDOztJQUUvQjtJQUNBLElBQUlMLFVBQVUsRUFBRTtNQUNaLElBQUksQ0FBQzdDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCO0VBQ0o7O0VBRUErQyxnQkFBZ0JBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQzFDLEtBQUssQ0FBQ3FDLE1BQU0sQ0FBQ00sVUFBVSxDQUFDRyxXQUFXLENBQUMsSUFBSSxDQUFDaEMsU0FBUyxDQUFDO0lBQ3hELElBQUksQ0FBQ2QsS0FBSyxDQUFDK0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0VBQ3RDOztFQUVBQyxTQUFTQSxDQUFDekIsTUFBTSxFQUFFO0lBQ2QsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDNUIsTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUFzRCxTQUFTQSxDQUFDekIsTUFBTSxFQUFFO0lBQ2QsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDN0IsTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQXVELFdBQVdBLENBQUN6QixLQUFLLEVBQUU7SUFDZixJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUM5QixNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQUEsTUFBTUEsQ0FBQSxFQUFHO0lBQ0wsSUFBSSxDQUFDZ0IsU0FBUyxDQUFDd0MsSUFBSSxDQUFDLElBQUksQ0FBQ25ELEtBQUssQ0FBQ29ELGFBQWEsQ0FBQyxJQUFJLENBQUM1QyxRQUFRLENBQUM2QyxDQUFDLEVBQUUsSUFBSSxDQUFDN0MsUUFBUSxDQUFDOEMsQ0FBQyxDQUFDLENBQUM7O0lBRS9FLE1BQU1DLENBQUMsR0FBRyxJQUFJLENBQUM1QyxTQUFTO0lBQ3hCLE1BQU1LLEtBQUssR0FBRyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0UsS0FBSzs7SUFFbEM7SUFDQSxNQUFNSSxJQUFJLEdBQUd4QyxRQUFRLENBQUMyRSxDQUFDLENBQUNGLENBQUMsQ0FBQztJQUMxQixNQUFNbEMsR0FBRyxHQUFJdkMsUUFBUSxDQUFDMkUsQ0FBQyxDQUFDRCxDQUFDLENBQUM7O0lBRTFCO0lBQ0EsSUFBSUUsRUFBRTtJQUNOLFFBQU8sSUFBSSxDQUFDakMsTUFBTTtNQUNkLEtBQUt4QyxNQUFNLENBQUNDLElBQUksQ0FBSXdFLEVBQUUsR0FBRyxJQUFJLENBQUU7TUFDL0IsS0FBS3pFLE1BQU0sQ0FBQ0UsTUFBTSxDQUFFdUUsRUFBRSxHQUFHLE1BQU0sQ0FBRTtNQUNqQyxLQUFLekUsTUFBTSxDQUFDRyxLQUFLLENBQUdzRSxFQUFFLEdBQUcsT0FBTyxDQUFFO0lBQ3RDOztJQUVBLElBQUlDLEVBQUU7SUFDTixRQUFPLElBQUksQ0FBQ2pDLE1BQU07TUFDZCxLQUFLckMsTUFBTSxDQUFDQyxHQUFHLENBQUtxRSxFQUFFLEdBQUcsSUFBSSxDQUFLO01BQ2xDLEtBQUt0RSxNQUFNLENBQUNGLE1BQU0sQ0FBRXdFLEVBQUUsR0FBRyxNQUFNLENBQUc7TUFDbEMsS0FBS3RFLE1BQU0sQ0FBQ0UsTUFBTSxDQUFFb0UsRUFBRSxHQUFHLE9BQU8sQ0FBRTtJQUN0Qzs7SUFFQTtJQUNBekMsS0FBSyxDQUFDMEMsU0FBUyxHQUFJLGFBQVl0QyxJQUFLLEtBQUlELEdBQUksZUFBY3FDLEVBQUcsS0FBSUMsRUFBRyxZQUFXLElBQUksQ0FBQ2hDLEtBQU0sTUFBSztFQUNuRzs7RUFFQTtFQUNBa0MsV0FBV0EsQ0FBQ04sQ0FBQyxFQUFFQyxDQUFDLEVBQUU7SUFDZCxJQUFJLENBQUM5QyxRQUFRLENBQUNvRCxHQUFHLENBQUNQLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQ3ZCLElBQUksQ0FBQzNELE1BQU0sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBa0UsZUFBZUEsQ0FBQ3hELFNBQVMsRUFBRXlELE9BQU8sRUFBRTtJQUNoQyxJQUFJQSxPQUFPLEVBQUU7TUFDVCxJQUFJLENBQUNoRCxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDakIsU0FBUyxDQUFDO0lBQzNDLENBQUMsTUFBTTtNQUNILElBQUksQ0FBQ1MsU0FBUyxDQUFDTyxTQUFTLENBQUMwQyxNQUFNLENBQUMxRCxTQUFTLENBQUM7SUFDOUM7RUFDSjs7RUFFQTtFQUNBO0VBQ0EyRCxXQUFXQSxDQUFDQyxRQUFRLEVBQUU7SUFDbEIsSUFBSSxDQUFDSixlQUFlLENBQUMsVUFBVSxFQUFFSSxRQUFRLENBQUM7RUFDOUM7O0VBRUFDLFVBQVVBLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSSxDQUFDcEQsU0FBUyxDQUFDTyxTQUFTLENBQUM4QyxRQUFRLENBQUMsVUFBVSxDQUFDO0VBQ3hEOztFQUVBO0VBQ0FDLGVBQWVBLENBQUNOLE9BQU8sRUFBRTtJQUNyQixJQUFJLENBQUNELGVBQWUsQ0FBQyxjQUFjLEVBQUVDLE9BQU8sQ0FBQztFQUNqRDs7RUFFQTtFQUNBTyxPQUFPQSxDQUFDQyxJQUFJLEVBQUU7SUFDVixJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUN4RCxTQUFTLENBQUN5RCxFQUFFLEdBQUdELElBQUksR0FBR0EsSUFBSSxHQUFHLEVBQUU7RUFDeEM7O0VBRUE7RUFDQTNDLFVBQVVBLENBQUM2QyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtJQUN2QixJQUFJQSxPQUFPLEVBQUU7TUFDVCxJQUFJLENBQUMzQyxZQUFZLENBQUM0QyxNQUFNLENBQUNGLEtBQUssQ0FBQztJQUNuQyxDQUFDLE1BQU07TUFDSCxJQUFJLENBQUMxQyxZQUFZLENBQUM2QyxRQUFRLENBQUNILEtBQUssQ0FBQztJQUNyQztFQUNKO0FBQ0o7O0FBRUE7QUFDQSxNQUFNSSxhQUFhLEdBQUdBLENBQUNDLEtBQUssS0FBSzs7RUFFN0I7RUFDQUEsS0FBSyxDQUFDL0QsU0FBUyxDQUFDTyxTQUFTLENBQUNDLEdBQUcsQ0FBQyxjQUFjLENBQUM7RUFDN0N1RCxLQUFLLENBQUMvRCxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7RUFFeEM7RUFDQSxNQUFNVixTQUFTLEdBQUdpRSxLQUFLLENBQUNoRSxXQUFXLENBQUMsQ0FBQztFQUNyQ2dFLEtBQUssQ0FBQ0MsT0FBTyxHQUFHbEUsU0FBUyxDQUFDRyxhQUFhLENBQUMsS0FBSyxDQUFDO0VBQzlDOEQsS0FBSyxDQUFDQyxPQUFPLENBQUN6RCxTQUFTLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQztFQUNoRHVELEtBQUssQ0FBQy9ELFNBQVMsQ0FBQzhCLFdBQVcsQ0FBQ2lDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDOztFQUUxQztFQUNBRCxLQUFLLENBQUNFLE9BQU8sR0FBRyxVQUFTQyxHQUFHLEVBQUU7SUFDMUIsSUFBSSxDQUFDRixPQUFPLENBQUNHLFdBQVcsR0FBR0QsR0FBRztFQUNsQyxDQUFDLENBQUNFLElBQUksQ0FBQ0wsS0FBSyxDQUFDO0FBQ2pCLENBQUM7O0FBRUQ7QUFDTyxNQUFNTSxTQUFTLFNBQVNwRixXQUFXLENBQUM7O0VBRXZDTCxXQUFXQSxDQUFDTSxLQUFLLEVBQUVvRixJQUFJLEVBQUUvRSxTQUFTLEVBQUU7SUFDaEMsS0FBSyxDQUFDTCxLQUFLLEVBQUUsSUFBSSxFQUFFSyxTQUFTLENBQUM7SUFDN0J1RSxhQUFhLENBQUMsSUFBSSxDQUFDO0VBQ3ZCOztBQUVKLENBQUM7O0FBRUQ7QUFDTyxNQUFNUyxVQUFVLFNBQVN0RixXQUFXLENBQUM7O0VBRXhDTCxXQUFXQSxDQUFDNEYsS0FBSyxFQUFFdEYsS0FBSyxFQUE2QixLQUEzQkMsT0FBTyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJLEtBQUVHLFNBQVMsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtJQUMvQyxLQUFLLENBQUNKLEtBQUssRUFBRUMsT0FBTyxFQUFFSSxTQUFTLENBQUM7O0lBRWhDdUUsYUFBYSxDQUFDLElBQUksQ0FBQzs7SUFFbkIsSUFBSSxDQUFDVSxLQUFLLEdBQUdBLEtBQUs7O0lBRWxCO0lBQ0EsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSTs7SUFFdEI7SUFDQSxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJL0UsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQzs7SUFFdEMsSUFBSSxDQUFDZixNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQUEsTUFBTUEsQ0FBQSxFQUFHO0lBQ0wsSUFBSSxJQUFJLENBQUMyRixLQUFLLElBQUksSUFBSSxDQUFDQyxVQUFVLEVBQUU7TUFDL0I7TUFDQSxJQUFJLENBQUN6RSxTQUFTLENBQUNFLEtBQUssQ0FBQ3lFLFVBQVUsR0FBRyxTQUFTOztNQUUzQyxJQUFJLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ3pCLE1BQU1DLFNBQVMsR0FBRyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sWUFBWSxDQUFDLENBQUMsQ0FBQztRQUM1QztRQUNBLE1BQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNKLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUNMLEtBQUssQ0FBQ1UsY0FBYyxDQUFDSCxXQUFXLENBQUMsRUFBRTtVQUN4QztVQUNBLElBQUksQ0FBQ1AsS0FBSyxDQUFDVyxjQUFjLENBQUNKLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ3JGLFFBQVEsQ0FBQztRQUNqRTtNQUNKLENBQUM7TUFDSTtRQUNEO1FBQ0E7UUFDQSxJQUFJLENBQUM4RSxLQUFLLENBQUNZLFdBQVcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQ1osS0FBSyxDQUFDYSxJQUFJLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUM1RixRQUFRLENBQUM7TUFDNUM7O01BRUE7TUFDQSxJQUFJLElBQUksQ0FBQ2dGLFdBQVcsRUFBRTtRQUNsQixNQUFNYSxPQUFPLEdBQUcsSUFBSSxDQUFDckcsS0FBSyxDQUFDc0csZ0JBQWdCLENBQUMsQ0FBQztRQUM3QyxNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDZixXQUFXLENBQUNuQyxDQUFDLEdBQUdnRCxPQUFPO1FBQzNDLE1BQU1HLE1BQU0sR0FBRyxJQUFJLENBQUNoQixXQUFXLENBQUNsQyxDQUFDLEdBQUcrQyxPQUFPO1FBQzNDLElBQUksQ0FBQzdGLFFBQVEsQ0FBQzZDLENBQUMsSUFBSWtELE1BQU07UUFDekIsSUFBSSxDQUFDL0YsUUFBUSxDQUFDOEMsQ0FBQyxJQUFJa0QsTUFBTTtNQUM3Qjs7TUFFQSxLQUFLLENBQUM3RyxNQUFNLENBQUMsQ0FBQztJQUNsQixDQUFDLE1BQU07TUFDSCxJQUFJLENBQUNtQixTQUFTLENBQUNFLEtBQUssQ0FBQ3lFLFVBQVUsR0FBRyxRQUFRO0lBQzlDO0VBQ0o7O0VBRUFnQixRQUFRQSxDQUFDbkIsS0FBSyxFQUFFO0lBQ1osSUFBSSxDQUFDQSxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDM0YsTUFBTSxDQUFDLENBQUM7RUFDakI7QUFDSjs7QUFFQTtBQUNPLE1BQU0rRyxXQUFXLFNBQVNyQixVQUFVLENBQUM7O0VBRXhDO0VBQ0E7RUFDQTtFQUNBO0VBQ0EzRixXQUFXQSxDQUFDaUgsUUFBUSxFQUFFM0csS0FBSyxFQUFFNEcsV0FBVyxFQUFrQixLQUFoQjNHLE9BQU8sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSTtJQUNwRCxLQUFLLENBQUN5RyxRQUFRLEVBQUUzRyxLQUFLLEVBQUVDLE9BQU8sQ0FBQztJQUMvQixJQUFJLENBQUMyRyxXQUFXLEdBQUdBLFdBQVc7RUFDbEM7O0VBRUFqSCxNQUFNQSxDQUFBLEVBQUc7SUFDTDtJQUNBLE1BQU1rSCxTQUFTLEdBQUcsSUFBSSxDQUFDdkIsS0FBSyxJQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDd0IsU0FBUztJQUNwRCxNQUFNM0csTUFBTSxHQUFHMEcsU0FBUyxJQUFJLElBQUksQ0FBQ3ZCLEtBQUssQ0FBQ3dCLFNBQVMsQ0FBQyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0csZ0JBQWdCLENBQUM7O0lBRW5GO0lBQ0E7SUFDQSxJQUFJLENBQUN4QixVQUFVLEdBQUd5QixPQUFPLENBQUM3RyxNQUFNLENBQUM7O0lBRWpDLElBQUksSUFBSSxDQUFDb0YsVUFBVSxFQUFFO01BQ2pCLE1BQU1ILElBQUksR0FBRyxJQUFJLENBQUN3QixXQUFXLENBQUNLLGNBQWMsQ0FBQzlHLE1BQU0sQ0FBQztNQUNwRCxJQUFJLENBQUM0RSxPQUFPLENBQUNLLElBQUksQ0FBQztJQUN0Qjs7SUFFQTtJQUNBLEtBQUssQ0FBQ3pGLE1BQU0sQ0FBQyxDQUFDO0VBQ2xCO0FBQ0o7O0FBRUE7QUFDTyxNQUFNdUgsU0FBUyxTQUFTN0IsVUFBVSxDQUFDOztFQUV0QztFQUNBO0VBQ0E7RUFDQTtFQUNBM0YsV0FBV0EsQ0FBQ3lILE9BQU8sRUFBRW5ILEtBQUssRUFBRTRHLFdBQVcsRUFBa0IsS0FBaEIzRyxPQUFPLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7SUFDbkQsS0FBSyxDQUFDaUgsT0FBTyxFQUFFbkgsS0FBSyxFQUFFQyxPQUFPLENBQUM7SUFDOUIsSUFBSSxDQUFDMkcsV0FBVyxHQUFHQSxXQUFXO0lBQzlCLElBQUksQ0FBQ2pILE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuQjs7RUFFQUEsTUFBTUEsQ0FBQSxFQUFHO0lBQ0w7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDaUgsV0FBVyxFQUFFO01BQ25CO0lBQ0o7O0lBRUE7SUFDQSxJQUFJLElBQUksQ0FBQ3RCLEtBQUssSUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQzhCLGtCQUFrQixJQUFJLElBQUksQ0FBQzlCLEtBQUssQ0FBQzhCLGtCQUFrQixDQUFDLENBQUMsRUFBRTs7TUFFaEY7TUFDQSxJQUFJLENBQUNyQyxPQUFPLENBQUN6RixFQUFFLENBQUMrSCxJQUFJLENBQUN6RixDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7O01BRXhDO01BQ0EsSUFBSSxDQUFDZCxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixDQUFDOztNQUUvQztNQUNBLElBQUksQ0FBQ2lFLFVBQVUsR0FBRyxJQUFJO01BQ3RCLEtBQUssQ0FBQzVGLE1BQU0sQ0FBQyxDQUFDOztNQUVkO0lBQ0osQ0FBQyxNQUFNO01BQ0g7TUFDQSxJQUFJLENBQUNtQixTQUFTLENBQUNPLFNBQVMsQ0FBQzBDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztJQUN0RDs7SUFFQTtJQUNBLElBQUl1RCxPQUFPLEdBQUcsSUFBSSxDQUFDaEMsS0FBSyxJQUFJLElBQUksQ0FBQ0EsS0FBSyxDQUFDaUMsT0FBTztJQUM5QyxJQUFJQyxJQUFJLEdBQU1GLE9BQU8sSUFBSSxJQUFJLENBQUNoQyxLQUFLLENBQUNpQyxPQUFPLENBQUMsSUFBSSxDQUFDWCxXQUFXLENBQUNHLGdCQUFnQixDQUFDOztJQUU5RTtJQUNBO0lBQ0EsSUFBSSxDQUFDeEIsVUFBVSxHQUFHeUIsT0FBTyxDQUFDUSxJQUFJLENBQUM7O0lBRS9CLElBQUksSUFBSSxDQUFDakMsVUFBVSxFQUFFO01BQ2pCLE1BQU1ILElBQUksR0FBRyxJQUFJLENBQUN3QixXQUFXLENBQUNhLFlBQVksQ0FBQ0QsSUFBSSxDQUFDO01BQ2hELElBQUksQ0FBQ3pDLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDO0lBQ3RCOztJQUVBO0lBQ0EsS0FBSyxDQUFDekYsTUFBTSxDQUFDLENBQUM7RUFDbEI7QUFDSjs7QUFFQTtBQUNPLE1BQU0rSCxTQUFTLFNBQVMzSCxXQUFXLENBQUM7O0VBRXZDO0VBQ0E7RUFDQUwsV0FBV0EsQ0FBQ00sS0FBSyxFQUE2QixLQUEzQkMsT0FBTyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJLEtBQUVHLFNBQVMsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtJQUN4QyxLQUFLLENBQUNKLEtBQUssRUFBRUMsT0FBTyxFQUFFSSxTQUFTLENBQUM7O0lBRWhDLElBQUksQ0FBQ3NILElBQUksR0FBRyxJQUFJbEgsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUNrSCxJQUFJLEdBQUcsSUFBSW5ILEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7O0lBRS9CO0lBQ0E7SUFDQSxJQUFJLENBQUNtSCxRQUFRLEdBQUcsS0FBSzs7SUFFckI7SUFDQSxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJckgsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQzs7SUFFbEM7SUFDQSxJQUFJLENBQUNxSCxJQUFJLEdBQUcsSUFBSTtJQUNoQixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDO0lBQ2xCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLENBQUM7O0lBRWxCO0lBQ0EsSUFBSSxDQUFDbkgsU0FBUyxDQUFDTyxTQUFTLENBQUNDLEdBQUcsQ0FBQyxZQUFZLENBQUM7O0lBRTFDO0lBQ0E7SUFDQSxJQUFJLENBQUM0RyxVQUFVLEdBQUcsS0FBSzs7SUFFdkI7SUFDQTtJQUNBLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcvSCxTQUFTLENBQUMsQ0FBQztFQUN4Qzs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQWdJLFlBQVlBLENBQUNMLElBQUksRUFBRUUsU0FBUyxFQUFpQixLQUFmRCxTQUFTLEdBQUE5SCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDO0lBQ3ZDLElBQUksQ0FBQzZILElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNFLFNBQVMsR0FBR0EsU0FBUztJQUMxQixJQUFJLENBQUNELFNBQVMsR0FBR0EsU0FBUztJQUMxQixJQUFJLENBQUNySSxNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQTBJLGNBQWNBLENBQUEsRUFBRztJQUNiLElBQUksQ0FBQ04sSUFBSSxHQUFHLElBQUk7SUFDaEIsSUFBSSxDQUFDRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLElBQUksQ0FBQ0QsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNuQixJQUFJLENBQUNILFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNsSSxNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQTJJLFNBQVNBLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDUCxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUMvQixjQUFjLENBQUMsSUFBSSxDQUFDaUMsU0FBUyxFQUFFLElBQUksQ0FBQ0QsU0FBUyxDQUFDO0VBQ2hGOztFQUVBckksTUFBTUEsQ0FBQSxFQUFHOztJQUVMO0lBQ0EsSUFBSSxJQUFJLENBQUNvSSxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUMvQixjQUFjLENBQUMsSUFBSSxDQUFDaUMsU0FBUyxFQUFFLElBQUksQ0FBQ0QsU0FBUyxDQUFDLEVBQUU7TUFDdkUsSUFBSSxDQUFDRCxJQUFJLENBQUNRLE9BQU8sQ0FBQyxJQUFJLENBQUNOLFNBQVMsRUFBRSxJQUFJLENBQUNOLElBQUksRUFBRSxJQUFJLENBQUNDLElBQUksRUFBRSxJQUFJLENBQUNJLFNBQVMsQ0FBQztNQUN2RSxJQUFJLENBQUNILFFBQVEsR0FBRyxJQUFJO0lBQ3hCLENBQUMsTUFBTTtNQUNIO01BQ0EsSUFBSSxDQUFDQSxRQUFRLEdBQUcsS0FBSztJQUN6Qjs7SUFFQTtJQUNBLElBQUlXLElBQUksR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQzNILFNBQVMsQ0FBQ0UsS0FBSyxDQUFDeUUsVUFBVSxHQUFHK0MsSUFBSSxHQUFHLFNBQVMsR0FBRyxRQUFRO0lBQzdELElBQUksQ0FBQ0EsSUFBSSxFQUFFO01BQ1A7SUFDSjs7SUFFQTtJQUNBLElBQUksSUFBSSxDQUFDTixVQUFVLEVBQUU7TUFDakI7TUFDQXZKLG9EQUFRLENBQUNtQixTQUFTLENBQUNtRyxjQUFjLENBQUNwRyxJQUFJLENBQUMsSUFBSSxDQUFDa0ksSUFBSSxFQUFFLElBQUksQ0FBQ0UsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUNELFNBQVMsRUFBRSxJQUFJLENBQUN4SCxRQUFRLENBQUM7SUFDekcsQ0FBQyxNQUFNO01BQ0g7TUFDQSxJQUFJLENBQUN1SCxJQUFJLENBQUM5QixjQUFjLENBQUMsSUFBSSxDQUFDZ0MsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUNELFNBQVMsRUFBRSxJQUFJLENBQUN4SCxRQUFRLENBQUM7SUFDaEY7O0lBRUE7SUFDQSxJQUFJLENBQUNrSSxlQUFlLENBQUMsQ0FBQzs7SUFFdEIsS0FBSyxDQUFDL0ksTUFBTSxDQUFDLENBQUM7RUFDbEI7O0VBRUE7RUFDQThJLGNBQWNBLENBQUEsRUFBRzs7SUFFYjtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNaLFFBQVEsRUFBRTtNQUNoQixPQUFPLEtBQUs7SUFDaEI7O0lBRUE7SUFDQTtJQUNBLElBQUksSUFBSSxDQUFDTSxpQkFBaUIsRUFBRTtNQUN4QixNQUFNUSxPQUFPLEdBQUcsSUFBSSxDQUFDM0ksS0FBSyxDQUFDb0QsYUFBYSxDQUFDLElBQUksQ0FBQ3VFLElBQUksQ0FBQ3RFLENBQUMsRUFBRSxJQUFJLENBQUNzRSxJQUFJLENBQUNyRSxDQUFDLENBQUM7TUFDbEUsTUFBTXNGLE9BQU8sR0FBRyxJQUFJLENBQUM1SSxLQUFLLENBQUNvRCxhQUFhLENBQUMsSUFBSSxDQUFDd0UsSUFBSSxDQUFDdkUsQ0FBQyxFQUFFLElBQUksQ0FBQ3VFLElBQUksQ0FBQ3RFLENBQUMsQ0FBQztNQUNsRSxNQUFNdUYsZ0JBQWdCLEdBQUdGLE9BQU8sQ0FBQ0csVUFBVSxDQUFDRixPQUFPLENBQUM7TUFDcEQsTUFBTUcsZ0JBQWdCLEdBQUdGLGdCQUFnQixHQUFHLElBQUksQ0FBQ1YsaUJBQWlCO01BQ2xFLE1BQU1hLE9BQU8sR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQyxDQUFDO01BQ2hDLE1BQU1DLEtBQUssR0FBR0MsVUFBVSxDQUFDSCxPQUFPLENBQUNJLGdCQUFnQixDQUFDLElBQUksQ0FBQ3RJLFNBQVMsQ0FBQyxDQUFDb0ksS0FBSyxDQUFDO01BQ3hFLE9BQU9BLEtBQUssR0FBR0gsZ0JBQWdCO0lBQ25DO0lBQ0EsT0FBTyxJQUFJO0VBQ2Y7O0VBRUE7RUFDQUwsZUFBZUEsQ0FBQSxFQUFHOztJQUVkO0lBQ0E7SUFDQTtJQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJLENBQUMzSSxLQUFLLENBQUNvRCxhQUFhLENBQUMsSUFBSSxDQUFDdUUsSUFBSSxDQUFDdEUsQ0FBQyxFQUFFLElBQUksQ0FBQ3NFLElBQUksQ0FBQ3JFLENBQUMsQ0FBQztJQUNsRSxNQUFNc0YsT0FBTyxHQUFHLElBQUksQ0FBQzVJLEtBQUssQ0FBQ29ELGFBQWEsQ0FBQyxJQUFJLENBQUN3RSxJQUFJLENBQUN2RSxDQUFDLEVBQUUsSUFBSSxDQUFDdUUsSUFBSSxDQUFDdEUsQ0FBQyxDQUFDOztJQUVsRSxNQUFNK0YsR0FBRyxHQUFHNUssOENBQU0sQ0FBQzZLLGdCQUFnQixDQUFDWCxPQUFPLEVBQUVDLE9BQU8sRUFBRSxJQUFJLENBQUNkLE9BQU8sQ0FBQztJQUNuRSxJQUFJckcsS0FBSyxHQUFHcUUsSUFBSSxDQUFDeUQsS0FBSyxDQUFDRixHQUFHLENBQUMvRixDQUFDLEVBQUUrRixHQUFHLENBQUNoRyxDQUFDLENBQUM7O0lBRXBDO0lBQ0EsSUFBSWdHLEdBQUcsQ0FBQ2hHLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDWDVCLEtBQUssSUFBSXFFLElBQUksQ0FBQzBELEVBQUU7SUFDcEI7O0lBRUE7SUFDQTtJQUNBLElBQUksQ0FBQy9ILEtBQUssR0FBR2hCLEtBQUssQ0FBQ3FGLElBQUksQ0FBQzJELFFBQVEsQ0FBQ2hJLEtBQUssQ0FBQztFQUMzQztBQUNKOztBQUVPLE1BQU1pSSxhQUFhLFNBQVNoQyxTQUFTLENBQUM7O0VBRXpDaEksV0FBV0EsQ0FBQ00sS0FBSyxFQUFFc0UsSUFBSSxFQUE2QixLQUEzQnJFLE9BQU8sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSSxLQUFFRyxTQUFTLEdBQUFILFNBQUEsQ0FBQUMsTUFBQSxPQUFBRCxTQUFBLE1BQUFFLFNBQUE7SUFDOUMsS0FBSyxDQUFDSixLQUFLLEVBQUVDLE9BQU8sRUFBRUksU0FBUyxDQUFDOztJQUVoQyxJQUFJLENBQUNnRSxPQUFPLENBQUNDLElBQUksQ0FBQztJQUNsQixJQUFJLENBQUN4RCxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixDQUFDOztJQUUvQztJQUNBO0lBQ0EsSUFBSSxDQUFDNEcsVUFBVSxHQUFHLElBQUk7O0lBRXRCO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsQ0FBQztFQUNsQztBQUNKOztBQUVBO0FBQ08sTUFBTXdCLFNBQVMsU0FBU2pDLFNBQVMsQ0FBQzs7RUFFckNoSSxXQUFXQSxDQUFDTSxLQUFLLEVBQWtCLEtBQWhCQyxPQUFPLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7SUFDN0IsS0FBSyxDQUFDRixLQUFLLEVBQUVDLE9BQU8sQ0FBQztJQUNyQjJFLGFBQWEsQ0FBQyxJQUFJLENBQUM7O0lBRW5CO0lBQ0EsSUFBSSxDQUFDdUQsaUJBQWlCLEdBQUcsR0FBRztFQUNoQztBQUNKOztBQUVPLE1BQU15QixXQUFXLFNBQVM3SixXQUFXLENBQUM7O0VBRXpDO0VBQ0E7RUFDQUwsV0FBV0EsQ0FBQ00sS0FBSyxFQUFFcUQsQ0FBQyxFQUFFQyxDQUFDLEVBQUVnQixJQUFJLEVBQUVqRSxTQUFTLEVBQUU7SUFDdEMsS0FBSyxDQUFDTCxLQUFLLEVBQUUsSUFBSSxFQUFFSyxTQUFTLENBQUM7SUFDN0IsSUFBSSxDQUFDc0QsV0FBVyxDQUFDTixDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUNlLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDOztJQUVsQixJQUFJLENBQUN1RixHQUFHLEdBQUcsSUFBSXBKLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7O0lBRTlCO0lBQ0EsSUFBSSxDQUFDcUgsSUFBSSxHQUFHLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLElBQUksQ0FBQzhCLFdBQVcsR0FBRyxDQUFDLENBQUM7O0lBRXJCLElBQUksQ0FBQ2hKLFNBQVMsQ0FBQ08sU0FBUyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFDO0VBQ2hEOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBeUksY0FBY0EsQ0FBQ2hDLElBQUksRUFBRStCLFdBQVcsRUFBaUIsS0FBZjlCLFNBQVMsR0FBQTlILFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUM7SUFDM0MsSUFBSSxDQUFDNkgsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQytCLFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJLENBQUM5QixTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDckksTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUFxSyxnQkFBZ0JBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQ2pDLElBQUksR0FBRyxJQUFJO0lBQ2hCLElBQUksQ0FBQytCLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDOUIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNuQixJQUFJLENBQUNILFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNsSSxNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQUEsTUFBTUEsQ0FBQSxFQUFHO0lBQ0w7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDb0ksSUFBSSxFQUFFO01BQ1osS0FBSyxDQUFDcEksTUFBTSxDQUFDLENBQUM7TUFDZDtJQUNKOztJQUVBO0lBQ0EsSUFBSSxJQUFJLENBQUNvSSxJQUFJLENBQUNrQyxVQUFVLENBQUMsSUFBSSxDQUFDSCxXQUFXLEVBQUUsSUFBSSxDQUFDOUIsU0FBUyxDQUFDLEVBQUU7TUFDeEQsSUFBSSxDQUFDRCxJQUFJLENBQUNtQyxRQUFRLENBQUMsSUFBSSxDQUFDSixXQUFXLEVBQUUsSUFBSSxDQUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQzZCLEdBQUcsQ0FBQztNQUM5RCxJQUFJLENBQUNoQyxRQUFRLEdBQUcsSUFBSTtJQUN4QixDQUFDLE1BQU07TUFDSDtNQUNBLElBQUksQ0FBQ0EsUUFBUSxHQUFHLEtBQUs7SUFDekI7O0lBRUE7SUFDQSxJQUFJVyxJQUFJLEdBQUcsSUFBSSxDQUFDWCxRQUFROztJQUV4QixJQUFJLENBQUMvRyxTQUFTLENBQUNFLEtBQUssQ0FBQ3lFLFVBQVUsR0FBRytDLElBQUksR0FBRyxTQUFTLEdBQUcsUUFBUTs7SUFFN0QsSUFBSSxDQUFDQSxJQUFJLEVBQUU7TUFDUDtJQUNKOztJQUVBLElBQUksQ0FBQ2hJLFFBQVEsQ0FBQ29ELEdBQUcsQ0FBQyxJQUFJLENBQUNpRyxHQUFHLENBQUN4RyxDQUFDLEVBQUUsSUFBSSxDQUFDd0csR0FBRyxDQUFDdkcsQ0FBQyxDQUFDOztJQUV6QyxLQUFLLENBQUMzRCxNQUFNLENBQUMsQ0FBQztFQUNsQjtBQUNKOztBQUVBO0FBQ08sTUFBTXdLLFdBQVcsQ0FBQzs7RUFFckJ6SyxXQUFXQSxDQUFBLEVBQUcsQ0FBQzs7RUFFZjtFQUNBMEssT0FBT0EsQ0FBQzlFLEtBQUssRUFBRUYsSUFBSSxFQUFFO0lBQ2pCLE9BQU8sSUFBSTtFQUNmO0FBQ0osQ0FBQzs7QUFFRDtBQUNBLE1BQU1pRixhQUFhLEdBQUdBLENBQUMvRSxLQUFLLEVBQUV0RixLQUFLLEtBQUs7RUFDcEM7RUFDQXNGLEtBQUssQ0FBQ2dGLFVBQVUsQ0FBQyxDQUFDO0VBQ2xCLE1BQU1uRSxJQUFJLEdBQUdiLEtBQUssQ0FBQ2EsSUFBSTtFQUN2QixNQUFNb0UsVUFBVSxHQUFHcEUsSUFBSSxDQUFDcUUsR0FBRyxDQUFDbkgsQ0FBQyxHQUFHOEMsSUFBSSxDQUFDc0UsR0FBRyxDQUFDcEgsQ0FBQztFQUMxQyxPQUFPa0gsVUFBVSxHQUFHdkssS0FBSyxDQUFDMEssZ0JBQWdCLENBQUMsQ0FBQyxHQUFHSCxVQUFVO0FBQzdELENBQUM7O0FBRUQ7QUFDTyxNQUFNSSxrQkFBa0IsU0FBU1IsV0FBVyxDQUFDOztFQUVoRDtFQUNBekssV0FBV0EsQ0FBQSxFQUFlLEtBQWRrTCxRQUFRLEdBQUExSyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDO0lBQ3BCLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDMEssUUFBUSxHQUFHQSxRQUFRO0VBQzVCOztFQUVBO0VBQ0FSLE9BQU9BLENBQUM5RSxLQUFLLEVBQUVGLElBQUksRUFBRXBGLEtBQUssRUFBRTtJQUN4QixNQUFNa0osS0FBSyxHQUFHbUIsYUFBYSxDQUFDL0UsS0FBSyxFQUFFdEYsS0FBSyxDQUFDO0lBQ3pDLE9BQU9nSCxPQUFPLENBQUM1QixJQUFJLENBQUMsSUFBSThELEtBQUssSUFBSSxJQUFJLENBQUMwQixRQUFRO0VBQ2xEO0FBQ0o7O0FBRUE7QUFDTyxNQUFNQyxjQUFjLENBQUM7O0VBRXhCbkwsV0FBV0EsQ0FBQSxFQUFHLENBQUM7O0VBRWY7RUFDQTtFQUNBb0wsS0FBS0EsQ0FBQ0MsS0FBSyxFQUFFekYsS0FBSyxFQUFFdEYsS0FBSyxFQUFFLENBQUM7QUFDaEMsQ0FBQzs7QUFFRDtBQUNPLE1BQU1nTCxnQkFBZ0IsU0FBU0gsY0FBYyxDQUFDOztFQUVqRDtFQUNBO0VBQ0FuTCxXQUFXQSxDQUFBLEVBQWlDLEtBQWhDdUwsVUFBVSxHQUFBL0ssU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRSxLQUFFZ0wsUUFBUSxHQUFBaEwsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsRUFBRTtJQUN0QyxLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQytLLFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNDLFFBQVEsR0FBS0EsUUFBUTtFQUM5Qjs7RUFFQUosS0FBS0EsQ0FBQ0MsS0FBSyxFQUFFekYsS0FBSyxFQUFFdEYsS0FBSyxFQUFFOztJQUV2QjtJQUNBLE1BQU1rSixLQUFLLEdBQUdtQixhQUFhLENBQUMvRSxLQUFLLEVBQUV0RixLQUFLLENBQUM7SUFDekMsTUFBTTRCLENBQUMsR0FBRyxDQUFDc0gsS0FBSyxHQUFHLElBQUksQ0FBQytCLFVBQVUsS0FBSyxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUNELFVBQVUsQ0FBQztJQUN2RSxNQUFNcEosT0FBTyxHQUFHcEIsS0FBSyxDQUFDcUYsSUFBSSxDQUFDcUYsS0FBSyxDQUFDdkosQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7O0lBRXpDbUosS0FBSyxDQUFDakssU0FBUyxDQUFDRSxLQUFLLENBQUNhLE9BQU8sR0FBR0EsT0FBTztFQUMzQztBQUNKLENBQUM7O0FBRUQ7QUFDQTtBQUNPLE1BQU11SixjQUFjLENBQUM7O0VBRXhCO0VBQ0E7RUFDQTtFQUNBO0VBQ0ExTCxXQUFXQSxDQUFDTSxLQUFLLEVBQUVxTCxnQkFBZ0IsRUFBOEUsS0FBNUVDLFdBQVcsR0FBQXBMLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUl5SyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUVZLFNBQVMsR0FBQXJMLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk4SyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzNHLElBQUksQ0FBQ2hMLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNxTCxnQkFBZ0IsR0FBR0EsZ0JBQWdCOztJQUV4QztJQUNBLElBQUksQ0FBQ0csTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUs7O0lBRXRCLElBQUksQ0FBQ3hMLEtBQUssQ0FBQzZDLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDL0IsSUFBSSxDQUFDNUMsT0FBTyxHQUFHLElBQUk7SUFDbkIsSUFBSSxDQUFDRCxLQUFLLENBQUNMLE1BQU0sQ0FBQyxDQUFDOztJQUVuQixJQUFJLENBQUM4TCxNQUFNLEdBQUdILFdBQVc7SUFDekIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBLFNBQVM7RUFDOUI7O0VBRUE7RUFDQTtFQUNBRyxXQUFXQSxDQUFDTCxnQkFBZ0IsRUFBRTtJQUMxQixJQUFJLENBQUNBLGdCQUFnQixHQUFHQSxnQkFBZ0I7SUFDeEMsSUFBSSxDQUFDMUwsTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUErQixVQUFVQSxDQUFDekIsT0FBTyxFQUFFO0lBQ2hCLElBQUlBLE9BQU8sS0FBSyxJQUFJLENBQUNBLE9BQU8sRUFBRTtNQUMxQjtJQUNKOztJQUVBLElBQUlBLE9BQU8sRUFBRTtNQUNUO01BQ0E7TUFDQSxJQUFJLENBQUNELEtBQUssQ0FBQzZDLGNBQWMsQ0FBQyxJQUFJLENBQUM7TUFDL0IsSUFBSSxDQUFDbEQsTUFBTSxDQUFDLENBQUM7SUFDakIsQ0FBQyxNQUFNO01BQ0gsSUFBSSxDQUFDZ00sV0FBVyxDQUFDLENBQUM7TUFDbEIsSUFBSSxDQUFDM0wsS0FBSyxDQUFDK0MsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3RDO0lBQ0EsSUFBSSxDQUFDOUMsT0FBTyxHQUFHQSxPQUFPO0VBQzFCOztFQUVBc0MsSUFBSUEsQ0FBQSxFQUFHO0lBQ0g7SUFDQSxJQUFJLENBQUNiLFVBQVUsQ0FBQyxLQUFLLENBQUM7RUFDMUI7O0VBRUFrSyxvQkFBb0JBLENBQUN0RyxLQUFLLEVBQUU7SUFDeEIsSUFBSSxJQUFJLENBQUNrRyxNQUFNLENBQUNsRyxLQUFLLENBQUNmLEVBQUUsQ0FBQyxFQUFFO01BQ3ZCLElBQUksQ0FBQ3NILFVBQVUsQ0FBQyxJQUFJLENBQUNMLE1BQU0sQ0FBQ2xHLEtBQUssQ0FBQ2YsRUFBRSxDQUFDLENBQUM7TUFDdEMsT0FBTyxJQUFJLENBQUNpSCxNQUFNLENBQUNsRyxLQUFLLENBQUNmLEVBQUUsQ0FBQztJQUNoQztFQUNKOztFQUVBc0gsVUFBVUEsQ0FBQ2QsS0FBSyxFQUFFO0lBQ2RBLEtBQUssQ0FBQ3RFLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDcEJzRSxLQUFLLENBQUNySixVQUFVLENBQUMsS0FBSyxDQUFDO0VBQzNCOztFQUVBO0VBQ0FpSyxXQUFXQSxDQUFBLEVBQUc7SUFDVkcsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDUCxNQUFNLENBQUMsQ0FBQ1EsT0FBTyxDQUFDLENBQUFqQixLQUFLLEtBQUk7TUFDeEMsSUFBSSxDQUFDYyxVQUFVLENBQUNkLEtBQUssQ0FBQztJQUMxQixDQUFDLENBQUM7O0lBRUYsSUFBSSxDQUFDUyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ3BCOztFQUVBO0VBQ0FTLFlBQVlBLENBQUMzRyxLQUFLLEVBQUU7SUFDaEIsSUFBSXlGLEtBQUssR0FBRyxJQUFJLENBQUNTLE1BQU0sQ0FBQ2xHLEtBQUssQ0FBQ2YsRUFBRSxDQUFDOztJQUVqQyxJQUFJd0csS0FBSyxFQUFFO01BQ1AsT0FBT0EsS0FBSztJQUNoQjs7SUFFQUEsS0FBSyxHQUFHLElBQUkxRixVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ3JGLEtBQUssQ0FBQztJQUN4QytLLEtBQUssQ0FBQ3RFLFFBQVEsQ0FBQ25CLEtBQUssQ0FBQzs7SUFFckIsSUFBSSxDQUFDa0csTUFBTSxDQUFDbEcsS0FBSyxDQUFDZixFQUFFLENBQUMsR0FBR3dHLEtBQUs7O0lBRTdCLE9BQU9BLEtBQUs7RUFDaEI7O0VBRUFwTCxNQUFNQSxDQUFBLEVBQUc7SUFDTCxNQUFNdU0sTUFBTSxHQUFHLElBQUksQ0FBQ2xNLEtBQUssQ0FBQ2tNLE1BQU07SUFDaEMsS0FBSyxJQUFJQyxDQUFDLEdBQUMsQ0FBQyxFQUFFQSxDQUFDLEdBQUNELE1BQU0sQ0FBQy9MLE1BQU0sRUFBRWdNLENBQUMsRUFBRSxFQUFFOztNQUVoQyxNQUFNN0csS0FBSyxHQUFHNEcsTUFBTSxDQUFDQyxDQUFDLENBQUM7O01BRXZCO01BQ0EsTUFBTS9HLElBQUksR0FBRyxJQUFJLENBQUNpRyxnQkFBZ0IsQ0FBQy9GLEtBQUssQ0FBQzs7TUFFekM7TUFDQSxJQUFJLElBQUksQ0FBQ21HLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQ0EsTUFBTSxDQUFDckIsT0FBTyxDQUFDOUUsS0FBSyxFQUFFRixJQUFJLEVBQUUsSUFBSSxDQUFDcEYsS0FBSyxDQUFDLEVBQUU7UUFDOUQsSUFBSSxDQUFDNEwsb0JBQW9CLENBQUN0RyxLQUFLLENBQUM7UUFDaEM7TUFDSjs7TUFFQTtNQUNBLE1BQU15RixLQUFLLEdBQUcsSUFBSSxDQUFDa0IsWUFBWSxDQUFDM0csS0FBSyxDQUFDO01BQ3RDeUYsS0FBSyxDQUFDaEcsT0FBTyxDQUFDSyxJQUFJLENBQUM7TUFDbkIyRixLQUFLLENBQUNySixVQUFVLENBQUMsSUFBSSxDQUFDOztNQUV0QjtNQUNBLElBQUksQ0FBQzZKLFNBQVMsSUFBSSxJQUFJLENBQUNBLFNBQVMsQ0FBQ1QsS0FBSyxDQUFDQyxLQUFLLEVBQUV6RixLQUFLLEVBQUUsSUFBSSxDQUFDdEYsS0FBSyxDQUFDO0lBQ3BFOztJQUVBO0lBQ0E7SUFDQThMLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQ1AsTUFBTSxDQUFDLENBQUNRLE9BQU8sQ0FBQyxDQUFBakIsS0FBSyxLQUFJO01BQ3hDO01BQ0EsSUFBSW1CLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDckIsS0FBSyxDQUFDekYsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDcEMsSUFBSSxDQUFDc0csb0JBQW9CLENBQUNiLEtBQUssQ0FBQ3pGLEtBQUssQ0FBQztNQUMxQztJQUNKLENBQUMsQ0FBQztFQUNOO0FBQ0o7O0FBRUE7QUFDQTtBQUNPLE1BQU0rRyxZQUFZLFNBQVM1TSxlQUFlLENBQUM7O0VBRTlDO0VBQ0E7RUFDQUMsV0FBV0EsQ0FBQ00sS0FBSyxFQUFrQixLQUFoQnNNLE9BQU8sR0FBQXBNLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLElBQUk7SUFDN0IsS0FBSyxDQUFDLENBQUM7O0lBRVAsSUFBSSxDQUFDRixLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDdU0sTUFBTSxHQUFHRCxPQUFPO0lBQ3JCLElBQUksQ0FBQ2pLLE1BQU0sR0FBRyxJQUFJLENBQUNyQyxLQUFLLENBQUNxQyxNQUFNOztJQUUvQjtJQUNBLElBQUksQ0FBQ21LLFFBQVEsR0FBRyxJQUFJOztJQUVwQjtJQUNBLElBQUksQ0FBQ0MsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDOztJQUV4QjtJQUNBLElBQUksQ0FBQzNMLFNBQVMsR0FBRyxJQUFJLENBQUNELFdBQVcsQ0FBQyxDQUFDLENBQUNFLGFBQWEsQ0FBQyxLQUFLLENBQUM7SUFDeEQsSUFBSSxDQUFDRCxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLHNCQUFzQixDQUFDOztJQUVwRDtJQUNBLElBQUksQ0FBQ2UsTUFBTSxDQUFDTSxVQUFVLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUM5QixTQUFTLENBQUM7O0lBRWxEO0lBQ0EsSUFBSSxDQUFDZCxLQUFLLENBQUM2QyxjQUFjLENBQUMsSUFBSSxDQUFDOztJQUUvQjtJQUNBLElBQUksQ0FBQzZKLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVksQ0FBQ3hILElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEQsSUFBSSxDQUFDN0MsTUFBTSxDQUFDTSxVQUFVLENBQUNWLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUN5SyxZQUFZLENBQUM7O0lBRXZFLElBQUksQ0FBQzFNLEtBQUssQ0FBQzJNLGtCQUFrQixDQUFDLENBQUM7RUFDbkM7O0VBRUFwSyxJQUFJQSxDQUFBLEVBQUc7SUFDSCxJQUFJLENBQUN2QyxLQUFLLENBQUMrQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ1YsTUFBTSxDQUFDTSxVQUFVLENBQUNpSyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDRixZQUFZLENBQUM7SUFDMUUsSUFBSSxDQUFDckssTUFBTSxDQUFDTSxVQUFVLENBQUNHLFdBQVcsQ0FBQyxJQUFJLENBQUNoQyxTQUFTLENBQUM7RUFDdEQ7O0VBRUE7RUFDQTtFQUNBK0wsZUFBZUEsQ0FBQ1AsT0FBTyxFQUFFO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxPQUFPO0lBQ3JCLElBQUksQ0FBQzNNLE1BQU0sQ0FBQyxDQUFDO0VBQ2pCOztFQUVBK00sWUFBWUEsQ0FBQ0ksS0FBSyxFQUFFOztJQUVoQjtJQUNBLElBQUksQ0FBQ3pLLE1BQU0sQ0FBQzBLLGNBQWMsQ0FBQ0Msc0JBQXNCLENBQUNGLEtBQUssQ0FBQzs7SUFFeEQ7SUFDQSxJQUFJLENBQUNOLFFBQVEsR0FBRyxJQUFJLENBQUN4TSxLQUFLLENBQUNpTixhQUFhLENBQUNILEtBQUssQ0FBQ0ksT0FBTyxFQUFFSixLQUFLLENBQUNLLE9BQU8sQ0FBQzs7SUFFdEUsSUFBSSxDQUFDeE4sTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUFBLE1BQU1BLENBQUEsRUFBRzs7SUFFTDtJQUNBLE1BQU0yRixLQUFLLEdBQUcsSUFBSSxDQUFDa0gsUUFBUSxJQUFJLElBQUksQ0FBQ0QsTUFBTSxJQUFJLElBQUksQ0FBQ3ZNLEtBQUssQ0FBQ29OLE9BQU8sQ0FBQyxJQUFJLENBQUNaLFFBQVEsQ0FBQ25KLENBQUMsRUFBRSxJQUFJLENBQUNtSixRQUFRLENBQUNsSixDQUFDLENBQUM7O0lBRWxHO0lBQ0EsTUFBTThCLElBQUksR0FBR0UsS0FBSyxJQUFJLElBQUksQ0FBQ2lILE1BQU0sQ0FBQ2pILEtBQUssQ0FBQzs7SUFFeEM7SUFDQSxJQUFJLENBQUN4RSxTQUFTLENBQUNtRSxXQUFXLEdBQUdHLElBQUksSUFBSSxFQUFFOztJQUV2QztJQUNBLElBQUksQ0FBQ0EsSUFBSSxFQUFFO01BQ1AsSUFBSSxDQUFDdEUsU0FBUyxDQUFDRSxLQUFLLENBQUN5RSxVQUFVLEdBQUcsUUFBUTtNQUMxQztJQUNKOztJQUVBO0lBQ0EsSUFBSSxDQUFDM0UsU0FBUyxDQUFDRSxLQUFLLENBQUN5RSxVQUFVLEdBQUcsU0FBUzs7SUFFM0M7SUFDQUgsS0FBSyxDQUFDZ0YsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLE1BQU0rQyxNQUFNLEdBQUcvSCxLQUFLLENBQUNhLElBQUksQ0FBQ3FFLEdBQUc7O0lBRTdCO0lBQ0EsTUFBTThDLE1BQU0sR0FBRyxJQUFJLENBQUN0TixLQUFLLENBQUNvRCxhQUFhLENBQUNpSyxNQUFNLENBQUNoSyxDQUFDLEVBQUVnSyxNQUFNLENBQUMvSixDQUFDLENBQUM7O0lBRTNEO0lBQ0FnSyxNQUFNLENBQUNoSyxDQUFDLElBQUksSUFBSSxDQUFDbUosYUFBYTs7SUFFOUI7SUFDQSxNQUFNdkQsS0FBSyxHQUFHLElBQUksQ0FBQzdHLE1BQU0sQ0FBQ2tMLE1BQU0sQ0FBQ3JFLEtBQUs7SUFDdEMsTUFBTXNFLE1BQU0sR0FBRyxJQUFJLENBQUNuTCxNQUFNLENBQUNrTCxNQUFNLENBQUNDLE1BQU07O0lBRXhDO0lBQ0EsSUFBSSxDQUFDMU0sU0FBUyxDQUFDRSxLQUFLLENBQUN5TSxLQUFLLEdBQUt2RSxLQUFLLEdBQUdvRSxNQUFNLENBQUNqSyxDQUFDLEdBQUksSUFBSTtJQUN2RCxJQUFJLENBQUN2QyxTQUFTLENBQUNFLEtBQUssQ0FBQzBNLE1BQU0sR0FBSUYsTUFBTSxHQUFHRixNQUFNLENBQUNoSyxDQUFDLEdBQUksSUFBSTs7SUFFeEQsSUFBSSxDQUFDeEMsU0FBUyxDQUFDRSxLQUFLLENBQUNJLElBQUksR0FBRyxNQUFNO0lBQ2xDLElBQUksQ0FBQ04sU0FBUyxDQUFDRSxLQUFLLENBQUNHLEdBQUcsR0FBRyxNQUFNO0VBQ3JDO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU13TSxZQUFZLENBQUM7O0VBRXRCak8sV0FBV0EsQ0FBQSxFQUFHO0lBQ1Y7SUFDQSxJQUFJLENBQUNrTyxjQUFjLEdBQUcsSUFBSTtFQUM5Qjs7RUFFQTtFQUNBO0VBQ0FqTyxNQUFNQSxDQUFDdUMsQ0FBQyxFQUFFO0lBQ04sSUFBSSxDQUFDMEwsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGdCQUFnQixDQUFDNUwsQ0FBQyxDQUFDNkwsT0FBTyxFQUFFN0wsQ0FBQyxDQUFDOEwsT0FBTyxDQUFDO0VBQ3pFOztFQUVBO0VBQ0FDLFlBQVlBLENBQUNwSixLQUFLLEVBQUU7SUFDaEIsT0FBT0EsS0FBSyxDQUFDL0QsU0FBUyxJQUFJK0QsS0FBSyxDQUFDL0QsU0FBUyxLQUFLLElBQUksQ0FBQzhNLGNBQWM7RUFDckU7O0VBRUE7RUFDQTtFQUNBO0VBQ0FNLGFBQWFBLENBQUNDLE1BQU0sRUFBRTtJQUNsQixPQUFPQSxNQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUFBQyxDQUFDLEtBQUksSUFBSSxDQUFDSixZQUFZLENBQUNJLENBQUMsQ0FBQyxDQUFDO0VBQ3REO0FBQ0o7O0FBRUE7QUFDQTtBQUNPLE1BQU1DLFlBQVksQ0FBQztFQUN0QjVPLFdBQVdBLENBQUNNLEtBQUssRUFBRXVPLFVBQVUsRUFBRTs7SUFFM0IsSUFBSSxDQUFDdk8sS0FBSyxHQUFRQSxLQUFLO0lBQ3ZCLElBQUksQ0FBQ3VPLFVBQVUsR0FBR0EsVUFBVTs7SUFFNUI7SUFDQSxJQUFJLENBQUNyQyxNQUFNLEdBQUcsRUFBRTs7SUFFaEIsSUFBSSxDQUFDekcsVUFBVSxHQUFHLEtBQUs7SUFDdkIsSUFBSSxDQUFDL0QsVUFBVSxDQUFDLElBQUksQ0FBQzs7SUFFckI7SUFDQSxJQUFJLENBQUM4TSxjQUFjLEdBQUdwTyxTQUFTO0lBQy9CLElBQUksQ0FBQ3FPLGNBQWMsR0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsQzs7RUFFQW5NLElBQUlBLENBQUEsRUFBRztJQUNIO0lBQ0E7SUFDQSxJQUFJLENBQUNiLFVBQVUsQ0FBQyxLQUFLLENBQUM7RUFDMUI7O0VBRUE7RUFDQWlOLE9BQU9BLENBQUM1RyxJQUFJLEVBQUU7SUFDVixJQUFJQSxJQUFJLEtBQUssSUFBSSxDQUFDQSxJQUFJLEVBQUU7TUFDcEIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7TUFDaEIsSUFBSSxDQUFDNkcscUJBQXFCLENBQUMsQ0FBQztNQUM1QixJQUFJLENBQUNqUCxNQUFNLENBQUMsQ0FBQztJQUNqQjtFQUNKOztFQUVBK0IsVUFBVUEsQ0FBQ3pCLE9BQU8sRUFBRTs7SUFFaEI7SUFDQSxJQUFJLElBQUksQ0FBQ0EsT0FBTyxLQUFLQSxPQUFPLEVBQUU7TUFDMUI7SUFDSjtJQUNBLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxPQUFPOztJQUV0QjtJQUNBLElBQUlBLE9BQU8sRUFBRTtNQUNULElBQUksQ0FBQ0QsS0FBSyxDQUFDNkMsY0FBYyxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDLE1BQU07TUFDSCxJQUFJLENBQUM3QyxLQUFLLENBQUMrQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDdEM7SUFDQSxJQUFJLENBQUNwRCxNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQWtQLFdBQVdBLENBQUEsRUFBRztJQUNWLElBQUksQ0FBQzNDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDLENBQUE4QyxDQUFDLEtBQUksSUFBSSxDQUFDUCxVQUFVLENBQUNRLFdBQVcsQ0FBQ0QsQ0FBQyxDQUFDLENBQUM7SUFDeEQsSUFBSSxDQUFDNUMsTUFBTSxHQUFHLEVBQUU7RUFDcEI7O0VBRUE4QyxhQUFhQSxDQUFDQyxLQUFLLEVBQUVqSCxTQUFTLEVBQUU7SUFDNUIsT0FBTyxlQUFlLEdBQUdBLFNBQVMsR0FBRyxHQUFHLEdBQUdpSCxLQUFLO0VBQ3BEOztFQUVBO0VBQ0FDLFFBQVFBLENBQUNELEtBQUssRUFBRWpILFNBQVMsRUFBRTs7SUFFdkI7SUFDQSxNQUFNbUgsQ0FBQyxHQUFHLElBQUkxTyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLE1BQU0wTyxDQUFDLEdBQUcsSUFBSTNPLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDcUgsSUFBSSxDQUFDUSxPQUFPLENBQUMwRyxLQUFLLEVBQUVFLENBQUMsRUFBRUMsQ0FBQyxFQUFFcEgsU0FBUyxDQUFDOztJQUV6QztJQUNBLE1BQU1xSCxJQUFJLEdBQUcsSUFBSTNRLG9EQUFRLENBQUMsQ0FBQ3lRLENBQUMsRUFBRUMsQ0FBQyxDQUFDLENBQUM7SUFDakNDLElBQUksQ0FBQy9LLElBQUksR0FBRyxJQUFJLENBQUMwSyxhQUFhLENBQUNDLEtBQUssRUFBRWpILFNBQVMsQ0FBQzs7SUFFaEQ7SUFDQXFILElBQUksQ0FBQ3JPLEtBQUssQ0FBQ3NPLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMzQkQsSUFBSSxDQUFDck8sS0FBSyxDQUFDdU8sU0FBUyxHQUFHLElBQUksQ0FBQ3hILElBQUksQ0FBQy9HLEtBQUssQ0FBQ3VPLFNBQVMsR0FBRyxHQUFHO0lBQ3RERixJQUFJLENBQUNyTyxLQUFLLENBQUN3TyxTQUFTLEdBQUcsSUFBSSxDQUFDekgsSUFBSSxDQUFDL0csS0FBSyxDQUFDeU8sUUFBUSxHQUFHLEdBQUc7O0lBRXJEO0lBQ0EsSUFBSVIsS0FBSyxJQUFJLElBQUksQ0FBQ1IsY0FBYyxJQUFJLElBQUksQ0FBQ0QsY0FBYyxFQUFFO01BQ3JEYSxJQUFJLENBQUNyTyxLQUFLLENBQUMwTyxTQUFTLEdBQUcsSUFBSSxDQUFDbEIsY0FBYztJQUM5Qzs7SUFFQSxJQUFJLENBQUNELFVBQVUsQ0FBQ29CLFFBQVEsQ0FBQ04sSUFBSSxDQUFDO0lBQzlCLElBQUksQ0FBQ25ELE1BQU0sQ0FBQzBELElBQUksQ0FBQ1AsSUFBSSxDQUFDO0VBQzFCOztFQUVBVCxxQkFBcUJBLENBQUEsRUFBRzs7SUFFcEIsSUFBSSxJQUFJLENBQUNILGNBQWMsS0FBSyxDQUFDLENBQUMsRUFBRTtNQUM1QjtJQUNKOztJQUVBLElBQUksQ0FBQ0QsY0FBYyxHQUFHLElBQUk7SUFDMUIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQUksQ0FBQ29CLFNBQVM7SUFDZCxJQUFJLENBQUNsUSxNQUFNLENBQUMsQ0FBQztFQUNqQjs7RUFFQTtFQUNBbVEsa0JBQWtCQSxDQUFDYixLQUFLLEVBQUVqSCxTQUFTLEVBQUUrSCxLQUFLLEVBQUU7O0lBRXhDO0lBQ0EsSUFBSWQsS0FBSyxLQUFLLElBQUksQ0FBQ1IsY0FBYyxJQUFJc0IsS0FBSyxLQUFLLElBQUksQ0FBQ3ZCLGNBQWMsRUFBRTtNQUNoRTtJQUNKOztJQUVBLElBQUksQ0FBQ0EsY0FBYyxHQUFHdUIsS0FBSztJQUMzQixJQUFJLENBQUN0QixjQUFjLEdBQUdRLEtBQUs7SUFDM0IsSUFBSSxDQUFDUCxrQkFBa0IsR0FBRzFHLFNBQVM7SUFDbkMsSUFBSSxDQUFDckksTUFBTSxDQUFDLENBQUM7RUFDakI7O0VBRUE7RUFDQUEsTUFBTUEsQ0FBQSxFQUFHOztJQUVMLElBQUksQ0FBQ2tQLFdBQVcsQ0FBQyxDQUFDOztJQUVsQjtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUM1TyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM4SCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUNBLElBQUksQ0FBQ2lJLE1BQU0sQ0FBQyxDQUFDLEVBQUU7TUFDcEQ7SUFDSjs7SUFFQTtJQUNBLEtBQUssSUFBSUMsQ0FBQyxHQUFDLENBQUMsRUFBRUEsQ0FBQyxHQUFDLElBQUksQ0FBQ2xJLElBQUksQ0FBQ21JLFNBQVMsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7O01BRXRDO01BQ0EsTUFBTXRLLFNBQVMsR0FBRyxJQUFJLENBQUNvQyxJQUFJLENBQUNuQyxZQUFZLENBQUNxSyxDQUFDLENBQUM7TUFDM0MsS0FBSyxJQUFJOUQsQ0FBQyxHQUFDLENBQUMsRUFBRUEsQ0FBQyxHQUFDeEcsU0FBUyxFQUFFd0csQ0FBQyxFQUFFLEVBQUU7O1FBRTVCO1FBQ0EsTUFBTWdFLEtBQUssR0FBRyxJQUFJLENBQUNwSSxJQUFJLENBQUNvSSxLQUFLLENBQUNoRSxDQUFDLEVBQUU4RCxDQUFDLENBQUM7UUFDbkMsSUFBSUUsS0FBSyxFQUFFO1VBQ1AsSUFBSSxDQUFDakIsUUFBUSxDQUFDL0MsQ0FBQyxFQUFFOEQsQ0FBQyxDQUFDO1FBQ3ZCO01BQ0o7SUFDSjtFQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9FZGl0MkQvQ2FudmFzR2l6bW8uanM/ZWUzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE1hdGgyRCB9IGZyb20gJy4vTWF0aDJELmpzJztcbmltcG9ydCB7IFBvbHlsaW5lLCBQb2x5QmFzZSB9IGZyb20gJy4vRWRpdFNoYXBlcy5qcyc7XG5cbi8vIGludCB2YWx1ZSB0byBzdHJpbmcsIGUuZy4gNTAgPT4gXCI1MHB4XCIgLSB0byB1c2VkIGZvciBzdHlsZSBhc3NpZ25tZW50cy5cbmNvbnN0IHRvUGl4ZWxzID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiB2YWwudG9TdHJpbmcoKSArICdweCc7XG59O1xuXG5leHBvcnQgY29uc3QgQWxpZ25YID0ge1xuICAgIExlZnQ6ICAgMSxcbiAgICBDZW50ZXI6IDIsXG4gICAgUmlnaHQ6ICAzXG59O1xuXG5leHBvcnQgY29uc3QgQWxpZ25ZID0ge1xuICAgIFRvcDogICAgMSxcbiAgICBDZW50ZXI6IDIsXG4gICAgQm90dG9tOiAzXG59O1xuXG5jb25zdCBhdiA9IEF1dG9kZXNrLlZpZXdpbmc7XG5cbi8vIEJhc2UgY2xhc3MgZm9yIGFueSBnaXptbyB0aGF0IG5lZWRzIHRvIGJlIHN5bmNocm9uaXplZCB3aXRoIHRoZSBzaGFwZXMgb2YgYW4gRWRpdExheWVyLlxuZXhwb3J0IGNsYXNzIENhbnZhc0dpem1vQmFzZSB7XG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgLy8gQ2FsbGVkIHdoZW5ldmVyIHRoZSBsYXllciBvciBjYW1lcmEgY2hhbmdlcy5cbiAgICB1cGRhdGUoKSB7fTtcbn1cblxuYXYuR2xvYmFsTWFuYWdlck1peGluLmNhbGwoQ2FudmFzR2l6bW9CYXNlLnByb3RvdHlwZSk7XG5cbi8vIEEgQ2FudmFzR2l6bW8gaXMgYW4gaHRtbCBkaXYgYW5jaG9yZWQgYXQgYSBwb3NpdGlvbiBpbiBsYXllci1jb29yZHNcbmV4cG9ydCBjbGFzcyBDYW52YXNHaXptbyBleHRlbmRzIENhbnZhc0dpem1vQmFzZSB7XG4gICAgY29uc3RydWN0b3IobGF5ZXIsIHZpc2libGUgPSB0cnVlLCBjbGFzc05hbWUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmxheWVyID0gbGF5ZXI7XG4gICAgICAgIHRoaXMuc2V0R2xvYmFsTWFuYWdlcihsYXllci5nbG9iYWxNYW5hZ2VyKTtcblxuICAgICAgICAvLyBwb3NpdGlvbiBpbiBsYXllci1jb29yZHMuIFRoZSB0cmFuc2Zvcm0gb3JpZ2luIG9mIHRoZSBkaXYgd2lsbCBhcHBlYXIgYXQgdGhpcyBwb3NpdGlvbi5cbiAgICAgICAgdGhpcy5sYXllclBvcyA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICAgICAgLy8gcG9zaXRpb24gaW4gY2FudmFzLWNvb3JkcyAodXBkYXRlZCBiYXNlZCBvbiB0aGlzLmxheWVyUG9zIGFuZCBjYW1lcmEpXG4gICAgICAgIHRoaXMuY2FudmFzUG9zID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblxuICAgICAgICAvLyBodG1sIGNvbnRlbnQgdG8gYmUgc2hvd25cbiAgICAgICAgY29uc3QgX2RvY3VtZW50ID0gdGhpcy5nZXREb2N1bWVudCgpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBsYWJlbCBpcyBkaXNwbGF5ZWQgb24gdG9wIG9mIHRoZSBjYW52YXMgYW5kIG5vdCBcInB1c2hlZCBhd2F5XCIgYnkgaXQuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblxuICAgICAgICAvLyBSb3RhdGUgYXJvdW5kIGdpem1vIGNlbnRlclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnNTAlIDUwJSc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcblxuICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IGltbWVkaWF0ZWx5IGlmIHdhbnRlZFxuICAgICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmFsaWduWCA9IEFsaWduWC5DZW50ZXI7XG4gICAgICAgIHRoaXMuYWxpZ25ZID0gQWxpZ25ZLkNlbnRlcjtcblxuICAgICAgICAvLyBDbG9ja3dpc2Ugcm90YXRpb24gYW5nbGUgaW4gZGVncmVlcy4gUm90YXRlcyBhcm91bmQgY2VudGVyLlxuICAgICAgICB0aGlzLmFuZ2xlID0gMDtcblxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRWaXNpYmxlKHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBmYWRlSW4vT3V0IGVmZmVjdHNcbiAgICAgICAgY29uc3Qgc2V0T3BhY2l0eSA9IHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUub3BhY2l0eSA9IHQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub3BhY2l0eVBhcmFtID0gbmV3IEF1dG9kZXNrLlZpZXdpbmcuUHJpdmF0ZS5BbmltYXRlZFBhcmFtKDEuMCwgc2V0T3BhY2l0eSwgMC41KTtcblxuICAgICAgICAvLyBCeSBkZWZhdWx0LCBqdXN0IGRlbGVnYXRlIHRvIHZpZXdlciBjb250ZXh0IG1lbnUuIEVkaXQyRENvbnRleHRNZW51IHdpbGwgdGFrZSBjYXJlXG4gICAgICAgIC8vIHRoYXQgaXQgaXMgcHJvcGVybHkgY29uZmlndXJlZC5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4ge1xuXG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBNYWM6IEJ5IGRlZmF1bHQsIExNVidzIGNvbnRleHQgbWVudSBpcyByZXNwb25kcyB0byByaWdodCBtb3VzZS1idXR0b24uXG4gICAgICAgICAgICAvLyBPbiBNYWMsIEN0cmwgKyBMZWZ0IGFsc28gdHJpZ2dlcnMgY29udGV4dCBtZW51IGV2ZW50cy4gVGhlc2UgbXVzdCBiZSBpZ25vcmVkIGhlcmUsIGJlY2F1c2U6XG4gICAgICAgICAgICAvLyAgICBhKSBDb25zaXN0ZW5jeTogTE1WIGlnbm9yZXMgdGhlbSBhcyB3ZWxsLlxuICAgICAgICAgICAgLy8gICAgYikgQ29uZmxpY3RzOiAgIFdoZW4gaW5zZXJ0aW5nIGEgdmVydGV4LCB3ZSBkb24ndCB3YW50IHRoZSBDb250ZXh0TWVudSB0byBzaG93IHVwLlxuICAgICAgICAgICAgY29uc3QgaXNMZWZ0QnV0dG9uID0gKGUuYnV0dG9ucyA9PSAxKTtcbiAgICAgICAgICAgIGlmICghaXNMZWZ0QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXllci52aWV3ZXIudHJpZ2dlckNvbnRleHRNZW51KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkdG9yKCkge1xuICAgICAgICB0aGlzLnNldFZpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIHNldFZpc2libGUodmlzaWJsZSwgYXV0b1VwZGF0ZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHZpc2libGUgPT0gdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5hZGRUb0NhbnZhcyhhdXRvVXBkYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbUNhbnZhcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcbiAgICB9XG5cbiAgICBhZGRUb0NhbnZhcyhhdXRvVXBkYXRlID0gdHJ1ZSkge1xuICAgICAgICAvLyBOb3RlOiBJdCdzIGVzc2VudGlhbCB0aGF0IHdlIGFkZCBpdCB0byB2aWV3ZXIuY2FudmFzV3JhcCBpbnN0ZWFkIG9mIHZpZXdlci5jb250YWluZXI6XG4gICAgICAgIC8vICAgICAgIFRvb2xDb250cm9sbGVyIGxpc3RlbnMgdG8gZXZlbnRzIG9uIGNhbnZhc1dyYXAuIFRoZXJlZm9yZSwgaWYgd2Ugd291bGQgYWRkXG4gICAgICAgIC8vICAgICAgIGl0IHRvIHZpZXdlci5jb250YWluZXIsIGFsbCBtb3VzZSBldmVudHMgY2FwdHVyZWQgd291bGQgbmV2ZXIgcmVhY2ggdGhlIFRvb2xDb250cm9sbGVyXG4gICAgICAgIC8vICAgICAgIG5vIG1hdHRlciB3aGV0aGVyIHRoZSBnaXptbyBoYW5kbGVzIHRoZW0gb3Igbm90LlxuICAgICAgICB0aGlzLmxheWVyLnZpZXdlci5jYW52YXNXcmFwLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5sYXllci5hZGRDYW52YXNHaXptbyh0aGlzKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBwb3NpdGlvbiBpcyBjb3JyZWN0XG4gICAgICAgIGlmIChhdXRvVXBkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRnJvbUNhbnZhcygpIHtcbiAgICAgICAgdGhpcy5sYXllci52aWV3ZXIuY2FudmFzV3JhcC5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlQ2FudmFzR2l6bW8odGhpcyk7XG4gICAgfVxuXG4gICAgc2V0QWxpZ25YKGFsaWduWCkge1xuICAgICAgICB0aGlzLmFsaWduWCA9IGFsaWduWDtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBzZXRBbGlnblkoYWxpZ25ZKSB7XG4gICAgICAgIHRoaXMuYWxpZ25ZID0gYWxpZ25ZO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIENsb2Nrd2lzZSBhbmdsZSBpbiBkZWdyZWVzXG4gICAgLy9cbiAgICAvLyBOb3RlOiBEbyBub3QgdXNlICdwb3NpdGlvbjphYnNvbHV0ZScgaW4gY2hpbGQgaHRtbCBlbGVtZW50cy5cbiAgICAvLyAgICAgICBPdGhlcndpc2UsIHRoZSBjb250ZW50IGJveCB3aWxsIGJlIGVtcHR5IGFuZCBpdCB3aWxsIG5vdCByb3RhdGUgYXJvdW5kIGFueW1vcmUuXG4gICAgc2V0Um90YXRpb24oYW5nbGUpIHtcbiAgICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5jYW52YXNQb3MuY29weSh0aGlzLmxheWVyLmxheWVyVG9DYW52YXModGhpcy5sYXllclBvcy54LCB0aGlzLmxheWVyUG9zLnkpKTtcblxuICAgICAgICBjb25zdCBwID0gdGhpcy5jYW52YXNQb3M7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5jb250YWluZXIuc3R5bGU7XG5cbiAgICAgICAgLy8gc2V0IGxlZnQvdG9wIHRvIGdpem1vIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IGxlZnQgPSB0b1BpeGVscyhwLngpO1xuICAgICAgICBjb25zdCB0b3AgID0gdG9QaXhlbHMocC55KTtcblxuICAgICAgICAvLyBDaG9vc2UgdHJhbnNsYXRpb24gb2Zmc2V0IGluICUgYmFzZWQgb24gWC1hbGlnbm1lbnRcbiAgICAgICAgbGV0IHR4O1xuICAgICAgICBzd2l0Y2godGhpcy5hbGlnblgpIHtcbiAgICAgICAgICAgIGNhc2UgQWxpZ25YLkxlZnQ6ICAgdHggPSAnMCUnOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQWxpZ25YLkNlbnRlcjogdHggPSAnLTUwJSc7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBBbGlnblguUmlnaHQ6ICB0eCA9ICctMTAwJSc7IGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHR5O1xuICAgICAgICBzd2l0Y2godGhpcy5hbGlnblkpIHtcbiAgICAgICAgICAgIGNhc2UgQWxpZ25ZLlRvcDogICAgdHkgPSAnMCUnOyAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQWxpZ25ZLkNlbnRlcjogdHkgPSAnLTUwJSc7ICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQWxpZ25ZLkJvdHRvbTogdHkgPSAnLTEwMCUnOyBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0cmFuc2Zvcm0gYmFzZWQgb24gcm90YXRpb24gYW5nbGUgYW5kIGFsaWdubWVudFxuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7bGVmdH0sICR7dG9wfSkgdHJhbnNsYXRlKCR7dHh9LCAke3R5fSkgcm90YXRlKCR7dGhpcy5hbmdsZX1kZWcpYDtcbiAgICB9XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gaW4gbGF5ZXIgY29vcmRzXG4gICAgc2V0UG9zaXRpb24oeCwgeSkge1xuICAgICAgICB0aGlzLmxheWVyUG9zLnNldCh4LCB5KTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBzZXRDbGFzc0VuYWJsZWQoY2xhc3NOYW1lLCBlbmFibGVkKSB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZWxlY3Rpb24gc3RhdGUgaXMgbWFuYWdlZCB1c2luZyBhIGNzcy1jbGFzcyAnc2VsZWN0ZWQnLlxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIG9ubHkgaGFzIGFuIGVmZmVjdCBpZiB0aGUgY3NzIHN0eWxlIHVzZWQgZm9yIHRoZSBnaXptbyBzdXBwb3J0cyBpdC5cbiAgICBzZXRTZWxlY3RlZChzZWxlY3RlZCkge1xuICAgICAgICB0aGlzLnNldENsYXNzRW5hYmxlZCgnc2VsZWN0ZWQnLCBzZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgaXNTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKTtcbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbDogSG92ZXItZWZmZWN0IGZvciBnaXptb3MgdGhhdCBjYW4gYmUgY2xpY2tlZCBvciBkcmFnZ2VkLlxuICAgIHNldEhvdmVyRW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuc2V0Q2xhc3NFbmFibGVkKCdlbmFibGUtaG92ZXInLCBlbmFibGVkKTtcbiAgICB9XG5cbiAgICAvLyBPcHRpb25hbDogQXNzaWduIGEgbmFtZSB0byBnaXptbyBhbmQgZGl2IGVsZW1lbnQgdG8gZmFjaWxpdGF0ZSBkZWJ1Z2dpbmcgYW5kIHRlc3RpbmcuXG4gICAgc2V0TmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlkID0gbmFtZSA/IG5hbWUgOiAnJztcbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgY3NzIG9wYWNpdHkuIElmIHdhbnRlZCwgdGhlIGNoYW5nZSBjYW4gYmUgc21vb3RobHkgZmFkZWQuXG4gICAgc2V0T3BhY2l0eSh2YWx1ZSwgYW5pbWF0ZSkge1xuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5UGFyYW0uZmFkZVRvKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eVBhcmFtLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQ29uZmlndXJlIENhbnZhc0dpem1vIGFzIGEgdGV4dCBsYWJlbC5cbmNvbnN0IGluaXRUZXh0TGFiZWwgPSAoZ2l6bW8pID0+IHtcblxuICAgIC8vIFVzZSBtZWFzdXJlLXRvb2wgc3R5bGVzIGJ5IGRlZmF1bHRcbiAgICBnaXptby5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZWRpdDJkLWxhYmVsJyk7XG4gICAgZ2l6bW8uY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcblxuICAgIC8vIENyZWF0ZSB0ZXh0RGl2IGNoaWxkIGRpdlxuICAgIGNvbnN0IF9kb2N1bWVudCA9IGdpem1vLmdldERvY3VtZW50KCk7XG4gICAgZ2l6bW8udGV4dERpdiA9IF9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBnaXptby50ZXh0RGl2LmNsYXNzTGlzdC5hZGQoJ2VkaXQyZC1sYWJlbC10ZXh0Jyk7XG4gICAgZ2l6bW8uY29udGFpbmVyLmFwcGVuZENoaWxkKGdpem1vLnRleHREaXYpO1xuXG4gICAgLy8gQWRkIHNldFRleHQgY29udmVuaWVuY2UgZnVuY3Rpb25cbiAgICBnaXptby5zZXRUZXh0ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHRoaXMudGV4dERpdi50ZXh0Q29udGVudCA9IHN0cjtcbiAgICB9LmJpbmQoZ2l6bW8pO1xufTtcblxuLy8gU2ltcGxlIFRleHRMYWJlbCBib3VuZCB0byBhIGZpeGVkIHBvc2l0aW9uIGluIGxheWVyIGNvb3Jkc1xuZXhwb3J0IGNsYXNzIFRleHRMYWJlbCBleHRlbmRzIENhbnZhc0dpem1vIHtcblxuICAgIGNvbnN0cnVjdG9yKGxheWVyLCB0ZXh0LCBjbGFzc05hbWUpIHtcbiAgICAgICAgc3VwZXIobGF5ZXIsIHRydWUsIGNsYXNzTmFtZSk7XG4gICAgICAgIGluaXRUZXh0TGFiZWwodGhpcyk7XG4gICAgfVxuXG59O1xuXG4vLyBBIFNoYXBlTGFiZWwgaXMgYSB0ZXh0IGxhYmVsIHdob3NlIGFuY2hvciBwb3NpdGlvbiBpcyBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgYmJveCBjZW50ZXIgb2YgYSBzaGFwZSBpbiBhIGxheWVyLlxuZXhwb3J0IGNsYXNzIFNoYXBlTGFiZWwgZXh0ZW5kcyBDYW52YXNHaXptbyB7XG5cbiAgICBjb25zdHJ1Y3RvcihzaGFwZSwgbGF5ZXIsIHZpc2libGUgPSB0cnVlLCBjbGFzc05hbWUpIHtcbiAgICAgICAgc3VwZXIobGF5ZXIsIHZpc2libGUsIGNsYXNzTmFtZSk7XG5cbiAgICAgICAgaW5pdFRleHRMYWJlbCh0aGlzKTtcblxuICAgICAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG5cbiAgICAgICAgLy8gQ2FuIGJlIHNldCB0byBoaWRkZW4gdG8gdGVtcG9yYXJpbHkgaGlkZSB0aGUgbGFiZWxcbiAgICAgICAgdGhpcy52YWx1ZVZhbGlkID0gdHJ1ZTtcblxuICAgICAgICAvLyBPcHRpb25hbDogU2hpZnQgbGFiZWwgYnkgYSBjb3VwbGUgb2YgcGl4ZWxzLlxuICAgICAgICB0aGlzLnBpeGVsT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hhcGUgJiYgdGhpcy52YWx1ZVZhbGlkKSB7XG4gICAgICAgICAgICAvLyBTZXQgaXQgdG8gdmlzaWJsZSAoaW4gY2FzZSBwb2x5Z29uIHdhcyBudWxsIGJlZm9yZSlcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNoYXBlLmlzUG9seWxpbmUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2VDb3VudCA9IHRoaXMuc2hhcGUuZ2V0RWRnZUNvdW50KDApO1xuICAgICAgICAgICAgICAgIC8vIEZvciBhIHN0YXJ0LCBzaW1wbHkgcG9zaXRpb24gdGhlIGxhYmVsIG9uIHRoZSBzZWdtZW50IHJvdWdobHkgaW4gdGhlIG1pZGRsZSBvZiB0aGUgcG9seWxpbmVcbiAgICAgICAgICAgICAgICBjb25zdCBlZGdlVG9MYWJlbCA9IE1hdGguZmxvb3IoZWRnZUNvdW50IC8gMik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hhcGUuZWRnZUluZGV4VmFsaWQoZWRnZVRvTGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBsYXllciBwb3NpdGlvbiB0byBjZW50ZXIgcG9pbnQgb2YgdGhlIHNlZ21lbnQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhcGUuZ2V0UG9pbnRPbkVkZ2UoZWRnZVRvTGFiZWwsIDAuNSwgMCwgdGhpcy5sYXllclBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRm9yIGEgc3RhcnQsIHNpbXBseSB1c2UgdGhlIGJib3ggY2VudGVyIG9mIHRoZSBwb2x5Z29uLiBJbiBzb21lIGNhc2VzLCB0aGlzIG1pZ2h0IGVuZCB1cCBvdXRzaWRlIHRoZVxuICAgICAgICAgICAgICAgIC8vIHBvbHlnb24sIHNvIHdlIG1heSBjb25zaWRlciBzb21ldGhpbmcgc21hcnRlciBsYXRlci5cbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlLmNvbXB1dGVCQm94KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zaGFwZS5iYm94LmdldENlbnRlcih0aGlzLmxheWVyUG9zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT3B0aW9uYWw6IFNoaWZ0IGJ5IGEgZmV3IHBpeGVsc1xuICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b1VuaXRzID0gdGhpcy5sYXllci5nZXRVbml0c1BlclBpeGVsKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpZnRYID0gdGhpcy5waXhlbE9mZnNldC54ICogdG9Vbml0cztcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlmdFkgPSB0aGlzLnBpeGVsT2Zmc2V0LnkgKiB0b1VuaXRzO1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXJQb3MueCArPSBzaGlmdFg7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXllclBvcy55ICs9IHNoaWZ0WTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3VwZXIudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTaGFwZShzaGFwZSkge1xuICAgICAgICB0aGlzLnNoYXBlID0gc2hhcGU7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxufVxuXG4vLyBPbmx5IHdvcmtzIGZvciBzaGFwZXMgd2l0aCBnZXRMZW5ndGgoKSBmdW5jdGlvblxuZXhwb3J0IGNsYXNzIExlbmd0aExhYmVsIGV4dGVuZHMgU2hhcGVMYWJlbCB7XG5cbiAgICAvLyBAcGFyYW0ge1BvbHlsaW5lfSAgICBwb2x5bGluZVxuICAgIC8vIEBwYXJhbSB7RWRpdExheWVyfSAgIGxheWVyXG4gICAgLy8gQHBhcmFtIHtVbml0SGFuZGxlcn0gdW5pdEhhbmRsZXIgLSB1bml0SGFuZGxlci5hcmVhVG9TdHJpbmcoKSBpcyByZXF1aXJlZCB0byBkZWZpbmUgaG93IHRvIGRpc3BsYXkgYXJlYSB2YWx1ZXMgYXMgc3RyaW5nLlxuICAgIC8vIEBwYXJhbSB7Ym9vbH0gICAgICAgIFt2aXNpYmxlXVxuICAgIGNvbnN0cnVjdG9yKHBvbHlsaW5lLCBsYXllciwgdW5pdEhhbmRsZXIsIHZpc2libGUgPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHBvbHlsaW5lLCBsYXllciwgdmlzaWJsZSk7XG4gICAgICAgIHRoaXMudW5pdEhhbmRsZXIgPSB1bml0SGFuZGxlcjtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIEdldCBzaGFwZSBsZW5ndGggKGlmIHNoYXBlIHN1cHBvcnRzIGl0KVxuICAgICAgICBjb25zdCBoYXNMZW5ndGggPSB0aGlzLnNoYXBlICYmIHRoaXMuc2hhcGUuZ2V0TGVuZ3RoO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBoYXNMZW5ndGggJiYgdGhpcy5zaGFwZS5nZXRMZW5ndGgodGhpcy51bml0SGFuZGxlci5tZWFzdXJlVHJhbnNmb3JtKTtcblxuICAgICAgICAvLyBIaWRlIGxhYmVsIGlmIHdlIGRvbid0IGhhdmUgYSB3ZWxsLWRlZmluZWQgbGVuZ3RoLlxuICAgICAgICAvLyBXZSBhbHNvIGhpZGUgaXQgaWYgbGVuZ3RoIGlzIDAuMCwgYmVjYXVzZSB0aGUgc2hhcGUgY2Fubm90IGJlIHZpc2libGUgYW55d2F5LlxuICAgICAgICB0aGlzLnZhbHVlVmFsaWQgPSBCb29sZWFuKGxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHRoaXMudmFsdWVWYWxpZCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMudW5pdEhhbmRsZXIubGVuZ3RoVG9TdHJpbmcobGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0VGV4dCh0ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExldCBiYXNlIGNsYXNzIHVwZGF0ZSBwb3NpdGlvblxuICAgICAgICBzdXBlci51cGRhdGUoKTtcbiAgICB9XG59XG5cbi8vIE9ubHkgd29ya3MgZm9yIHNoYXBlcyB3aXRoIGdldEFyZWEoKSBmdW5jdGlvblxuZXhwb3J0IGNsYXNzIEFyZWFMYWJlbCBleHRlbmRzIFNoYXBlTGFiZWwge1xuXG4gICAgLy8gQHBhcmFtIHtQb2x5Z29ufSAgICAgcG9seWdvblxuICAgIC8vIEBwYXJhbSB7RWRpdExheWVyfSAgIGxheWVyXG4gICAgLy8gQHBhcmFtIHtVbml0SGFuZGxlcn0gdW5pdEhhbmRsZXIgLSB1bml0SGFuZGxlci5hcmVhVG9TdHJpbmcoKSBpcyByZXF1aXJlZCB0byBkZWZpbmUgaG93IHRvIGRpc3BsYXkgYXJlYSB2YWx1ZXMgYXMgc3RyaW5nLlxuICAgIC8vIEBwYXJhbSB7Ym9vbH0gICAgICAgIFt2aXNpYmxlXVxuICAgIGNvbnN0cnVjdG9yKHBvbHlnb24sIGxheWVyLCB1bml0SGFuZGxlciwgdmlzaWJsZSA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIocG9seWdvbiwgbGF5ZXIsIHZpc2libGUpO1xuICAgICAgICB0aGlzLnVuaXRIYW5kbGVyID0gdW5pdEhhbmRsZXI7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7IC8vIHVwZGF0ZSB3aXRoIHByb3BlciB1bml0SGFuZGxlclxuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgLy8gRG9uJ3QgZGlzcGxheSB1bnRpbCBhIHVuaXRIYW5kbGVyIGlzIHNldFxuICAgICAgICBpZiAoIXRoaXMudW5pdEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBQb2x5QmFzZSB3aXRoIHNlbGYtaW50ZXJzZWN0aW9uczogRGlzcGxheSBhbiBlcnJvciBpbmRpY2F0b3IgaW4gdGhpcyBjYXNlLlxuICAgICAgICBpZiAodGhpcy5zaGFwZSAmJiB0aGlzLnNoYXBlLmlzU2VsZkludGVyc2VjdGluZyAmJiB0aGlzLnNoYXBlLmlzU2VsZkludGVyc2VjdGluZygpKSB7XG5cbiAgICAgICAgICAgIC8vIFNob3cgYW4gZXJyb3IgaW5kaWNhdG9yIGluc3RlYWRcbiAgICAgICAgICAgIHRoaXMuc2V0VGV4dChhdi5pMThuLnQoJ0ludmFsaWQgc2hhcGUnKSk7XG5cbiAgICAgICAgICAgIC8vIE1hcmsgYXJlYSBsYWJlbCBhcyBlcnJvclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZXJyb3ItaW5kaWNhdG9yJyk7XG5cbiAgICAgICAgICAgIC8vIE1hcmsgc3VyZSBlcnJvciBpbmRpY2F0b3IgaXMgZGlzcGxheWVkXG4gICAgICAgICAgICB0aGlzLnZhbHVlVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgc3VwZXIudXBkYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGVycm9yIGluZGljYXRvciBpcyB0b2dnbGVkIG9mZlxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3ItaW5kaWNhdG9yJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgc2hhcGUgYXJlYSAoaWYgc2hhcGUgc3VwcG9ydHMgaXQpXG4gICAgICAgIGxldCBoYXNBcmVhID0gdGhpcy5zaGFwZSAmJiB0aGlzLnNoYXBlLmdldEFyZWE7XG4gICAgICAgIGxldCBhcmVhICAgID0gaGFzQXJlYSAmJiB0aGlzLnNoYXBlLmdldEFyZWEodGhpcy51bml0SGFuZGxlci5tZWFzdXJlVHJhbnNmb3JtKTtcblxuICAgICAgICAvLyBIaWRlIGxhYmVsIGlmIHdlIGRvbid0IGhhdmUgYSB3ZWxsLWRlZmluZWQgYXJlYS5cbiAgICAgICAgLy8gV2UgYWxzbyBoaWRlIGl0IGlmIGFyZWEgaXMgMC4wLCBiZWNhdXNlIHRoZSBzaGFwZSBjYW5ub3QgYmUgdmlzaWJsZSBhbnl3YXkuXG4gICAgICAgIHRoaXMudmFsdWVWYWxpZCA9IEJvb2xlYW4oYXJlYSk7XG5cbiAgICAgICAgaWYgKHRoaXMudmFsdWVWYWxpZCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMudW5pdEhhbmRsZXIuYXJlYVRvU3RyaW5nKGFyZWEpO1xuICAgICAgICAgICAgdGhpcy5zZXRUZXh0KHRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGV0IGJhc2UgY2xhc3MgdXBkYXRlIHBvc2l0aW9uXG4gICAgICAgIHN1cGVyLnVwZGF0ZSgpO1xuICAgIH1cbn1cblxuLy8gQSBodG1sIGVsZW1lbnQgZm9yIHdoaWNoIHBvc2l0aW9uIGFuZCByb3RhdGlvbiBpcyBhbGlnbmVkIHdpdGggYW4gZWRnZVxuZXhwb3J0IGNsYXNzIEVkZ2VHaXptbyBleHRlbmRzIENhbnZhc0dpem1vIHtcblxuICAgIC8vIEBwYXJhbSB7RWRpdExheWVyfSBsYXllclxuICAgIC8vIEBwYXJhbSB7Ym9vbH0gdmlzaWJsZVxuICAgIGNvbnN0cnVjdG9yKGxheWVyLCB2aXNpYmxlID0gdHJ1ZSwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHN1cGVyKGxheWVyLCB2aXNpYmxlLCBjbGFzc05hbWUpO1xuXG4gICAgICAgIHRoaXMucG9zQSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gICAgICAgIHRoaXMucG9zQiA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICAgICAgLy8gSW5kaWNhdGVzIGlmIGEgcG9zaXRpb24gaGFzIGJlZW4gc2V0LiBJZiBub3QsIHdlIHRlbXBvcmFyaWx5IGhpZGUgdGhlIGdpem1vLiBJZiB0aGUgZ2l6bW8gaXNcbiAgICAgICAgLy8gYXR0YWNoZWQgdG8gYW4gZWRnZSwgdGhpcyBmbGFnIGlzIHNldCBhdXRvbWF0aWNhbGx5LlxuICAgICAgICB0aGlzLnBvc1ZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gVGVtcCB2ZWN0b3JzIHVzZWQgaW4gdXBkYXRlXG4gICAgICAgIHRoaXMuZWRnZURpciA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cbiAgICAgICAgLy8gT3B0aW9uYWw6IFBvc2l0aW9ucyBjYW4gYmUgc3luY2hyb25pemVkIHdpdGggYW4gZWRnZSBvZiBhIHBvbHlnb24gb3IgcG9seWxpbmVcbiAgICAgICAgdGhpcy5wb2x5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb29wSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmVkZ2VJbmRleCA9IDA7XG5cbiAgICAgICAgLy8gVXNlIG1lYXN1cmUtbGVuZ3RoIGNzcyBzdHlsZSBieSBkZWZhdWx0XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2VkZ2UtZ2l6bW8nKTtcblxuICAgICAgICAvLyBPcHRpb25hbDogQnkgZGVmYXVsdCwgYW4gRWRnZUdpem1vIGlzIGFsd2F5cyBwbGFjZWQgb24gYSBzZWdtZW50LCBpLmUuLCB0aGUgZ2l6bW8gd2lsbCBmb2xsb3cgYSBjdXJ2ZSBmb3IgYXJjIHNlZ21lbnRzLlxuICAgICAgICAvLyAgICAgICAgICAgSWYgdGhpcyBmbGFnIGlzIHRydWUsIHRoZSBnaXptbyBpcyBhbHdheXMgcGxhY2VkIG9uIHRoZSBkaXJlY3QgbGluZSBjb25uZWN0aW9uLlxuICAgICAgICB0aGlzLmlnbm9yZUFyY3MgPSBmYWxzZTtcblxuICAgICAgICAvLyBPcHRpb25hbDogSWYgc3BlY2lmaWVkLCB0aGlzIGxpbWl0cyB0aGUgc2l6ZSBvZiB0aGUgZ2l6bW8gcmVsYXRpdmUgdG8gdGhlIGVkZ2UgbGVuZ3RoIG9uIHNjcmVlbjpcbiAgICAgICAgLy8gV2UgaGlkZSB0aGUgZ2l6bW8gaWYgaXQgZXhjZWVkcyB4ICogZWRnZUxlbmd0aCBvbiBzY3JlZW4uXG4gICAgICAgIHRoaXMubWF4UmVsYXRpdmVMZW5ndGggPSB1bmRlZmluZWQ7IC8vIGluIFswLDFdXG4gICAgfVxuXG4gICAgLy8gSWYgYSBwb2x5IGlzIHNldCwgdGhlIGdpem1vIGlzIGF1dG9tYXRpY2FsbHkgc3luY2hyb25pemVkIHdpdGggdGhlIGVkZ2UuXG4gICAgLy8gQXMgbG9uZyBhcyB0aGUgcG9seSBpcyB2aXNpYmxlIGluIHRoZSBzYW1lIGxheWVyLCB0aGUgZWRnZSBpcyBhdXRvbWF0aWNhbGx5IGtlcHQgaW4gc3luYyB3aXRoIHRoZSBlZGdlLlxuICAgIC8vXG4gICAgLy8gIEBwYXJhbSB7UG9seUJhc2V9IHBvbHkgICAgICAtIHBvbHlnb24gb3IgcG9seWxpbmUgY29udGFpbmluZyB0aGUgZWRnZSB0aGF0IHdlIHdhbnQgdG8gYXR0YWNoIHRvLiBJZiBudWxsLCBwb3NpdGlvbnMgY2FuIGJlIHNldCBtYW51YWxseS5cbiAgICAvLyAgQHBhcmFtIHtudW1iZXJ9IGVkZ2VJbmRleCAgIC0gZWRnZUluZGV4IGluIHBvbHkuIElmIG5vdCB2YWxpZCwgZ2l6bW8gaXMgaGlkZGVuLlxuICAgIC8vICBAcGFyYW0ge251bWJlcn0gW2xvb3BJbmRleF0gLSBsb29wSW5kZXggaW4gcG9seS4gMCBieSBkZWZhdWx0XG4gICAgYXR0YWNoVG9FZGdlKHBvbHksIGVkZ2VJbmRleCwgbG9vcEluZGV4ID0gMCkge1xuICAgICAgICB0aGlzLnBvbHkgPSBwb2x5O1xuICAgICAgICB0aGlzLmVkZ2VJbmRleCA9IGVkZ2VJbmRleDtcbiAgICAgICAgdGhpcy5sb29wSW5kZXggPSBsb29wSW5kZXg7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZGV0YWNoRnJvbUVkZ2UoKSB7XG4gICAgICAgIHRoaXMucG9seSA9IG51bGw7XG4gICAgICAgIHRoaXMuZWRnZUluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMubG9vcEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMucG9zVmFsaWQgPSBmYWxzZTsgLy8gaGlkZSB1bmxlc3MgYSBwb3NpdGlvbiBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGVkZ2VWYWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9seSAmJiB0aGlzLnBvbHkuZWRnZUluZGV4VmFsaWQodGhpcy5lZGdlSW5kZXgsIHRoaXMubG9vcEluZGV4KTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG5cbiAgICAgICAgLy8gSWYgYSBwb2x5Z29uIGlzIHNldCwgb2J0YWluIHBvc2l0aW9ucyBhdXRvbWF0aWNhbGx5IGZyb20gaXQgLSBvciBoaWRlIGdpem1vIGlmIGVkZ2UgZG9lcyBub3QgZXhpc3QgYW55bW9yZVxuICAgICAgICBpZiAodGhpcy5wb2x5ICYmIHRoaXMucG9seS5lZGdlSW5kZXhWYWxpZCh0aGlzLmVkZ2VJbmRleCwgdGhpcy5sb29wSW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLnBvbHkuZ2V0RWRnZSh0aGlzLmVkZ2VJbmRleCwgdGhpcy5wb3NBLCB0aGlzLnBvc0IsIHRoaXMubG9vcEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMucG9zVmFsaWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhpcyBtYXkgaGFwcGVuIGlmIGhvc3QgcG9seWdvbiB3YXMgbW9kaWZpZWQgYW5kIHRoZSBlZGdlIGRvZXMgbm90IGV4aXN0IGFueW1vcmUuXG4gICAgICAgICAgICB0aGlzLnBvc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBlZGdlIGlzIGludmFsaWQgb3IgdG9vIHNtYWxsIG9uIHNjcmVlbiwganVzdCBoaWRlIHRoZSBnaXptb1xuICAgICAgICBsZXQgc2hvdyA9IHRoaXMuX3Nob3VsZEJlU2hvd24oKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IHNob3cgPyAndmlzaWJsZScgOiAnaGlkZGVuJztcbiAgICAgICAgaWYgKCFzaG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDZW50ZXIgZ2l6bW8gYXQgZWRnZSBjZW50ZXJcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQXJjcykge1xuICAgICAgICAgICAgLy8gUGxhY2Ugb24gdGhlIGxpbmUgc2VnbWVudFxuICAgICAgICAgICAgUG9seUJhc2UucHJvdG90eXBlLmdldFBvaW50T25FZGdlLmNhbGwodGhpcy5wb2x5LCB0aGlzLmVkZ2VJbmRleCwgMC41LCB0aGlzLmxvb3BJbmRleCwgdGhpcy5sYXllclBvcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBQbGFjZSBvbiBsaW5lIHNlZ21lbnQgb3IgYXJjIC0gZGVwZW5kaW5nIG9uIGFjdHVhbCBlZGdlIHR5cGVcbiAgICAgICAgICAgIHRoaXMucG9seS5nZXRQb2ludE9uRWRnZSh0aGlzLmVkZ2VJbmRleCwgMC41LCB0aGlzLmxvb3BJbmRleCwgdGhpcy5sYXllclBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgcm90YXRpb24gYW5nbGVcbiAgICAgICAgdGhpcy5fdXBkYXRlUm90YXRpb24oKTtcblxuICAgICAgICBzdXBlci51cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgZ2l6bW8gc2hvdWxkIGJlIHNob3duOiBXZSBoaWRlIGl0IGlmIHRoZSBlZGdlIGlzIHRvbyBzbWFsbCBvciBpZiB0aGUgZWRnZSBkb2VzIG5vdCBleGlzdCBhdCBhbGwuXG4gICAgX3Nob3VsZEJlU2hvd24oKSB7XG5cbiAgICAgICAgLy8gUG9zaXRpb25zIG11c3QgYmUgcHJvcGVybHkgc2V0IC0gZWl0aGVyIGF1dG9tYXRpY2FsbHkgZnJvbSBhbiBhdHRhY2hlZCBlZGdlIG9yIG1hbnVhbGx5IHVzaW5nIHNldEVkZ2UoKVxuICAgICAgICBpZiAoIXRoaXMucG9zVmFsaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cvSGlkZSBnaXptbyBkZXBlbmRpbmcgb24gem9vbTpcbiAgICAgICAgLy8gR2l6bW8gaGFzIGNvbnN0YW50IHNjcmVlbi1zaXplLiBTbywgd2UgaGlkZSBpdCBpZiB0aGUgc2NyZWVuLXNpemUgb2YgdGhlIGVkZ2UgYmVjb21lcyB0b28gc21hbGwuXG4gICAgICAgIGlmICh0aGlzLm1heFJlbGF0aXZlTGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBhU2NyZWVuID0gdGhpcy5sYXllci5sYXllclRvQ2FudmFzKHRoaXMucG9zQS54LCB0aGlzLnBvc0EueSk7XG4gICAgICAgICAgICBjb25zdCBiU2NyZWVuID0gdGhpcy5sYXllci5sYXllclRvQ2FudmFzKHRoaXMucG9zQi54LCB0aGlzLnBvc0IueSk7XG4gICAgICAgICAgICBjb25zdCBlZGdlTGVuZ3RoU2NyZWVuID0gYVNjcmVlbi5kaXN0YW5jZVRvKGJTY3JlZW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4QWxsb3dlZFBpeGVscyA9IGVkZ2VMZW5ndGhTY3JlZW4gKiB0aGlzLm1heFJlbGF0aXZlTGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgX3dpbmRvdyA9IHRoaXMuZ2V0V2luZG93KCk7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlRmxvYXQoX3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuY29udGFpbmVyKS53aWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gd2lkdGggPCBtYXhBbGxvd2VkUGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFNldCBzdHlsZSByb3RhdGlvbiB0byBhbGlnbiBnaXptbyBhbG9uZyBlZGdlIGRpcmVjdGlvbiwgc28gdGhhdCAnd2lkdGgnIGlzIGFsb25nIHRoZSBlZGdlXG4gICAgX3VwZGF0ZVJvdGF0aW9uKCkge1xuXG4gICAgICAgIC8vIENvbXB1dGUgY291bnRlckNsb2Nrd2lzZSBhbmdsZSBpbiByYWRpYW5zIHRoYXQgcm90YXRlcyB0aGUgcG9zaXRpdmUgeC1heGlzIHRvIHRoZSBlZGdlIGRpcmVjdGlvbiBhLT5iXG4gICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIGNvbXB1dGUgdGhlIGFuZ2xlIGluIGNhbnZhcyBzcGFjZSBoZXJlLiBJZiB3ZSB3b3VsZCBjb21wdXRlIGl0IGluIGxheWVyIHNwYWNlLFxuICAgICAgICAvLyB0aGUgYW5nbGUgb3JpZW50YXRpb24gb2YgdGhlIHJlc3VsdCBtYXkgYmUgaW52ZXJ0ZWQgaWYgdGhlIGxheWVyVG9DYW52YXMoKSB0cmFuc2Zvcm0gaW52ZXJ0cyBvcmllbnRhdGlvbiAoZS5nLiBieSBmbGlwcGVkIHktYXhpcylcbiAgICAgICAgY29uc3QgYVNjcmVlbiA9IHRoaXMubGF5ZXIubGF5ZXJUb0NhbnZhcyh0aGlzLnBvc0EueCwgdGhpcy5wb3NBLnkpO1xuICAgICAgICBjb25zdCBiU2NyZWVuID0gdGhpcy5sYXllci5sYXllclRvQ2FudmFzKHRoaXMucG9zQi54LCB0aGlzLnBvc0IueSk7XG5cbiAgICAgICAgY29uc3QgZGlyID0gTWF0aDJELmdldEVkZ2VEaXJlY3Rpb24oYVNjcmVlbiwgYlNjcmVlbiwgdGhpcy5lZGdlRGlyKTtcbiAgICAgICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXIueSwgZGlyLngpO1xuXG4gICAgICAgIC8vIEF2b2lkIHVwc2lkZS1kb3duIHJvdGF0aW9uOiBGbGlwIGJ5IDE4MCBkZWdyZWVzIGlmIGIgaXMgbGVmdCBvZiBhLiBUaGlzIGlzIGltcG9ydCBpZiBnaXptbyBjb250YWlucyB0ZXh0LlxuICAgICAgICBpZiAoZGlyLnggPCAwKSB7XG4gICAgICAgICAgICBhbmdsZSArPSBNYXRoLlBJO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBhbmdsZSB0byBjbG9ja3dpc2UgZGVncmVlcyBhbmQgYXBwbHkgaXQgdG8gc3R5bGVcbiAgICAgICAgLy8gSnVzdCBzZXQgdGhlIGFuZ2xlIGhlcmUsIGJ1dCBkb24ndCBjYWxsIHNldEFuZ2xlLCBiZWNhdWUgd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGF1dG8tdXBkYXRlLlxuICAgICAgICB0aGlzLmFuZ2xlID0gVEhSRUUuTWF0aC5yYWRUb0RlZyhhbmdsZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWRnZU1vdmVHaXptbyBleHRlbmRzIEVkZ2VHaXptbyB7XG5cbiAgICBjb25zdHJ1Y3RvcihsYXllciwgbmFtZSwgdmlzaWJsZSA9IHRydWUsIGNsYXNzTmFtZSkge1xuICAgICAgICBzdXBlcihsYXllciwgdmlzaWJsZSwgY2xhc3NOYW1lKTtcblxuICAgICAgICB0aGlzLnNldE5hbWUobmFtZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2VkZ2UtbW92ZS1naXptbycpO1xuXG4gICAgICAgIC8vIFdlIHBsYWNlIEVkZ2VNb3ZlR2l6bW9zIGFsd2F5cyBkaXJlY3RseSBvbiB0aGUgc3RyYWlnaHQgbGluZXMuIEluIHRoaXMgd2F5LCBlZGdlIG1vdmluZ1xuICAgICAgICAvLyB3aWxsIHdvcmsgaW4gdGhlIHNhbWUgd2F5IC0gbm8gbWF0dGVyIHdoZXRoZXIgYSBzZWdtZW50IGlzIGFuIGFyYyBvciBub3QuXG4gICAgICAgIHRoaXMuaWdub3JlQXJjcyA9IHRydWU7XG5cbiAgICAgICAgLy8gSGlkZSBnaXptbyBpZiBpdHMgc2NyZWVuV2lkdGggZXhjZWVkcyAwLjMgKiBlZGdlTGVuZ3RoXG4gICAgICAgIHRoaXMubWF4UmVsYXRpdmVMZW5ndGggPSAwLjM7IC8vIGluIFswLDFdXG4gICAgfVxufVxuXG4vLyBBbiBFZGdlR2l6bW8gdG8gZGlzcGxheSB0ZXh0XG5leHBvcnQgY2xhc3MgRWRnZUxhYmVsIGV4dGVuZHMgRWRnZUdpem1vIHtcblxuICAgIGNvbnN0cnVjdG9yKGxheWVyLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihsYXllciwgdmlzaWJsZSk7XG4gICAgICAgIGluaXRUZXh0TGFiZWwodGhpcyk7XG5cbiAgICAgICAgLy8gSGlkZSBsYWJlbCBpZiBpdCB3b3VsZCBleGNlZWQgdGhlIGVkZ2UgbGVuZ3RoXG4gICAgICAgIHRoaXMubWF4UmVsYXRpdmVMZW5ndGggPSAxLjA7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmVydGV4R2l6bW8gZXh0ZW5kcyBDYW52YXNHaXptbyB7XG5cbiAgICAvLyBAcGFyYW0ge251bWJlcn0gIHgseSAgICAgICAtIFBvc2l0aW9uIGluIGxheWVyIGNvb3Jkc1xuICAgIC8vIEBwYXJhbSB7c3RyaW5nfSAgaWQgICAgICAgIC0gaWQgc3RyaW5nIHVzZWQgdG8gdGFnIHNoYXBlcyB0aGF0IHJlcHJlc2VudCB0aGlzIGdpem1vXG4gICAgY29uc3RydWN0b3IobGF5ZXIsIHgsIHksIG5hbWUsIGNsYXNzTmFtZSkge1xuICAgICAgICBzdXBlcihsYXllciwgdHJ1ZSwgY2xhc3NOYW1lKTtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgdGhpcy5zZXROYW1lKG5hbWUpO1xuXG4gICAgICAgIHRoaXMucG9zID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblxuICAgICAgICAvLyBPcHRpb25hbDogUG9zaXRpb25zIGNhbiBiZSBzeW5jaHJvbml6ZWQgd2l0aCBhIHZlcnRleCBvZiBhIHBvbHlnb24gb3IgcG9seWxpbmVcbiAgICAgICAgdGhpcy5wb2x5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb29wSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy52ZXJ0ZXhJbmRleCA9IC0xO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ZlcnRleC1naXptbycpO1xuICAgIH1cblxuICAgIC8vIElmIGEgcG9seSBpcyBzZXQsIHRoZSBnaXptbyBpcyBhdXRvbWF0aWNhbGx5IHN5bmNocm9uaXplZCB3aXRoIHRoZSB2ZXJ0ZXguXG4gICAgLy8gQXMgbG9uZyBhcyB0aGUgcG9seSBpcyB2aXNpYmxlIGluIHRoZSBzYW1lIGxheWVyLCB0aGUgdmVydGV4IGdpem1vIGlzIGF1dG9tYXRpY2FsbHkga2VwdCBpbiBzeW5jIHdpdGggdGhlIHZlcnRleC5cbiAgICAvL1xuICAgIC8vICBAcGFyYW0ge1BvbHlCYXNlfSBwb2x5ICAgICAgLSBwb2x5Z29uIG9yIHBvbHlsaW5lIGNvbnRhaW5pbmcgdGhlIHZlcnRleCB0aGF0IHdlIHdhbnQgdG8gYXR0YWNoIHRvLiBJZiBudWxsLCBwb3NpdGlvbnMgY2FuIGJlIHNldCBtYW51YWxseS5cbiAgICAvLyAgQHBhcmFtIHtudW1iZXJ9IHZlcnRleEluZGV4ICAgLSB2ZXJ0ZXhJbmRleCBpbiBwb2x5LiBJZiBub3QgdmFsaWQsIGdpem1vIGlzIGhpZGRlbi5cbiAgICAvLyAgQHBhcmFtIHtudW1iZXJ9IFtsb29wSW5kZXhdIC0gbG9vcEluZGV4IGluIHBvbHkuIDAgYnkgZGVmYXVsdFxuICAgIGF0dGFjaFRvVmVydGV4KHBvbHksIHZlcnRleEluZGV4LCBsb29wSW5kZXggPSAwKSB7XG4gICAgICAgIHRoaXMucG9seSA9IHBvbHk7XG4gICAgICAgIHRoaXMudmVydGV4SW5kZXggPSB2ZXJ0ZXhJbmRleDtcbiAgICAgICAgdGhpcy5sb29wSW5kZXggPSBsb29wSW5kZXg7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgZGV0YWNoRnJvbVZlcnRleCgpIHtcbiAgICAgICAgdGhpcy5wb2x5ID0gbnVsbDtcbiAgICAgICAgdGhpcy52ZXJ0ZXhJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLmxvb3BJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnBvc1ZhbGlkID0gZmFsc2U7IC8vIGhpZGUgdW5sZXNzIGEgcG9zaXRpb24gaXMgZXhwbGljaXRseSBzZXRcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIEdpem1vIGlzIG5vdCBhdHRhY2hlZCB0byBhIHBvbHlnb24uIEp1c3QgdXBkYXRlIGFjY29yZGluZyB0byB0aGUgaW5pdGlhbCBwb3NpdGlvbi5cbiAgICAgICAgaWYgKCF0aGlzLnBvbHkpIHtcbiAgICAgICAgICAgIHN1cGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBwb2x5Z29uIGlzIHNldCwgb2J0YWluIHBvc2l0aW9ucyBhdXRvbWF0aWNhbGx5IGZyb20gaXQgLSBvciBoaWRlIGdpem1vIGlmIHZlcnRleCBkb2VzIG5vdCBleGlzdCBhbnltb3JlXG4gICAgICAgIGlmICh0aGlzLnBvbHkuaW5kZXhWYWxpZCh0aGlzLnZlcnRleEluZGV4LCB0aGlzLmxvb3BJbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMucG9seS5nZXRQb2ludCh0aGlzLnZlcnRleEluZGV4LCB0aGlzLmxvb3BJbmRleCwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3NWYWxpZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaWYgaG9zdCBwb2x5Z29uIHdhcyBtb2RpZmllZCBhbmQgdGhlIHZlcnRleCBkb2VzIG5vdCBleGlzdCBhbnltb3JlLlxuICAgICAgICAgICAgdGhpcy5wb3NWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgZWRnZSBpcyBpbnZhbGlkLCBqdXN0IGhpZGUgdGhlIGdpem1vXG4gICAgICAgIGxldCBzaG93ID0gdGhpcy5wb3NWYWxpZDtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gc2hvdyA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nO1xuXG4gICAgICAgIGlmICghc2hvdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXllclBvcy5zZXQodGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XG5cbiAgICAgICAgc3VwZXIudXBkYXRlKCk7XG4gICAgfVxufVxuXG4vLyBBIExhYmVsIGZpbHRlciBkZWNpZGVzIGZvciB3aGljaCBzaGFwZXMgd2UgZGlzcGxheSBhIGxhYmVsXG5leHBvcnQgY2xhc3MgTGFiZWxGaWx0ZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgLy8gSWYgZmFsc2UsIHdlIGRvbid0IG5lZWQgdG8gYWNxdWlyZSBhIGxhYmVsIGF0IGFsbC5cbiAgICBhY2NlcHRzKHNoYXBlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07XG5cbi8vIEdldCBzaGFwZSB3aWR0aCBpbiBzY3JlZW4tcGl4ZWxzXG5jb25zdCBnZXRTaGFwZVdpZHRoID0gKHNoYXBlLCBsYXllcikgPT4ge1xuICAgIC8vIGdldCBzaGFwZSBzaXplIGluIHNjcmVlbi1waXhlbHNcbiAgICBzaGFwZS51cGRhdGVCQm94KCk7XG4gICAgY29uc3QgYmJveCA9IHNoYXBlLmJib3g7XG4gICAgY29uc3Qgc2hhcGVXaWR0aCA9IGJib3gubWF4LnggLSBiYm94Lm1pbi54O1xuICAgIHJldHVybiBzaGFwZVdpZHRoICogbGF5ZXIuZ2V0UGl4ZWxzUGVyVW5pdCgpICogc2hhcGVXaWR0aDtcbn07XG5cbi8vIEJ5IGRlZmF1bHQsIHdlIGhpZGUgbGFiZWxzIGlmIHRleHQgaXMgZW1wdHkgb3IgaWYgdGhlIHNoYXBlIHNpemUgb24gc2NyZWVuIGZhbGxzIGJleW9uZCBhIHBpeGVsIHRocmVzaG9sZFxuZXhwb3J0IGNsYXNzIERlZmF1bHRMYWJlbEZpbHRlciBleHRlbmRzIExhYmVsRmlsdGVyIHtcblxuICAgIC8vIEBwYXJhbSB7bnVtYmVyfSBtaW5XaWR0aCAtIG1pbmltdW0gcGl4ZWwgd2lkdGggYSBzaGFwZSBtdXN0IGhhdmUgdG8gcmVjZWl2ZSBhIGxhYmVsXG4gICAgY29uc3RydWN0b3IobWluV2lkdGggPSA1KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWluV2lkdGggPSBtaW5XaWR0aDtcbiAgICB9XG5cbiAgICAvLyBBY2NlcHQgc2hhcGUgaWYgdGV4dCBpcyBub3QgZW1wdHkgYW5kIGl0cyBzY3JlZW4td2lkdGggaXMgYmlnIGVub3VnaC5cbiAgICBhY2NlcHRzKHNoYXBlLCB0ZXh0LCBsYXllcikge1xuICAgICAgICBjb25zdCB3aWR0aCA9IGdldFNoYXBlV2lkdGgoc2hhcGUsIGxheWVyKTtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGV4dCkgJiYgd2lkdGggPj0gdGhpcy5taW5XaWR0aDtcbiAgICB9XG59XG5cbi8vIEEgTGFiZWxTdHlsZSBydWxlIGFsbG93cyB0byBhcHBseSBjc3Mgc3R5bGUgbW9kaWZpY2F0aW9ucyBvbiBhIGxhYmVsLCBlLmcuLCBkZXBlbmRpbmcgb24gc2NyZWVuIHNpemVcbmV4cG9ydCBjbGFzcyBMYWJlbFN0eWxlUnVsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICAvLyBOb3RlOiBMYWJlbHMgbWF5IGJlIHJldXNlZCBmb3IgZGlmZmVyZW50IHNoYXBlcy4gU28sIG1ha2Ugc3VyZSB0aGF0IHRoZSBzdHlsZSBwYXJhbWV0ZXJzIGFyZVxuICAgIC8vICAgICAgIG5vdCBqdXN0IG1vZGlmaWVkIGZvciBzb21lIHN1YnNldCBvZiBzaGFwZXMsIGJ1dCByZXNldCBmb3Igb3RoZXJzLlxuICAgIGFwcGx5KGxhYmVsLCBzaGFwZSwgbGF5ZXIpIHt9XG59O1xuXG4vLyBGYWRlcyBvdXQgYmFzZWQgb24gbGFiZWwgc2l6ZVxuZXhwb3J0IGNsYXNzIEZhZGVPdXRTdHlsZVJ1bGUgZXh0ZW5kcyBMYWJlbFN0eWxlUnVsZSB7XG5cbiAgICAvLyBAcGFyYW0ge251bWJlcn0gcmFuZ2VTdGFydCAtIHNoYXBlIHdpZHRoIGluIHNjcmVlbi1waXhlbHMgYXQgd2hpY2ggdGhlIGxhYmVsIHN0YXJ0cyB0byBmYWRlLWluXG4gICAgLy8gQHBhcmFtIHtudW1iZXJ9IHJhbmdlRW5kICAgLSBzaGFwZSB3aWR0aCBpbiBzY3JlZW4tcGl4ZWxzIGF0IHdoaWNoIHRoZSBsYWJlbCBpcyBmdWxseSBvcGFxdWUuXG4gICAgY29uc3RydWN0b3IocmFuZ2VTdGFydCA9IDEwLCByYW5nZUVuZCA9IDE0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmFuZ2VTdGFydCA9IHJhbmdlU3RhcnQ7XG4gICAgICAgIHRoaXMucmFuZ2VFbmQgICA9IHJhbmdlRW5kO1xuICAgIH1cblxuICAgIGFwcGx5KGxhYmVsLCBzaGFwZSwgbGF5ZXIpIHtcblxuICAgICAgICAvLyBjb21wdXRlIG9wYWNpdHkgZnJvbSBzaGFwZSBzY3JlZW4td2lkdGhcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXRTaGFwZVdpZHRoKHNoYXBlLCBsYXllcik7XG4gICAgICAgIGNvbnN0IHQgPSAod2lkdGggLSB0aGlzLnJhbmdlU3RhcnQpIC8gKHRoaXMucmFuZ2VFbmQgLSB0aGlzLnJhbmdlU3RhcnQpO1xuICAgICAgICBjb25zdCBvcGFjaXR5ID0gVEhSRUUuTWF0aC5jbGFtcCh0LCAwLCAxKTtcblxuICAgICAgICBsYWJlbC5jb250YWluZXIuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHk7XG4gICAgfVxufTtcblxuLy8gQSBTaGFwZUxhYmVsUnVsZSBtYWludGFpbnMgYSBzZXQgb2YgbGFiZWxzIHRoYXQgaXMgYXV0b21hdGljYWxseSBzeW5jZWQgd2l0aCB0aGUgc2hhcGVzIGluIGEgbGF5ZXIuXG4vLyBJdCBpbXBsZW1lbnRzIHRoZSBDYW52YXNHaXptb0Jhc2UgdG8gdXBkYXRlIHRoZSBzZXQgb2YgbWFpbnRhaW5lZCBsYWJlbHMuXG5leHBvcnQgY2xhc3MgU2hhcGVMYWJlbFJ1bGUge1xuXG4gICAgLy8gQHBhcmFtIHtFZGl0TGF5ZXJ9ICAgICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAtIExhYmVscyBhcmUgc2hvd24gKGFuZCBzeW5jaHJvbml6ZWQpIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllci5cbiAgICAvLyBAcGFyYW0ge2Z1bmN0aW9uKFNoYXBlKT0+c3RyaW5nfSBzaGFwZVRvTGFiZWxUZXh0IC0gQSBtYXBwaW5nIHRoYXQgZGVmaW5lcyB3aGljaCB0ZXh0IHRvIGRpc3BsYXkgZm9yIGEgc2hhcGUuIElmIG51bGwsIG5vIGxhYmVsIGlzIGNyZWF0ZWQuXG4gICAgLy8gQHBhcmFtIHtMYWJlbEZpbHRlcn0gICAgICAgICAgICAgW2ZpbHRlcl0gICAgICAgICAtIERlZmluZXMgd2hpY2ggbGFiZWxzIHRvIHNob3cuIFNlZSBEZWZhdWx0TGFiZWxGaWx0ZXIgZm9yIGRlZmF1bHQgYmVoYXZpb3IuXG4gICAgLy8gQHBhcmFtIHtMYWJlbFN0eWxlUnVsZX0gICAgICAgICAgW3N0eWxlUnVsZV0gICAgICAtIERlZmluZXMgaG93IGxhYmVsIHN0eWxlIGlzIG1vZGlmaWVkIGR5bmFtaWNhbGx5LiAoQnkgZGVmYXVsdCwgd2UgZmFkZS1vdXQgYmFzZWQgb24gbGFiZWwgc2l6ZSlcbiAgICBjb25zdHJ1Y3RvcihsYXllciwgc2hhcGVUb0xhYmVsVGV4dCwgbGFiZWxGaWx0ZXIgPSBuZXcgRGVmYXVsdExhYmVsRmlsdGVyKCksIHN0eWxlUnVsZSA9IG5ldyBGYWRlT3V0U3R5bGVSdWxlKCkpIHtcbiAgICAgICAgdGhpcy5sYXllciA9IGxheWVyO1xuICAgICAgICB0aGlzLnNoYXBlVG9MYWJlbFRleHQgPSBzaGFwZVRvTGFiZWxUZXh0O1xuXG4gICAgICAgIC8vIEFsbCBsYWJlbHMgdGhhdCB3ZSBjcmVhdGVkLlxuICAgICAgICB0aGlzLmxhYmVscyA9IHt9OyAgICAgLy8ge3NoYXBlSWQ6IFNoYXBlTGFiZWx9XG5cbiAgICAgICAgdGhpcy5sYXllci5hZGRDYW52YXNHaXptbyh0aGlzKTtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXllci51cGRhdGUoKTtcblxuICAgICAgICB0aGlzLmZpbHRlciA9IGxhYmVsRmlsdGVyO1xuICAgICAgICB0aGlzLnN0eWxlUnVsZSA9IHN0eWxlUnVsZTtcbiAgICB9XG5cbiAgICAvLyBSZXBsYWNlIHRoZSBydWxlIHRvIGRlZmluZSBsYWJlbCB0ZXh0cy5cbiAgICAvLyAgIEBwYXJhbSB7ZnVuY3Rpb24oU2hhcGUpPT5zdHJpbmd9IHNoYXBlVG9MYWJlbFRleHQgLSBBIG1hcHBpbmcgdGhhdCBkZWZpbmVzIHdoaWNoIHRleHQgdG8gZGlzcGxheSBmb3IgYSBzaGFwZS4gSWYgbnVsbCwgbm8gbGFiZWwgaXMgY3JlYXRlZC5cbiAgICBzZXRUZXh0UnVsZShzaGFwZVRvTGFiZWxUZXh0KSB7XG4gICAgICAgIHRoaXMuc2hhcGVUb0xhYmVsVGV4dCA9IHNoYXBlVG9MYWJlbFRleHQ7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgc2V0VmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgICAgIGlmICh2aXNpYmxlID09PSB0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiBJdCdzIGVzc2VudGlhbCB0aGF0IHdlIGFkZCAndGhpcycgZmlyc3QgYW5kIGFsbCBtYWludGFpbmVkIGxhYmVscyBiZWhpbmQuIEluIHRoaXMgd2F5LCB0aGlzIGdpem1vIGlzIHVwZGF0ZWQgZmlyc3QgdG9cbiAgICAgICAgICAgIC8vICAgICAgIGNvbmZpZ3VyZSBhbGwgbGFiZWxzIC0gZm9sbG93ZWQgYnkgdGhlIHVwZGF0ZSBjYWxscyBmb3IgYWxsIGFjdGl2ZSBsYWJlbHMgaW4gdXNlLlxuICAgICAgICAgICAgdGhpcy5sYXllci5hZGRDYW52YXNHaXptbyh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyTGFiZWxzKCk7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZUNhbnZhc0dpem1vKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgfVxuXG4gICAgZHRvcigpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgbGVhdmUgYW55IG9mIG91ciBsYWJlbHMgaW4gdGhlIGxheWVyXG4gICAgICAgIHRoaXMuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlTGFiZWxGcm9tU2hhcGUoc2hhcGUpIHtcbiAgICAgICAgaWYgKHRoaXMubGFiZWxzW3NoYXBlLmlkXSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckxhYmVsKHRoaXMubGFiZWxzW3NoYXBlLmlkXSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sYWJlbHNbc2hhcGUuaWRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJMYWJlbChsYWJlbCkge1xuICAgICAgICBsYWJlbC5zZXRTaGFwZShudWxsKTtcbiAgICAgICAgbGFiZWwuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gSGlkZSArIHJlbGVhc2UgYWxsIGN1cnJlbnQgbGFiZWxzLCBzbyB0aGF0IHdlIGNhbiByZS1hY3F1aXJlIHRoZW0gYmFzZWQgb24gbGF0ZXN0IExheWVyIHN0YXRlLlxuICAgIGNsZWFyTGFiZWxzKCkge1xuICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMubGFiZWxzKS5mb3JFYWNoKGxhYmVsID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJMYWJlbChsYWJlbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubGFiZWxzID0ge307XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG5ldyBsYWJlbCBvciBnZXQgaXQgZnJvbSBjYWNoZVxuICAgIGFjcXVpcmVMYWJlbChzaGFwZSkge1xuICAgICAgICBsZXQgbGFiZWwgPSB0aGlzLmxhYmVsc1tzaGFwZS5pZF07XG5cbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgIH1cblxuICAgICAgICBsYWJlbCA9IG5ldyBTaGFwZUxhYmVsKG51bGwsIHRoaXMubGF5ZXIpO1xuICAgICAgICBsYWJlbC5zZXRTaGFwZShzaGFwZSk7XG5cbiAgICAgICAgdGhpcy5sYWJlbHNbc2hhcGUuaWRdID0gbGFiZWw7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc2hhcGVzID0gdGhpcy5sYXllci5zaGFwZXM7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxzaGFwZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgY29uc3Qgc2hhcGUgPSBzaGFwZXNbaV07XG5cbiAgICAgICAgICAgIC8vIEdldCBsYWJlbCB0ZXh0XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5zaGFwZVRvTGFiZWxUZXh0KHNoYXBlKTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2Ugd2FudCB0byBkaXNwbGF5IGEgbGFiZWwgZm9yIHRoaXMgc2hhcGVcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlciAmJiAhdGhpcy5maWx0ZXIuYWNjZXB0cyhzaGFwZSwgdGV4dCwgdGhpcy5sYXllcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxhYmVsRnJvbVNoYXBlKHNoYXBlKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29uZmlndXJlIGxhYmVsXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuYWNxdWlyZUxhYmVsKHNoYXBlKTtcbiAgICAgICAgICAgIGxhYmVsLnNldFRleHQodGV4dCk7XG4gICAgICAgICAgICBsYWJlbC5zZXRWaXNpYmxlKHRydWUpO1xuXG4gICAgICAgICAgICAvLyBBcHBseSBvcHRpb25hbCBjdXN0b20gc3R5bGUgcnVsZVxuICAgICAgICAgICAgdGhpcy5zdHlsZVJ1bGUgJiYgdGhpcy5zdHlsZVJ1bGUuYXBwbHkobGFiZWwsIHNoYXBlLCB0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsZWFyIGxhYmVscyB0aGF0IHRoZWlyIHNoYXBlcyB3ZXJlIHJlbW92ZWQuXG4gICAgICAgIC8vIE5lZWRlZCB3aGVuIGF1dG9VcGRhdGUgaXMgZGlzYWJsZWQuXG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5sYWJlbHMpLmZvckVhY2gobGFiZWwgPT4ge1xuICAgICAgICAgICAgLy8gU2hhcGUgbm8gbG9uZ2VyIGV4aXN0c1xuICAgICAgICAgICAgaWYgKHNoYXBlcy5pbmRleE9mKGxhYmVsLnNoYXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxhYmVsRnJvbVNoYXBlKGxhYmVsLnNoYXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vLyBBIFNoYXBlVG9vbFRpcCBpcyBhIGxhYmVsIHRoYXQgc2hvd3MgdXAgd2hlbiBob3ZlcmluZyBhIHNoYXBlLlxuLy8gQnkgZGVmYXVsdCwgaXQgYXBwZWFycyBhIGZldyBwaXhlbHMgYWJvdmUgdGhlIHRvcC1yaWdodCBjb3JuZXIgb2YgYSBzaGFwZSdzIGJib3guXG5leHBvcnQgY2xhc3MgU2hhcGVUb29sVGlwIGV4dGVuZHMgQ2FudmFzR2l6bW9CYXNlIHtcblxuICAgIC8vIEBwYXJhbSB7RWRpdExheWVyfSAgICAgICAgICAgICAgIGxheWVyIC0gVG9vbHRpcCB3aWxsIGFwcGVhciBmb3IgYWxsIHNoYXBlcyBpbiB0aGUgZ2l2ZW4gbGF5ZXIuXG4gICAgLy8gQHBhcmFtIHtmdW5jdGlvbihzaGFwZSk9PnN0cmluZ30gZ2V0VGV4dCAtIEZ1bmN0aW9uIHRvIGRlZmluZSB0aGUgdGV4dCBmb3IgYSBnaXZlbiBzaGFwZVxuICAgIGNvbnN0cnVjdG9yKGxheWVyLCBnZXRUZXh0ID0gbnVsbCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgdGhpcy50ZXh0Q2IgPSBnZXRUZXh0O1xuICAgICAgICB0aGlzLnZpZXdlciA9IHRoaXMubGF5ZXIudmlld2VyO1xuXG4gICAgICAgIC8vIHRyYWNrIGxhdGVzdCBtb3VzZSBwb3NpdGlvbiBpbiBsYXllciBjb29yZHMgKGluaXQgb24gZmlyc3QgbW91c2UgbW92ZSlcbiAgICAgICAgdGhpcy5tb3VzZVBvcyA9IG51bGw7XG5cbiAgICAgICAgLy8gZGlzdGFuY2UgYmV0d2VlbiB0b29sdGlwIGFuZCBzaGFwZSBiYm94XG4gICAgICAgIHRoaXMuZGlzdGFuY2VUb0JveCA9IDU7IC8vIGluIHBpeGVsc1xuXG4gICAgICAgIC8vIENyZWF0ZSB0b29sdGlwIGRpdlxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuZ2V0RG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYWRzay1jb250cm9sLXRvb2x0aXAnKTtcblxuICAgICAgICAvLyBBZGQgZGl2IHRvIHZpZXdlciBjYW52YXMgY29udGFpbmVyIGFuZCBsYXllclxuICAgICAgICB0aGlzLnZpZXdlci5jYW52YXNXcmFwLmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcblxuICAgICAgICAvLyBVcGRhdGUgaWYgbGF5ZXIgY2hhbmdlZFxuICAgICAgICB0aGlzLmxheWVyLmFkZENhbnZhc0dpem1vKHRoaXMpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBpZiBtb3VzZSBtb3ZlZFxuICAgICAgICB0aGlzLm9uTW91c2VNb3ZlZCA9IHRoaXMub25Nb3VzZU1vdmVkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudmlld2VyLmNhbnZhc1dyYXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZWQpO1xuXG4gICAgICAgIHRoaXMubGF5ZXIudXBkYXRlQ2FudmFzR2l6bW9zKCk7XG4gICAgfVxuXG4gICAgZHRvcigpIHtcbiAgICAgICAgdGhpcy5sYXllci5yZW1vdmVDYW52YXNHaXptbygpO1xuICAgICAgICB0aGlzLnZpZXdlci5jYW52YXNXcmFwLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmVkKTtcbiAgICAgICAgdGhpcy52aWV3ZXIuY2FudmFzV3JhcC5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgLy8gU2V0IGNhbGxiYWNrIHRoYXQgZGVmaW5lcyB3aGljaCB0ZXh0IHRvIGRpc3BsYXkgZm9yIGVhY2ggc2hhcGUuIFJldHVybmluZyAnJyBvciBudWxsIHdpbGwgaGlkZSB0aGUgdG9vbHRpcC5cbiAgICAvLyBAcGFyYW0ge2Z1bmN0aW9uKHNoYXBlKT0+c3RyaW5nfSBnZXRUZXh0IC0gRnVuY3Rpb24gdG8gZGVmaW5lIHRoZSB0ZXh0IGZvciBhIGdpdmVuIHNoYXBlXG4gICAgc2V0VGV4dENhbGxiYWNrKGdldFRleHQpIHtcbiAgICAgICAgdGhpcy50ZXh0Q2IgPSBnZXRUZXh0O1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIG9uTW91c2VNb3ZlZChldmVudCkge1xuXG4gICAgICAgIC8vIEFkZCBjYW52YXMgY29vcmRzIHRvIGV2ZW50XG4gICAgICAgIHRoaXMudmlld2VyLnRvb2xDb250cm9sbGVyLl9fY2xpZW50VG9DYW52YXNDb29yZHMoZXZlbnQpO1xuXG4gICAgICAgIC8vIFRyYWNrIG1vdXNlIHBvc2l0aW9uXG4gICAgICAgIHRoaXMubW91c2VQb3MgPSB0aGlzLmxheWVyLmNhbnZhc1RvTGF5ZXIoZXZlbnQuY2FudmFzWCwgZXZlbnQuY2FudmFzWSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG5cbiAgICAgICAgLy8gSWYgYSB0ZXh0Q2IgaXMgc2V0LCBjaGVjayBzaGFwZSB1bmRlciBtb3VzZVxuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMubW91c2VQb3MgJiYgdGhpcy50ZXh0Q2IgJiYgdGhpcy5sYXllci5oaXRUZXN0KHRoaXMubW91c2VQb3MueCwgdGhpcy5tb3VzZVBvcy55KTtcblxuICAgICAgICAvLyBDaG9vc2UgbGFiZWwgdGV4dFxuICAgICAgICBjb25zdCB0ZXh0ID0gc2hhcGUgJiYgdGhpcy50ZXh0Q2Ioc2hhcGUpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRleHRcbiAgICAgICAgdGhpcy5jb250YWluZXIudGV4dENvbnRlbnQgPSB0ZXh0IHx8ICcnO1xuXG4gICAgICAgIC8vIFN0b3AgaGVyZSBpZiBub3RoaW5nIHRvIGRpc3BsYXlcbiAgICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IGxhYmVsXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cbiAgICAgICAgLy8gR2V0IHRvcC1yaWdodCBjb3JuZXIgb2YgYmJveFxuICAgICAgICBzaGFwZS51cGRhdGVCQm94KCk7IC8vIE1ha2Ugc3VyZSBiYm94IGlzIHVwLXRvLWRhdGVcbiAgICAgICAgY29uc3QgY29ybmVyID0gc2hhcGUuYmJveC5tYXg7XG5cbiAgICAgICAgLy8gR2V0IGFuY2hvciBpbiBjYW52YXMgY29vcmRzXG4gICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMubGF5ZXIubGF5ZXJUb0NhbnZhcyhjb3JuZXIueCwgY29ybmVyLnkpO1xuXG4gICAgICAgIC8vIEFkZCBzb21lIHBpeGVscyB5LW9mZnNldFxuICAgICAgICBhbmNob3IueSAtPSB0aGlzLmRpc3RhbmNlVG9Cb3g7XG5cbiAgICAgICAgLy8gZ2V0IGNhbnZhcyBzaXplXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy52aWV3ZXIuY2FudmFzLndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLnZpZXdlci5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnJpZ2h0ICA9ICh3aWR0aCAtIGFuY2hvci54KSArICdweCc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9IChoZWlnaHQgLSBhbmNob3IueSkgKyAncHgnO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmxlZnQgPSAnYXV0byc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRvcCA9ICdhdXRvJztcbiAgICB9XG59XG5cbi8vIFB1cnBvc2U6XG4vLyBUaGVyZSBpcyBubyBlZmZpY2llbnQgYW5kIHNpbXBsZSB3YXkgdG8gYXNrIGEgZGl2IHdoZXRoZXIgaXQgaXMgdW5kZXIgbW91c2Ugb3Igbm90LlxuLy8gVGhlIG1vc3QgcmVsaWFibGUgd2F5IGlzIGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoKSwgYnV0IGl0IGlzIHJhdGhlciBleHBlbnNpdmUuXG4vLyBUaGVyZWZvcmUsIHdlIGRvbid0IHdhbnQgdG8gZG8gaXQgZm9yIGVhY2ggYW5kIGV2ZXJ5IGdpem1vLiBJbnN0ZWFkLCBHaXptb01hbmFnZXIgdHJhY2tzXG4vLyB3aGljaCBvYmplY3QgaXMgdW5kZXIgbW91c2UgYW5kIGlzIGdlbmVyYWxseSB1c2VkIHRvIGNoZWNrIHdoaWNoIGdpem1vIGlzIGF0IG1vdXNlIHBvc2l0aW9uLlxuZXhwb3J0IGNsYXNzIEdpem1vTWFuYWdlciB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gZGl2IGVsZW1lbnQgYXQgbW91c2UgcG9zaXRpb25cbiAgICAgICAgdGhpcy5lbGVtVW5kZXJNb3VzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gTXVzdCBiZSB0cmlnZ2VyZWQgb24gbW91c2UgZXZlbnRzLlxuICAgIC8vIEBwYXJhbSB7TW91c2VFdmVudH1cbiAgICB1cGRhdGUoZSkge1xuICAgICAgICB0aGlzLmVsZW1VbmRlck1vdXNlID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChlLmNsaWVudFgsIGUuY2xpZW50WSk7XG4gICAgfVxuXG4gICAgLy8gQHBhcmFtIHtDYW52YXNHaXptb31cbiAgICBpc1VuZGVyTW91c2UoZ2l6bW8pIHtcbiAgICAgICAgcmV0dXJuIGdpem1vLmNvbnRhaW5lciAmJiBnaXptby5jb250YWluZXIgPT09IHRoaXMuZWxlbVVuZGVyTW91c2U7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGdpem1vIHRoYXQgbWF0Y2hlcyB3aXRoIHRoZSBlbGVtZW50IHVuZGVyIG1vdXNlLlxuICAgIC8vIFJlc3VsdCBpcyAtMSBpZiBub25lIG9mIHRoZSBnaXptb3MgbWF0Y2hlcy5cbiAgICAvLyAgQHBhcmFtIHtDYW52YXNHaXptb1tdfSBnaXptb1xuICAgIGdldEdpem1vSW5kZXgoZ2l6bW9zKSB7XG4gICAgICAgIHJldHVybiBnaXptb3MuZmluZEluZGV4KGcgPT4gdGhpcy5pc1VuZGVyTW91c2UoZykpO1xuICAgIH1cbn1cblxuLy8gRGlzcGxheSBkYXNoZWQgbGluZXMgdG8gY29ubmVjdCBzdGFydC9lbmQgb2YgYXJjIHNlZ21lbnRzLiBVc2VkIGJ5IFBvbHlnb25FZGl0VG9vbC5cbi8vIEl0IHVwZGF0ZXMgaXRzZWxmIGF1dG9tYXRpY2FsbHkgd2hlbmV2ZXIgdGhlIHNoYXBlIGNoYW5nZWQuXG5leHBvcnQgY2xhc3MgQXJjRWRnZUdpem1vIHtcbiAgICBjb25zdHJ1Y3RvcihsYXllciwgZ2l6bW9MYXllcikge1xuXG4gICAgICAgIHRoaXMubGF5ZXIgICAgICA9IGxheWVyO1xuICAgICAgICB0aGlzLmdpem1vTGF5ZXIgPSBnaXptb0xheWVyO1xuXG4gICAgICAgIC8vIE9uZSBMaW5lIHNoYXBlIHBlciBhcmMgc2VnbWVudCBpbiB0aGUgaG9zdCBzaGFwZVxuICAgICAgICB0aGlzLnNoYXBlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMudmlzaWJpbGl0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldFZpc2libGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gT3B0aW9uYWw6IERpc3BsYXkgb25lIGVkZ2UgaW4gYW5vdGhlciBjb2xvclxuICAgICAgICB0aGlzLmhpZ2hsaWdodENvbG9yID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodEluZGV4ICAgICA9IC0xOyAvLyBtdXN0IGJlIGEgdmFsaWQgZWRnZSBpbmRleCBpbiB0aGlzLnBvbHlcbiAgICAgICAgdGhpcy5oaWdobGlnaHRMb29wSW5kZXggPSAtMTsgLy8gbXVzdCBiZSBhIHZhbGlkIGxvb3AgaW5kZXggaW4gdGhpcy5wb2x5XG4gICAgfVxuXG4gICAgZHRvcigpIHtcbiAgICAgICAgLy8gSnVzdCBtYWtlIHN1cmUgaXQgaXMgaW52aXNpYmxlLCBzbyB0aGF0IHNoYXBlcyBhcmUgY2xlYXJlZCBhbmRcbiAgICAgICAgLy8gZ2l6bW8gaXMgcmVtb3ZlZCBmcm9tIEdpem1vTGF5ZXIuXG4gICAgICAgIHRoaXMuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBzaGFwZSBmb3Igd2hpY2ggd2UgZGlzcGxheSBsaW5lc1xuICAgIHNldFBvbHkocG9seSkge1xuICAgICAgICBpZiAocG9seSAhPT0gdGhpcy5wb2x5KSB7XG4gICAgICAgICAgICB0aGlzLnBvbHkgPSBwb2x5O1xuICAgICAgICAgICAgdGhpcy5jbGVhckVkZ2VIaWdobGlnaHRpbmcoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWaXNpYmxlKHZpc2libGUpIHtcblxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHRoZXJlJ3Mgbm8gY2hhbmdlXG4gICAgICAgIGlmICh0aGlzLnZpc2libGUgPT09IHZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuXG4gICAgICAgIC8vIGFkZC9yZW1vdmUgZnJvbSBsYXllclxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5sYXllci5hZGRDYW52YXNHaXptbyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlQ2FudmFzR2l6bW8odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBjbGVhclNoYXBlcygpIHtcbiAgICAgICAgdGhpcy5zaGFwZXMuZm9yRWFjaChzID0+IHRoaXMuZ2l6bW9MYXllci5yZW1vdmVTaGFwZShzKSk7XG4gICAgICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgfVxuXG4gICAgZWRnZVNoYXBlTmFtZShpbmRleCwgbG9vcEluZGV4KSB7XG4gICAgICAgIHJldHVybiAnQXJjRWRnZUdpem1vXycgKyBsb29wSW5kZXggKyAnXycgKyBpbmRleDtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBsaW5lIHNoYXBlIHRoYXQgY29ubmVjdHMgc3RhcnQvZW5kIHZlcnRleCBvZiBzZWdtZW50IGkgaW4gcG9seS5cbiAgICBfYWRkRWRnZShpbmRleCwgbG9vcEluZGV4KSB7XG5cbiAgICAgICAgLy8gZ2V0IGVkZ2VcbiAgICAgICAgY29uc3QgYSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG4gICAgICAgIGNvbnN0IGIgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuICAgICAgICB0aGlzLnBvbHkuZ2V0RWRnZShpbmRleCwgYSwgYiwgbG9vcEluZGV4KTtcblxuICAgICAgICAvLyBDcmVhdGUgYSBsaW5lIGZyb20gaXRcbiAgICAgICAgY29uc3QgbGluZSA9IG5ldyBQb2x5bGluZShbYSwgYl0pO1xuICAgICAgICBsaW5lLm5hbWUgPSB0aGlzLmVkZ2VTaGFwZU5hbWUoaW5kZXgsIGxvb3BJbmRleCk7XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIGxpbmUgc3R5bGVcbiAgICAgICAgbGluZS5zdHlsZS5saW5lU3R5bGUgPSAxMTsgLy8gc2hvcnQgZGFzaGVzXG4gICAgICAgIGxpbmUuc3R5bGUubGluZVdpZHRoID0gdGhpcy5wb2x5LnN0eWxlLmxpbmVXaWR0aCAvIDIuMDtcbiAgICAgICAgbGluZS5zdHlsZS5saW5lQWxwaGEgPSB0aGlzLnBvbHkuc3R5bGUubGluZUFsaGEgLyAyLjA7XG5cbiAgICAgICAgLy8gQXBwbHkgb3B0aW9uYWwgZWRnZSBoaWdobGlnaHRpbmcgY29sb3JcbiAgICAgICAgaWYgKGluZGV4ID09IHRoaXMuaGlnaGxpZ2h0SW5kZXggJiYgdGhpcy5oaWdobGlnaHRDb2xvcikge1xuICAgICAgICAgICAgbGluZS5zdHlsZS5saW5lQ29sb3IgPSB0aGlzLmhpZ2hsaWdodENvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5naXptb0xheWVyLmFkZFNoYXBlKGxpbmUpO1xuICAgICAgICB0aGlzLnNoYXBlcy5wdXNoKGxpbmUpO1xuICAgIH1cblxuICAgIGNsZWFyRWRnZUhpZ2hsaWdodGluZygpIHtcblxuICAgICAgICBpZiAodGhpcy5oaWdobGlnaHRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0Q29sb3IgPSBudWxsO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIGRpZmZlcmVudFxuICAgIHNldEVkZ2VIaWdobGlnaHRlZChpbmRleCwgbG9vcEluZGV4LCBjb2xvcikge1xuXG4gICAgICAgIC8vIE9ubHkgZG8gd29yayBpZiBuZWVkZWRcbiAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmhpZ2hsaWdodEluZGV4ICYmIGNvbG9yID09PSB0aGlzLmhpZ2hsaWdodENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhpZ2hsaWdodENvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0SW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRMb29wSW5kZXggPSBsb29wSW5kZXg7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlcyB0aGUgZWRnZXMgZm9yIHRoZSBnaXZlbiBQYXRoIHNoYXBlXG4gICAgdXBkYXRlKCkge1xuXG4gICAgICAgIHRoaXMuY2xlYXJTaGFwZXMoKTtcblxuICAgICAgICAvLyBTdG9wIGlmIHRoZXJlIGFyZSBubyBhcmNzXG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlIHx8ICF0aGlzLnBvbHkgfHwgIXRoaXMucG9seS5pc1BhdGgoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIGVhY2ggbG9vcC4uLlxuICAgICAgICBmb3IgKGxldCBsPTA7IGw8dGhpcy5wb2x5Lmxvb3BDb3VudDsgbCsrKSB7XG5cbiAgICAgICAgICAgIC8vIEZvciBlYWNoIGVkZ2UuLi5cbiAgICAgICAgICAgIGNvbnN0IGVkZ2VDb3VudCA9IHRoaXMucG9seS5nZXRFZGdlQ291bnQobCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8ZWRnZUNvdW50OyBpKyspIHtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBsaW5lIGlmIGl0IGlzIGFuIGFyY1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXJjID0gdGhpcy5wb2x5LmlzQXJjKGksIGwpO1xuICAgICAgICAgICAgICAgIGlmIChpc0FyYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRFZGdlKGksIGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJNYXRoMkQiLCJQb2x5bGluZSIsIlBvbHlCYXNlIiwidG9QaXhlbHMiLCJ2YWwiLCJ0b1N0cmluZyIsIkFsaWduWCIsIkxlZnQiLCJDZW50ZXIiLCJSaWdodCIsIkFsaWduWSIsIlRvcCIsIkJvdHRvbSIsImF2IiwiQXV0b2Rlc2siLCJWaWV3aW5nIiwiQ2FudmFzR2l6bW9CYXNlIiwiY29uc3RydWN0b3IiLCJ1cGRhdGUiLCJHbG9iYWxNYW5hZ2VyTWl4aW4iLCJjYWxsIiwicHJvdG90eXBlIiwiQ2FudmFzR2l6bW8iLCJsYXllciIsInZpc2libGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjbGFzc05hbWUiLCJzZXRHbG9iYWxNYW5hZ2VyIiwiZ2xvYmFsTWFuYWdlciIsImxheWVyUG9zIiwiVEhSRUUiLCJWZWN0b3IyIiwiY2FudmFzUG9zIiwiX2RvY3VtZW50IiwiZ2V0RG9jdW1lbnQiLCJjb250YWluZXIiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwb3NpdGlvbiIsInRyYW5zZm9ybU9yaWdpbiIsInRvcCIsImxlZnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhbGlnblgiLCJhbGlnblkiLCJhbmdsZSIsInNldFZpc2libGUiLCJzZXRPcGFjaXR5IiwidCIsIm9wYWNpdHkiLCJvcGFjaXR5UGFyYW0iLCJQcml2YXRlIiwiQW5pbWF0ZWRQYXJhbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiaXNMZWZ0QnV0dG9uIiwiYnV0dG9ucyIsInZpZXdlciIsInRyaWdnZXJDb250ZXh0TWVudSIsImR0b3IiLCJhdXRvVXBkYXRlIiwiYWRkVG9DYW52YXMiLCJyZW1vdmVGcm9tQ2FudmFzIiwiY2FudmFzV3JhcCIsImFwcGVuZENoaWxkIiwiYWRkQ2FudmFzR2l6bW8iLCJyZW1vdmVDaGlsZCIsInJlbW92ZUNhbnZhc0dpem1vIiwic2V0QWxpZ25YIiwic2V0QWxpZ25ZIiwic2V0Um90YXRpb24iLCJjb3B5IiwibGF5ZXJUb0NhbnZhcyIsIngiLCJ5IiwicCIsInR4IiwidHkiLCJ0cmFuc2Zvcm0iLCJzZXRQb3NpdGlvbiIsInNldCIsInNldENsYXNzRW5hYmxlZCIsImVuYWJsZWQiLCJyZW1vdmUiLCJzZXRTZWxlY3RlZCIsInNlbGVjdGVkIiwiaXNTZWxlY3RlZCIsImNvbnRhaW5zIiwic2V0SG92ZXJFbmFibGVkIiwic2V0TmFtZSIsIm5hbWUiLCJpZCIsInZhbHVlIiwiYW5pbWF0ZSIsImZhZGVUbyIsInNldFZhbHVlIiwiaW5pdFRleHRMYWJlbCIsImdpem1vIiwidGV4dERpdiIsInNldFRleHQiLCJzdHIiLCJ0ZXh0Q29udGVudCIsImJpbmQiLCJUZXh0TGFiZWwiLCJ0ZXh0IiwiU2hhcGVMYWJlbCIsInNoYXBlIiwidmFsdWVWYWxpZCIsInBpeGVsT2Zmc2V0IiwidmlzaWJpbGl0eSIsImlzUG9seWxpbmUiLCJlZGdlQ291bnQiLCJnZXRFZGdlQ291bnQiLCJlZGdlVG9MYWJlbCIsIk1hdGgiLCJmbG9vciIsImVkZ2VJbmRleFZhbGlkIiwiZ2V0UG9pbnRPbkVkZ2UiLCJjb21wdXRlQkJveCIsImJib3giLCJnZXRDZW50ZXIiLCJ0b1VuaXRzIiwiZ2V0VW5pdHNQZXJQaXhlbCIsInNoaWZ0WCIsInNoaWZ0WSIsInNldFNoYXBlIiwiTGVuZ3RoTGFiZWwiLCJwb2x5bGluZSIsInVuaXRIYW5kbGVyIiwiaGFzTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwibWVhc3VyZVRyYW5zZm9ybSIsIkJvb2xlYW4iLCJsZW5ndGhUb1N0cmluZyIsIkFyZWFMYWJlbCIsInBvbHlnb24iLCJpc1NlbGZJbnRlcnNlY3RpbmciLCJpMThuIiwiaGFzQXJlYSIsImdldEFyZWEiLCJhcmVhIiwiYXJlYVRvU3RyaW5nIiwiRWRnZUdpem1vIiwicG9zQSIsInBvc0IiLCJwb3NWYWxpZCIsImVkZ2VEaXIiLCJwb2x5IiwibG9vcEluZGV4IiwiZWRnZUluZGV4IiwiaWdub3JlQXJjcyIsIm1heFJlbGF0aXZlTGVuZ3RoIiwiYXR0YWNoVG9FZGdlIiwiZGV0YWNoRnJvbUVkZ2UiLCJlZGdlVmFsaWQiLCJnZXRFZGdlIiwic2hvdyIsIl9zaG91bGRCZVNob3duIiwiX3VwZGF0ZVJvdGF0aW9uIiwiYVNjcmVlbiIsImJTY3JlZW4iLCJlZGdlTGVuZ3RoU2NyZWVuIiwiZGlzdGFuY2VUbyIsIm1heEFsbG93ZWRQaXhlbHMiLCJfd2luZG93IiwiZ2V0V2luZG93Iiwid2lkdGgiLCJwYXJzZUZsb2F0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpciIsImdldEVkZ2VEaXJlY3Rpb24iLCJhdGFuMiIsIlBJIiwicmFkVG9EZWciLCJFZGdlTW92ZUdpem1vIiwiRWRnZUxhYmVsIiwiVmVydGV4R2l6bW8iLCJwb3MiLCJ2ZXJ0ZXhJbmRleCIsImF0dGFjaFRvVmVydGV4IiwiZGV0YWNoRnJvbVZlcnRleCIsImluZGV4VmFsaWQiLCJnZXRQb2ludCIsIkxhYmVsRmlsdGVyIiwiYWNjZXB0cyIsImdldFNoYXBlV2lkdGgiLCJ1cGRhdGVCQm94Iiwic2hhcGVXaWR0aCIsIm1heCIsIm1pbiIsImdldFBpeGVsc1BlclVuaXQiLCJEZWZhdWx0TGFiZWxGaWx0ZXIiLCJtaW5XaWR0aCIsIkxhYmVsU3R5bGVSdWxlIiwiYXBwbHkiLCJsYWJlbCIsIkZhZGVPdXRTdHlsZVJ1bGUiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJjbGFtcCIsIlNoYXBlTGFiZWxSdWxlIiwic2hhcGVUb0xhYmVsVGV4dCIsImxhYmVsRmlsdGVyIiwic3R5bGVSdWxlIiwibGFiZWxzIiwiZmlsdGVyIiwic2V0VGV4dFJ1bGUiLCJjbGVhckxhYmVscyIsInJlbW92ZUxhYmVsRnJvbVNoYXBlIiwiY2xlYXJMYWJlbCIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJhY3F1aXJlTGFiZWwiLCJzaGFwZXMiLCJpIiwiaW5kZXhPZiIsIlNoYXBlVG9vbFRpcCIsImdldFRleHQiLCJ0ZXh0Q2IiLCJtb3VzZVBvcyIsImRpc3RhbmNlVG9Cb3giLCJvbk1vdXNlTW92ZWQiLCJ1cGRhdGVDYW52YXNHaXptb3MiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0VGV4dENhbGxiYWNrIiwiZXZlbnQiLCJ0b29sQ29udHJvbGxlciIsIl9fY2xpZW50VG9DYW52YXNDb29yZHMiLCJjYW52YXNUb0xheWVyIiwiY2FudmFzWCIsImNhbnZhc1kiLCJoaXRUZXN0IiwiY29ybmVyIiwiYW5jaG9yIiwiY2FudmFzIiwiaGVpZ2h0IiwicmlnaHQiLCJib3R0b20iLCJHaXptb01hbmFnZXIiLCJlbGVtVW5kZXJNb3VzZSIsImRvY3VtZW50IiwiZWxlbWVudEZyb21Qb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwiaXNVbmRlck1vdXNlIiwiZ2V0R2l6bW9JbmRleCIsImdpem1vcyIsImZpbmRJbmRleCIsImciLCJBcmNFZGdlR2l6bW8iLCJnaXptb0xheWVyIiwiaGlnaGxpZ2h0Q29sb3IiLCJoaWdobGlnaHRJbmRleCIsImhpZ2hsaWdodExvb3BJbmRleCIsInNldFBvbHkiLCJjbGVhckVkZ2VIaWdobGlnaHRpbmciLCJjbGVhclNoYXBlcyIsInMiLCJyZW1vdmVTaGFwZSIsImVkZ2VTaGFwZU5hbWUiLCJpbmRleCIsIl9hZGRFZGdlIiwiYSIsImIiLCJsaW5lIiwibGluZVN0eWxlIiwibGluZVdpZHRoIiwibGluZUFscGhhIiwibGluZUFsaGEiLCJsaW5lQ29sb3IiLCJhZGRTaGFwZSIsInB1c2giLCJoaWdobGlnaHQiLCJzZXRFZGdlSGlnaGxpZ2h0ZWQiLCJjb2xvciIsImlzUGF0aCIsImwiLCJsb29wQ291bnQiLCJpc0FyYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/Edit2D/CanvasGizmo.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Clipboard.js":
/*!****************************************!*\
  !*** ./extensions/Edit2D/Clipboard.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Clipboard)\n/* harmony export */ });\nclass Clipboard {\n  constructor() {\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    this.shapes = [];\n  }\n\n  /**\n   * Clear the contents of the clipboard\n   */\n  clear() {\n    this.shapes = [];\n    this._dispatchContentChangedEvent(this.shapes);\n  }\n\n  /**\n   * Check if the clipboard contains shapes\n   *\n   * @returns {boolean} True if there are shapes on the clipboard, false otherwise\n   */\n  hasShapes() {\n    return this.shapes.length !== 0;\n  }\n\n  /**\n   * Post shapes to the clipboard.\n   *\n   * The shapes will be cloned and then posted to the clipboard.\n   *\n   * @param {Shape[]} shapes The shapes to post to the clipboard\n   */\n  postShapes(shapes) {\n    this.shapes = shapes.map((s) => s.clone());\n    this._dispatchContentChangedEvent(shapes);\n  }\n\n  /**\n   * Clone the shapes on to the clipboard.\n   *\n   * @returns {Shape[]} Clones of shapes on the clipboard. May be empty if no shapes are on the clipboard.\n   */\n  cloneShapes() {\n    return this.shapes.map((s) => s.clone());\n  }\n\n  _dispatchContentChangedEvent(shapes) {\n    this.dispatchEvent({\n      type: Clipboard.CONTENT_CHANGED,\n      shapes\n    });\n  }\n}\n\nClipboard.CONTENT_CHANGED = \"CONTENT_CHANGED\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9DbGlwYm9hcmQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLE1BQU1BLFNBQVMsQ0FBQztFQUMzQkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1ZDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQzs7SUFFdEQsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtFQUNwQjs7RUFFQTtBQUNKO0FBQ0E7RUFDSUMsS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxDQUFDRCxNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNFLDRCQUE0QixDQUFDLElBQUksQ0FBQ0YsTUFBTSxDQUFDO0VBQ2xEOztFQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSUcsU0FBU0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNILE1BQU0sQ0FBQ0ksTUFBTSxLQUFLLENBQUM7RUFDbkM7O0VBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsVUFBVUEsQ0FBQ0wsTUFBTSxFQUFFO0lBQ2YsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLENBQUFDLENBQUMsS0FBSUEsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQ04sNEJBQTRCLENBQUNGLE1BQU0sQ0FBQztFQUM3Qzs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lTLFdBQVdBLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSSxDQUFDVCxNQUFNLENBQUNNLEdBQUcsQ0FBQyxDQUFBQyxDQUFDLEtBQUlBLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUMxQzs7RUFFQU4sNEJBQTRCQSxDQUFDRixNQUFNLEVBQUU7SUFDakMsSUFBSSxDQUFDVSxhQUFhLENBQUM7TUFDZkMsSUFBSSxFQUFFbEIsU0FBUyxDQUFDbUIsZUFBZTtNQUMvQlo7SUFDSixDQUFDLENBQUM7RUFDTjtBQUNKOztBQUVBUCxTQUFTLENBQUNtQixlQUFlLEdBQUcsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvRWRpdDJEL0NsaXBib2FyZC5qcz9jZTcwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaXBib2FyZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIEF1dG9kZXNrLlZpZXdpbmcuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseSh0aGlzKTtcblxuICAgICAgICB0aGlzLnNoYXBlcyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjb250ZW50cyBvZiB0aGUgY2xpcGJvYXJkXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoQ29udGVudENoYW5nZWRFdmVudCh0aGlzLnNoYXBlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGNsaXBib2FyZCBjb250YWlucyBzaGFwZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZXJlIGFyZSBzaGFwZXMgb24gdGhlIGNsaXBib2FyZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFzU2hhcGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGFwZXMubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3Qgc2hhcGVzIHRvIHRoZSBjbGlwYm9hcmQuXG4gICAgICpcbiAgICAgKiBUaGUgc2hhcGVzIHdpbGwgYmUgY2xvbmVkIGFuZCB0aGVuIHBvc3RlZCB0byB0aGUgY2xpcGJvYXJkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTaGFwZVtdfSBzaGFwZXMgVGhlIHNoYXBlcyB0byBwb3N0IHRvIHRoZSBjbGlwYm9hcmRcbiAgICAgKi9cbiAgICBwb3N0U2hhcGVzKHNoYXBlcykge1xuICAgICAgICB0aGlzLnNoYXBlcyA9IHNoYXBlcy5tYXAocyA9PiBzLmNsb25lKCkpO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaENvbnRlbnRDaGFuZ2VkRXZlbnQoc2hhcGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgc2hhcGVzIG9uIHRvIHRoZSBjbGlwYm9hcmQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U2hhcGVbXX0gQ2xvbmVzIG9mIHNoYXBlcyBvbiB0aGUgY2xpcGJvYXJkLiBNYXkgYmUgZW1wdHkgaWYgbm8gc2hhcGVzIGFyZSBvbiB0aGUgY2xpcGJvYXJkLlxuICAgICAqL1xuICAgIGNsb25lU2hhcGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaGFwZXMubWFwKHMgPT4gcy5jbG9uZSgpKTtcbiAgICB9XG5cbiAgICBfZGlzcGF0Y2hDb250ZW50Q2hhbmdlZEV2ZW50KHNoYXBlcykge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogQ2xpcGJvYXJkLkNPTlRFTlRfQ0hBTkdFRCxcbiAgICAgICAgICAgIHNoYXBlcyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5DbGlwYm9hcmQuQ09OVEVOVF9DSEFOR0VEID0gXCJDT05URU5UX0NIQU5HRURcIjtcbiJdLCJuYW1lcyI6WyJDbGlwYm9hcmQiLCJjb25zdHJ1Y3RvciIsIkF1dG9kZXNrIiwiVmlld2luZyIsIkV2ZW50RGlzcGF0Y2hlciIsInByb3RvdHlwZSIsImFwcGx5Iiwic2hhcGVzIiwiY2xlYXIiLCJfZGlzcGF0Y2hDb250ZW50Q2hhbmdlZEV2ZW50IiwiaGFzU2hhcGVzIiwibGVuZ3RoIiwicG9zdFNoYXBlcyIsIm1hcCIsInMiLCJjbG9uZSIsImNsb25lU2hhcGVzIiwiZGlzcGF0Y2hFdmVudCIsInR5cGUiLCJDT05URU5UX0NIQU5HRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Clipboard.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Edit2D.js":
/*!*************************************!*\
  !*** ./extensions/Edit2D/Edit2D.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Edit2DExtension)\n/* harmony export */ });\n/* harmony import */ var _EditLayer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditLayer.js */ \"./extensions/Edit2D/EditLayer.js\");\n/* harmony import */ var _Clipboard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Clipboard.js */ \"./extensions/Edit2D/Clipboard.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Arrow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Arrow.js */ \"./extensions/Edit2D/Arrow.js\");\n/* harmony import */ var _Selection_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Selection.js */ \"./extensions/Edit2D/Selection.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _Svg_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Svg.js */ \"./extensions/Edit2D/Svg.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Trackings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Trackings.js */ \"./extensions/Edit2D/Trackings.js\");\n/* harmony import */ var _UndoStack_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./UndoStack.js */ \"./extensions/Edit2D/UndoStack.js\");\n/* harmony import */ var _Edit2DSnapper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Edit2DSnapper.js */ \"./extensions/Edit2D/Edit2DSnapper.js\");\n/* harmony import */ var _Edit2DContextMenu_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Edit2DContextMenu.js */ \"./extensions/Edit2D/Edit2DContextMenu.js\");\n/* harmony import */ var _UnitHandler_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./UnitHandler.js */ \"./extensions/Edit2D/UnitHandler.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _TangentGizmo_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./TangentGizmo.js */ \"./extensions/Edit2D/TangentGizmo.js\");\n/* harmony import */ var _SegmentTree_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./SegmentTree.js */ \"./extensions/Edit2D/SegmentTree.js\");\n/* harmony import */ var _ScreenOverlay_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ScreenOverlay.js */ \"./extensions/Edit2D/ScreenOverlay.js\");\n/* harmony import */ var _AngleGizmo_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./AngleGizmo.js */ \"./extensions/Edit2D/AngleGizmo.js\");\n/* harmony import */ var _AngleGizmo3d_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./AngleGizmo3d.js */ \"./extensions/Edit2D/AngleGizmo3d.js\");\n/* harmony import */ var _tools_MoveTool_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./tools/MoveTool.js */ \"./extensions/Edit2D/tools/MoveTool.js\");\n/* harmony import */ var _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./tools/PolygonTool.js */ \"./extensions/Edit2D/tools/PolygonTool.js\");\n/* harmony import */ var _tools_PolygonEditTool_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./tools/PolygonEditTool.js */ \"./extensions/Edit2D/tools/PolygonEditTool.js\");\n/* harmony import */ var _tools_InsertSymbolTool_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./tools/InsertSymbolTool.js */ \"./extensions/Edit2D/tools/InsertSymbolTool.js\");\n/* harmony import */ var _tools_RectangleTool_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./tools/RectangleTool.js */ \"./extensions/Edit2D/tools/RectangleTool.js\");\n/* harmony import */ var _tools_UndoTool_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tools/UndoTool.js */ \"./extensions/Edit2D/tools/UndoTool.js\");\n/* harmony import */ var _tools_CopyTool_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./tools/CopyTool.js */ \"./extensions/Edit2D/tools/CopyTool.js\");\n/* harmony import */ var _tools_LineTool_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./tools/LineTool.js */ \"./extensions/Edit2D/tools/LineTool.js\");\n/* harmony import */ var _tools_VertexMoveTool_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./tools/VertexMoveTool.js */ \"./extensions/Edit2D/tools/VertexMoveTool.js\");\n/* harmony import */ var _tools_EdgeMoveTool_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./tools/EdgeMoveTool.js */ \"./extensions/Edit2D/tools/EdgeMoveTool.js\");\n/* harmony import */ var _MeasureTransform_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./MeasureTransform.js */ \"./extensions/Edit2D/MeasureTransform.js\");\n/* harmony import */ var _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./SolidDefConvert.js */ \"./extensions/Edit2D/SolidDefConvert.js\");\n/* harmony import */ var _BooleanOps_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./BooleanOps.js */ \"./extensions/Edit2D/BooleanOps.js\");\n/* harmony import */ var _locales__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./locales */ \"./extensions/Edit2D/locales.js\");\n/* harmony import */ var _Edit2D_css__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./Edit2D.css */ \"./extensions/Edit2D/Edit2D.css\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // IMPORTANT!!\n\nconst myExtensionName = 'Autodesk.Edit2D';\nconst namespace = AutodeskNamespace('Autodesk.Edit2D');\nconst av = Autodesk.Viewing;\n\nconst OverlayName = 'Edit2D';\n\nclass ToolSet {\n  constructor(name, autoReactivate) {\n    this.name = name;\n    this.autoReactivate = autoReactivate;\n    this.context = null;\n    this.tools = {};\n  }\n}\n\n/**\n * Edit2D extension provides API for implementing 2D vector editing.\n * Loading the extension does not add UI or changes behavior in the viewer. Its purpose is only\n * to provide a basis for other extensions and client applications.\n *\n * The extension id is: `Autodesk.Edit2D`\n *\n * @example\n *   viewer.loadExtension('Autodesk.Edit2D')\n *\n * @memberof Autodesk.Viewing.Extensions\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @alias Autodesk.Viewing.Extensions.Edit2DExtension\n * @class\n */\nclass Edit2DExtension extends av.Extension {\n  constructor(viewer, options) {\n    super(viewer, options);\n\n    this.extendLocalization(_locales__WEBPACK_IMPORTED_MODULE_32__.locales);\n\n    this.undoStack = new _UndoStack_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n\n    // A map containing all registered Edit 3D tools (value as ToolSet) for a specific tool set name (key)\n    this._registeredTools = new Map();\n    this._boundOnModelAdded = this._onModelAdded.bind(this);\n    this._boundOnModelRemoved = this._onModelRemoved.bind(this);\n    this._boundOnSelectionChanged = this._onSelectionChanged.bind(this);\n  }\n\n  async load() {\n\n    // The overlay \"Edit2D\" contains subscenes for each edit layer.\n    this.viewer.impl.createOverlayScene(OverlayName);\n\n    // We require Snapping and Autodesk.CompGeom (already a dependency of Autodesk.Snapping)\n    await this.viewer.loadExtension('Autodesk.Snapping');\n\n    this.viewer.addEventListener(av.MODEL_ADDED_EVENT, this._boundOnModelAdded);\n    this.viewer.addEventListener(av.MODEL_REMOVED_EVENT, this._boundOnModelRemoved);\n\n    // activate UndoTool immediately, because it runs in parallel to other tools and for all tools\n    this.undoTool = new _tools_UndoTool_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"](this.undoStack);\n    this.viewer.toolController.registerTool(this.undoTool);\n    this.viewer.toolController.activateTool(this.undoTool.getName());\n\n    return true;\n  }\n\n  unload() {\n    for (const toolSetName of this._registeredTools.keys()) {\n      this.unregisterTools(toolSetName);\n    }\n\n    this.viewer.toolController.deregisterTool(this.undoTool);\n    this.undoTool = null;\n\n    this.viewer.removeEventListener(av.MODEL_ADDED_EVENT, this._boundOnModelAdded);\n    this.viewer.removeEventListener(av.MODEL_REMOVED_EVENT, this._boundOnModelRemoved);\n\n    return true;\n  }\n\n  _onModelAdded() {\n    if (this.viewer.getVisibleModels().length !== 1) {\n      // Do the reactivation only when the first model got loaded.\n      return;\n    }\n\n    for (const toolSet of this._registeredTools.values()) {\n      if (toolSet.autoReactivate) {var _toolSet$toolsToReact;\n        (_toolSet$toolsToReact = toolSet.toolsToReactivate) === null || _toolSet$toolsToReact === void 0 || _toolSet$toolsToReact.forEach((name) => this.viewer.toolController.activateTool(name));\n      }\n    }\n  }\n\n  _onModelRemoved() {\n    if (this.viewer.getVisibleModels().length !== 0) {\n      // Only deactivate tools when no model is active anymore.\n      return;\n    }\n\n    const controller = this.viewer.toolController;\n    for (const toolSet of this._registeredTools.values()) {\n      if (toolSet.autoReactivate) {\n        // The next statement gets all possible names of all tools of a toolSet,\n        // flatten the resulting array\n        // and returns a list tool names that are active.\n        toolSet.toolsToReactivate = Object.values(toolSet.tools).\n        map((t) => t.getNames()).\n        reduce((res, names) => res.concat(names), []) // flatten\n        .filter((name) => controller.isToolActivated(name));\n\n        toolSet.toolsToReactivate.forEach((name) => controller.deactivateTool(name));\n      }\n    }\n  }\n\n  // If multiple tools are registered, we have to clear the other selections as the mouse events are handled on the first one.\n  _onSelectionChanged(_ref) {let { target: selectionSource } = _ref;\n    for (const toolSet of this._registeredTools.values()) {\n      if (selectionSource !== toolSet.context.selection && !selectionSource.empty()) {\n        toolSet.context.selection.clear();\n      }\n    }\n  }\n\n  registerDefaultTools() {\n    this.defaultContext = this.registerTools('default');\n  }\n\n  // Get default tools. registerDefaultTools() must be called first, otherwise it returns null.\n  get defaultTools() {\n    const toolSet = this._registeredTools.get('default');\n    return toolSet && toolSet.tools;\n  }\n\n  // returns a given toolset, or null if none with the given name have been registered.\n  getToolSet(toolSetName) {\n    return this._registeredTools.get(toolSetName);\n  }\n\n  registerTools(toolSetName) {let autoReactivate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let toolSet = this._registeredTools.get(toolSetName);\n    if (toolSet) {\n      console.warn(`Edit 2D tools are already registered for tool set '${toolSetName}'`);\n      return toolSet.context;\n    }\n\n    toolSet = new ToolSet(toolSetName, autoReactivate);\n    this._registeredTools.set(toolSetName, toolSet);\n\n    // create context\n    const context = toolSet.context = new Edit2DContext(this, toolSetName, options);\n    context.selection.addEventListener(_Selection_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Events.SELECTION_CHANGED, this._boundOnSelectionChanged);\n\n    // create tools\n    toolSet.tools.polygonTool = new _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"](context, _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"].Mode.Polygon);\n    toolSet.tools.polylineTool = new _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"](context, _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"].Mode.Polyline);\n    toolSet.tools.moveTool = new _tools_MoveTool_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](context);\n    toolSet.tools.polygonEditTool = new _tools_PolygonEditTool_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"](context);\n    toolSet.tools.insertSymbolTool = new _tools_InsertSymbolTool_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"](context);\n    toolSet.tools.copyTool = new _tools_CopyTool_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](context);\n\n    // Enable all new shapes to be Paths, so that you can turn line segments into arc segments\n    const enableArcs = Boolean(this.options.enableArcs);\n    toolSet.tools.polygonTool.setArcsEnabled(enableArcs);\n    toolSet.tools.polylineTool.setArcsEnabled(enableArcs);\n\n    // Allow converting segments to ellipse arcs if wanted\n    if (this.options.enableEllipseArcs) {\n      toolSet.tools.polygonEditTool.enableEllipseArcs = true;\n    }\n\n    // register them\n    let controller = this.viewer.toolController;\n    controller.registerTool(toolSet.tools.polygonTool);\n    controller.registerTool(toolSet.tools.polylineTool);\n    controller.registerTool(toolSet.tools.moveTool);\n    controller.registerTool(toolSet.tools.polygonEditTool);\n    controller.registerTool(toolSet.tools.insertSymbolTool);\n    controller.registerTool(toolSet.tools.copyTool);\n\n    // activate CopyTool immediately, because they run parallel to other tools\n    controller.activateTool(toolSet.tools.copyTool.getName());\n\n    // create and register context menu\n    toolSet.contextMenu = new _Edit2DContextMenu_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](this.viewer, toolSet);\n    toolSet.contextMenu.register();\n\n    return context;\n  }\n\n  unregisterDefaultTools() {\n    this.unregisterTools('default');\n    this.defaultContext = null;\n  }\n\n  unregisterTools(toolSetName) {\n    let toolSet = this._registeredTools.get(toolSetName);\n    if (!toolSet) {\n      return;\n    }\n\n    let controller = this.viewer.toolController;\n    controller.deregisterTool(toolSet.tools.polygonTool);\n    controller.deregisterTool(toolSet.tools.polylineTool);\n    controller.deregisterTool(toolSet.tools.moveTool);\n    controller.deregisterTool(toolSet.tools.polygonEditTool);\n    controller.deregisterTool(toolSet.tools.insertSymbolTool);\n    controller.deregisterTool(toolSet.tools.copyTool);\n\n    toolSet.context.selection.removeEventListener(_Selection_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Events.SELECTION_CHANGED, this._boundOnSelectionChanged);\n    toolSet.context.dtor();\n\n    // Unregister and delete context menu\n    toolSet.contextMenu.unregister();\n    toolSet.contextMenu = null;\n\n    this._registeredTools.delete(toolSetName);\n  }\n\n  createLayer(options) {\n\n    const model = this.viewer.model;\n    if (!model) {\n      console.error(\"A 2D model is needed to adjust viewport\");\n    }\n\n    // create new overlay scene to show\n    const layer = new _EditLayer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.viewer, options);\n\n    if (!options.useSceneAfter) {\n      // use extension's default overlay scene name. If specified, use a custom overlay\n      // scene name from the edit2dContext to allow using multiple Edit2D scenes\n      const overlayName = options.customOverlayScene ?? OverlayName;\n      if (!this.viewer.overlays.hasScene(overlayName)) {\n        this.viewer.impl.createOverlayScene(overlayName);\n      }\n\n      // add layer scene to our overlay scene\n      this.viewer.impl.overlayScenes[overlayName].scene.add(layer.scene);\n\n      this.viewer.overlays.setSceneHiddenFromMainRender(overlayName, !!options.hiddenFromMainRender);\n    }\n\n    return layer;\n  }\n}\n\n// Common set of objects usually needed by tools\nclass Edit2DContext {\n\n  // @param {Edit2D} ext - Edit2d extension\n  constructor(ext, toolSetName) {let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.toolSetName = toolSetName;\n    this.ext = ext;\n    this.viewer = ext.viewer;\n    this.layer = ext.createLayer(options);\n    this.gizmoLayer = ext.createLayer(options);\n    this.undoStack = ext.undoStack;\n    this.clipboard = new _Clipboard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    this.selection = new _Selection_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.layer, this.undoStack);\n    this.snapper = new _Edit2DSnapper_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](this.viewer, this.layer, this.gizmoLayer);\n    this.unitHandler = new _UnitHandler_js__WEBPACK_IMPORTED_MODULE_12__.DefaultUnitHandler(this.viewer);\n\n    // track mouse in Edit2D\n    this.mouseTracker = ext.options.mouseTracker;\n\n    this.onUnitChangeHandler = this.onUnitChange.bind(this);\n\n    this.viewer.addEventListener(Autodesk.Viewing.MeasureCommon.Events.DISPLAY_UNITS_CHANGED, this.onUnitChangeHandler);\n  }\n\n  dtor() {\n    this.viewer.removeEventListener(Autodesk.Viewing.MeasureCommon.Events.DISPLAY_UNITS_CHANGED, this.onUnitChangeHandler);\n\n    this.layer.dtor();\n    this.layer = null;\n    this.gizmoLayer.dtor();\n    this.gizmoLayer = null;\n  }\n\n  // Update all visible labels if display units are changed\n  onUnitChange() {\n    this.layer.updateCanvasGizmos();\n    this.gizmoLayer.updateCanvasGizmos();\n  }\n\n  setAllGizmosEnabled(enabled) {\n    const toolSet = this.ext.getToolSet(this.toolSetName);\n    toolSet.tools.polygonEditTool.setAllGizmosEnabled(enabled);\n  }\n\n  // Set matrix that is applied to all displayed geometry\n  setMatrix(matrix) {\n    if (!this.layer) {\n      return; // Enough to check one since they are created in pairs\n    }\n    console.assert(this.gizmoLayer); // expected to be non-null because this.layer is non-null here\n\n    this.layer.setMatrix(matrix);\n    this.gizmoLayer.setMatrix(matrix);\n    this.layer.update();\n    this.gizmoLayer.update();\n  }\n\n  // Clears current layer in a way that undo-stack keeps consistent.\n  //\n  //  @param {boolean} enableUndo - If false, the undoStack is cleared.\n  clearLayer() {let enableUndo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (enableUndo) {\n      const action = new _Actions_js__WEBPACK_IMPORTED_MODULE_7__.Actions.RemoveShapes(this.layer, this.layer.shapes);\n      this.undoStack.run(action);\n    } else {var _this$layer;\n      (_this$layer = this.layer) === null || _this$layer === void 0 || _this$layer.clear();\n      this.undoStack.clear();\n    }\n  }\n\n  addShape(shape) {\n    const action = new _Actions_js__WEBPACK_IMPORTED_MODULE_7__.Actions.AddShape(this.layer, shape);\n    this.undoStack.run(action);\n  }\n\n  removeShape(shape) {\n    const action = new _Actions_js__WEBPACK_IMPORTED_MODULE_7__.Actions.RemoveShape(this.layer, shape);\n    this.undoStack.run(action);\n  }\n}\n\n// Register the extension with the extension manager.\nAutodesk.Viewing.theExtensionManager.registerExtension(myExtensionName, Edit2DExtension);\n\nnamespace.Shape = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Shape;\nnamespace.Polygon = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Polygon;\nnamespace.Polyline = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Polyline;\nnamespace.PolyBase = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyBase;\nnamespace.Path = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Path;\nnamespace.PolygonPath = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolygonPath;\nnamespace.PolylinePath = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolylinePath;\nnamespace.Circle = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Circle;\nnamespace.Style = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Style;\nnamespace.EllipseArcParams = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.EllipseArcParams;\nnamespace.PolygonTool = _tools_PolygonTool_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"];\nnamespace.Selection = _Selection_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\nnamespace.MoveTool = _tools_MoveTool_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"];\nnamespace.PolygonEditTool = _tools_PolygonEditTool_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"];\nnamespace.VertexMoveTool = _tools_VertexMoveTool_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"];\nnamespace.EdgeMoveTool = _tools_EdgeMoveTool_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"];\nnamespace.InsertSymbolTool = _tools_InsertSymbolTool_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"];\nnamespace.Math2D = _Math2D_js__WEBPACK_IMPORTED_MODULE_5__.Math2D;\nnamespace.VertexGizmo = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.VertexGizmo;\nnamespace.RectangleTool = _tools_RectangleTool_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"];\nnamespace.LineTool = _tools_LineTool_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"];\nnamespace.CopyTool = _tools_CopyTool_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"];\nnamespace.Actions = _Actions_js__WEBPACK_IMPORTED_MODULE_7__.Actions;\nnamespace.UndoStack = _UndoStack_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nnamespace.Clipboard = _Clipboard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nnamespace.UndoTool = _tools_UndoTool_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"];\nnamespace.Edit2DContext = Edit2DContext;\nnamespace.CanvasGizmo = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.CanvasGizmo;\nnamespace.CanvasGizmoBase = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.CanvasGizmoBase;\nnamespace.ShapeLabel = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.ShapeLabel;\nnamespace.AlignX = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.AlignX;\nnamespace.AlignY = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.AlignY;\nnamespace.AreaLabel = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.AreaLabel;\nnamespace.EdgeLabel = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.EdgeLabel;\nnamespace.UnitHandler = _UnitHandler_js__WEBPACK_IMPORTED_MODULE_12__.UnitHandler;\nnamespace.SimpleUnitHandler = _UnitHandler_js__WEBPACK_IMPORTED_MODULE_12__.SimpleUnitHandler;\nnamespace.DefaultUnitHandler = _UnitHandler_js__WEBPACK_IMPORTED_MODULE_12__.DefaultUnitHandler;\nnamespace.ShapeLabelRule = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.ShapeLabelRule;\nnamespace.ShapeWrapper = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.ShapeWrapper;\nnamespace.SegmentTree = _SegmentTree_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"];\nnamespace.TangentGizmo = _TangentGizmo_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"];\nnamespace.MeasureTransform = _MeasureTransform_js__WEBPACK_IMPORTED_MODULE_29__.MeasureTransform;\nnamespace.DefaultMeasureTransform = _MeasureTransform_js__WEBPACK_IMPORTED_MODULE_29__.DefaultMeasureTransform;\nnamespace.ShapeToolTip = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.ShapeToolTip;\nnamespace.Svg = _Svg_js__WEBPACK_IMPORTED_MODULE_6__.Svg;\nnamespace.SolidDefConvert = _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_30__.SolidDefConvert;\nnamespace.BooleanOps = _BooleanOps_js__WEBPACK_IMPORTED_MODULE_31__.BooleanOps;\nnamespace.LoopType = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.LoopType;\nnamespace.EdgeType = _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.EdgeType;\nnamespace.FadeOutStyleRule = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.FadeOutStyleRule;\nnamespace.EditLayer = _EditLayer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nnamespace.ScreenOverlay = _ScreenOverlay_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"];\nnamespace.Arrow = _Arrow_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\nnamespace.AngleGizmo = _AngleGizmo_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"];\nnamespace.AngleGizmo3d = _AngleGizmo3d_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"];\nnamespace.TextLabel = _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_13__.TextLabel;\nnamespace.Trackings = _Trackings_js__WEBPACK_IMPORTED_MODULE_8__.Trackings;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Edit2D.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Edit2DContextMenu.js":
/*!************************************************!*\
  !*** ./extensions/Edit2D/Edit2DContextMenu.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Edit2DContextMenu)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actions.js */ \"./extensions/Edit2D/Actions.js\");\n\n\n\nconst av = Autodesk.Viewing;\n\nclass Edit2DContextMenu {\n\n  // @param {ToolSet} toolSet (see Edit2D.js)\n  constructor(viewer, toolSet) {\n\n    this.viewer = viewer;\n    this.toolSet = toolSet;\n\n    // Define ContextMenu callback\n    this.callbackId = `Edit2D_${toolSet.name}`;\n    this.callback = this.onContextMenu.bind(this);\n  }\n\n  register() {\n    this.viewer.registerContextMenuCallback(this.callbackId, this.callback);\n  }\n\n  unregister() {\n    this.viewer.unregisterContextMenuCallback(this.callbackId);\n  }\n\n  //  @param {CanvasGizmo[][]} Array of CanvasGizmo arrays per loop\n  // Returns {PolyIndex} - Returns the PolyIndex of the vertex gizmo under mouse\n  findGizmoUnderMouse(gizmos, clientX, clientY) {\n    // Check element under mouse\n    const elem = document.elementFromPoint(clientX, clientY);\n\n    // Check if it matches with any vertex gizmo\n    for (let l = 0; l < gizmos.length; l++) {\n      const index = gizmos[l].findIndex((g) => g.container === elem);\n      if (index !== -1) {\n        return new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: index, loop: l });\n      }\n    }\n    return null;\n  }\n\n  // Note that editTool.getVertexIndex() does not work if a context menu is already open.\n  // Reason is that the evens are all consumed by an invisible full-screen-div, so that a\n  // gizmos cannot detect anymore if the mouse is on it.\n  vertexGizmoUnderMouse(clientX, clientY) {\n    // get vertex gizmos from EditTool\n    const editTool = this.toolSet.tools.polygonEditTool;\n    const gizmos = editTool.vertexMoveTool.vertexGizmos;\n    return this.findGizmoUnderMouse(gizmos, clientX, clientY);\n  }\n\n  edgeGizmoUnderMouse(clientX, clientY) {\n    // get vertex gizmos from EditTool\n    const editTool = this.toolSet.tools.polygonEditTool;\n    const gizmos = editTool.edgeMoveTool.edgeGizmos;\n    const polyIndex = this.findGizmoUnderMouse([gizmos], clientX, clientY);\n    return polyIndex ? polyIndex.vertex : -1;\n  }\n\n  // Define callback to modify the viewer context menu\n  //  @param {Object[]} menuItems - items to be modified\n  //  @param {Object}   status    - ObjectContextMenu.js\n  onContextMenu(menu, status) {\n\n    const editTool = this.toolSet.tools.polygonEditTool;\n    const layer = this.toolSet.context.layer;\n    const event = status.event;\n    const selection = this.toolSet.context.selection;\n    const undoStack = this.toolSet.context.undoStack;\n\n    // get mouse pos in layer coords\n    const mousePos = layer.canvasToLayer(status.canvasX, status.canvasY);\n\n    // Check if mouse is close to an edge of the current edit polygon\n    const edgePolyIndex = editTool.findEdgeUnderMouse(mousePos);\n\n    // Check shape under mouse. If we are close to a current edge of the editPoly,\n    // consider it as under mouse as well.\n    const shapeUnderMouse = edgePolyIndex ? editTool.poly : layer.hitTest(mousePos.x, mousePos.y);\n\n    // When right-clicking outside current selection, we select the shape under mouse or clear selection of there is none.\n    // This avoids ambiguities about which shape we are modifying (selected vs. under mouse)\n    const selectedShapes = selection.getSelectedShapes();\n    const mouseOnSelection = selectedShapes.includes(shapeUnderMouse);\n    if (!mouseOnSelection && editTool.active) {\n      selection.selectOnly(shapeUnderMouse);\n    }\n\n    // Multi-select operations are allowed when right-clicking on one of the selected shapes\n    const multiSelect = mouseOnSelection && selectedShapes.length > 1;\n    if (multiSelect) {\n\n      // Remove shapes\n      menu.push({\n        title: 'Remove Shapes',\n        target: () => {\n          undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.RemoveShapes(layer, selectedShapes));\n        }\n      });\n\n      // Unify shapes\n      if (editTool.enableUnify) {\n\n        // To allow unify, all shapes must be closed and PolyBase instances\n        const canBeUnified = !selectedShapes.find((s) => !s instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase || !s.isClosed);\n        if (canBeUnified) {\n          menu.push({\n            title: 'Unify Shapes',\n            target: () => {\n              // get index of the shape under mouse within selected shapes\n              const shapeIndex = selectedShapes.indexOf(shapeUnderMouse);\n              undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.UnifyShapes(layer, selectedShapes, shapeIndex));\n            }\n          });\n        }\n      }\n    }\n\n    // Check if a shape is selected for editing\n    const shapeSelected = Boolean(editTool.poly);\n    if (!shapeSelected) {\n      // If not, keep original viewer context menu\n      return;\n    }\n\n    // Check if we hit a vertex gizmo. Note that a VertexGizmo exceeds the actual shape.\n    const vertex = this.vertexGizmoUnderMouse(event.clientX, event.clientY);\n    const mouseOnVertexGizmo = Boolean(vertex);\n\n    // Check if we hit an edge gizmo.\n    const edgeGizmoIndex = this.edgeGizmoUnderMouse(event.clientX, event.clientY);\n    const mouseOnEdgeGizmo = edgeGizmoIndex !== -1;\n\n    // Check if \"insert vertex\" is possible at the current position\n    const edgeIndex = edgePolyIndex && edgePolyIndex.vertex;\n    const newVertexPos = edgePolyIndex && editTool.getNewVertexPosition(mousePos, edgePolyIndex);\n    const mouseCloseToEdge = Boolean(newVertexPos);\n\n    // If the mouse is neither on a shape nor on a vertex gizmo, exist here.\n    // Note that the gizmos exceed the actual shape by a few pixels, so we may hit one without hitting the shape.\n    if (!shapeUnderMouse && !mouseOnVertexGizmo && !mouseCloseToEdge) {\n      // When clicking somewhere else, leave default context menu\n      return;\n    }\n\n    // If a polygon is selected for editing, we hijack the menu completely and remove the\n    // viewer default stuff (Show all layers etc.) - assuming that the user is focusing on 2D editing.\n    menu.length = 0;\n\n    if (editTool.enableCutout) {\n      // add cutout menu item\n      const selected = editTool.poly;\n      const isClosed = selected instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase && selected.isClosed;\n      if (isClosed) {\n        menu.push({\n          title: 'Apply as Cutout',\n          target: () => {\n            const action = new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.ApplyCutOut(layer, selected);\n            this.toolSet.context.undoStack.run(action);\n          }\n        });\n      }\n    }\n\n    // If so, add RemoveVertex item\n    if (mouseOnVertexGizmo) {\n      menu.push({\n        title: 'Remove Vertex',\n        target: () => {\n          editTool.removePoint(vertex);\n        }\n      });\n    } else if (edgePolyIndex && newVertexPos) {\n      // Add \"Insert Vertex\" menu item\n      menu.push({\n        title: 'Insert Vertex',\n        target: () => {\n          // insert new vertex after edge starting point\n          const newVertex = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: edgePolyIndex.vertex + 1, loop: edgePolyIndex.loop });\n          editTool.insertPoint(newVertex, newVertexPos);\n        }\n      });\n    }\n\n    // Consider mouse as \"onEdge\" if it is hovering the edge gizmo or close to the edge itself.\n    const onEdge = mouseOnEdgeGizmo || mouseCloseToEdge;\n\n    // Check if Create/Remove arc is possible\n    const enableArc = editTool.poly instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path;\n\n    // If mouse is close to an edge or on an edge gizmo, add edge operations\n    if (!mouseOnVertexGizmo && onEdge && enableArc) {\n\n      const currentType = editTool.poly.getEdgeType(edgeIndex, edgePolyIndex.loop);\n\n      // Add \"Change-To\" operations for all edge types except the current...\n\n      // Change-to-Line\n      if (currentType !== _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line) {\n        menu.push({\n          title: 'Change to Line Segment',\n          target: () => {\n            editTool.changeEdgeToLine(edgePolyIndex);\n          }\n        });\n      }\n\n      // Change-to-Bezier\n      if (currentType !== _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier) {\n        menu.push({\n          title: 'Change to Arc Segment',\n          target: () => {\n            editTool.changeEdgeToBezier(edgePolyIndex);\n          }\n        });\n      }\n\n      // Change-to-Ellipse\n      if (currentType !== _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse && editTool.enableEllipseArcs) {\n        menu.push({\n          title: 'Change to Ellipse Segment',\n          target: () => {\n            editTool.changeEdgeToEllipse(edgePolyIndex);\n          }\n        });\n      }\n    }\n\n    // Check if there are loops any loops left if we remove this one\n    if (edgePolyIndex && editTool.poly.isClosed) {\n\n      // If the loop under mouse is the (only) outer loop, don't show \"removeLoop\", because it makes more sense to just remove the shape instead.\n      const mainLoops = editTool.poly.getMainLoops();\n      const isOnlyMainLoop = mainLoops.length === 1 && mainLoops[0] === edgePolyIndex.loop;\n\n      // Check loop type\n      const type = editTool.poly.getLoopType(edgePolyIndex.loop);\n      let itemName;\n      switch (type) {\n        case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.LoopType.Outer:itemName = 'Remove Shape Part';break;\n        case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.LoopType.Inner:itemName = 'Remove Hole';break;\n        default:itemName = 'Remove Loop';\n      };\n\n      if (!isOnlyMainLoop) {\n        menu.push({\n          title: itemName,\n          target: () => {\n            editTool.removeLoop(edgePolyIndex.loop);\n          }\n        });\n      }\n    }\n\n    if (shapeUnderMouse) {\n      menu.push({\n        title: 'Remove Shape',\n        target: () => {\n          undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.RemoveShape(layer, shapeUnderMouse));\n        }\n      });\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Edit2DContextMenu.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Edit2DSnapper.js":
/*!********************************************!*\
  !*** ./extensions/Edit2D/Edit2DSnapper.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Edit2DSnapper)\n/* harmony export */ });\n/* harmony import */ var _AngleSnapper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AngleSnapper.js */ \"./extensions/Edit2D/AngleSnapper.js\");\n/* harmony import */ var _SegmentTree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SegmentTree.js */ \"./extensions/Edit2D/SegmentTree.js\");\n\n\n\n\nconst SnapType = Autodesk.Viewing.MeasureCommon.SnapType;\n\n// Edit2DSnapper combines 3 different types of snapping:\n//  1. Snapping to sheet geometry\n//  2. Snapping to other geometry in the same layer\n//  3. Snapping to angles and alignments\n\nconst av = Autodesk.Viewing;\n\nclass Edit2DSnapper {\n\n  // @param {Viewer3D} viewer\n  // @param {Layer} layer\n  // @param {EditLayer} gizmoLayer - used to add temporary snapping indicators (e.g., dashed lines for angle snapping)\n  constructor(viewer, layer, gizmoLayer) {\n\n    this.viewer = viewer;\n    this.setGlobalManager(viewer.globalManager);\n    this.layer = layer;\n    this.gizmoLayer = gizmoLayer;\n\n    // Snapper for sheet geometry and layer geometry.\n    // Note: SnapResults are always stored in LMV world-coords (!=layer coords). Otherwise, SnapperIndicator would not display correctly.\n    this.sheetSnapper = new Autodesk.Viewing.Extensions.Snapping.Snapper(viewer);\n    this.layerSnapper = new Autodesk.Viewing.Extensions.Snapping.Snapper(viewer);\n\n    // Used for snapping to angles and alignments\n    this.angleSnapper = new _AngleSnapper_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](gizmoLayer);\n\n    // tmp box reused for snapping\n    this.snapBox = new THREE.Box2();\n\n    // make sure SnapperIndicator exists. Note that angleSnapper does not need this - only the standard LMV snapper.\n    this.sheetSnapper.activate();\n    this.layerSnapper.activate();\n\n    // update Snapper indicator on camera changes (otherwise, it grows/shrinks on camera zoom)\n    this.onCameraChangeCb = this.onCameraChange.bind(this);\n    this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChangeCb);\n\n    // If there is a model already, compute SegmentTree right now\n    this.initSegmentTrees();\n\n    // Reused tmp vector\n    this.tmpVec = new THREE.Vector3();\n    // Raycaster for snapping\n    this.raycaster = new THREE.Raycaster();\n    this.ray = new THREE.Ray();\n\n    // If we snapped to a line segment, this member contains\n    // this line segment in layer coords. See _getGeomSnapLine().\n    this.geomSnapLine = {\n      a: new THREE.Vector3(),\n      b: new THREE.Vector3()\n    };\n  }\n\n  dtor() {\n    this.sheetSnapper.deactivate();\n    this.layerSnapper.deactivate();\n    this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChangeCb);\n  }\n\n  onCameraChange() {\n    this.updateSnapperIndicators();\n  }\n\n  // Make sure that all visible models have a SegmentTree\n  initSegmentTrees() {\n    const models = this.viewer.getVisibleModels();\n    models.forEach((model) => {\n      // Note: We have to wait until the model finished loading. Otherwise, we may end up with a segmentTree that only\n      //       contains a subset of the segments.\n      //       In addition, make sure to skip the segment building in case it's a leaflet (e.g. a raster PDF).\n      const isLeaflet = model.isLeaflet();\n      if (model.is2d() && !isLeaflet && !model.segmentTree && model.isLoadDone()) {\n        model.segmentTree = new _SegmentTree_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        model.segmentTree.buildFromModel(model);\n      }\n    });\n  }\n\n  updateSnapperIndicators() {\n    // Note: All LMV snappers use (and clear) the same overlay scene. Therefore, we can call render() only on one of the Snapper\n    // indicators. Otherwise, when snapping to sheet geometry, calling layerSnapper.indicator.render() afterwards would clear\n    // the sheet-snapping indicator again.\n    if (this.sheetSnapper.isSnapped()) {\n      this.sheetSnapper.indicator.render();\n    } else {\n      // If none is snapped, it doesn't matter which indicator we call: Both will just clear the overlay.\n      this.layerSnapper.indicator.render();\n    }\n  }\n\n  // Returns snapPosition as Vector2 in layer-coords. If no snapping happens, it just maps the position directly.\n  //  @param {function(shape)} [snappingFilter] - Option filter to restrict EditLayer snapping to certain EditLayer shapes.\n  getSnapPosition(canvasX, canvasY, snappingFilter) {\n\n    const p = this._getSnapPosition(canvasX, canvasY, snappingFilter);\n\n    // keep snapping gizmos up to date\n    this.angleSnapper.updateSnapLineGizmos(p);\n\n    this.updateSnapperIndicators();\n\n    return p;\n  }\n\n  clearSnappingGizmos() {\n    this.angleSnapper.clearSnappingGizmos();\n    this.sheetSnapper.clearSnapped();\n    this.sheetSnapper.indicator && this.sheetSnapper.indicator.clearOverlays();\n    this.layerSnapper.clearSnapped();\n    this.layerSnapper.indicator && this.layerSnapper.indicator.clearOverlays();\n  }\n\n  // Angle and Alignment snapping can only be used when explicitly activated for a given polygon.\n  // Otherwise, it has no effect.\n  startAngleSnapping(poly, draggedVertex, loopIndex) {\n    this.angleSnapper.startSnapping(poly, draggedVertex, loopIndex);\n  }\n\n  // Stop snapping to angles. (No effect if angleSnapping is already off).\n  stopAngleSnapping() {\n    this.angleSnapper.stopSnapping();\n  }\n\n  // Like getSnapPosition, but excluding Snapping gizmo updates.\n  _getSnapPosition(canvasX, canvasY, snappingFilter) {\n\n    // Discard any outdated snapping results\n    this.angleSnapper.clearSnappingResult();\n    this.sheetSnapper.clearSnapped();\n    this.layerSnapper.clearSnapped();\n\n    const p = this.layer.canvasToLayer(canvasX, canvasY);\n\n    // Check if geom-snapping is possible (pGeom is in layer-coords)\n    const pGeom = this._getGeomSnapPosition(canvasX, canvasY, snappingFilter);\n\n    // Check if we snapped to line geometry. If so, we can still allow angle-snapping - as long as we constrain it to the geometry snapLine.\n    const geomSnapLine = this._getGeomSnapLine();\n\n    if (pGeom && !geomSnapLine) {\n      // We snapped to geometry and the snapType does not allow us to combine it with angle snapping\n      // => Just return result of geometry snapping\n      return pGeom;\n    }\n\n    // Apply angle-snapping. If we snapped to line geometry already, constrain angleSnapping to this line.\n    this.angleSnapper.snapToAngle(p, geomSnapLine);\n\n    // If there is no angle-snap, just apply the geometry snap\n    if (geomSnapLine && !this.angleSnapper.isSnapped()) {\n      return pGeom;\n    }\n\n    // By default, SnapperIndicator only considers the geometry snapping result. If we corrected the snap point and used the intersection with an\n    // angle snapLine, we have to update the SnapResult so that the snapPoint is correctly reflected by the SnapperIndicator.\n    if (geomSnapLine && this.angleSnapper.isSnapped()) {\n      let result = this._getGeomSnapResult();\n\n      // p is in 2D layer coords, but LMV Snapper snapResults are always stored in LMV world coords\n      const pWorld = new THREE.Vector3(p.x, p.y, 0.0).applyMatrix4(this.layer.layerToWorld);\n\n      result.geomType = SnapType.SNAP_INTERSECTION;\n      result.snapPoint = pWorld;\n      result.geomVertex = result.snapPoint; // Otherwise, snapResult.isEmpty() returns true\n    }\n\n    return p;\n  }\n\n  // Gets snap position from mouse event.\n  //  @returns {Vector2|null} Snapped position or null if not snapped.\n  _getGeomSnapPosition(canvasX, canvasY, snappingFilter) {\n\n    const p = this.layer.canvasToLayer(canvasX, canvasY);\n\n    // Compute snap position for model geom and edit layer.\n    // Both may be undefined if there was nothing to snap to.\n    const pSheet = this._getSheetSnapPosition(canvasX, canvasY);\n    const pLayer = this._getEditLayerSnapPosition(canvasX, canvasY, snappingFilter);\n\n    // If nothing is snapped, don't snap\n    if (!pSheet && !pLayer) {\n      return null;\n    }\n\n    // If only one snap point was found, use it\n    if (!pLayer) {\n      return pSheet;\n    } else if (!pSheet) {\n      return pLayer;\n    }\n\n    // Get distances of snapPoints to accurate position\n    const distSheet = THREE.Vector2.prototype.distanceToSquared.call(pSheet, p);\n    const distLayer = THREE.Vector2.prototype.distanceToSquared.call(pLayer, p);\n\n    // Choose the closer snap. If equal, prefer edit layer snap.\n    // We discard unused snap results here, so that snapper indicator keeps correct\n    if (distSheet < distLayer) {\n      // Use sheet snap and discard the other snap result\n      this.layerSnapper.clearSnapped();\n      return pSheet;\n    } else {\n      // Use layer snap and discard the other snap result\n      this.sheetSnapper.clearSnapped();\n      return pLayer;\n    }\n  }\n\n  // Returns the SnapResult of sheetSnapper or layerSnapper if any of them is currently snapped. Returns null otherwise.\n  // Note that LMV snapResults contain values in lmv world coords.\n  _getGeomSnapResult() {\n\n    // Check which of the snappers has snapped\n    const sheetSnap = this.sheetSnapper.isSnapped();\n    const layerSnap = this.layerSnapper.isSnapped();\n    if (!sheetSnap && !layerSnap) {\n      return null;\n    }\n\n    // Get latest SnapResult\n    const geomSnapper = sheetSnap ? this.sheetSnapper : this.layerSnapper;\n    return geomSnapper.getSnapResult();\n  }\n\n  // If the last geometry snapping successfully snapped to a line segment, this function returns this line segment.\n  // Result is in layer-coords.\n  //  @returns {Object} - If we snapped to a line segment, we return r={a, b} where r.a and r.b are line start/end as Vector2.\n  _getGeomSnapLine() {\n\n    const result = this._getGeomSnapResult();\n    if (!result) {\n      return null;\n    }\n\n    // If we snapped to an edge, return this edge. Note that SnapType may be SNAP_EDGE, but may also be SNAP_VERTEX\n    const edgeGeom = result.geomEdge;\n    if (edgeGeom) {\n      const verts = result.geomEdge.vertices;\n      // Copy edge start/end to this.geomSnapLine\n      this.geomSnapLine.a.copy(verts[0]);\n      this.geomSnapLine.b.copy(verts[1]);\n\n      // SnapResults are in world coords. We want the geomSnapLine in layer coords.\n      this.geomSnapLine.a.applyMatrix4(this.layer.worldToLayer);\n      this.geomSnapLine.b.applyMatrix4(this.layer.worldToLayer);\n\n      return this.geomSnapLine;\n    }\n\n    // Another SnapType => No line constraint.\n    return null;\n  }\n\n  // Snaps to 2D edit layer geometry. Returns the snapped point in layer coordinates or undefined if not snapped.\n  //  @returns {Vector2} - snap position in layer coords.\n  _getEditLayerSnapPosition(canvasX, canvasY, snappingFilter) {\n\n    // Note that snapper needs a Vector3 to work.\n    const point = this.layer.canvasToLayer(canvasX, canvasY, this.tmpVec);\n\n    // compute snap radius in layer coords\n    const radius = this.layerSnapper.detectRadiusInPixels * this.layer.getUnitsPerPixel();\n\n    // create bbox centered at the point and expanded by snapRadius in each direction\n    this.snapBox.min.set(point.x - radius, point.y - radius);\n    this.snapBox.max.set(point.x + radius, point.y + radius);\n\n    // Build dictionary of dbIds of all shapes intersecting the snapBox\n    let dbIds = {};\n    this.layer.enumShapes(this.snapBox, (shape) => {\n      // Collect dbId - unless shape is excluded from snapping\n      if (!snappingFilter || snappingFilter(shape)) {\n        dbIds[shape.id] = true;\n      }\n    });\n\n    // Collect all triangulated meshes intersecting the snapBox\n    let meshes = [];\n    this.layer.enumMeshes(this.snapBox, (mesh) => meshes.push(mesh));\n\n    // Only consider edges/arcs/vertices within snapRadius\n    const filter = (dbId) => Boolean(dbIds[dbId]);\n\n    // Run snapper on the given meshes/dbIds. Note that we run snapping in layer coords.\n    this.layerSnapper.clearSnapped();\n    this.layerSnapper.snapping2DOverlay(point, meshes, filter, radius);\n\n    // Stop here if nothing was snapped\n    if (!this.layerSnapper.isSnapped()) {\n      return undefined;\n    }\n\n    // get snapped position in layer-coords\n    const res = this.layerSnapper.getSnapResult();\n    let snapPos = Autodesk.Viewing.MeasureCommon.getSnapResultPosition(res, this.viewer);\n\n    // snapPos points to a vector inside snapResult. SnapResult will finally be converted to\n    // LMV world coords to make SnapperIndicator work. So, we copy it to a 2D vector first.\n    snapPos = new THREE.Vector2().copy(snapPos);\n\n    // SnapperIndicator requires world-coords in getSnapResult() to display correctly.\n    // Since we computed snapping in layer-coords, we finally convert it to LMV world coords.\n    res.applyMatrix4(this.layer.layerToWorld);\n\n    // Return snap position in layer coords\n    return snapPos;\n  }\n\n  // Snaps to sheet geometry. Returns the snapped point in layer coordinates or undefined if not snapped.\n  _getSheetSnapPosition(canvasX, canvasY) {\n\n    // Make sure that SegmentTree exists for all visible 2D models\n    this.initSegmentTrees();\n\n    const viewerImpl = this.viewer.impl;\n    // Callback to enum segments of all visible models\n    const enumSegments = function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n      const models = viewerImpl.get2DModels();\n      models.forEach((model) => {\n        // NOTE: SegmentTree may not be available yet if a model is still loading.\n        //       In this case, we exclude it from snapping until loading is done.\n        if (model.segmentTree) {\n          model.segmentTree.enumSegments(...args);\n        }\n      });\n    };\n\n    const intersect2DModels = (canvasX, canvasY) => {\n      const models = viewerImpl.get2DModels();\n      if (!models.length) {\n        return;\n      }\n\n      const vpVec = viewerImpl.clientToViewport(canvasX, canvasY);\n      viewerImpl.viewportToRay(vpVec, this.ray);\n      this.raycaster.set(this.ray.origin, this.ray.direction);\n\n      const results = [];\n      models.forEach((model) => {\n        // Since we are not passing a getDbIdAtPointFor2D function, this will be a pure geometry comparison\n        // and even entities that are hidden due to cropping will be considered\n        results.push(model.rayIntersect2D(this.raycaster));\n      });\n\n      // Get the closest hit\n      results.sort((a, b) => a.distance - b.distance);\n\n      return results[0];\n    };\n\n\n    // Note that we cannot use layer.canvasToLayer here, because snapper needs a Vector3 to work.\n    const result = intersect2DModels(canvasX, canvasY);\n    if (!result) {\n      return;\n    }\n    // We use enumSegments in order to get SNAP_INTERSECTION support, which is not provided by the default VertexBufferReader enumeration.\n    this.sheetSnapper.snapping2D(result, { enumSegments });\n\n    // If not snapped, just return current position\n    if (!this.sheetSnapper.isSnapped()) {\n      return undefined;\n    }\n\n    // get snapped position\n    const res = this.sheetSnapper.getSnapResult();\n    let p3D = Autodesk.Viewing.MeasureCommon.getSnapResultPosition(res, this.viewer); // returns Vector3\n\n    // convert result from LMV world coords to layer coords\n    // Note that we have to copy first, because p3D is a reference into the SnapResult.\n    // The SnapResult itself must remain in world coords to keep SnapperIndicator correct.\n    p3D = this.tmpVec.copy(p3D).applyMatrix4(this.layer.worldToLayer);\n\n    // Make sure that we consistently return 2D for all snapping types. Otherwise, we produce traps when using things like distanceTo()\n    return new THREE.Vector2().copy(p3D);\n  }\n}\n\nav.GlobalManagerMixin.call(Edit2DSnapper.prototype);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Edit2DSnapper.js\n");

/***/ }),

/***/ "./extensions/Edit2D/EditLayer.js":
/*!****************************************!*\
  !*** ./extensions/Edit2D/EditLayer.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditLayer)\n/* harmony export */ });\n\nlet nextLayerId = 1;\n\n// Radius in pixels used for hit-tests of thin lines. Hits within this distance are always considered, even if actual lineWidth is smaller.\nconst DefaultLineHitRadius = 10;\n\nconst av = Autodesk.Viewing;\n\n// A layer manages a set of 2D shapes like polygons, polylines etc. for editing and display.\nclass EditLayer {\n\n  // @param {Viewer3D} viewer - Viewer instance needed to create materials\n  constructor(viewer) {let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    av.EventDispatcher.prototype.apply(this);\n\n    this.viewer = viewer;\n    this.options = options;\n    // Contains the triangulated geometry ready for rendering.\n    this.group = new THREE.Group();\n    if (options.useSceneAfter) {\n      this.viewer.sceneAfter.add(this.group);\n    } else {\n      this.scene = new THREE.Scene();\n      this.scene.add(this.group);\n    }\n\n    // @param {Shape[]}\n    this.shapes = [];\n\n    // @param {CanvasGizmoBase[]}\n    this.canvasGizmos = [];\n\n    this.id = nextLayerId++;\n\n    // We don't use font rendering so far\n    const fontEngine = null;\n\n    // Always use client coords for drawing\n    const toPageUnits = 1.0;\n\n    // LMVCanvasContext doesn't really need a viewport - unless it's used with Pdf.js\n    const dummyViewport = { width: 0, height: 0 };\n    this.context = new Autodesk.Extensions.CompGeom.LmvCanvasContext(dummyViewport, toPageUnits, this._processMesh.bind(this), fontEngine);\n\n    // When using LMVCanvasContext for PDF, this is not needed because PDF.js takes care that mozCurrentTransform exists.\n    // In our case, we must make LMVCanvasContext create it.\n    this.context.addContextCurrentTransform();\n\n    // use round line caps and line joins\n    this.context.canvasContext.lineCap = \"round\";\n    this.context.canvasContext.lineJoin = \"round\";\n\n    this.setGlobalManager(viewer.globalManager);\n\n    // By default, we always update on modification operations. But it can (and should) be temporarily disabled\n    // for batch operations.\n    this.autoUpdate = true;\n\n    this.toPageUnits = toPageUnits;\n\n    this.styleModifiers = [];\n\n    // Update gizmo positions on camera changes\n    this.onCameraChange = () => this.updateCanvasGizmos();\n    this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n    this.viewer.addEventListener(Autodesk.Viewing.VIEWER_RESIZE_EVENT, this.onCameraChange);\n\n    // Use custom tesselation accuracy for Bezier arcs. We use a bit finer values than PDF does right now.\n    this.context.setTessParams({\n      numIterations: 100,\n      minSegLenFraction: 0.01\n    });\n\n    // Optional transform between layer geometry and LMV world coords (default: identity)\n    this.layerToWorld = new THREE.Matrix4();\n    this.worldToLayer = new THREE.Matrix4();\n\n    // Reused tmp values\n    this.tmp_pWorld = new THREE.Vector3();\n    this.tmp_p0 = new THREE.Vector2();\n    this.tmp_p1 = new THREE.Vector2();\n    this.tmp_ray = new THREE.Ray();\n    this.tmp_box = new THREE.Box2();\n\n    // For editing on planes in 3D\n    this.is3d = false;\n    this.plane = new THREE.Plane();\n    this._updatePlane();\n\n    // By default, viewer cutplanes also apply to EditLayers. Optional, all cutplanes can be excluded from layer geometry.\n    this.enableCutplanes = true;\n\n    // Camera used to render overlays.\n    this.overlayCamera = undefined;\n  }\n\n  dtor() {var _this$context;\n    (_this$context = this.context) === null || _this$context === void 0 || _this$context.destroy();\n    this.context = null;\n\n    this._clearScene();\n    this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n    this.viewer.removeEventListener(Autodesk.Viewing.VIEWER_RESIZE_EVENT, this.onCameraChange);\n  }\n\n  // @param {Shape} shape\n  // @returns {number} - The id of the shape. Used to access this shape later.\n  addShape(shape) {\n    this.shapes.push(shape);\n\n    this.dispatchEvent({ type: EditLayer.SHAPE_ADDED, shape: shape });\n\n    this._onModified();\n  }\n\n  // @param {Shape[]} shapes\n  addShapes(shapes) {\n    shapes.forEach((s) => this.addShape(s));\n  }\n\n  // @param {Shape} shape\n  // @returns {bool} true if shape was found.\n  hasShape(shape) {\n    return this.shapes.indexOf(shape) !== -1;\n  }\n\n  // Removes the given shape.\n  //  @returns {bool} true if shape was found and removed, otherwise false.\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n    if (index === -1) {\n      return false;\n    }\n    this.shapes.splice(index, 1);\n\n    this.dispatchEvent({ type: EditLayer.SHAPE_REMOVED, shape: shape });\n\n    this._onModified();\n    return true;\n  }\n\n  // @param {Shape[]} shapes\n  removeShapes(shapes) {\n    shapes.forEach((s) => this.removeShape(s));\n  }\n\n  clear() {\n    this.shapes.length = 0;\n\n    this.dispatchEvent({ type: EditLayer.LAYER_CLEARED });\n\n    this._onModified();\n  }\n\n  // Must be called after modifications to update the scene.\n  update() {\n\n    // clear scene\n    this._clearScene();\n\n    for (let i = 0; i < this.shapes.length; i++) {\n      const shape = this.shapes[i];\n\n      // Skip hidden shapes\n      if (!shape.visible) {\n        continue;\n      }\n\n      // apply override style if specified\n      const overrideStyle = this._getOverrideStyle(shape);\n\n      shape.draw(this.context, overrideStyle);\n    }\n\n    // Make sure that all shapes are processed\n    this.context.flushBuffer(0, true);\n\n    // Currently, we only draw to overlay scenes. We may generalize that if we use it for planes in 3D later.\n    // There's also the option to use sceneAfter (which is helpful if we need more control over the blending method)\n    // so in that case invalidating only the overlay is not enough for re-rendering.\n    this.viewer.impl.invalidate(this.options.useSceneAfter, false, !this.options.useSceneAfter);\n\n    // Update CanvasGizmos, e.g., to update polygon gizmo position if a polygon changed\n    this.updateCanvasGizmos();\n  }\n\n  updateCanvasGizmos() {\n    for (let i = 0; i < this.canvasGizmos.length; i++) {\n      this.canvasGizmos[i].update();\n    }\n  }\n\n  // @param {CanvasGizmoBase} gizmo - Must implement gizmo.update() to respond to changes.\n  addCanvasGizmo(gizmo) {\n    this.canvasGizmos.push(gizmo);\n  }\n\n  // @param {CanvasGizmoBase} gizmo\n  removeCanvasGizmo(gizmo) {\n    const index = this.canvasGizmos.indexOf(gizmo);\n    if (index === -1) {\n      return false;\n    }\n    this.canvasGizmos.splice(index, 1);\n    return true;\n  }\n\n  getViewport() {\n    return this.viewport;\n  }\n\n  // Returns the topmost shape containing the point (x,y)\n  //  @param {number} hitRadius - Used for hit-test of thin line-features. Points within this radius around a line are considered as hits - even if the actual lineWidth is smaller.\n  hitTest(x, y) {let hitRadius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultLineHitRadius;\n\n    // process shapes backwards to find topmost first\n    for (let i = this.shapes.length - 1; i >= 0; i--) {\n      let shape = this.shapes[i];\n\n      // Skip hidden shapes\n      if (!shape.visible) {\n        continue;\n      }\n\n      // MiterLines require to handle lineWidth and hitRadius differently\n      let isMiterline = shape.style.isMiterLine;\n      let miterLineWidth = isMiterline ? this.#getLineWidthInLayerCoords(shape) : 0;\n\n      let radiusLC;\n      if (!isMiterline) {\n        // By default, hitRadius determined based on lineWidth or hitRadius (if the line is too thin to hit otherwise)\n        radiusLC = this.getLineHitRadius(shape, hitRadius);\n      } else {\n        // For miterLines, we must handle lineWidth and hitRadius separately\n        const unitsPerPixel = this.getUnitsPerPixel();\n        radiusLC = hitRadius * unitsPerPixel;\n\n        // Considering hitRadius is only needed to keep thin lines selectable.\n        // Considering miterLineWidth is only worth the effort for thicker lines.\n        // So, we use only one of the two.\n        //\n        // A line whose width is >hitRadius is considered as \"big enough to hit without extra tolerance\".\n        // Note that it's intentional in this case that we compare the lineWidth with the radius.\n        // In theory, we could use the half-lineWidth here. But since the default hitRadius is pretty big (10px) already,\n        // this would still ignore the line endings for lineWidths that are not really \"thin\" anymore.\n        if (miterLineWidth > radiusLC) {\n          radiusLC = 0.0;\n        } else {\n          miterLineWidth = 0.0;\n        }\n      }\n\n      // For boxTests, we just extend the radius for miterLines too.\n      //\n      // TODO: Strictly speaking, this might be insufficient in ugly edge cases in\n      //       which a miter-junction overhoots the buffered lines. Could be improved\n      //       if we can determine a conservative hitRadius for miter-junctions.\n      const boxHitRadius = radiusLC + (miterLineWidth || 0);\n\n      // Compute box centered at (x,y) with given hitRadius\n      const hitBox = this.tmp_box.makeEmpty();\n      hitBox.min.set(x - boxHitRadius, y - boxHitRadius);\n      hitBox.max.set(x + boxHitRadius, y + boxHitRadius);\n\n      // get (latest) shape bbox\n      shape.updateBBox();\n\n      // Skip if shape bounds and hitBounds don't intersect\n      if (!shape.bbox.intersectsBox(hitBox)) {\n        continue;\n      }\n\n      if (shape.hitTest(x, y, radiusLC, miterLineWidth)) {\n        return shape;\n      }\n    }\n  }\n\n  #getLineWidthInLayerCoords(shape) {\n    const style = shape.style;\n    const unitsPerPixel = this.getUnitsPerPixel();\n    return style.isScreenSpace ? unitsPerPixel * style.lineWidth : style.lineWidth;\n  }\n\n  // Used for line-feature hit tests:\n  // We consider a point p to be \"on edge e\" if p is within a certain radius around e.\n  // This radius depends on style and a certain min-distance in pixels used for thin lines. Result is in layer-coords.\n  getLineHitRadius(shape) {let hitRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultLineHitRadius;\n\n    const unitsPerPixel = this.getUnitsPerPixel();\n\n    // Get line-width in layer coords\n    let lineWidth = this.#getLineWidthInLayerCoords(shape);\n\n    // For thin lines, consider hits as long as they are within minPixels radius\n    return Math.max(0.5 * lineWidth, hitRadius * unitsPerPixel);\n  }\n\n  // Optional: Sets a callback to override the style for either all or a subset of shapes.\n  //  @param {function(Shape, Style)} modifier - A callback that takes a shape as input and returns undefined (=no change) or a valid override style object.\n  addStyleModifier(modifier) {\n    this.styleModifiers.push(modifier);\n    this._onModified();\n  }\n\n  removeStyleModifier(modifier) {\n    let index = this.styleModifiers.indexOf(modifier);\n    if (index == -1) {\n      return false;\n    }\n    this.styleModifiers.splice(index, 1);\n    this._onModified();\n    return true;\n  }\n\n  // Convert layer coordinates to canvas coords.\n  //  @param {Vector2|Vector3} [target]\n  layerToCanvas(x, y) {let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n\n    // get point in LMV world coords\n    const pWorld = this.tmp_pWorld.set(x, y, 0).applyMatrix4(this.layerToWorld);\n\n    // For now, worldCoords.xy is identical with layer coords. This will change once we extend it to planes that can be embedded into 3D.\n    let res = this.viewer.impl.worldToClient(pWorld, this.overlayCamera);\n    return target.set(res.x, res.y, 0.0); // Set z to 0 if target is Vector3. Otherwise, the param has no effect\n  }\n\n  // Note: This function currently assumes a uniform unitPerPixel ratio. This may change if we add support for projected\n  //       planes in 3D, where pixelRatio may vary across the layer and may require different values in x/y direction.\n  getPixelsPerUnit() {\n    const _window = this.getWindow();\n\n    // get screen projections of two points in layer-coords that have unit-distance\n    const p0 = this.layerToCanvas(0, 0, this.tmp_p0);\n    const p1 = this.layerToCanvas(1, 0, this.tmp_p1);\n    return p0.distanceTo(p1) / _window.devicePixelRatio;\n  }\n\n  getUnitsPerPixel() {\n    return 1.0 / this.getPixelsPerUnit();\n  }\n\n  // Convert canvas coordinates (from input events) to layer viewport coordinates\n  //  @param {Vector2|Vector3} [target]\n  canvasToLayer(canvasX, canvasY)\n  {let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n    // Compute \"ray through pixel\" in world-coords.\n    const vpVec = this.viewer.impl.clientToViewport(canvasX, canvasY);\n    const ray = this.viewer.impl.viewportToRay(vpVec, this.tmp_ray, this.overlayCamera);\n\n    // Intersect ray with plane that we edit on\n    const intersect = ray.intersectPlane(this.plane, this.tmp_pWorld);\n\n    if (!intersect) {\n      // TODO: For 3D scenarios, we must properly support the case that canvasToLayer fails.\n      return target.set(0, 0);\n    }\n\n    // Convert from world to layer coords\n    intersect.applyMatrix4(this.worldToLayer);\n\n    // Set 3rd-component to 0 for Vector3 targets. For 2D, the z param is ignored\n    return target.set(intersect.x, intersect.y, 0);\n  }\n\n  // Runs the callback for all shapes in the layer that overlap the given bbox\n  //  @param {Box2} bbox\n  //  @param {function(Shape)} cb\n  enumShapes(bbox, cb) {\n    for (let i = 0; i < this.shapes.length; i++) {\n      let shape = this.shapes[i];\n\n      // Make sure that bbox is up-to-date\n      shape.updateBBox();\n\n      if (bbox.intersectsBox(shape.bbox)) {\n        cb(shape);\n      }\n    }\n  }\n\n  // Runs the callback for all triangulated 2D meshes created in the last update() call.\n  enumMeshes(bbox, cb) {\n    for (let i = 0; i < this.group.children.length; i++) {\n      const mesh = this.group.children[i];\n      const meshBox = mesh.geometry.boundingBox;\n\n      // Note: The worldMatrix is not used for triangulated Edit2D meshes, so it will always be identity. Otherwise,\n      //       we would need to compute a world-box using applyMatrixWorld() here.\n\n      // Note that meshes have a 3D box, but we are only interested in 2D check. Therefore,\n      // it's important to call intersectsBox on the input box and not on the mesh.\n      if (bbox.intersectsBox(meshBox)) {\n        cb(mesh);\n      }\n    }\n  }\n\n  findShapeById(id) {\n    return this.shapes.find((s) => s.id == id);\n  }\n\n  setMatrix(layerToWorld) {\n    this.layerToWorld.copy(layerToWorld);\n    this.worldToLayer.copy(layerToWorld).invert();\n\n    // Update projection plane\n    this._updatePlane();\n  }\n\n  // By default, the viewer cutplanes are applied to EditLayers as well. This can be used, e.g., to crop them.\n  //  @param {bool} enabled - If false, cutplanes are ignored for all layer geometry.\n  setCutPlanesEnabled() {let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (enabled != this.enableCutplanes) {\n      this.enableCutplanes = enabled;\n      this.update();\n    }\n  }\n\n  //\n  // --- Internal functions ---\n  //\n\n  // process meshData produced by LmvCanvasContext\n  _processMesh(meshData) {\n\n    // create GeometryBuffer\n    var mdata = { mesh: meshData, is2d: true, packId: \"0\", meshIndex: 0 };\n    var geom = Autodesk.Viewing.Private.BufferGeometryUtils.meshToGeometry(mdata);\n\n    // create 2D material\n    // Note that it is essential not to associate the material witha model. Otherwise,\n    // the EditShapes will disappear if model layer 0 is switched off.\n    const matman = this.viewer.impl.getMaterials();\n    const matName = matman.create2DMaterial(null, meshData.material);\n    const material = matman.findMaterial(null, matName);\n\n    // Optional: Ignore cutplanes\n    if (!this.enableCutplanes) {\n      // Do not apply any cutplanes to the geometry\n      material.cutplanes = undefined;\n      material.doNotCut = true;\n    }\n\n    const mesh = new THREE.Mesh(geom, material);\n\n    // Set mesh matrix\n    mesh.matrix = this.layerToWorld;\n    mesh.matrixAutoUpdate = false; // make sure matrix is not overwritten within updateMatrixWorld() later\n\n    this.group.children.push(mesh);\n  }\n\n  _onModified() {\n    if (this.autoUpdate) {\n      this.update();\n    }\n  }\n\n  // Apply one or more style modifiers\n  _getOverrideStyle(shape) {\n    let style = shape.style;\n    for (let i = 0; i < this.styleModifiers.length; i++) {\n      let mod = this.styleModifiers[i];\n      style = mod(shape, style) || style;\n    }\n    return style;\n  }\n\n  // Dispose all shapes generated by this layer.\n  _clearScene() {\n\n    // Dispose any GPU resources for previous output geometry\n    // Note that we construct the scene as a flat list of meshes (see _processMesh). So, we don't need a generic traversal here.\n    const meshes = this.group.children;\n    for (let i = 0; i < meshes.length; i++) {\n      let mesh = meshes[i];\n      mesh.geometry.dispose();\n\n      // TODO: We have to take care to dispose materials here as well. However, just disposing materials here as well would produce a couple of issues:\n      //\n      //  1. MaterialManager caches materials based on properties. So, we cannot safely assume that the materials are solely used by ourselves.\n      //     => MaterialManager currently only allows models to own 2D materials. We have to generalize it to support \"ownerIDs\" so\n      //        that we can ensure that the materials are owned by this layer.\n      //  2. Recompiling shaders on each update would be a waste. So we will need some caching.\n    }\n    this.group.children.length = 0;\n  }\n\n  // Only needed for 3D scenes\n  _updatePlane() {\n    // The layer geometry itself is in the {z=0} plane\n    this.plane.normal.set(0, 0, 1);\n    this.plane.constant = 0.0;\n\n    // Transform plane to world-coords\n    this.plane.applyMatrix4(this.layerToWorld);\n  }\n\n  // Used for projecting / unprojecting overlay elements.\n  setOverlayCamera(camera) {\n    this.overlayCamera = camera;\n  }\n}\n\nav.GlobalManagerMixin.call(EditLayer.prototype);\n\nEditLayer.SHAPE_ADDED = 'shapeAdded';\nEditLayer.SHAPE_REMOVED = 'shapeRemoved';\nEditLayer.LAYER_CLEARED = 'layerCleared';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/EditLayer.js\n");

/***/ }),

/***/ "./extensions/Edit2D/EditShapes.js":
/*!*****************************************!*\
  !*** ./extensions/Edit2D/EditShapes.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Circle: () => (/* binding */ Circle),\n/* harmony export */   EdgeType: () => (/* binding */ EdgeType),\n/* harmony export */   EllipseArcParams: () => (/* binding */ EllipseArcParams),\n/* harmony export */   LoopType: () => (/* binding */ LoopType),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   PolyBase: () => (/* binding */ PolyBase),\n/* harmony export */   PolyIndex: () => (/* binding */ PolyIndex),\n/* harmony export */   Polygon: () => (/* binding */ Polygon),\n/* harmony export */   PolygonPath: () => (/* binding */ PolygonPath),\n/* harmony export */   Polyline: () => (/* binding */ Polyline),\n/* harmony export */   PolylinePath: () => (/* binding */ PolylinePath),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   ShapeWrapper: () => (/* binding */ ShapeWrapper),\n/* harmony export */   Style: () => (/* binding */ Style),\n/* harmony export */   runPath: () => (/* binding */ runPath)\n/* harmony export */ });\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _Svg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Svg.js */ \"./extensions/Edit2D/Svg.js\");\n/* harmony import */ var _LoopContainment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LoopContainment.js */ \"./extensions/Edit2D/LoopContainment.js\");\n/* harmony import */ var _MSDF_Vector2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../MSDF/Vector2 */ \"./extensions/MSDF/Vector2.js\");\n\n\n\n\n\n\nlet nextShapeId = 1;\n\nconst av = Autodesk.Viewing;\n\nconst toColor = (r, g, b) => {\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n};\n\nconst cloneVectorArray = (src) => {\n  return src.map((p) => {return { x: p.x, y: p.y };});\n};\n\n// Default arc tessellation params that we use for area computations. (see Bezier.js)\n// We use smaller min segment length than for drawing, because the DefaultTessParams would cause too inaccurate measurements.\n// TODO: Replace by more accurate and faster analytic computation to replace brute-force tesselation completely.\nconst AreaTessParam = {\n  numIterations: 100,\n  minSegLenFraction: 0.01\n};\n\nconst tmpVec3 = new THREE.Vector3();\nconst tmpVec3_2 = new THREE.Vector3();\nconst tmpBox2 = new THREE.Box2();\nconst tmpVec2 = new THREE.Vector2();\n\nclass Style {\n\n  /**\n   * Creates a new Style for the Edit 2D tools.\n   * @param {object}  [params]             - various style values to overwrite the default style.\n   * @param {string}  [params.color]       - sets the color for the line and fill area\n   * @param {number}  [params.alpha]       - sets the alpha value for the line and fill area\n   * @param {string}  [params.lineColor]   - sets the color for the line\n   * @param {number}  [params.lineAlpha]   - sets the alpha value for the line\n   * @param {number}  [params.lineWidth]   - sets the line width for the line.\n   * @param {boolean} [params.isMiterLine] - if true, creates miter joints instead of rounded caps.\n   * @param {number}  [params.lineStyle]   - sets the style of the line\n   * @param {string}  [params.fillColor]   - sets the color for the fill area\n   * @param {number}  [params.fillAlpha]   - sets the alpha value for the fill area\n   */\n  constructor() {let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.lineColor = params.lineColor || params.color || \"rgb(0,0,128)\";\n    this.lineAlpha = params.lineAlpha !== undefined ? params.lineAlpha : params.alpha !== undefined ? params.alpha : 1.0;\n    this.lineWidth = params.lineWidth !== undefined ? params.lineWidth : 3.0;\n    this.isMiterLine = params.isMiterLine !== undefined && this.lineWidth > 0 && params.isMiterLine;\n\n    this.fillColor = params.fillColor || params.color || \"rgb(0,0,128)\";\n    this.fillAlpha = params.fillAlpha !== undefined ? params.fillAlpha : params.alpha !== undefined ? params.alpha : 0.2;\n\n    // lineStyle is an index into a list of dash/dot patterns defined in See LineStyleDef.js.\n    // Examples:\n    //   0:  Solid line:    ______________\n    //   10: Dashes long:   __ __ __ __ __\n    //   11: Dashes short:  _ _ _ _ _ _ _\n    //   12: Dashes longer: ___ ___ ___ ___\n    //   16: Dots:          . . . . . . .\n    //   17: Dots dense:    ..............\n    //   18: Dots sparse:   .  .  .  .  .\n    this.lineStyle = params.lineStyle || 0;\n\n    // By default, we interpret line widths in screen-space\n    this.isScreenSpace = params.isScreenSpace !== undefined ? params.isScreenSpace : true;\n    this.compositeOperation = 'source-over';\n  }\n\n  // Components r,b,g are in [0,255]\n  setFillColor(r, g, b) {\n    this.fillColor = toColor(r, g, b);\n  }\n\n  setLineColor(r, g, b) {\n    this.lineColor = toColor(r, g, b);\n  }\n\n  clone() {\n    return new Style().copy(this);\n  }\n\n  copy(from) {\n    this.lineColor = from.lineColor;\n    this.lineAlpha = from.lineAlpha;\n    this.lineWidth = from.lineWidth;\n    this.isMiterLine = from.isMiterLine;\n    this.fillColor = from.fillColor;\n    this.fillAlpha = from.fillAlpha;\n    this.lineStyle = from.lineStyle;\n    this.isScreenSpace = from.isScreenSpace;\n    this.compositeOperation = from.compositeOperation;\n    return this;\n  }\n}\n\nStyle.toColor = toColor;\n\nconst DefaultStyle = new Style();\n\n// Add all points to given bbox.\nconst addPointsToBBox = (points, dstBox) => {\n  for (let i = 0; i < points.length; i++) {\n    dstBox.expandByPoint(points[i]);\n  }\n};\n\nclass Shape extends av.EventDispatcher {\n  constructor() {let style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultStyle.clone();\n    super();\n\n    this.style = style;\n\n    // assign unique id\n    this.id = nextShapeId++;\n\n    this.bbox = new THREE.Box2();\n    this.bboxDirty = true;\n\n    // If false, it is skipped by EditLayer traversals\n    this.visible = true;\n\n    // whether users can move this shape by clicking and dragging.\n    this.movable = true;\n\n    // whether users can select this shape. If false, clicks on this shape will not select it, and by consequence it\n    // won't be editable either.\n    this.selectable = true;\n\n    // Should be set by creator by something more descriptive.\n    this.name = this.id.toString();\n  }\n\n  // Must be provided by derivaties\n  draw( /*ctx, overrideStyle*/) {}\n  hitTest( /*x, y, hitRadius*/) {} // hitRadius is a distance in layer-coords used for line feature hit-tests.\n\n  move( /*dx, dy*/) {return this;}\n\n  // Apply a transform to each point. (assuming z=0)\n  // @param {Matrix4}\n  applyMatrix4(matrix) {return this;}\n\n  clone() {\n    return new Shape().copy(this);\n  }\n\n  copy(from) {\n    this.style = from.style.clone();\n    return this;\n  }\n\n  computeBBox() {\n    console.error(\"Must be implemented by derived class.\");\n  }\n\n  modified() {\n    this.bboxDirty = true;\n    this.fireEvent({ type: Shape.Events.MODIFIED });\n  }\n\n  updateBBox() {\n    if (this.bboxDirty) {\n      this.computeBBox();\n      this.bboxDirty = false;\n    }\n  }\n\n  // Return bbox while making sure that it's up-to-date.\n  getBBox() {\n    this.updateBBox();\n    return this.bbox;\n  }\n\n  // @param {string}  svg - e.g. '<path d=\"M 13,4 L 14,4\"/>'\n  static fromSVG(svg) {\n    return _Svg_js__WEBPACK_IMPORTED_MODULE_1__.Svg.fromSvg(svg);\n  }\n\n  // Convert to SVG style string, e.g., '<path d=\"M 13,4 L 14,4\"/>'\n  // See Svg.toSvg() comment for options.\n  //\n  // Note: The digits param is deprecated and only exists for legacy reasons.\n  //       Set digits via options.digits instead.\n  toSVG(options, digits) {\n    return _Svg_js__WEBPACK_IMPORTED_MODULE_1__.Svg.toSvg(this, options, digits);\n  }\n\n  // Converts shape into a DOM element (usually a <path>).\n  //  @param {Object}\n  //  @param {bool}   [options.exportStyle=true]\n  createSvgShape(options) {\n    return _Svg_js__WEBPACK_IMPORTED_MODULE_1__.Svg.toSvgElement(this, options);\n  }\n\n  setVisible(visible) {\n    this.visible = visible;\n  }\n}\n\nShape.Events = {\n  MODIFIED: 'modified'\n};\n\nav.GlobalManagerMixin.call(Shape.prototype);\n\nconst LoopType = {\n  Empty: 0, // Loop is empty or does not exist\n  Inner: 1,\n  Outer: 2,\n  Overlapping: 3 // Loop is intersecting itself or other loops\n};\n\n// Common base class for Polygons and Polylines\nclass PolyBase extends Shape {\n\n  constructor() {let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultStyle.clone();\n    super(style);\n\n    // Array of Array of points, each represented as an object {x, y}\n    // By default, we start with a single loop/chain\n    this._loops = points ? [points] : [];\n\n    // Set by derived classes\n    this.isClosed = undefined;\n\n    // Computed on-demand: Provides extra information about how loops are nested.\n    this._loopInfos = null;\n  }\n\n  // For backward compatibility\n  get points() {\n    // Create empty loop 0 if needed\n    return this._loops[0] || (this._loops[0] = []);\n  }\n\n  get loopCount() {\n    return this._loops.length;\n  }\n\n  // acquire a number of additional points in the given loop. Each has initial coords (0,0)\n  allocPoints(numPoints) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (let i = 0; i < numPoints; ++i) {\n      this.addPoint(0, 0, loopIndex);\n    }\n    return this;\n  }\n\n  isPolygon() {return this.isClosed;}\n  isPolyline() {return !this.isClosed;}\n\n  isPath() {\n    return this instanceof Path;\n  }\n\n  addPoint(x, y) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // get or create loop\n    const loop = this._loops[loopIndex] || (this._loops[loopIndex] = []);\n\n    // add point to loop\n    const point = { x, y };\n    loop.push(point);\n    this.modified();\n    return point;\n  }\n\n  getPoint(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n\n    // Legacy fallback (deprecated): This can be removed as soon as no code\n    // is passing a target vector without a loop index\n    if (typeof loopIndex === 'object') {\n      target = loopIndex;\n      loopIndex = 0;\n    }\n\n    return target.copy(this._loops[loopIndex][index]);\n  }\n\n  removePoint(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this._loops[loopIndex].splice(index, 1);\n  }\n\n  updatePoint(index, x, y) {let loopIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let p = this._loops[loopIndex][index];\n    p.x = x;\n    p.y = y;\n    this.modified();\n  }\n\n  insertPoint(index, p) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this._loops[loopIndex].splice(index, 0, p);\n  }\n\n  get length() {\n    console.warn('poly.length is deprecated and will be removed. Please use poly.vertexCount property instead.');\n    return this.points.length;\n  }\n\n  // for backwards compatibility\n  get vertexCount() {\n    return this.points.length;\n  }\n\n  // Returns 0 if a loop is empty or does not exist.\n  getVertexCount() {let loopIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    // Array may not exist yet if no vertices were added to the loop yet.\n    const loop = this._loops[loopIndex];\n    return loop ? loop.length : 0;\n  }\n\n  // Reset back to a single empty loop\n  clear() {\n    this._loops = [];\n    this.modified();\n  }\n\n  // Enumerate all edges (a,b).\n  //  @param {function(a, b, ai, bi)} cb - For each edge, we trigger cb(a, b, ai, bi), where (a,b) are the points and (ai, bi) the indices of the edge.\n  //                                       If cb() returns true, the traversal stops.\n  enumEdges(cb) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    // get edge count\n    const edgeCount = this.getEdgeCount(loopIndex);\n\n    // check for each edge whether p is close to it.\n    for (let i = 0; i < edgeCount; i++) {\n      // get indices\n      const ai = i;\n      const bi = this.nextIndex(i, loopIndex);\n\n      // get points\n      const a = this.getPoint(ai, loopIndex);\n      const b = this.getPoint(bi, loopIndex);\n\n      // pass all to cb\n      const stop = cb(a, b, ai, bi);\n\n      // allow early out\n      if (stop) {\n        return;\n      }\n    }\n  }\n\n  /**\n   * Special-case stuff for miterLine hit-testing\n   * @param {Vector2} p         - Point to test\n   * @param {Vector2} a         - First edge point\n   * @param {Vector2} b         - Second edge point\n   * @param {number}  ai        - Index of the first edge point\n   * @param {number}  bi        - Index of the second edge point\n   * @param {number}  loopIndex - Which loop contains the edge\n   * @param {number}  precision - Tolerance for hit-testing\n   * @param {number}  lineWidth - Width of the line\n   * @returns {boolean} - Whether the point hits the line\n   */\n  #isPointOnMiterEdge(p, a, b, ai, bi, loopIndex, precision, lineWidth) {\n\n    // Check if p is on the \"inner part\" of the edge (a,b), not considering any adjacent junctions.\n    if (_Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.pointOnMiterLineSegment(p, a, b, lineWidth, precision)) {\n      return true;\n    }\n\n    // check if there are points before/after the edge\n    const prevIndex = this.prevIndex(ai, loopIndex);\n    const nextIndex = this.nextIndex(bi, loopIndex);\n    const prevExist = prevIndex !== -1;\n    const nextExist = nextIndex !== -1;\n    const prevPoint = prevExist && this.getPoint(prevIndex);\n    const nextPoint = nextExist && this.getPoint(nextIndex);\n\n    const onPrevJunction = prevPoint && _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.pointOnMiterLineJunction(p, prevPoint, a, b, lineWidth, precision);\n    const onNextJunction = nextPoint && _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.pointOnMiterLineJunction(p, a, b, nextPoint, lineWidth, precision);\n    return onPrevJunction || onNextJunction;\n  }\n\n  /** Given a polyline or polygon, it checks if the position is close to any edge of the shape.\n   * If so, it returns the index of that edge, otherwise -1.\n   * All values are in layer coords.\n   *  @param {Vector2} p         - point to test\n   *  @param {number}  precision - tolerance for hit-testing\n   *  @param {number}  loopIndex - which loop to test\n   *  @param {number}  [miterLineWidth] - optional: assume miterLine width for the edges.\n   */\n  findEdgeIndex(p, precision) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;let miterLineWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    let edgeIndex = -1;\n\n    let onEdge = (a, b) => _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.isPointOnEdge(p, a, b, precision);\n\n    // For miterLines, we need an extended special-handling hitTest that we don't want to use by default\n    const needsMiterLines = miterLineWidth > 0;\n    if (needsMiterLines) {\n      onEdge = (a, b, ai, bi) => this.#isPointOnMiterEdge(p, a, b, ai, bi, loopIndex, precision, miterLineWidth);\n    }\n\n    // Callback to find edge containing p\n    const findEdgeCb = (a, b, ai, bi) => {\n\n      // If edge contains p, store its edge index\n      const containsP = onEdge(a, b, ai, bi);\n      if (containsP) {\n        edgeIndex = ai;\n      }\n\n      // Stop on success\n      return containsP;\n    };\n\n    this.enumEdges(findEdgeCb, loopIndex);\n    return edgeIndex;\n  }\n\n  moveLoop(dx, dy, loopIndex) {\n    const points = this._loops[loopIndex];\n    for (let i = 0; i < points.length; i++) {\n      points[i].x += dx;\n      points[i].y += dy;\n    }\n    this.modified();\n  }\n\n  move(dx, dy) {\n    for (let l = 0; l < this.loopCount; l++) {\n      this.moveLoop(dx, dy, l);\n    }\n    return this;\n  }\n\n  // Note: Ellipse arcs only support simple transforms (translation, rotation, uniform scaling)\n  // @param {THREE.Matrix4}\n  applyMatrix4(matrix) {\n\n    for (let l = 0; l < this.loopCount; l++) {\n      const points = this._loops[l];\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n\n        // set target to (x,y) * matrix\n        const transformPoint = (x, y, target) => {\n          // convert to vec3, transform, and write back to target\n          const vec3 = tmpVec3.set(x, y, 0).applyMatrix4(matrix);\n          target.x = vec3.x;\n          target.y = vec3.y;\n          return target;\n        };\n\n        transformPoint(p.x, p.y, p);\n\n        // transform Bezier control points\n        if (this.isBezierArc(i, l)) {\n          let cp = transformPoint(p.cp1x, p.cp1y, tmpVec3);\n          p.cp1x = cp.x;\n          p.cp1y = cp.y;\n\n          cp = transformPoint(p.cp2x, p.cp2y, tmpVec3);\n          p.cp2x = cp.x;\n          p.cp2y = cp.y;\n        }\n\n        // Transform ellipse arcs\n        // Note: Currently, this only works for simple transforms (translate, rotate, uniform scale)\n        if (this.isEllipseArc(i, l)) {\n          p.ellipseArcParams.applyMatrix4(matrix);\n        }\n      }\n    }\n    this.modified();\n    return this;\n  }\n\n  // Copy a single loop from src poly and adds it to this one\n  //  @param {PolyBase} srcPoly\n  //  @param {number}   srcLoopIndex - must be a valid loopIndex of src\n  //  @param {number} [dstLoopIndex] Optional: index where to insert the new loop. By default, we use the first free loopIndex.\n  addLoop(srcPoly) {let srcLoopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let dstLoopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    // copy loop points\n    const srcLoop = srcPoly._loops[srcLoopIndex];\n    const newLoop = cloneVectorArray(srcLoop);\n\n    // insert new loop\n    let newIndex;\n    if (dstLoopIndex === -1) {\n      // find a free loop index to store the new loop\n      newIndex = this.nextFreeLoop();\n      this._loops[newIndex] = newLoop;\n    } else {\n      // insert new loop at given index\n      newIndex = dstLoopIndex;\n      this._loops.splice(newIndex, 0, newLoop);\n    }\n    this.modified();\n\n    return newIndex;\n  }\n\n  copyGeometry(srcPoly) {\n    this.isClosed = srcPoly.isClosed;\n\n    // copy loops\n    this._loops = [];\n    for (let i = 0; i < srcPoly.loopCount; i++) {\n      this.addLoop(srcPoly, i);\n    }\n    return this;\n  }\n\n  copy(srcPoly) {\n    super.copy(srcPoly);\n    return this.copyGeometry(srcPoly);\n  }\n\n  computeBBox() {\n    this.bbox.makeEmpty();\n    for (let i = 0; i < this.loopCount; i++) {\n      const loop = this._loops[i];\n      if (loop) {\n        addPointsToBBox(loop, this.bbox);\n      }\n    }\n    return this.bbox;\n  }\n\n  indexValid(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return index >= 0 && index < this.getVertexCount(loopIndex);\n  }\n\n  // Returns -1 if there is no next Index\n  nextIndex(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Return -1 for invalid input\n    if (!this.indexValid(index, loopIndex)) {\n      return -1;\n    }\n\n    // Handle last vertex\n    const isLast = index === this.getVertexCount(loopIndex) - 1;\n    if (isLast) {\n      // If closed, restart. Otherwise, there is no next index.\n      return this.isClosed ? 0 : -1;\n    }\n\n    return index + 1;\n  }\n\n  // Returns -1 if there is no previous vertex index\n  prevIndex(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Return -1 for invalid input\n    if (!this.indexValid(index, loopIndex)) {\n      return -1;\n    }\n\n    // Handle first vertex\n    if (index === 0) {\n      // if closed, continue at end. Otherwise, there is no previous index.\n      const vertexCount = this.getVertexCount(loopIndex);\n      return this.isClosed ? vertexCount - 1 : -1;\n    }\n\n    return index - 1;\n  }\n\n  // Returns index of the edge ending at the given vertex or -1 if it does not exist.\n  edgeBeforeVertex(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.prevIndex(index, loopIndex);\n  }\n\n  // Returns index of the edge starting at the given vertex.\n  // Returns -1 if index is the end vertex of a polyline.\n  edgeAfterVertex(index) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.edgeIndexValid(index, loopIndex) ? index : -1;\n  }\n\n  // Returns -1 if there is no previous edge.\n  nextEdgeIndex(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Check edgeIndex validity\n    if (!this.edgeIndexValid(edgeIndex, loopIndex)) {\n      return -1;\n    }\n\n    // Return -1 for last polyline edge\n    if (!this.isClosed && edgeIndex === this.getEdgeCount(loopIndex) - 1) {\n      return -1;\n    }\n\n    return this.nextIndex(edgeIndex, loopIndex);\n  }\n\n  prevEdgeIndex(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // Check edgeindex validity\n    if (!this.edgeIndexValid(edgeIndex, loopIndex)) {\n      return -1;\n    }\n\n    // Return -1 for first polyline edge\n    if (!this.isClosed && edgeIndex === 0) {\n      return -1;\n    }\n\n    return this.prevIndex(edgeIndex, loopIndex);\n  }\n\n  edgeIndexValid(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const edgeCount = this.getEdgeCount(loopIndex);\n    return edgeIndex >= 0 && edgeIndex < edgeCount;\n  }\n\n  prevEdgeExists(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertexCount = this.getVertexCount(loopIndex);\n    return this.edgeIndexValid(edgeIndex, loopIndex) && vertexCount > 2 && (edgeIndex > 0 || this.isClosed);\n  }\n\n  nextEdgeExists(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const vertexCount = this.getVertexCount(loopIndex);\n    const isLastEdge = edgeIndex === vertexCount - 2;\n    return this.edgeIndexValid(edgeIndex, loopIndex) && vertexCount > 2 && (!isLastEdge || this.isClosed);\n  }\n\n  // Copy start/end of an edge into outA, outB out params (Vector2).\n  // edgeIndex must be valid.\n  getEdge(edgeIndex, outA, outB) {let loopIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const ia = edgeIndex;\n    const ib = this.nextIndex(edgeIndex, loopIndex);\n    this.getPoint(ia, loopIndex, outA);\n    this.getPoint(ib, loopIndex, outB);\n  }\n\n  getEdgeDirection(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n    const ia = edgeIndex;\n    const ib = this.nextIndex(edgeIndex, loopIndex);\n    const loop = this._loops[loopIndex];\n    return _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.getEdgeDirection(loop[ia], loop[ib], target);\n  }\n\n  getEdgeLength(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const ia = edgeIndex;\n    const ib = this.nextIndex(edgeIndex, loopIndex);\n    const loop = this._loops[loopIndex];\n    const a = loop[ia];\n    const b = loop[ib];\n    return _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.getEdgeLength(a, b);\n  }\n\n  getEdgeCount() {let loopIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const vertexCount = this.getVertexCount(loopIndex);\n    return this.isClosed ? vertexCount : vertexCount - 1;\n  }\n\n  // Return the summed edge length for Polygons and Polylines.\n  //\n  //  @param {MeasureTransform} [measureTransform] - Optional: To allow doing calculation in another coordinate space\n  getLength(measureTransform) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    let sum = 0.0;\n    for (let i = 0; i < this.getEdgeCount(loopIndex); i++) {\n      this.getEdge(i, a, b, loopIndex);\n\n      // apply optional measure transform\n      if (measureTransform) {\n        measureTransform.apply(a);\n        measureTransform.apply(b);\n      }\n\n      sum += a.distanceTo(b);\n    }\n    return sum;\n  }\n\n  // Set vertices from THREE.Box2\n  fromBox2(box) {\n    this.addPoint(box.min.x, box.min.y);\n    this.addPoint(box.max.x, box.min.y);\n    this.addPoint(box.max.x, box.max.y);\n    this.addPoint(box.min.x, box.max.y);\n    return this;\n  }\n\n  // Returns a point along an edge. Note that the edge may be an arc for Paths.\n  //  @param {number} edgeIndex   - A valid edgeIndex\n  //  @param {number} t           - in [0,1]. t=0: startPoint, t=1: endPoint\n  //  @param {number} [loopIndex]\n  //  @param {Vector2} [target]\n  getPointOnEdge(edgeIndex, t) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;let target = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new THREE.Vector2();\n\n    const loop = this._loops[loopIndex];\n    const p0 = loop[edgeIndex];\n    const p1 = loop[this.nextIndex(edgeIndex, loopIndex)];\n    return target.lerpVectors(p0, p1, t);\n  }\n\n  // Checks if outer loop is counterclockwise. For polylines that doesn't form a loop,\n  // we assume an additional edge from end to start.\n  // @returns {bool}\n  isCCW() {let loopIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return Autodesk.Extensions.CompGeom.polygonArea(this._loops[loopIndex]) > 0;\n  }\n\n  // Return 2D edge normal\n  getLeftEdgeNormal(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n    const points = this._loops[loopIndex];\n\n    // get start/end point of the edge\n    const vi1 = edgeIndex;\n    const vi2 = (edgeIndex + 1) % points.length;\n    const v1 = points[vi1];\n    const v2 = points[vi2];\n\n    // get edge direction\n    target.subVectors(v2, v1).normalize();\n\n    // rotate by 90 degrees\n    const tmp = target.x;\n    target.x = -target.y;\n    target.y = tmp;\n\n    return target;\n  }\n\n  // Get edge normal facing outside wrt. to the loop containing the edge. If the contour is not closed, we\n  // assume an additional connection between endpoint and startpoint to defined \"outside\".\n  getOuterNormal(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector2();\n    const normal = this.getLeftEdgeNormal(edgeIndex, loopIndex, target);\n    return this.isCCW(loopIndex) ? normal.multiplyScalar(-1) : normal;\n  }\n\n  // Returns the first loopIndex >=0 that doesn't contain any points yet.\n  //  @param {number}\n  nextFreeLoop() {\n    const isFree = (l) => !l || !l.length;\n    const index = this._loops.findIndex(isFree);\n    return index >= 0 ? index : this.loopCount;\n  }\n\n  // Seaches all loops to find a vertex for which cb(vertexIndex, loopIndex) returns true.\n  //  @{function(vertexIndex, loopIndex)=>bool} searchFilter\n  //  @returns {Object|null}                    A {vertexIndex, loopIndex} pair on success. Otherwise null.\n  findVertex(searchFilter) {\n    for (let l = 0; l < this.loopCount; l++) {\n      const len = this.getVertexCount(l);\n      for (let i = 0; i < len; i++) {\n        if (searchFilter(i, l)) {\n          return {\n            vertexIndex: i,\n            loopIndex: l\n          };\n        }\n      }\n    }\n    return null;\n  }\n\n  // Returns true if poly does not contain any (non-empty loops)\n  empty() {\n    return !this._loops.some((loop) => loop && loop.length > 0);\n  }\n\n  modified() {\n    super.modified();\n\n    // Loop containment may have changed\n    this._loopInfos = null;\n  }\n\n  // Returns true if the shape has overlapping loops\n  isSelfIntersecting() {\n\n    // Todo: Currently, we only detect overlaps between different loops. We also\n    //       have to track self-intersections within a single loop.\n\n\n    // Check if we have multiple overlapping loops\n    const loopInfos = this._getLoopInfos();\n    return loopInfos && loopInfos.some((l) => l.error);\n  }\n\n  _getLoopInfos() {\n    // Loop infos are only needed for closed paths with 2 or more loops\n    if (!this.isClosed || this.loopCount < 1) {\n      return undefined;\n    }\n\n    // Reuse if already available\n    if (!this._loopInfos) {\n      this._loopInfos = (0,_LoopContainment_js__WEBPACK_IMPORTED_MODULE_2__.computeLoopContainment)(this);\n    }\n    return this._loopInfos;\n  }\n\n  // Only works for closed loops.\n  getLoopType(loopIndex) {\n\n    if (!this.isClosed) {\n      return undefined;\n    }\n\n    if (!this.getVertexCount(loopIndex)) {\n      return LoopType.Empty;\n    }\n\n    // LoopInfo should always exist for closed non-empty loops\n    const infos = this._getLoopInfos();\n    const info = infos[loopIndex];\n\n    if (info.error) {\n      return LoopType.Overlapping;\n    }\n\n    // Even-odd-rule: Loops with even rank are outer ones.\n    return info.rank & 1 ? LoopType.Inner : LoopType.Outer;\n  }\n\n  // Get all loops (directly or indirectly) enclosed by the given one\n  getChildLoops(loopIndex) {\n    const infos = this._getLoopInfos();\n    const info = infos && infos[loopIndex];\n    return info ? info.containedLoops.slice() : [];\n  }\n\n  // Eliminiate all empty loops, so that loopCount matches the number of non-empty loops\n  cleanupLoops() {\n    this._loops = this._loops.filter((l) => l && l.length >= 0);\n  }\n\n  // Returns all loops that are not enclosed by any other one. Only for closed shapes.\n  getMainLoops() {\n    const infos = this._getLoopInfos();\n    if (!infos) {\n      return [];\n    }\n\n    // Collect all rank-0 loops\n    const loops = [];\n    for (let i = 0; i < infos.length; i++) {\n      const info = infos[i];\n\n      // Skip empty or invalid loops\n      const type = this.getLoopType(i);\n      if (type !== LoopType.Outer) {\n        continue;\n      }\n\n      if (info.rank === 0) {\n        loops.push(i);\n      }\n    }\n    return loops;\n  }\n\n  // Remove loop. Remaining loop indices are shifted back by one\n  removeLoop(loopIndex) {\n    this._loops.splice(loopIndex, 1);\n    this.modified();\n    return this;\n  }\n\n  // Remove multiple loop indices\n  // @param {number[]} \n  removeLoops(loops) {\n    this._loops = this._loops.filter((l, i) => !loops.includes(i));\n  }\n\n  // Returns true if a point contains valid (i.e. finite) numbers.\n  isPointFinite(vertex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (!this.indexValid(vertex, loopIndex)) {\n      return false;\n    }\n\n    const points = this._loops[loopIndex];\n    let p = points[vertex];\n    return isFinite(p.x) && isFinite(p.y);\n  }\n\n  isLoopFinite(loopIndex) {\n    const points = this._loops[loopIndex];\n    const count = points ? points.length : 0;\n    for (let i = 0; i < count; i++) {\n      if (!this.isPointFinite(i, loopIndex)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// Helper class to address a single vertex within a loop of a PolyBase.\n// Can also be used to address edges (by indexing its start vertex).\nclass PolyIndex {\n  constructor(_ref) {let { vertex = 0, loop = 0 } = _ref;\n    this.vertex = vertex;\n    this.loop = loop;\n  }\n  equals(v) {\n    return v && this.vertex === v.vertex && this.loop === v.loop;\n  }\n}\n\nclass Polygon extends PolyBase {\n\n  constructor() {let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultStyle.clone();\n    super(points, style);\n    this.isClosed = true;\n  }\n\n  // Draw Polygon into LmvCanvasContext\n  draw(ctx, overrideStyle) {\n    drawPath(ctx, this, overrideStyle);\n  }\n\n  // We use even-odd rule if a polygon has multiple loops: A point is considered inside if it\n  // is enclosed by an odd number of loops.\n  hitTest(x, y) {\n    if (!this.vertexCount) {\n      return false;\n    }\n\n    // Compute number of loops that enclose (x,y)\n    let rank = 0;\n    for (let l = 0; l < this.loopCount; l++) {\n      const loop = this._loops[l];\n      if (!loop) {\n        continue;\n      }\n\n      // set current loop as points\n      const cp = new Autodesk.Extensions.CompGeom.ComplexPolygon(loop);\n\n      // create dummy contour\n      // TODO: Consider generalizing pointInCountour() to make it usable for non-indexed polygons\n      var contour = [];\n      for (let i = 0; i < loop.length; i++) {\n        contour.push(i);\n      }\n\n      if (cp.pointInContour(x, y, contour)) {\n        rank++;\n      }\n    }\n\n    // Apply even-odd-rule\n    return Boolean(rank & 1);\n  }\n\n  clone() {\n    return new Polygon().copy(this);\n  }\n\n  //  @param {MeasureTransform} [measureTransform] - Optional: To allow doing calculation in another coordinate space\n  getArea(measureTransform) {\n\n    if (!this.isClosed) {\n      return undefined;\n    }\n\n    // If there are multiple loops, we need loopInfos to distinguish inner and outer loops\n    const loopInfos = this._getLoopInfos();\n\n    let sumArea = 0;\n    for (let loopIndex = 0; loopIndex < this.loopCount; loopIndex++) {\n\n      // Skip degenerate loops\n      if (this.points.length < 3) {\n        continue;\n      }\n\n      // determine loop rank (number of other loops containing it)\n      // Note that loopInfos are null for single loops where we don't need them.\n      const loopInfo = loopInfos ? loopInfos[loopIndex] : null;\n      const rank = loopInfo ? loopInfo.rank : 0;\n\n      // Even-odd rule: Loops with odd rank are holes and contribute negatively\n      const sign = rank & 1 ? -1 : 1;\n\n      let loopArea = 0.0;\n      this.enumEdges((a, b) => {\n        // apply optional transform\n        measureTransform && measureTransform.apply(a);\n        measureTransform && measureTransform.apply(b);\n\n        // sum up signed areas\n        loopArea += a.x * b.y - b.x * a.y;\n      }, loopIndex);\n      sumArea += sign * Math.abs(0.5 * loopArea);\n    }\n    return sumArea;\n  }\n}\n\nclass Polyline extends PolyBase {\n\n  constructor() {let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultStyle.clone();\n    super(points, style);\n    this.isClosed = false;\n  }\n\n  makeLine() {let x0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;let y0 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let x1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;let y1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    if (this.vertexCount !== 2) {\n      this.clear();\n      this.addPoint(x0, y0);\n      this.addPoint(x1, y1);\n    } else {\n      this.updatePoint(0, x0, y0);\n      this.updatePoint(1, x1, y1);\n    }\n    return this;\n  }\n\n  // Draw Polyline into LmvCanvasContext\n  draw(ctx, overrideStyle) {\n    drawPath(ctx, this, overrideStyle);\n  }\n\n  clone() {\n    return new Polyline().copy(this);\n  }\n\n  // hitRadius is in layer-coords\n  hitTest(x, y, hitRadius) {let miterLineWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const edgeIndex = this.findEdgeIndex({ x, y }, hitRadius, 0, miterLineWidth);\n    return edgeIndex !== -1;\n  }\n}\n\nconst EdgeType = {\n  Line: 0, // Simple line segment\n  Bezier: 1, // Cubic Bezier Arc\n  Ellipse: 2 // Ellipse Arc\n};\n\n\n// Tmp objct for Ellipse Arcs. We need delayed initialization,\n// because Autodesk.Extensions.CompGeom might not be available yet at compile time.\nlet _tmpArc = null;\nlet getTmpArc = () => {\n  _tmpArc = _tmpArc || new Autodesk.Extensions.CompGeom.EllipseArc();\n  return _tmpArc;\n};\n\nlet tmpVec = new THREE.Vector2();\n\n// Helper function to run moveTo/lineTo/arcTo/closePath calls for a single loop of a path on a given context object.\n//  @param {Path2d|LmvCanvasContext|Object} ctx          - Receives the callback calls, i.e. moveTo, lineTo, bezierCurveTo, closePath etc. (see Path2D)\n//  @param {Polyline|Polygon|Path}          path\n//  @param {number}                         loopIndex    - must be a valid loop index in path\nconst runLoop = (ctx, path, loopIndex) => {\n\n  const origPoints = path._loops[loopIndex];\n  if (!origPoints || !origPoints.length) {\n    return;\n  }\n\n  // Trying to fill paths with NaN or infinite numbers may cause hangs in clipper. So, we prevent those here.\n  if (!path.isLoopFinite(loopIndex)) {\n    console.warn(`Skipped loop, because it contains Inf or NaN values. Shape ID: ${path.id}. LoopIndex: ${loopIndex}`);\n    return;\n  }\n\n  const points = origPoints;\n\n  ctx.moveTo(points[0].x, points[0].y);\n\n  const processSegment = (pStart, pEnd, edgeIndex) => {\n    switch (pStart.arcType) {\n      case EdgeType.Line:break;\n\n      case EdgeType.Bezier:{\n          ctx.bezierCurveTo(pStart.cp1x, pStart.cp1y, pStart.cp2x, pStart.cp2y, pEnd.x, pEnd.y);\n          return;\n        }\n\n      case EdgeType.Ellipse:{\n          const params = pStart.ellipseArcParams;\n          const arc = path.exportEllipseArc(edgeIndex, loopIndex, getTmpArc());\n\n          // ignore arcs with NaN values\n          if (!arc.isValid()) {\n            break;\n          }\n\n          if (ctx.ellipseArcTo) {\n            // Support SolidDef Path2D\n            ctx.ellipseArcTo(params.rx, params.ry, THREE.Math.degToRad(params.rotation), params.largeArcFlag, params.sweepFlag, pEnd.x, pEnd.y);\n          } else {\n            // For Autodesk.CompGeom (Path2D and LmvCanvasContext). Also compatible to CanvasContext and Path2D in HTML5.\n            ctx.ellipse(arc.cx, arc.cy, arc.rx, arc.ry, arc.rotation, arc.startAngle, arc.endAngle, arc.ccw);\n          }\n\n          return;\n        }\n    }\n    ctx.lineTo(pEnd.x, pEnd.y);\n  };\n\n  for (let i = 1; i < points.length; i += 1) {\n    // The segment start point defines the type (line or arc)\n    const prev = points[i - 1];\n    const p = points[i];\n\n    processSegment(prev, p, i - 1);\n  }\n\n  if (path.isClosed) {\n    // add closing segment\n    const pLast = points[points.length - 1];\n    const pFirst = points[0];\n    processSegment(pLast, pFirst, points.length - 1);\n\n    ctx.closePath();\n  }\n};\n\n// Helper function to run moveTo/lineTo/arcTo/closePath calls on a given context object.\n//  @param {Path2d|LmvCanvasContext|Object} ctx          - Receives the callback calls, i.e. moveTo, lineTo, bezierCurveTo, closePath etc. (see Path2D)\n//  @param {Polyline|Polygon|Path}          path\nconst runPath = (ctx, path) => {\n  for (let i = 0; i < path.loopCount; i++) {\n    runLoop(ctx, path, i);\n  }\n};\n\n// Draw Path to CanvasContext. Unified implementation for Path, Polyline, and Polygon\n//  @param {LmvCanvasContext}      ctx\n//  @param {Polyline|Polygon|Path} path\n//  @param {Style}                 [overrideStyle]\nconst drawPath = (ctx, path, overrideStyle) => {\n\n  if (!path.vertexCount) {\n    return;\n  }\n\n  let style = overrideStyle || path.style;\n  const c = ctx.canvasContext;\n  ctx.dbId = path.id;\n  ctx.lineStyle = style.lineStyle;\n  ctx.isScreenSpace = style.isScreenSpace;\n\n  const currentGlobalCompositeOp = c.globalCompositeOperation;\n  if (style.compositeOperation) {\n    c.globalCompositeOperation = style.compositeOperation;\n    // Make sure any previous shapes with a different blending are flushed first\n    ctx.flushBuffer(0, true);\n  }\n\n  ctx.beginPath();\n\n  if (!path.isClosed && style.isMiterLine) {\n    // if using miter lines, we'll want to match the style\n    ctx.setMiterLine(true);\n  }\n\n  // Run moveTo/lineTo/... commands on context\n  runPath(ctx, path);\n\n  // Draw fill for closed paths\n  if (path.isClosed) {\n    c.fillStyle = style.fillColor;\n    // Creates a gradient fill style.\n    if (style.fillColor.hasOwnProperty('colorStops')) {\n      const gradientData = ctx.createGradientData(style.fillColor);\n      const fillStyle = gradientData.getFillStyle(c);\n      c.fillStyle = fillStyle;\n    }\n    c.globalAlpha = style.fillAlpha;\n\n    ctx.fill();\n  }\n\n  // draw lines\n  c.strokeStyle = style.lineColor;\n  c.globalAlpha = style.lineAlpha;\n  c.lineWidth = style.lineWidth;\n\n  // Adjust lineWidth so that specified 1px widths will be drawn as 3px on screens with devicePixelRatio == 3.\n  // For human eyes the line width is then the same width.\n  if (style.isScreenSpace) c.lineWidth *= window.devicePixelRatio;\n\n  ctx.stroke();\n\n  // restore default values\n  ctx.dbId = -1;\n  ctx.lineStyle = 0;\n  ctx.isScreenSpace = false;\n  c.globalCompositeOperation = currentGlobalCompositeOp;\n};\n\n// Extra params for cubic Bezier arc edges.\nclass BezierArcParams {\n  constructor() {\n    // control point 1 that defines start tangent\n    this.cp1x = 0;\n    this.cp1y = 0;\n\n    // control point 2 that defines end tangent\n    this.cp2x = 0;\n    this.cp2y = 0;\n  }\n\n  copy(src) {\n    this.cp1x = src.cp1x;\n    this.cp1y = src.cp1y;\n    this.cp2x = src.cp2x;\n    this.cp2y = src.cp2y;\n    return this;\n  }\n\n  clone() {\n    return new BezierArcParams().copy(this);\n  }\n}\n\n// SVG compatible ellipse arc params\n// see https://www.w3.org/TR/svg-paths/#PathDataEllipticalArcCommands\nclass EllipseArcParams {\n\n  constructor() {\n    // {number} Radius along x-axis\n    this.rx = 0;\n\n    // {number} Radius along y-axis\n    this.ry = 0;\n\n    // {number} ccw rotation of x/y-axes in degrees\n    this.rotation = 0;\n\n    // {bool} whether to use shorter or longer path around ellipse.\n    this.largeArcFlag = false;\n\n    // {bool} Whether to go ccw (true) or cw (false) from startAngle. See SVG docs link above for details.\n    this.sweepFlag = false;\n  }\n\n  copy(src) {\n    this.rx = src.rx;\n    this.ry = src.ry;\n    this.rotation = src.rotation;\n    this.largeArcFlag = src.largeArcFlag;\n    this.sweepFlag = src.sweepFlag;\n    return this;\n  }\n  clone() {\n    return new EllipseArcParams().copy(this);\n  }\n\n  // @param {number} angle - counterclockwise in degrees\n  rotate(angle) {\n\n    this.rotation += angle;\n\n    // Normalize angle to keep within [0,360]\n    this.rotation -= Math.trunc(this.rotation / 360) * 360;\n  }\n\n  scale(factor) {\n    this.rx *= factor;\n    this.ry *= factor;\n  }\n\n  // updates arc params according to a given transform.\n  // Note: Transforming ellipse arcs is currently only supported for\n  //       simple transforms like translation, rotation, and uniform scaling.\n  applyMatrix4(matrix) {\n\n    // apply transform to x-axis direction\n    tmpVec3.set(1, 0, 0).applyMatrix4(matrix);\n    tmpVec3_2.set(0, 0, 0).applyMatrix4(matrix);\n    const axis = tmpVec3.sub(tmpVec3_2);\n\n    // obtain rotation angle and scale (assuming uniform scaling)\n    const rotAngle = THREE.Math.radToDeg(Math.atan2(axis.y, axis.x));\n    const scale = axis.length();\n\n    // update ellipse params\n    this.rotate(rotAngle);\n    this.scale(scale);\n\n    // If a transform changes the orientation, we have to invert sweepFlag and rotation param\n    if (_Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.changesOrientation(matrix)) {\n      this.sweepFlag = !this.sweepFlag;\n      this.rotation = 360.0 - this.rotation;\n    }\n  }\n}\n\nclass Path extends PolyBase {\n\n  constructor(points) {let isClosed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultStyle.clone();\n    super(points, style);\n\n    // If true, the path is automatically closed and can be filled.\n    this.isClosed = isClosed;\n  }\n\n  // Updates ellipse arc of an edge if vertices of the edges are going to be modified\n  // @param {number} edgeIndex   - must be valid. Edge vertices must be in state _before_ modification.\n  // @param {number} loopIndex   - must be valid.\n  // @param {Vector2} newA, newB - edge vertices after modification\n  _updateEllipseArcParams(edgeIndex, loopIndex, newA, newB) {\n\n    const params = this._loops[loopIndex][edgeIndex].ellipseArcParams;\n\n    // compute angle by which the edge was rotated\n    const oldDir = this.getEdgeDirection(edgeIndex, loopIndex);\n    const newDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.getEdgeDirection(newA, newB);\n    const dAngle = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.angleBetweenDirections(newDir, oldDir);\n\n    params.rotate(THREE.Math.radToDeg(dAngle));\n\n    // get scale factor applied to the edge\n    const oldLength = this.getEdgeLength(edgeIndex, loopIndex);\n    const newLength = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.distance2D(newA, newB); // also works for simple {x,y} pairs\n    const scale = newLength / oldLength;\n\n    // scale ellipse radii (if scaling is valid)\n    const scaleValid = isFinite(scale) && scale > 0; // zero-radii do not work\n    if (scaleValid) {\n      params.scale(scale);\n    }\n  }\n\n  updatePoint(index, x, y) {let loopIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    const points = this._loops[loopIndex];\n    let p = points[index];\n\n    let pNew = tmpVec.set(x, y);\n\n    // If p is adjacent to a BezierArc segment, the tangent should keep the same after changing the position\n    // Therefore, we change the corresponding control points as well\n    const dx = x - p.x;\n    const dy = y - p.y;\n\n    // Control point for the start tangent of the arc segment starting at p\n    if (this.isBezierArc(index, loopIndex)) {\n      p.cp1x += dx;\n      p.cp1y += dy;\n    }\n\n    // Update ellipse arc starting at p\n    if (this.isEllipseArc(index, loopIndex)) {\n      // next point must exist if index is a valid ellipse-arc edge.\n      const nextIndex = this.nextIndex(index, loopIndex);\n      const pNext = points[nextIndex];\n      this._updateEllipseArcParams(index, loopIndex, pNew, pNext);\n    }\n\n    // Update arc params of segment ending at p\n    // Note: For polylines, this edge does not exist for index==0\n    const prevEdge = this.edgeBeforeVertex(index, loopIndex);\n    if (this.edgeIndexValid(prevEdge, loopIndex)) {\n\n      // get previous vertex\n      const pPrev = points[prevEdge];\n\n      // Update bezier control point\n      if (this.isBezierArc(prevEdge, loopIndex)) {\n        pPrev.cp2x += dx;\n        pPrev.cp2y += dy;\n      }\n\n      // Update ellipse arc\n      if (this.isEllipseArc(prevEdge, loopIndex)) {\n        this._updateEllipseArcParams(prevEdge, loopIndex, pPrev, pNew);\n      }\n    }\n\n    p.x = x;\n    p.y = y;\n    this.modified();\n  }\n\n  getEdgeType(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const type = this._loops[loopIndex][segmentIndex].arcType;\n    return type ? type : EdgeType.Line;\n  }\n\n  // Change segment into a cubic Bezier arc.\n  // First and last control point are already given by the vertex positions.\n  //\n  //  @param {number}             segmentIndex - must be in [0, this.getEdgeCount(loopIndex)]\n  //  @param {BezierArcParams}    params\n  //  @param {number} [loopIndex]\n  setBezierArc(segmentIndex, params) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    // Legacy support:\n    // If cp1x, cp2x etc. are enlisted individually, reshape params to expected form.\n    // It's a pain that JS doesn't have function overloads.\n    const isParamObj = typeof params === 'object';\n    if (!isParamObj) {\n      params = {\n        cp1x: params,\n        cp1y: loopIndex,\n        cp2x: arguments.length <= 3 ? undefined : arguments[3],\n        cp2y: arguments.length <= 4 ? undefined : arguments[4]\n      };\n      loopIndex = (arguments.length <= 5 ? undefined : arguments[5]) || 0;\n    }\n\n    const p = this._loops[loopIndex][segmentIndex];\n    p.arcType = EdgeType.Bezier;\n    BezierArcParams.prototype.copy.call(p, params);\n\n    this.modified();\n  }\n\n  getBezierArcParams(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new BezierArcParams();\n    // Find params\n    const p = this._loops[loopIndex][segmentIndex];\n    const srcParams = p && p.arcType === EdgeType.Bezier && p;\n\n    // return a copy if found, otherwise undefined\n    return srcParams && target.copy(srcParams);\n  }\n\n  // Set ellipse arc segment. Parameters are the same as for SVG ellipse arcs.\n  // see https://www.w3.org/TR/svg-paths/#PathDataEllipticalArcCommands\n  //\n  //  @param {number}   segmentIndex - must be in [0, this.getEdgeCount()]\n  //  @param {EllipseArcParams} arcParams\n  setEllipseArc(segmentIndex, arcParams) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    const p = this._loops[loopIndex][segmentIndex];\n\n    p.arcType = EdgeType.Ellipse;\n    p.ellipseArcParams = arcParams.clone();\n\n    this.modified();\n  }\n\n  // @param {number}           segmentIndex - must be a valid ellipse-arc edge\n  // @param {EllipseArcParams} target\n  // @returns {EllipseArcParams}\n  getEllipseArcParams(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new EllipseArcParams();\n\n    // Find params\n    const p = this._loops[loopIndex][segmentIndex];\n    const srcParams = p && p.arcType === EdgeType.Ellipse && p.ellipseArcParams;\n\n    // Return a copy if found, otherwise undefined.\n    return srcParams && target.copy(srcParams);\n  }\n\n  // Configures an EllipseArc curve to match with an ellipse-arc edge. This allows for sampling the arc.\n  //  @param {number}     edgeIndex     - must be an ellipse arc\n  //  @param {number}     [loopIndex=0] - loopIndex\n  //  @param {EllipseArc} [target]      - optional\n  //  @returns {EllipseArc}\n  exportEllipseArc(edgeIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new EllipseArc();\n\n    const points = this._loops[loopIndex];\n\n    // get start/end points\n    const nextIndex = this.nextIndex(edgeIndex, loopIndex);\n    const pStart = points[edgeIndex];\n    const pEnd = points[nextIndex];\n    const params = pStart.ellipseArcParams;\n\n    target.setFromSvgArc(\n      params.rx,\n      params.ry,\n      params.rotation,\n      params.largeArcFlag,\n      params.sweepFlag,\n      pStart,\n      pEnd\n    );\n    return target;\n  }\n\n  isBezierArc(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.edgeIndexValid(segmentIndex, loopIndex) && this._loops[loopIndex][segmentIndex].arcType === EdgeType.Bezier;\n  }\n\n  isEllipseArc(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.edgeIndexValid(segmentIndex, loopIndex) && this._loops[loopIndex][segmentIndex].arcType === EdgeType.Ellipse;\n  }\n\n  isArc(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this.isBezierArc(segmentIndex, loopIndex) || this.isEllipseArc(segmentIndex, loopIndex);\n  }\n\n  // Get tangent vector pointing from start vertex to control point 1 of an arc segment.\n  // Only allowed for Bezier arcs. Result is not normalized.\n  //  @param {number} segmentIndex - must be a valid index of an arc segment.\n  //  @returns {Vector2}\n  getStartTangent(segmentIndex) {let outTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const target = outTarget || new THREE.Vector2();\n    const p = this.points[segmentIndex];\n    target.x = p.cp1x - p.x;\n    target.y = p.cp1y - p.y;\n    return target;\n  }\n\n  // Get tangent vector pointing from end vertex to control point 2 of an arc segment.\n  //  @param {number} segmentIndex - must be a valid index of an arc segment.\n  //  @returns {Vector2}\n  getEndTangent(segmentIndex) {let outTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const target = outTarget || new THREE.Vector2();\n    const endVertex = this.nextIndex(segmentIndex);\n\n    // get start/end point of the segment\n    const pStart = this.points[segmentIndex];\n    const pEnd = this.points[endVertex];\n    target.x = pStart.cp2x - pEnd.x;\n    target.y = pStart.cp2y - pEnd.y;\n    return target;\n  }\n\n  //  @param {number} segmentIndex - must be a valid index of an arc segment.\n  //  @param {Vector2} tangent\n  setStartTangent(segmentIndex, tangent) {\n    const p = this.points[segmentIndex];\n    p.cp1x = p.x + tangent.x;\n    p.cp1y = p.y + tangent.y;\n    this.modified();\n  }\n\n  //  @param {number} segmentIndex - must be a valid index of an arc segment.\n  //  @param {Vector2} tangent\n  setEndTangent(segmentIndex, tangent) {\n    const p = this.points[segmentIndex];\n    const pEnd = this.points[this.nextIndex(segmentIndex)];\n    p.cp2x = pEnd.x + tangent.x;\n    p.cp2y = pEnd.y + tangent.y;\n    this.modified();\n  }\n\n  // Change Bezier or Ellipse arc back to simple line segment\n  removeArc(segmentIndex) {let loopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const p = this._loops[loopIndex][segmentIndex];\n\n    if (p.arcType === EdgeType.Bezier) {\n      p.cp1x = undefined;\n      p.cp1y = undefined;\n      p.cp2x = undefined;\n      p.cp2y = undefined;\n    }\n\n    if (p.ellipseArcParams) p.ellipseArcParams = undefined;\n\n    // reset type\n    p.arcType = EdgeType.Line;\n\n    this.modified();\n  }\n\n  // Return ctrl point of Bezier Arc. Only allowed if isBezierArc(segmentIndex) is true\n  // @param {number} segmentIndex\n  // @param {number} ctrlPointIndex - Must be 1 or 2. Note that ctrlPoints 0 and 3 are defined by\n  //                                  current vertex position\n  // @param {Vector2} [target]\n  // @param {number}  [loopIndex]\n  getControlPoint(segmentIndex, ctrlPointIndex) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;let target = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new THREE.Vector2();\n    const p = this._loops[loopIndex][segmentIndex];\n\n    if (ctrlPointIndex === 1) {\n      target.x = p.cp1x;\n      target.y = p.cp1y;\n    } else {\n      target.x = p.cp2x;\n      target.y = p.cp2y;\n    }\n    return target;\n  }\n\n  // Return ctrl point of Bezier Arc. Only allowed if isBezierArc(segmentIndex) is true\n  // @param {number} segmentIndex\n  // @param {number} ctrlPointIndex - Must be 1 or 2. Note that ctrlPoints 0 and 3 are defined by\n  //                                  current vertex position\n  updateControlPoint(segmentIndex, ctrlPoint, x, y) {let loopIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let p = this._loops[loopIndex][segmentIndex];\n    if (ctrlPoint === 1) {\n      p.cp1x = x;\n      p.cp1y = y;\n    } else {\n      p.cp2x = x;\n      p.cp2y = y;\n    }\n    this.modified();\n  }\n\n  // Draw Polygon into LmvCanvasContext\n  draw(ctx, overrideStyle) {\n    drawPath(ctx, this, overrideStyle);\n  }\n\n  // Sample path into a Polygon or Polyline.\n  //  @returns {Polygon|Polyline}\n  toPoly() {let tessParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Autodesk.Extensions.CompGeom.DefaultTessParams;\n\n    const poly = this.isClosed ? new Polygon() : new Polyline();\n    for (let l = 0; l < this.loopCount; l++) {\n\n      // Build up a polygon from path commands\n      const ctx = {\n        moveTo: (x, y) => poly.addPoint(x, y, l),\n        lineTo: (x, y) => poly.addPoint(x, y, l),\n        bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n\n          // get last added point. Note that it always exists, because runLoop() always starts with moveTo.\n          // so we know for sure that >=1 points were already added to this polygon loop.\n          const points = poly._loops[l];\n          const last = points[points.length - 1];\n\n          // compute bbox of the arc - which we use as an estimate for required accuracy\n          const arcBox = tmpBox2.makeEmpty();\n          arcBox.expandByPoint(last);\n          arcBox.expandByPoint(tmpVec2.set(x, y));\n          arcBox.expandByPoint(tmpVec2.set(cp1x, cp1y));\n          arcBox.expandByPoint(tmpVec2.set(cp2x, cp2y));\n          const sz = arcBox.getSize(tmpVec).length();\n\n          // sample arc into lineTo() segments\n          Autodesk.Extensions.CompGeom.TesselateCubic(ctx, last.x, last.y, cp1x, cp1y, cp2x, cp2y, x, y, sz, tessParams);\n        },\n        ellipse(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n\n          // use ellipse maxRadius a reference for required accuracy\n          const sz = Math.max(rx, ry);\n\n          // determine tesselation params\n          const maxSegments = tessParams.numIterations;\n          const minSegmentLength = tessParams.minSegLenFraction * sz;\n\n          // tesselate arc\n          const arc = getTmpArc().set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n          arc.tesselate(ctx, maxSegments, minSegmentLength);\n        },\n        closePath: () => {} // Polygon is closed anyway.\n      };\n      runLoop(ctx, this, l);\n    }\n    return poly;\n  }\n\n  computeBBox() {\n    // Compute bbox of all vertices\n    super.computeBBox();\n\n    // Consider Bezier arcs: By definition, Bezier curves are always bounded by the convex hull of their control\n    // points. Therefore, we can simply add the control points to the bbox.\n    //\n    // Note: The bboxes obtained by this simple approach are only guaranteed to contain the curve. But, they are not guaranteed to be minimal.\n    //       This is not a big issue for most uses (hitTest, drawing etc.). In case it becomes a problem anywhere, we need a better solution here, e.g.\n    //       https://stackoverflow.com/questions/24809978/calculating-the-bounding-box-of-cubic-bezier-curve\n    const cp = new THREE.Vector2();\n    for (let l = 0; l < this.loopCount; l++) {\n      for (let i = 0; i < this.getVertexCount(l); i++) {\n\n        if (this.isBezierArc(i, l)) {\n          // add control point 1\n          this.getControlPoint(i, 1, l, cp);\n          this.bbox.expandByPoint(cp);\n\n          // add control point 2\n          this.getControlPoint(i, 2, l, cp);\n          this.bbox.expandByPoint(cp);\n        } else\n        if (this.isEllipseArc(i, l)) {\n          const arc = this.exportEllipseArc(i, l, getTmpArc());\n          this.bbox.union(arc.computeBBox(tmpBox2));\n        }\n      }\n    }\n  }\n\n  hitTest(x, y, hitRadius) {let miterLineWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    const poly = this.toPoly();\n    return poly.hitTest(x, y, hitRadius, miterLineWidth);\n  }\n\n  clone() {\n    return new Path().copy(this);\n  }\n\n  // @param {Path} srcPath\n  // @param {number} srcLoopIndex loop in srcPath to copy\n  // @param {number} [dstLoopIndex] Optional: index where to insert the new loop. By default, we use the first free loopIndex.\n  addLoop(srcPath) {let srcLoopIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let dstLoopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n    // If dstLoop is not set, it will be chosen by the super.addLoop().\n    dstLoopIndex = super.addLoop(srcPath, srcLoopIndex, dstLoopIndex);\n\n    const srcPoints = srcPath._loops[srcLoopIndex];\n    const dstPoints = this._loops[dstLoopIndex];\n\n    // Copy extra information for arcs\n    for (let i = 0; i < srcPoints.length; i++) {\n      const type = srcPath.getEdgeType(i, srcLoopIndex);\n\n      // Line segments are fully handled by the base class already\n      if (type === EdgeType.Line) {\n        continue;\n      }\n\n      const src = srcPoints[i];\n      const dst = dstPoints[i];\n\n      dst.arcType = src.arcType;\n\n      switch (type) {\n        case EdgeType.Bezier:{\n            // copy control points\n            dst.cp1x = src.cp1x;\n            dst.cp1y = src.cp1y;\n            dst.cp2x = src.cp2x;\n            dst.cp2y = src.cp2y;\n            break;\n          }\n        case EdgeType.Ellipse:{\n            // copy arc params\n            dst.ellipseArcParams = src.ellipseArcParams && src.ellipseArcParams.clone();\n            break;\n          }\n      }\n    }\n\n    this.modified();\n    return this;\n  }\n\n  moveLoop(dx, dy, loopIndex) {\n    super.moveLoop(dx, dy, loopIndex);\n\n    // Move affected control points as well\n    const points = this._loops[loopIndex];\n    for (let i = 0; i < points.length; i++) {\n      if (!this.isBezierArc(i, loopIndex)) {\n        continue;\n      }\n\n      const p = points[i];\n      p.cp1x += dx;\n      p.cp1y += dy;\n      p.cp2x += dx;\n      p.cp2y += dy;\n    }\n\n    // Note that for Ellipse arcs, it is sufficient to move start/end like for line segments.\n  }\n\n  getArea(measureTransform) {\n    if (!this.isClosed) {\n      return undefined;\n    }\n\n    // Todo: If performance becomes an issue, this can be optimized by a less brute-force way.\n    const poly = this.toPoly(AreaTessParam);\n\n    // Since poly is just temporary, we can just share the loop infos to prevent poly.getArea()\n    // from computing them again.\n    poly._loopInfos = this._getLoopInfos();\n\n    return poly.getArea(measureTransform);\n  }\n\n  getLength(measureTransform) {\n    const poly = this.toPoly();\n    return poly.getLength(measureTransform);\n  }\n\n  // Get point on segment. This refines the implementation\n  // of PolyBase by supporting arc segments.\n  getPointOnEdge(segmentIndex, t) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;let target = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new THREE.Vector2();\n\n    const points = this._loops[loopIndex];\n    const type = this.getEdgeType(segmentIndex, loopIndex);\n    switch (type) {\n      case EdgeType.Line:break;\n      case EdgeType.Bezier:{\n          // get segment start/end\n          const a = points[segmentIndex];\n          const b = points[this.nextIndex(segmentIndex)];\n\n          return Autodesk.Extensions.CompGeom.getCubeBezierPoint(t, a.x, a.y, a.cp1x, a.cp1y, a.cp2x, a.cp2y, b.x, b.y, target);\n        }\n      case EdgeType.Ellipse:{\n          const arc = this.exportEllipseArc(segmentIndex, loopIndex, getTmpArc());\n\n          // ignore arcs with NaN values\n          if (!arc.isValid()) {\n            break;\n          }\n          return arc.getPoint(t, target);\n        }\n      default:avp.logger.error('unexpected edge type');\n    }\n\n    return super.getPointOnEdge(segmentIndex, t, loopIndex, target);\n  }\n\n  // Run moveTo/lineTo/arcTo/closePath calls on a given context object.\n  //  @param {Path2d|LmvCanvasContext|Object} ctx    - Receives the callback calls, i.e. moveTo, lineTo, bezierCurveTo, closePath etc. (see Path2D)\n  runPathCommands(ctx) {\n    runPath(ctx, this);\n  }\n\n  // Returns false if all edges of all loops are line segments.\n  hasArcs() {\n    const filter = (vertexIndex, loopIndex) => this.isArc(vertexIndex, loopIndex);\n    return Boolean(this.findVertex(filter));\n  }\n}\n\n// Alias that can be used for Polyline/Polygon paths. Use only if you don't intend to change the isClosed prop during lifetime.\nclass PolygonPath extends Path {\n  constructor(points, style) {\n    super(points, true, style);\n  }\n};\n\nclass PolylinePath extends Path {\n  constructor(points, style) {\n    super(points, false, style);\n  }\n};\n\nclass Circle extends Shape {\n\n  // Note: The tessSegments parameter will be removed later when the implementation uses arcs from LineShader directly.\n  constructor() {let centerX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;let centerY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;let style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultStyle.clone();let tessSegments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n    super(style);\n\n    this.polygon = new Polygon([], style);\n\n    // Force polygon.id to be the same, so that its geometry is associated with this Circle.\n    // This is a bit hacky, but can be removed as soon as we use native arcs for circle rendering.\n    this.polygon.id = this.id;\n\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.radius = radius;\n    this.tessSegments = tessSegments;\n\n    this.needsUpdate = true;\n  }\n\n  draw(ctx, overrideStyle) {\n\n    this.polygon.points.length = 0;\n\n    // angle delta in degrees\n    const stepSize = 360 / this.tessSegments;\n    for (let angle = 0; angle < 360; angle += stepSize) {\n\n      let a = angle * Math.PI / 180;\n      let x = this.radius * Math.cos(a);\n      let y = this.radius * Math.sin(a);\n\n      this.polygon.addPoint(this.centerX + x, this.centerY + y);\n    }\n\n    this.needsUpdate = false;\n\n    this.polygon.draw(ctx, overrideStyle);\n  }\n\n  setCenter(x, y) {\n    this.centerX = x;\n    this.centerY = y;\n    this.modified();\n  }\n\n  move(dx, dy) {\n    this.centerX += dx;\n    this.centerY += dy;\n    this.modified();\n    return this;\n  }\n\n  hitTest(x, y) {\n    const dx = x - this.centerX;\n    const dy = y - this.centerY;\n    return dx * dx + dy * dy < this.radius * this.radius;\n  }\n\n  clone() {\n    return new Circle().copy(this);\n  }\n\n  copy(from) {\n    super.copy(from);\n    this.polygon = from.polygon.clone();\n    this.centerX = from.centerX;\n    this.centerY = from.centerY;\n    this.radius = from.radius;\n    this.tessSegments = from.tessSegments;\n    this.modified();\n    return this;\n  }\n\n  computeBBox() {\n    this.bbox.min.set(this.centerX - this.radius, this.centerY - this.radius);\n    this.bbox.max.set(this.centerX + this.radius, this.centerY + this.radius);\n  }\n}\n\nclass ShapeWrapper extends Shape {\n\n  // @param {Shape} shape - must not be null\n  constructor(shape) {\n    super();\n    this.shape = shape;\n\n    Object.defineProperty(this, 'bbox', {\n      get: () => this.shape.bbox,\n      set: (bbox) => {this.shape.bbox = bbox;}\n    });\n\n    Object.defineProperty(this, 'id', {\n      get: () => this.shape.id,\n      set: (id) => {this.shape.id = id;}\n    });\n\n    Object.defineProperty(this, 'bboxDirty', {\n      get: () => this.shape.bboxDirty,\n      set: (dirty) => {this.shape.bboxDirty = dirty;}\n    });\n\n    Object.defineProperty(this, 'name', {\n      get: () => this.shape.name,\n      set: (name) => {this.shape.name = name;}\n    });\n  }\n\n  draw() {return this.shape.draw(...arguments);}\n  hitTest() {return this.shape.hitTest(...arguments);}\n  move() {return this.shape.move(...arguments);}\n  modified() {return this.shape.modified(...arguments);}\n  computeBBox() {return this.shape.computeBBox(...arguments);}\n  updateBBox() {return this.shape.updateBBox(...arguments);}\n\n  clone() {\n    return new ShapeWrapper(this.shape.clone());\n  }\n\n  copy(from) {\n    this.shape.copy(from.shape);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/EditShapes.js\n");

/***/ }),

/***/ "./extensions/Edit2D/EllipseArcGizmo.js":
/*!**********************************************!*\
  !*** ./extensions/Edit2D/EllipseArcGizmo.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EllipseArcGizmo: () => (/* binding */ EllipseArcGizmo),\n/* harmony export */   getEllipseArcEdgeParams: () => (/* binding */ getEllipseArcEdgeParams)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Actions.js */ \"./extensions/Edit2D/Actions.js\");\n\n\n\n\n\nconst tmpVec2 = new THREE.Vector2();\n\n// Get ellipse arc params in a way that the edge is bended inside or outside wrt.\n// to the outer loop.\n//\n// @param {Path}   path       - not changed\n// @param {number} edgeIndex  - edge for which we compute the arc params\n// @param {number} loopIndex\n// @param {number} bendRadius - Signed distance between line-segment center and arc center.\n//                                 Positive values for outside, negative for inside.\n// @param {EllipseArcParams} [target]\n// @returns {EllipseArcParams}\nconst getEllipseArcEdgeParams = (path, edgeIndex, loopIndex, bendRadius, target) => {\n\n  const params = target || new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n\n  // compute ellipse rotation, so that ellipse x-axis is parallel to the edge\n  const dir = path.getEdgeDirection(edgeIndex, loopIndex, tmpVec2);\n  const angle = Math.atan2(dir.y, dir.x);\n  params.rotation = THREE.Math.radToDeg(angle);\n\n  // Compute radius in a way that ellipse center matches with line-segment center\n  params.rx = 0.5 * path.getEdgeLength(edgeIndex, loopIndex);\n\n  // Apply bending by varying y-radius\n  params.ry = Math.abs(bendRadius);\n\n  // Always use shortest connection\n  params.largeArcFlag = false;\n\n  // Make sure that positive bendRadius bends outside, negative inside\n  params.sweepFlag = Boolean(path.isCCW(loopIndex) ^ bendRadius < 0);\n\n  return params;\n};\n\n// Gizmo class to pull ellipse arc centers. The gizmo implements the full interaction, but\n// the owner controls when startDrag(), moveDrag(), and endDrag() are called.\nclass EllipseArcGizmo extends _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__.EdgeGizmo {\n\n  constructor(layer, gizmoManager, undoStack, visible) {\n    super(layer, visible);\n\n    this.container.classList.add('ellipse-arc-gizmo');\n\n    this.dragging = false;\n\n    // arc params when drag had started\n    this.dragStartParams = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n\n    // delta between exact dragStart position and gizmo-center at dragStart\n    this.dragOffset = new THREE.Vector2();\n\n    // tmp values\n    this.tmpVec = new THREE.Vector2();\n    this.tmpVec2 = new THREE.Vector2();\n    this.tmpVec3 = new THREE.Vector2();\n    this.tmpParams = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n\n    this.gizmoManager = gizmoManager;\n    this.undoStack = undoStack;\n  }\n\n  isUnderMouse() {\n    return this.visible && this.edgeValid() && this.gizmoManager.isUnderMouse(this);\n  }\n\n  startDrag(canvasX, canvasY) {\n\n    // Stop here if there is nothing to drag\n    if (!this.edgeValid() || !this.isUnderMouse()) {\n      return false;\n    }\n\n    // Usually, dragging will be false here unless in weird focus-change scenarios\n    if (this.dragging) {\n      return true;\n    }\n\n    this.dragging = true;\n\n    // Highlight in green while dragging\n    this.setSelected(true);\n\n    // Store offset between exact mouse pos and the vertex we are dragging\n    const pos = this.layerPos;\n    const posScreen = this.layer.layerToCanvas(pos.x, pos.y);\n    this.dragOffset.set(posScreen.x - canvasX, posScreen.y - canvasY);\n\n    // Backup initial arc params\n    this.poly.getEllipseArcParams(this.edgeIndex, this.loopIndex, this.dragStartParams);\n\n    return true;\n  }\n\n  moveDrag(canvasX, canvasY) {\n\n    if (!this.dragging) {\n      return false;\n    }\n\n    // Compute layer position of the gizmo after drag\n    // Note that the vertex we are dragging does not always match exactly with the mouse position.\n    // E.g., we may have picked the bottom-left boundary of a vertex gizmo at drag-start.\n    const x = canvasX + this.dragOffset.x;\n    const y = canvasY + this.dragOffset.y;\n    const p = this.layer.canvasToLayer(x, y);\n\n    // Compute vector (a => p), where a is the edge start\n    const a = this.poly.getPoint(this.edgeIndex, this.loopIndex, this.tmpVec);\n    const diff = this.tmpVec2.copy(p).sub(a); // vector from edge start towards new gizmo position\n\n    // Compute distance of the new gizmo position from edge spanned by line segment (a,b)\n    const normal = this.poly.getOuterNormal(this.edgeIndex, this.loopIndex, this.tmpVec3);\n    const signedDistance = diff.dot(normal);\n\n    // Configure ellipse arc, so that the distance of the arc midpoint is the same\n    const params = getEllipseArcEdgeParams(this.poly, this.edgeIndex, this.loopIndex, signedDistance, this.tmpParams);\n\n    // Update polygon\n    this.poly.setEllipseArc(this.edgeIndex, params, this.loopIndex);\n    this.update();\n    this.layer.update();\n\n    return true;\n  }\n\n  endDrag(canvasX, canvasY) {\n    this.moveDrag(canvasX, canvasY);\n    this.dragging = false;\n\n    const newParams = this.poly.getEllipseArcParams(this.edgeIndex, this.loopIndex, this.tmpParams);\n\n    this.restoreArc();\n    const polyIndex = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: this.edgeIndex, loop: this.loopIndex });\n    this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_2__.Actions.ChangeEdgeType(this.layer, this.poly, polyIndex, _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse, null, null, newParams));\n\n    // stop highlighting\n    this.setSelected(false);\n  }\n\n  cancelDrag() {\n    this.restoreArc();\n    this.dragging = false;\n    this.layer.update();\n  }\n\n  // Restore state of the arc before dragging it\n  restoreArc() {\n    this.poly.setEllipseArc(this.edgeIndex, this.dragStartParams, this.loopIndex);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/EllipseArcGizmo.js\n");

/***/ }),

/***/ "./extensions/Edit2D/LoopContainment.js":
/*!**********************************************!*\
  !*** ./extensions/Edit2D/LoopContainment.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeLoopContainment: () => (/* binding */ computeLoopContainment),\n/* harmony export */   getFacesInsideLoop: () => (/* binding */ getFacesInsideLoop)\n/* harmony export */ });\n/* harmony import */ var _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SolidDefConvert.js */ \"./extensions/Edit2D/SolidDefConvert.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @adsk/solid-definition */ \"./node_modules/@adsk/solid-definition/dist/solid-definition.min.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n// Result values of classifySets\nconst SetContainment = {\n  Contains: 0, // A contains B (not vice versa)\n  IsContainedIn: 1, // B contains A (not vice versa)\n  Disjoint: 2, // No common elements\n  Overlapping: 3, // Intersecting, but not equal\n  Equal: 4 // Sets are identical\n};\n\n// @param {SketchRegionSolver} solver       - initialized with all edges of subject and cutLoop\n// @param {Edges[]}            loopEdges    - edges of the loop that we test against.\n// @returns {Face[]} subset of solver.getFaces(). All faces encludes by the loopEdges.\nconst getFacesInsideLoop = (solver, loopEdges) => {\n\n  // Get all faces that we obtained by intersecting all edges against each other\n  const regionFaces = solver.getFaces();\n\n  // Get ordered array of loop edges within solver that correspond to the cutLoop\n  const cutRegionEdges = (0,_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.getRegionEdges)(solver, loopEdges);\n\n  // Find all faces that are\n  return (0,_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.getBoundedRegionFaces)(regionFaces, cutRegionEdges);\n};\n\n// Tolerance for self-intersection tests: If intersections are very close to a shared vertex, we ignore them.\n// Note that the tolerance is not in units but a fraction of an edge.\nconst Precision = 1.e-5;\n\n// Check whether a single loop has self-intersections\n// TODO: There is one edge case that we would not detect here: If a loop passes the same vertex multiple times.\nconst hasSelfIntersections = (loopEdges) => {\n  for (let i = 0; i < loopEdges.length; i++) {\n    const edge1 = loopEdges[i];\n\n    // Check all subsequent edges.\n    for (let j = i + 1; j < loopEdges.length; j++) {\n\n      // Check intersections of both edges\n      const edge2 = loopEdges[j];\n      const cuts = (0,_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.computeCurveCurveIntersections)(edge1, edge2, false, true);\n\n      // Check if there are any intersections (except for shared vertices)\n      for (let i = 0; i < cuts.length; i++) {\n        const cut = cuts[i];\n\n        // Ignore intersections at a shared vertex\n        // Due to accuracy issues, the cut may also be just close to a vertex\n        const param1 = cut.cutInfo.param;\n        const param2 = cut.cutByInfo.param;\n\n        const range1 = edge1.getRange();\n        const range2 = edge2.getRange();\n\n        // Check if both parameters are very close to range start/end of an edge\n        const dist1 = Math.min(Math.abs(param1 - range1[0]), Math.abs(param1 - range1[1]));\n        const dist2 = Math.min(Math.abs(param2 - range2[0]), Math.abs(param2 - range2[1]));\n        const d = Math.max(dist1, dist2);\n\n        // If cut was not approximately equal to a shared vertex,\n        // consider it as a self-intersection.\n        if (d > Precision) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Given two sets of values, faces, each indexed by integer faceIds, this function checks how the sets are related.\nconst classifySets = (A, B) => {\n\n  // Track which kind of indices we found\n  let foundCommon = false; // >=0 elems are in both\n  let foundAOnly = false; // >=0 elems are only in set A\n  let foundBOnly = false; // >=0 elems are only in set B\n\n  const checkElems = (elemIndex) => {\n    const isInA = A.has(elemIndex);\n    const isInB = B.has(elemIndex);\n\n    if (isInA && isInB) foundCommon = true;else\n    if (isInA) foundAOnly = true;else\n    if (isInB) foundBOnly = true;\n  };\n\n  for (let elem of A) {\n    checkElems(elem);\n  }\n\n  for (let elem of B) {\n    checkElems(elem);\n  }\n\n  if (!foundCommon) {\n    return SetContainment.Disjoint;\n  }\n\n  if (foundAOnly && !foundBOnly) {\n    return SetContainment.Contains;\n  }\n\n  if (foundBOnly && !foundAOnly) {\n    return SetContainment.IsContainedIn;\n  }\n\n  if (!foundAOnly && !foundBOnly) {\n    return SetContainment.Equal;\n  }\n\n  return SetContainment.Overlapping;\n};\n\n// Contains loop containment for a path\nconst computeLoopContainment = (path) => {\n\n  // Convert to SolidDef Path\n  const pathSd = _SolidDefConvert_js__WEBPACK_IMPORTED_MODULE_0__.SolidDefConvert.toSolidDefPath(path);\n\n  // get path as wires\n  const wireBody = pathSd.getWireBody();\n  const wires = wireBody.getWires();\n\n  // get path as edge array\n  const edges = wireBody.getEdges();\n\n  // Init empty loop infos\n  const loopInfos = [];\n  for (let l = 0; l < wires.length; l++) {\n\n    // Get loop edges\n    const w = wires[l];\n    const loopEdges = w.getEdges();\n\n    loopInfos[l] = {\n      containedLoops: [],\n      rank: 0,\n\n      // Indicates if loop containment could not properly computed.\n      // This happens if\n      //   a) The loop has self-intersections\n      //   b) The loop is overlapping with another one\n      //   c) The loop is exactly matching with another one\n      error: hasSelfIntersections(loopEdges) // Initially, we detect only a)\n    };\n  }\n\n  // For only a single loop or less, we are done here.\n  if (wires.length < 2) {\n    return loopInfos;\n  }\n\n  // Feed them into solver to intersect them against each other and extract the resulting region faces.\n  const solver = new _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.SketchRegionSolver();\n  solver.compute(edges);\n\n  // check which of the faces are within path and cutPath\n  const faces = solver.getFaces();\n\n  // attach arrayIndex to each face\n  faces.forEach((f, index) => f.arrayIndex = index);\n\n  // for each loop l, collect a set facesPerLoop[l] that contains the array indices of all enclosed faces.\n  const facesPerLoop = [];\n  for (let l = 0; l < wires.length; l++) {\n\n    // get edges of loop i\n    const w = wires[l];\n    const loopEdges = w.getEdges();\n\n    // If a loop has self-intersections, just mark it as invalid and skip it\n    if (hasSelfIntersections(loopEdges)) {\n      loopInfos[l].error = true;\n      facesPerLoop[l] = new Set();\n      continue;\n    }\n\n    // get all faces within this loop\n    const enclosedFaceIds = new Set();\n    const faces = getFacesInsideLoop(solver, loopEdges);\n    faces.forEach((f) => {\n      enclosedFaceIds.add(f.arrayIndex);\n    });\n\n    facesPerLoop[l] = enclosedFaceIds;\n  }\n\n  // Use the faceId sets to derive which loop is contained in which other\n  for (let a = 0; a < facesPerLoop.length; a++) {\n\n    // indices of all faces enclosed by loop a\n    const A = facesPerLoop[a];\n\n    for (let b = a + 1; b < facesPerLoop.length; b++) {\n      // indices of all faces enclosed by loop i\n      const B = facesPerLoop[b];\n\n      // Check set relation between A and B\n      const cont = classifySets(A, B);\n      switch (cont) {\n        case SetContainment.Disjoint:\n          // No common faces at all. E.g., for two holes.\n          continue;\n        case SetContainment.Contains:\n          loopInfos[a].containedLoops.push(b);\n          loopInfos[b].rank++;\n          break;\n        case SetContainment.IsContainedIn:\n          loopInfos[b].containedLoops.push(b);\n          loopInfos[a].rank++;\n          break;\n        default:\n          loopInfos[a].error = true;\n          loopInfos[b].error = true;\n      }\n    }\n  }\n\n  // If the original paths contained empty loops, we may have to reindex the loopInfos,\n  // because empty loops will not produce a corresponding wire in the SolidDef representation.\n  if (wires.length !== path.loopCount) {\n    const reindexed = [];\n    const srcIndex = 0;\n    for (let l = 0; l < path.loopCount; l++) {\n      // Only non-empty loops get loopInfos\n      if (path.getVertexCount(l)) {\n        reindexed[i] = loopInfos[srcIndex++];\n      }\n    }\n    loopInfos = reindexed;\n  }\n\n  return loopInfos;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/LoopContainment.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Math2D.js":
/*!*************************************!*\
  !*** ./extensions/Edit2D/Math2D.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Math2D: () => (/* binding */ Math2D)\n/* harmony export */ });\nconst tmpVec2d = new THREE.Vector2();\nconst tmpVec2d2 = new THREE.Vector2();\n\n// Collection of simple helper functions for 2D math functions.\n\n// Return normalized edge direction vector (b-a).normalized\nconst getEdgeDirection = (a, b, target) => {\n  target = target || new THREE.Vector2();\n\n  return target.copy(b).sub(a).normalize();\n};\n\nconst getEdgeCenter = (a, b, target) => {\n  target = target || new THREE.Vector2();\n\n  return target.set(0.5 * (a.x + b.x), 0.5 * (a.y + b.y));\n};\n\n// Get edge length. (a, b) can just be {x, y} pairs, i.e., not required to be THREE.Vector2\nconst getEdgeLength = (a, b) => {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n// Rotates direction vector p 90 degrees to the left. (in-place)\nconst turnLeft = (p) => {\n  const tmp = p.x;\n  p.x = -p.y;\n  p.y = tmp;\n  return p;\n};\n\n// Projects a point p to a line. Works in-place\n//  @param {Vector2} p\n//  @param {Vector2} linePoint - point on the line\n//  @param {Vector2} lineDir   - line direction. Must be normalized\nconst projectToLine = (p, linePoint, lineDir) => {\n\n  // dp = dot(p-linePoint, lineDir)\n  const dp = (p.x - linePoint.x) * lineDir.x + (p.y - linePoint.y) * lineDir.y;\n\n  // return linePoint + lineDir * dp\n  p.set(\n    linePoint.x + dp * lineDir.x,\n    linePoint.y + dp * lineDir.y\n  );\n};\n\n// Get distance between the point p and a line given by point and direction.\n//  @param {Vector2} p\n//  @param {Vector2} linePoint - point on the line\n//  @param {Vector2} lineDir   - line direction. Must be normalized\nconst pointLineDistance = function () {\n  let pProj = new THREE.Vector2();\n  return (p, linePoint, lineDir) => {\n    projectToLine(pProj.copy(p), linePoint, lineDir);\n    return pProj.distanceTo(p);\n  };\n}();\n\n// Calculates the intersection point of both given lines\n// assumes that the lines are not parallel\n// see: http://www.paulbourke.net/geometry/pointlineplane/\nconst intersectLines = (linePoint1, lineDir1, linePoint2, lineDir2, outPoint) => {\n\n  const denom = lineDir2.y * lineDir1.x - lineDir2.x * lineDir1.y;\n  if (Math.abs(denom) < 1.0e-8) {return false;}\n\n  // diff = linePoint1 - linePoint2\n  const diffX = linePoint1.x - linePoint2.x;\n  const diffY = linePoint1.y - linePoint2.y;\n\n  const u = lineDir2.x * diffY - lineDir2.y * diffX;\n\n  if (outPoint) {\n    outPoint.x = linePoint1.x + u / denom * lineDir1.x;\n    outPoint.y = linePoint1.y + u / denom * lineDir1.y;\n  }\n  return true;\n};\n\n// Rotate a vector p around origin or a given center. Works in-place.\n//  @param {Vector2} p\n//  @param {number}  angle in radians\n//  @param [Vector2] center\nconst rotateAround = (p, angle, center) => {\n\n  let c = Math.cos(angle);\n  let s = Math.sin(angle);\n\n  if (center) {\n    p.sub(center);\n  }\n\n  let x = p.x;\n  let y = p.y;\n\n  p.x = x * c - y * s;\n  p.y = x * s + y * c;\n\n  if (center) {\n    p.add(center);\n  }\n  return p;\n};\n\n//  @param {Vector2} dir1, dir2           - No normalization required.\n//  @returns {number} result in [0, 2*Pi] - clockwise angle in radians that you have to apply to rotate dir2 into dir1.\nconst angleBetweenDirections = (dir1, dir2) => {\n\n  // get angle formed with positive x-axis.\n  // angle1/2 are in [-Pi, Pi]\n  const angle1 = Math.atan2(dir1.y, dir1.x);\n  const angle2 = Math.atan2(dir2.y, dir2.x);\n\n  // Difference is in [-2*Pi, 2*Pi]\n  let angle = angle1 - angle2;\n\n  // Map result to [0, 2*Pi] range\n  if (angle < 0) angle += 2 * Math.PI;\n\n  return angle;\n};\n\n// see isPointOnEdge\nconst isPointOnLine = (p, a, b, precision) => {\n  return isPointOnEdge(p, a, b, precision, false);\n};\n\n// Returns true if p lies close to the edge (p1, p2).\nconst isPointOnEdge = function (p, a, b, precision) {let checkInsideSegment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n  // Compute edge length\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  const length = Math.sqrt(dx * dx + dy * dy);\n\n  let e = {\n    v1: a,\n    dx: dx,\n    dy: dy,\n    length: length,\n    length2: length * length\n  };\n  return Autodesk.Extensions.CompGeom.pointOnLine(p.x, p.y, e, checkInsideSegment, precision);\n};\n\nconst pointDelta = function (a, b) {let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let delta = { x: b.x - a.x, y: b.y - a.y };\n  if (digits)\n  {\n    let exp = Math.pow(10, digits);\n    delta.x = Math.round(delta.x * exp) / exp;\n    delta.y = Math.round(delta.y * exp) / exp;\n  }\n  if (!delta.x && !delta.y) {\n    return;\n  }\n  return delta;\n};\n\nconst edgeIsDegenerated = function (a, b) {let eps2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0e-10;\n  return a.distanceToSquared(b) < eps2;\n};\n\n// Compute target point resulting from mirroring point p\n// on the given center point c.\nconst mirrorPointOnPoint = function (p, c) {let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  target = target || new THREE.Vector2();\n  target.x = c.x - (p.x - c.x);\n  target.y = c.y - (p.y - c.y);\n  return target;\n};\n\nconst fuzzyEqual = (a, b, precision) => {\n  return Math.abs(a - b) < precision;\n};\n\n// Checks if two lines are collinear.\n//  @param {Vector2} p1, dir1 - First line, given as point and normalized direction.\n//  @param {Vector2} p2, dir2 - Second line\n//  @param {number}  precision\n//  @returns {bool}\nconst collinear = (p1, dir1, p2, dir2, precision) => {\n\n  // Directions must be either equal or opposite\n  const dirEqual = fuzzyEqual(dir1.x, dir2.x, precision) && fuzzyEqual(dir1.y, dir2.y, precision);\n  const dirOpposite = fuzzyEqual(dir1.x, -dir2.x, precision) && fuzzyEqual(dir1.y, -dir2.y, precision);\n  if (!dirEqual && !dirOpposite) {\n    return false;\n  }\n\n  // Directions are equal or opposite => Lines are collinear if and only if p2 is on line (p1, dir1).\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  let dot = dx * dir1.x + dy * dir1.y;\n  return Math.abs(dot) < precision;\n};\n\n// same as p1.distanceTo(p2), but working for any {x,y} object.\nconst distance2D = (p1, p2) => {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n// Checks if a matrix changes the orientation.\n//  @param {Matrix4} matrix\nconst changesOrientation = (matrix) => {\n  return matrix.determinant() < 0;\n};\n\n// Compute a matrix that transforms fromBox into toBox.\n//\n//  @param {Box2}    fromBox\n//  @param {Box2}    toBox\n//  @param {Object}  [options]\n//  @param {bool}    [options.flipY]           - include y-axis flip\n//  @param {bool}    [options.preserveAspect]  - force uniform scaling (m * fromBox might be smaller than toBox in one axis)\n//  @param {Matrix4} [target]\nconst getFitToBoxTransform = function (fromBox, toBox) {let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};let target = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new THREE.Matrix4();\n  const fromSize = fromBox.size(tmpVec2d);\n  const toSize = toBox.size(tmpVec2d2);\n\n  // compute scale\n  let sx = toSize.x / fromSize.x;\n  let sy = toSize.y / fromSize.y;\n\n  // preserveAspect\n  if (options.preserveAspect) {\n    sx = Math.min(sx, sy);\n    sy = sx;\n  }\n\n  // anchor is the point of fromBox that will be mapped to toBox.min\n  let anchorX = fromBox.min.x;\n  let anchorY = fromBox.min.y;\n\n  // apply optional y-flip\n  if (options.flipY) {\n    sy *= -1;\n    anchorY = fromBox.max.y;\n  }\n\n  // compute translation: after scaling, anchor should move to toBox.min\n  let tx = -sx * anchorX + toBox.min.x;\n  let ty = -sy * anchorY + toBox.min.y;\n\n  // Create (scale + translate)-matrix.\n  const matrix = target.makeScale(sx, sy, 1.0);\n  matrix.elements[12] = tx;\n  matrix.elements[13] = ty;\n\n  return matrix;\n};\n\n/**\n * Returns where a point p is located along a given edge (a,b).\n * More exactly, if p' is the projection of p to the line spanned by (a,b),\n * this function returns the distance between p' and a.\n * @param {Vector2} p\n * @param {Vector2} a - edge endpoint\n * @param {Vector2} b - edge endpoint\n * @returns {number} distance along the edge, e.g 0 for p=a and edgeLength for p=b.\n */\nconst getDistanceAlongEdge = (p, a, b) => {\n\n  // get normalized edge direction vector (a->b)\n  const edgeDir = getEdgeDirection(a, b, tmpVec2d);\n\n  // return dotProduct dot(p-a, edgeDir)\n  const dp = (p.x - a.x) * edgeDir.x + (p.y - a.y) * edgeDir.y;\n  return dp;\n};\n\n/**\n * Returns true if p is located on a single miterLine segment with the given lineWidth.\n *\n * A miterLine segment is only buffered towards the edge normals, but\n * the length along the edge is not affected by the lineWidth.\n *\n * @param {Vector2} p - Point to test\n * @param {Vector2} a - First edge endpoint\n * @param {Vector2} b - Second edge endpoint\n * @param {number} lineWidth - Width of the miterLine\n * @param {number} precision - Tolerance for hit-testing\n * @returns {boolean} - Whether the point hits the line\n */\nconst pointOnMiterLineSegment = (p, a, b, lineWidth, precision) => {\n\n  const bufferRadius = 0.5 * lineWidth;\n\n  // Check if the distance of p to the on the line (a, b) is below the bufferRadius.\n  const summedRadius = bufferRadius + precision;\n  if (!isPointOnLine(p, a, b, summedRadius)) {\n    // If p is not even close to the line, we can abort early.\n    return false;\n  }\n\n  // Check where p is \"along the line\"...\n  const d = getDistanceAlongEdge(p, a, b);\n\n  // Consider tolerance beyond endpoints (note that we must exclude the lineWidth in this case)\n  const edgeLength = getEdgeLength(a, b);\n  const dMin = -precision;\n  const dMax = edgeLength + precision;\n  return d >= dMin && d < dMax;\n};\n\n/**\n * A point is considered to be on a miterLine junction if it is in the intersection\n *  of the lines spanned by (a,b) and (b,c)\n *\n *  Note: This function includes a few heuristic trade-offs for special cases. Supporting these more reliably\n *        would require more complex logic to match the rendering behavior of miter joints more exactly.\n *        We ignore the miter joints in the following cases:\n *         - Collinear: If the angle formed by both edges is close colliear within a given angle tolerance\n *         - Degenerated edges: We reject joints if one of the adjacent lines is shoter than the lineWidth.\n *\n *   @param {Vector2} p\n *   @param {Vector2} a, b, c\n *   @param {number}  lineWidth - width of the miterLine\n *   @param {number}  precision\n *   @param {number} [maxCosAlpha] For close-to-collinear edges, the joint would theoretically shoot to infinity.\n *                                 We make the simplifying assumption that miter joints are not drawn if the angle becomes too small.\n *                                 The threshold is given as cos(alpha), where alpha is the threshold angle.\n */\nconst pointOnMiterLineJunction = function (\np,\na, b, c,\nlineWidth, precision)\n\n{let maxCosAlpha = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0.985;\n\n  // get normalized edge directions for (a,b) and (b,c)\n  const dir1 = getEdgeDirection(a, b, tmpVec2d);\n  const dir2 = getEdgeDirection(b, c, tmpVec2d2);\n\n  // Block if the edges are too close to being collinear.\n  const dp = Math.abs(dir1.dot(dir2)); // = cos(alpha) where alpha is the angle formed by the two edges.\n  const tooCollinear = dp > maxCosAlpha;\n  if (tooCollinear) {\n    return false;\n  }\n\n  // Block if >1 of the edges is too short.\n  const tooShort = getEdgeLength(a, b) < lineWidth || getEdgeLength(b, c) < lineWidth;\n  if (tooShort) {\n    return false;\n  }\n\n  // get distances of p two the 2 lineSelection\n  const d1 = pointLineDistance(p, a, dir1);\n  const d2 = pointLineDistance(p, b, dir2);\n\n  const dMax = 0.5 * lineWidth + precision;\n  return d1 <= dMax && d2 < dMax;\n};\n\n\n\nconst Math2D = {\n  getEdgeDirection,\n  projectToLine,\n  pointLineDistance,\n  intersectLines,\n  rotateAround,\n  angleBetweenDirections,\n  getEdgeCenter,\n  getEdgeLength,\n  turnLeft,\n  isPointOnEdge,\n  isPointOnLine,\n  pointDelta,\n  edgeIsDegenerated,\n  mirrorPointOnPoint,\n  fuzzyEqual,\n  collinear,\n  distance2D,\n  changesOrientation,\n  getFitToBoxTransform,\n  pointOnMiterLineSegment,\n  pointOnMiterLineJunction\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Math2D.js\n");

/***/ }),

/***/ "./extensions/Edit2D/MeasureTransform.js":
/*!***********************************************!*\
  !*** ./extensions/Edit2D/MeasureTransform.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultMeasureTransform: () => (/* binding */ DefaultMeasureTransform),\n/* harmony export */   MeasureTransform: () => (/* binding */ MeasureTransform)\n/* harmony export */ });\n\n\n\n// Workaround to choose a viewport for a given 2d sheet.\n//\n// Actually, we should choose it based on 2d-position. But, F2D doesn't give us proper data to\n// do this. Also, even with proper viewport outlines, it wouldn't always unique as viewports may overlap.\n// Therefore, we have to use a workaround here to make it use for simple single-viewport sheets at least.\n//\n// @returns {number|-1} Either -1 or a valid viewportId.\nconst chooseViewportId = (model) => {\n\n  const data = model.getData();\n  const viewports = data.viewports;\n  if (!viewports) {\n    return -1;\n  }\n\n  // find viewport with maximum number of dbIds\n  let vpIndex = -1;\n  let maxDbIds = -1;\n  for (let i = 0; i < viewports.length; i++) {\n\n    // Skip viewports without transform\n    const vp = viewports[i];\n    if (!vp.transform) {\n      continue;\n    }\n\n    // Use current vp if it has most dbIds\n    const numDbIds = vp.geom_metrics.db_ids;\n    if (numDbIds > maxDbIds) {\n      vpIndex = i;\n      maxDbIds = numDbIds;\n    }\n  }\n\n  // no matching viewport found by geom info?\n  if (maxDbIds == 0 && viewports.length > 1) {\n    // viewport 0 is auto-generated by PDFLoader, so just choose the next one\n    // TODO: there can be mutiple viewports with different metrics (inch, m, cm) but also duplicate ones\n    // so we need to improve this logic to choose the appropriate one\n    vpIndex = 1;\n  }\n\n  return vpIndex;\n};\n\n// A MeasureTransform allows for doing length/area measurements in another coordinate system than the actual shape geometry.\n// The transform is applied to all points before doing calculations.\nclass MeasureTransform {\n\n  // @param {Vector2} p - Point to be transformed in-place.\n  apply(p) {}\n};\n\n\n// Sets the pageToModel transform in LMV as MeasureTransform to make measurements consistent with Measure extension.\nclass DefaultMeasureTransform extends MeasureTransform {\n\n  constructor(viewer) {\n    super();\n    this.viewer = viewer;\n  }\n\n  // Transform geometry point to the coordinate system in which measurements should be computed and displayed.\n  //\n  // @param {vector2} p\n  //\n  // Note: Currently, we do some simplifying assumptions here that may need additional\n  //       work to support scenarios with multiple viewports or multiple 2d models.\n  apply(p, vpId) {\n    // Get viewportId\n    const model = this.viewer.model;\n    if (!model) {\n      return;\n    }\n\n    vpId = vpId ?? chooseViewportId(model);\n\n    // In case there are no viewports, there still might be a pageToModelTransform,\n    // which we need to take into account. This is the case for raster PDF.\n    model.pageToModel(p, null, vpId);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9NZWFzdXJlVHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxnQkFBZ0IsR0FBR0EsQ0FBQ0MsS0FBSyxLQUFLOztFQUVoQyxNQUFNQyxJQUFJLEdBQUdELEtBQUssQ0FBQ0UsT0FBTyxDQUFDLENBQUM7RUFDNUIsTUFBTUMsU0FBUyxHQUFHRixJQUFJLENBQUNFLFNBQVM7RUFDaEMsSUFBSSxDQUFDQSxTQUFTLEVBQUU7SUFDWixPQUFPLENBQUMsQ0FBQztFQUNiOztFQUVBO0VBQ0EsSUFBSUMsT0FBTyxHQUFJLENBQUMsQ0FBQztFQUNqQixJQUFJQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBQ2pCLEtBQUssSUFBSUMsQ0FBQyxHQUFDLENBQUMsRUFBRUEsQ0FBQyxHQUFDSCxTQUFTLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7O0lBRW5DO0lBQ0EsTUFBTUUsRUFBRSxHQUFHTCxTQUFTLENBQUNHLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNFLEVBQUUsQ0FBQ0MsU0FBUyxFQUFFO01BQ2Y7SUFDSjs7SUFFQTtJQUNBLE1BQU1DLFFBQVEsR0FBR0YsRUFBRSxDQUFDRyxZQUFZLENBQUNDLE1BQU07SUFDdkMsSUFBSUYsUUFBUSxHQUFHTCxRQUFRLEVBQUU7TUFDckJELE9BQU8sR0FBSUUsQ0FBQztNQUNaRCxRQUFRLEdBQUdLLFFBQVE7SUFDdkI7RUFDSjs7RUFFQTtFQUNBLElBQUdMLFFBQVEsSUFBSSxDQUFDLElBQUlGLFNBQVMsQ0FBQ0ksTUFBTSxHQUFHLENBQUMsRUFBRTtJQUN0QztJQUNBO0lBQ0E7SUFDQUgsT0FBTyxHQUFHLENBQUM7RUFDZjs7RUFFQSxPQUFPQSxPQUFPO0FBQ2xCLENBQUM7O0FBRUQ7QUFDQTtBQUNPLE1BQU1TLGdCQUFnQixDQUFDOztFQUUxQjtFQUNBQyxLQUFLQSxDQUFDQyxDQUFDLEVBQUUsQ0FBQztBQUNkLENBQUM7OztBQUdEO0FBQ08sTUFBTUMsdUJBQXVCLFNBQVNILGdCQUFnQixDQUFDOztFQUUxREksV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFO0lBQ2hCLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07RUFDeEI7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0FKLEtBQUtBLENBQUNDLENBQUMsRUFBRUksSUFBSSxFQUFFO0lBQ1g7SUFDQSxNQUFNbkIsS0FBSyxHQUFHLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQ2xCLEtBQUs7SUFDL0IsSUFBSSxDQUFDQSxLQUFLLEVBQUU7TUFDUjtJQUNKOztJQUVBbUIsSUFBSSxHQUFHQSxJQUFJLElBQUlwQixnQkFBZ0IsQ0FBQ0MsS0FBSyxDQUFDOztJQUV0QztJQUNBO0lBQ0FBLEtBQUssQ0FBQ29CLFdBQVcsQ0FBQ0wsQ0FBQyxFQUFFLElBQUksRUFBRUksSUFBSSxDQUFDO0VBQ3BDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9FZGl0MkQvTWVhc3VyZVRyYW5zZm9ybS5qcz8yY2U4Il0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5cbi8vIFdvcmthcm91bmQgdG8gY2hvb3NlIGEgdmlld3BvcnQgZm9yIGEgZ2l2ZW4gMmQgc2hlZXQuXG4vL1xuLy8gQWN0dWFsbHksIHdlIHNob3VsZCBjaG9vc2UgaXQgYmFzZWQgb24gMmQtcG9zaXRpb24uIEJ1dCwgRjJEIGRvZXNuJ3QgZ2l2ZSB1cyBwcm9wZXIgZGF0YSB0b1xuLy8gZG8gdGhpcy4gQWxzbywgZXZlbiB3aXRoIHByb3BlciB2aWV3cG9ydCBvdXRsaW5lcywgaXQgd291bGRuJ3QgYWx3YXlzIHVuaXF1ZSBhcyB2aWV3cG9ydHMgbWF5IG92ZXJsYXAuXG4vLyBUaGVyZWZvcmUsIHdlIGhhdmUgdG8gdXNlIGEgd29ya2Fyb3VuZCBoZXJlIHRvIG1ha2UgaXQgdXNlIGZvciBzaW1wbGUgc2luZ2xlLXZpZXdwb3J0IHNoZWV0cyBhdCBsZWFzdC5cbi8vXG4vLyBAcmV0dXJucyB7bnVtYmVyfC0xfSBFaXRoZXIgLTEgb3IgYSB2YWxpZCB2aWV3cG9ydElkLlxuY29uc3QgY2hvb3NlVmlld3BvcnRJZCA9IChtb2RlbCkgPT4ge1xuXG4gICAgY29uc3QgZGF0YSA9IG1vZGVsLmdldERhdGEoKTtcbiAgICBjb25zdCB2aWV3cG9ydHMgPSBkYXRhLnZpZXdwb3J0cztcbiAgICBpZiAoIXZpZXdwb3J0cykge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLy8gZmluZCB2aWV3cG9ydCB3aXRoIG1heGltdW0gbnVtYmVyIG9mIGRiSWRzXG4gICAgbGV0IHZwSW5kZXggID0gLTE7XG4gICAgbGV0IG1heERiSWRzID0gLTE7XG4gICAgZm9yIChsZXQgaT0wOyBpPHZpZXdwb3J0cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIC8vIFNraXAgdmlld3BvcnRzIHdpdGhvdXQgdHJhbnNmb3JtXG4gICAgICAgIGNvbnN0IHZwID0gdmlld3BvcnRzW2ldO1xuICAgICAgICBpZiAoIXZwLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgY3VycmVudCB2cCBpZiBpdCBoYXMgbW9zdCBkYklkc1xuICAgICAgICBjb25zdCBudW1EYklkcyA9IHZwLmdlb21fbWV0cmljcy5kYl9pZHM7XG4gICAgICAgIGlmIChudW1EYklkcyA+IG1heERiSWRzKSB7XG4gICAgICAgICAgICB2cEluZGV4ICA9IGk7XG4gICAgICAgICAgICBtYXhEYklkcyA9IG51bURiSWRzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm8gbWF0Y2hpbmcgdmlld3BvcnQgZm91bmQgYnkgZ2VvbSBpbmZvP1xuICAgIGlmKG1heERiSWRzID09IDAgJiYgdmlld3BvcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gdmlld3BvcnQgMCBpcyBhdXRvLWdlbmVyYXRlZCBieSBQREZMb2FkZXIsIHNvIGp1c3QgY2hvb3NlIHRoZSBuZXh0IG9uZVxuICAgICAgICAvLyBUT0RPOiB0aGVyZSBjYW4gYmUgbXV0aXBsZSB2aWV3cG9ydHMgd2l0aCBkaWZmZXJlbnQgbWV0cmljcyAoaW5jaCwgbSwgY20pIGJ1dCBhbHNvIGR1cGxpY2F0ZSBvbmVzXG4gICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gaW1wcm92ZSB0aGlzIGxvZ2ljIHRvIGNob29zZSB0aGUgYXBwcm9wcmlhdGUgb25lXG4gICAgICAgIHZwSW5kZXggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB2cEluZGV4O1xufTtcblxuLy8gQSBNZWFzdXJlVHJhbnNmb3JtIGFsbG93cyBmb3IgZG9pbmcgbGVuZ3RoL2FyZWEgbWVhc3VyZW1lbnRzIGluIGFub3RoZXIgY29vcmRpbmF0ZSBzeXN0ZW0gdGhhbiB0aGUgYWN0dWFsIHNoYXBlIGdlb21ldHJ5LlxuLy8gVGhlIHRyYW5zZm9ybSBpcyBhcHBsaWVkIHRvIGFsbCBwb2ludHMgYmVmb3JlIGRvaW5nIGNhbGN1bGF0aW9ucy5cbmV4cG9ydCBjbGFzcyBNZWFzdXJlVHJhbnNmb3JtIHtcblxuICAgIC8vIEBwYXJhbSB7VmVjdG9yMn0gcCAtIFBvaW50IHRvIGJlIHRyYW5zZm9ybWVkIGluLXBsYWNlLlxuICAgIGFwcGx5KHApIHt9XG59O1xuXG5cbi8vIFNldHMgdGhlIHBhZ2VUb01vZGVsIHRyYW5zZm9ybSBpbiBMTVYgYXMgTWVhc3VyZVRyYW5zZm9ybSB0byBtYWtlIG1lYXN1cmVtZW50cyBjb25zaXN0ZW50IHdpdGggTWVhc3VyZSBleHRlbnNpb24uXG5leHBvcnQgY2xhc3MgRGVmYXVsdE1lYXN1cmVUcmFuc2Zvcm0gZXh0ZW5kcyBNZWFzdXJlVHJhbnNmb3JtIHtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnZpZXdlciA9IHZpZXdlcjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gZ2VvbWV0cnkgcG9pbnQgdG8gdGhlIGNvb3JkaW5hdGUgc3lzdGVtIGluIHdoaWNoIG1lYXN1cmVtZW50cyBzaG91bGQgYmUgY29tcHV0ZWQgYW5kIGRpc3BsYXllZC5cbiAgICAvL1xuICAgIC8vIEBwYXJhbSB7dmVjdG9yMn0gcFxuICAgIC8vXG4gICAgLy8gTm90ZTogQ3VycmVudGx5LCB3ZSBkbyBzb21lIHNpbXBsaWZ5aW5nIGFzc3VtcHRpb25zIGhlcmUgdGhhdCBtYXkgbmVlZCBhZGRpdGlvbmFsXG4gICAgLy8gICAgICAgd29yayB0byBzdXBwb3J0IHNjZW5hcmlvcyB3aXRoIG11bHRpcGxlIHZpZXdwb3J0cyBvciBtdWx0aXBsZSAyZCBtb2RlbHMuXG4gICAgYXBwbHkocCwgdnBJZCkge1xuICAgICAgICAvLyBHZXQgdmlld3BvcnRJZFxuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMudmlld2VyLm1vZGVsO1xuICAgICAgICBpZiAoIW1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2cElkID0gdnBJZCA/PyBjaG9vc2VWaWV3cG9ydElkKG1vZGVsKTtcblxuICAgICAgICAvLyBJbiBjYXNlIHRoZXJlIGFyZSBubyB2aWV3cG9ydHMsIHRoZXJlIHN0aWxsIG1pZ2h0IGJlIGEgcGFnZVRvTW9kZWxUcmFuc2Zvcm0sXG4gICAgICAgIC8vIHdoaWNoIHdlIG5lZWQgdG8gdGFrZSBpbnRvIGFjY291bnQuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIHJhc3RlciBQREYuXG4gICAgICAgIG1vZGVsLnBhZ2VUb01vZGVsKHAsIG51bGwsIHZwSWQpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJjaG9vc2VWaWV3cG9ydElkIiwibW9kZWwiLCJkYXRhIiwiZ2V0RGF0YSIsInZpZXdwb3J0cyIsInZwSW5kZXgiLCJtYXhEYklkcyIsImkiLCJsZW5ndGgiLCJ2cCIsInRyYW5zZm9ybSIsIm51bURiSWRzIiwiZ2VvbV9tZXRyaWNzIiwiZGJfaWRzIiwiTWVhc3VyZVRyYW5zZm9ybSIsImFwcGx5IiwicCIsIkRlZmF1bHRNZWFzdXJlVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJ2aWV3ZXIiLCJ2cElkIiwicGFnZVRvTW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit2D/MeasureTransform.js\n");

/***/ }),

/***/ "./extensions/Edit2D/ModifierMask.js":
/*!*******************************************!*\
  !*** ./extensions/Edit2D/ModifierMask.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ModifierMask)\n/* harmony export */ });\n// Helper to check whether certain modifiers are currently hold or not.\n// See https://developer.mozilla.org/de/docs/Web/API/KeyboardEvent/getModifierState for list of supported keys.\n// E.g.:\n//  \"Control\", \"Shift\", \"Alt\", ..\nclass ModifierMask {\n\n  constructor() {\n    // By default, don't check any modifers.\n    this.checkedModifiers = {};\n  }\n\n  // Add a modifier to be checked. E.g. addCondition(\"Control\", true).\n  addCondition(modifierName, expectedState) {\n    this.checkedModifiers[modifierName] = expectedState;\n  }\n\n  // Remove condition - accept any state of this modifier\n  removeCondition(modifierName) {\n    delete this.checkedModifiers[modifierName];\n  }\n\n  // Check if current event meets all modifier conditions\n  accepts(event) {\n    for (let key in this.checkedModifiers) {\n      const state = event.getModifierState(key);\n      const expected = this.checkedModifiers[key];\n      if (state !== expected) {\n        return false;\n      }\n    }\n    return true;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9Nb2RpZmllck1hc2suanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsTUFBTUEsWUFBWSxDQUFDOztFQUU5QkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1Y7SUFDQSxJQUFJLENBQUNDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztFQUM5Qjs7RUFFQTtFQUNBQyxZQUFZQSxDQUFDQyxZQUFZLEVBQUVDLGFBQWEsRUFBRTtJQUN0QyxJQUFJLENBQUNILGdCQUFnQixDQUFDRSxZQUFZLENBQUMsR0FBR0MsYUFBYTtFQUN2RDs7RUFFQTtFQUNBQyxlQUFlQSxDQUFDRixZQUFZLEVBQUU7SUFDMUIsT0FBTyxJQUFJLENBQUNGLGdCQUFnQixDQUFDRSxZQUFZLENBQUM7RUFDOUM7O0VBRUE7RUFDQUcsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ1gsS0FBSyxJQUFJQyxHQUFHLElBQUksSUFBSSxDQUFDUCxnQkFBZ0IsRUFBRTtNQUNuQyxNQUFNUSxLQUFLLEdBQU1GLEtBQUssQ0FBQ0csZ0JBQWdCLENBQUNGLEdBQUcsQ0FBQztNQUM1QyxNQUFNRyxRQUFRLEdBQUcsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQ08sR0FBRyxDQUFDO01BQzNDLElBQUlDLEtBQUssS0FBS0UsUUFBUSxFQUFFO1FBQ3BCLE9BQU8sS0FBSztNQUNoQjtJQUNKO0lBQ0EsT0FBTyxJQUFJO0VBQ2Y7QUFDSixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvRWRpdDJEL01vZGlmaWVyTWFzay5qcz9kZDVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEhlbHBlciB0byBjaGVjayB3aGV0aGVyIGNlcnRhaW4gbW9kaWZpZXJzIGFyZSBjdXJyZW50bHkgaG9sZCBvciBub3QuXG4vLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvZ2V0TW9kaWZpZXJTdGF0ZSBmb3IgbGlzdCBvZiBzdXBwb3J0ZWQga2V5cy5cbi8vIEUuZy46XG4vLyAgXCJDb250cm9sXCIsIFwiU2hpZnRcIiwgXCJBbHRcIiwgLi5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGlmaWVyTWFzayB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gQnkgZGVmYXVsdCwgZG9uJ3QgY2hlY2sgYW55IG1vZGlmZXJzLlxuICAgICAgICB0aGlzLmNoZWNrZWRNb2RpZmllcnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYSBtb2RpZmllciB0byBiZSBjaGVja2VkLiBFLmcuIGFkZENvbmRpdGlvbihcIkNvbnRyb2xcIiwgdHJ1ZSkuXG4gICAgYWRkQ29uZGl0aW9uKG1vZGlmaWVyTmFtZSwgZXhwZWN0ZWRTdGF0ZSkge1xuICAgICAgICB0aGlzLmNoZWNrZWRNb2RpZmllcnNbbW9kaWZpZXJOYW1lXSA9IGV4cGVjdGVkU3RhdGU7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGNvbmRpdGlvbiAtIGFjY2VwdCBhbnkgc3RhdGUgb2YgdGhpcyBtb2RpZmllclxuICAgIHJlbW92ZUNvbmRpdGlvbihtb2RpZmllck5hbWUpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2hlY2tlZE1vZGlmaWVyc1ttb2RpZmllck5hbWVdO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGN1cnJlbnQgZXZlbnQgbWVldHMgYWxsIG1vZGlmaWVyIGNvbmRpdGlvbnNcbiAgICBhY2NlcHRzKGV2ZW50KSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmNoZWNrZWRNb2RpZmllcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlICAgID0gZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXkpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSB0aGlzLmNoZWNrZWRNb2RpZmllcnNba2V5XTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJNb2RpZmllck1hc2siLCJjb25zdHJ1Y3RvciIsImNoZWNrZWRNb2RpZmllcnMiLCJhZGRDb25kaXRpb24iLCJtb2RpZmllck5hbWUiLCJleHBlY3RlZFN0YXRlIiwicmVtb3ZlQ29uZGl0aW9uIiwiYWNjZXB0cyIsImV2ZW50Iiwia2V5Iiwic3RhdGUiLCJnZXRNb2RpZmllclN0YXRlIiwiZXhwZWN0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit2D/ModifierMask.js\n");

/***/ }),

/***/ "./extensions/Edit2D/ScreenOverlay.js":
/*!********************************************!*\
  !*** ./extensions/Edit2D/ScreenOverlay.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScreenOverlay)\n/* harmony export */ });\n/* harmony import */ var _EditLayer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditLayer.js */ \"./extensions/Edit2D/EditLayer.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Arrow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Arrow.js */ \"./extensions/Edit2D/Arrow.js\");\n\n\n\n\nconst avp = Autodesk.Viewing.Private;\n\n//\n// Utility class for drawing vector overlays in canvas-pixel coords.\n//\n\n// Base class for line-based gizmos that can be used in screen overlays\nclass ScreenOverlayGizmo {\n\n  constructor() {\n    // current opacity value\n    this.opacity = 1.0;\n\n    // Fade-in/out transition params\n    this.fullOpacity = 1.0; // opacity after full fade-in\n    this.fadeTime = 0.5; // in seconds\n\n    // Used by parent ScreenOvelay for fade in/out\n    this.fadeAnim = null;\n  }\n\n  // Update layer (=screen) coords of the gizmo based latest camera\n  update(viewer) {}\n\n  // Return shape representing this gizmo. Used by ScreenOverlay to add/remove shapes from/to layer.\n  getShape() {}\n\n  // Opacity for fade-in/out\n  setOpacity(opacity) {\n    this.opacity = opacity;\n  }\n  getOpacity() {return this.opacity;}\n\n  stopFadeAnim() {\n    if (this.fadeAnim) {\n      this.fadeAnim.stop();\n      this.fadeAnim = null;\n    }\n  }\n}\n\n// A line that whose endpoints are attached to the screen-projections of 2 points in 3D.\nclass Line3DGizmo extends ScreenOverlayGizmo {\n\n  constructor(a, b) {\n    super();\n\n    // 2D shape in pixel coords\n    this.line2D = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__.Polyline().makeLine(0, 0, 0, 0);\n\n    // 3D world positions\n    this.a = a || new THREE.Vector3();\n    this.b = b || new THREE.Vector3();\n  }\n\n  update(viewer) {\n    // project points to screen\n    const p1 = viewer.impl.worldToClient(this.a);\n    const p2 = viewer.impl.worldToClient(this.b);\n\n    // update line\n    this.line2D.updatePoint(0, p1.x, p1.y);\n    this.line2D.updatePoint(1, p2.x, p2.y);\n  }\n\n  setOpacity(opacity) {\n    super.setOpacity(opacity);\n    this.line2D.style.lineAlpha = opacity;\n  }\n\n  setLine(a, b) {\n    this.a.copy(a);\n    this.b.copy(b);\n  }\n\n  getShape() {\n    return this.line2D;\n  }\n};\n\n// A line that whose endpoints are attached to the screen-projections of 2 points in 3D.\nclass Arrow3DGizmo extends ScreenOverlayGizmo {\n\n  constructor(a, b) {\n    super();\n\n    // 2D shape in pixel coords\n    this.arrow = new _Arrow_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\n    // 3D world positions\n    this.a = a || new THREE.Vector3();\n    this.b = b || new THREE.Vector3();\n  }\n\n  update(viewer) {\n    // project points to screen\n    const p1 = viewer.impl.worldToClient(this.a);\n    const p2 = viewer.impl.worldToClient(this.b);\n\n    // update line\n    this.arrow.setFrom(p1);\n    this.arrow.setTo(p2);\n  }\n\n  getOpacity() {\n    return this.arrow.style.lineAlpha;\n  }\n\n  setOpacity(opacity) {\n    this.arrow.line.style.lineAlpha = opacity;\n    this.arrow.head.style.fillAlpha = opacity;\n  }\n\n  stopFadeAnim() {\n    if (this.fadeAnim) {\n      this.fadeAnim.stop();\n      this.fadeAnim = null;\n    }\n  }\n\n  setFrom(a) {\n    this.a.copy(a);\n  }\n\n  setTo(b) {\n    this.b.copy(b);\n  }\n\n  getShape() {\n    return this.arrow;\n  }\n};\n\nclass ScreenOverlay {\n\n  // @param {Viewer3D} viewer\n  // @param {string}   overlayName - Overlay that is created/owned by this EditLayer. Note that it is also destroyed in dtor, so it should not be shared.\n  constructor(viewer) {let overlayName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Edit2D.ScreenOverlay';\n    this.viewer = viewer;\n\n    this.overlayName = overlayName;\n    this.layer = new _EditLayer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](viewer);\n\n    // create overlay scene, with orthographic Camera\n    const canvas = viewer.canvas;\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    this.camera = new THREE.OrthographicCamera(0, canvasWidth, 0, canvasHeight, -1, 1);\n\n    // Create overlay with EditLayer geometry and ortho camera\n    this.viewer.impl.createOverlayScene(overlayName, null, null, this.camera);\n    this.viewer.impl.overlayScenes[overlayName].scene.add(this.layer.scene);\n\n    // Make sure that camera is updated on screen resize\n    this.onResize = this.onResize.bind(this);\n    this.viewer.addEventListener(Autodesk.Viewing.VIEWER_RESIZE_EVENT, this.onResize);\n\n    // Update line gizmos on camera changes\n    this.onCameraChange = this.onCameraChange.bind(this);\n    this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n\n    // Gizmos whose vertices are attached to 3D world positions\n    this.gizmos = [];\n\n    // Avoid default viewer cutplanes for screenspace gizmos\n    this.layer.setCutPlanesEnabled(false);\n\n    this.layer.setOverlayCamera(this.camera);\n  }\n\n  dtor() {\n    this.gizmos.forEach((g) => g.stopFadeAnim()); // Stop so the opacity timer doesn't keep running without a layer\n\n    this.viewer.removeEventListener(Autodesk.Viewing.VIEWER_RESIZE_EVENT, this.onResize);\n    this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n    this.viewer.impl.removeOverlayScene(this.overlayName);\n\n    this.layer.dtor();\n    this.layer = null;\n\n    this.viewer = null;\n  }\n\n  onResize() {\n    // adjust ortho-camera to modified canvas\n    this.camera.right = this.viewer.canvas.clientWidth;\n    this.camera.bottom = this.viewer.canvas.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.update();\n  }\n\n  // Checks if a gizmo is currently shown in this overlay\n  gizmoVisible(gizmo) {\n    return this.gizmos.includes(gizmo);\n  }\n\n  // Add gizmo (if needed) and fade its opacity\n  fadeInGizmo(gizmo) {\n\n    // Choose start opacity\n    const startOpacity = this.gizmoVisible(gizmo) ? gizmo.getOpacity() : 0.0;\n    const endOpacity = gizmo.fullOpacity;\n\n    // Make sure gizmo is visible\n    this.setGizmoVisible(gizmo, true);\n\n    // Avoid overlapping animations\n    gizmo.stopFadeAnim();\n\n    // update gizmo opacity on timer\n    const onTimer = (t) => {\n\n      t = avp.smootherStep(t);\n\n      // blend opacity value\n      const val = avp.lerp(startOpacity, endOpacity, t);\n      gizmo.setOpacity(val);\n\n      this.layer.update();\n    };\n\n    gizmo.setOpacity(startOpacity);\n    gizmo.fadeAnim = avp.fadeValue(0, 1, gizmo.fadeTime, onTimer);\n  }\n\n  // Fade-out gizmo and sets it to invisible when done (unless interrupted by fade-In)\n  fadeOutGizmo(gizmo) {\n\n    if (!this.gizmoVisible(gizmo)) {\n      return;\n    }\n\n    // Choose start opacity\n    const startOpacity = gizmo.getOpacity();\n\n    // Avoid overlapping animations\n    gizmo.stopFadeAnim();\n\n    // update gizmo opacity on timer\n    const onTimer = (t) => {\n\n      t = avp.smootherStep(t);\n\n      // blend opacity value\n      const val = avp.lerp(startOpacity, 0.0, t);\n      gizmo.setOpacity(val);\n\n      this.layer.update();\n    };\n\n    // If animation finished without interruptions, set gizmo to invisible\n    const onEnd = () => {\n      this.setGizmoVisible(gizmo, false);\n    };\n\n    gizmo.fadeAnim = avp.fadeValue(0, 1, gizmo.fadeTime, onTimer, onEnd);\n  }\n\n  setGizmoVisible(gizmo, visible) {\n\n    // If the gizmo was fading out or faded out before, make sure that the fade-out stops\n    // and the full opacity is recovered.\n    gizmo.stopFadeAnim();\n    gizmo.setOpacity(gizmo.fullOpacity);\n\n    // Check if gizmo is currently visible\n    const index = this.gizmos.indexOf(gizmo);\n    const wasVisible = index !== -1;\n\n    if (visible == wasVisible) {\n      return;\n    }\n\n    const shape = gizmo.getShape();\n    if (visible) {\n      // add gizmo\n      this.gizmos.push(gizmo);\n      this.layer.addShape(shape);\n    } else {\n      // remove gizmo\n      this.gizmos.splice(index, 1);\n      this.layer.removeShape(shape);\n    }\n    this.update();\n  }\n\n  onCameraChange() {\n    this.update();\n  }\n\n  update() {\n    // reproject 3D gizmos\n    this.gizmos.forEach((g) => g.update(this.viewer));\n    this.layer.update();\n  }\n};\n\nScreenOverlay.Line3DGizmo = Line3DGizmo;\nScreenOverlay.Arrow3DGizmo = Arrow3DGizmo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/ScreenOverlay.js\n");

/***/ }),

/***/ "./extensions/Edit2D/SegmentTree.js":
/*!******************************************!*\
  !*** ./extensions/Edit2D/SegmentTree.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SegmentTree)\n/* harmony export */ });\n/* harmony import */ var worker_loader_inline_no_fallback_SegmentTreeWorker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! worker-loader?inline=no-fallback!./SegmentTreeWorker */ \"./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./extensions/Edit2D/SegmentTreeWorker.js\");\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/set */ \"./node_modules/lodash/set.js\");\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_set__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n//\n// SegmentTree is a spatial datastructure that helps to quickly find all segments (lines, arcs) within a given 2d bbox.\n//\n\nconst SegmentType = {\n  Line: 1,\n  CircularArc: 2,\n  EllipticalArc: 3\n};\n\n// A segment is an object that describes a single line or arc segment.\n// Properties depend on segment type (see functions below)\nconst createLineSegment = (x1, y1, x2, y2, vpId) => {return { type: SegmentType.Line, x1, y1, x2, y2, vpId };};\nconst createCircularArcSegment = (cx, cy, start, end, radius, vpId) => {return { type: SegmentType.CirularArc, cx, cy, start, end, radius, vpId };};\nconst createEllipticalArcSegment = (cx, cy, start, end, major, minor, tilt, vpId) => {return { type: SegmentType.EllipticalArc, cx, cy, start, end, major, minor, tilt, vpId };};\n\n// Triggers the corresponding callbacks (onLineSegment, onCircularArc...) from a given segment object.\n//  @param {Object} s             - Segment object whose data are sent to geomCb\n//  @param {Object} geomCallbacks - Provides handlers for different segments. Same as used by VertexBufferReader.\nconst processSegment = (s, geomCallbacks) => {\n  switch (s.type) {\n    case SegmentType.Line:geomCallbacks.onLineSegment(s.x1, s.y1, s.x2, s.y2, s.vpId);break;\n    case SegmentType.CirularArc:geomCallbacks.onCircularArc(s.cx, s.cy, s.start, s.end, s.radius, s.vpId);break;\n    case SegmentType.EllipticalArc:geomCallbacks.onEllipticalArc(s.cx, s.cy, s.tart, s.end, s.major, s.minor, s.tilt, s.vpId);break;\n  }\n};\n\n// Implements required functions to allow organizing segments in a quadtree\nclass SegmentHandler {\n\n  constructor() {\n\n    // Used BoundsCallback to get segment bboxes\n    this.boundsCb = new Autodesk.Viewing.Private.BoundsCallback(new THREE.Box2());\n\n    // Reused tmp values\n    this.queryBox = new THREE.Box2();\n    this.tmpPoint = new THREE.Vector2();\n  }\n\n  getSegmentBox(segment) {\n    this.boundsCb.bounds.makeEmpty();\n    processSegment(segment, this.boundsCb);\n    return this.boundsCb.bounds;\n  }\n\n  getQueryBox(minx, miny, maxx, maxy) {\n    // get query box\n    this.queryBox.min.set(minx, miny);\n    this.queryBox.max.set(maxx, maxy);\n    return this.queryBox;\n  }\n\n  intersectsBox(segment, minx, miny, maxx, maxy) {\n    const queryBox = this.getQueryBox(minx, miny, maxx, maxy);\n    const segmentBox = this.getSegmentBox(segment);\n    return queryBox.intersectsBox(segmentBox);\n  }\n\n  // Note that outPoint is just an {x,y} pair, not a Vector2\n  getPoint(segment, outPoint) {\n    // Just use bbox center for all segment types\n    const center = this.getSegmentBox(segment).getCenter(this.tmpPoint);\n    outPoint.x = center.x;\n    outPoint.y = center.y;\n  }\n}\n\nlet worker;\nclass SegmentTree {\n\n  // Build SegmentTree from 2D vector-data model (PDF or F2D).\n  // Note: Make sure that the model is fully loaded - otherwise, the tree will be incomplete.\n  buildFromModel(model) {\n\n    // The quadtree must know the extents in advance.\n    const box = model.getBoundingBox(true);\n\n    // Init quadtree that manages segments\n    this.tree = new Autodesk.Extensions.CompGeom.QuadTree(box.min.x, box.min.y, box.max.x, box.max.y, 0.0, new SegmentHandler());\n\n    if (!worker) {\n      worker = new worker_loader_inline_no_fallback_SegmentTreeWorker__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    }\n\n    // Add geomtry for all fragments\n    const frags = model.getFragmentList();\n    const count = frags.getCount();\n\n    this.numProcessed = 0;\n    this.totalGeoms = count;\n\n    // Notify the worker with the expected number of geometries\n    worker.postMessage({ totalGeoms: count });\n\n    for (let i = 0; i < count; i++) {\n      const geom = frags.getGeometry(i);\n      this.addGeometry(geom);\n    }\n  }\n\n  /**\n   * Adds all segments from a given 2D LineShader geometry.\n   * Precondition: Can only be called if tree has been initialized and geom is within the bbox used to initialize the tree\n   * @param {BufferGeometry} geom\n   */\n  addGeometry(geom) {var _geom$tIdColor;\n\n    // This is the required geometry data that is required by the VertexBufferReader.\n    // The real BufferGeometry instance cannot be serialized.\n    // Due to race condition on mobile platform, sometimes, geomData might include forbidden values\n    // for example functions, which cannot be passed to workers. For example: SCCOM-12577.\n    // `geom.attributes` and partially `geom.tIdColor` removed since they are not necessary for SegmentTree computations.\n    const geomData = {\n      numInstances: geom.numInstances,\n      unpackXform: geom.unpackXform\n    };\n    geomData.vb = geom.vb;\n    geomData.vbstride = geom.vbstride;\n    geomData.ib = geom.ib;\n\n    if ((_geom$tIdColor = geom.tIdColor) !== null && _geom$tIdColor !== void 0 && (_geom$tIdColor = _geom$tIdColor.image) !== null && _geom$tIdColor !== void 0 && (_geom$tIdColor = _geom$tIdColor.data) !== null && _geom$tIdColor !== void 0 && _geom$tIdColor.buffer) {\n      lodash_set__WEBPACK_IMPORTED_MODULE_1___default()(geomData, 'tIdColor.image.data.buffer', geom.tIdColor.image.data.buffer);\n    }\n\n    worker.postMessage([geomData]);\n    worker.onmessage = (e) => {\n      const batch = e.data;\n      for (let i = 0; i < batch.length; i += 9) {\n        const type = batch[i];\n        switch (type) {\n          case 1: // Line Segment\n            this.tree.addItem(createLineSegment(batch[i + 1], batch[i + 2], batch[i + 3], batch[i + 4], batch[i + 5]));\n            break;\n          case 2: // Circular Arc\n            this.tree.addItem(createCircularArcSegment(batch[i + 1], batch[i + 2], batch[i + 3], batch[i + 4], batch[i + 5], batch[i + 6]));\n            break;\n          case 3: // Elliptical Arc\n            this.tree.addItem(createEllipticalArcSegment(batch[i + 1], batch[i + 2], batch[i + 3], batch[i + 4], batch[i + 5], batch[i + 6], batch[i + 7], batch[i + 8]));\n            break;\n          case 9: // finished\n            this.numProcessed++;\n            break;\n        }\n      }\n    };\n  }\n\n  //  @param {Object} geomCallbacks - Visitor that provides callbacks to handle different segments. Same as used by VertexBufferReader.\n  enumSegments(minx, miny, maxx, maxy, geomCallbacks) {\n\n    // Find all segments in the tree and invoke corresponding call on GeometryCallback\n    this.tree.enumInBox(minx, miny, maxx, maxy, (s) => processSegment(s, geomCallbacks));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/SegmentTree.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Selection.js":
/*!****************************************!*\
  !*** ./extensions/Edit2D/Selection.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Selection)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _UndoStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UndoStack.js */ \"./extensions/Edit2D/UndoStack.js\");\n/* harmony import */ var _EditLayer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditLayer.js */ \"./extensions/Edit2D/EditLayer.js\");\n\n\n\n\nconst av = Autodesk.Viewing;\n\nclass Selection {\n\n  constructor(layer, undoStack) {\n\n    av.EventDispatcher.prototype.apply(this);\n\n    // Keys: shapeIds, Values: shapes\n    this.isSelected = {};\n\n    // For mouse-over highlighting. 0 = nothing highlighted (ShapeIds start at 1)\n    this.hoveredId = 0;\n\n    // Reused as temporary override style for shapes\n    this.tmpStyle = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style();\n\n    // Callback function that controls how to modify the style on selected shapes\n    this.modifier = (shape, style) => {\n\n      // only modify style for selected or hovered shapes\n      const isSelected = this.isSelected[shape.id];\n      const isHovered = shape.id === this.hoveredId;\n      if (!isSelected && !isHovered) {\n        return undefined;\n      }\n\n      // Create a tmp copy of the initial shape style that is modified to indicate highlighting.\n      // Note that we can reuse tmpStyle for multiple shapes, because style modifiers are applied right before drawing.\n      this.tmpStyle.copy(style);\n\n      if (isSelected) {\n        this.tmpStyle.fillAlpha = Math.min(this.tmpStyle.fillAlpha + 0.3, 1);\n        this.tmpStyle.lineWidth *= 1.5;\n      } else {\n        // hovered\n        this.tmpStyle.fillAlpha = Math.min(this.tmpStyle.fillAlpha + 0.2, 1);\n        this.tmpStyle.lineWidth *= 1.5;\n      }\n\n      return this.tmpStyle;\n    };\n\n    this.layer = layer;\n    this.onShapeRemoved = this.onShapeRemoved.bind(this);\n    this.onLayerCleared = this.onLayerCleared.bind(this);\n    this.layer.addEventListener(_EditLayer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SHAPE_REMOVED, this.onShapeRemoved);\n    this.layer.addEventListener(_EditLayer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LAYER_CLEARED, this.onLayerCleared);\n\n    this.layer.addStyleModifier(this.modifier);\n\n    // Make sure that selection doesn't keep deleted objects, e.g., if creation has undone\n    // or a RemoveShape action happened.\n    this.undoStack = undoStack;\n    this.onActionCb = (a) => this.onAction(a);\n    this.undoStack.addEventListener(_UndoStack_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].AFTER_ACTION, this.onActionCb);\n\n    this.selectionFilters = [this.defaultSelectionFilter];\n  }\n\n  dtor() {\n    this.layer.removeStyleModifier(this.modifier);\n    this.undoStack.removeEventListener(_UndoStack_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].AFTER_ACTION, this.onActionCb);\n    this.undoStack.removeEventListener(_EditLayer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SHAPE_REMOVED, this.onShapeRemoved);\n    this.undoStack.removeEventListener(_EditLayer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LAYER_CLEARED, this.onLayerCleared);\n  }\n\n  addSelectionFilter(filter) {\n    this.selectionFilters.push(filter);\n  }\n\n  removeSelectionFilter(filter) {\n    let index = this.selectionFilters.indexOf(filter);\n    if (index == -1) {\n      return false;\n    }\n    this.selectionFilters.splice(index, 1);\n    return true;\n  }\n\n  defaultSelectionFilter(shapes) {\n    return shapes.every((s) => s.selectable);\n  }\n\n  // @param {Shape[]) shapes\n  setSelection(shapes) {\n    // This works for null as well (unlike ES6 default params)\n    shapes = shapes || [];\n\n    // shapes must pass selection filters to get selected.\n    if (!this.selectionFilters.every((sf) => sf(shapes))) {\n      return;\n    }\n\n    const selected = this.getSelectedShapes();\n\n    // Check if the set of ids changed\n    let changed = false;\n    if (selected.length != shapes.length) {\n      changed = true;\n    } else {\n      // Check if any new shape was not selected before\n      for (let i = 0; i < shapes.length; i++) {\n        const shape = shapes[i];\n        if (!this.isSelected[shape.id]) {\n          changed = true;\n        }\n      }\n    }\n\n    if (!changed) {\n      return;\n    }\n\n    // Add all shapes to this.isSelected\n    this.isSelected = {};\n    for (let i = 0; i < shapes.length; i++) {\n      const shape = shapes[i];\n      this.isSelected[shape.id] = shape;\n    }\n    this.modified();\n  }\n\n  empty() {\n    return !Object.keys(this.isSelected).length;\n  }\n\n  // Set selection to a single shape. Calling with null clears the selection.\n  selectOnly(shape) {\n    this.setSelection(shape && [shape]);\n  }\n\n  shapeIsSelected(shape) {\n    return shape && Boolean(this.isSelected[shape.id]);\n  }\n\n  toggleSelection(shape) {\n    const wasSelected = Boolean(this.isSelected[shape.id]);\n    this.isSelected[shape.id] = wasSelected ? null : shape;\n\n    this.modified();\n  }\n\n  clear() {\n    this.setSelection([]);\n  }\n\n  // Passes all selected shapes to the callback\n  getSelectedShapes() {\n    return Object.values(this.isSelected).filter(Boolean);\n  }\n\n  getSelectedIds() {\n    return this.getSelectedShapes().map((s) => s.id);\n  }\n\n  modified() {\n    this.layer.update();\n    this.dispatchEvent({ type: Selection.Events.SELECTION_CHANGED });\n  }\n\n  onAction() {\n\n    if (this.empty()) {\n      return;\n    }\n\n    // Single-selection: Clear selection if selected shape has gone\n    let selected = this.getSelectedShapes();\n    if (selected.length == 1) {\n      const exists = this.layer.findShapeById(selected[0].id);\n      if (!exists) {\n        this.clear();\n      }\n      return;\n    }\n\n    // Multi-selection: Same principle, but avoiding n^2 runtime for large selections\n\n    // Create dictionary of all shapes in the layer\n    const shapeIdExists = {};\n    this.layer.shapes.forEach((s) => shapeIdExists[s.id] = true);\n\n    // Clear all shapes from selection that don't exist anymore\n    selected = selected.filter((s) => shapeIdExists[s.id]);\n    this.setSelection(selected);\n  }\n\n  onShapeRemoved(_ref) {let { shape: shape } = _ref;\n    if (this.empty()) {\n      return;\n    }\n\n    // Remove the shape from the selection if found.\n    if (this.isSelected[shape.id]) {\n      delete this.isSelected[shape.id];\n      this.modified();\n    }\n  }\n\n  onLayerCleared() {\n    if (this.empty()) {\n      return;\n    }\n\n    this.clear();\n  }\n\n  setHoveredId(id) {\n\n    if (id === this.hoveredId) {\n      return;\n    }\n\n    this.hoveredId = id;\n    this.layer.update();\n    this.dispatchEvent({ type: Selection.Events.SELECTION_HOVER_CHANGED });\n  }\n\n  // Result may be null if selection is empty\n  // @returns {Shape|null}\n  getFirstSelected() {\n    const selected = this.getSelectedShapes();\n    return selected.length ? selected[0] : null;\n  }\n}\n\nSelection.Events = {\n  SELECTION_CHANGED: 'selectionChanged',\n  SELECTION_HOVER_CHANGED: 'selectionHoverChanged'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Selection.js\n");

/***/ }),

/***/ "./extensions/Edit2D/SolidDefConvert.js":
/*!**********************************************!*\
  !*** ./extensions/Edit2D/SolidDefConvert.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SolidDefConvert: () => (/* binding */ SolidDefConvert)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @adsk/solid-definition */ \"./node_modules/@adsk/solid-definition/dist/solid-definition.min.js\");\n/* harmony import */ var _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nconst tmpVec1 = new THREE.Vector3();\nconst tmpVec2 = new THREE.Vector3();\n\n// Convert SolidDef float-array to THREE-Vector3\nconst toVec3 = function (ar) {let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Vector3();\n  return target.set(ar[0], ar[1], ar[2]);\n};\n\n// Add (directed) edge segment to an Edit2D path. If path is non-empty, it is\n// assumed that it already ends at the start point of the new edge\n//  @param {Path}                     path         - Edit2D path\n//  @param {SolidDef.Coedge|SolidDef} ce           - Directed edge from SolidDef\n//  @param {number}                   loopIndex    - index of the loop in target path where we add the edge to\n//  @param {bool}                     lastLoopEdge - For the last edge in a loop, we only copy the arc params, but don't add the end vertex.\n//                                                   This is because Edit2D shapes do not repeat the start vertex at the end.\nconst addCoedge = function (path, ce, loopIndex) {let lastLoopEdge = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  const vertexCount = path.getVertexCount(loopIndex);\n\n  // Add start vertex on first call\n  if (vertexCount == 0) {\n    const pStart = ce.getStartVertex().getPosition();\n    path.addPoint(pStart[0], pStart[1], loopIndex);\n  }\n\n  // Add end point - unless this is the last edge of a loop.\n  if (!lastLoopEdge) {\n    const pEnd = ce.getEndVertex().getPosition();\n    path.addPoint(pEnd[0], pEnd[1], loopIndex);\n  }\n\n  // This function works for Coedges as well as edges. If ce is already an edge, we just set e=ce.\n  const isCoedge = ce instanceof _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.Coedge;\n  const e = isCoedge ? ce.getEdge() : ce;\n\n  // Determine whether the curve direction is flipped. For coedges, this may happen up to twice, because\n  // cedge as well as edge have their own isReversed flag.\n  const ceReversed = isCoedge ? ce.isReversed() : false;\n  const edgeReversed = e.isReversed();\n  const isReversed = ceReversed !== edgeReversed; // logical XOR (true if exactly one of both is reversed)\n\n  const type = e.getCurveType();\n\n  // For line segments, we are done\n  if (type === _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.GEOMETRY_TYPES.LINE) {\n    return;\n  }\n\n  // convert curve parameters for new edge\n  const edgeIndex = Math.max(vertexCount - 1, 0);\n  const curve = e.getCurve();\n\n  // Bezier case\n  if (type === _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.GEOMETRY_TYPES.BCURVE) {\n\n    // Note that we cannot simply copy the control points of the SolidDef bcurve. Reasons:\n    //  1. Coedge or edge may be reversed (which may invert the order of the control points)\n    //  2. The edge may not cover the whole curve, but only a part of it.\n    //\n    // Due to 2. we have to construct a new cubic Bezier here based start/end tangent of the edge.\n\n    // get params at edge start/end\n    const t0 = ce.t0();\n    const t1 = ce.t1();\n\n    // get start/end point\n    const pStart = ce.evaluatePosition(t0);\n    const pEnd = ce.evaluatePosition(t1);\n\n    // get start/end tangent\n    const tStart = ce.evaluateDt(t0);\n    const tEnd = ce.evaluateDt(t1);\n\n    // We are searching for a cubic Bezier B with the following properties:\n    //  - Its parameter domain is [0,1], i.e. B(0)=start vertex, B(1) is end vertex\n    //  - Tangents at start/end positions are the same as for the given edge.\n\n    // Note that changing from [t0, t1] to a larger parameter domain [0,1] scales down the tangent vectors accordingly.\n    const rangeScale = Math.abs(t1 - t0);\n    tStart[0] *= rangeScale;\n    tStart[1] *= rangeScale;\n    tEnd[0] *= rangeScale;\n    tEnd[1] *= rangeScale;\n\n    // The start tangent of a cubic bezier is 3 * (cp1-cp0). So, we can obtain cp1 from the start tangent.\n    // Same principle applies to cp2.\n    const cp1x = pStart[0] + tStart[0] / 3;\n    const cp1y = pStart[1] + tStart[1] / 3;\n    const cp2x = pEnd[0] - tEnd[0] / 3;\n    const cp2y = pEnd[1] - tEnd[1] / 3;\n\n    path.setBezierArc(edgeIndex, cp1x, cp1y, cp2x, cp2y, loopIndex);\n    return;\n  }\n\n  // Ellipse arcs\n  if (type === _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.GEOMETRY_TYPES.ELLIPSE) {\n\n    const params = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n    params.rx = curve.getMajorRadius();\n    params.ry = curve.getMinorRadius();\n\n    // compute axis rotation\n    const xAxis = curve.getMajorAxis();\n    const angle = Math.atan2(xAxis[1], xAxis[0]);\n    params.rotation = THREE.Math.radToDeg(angle);\n\n    // determine largeArc flag\n    // Note that the edge may only use a subset of the curve.\n    // So, it's essential to get the range from the directed edge.\n    const range = ce.getRange();\n    const startAngle = range[0];\n    const endAngle = range[1];\n    params.largeArcFlag = endAngle - startAngle > Math.PI; // Note that endAngle is always >startAngle\n\n    // determine sweep flag: Ellipse curves in SolidDef always run ccw (sweepFlag = true).\n    // But it may be inverted if the edge direction is flipped.\n    params.sweepFlag = !isReversed;\n\n    // Note: In Edit2D, the unrotated y-axis always points up. I.e. rotation=0 means xAxis = (1,0) and yAxis = (-1,0).\n    //       In SolidDef, the axes are more flexible. As long as we don't transform the curves arbitrarily, the ellipse\n    //       axes still form a 90 degree angle. However, the ellipse coordinate system may have opposite orientation.\n    //       If this happens, we have to invert the ellipse orientation.\n    const yAxis = curve.getMinorAxis();\n    const xDir = toVec3(xAxis, tmpVec1);\n    const yDir = toVec3(yAxis, tmpVec2);\n    const needsExtraFlip = xDir.cross(yDir).z < 0;\n    if (needsExtraFlip) {\n      params.sweepFlag = !params.sweepFlag;\n    }\n\n    path.setEllipseArc(edgeIndex, params, loopIndex);\n    return;\n  }\n\n  console.error(\"Unexpected curve type\");\n};\n\n// Creates an Edit2D Path loop from a given SoliDef loop. The loop is added to the target path.\n//  @param {SolidDef.Loop} loop\n//  @param {Path}          [target]\n//  @returns {Path}\nconst loopToShape = function (loop) {let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolygonPath();\n\n  // start new loop in target path\n  const loopIndex = target.nextFreeLoop();\n\n  // traverse coedges of the loop\n  const coedges = loop.getCoedges();\n  for (let i = 0; i < coedges.length; i++) {\n    const ce = coedges[i];\n\n    // for the last loopEdge, we only copy the arc param, but don't repeat the start vertex\n    const lastLoopEdge = i == coedges.length - 1;\n\n    // add next edge to target\n    addCoedge(target, ce, loopIndex, lastLoopEdge);\n  }\n\n  return target;\n};\n\n// Convert SolidDef face into one or more Edit2D Paths.\n// Todo: If we support multiple loops per Path, result will be a single Path\n//  @param {SolidDef.Face} face\n//  @param {Path}          [target]\n//  @returns {Path}\nconst faceToShape = function (face) {let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolygonPath();\n\n  // convert loops and collect them into target path\n  face.getLoops().forEach((l) => {\n    target = loopToShape(l, target);\n  });\n  return target;\n};\n\n// Convert array of faces to array of shapes\nconst facesToShape = function (faces) {let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolygonPath();\n\n  faces.forEach((f) => {\n    target = faceToShape(f, target);\n  });\n  return target;\n};\n\n// Convert SolidDef wire to an Edit2D Path.\n//\n// Note: This function only works for wires that don't branch and have already ordered edges.\n//       This is true for wires that we get from SolidDef.Path.\n//  @param {SolidDef.Wire} wire\nconst wireToShape = (wire) => {\n\n  // create empty path\n  const path = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path();\n  path.isClosed = wire.isClosed();\n\n  // add edges\n  const edges = wire.getOrderedEdges().edges;\n  for (let i = 0; i < edges.length; i++) {\n    const edge = edges[i];\n    const lastLoopEdge = wire.isClosed() && i == edges.length - 1;\n    addCoedge(path, edge, 0, lastLoopEdge);\n  }\n  return path;\n};\n\n// Convert SolidDef path to an array of shapes\nconst pathToShape = (path) => {\n  const body = path.getWireBody();\n  const wires = body.getWires();\n\n  if (wires.length == 0) {\n    return new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path();\n  }\n\n  const result = wireToShape(wires[0]);\n\n  // convert additional loops (if any)\n  for (let i = 1; i < wires.length; i++) {\n    const wire = wires[i];\n    const tmp = wireToShape(wire);\n    result.addLoop(tmp, 0);\n  }\n\n  return result;\n};\n\n// Convert Edit2D Path to SolidDef Path2D\nconst toSolidDefPath = (path) => {\n  const path2D = new _adsk_solid_definition__WEBPACK_IMPORTED_MODULE_1__.Path2D();\n  (0,_EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.runPath)(path2D, path);\n  return path2D;\n};\n\nconst SolidDefConvert = {\n  addCoedge,\n  loopToShape,\n  faceToShape,\n  facesToShape,\n  wireToShape,\n  pathToShape,\n  toSolidDefPath\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/SolidDefConvert.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Svg.js":
/*!**********************************!*\
  !*** ./extensions/Edit2D/Svg.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Svg: () => (/* binding */ Svg)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n\n\n\nlet domParser = null;\n\n// SVG (de)serialization for EditShapes\n\n// Url of XML-Namespace for SVG\nconst SvgNs = \"http://www.w3.org/2000/svg\";\n\nconst exp4 = Math.pow(10, 4);\nconst limitDigits = function (value) {let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!value || digits === null) {\n    return value;\n  }\n  // like value.toFixed(), but removing trailing zeros\n  const exp = digits === 4 ? exp4 : Math.pow(10, digits);\n  return Math.round(value * exp) / exp;\n};\n\nconst domToCircle = (circleNode) => {\n\n  if (!circleNode.hasAttributes || !circleNode.hasAttributes()) {\n    throw 'No attributes available on the <circle/> node';\n  }\n  const circle = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Circle();\n  for (let i = circleNode.attributes.length - 1; i >= 0; i--) {\n    let attr = circleNode.attributes[i];\n    switch (attr.name) {\n      case 'cx':\n        circle.centerX = parseFloat(attr.value);\n        break;\n      case 'cy':\n        circle.centerY = parseFloat(attr.value);\n        break;\n      case 'r':\n        circle.radius = parseFloat(attr.value);\n        break;\n    }\n  }\n  return circle;\n};\n\nconst circleToSvg = function (circle) {let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;let stylePostFix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return `<circle cx=\"${limitDigits(circle.centerX, digits)}\" cy=\"${limitDigits(circle.centerY, digits)}\" r=\"${limitDigits(circle.radius, digits)}${stylePostFix}\"/>`;\n};\n\nconst domToPath = (pathNode) => {\n\n  const d = pathNode.getAttribute('d');\n  if (!d) {\n    return;\n  }\n\n  return parsePath(d);\n};\n\n// For closed paths, remove last point of each loop if it is just a repetition of the start vertex.\nconst removeDuplicateLoopEndPoints = (path) => {\n\n  // Bezier applied to the last point will create an additional point which is equal to the endpoint to close the path\n  // see Path.toSVGPath(). Path is always closed, therefore we can remove the duplicate end point.\n  if (path.isClosed) {\n    let pStart = new THREE.Vector2();\n    let pEnd = new THREE.Vector2();\n    const loopCount = path.loopCount;\n    for (let l = 0; l < loopCount; l++) {\n\n      // skip invalid loops\n      const lastIndex = path.getVertexCount(l) - 1;\n      if (lastIndex < 1) {\n        continue;\n      }\n\n      // get start/end\n      pStart = path.getPoint(0, l, pStart);\n      pEnd = path.getPoint(lastIndex, l, pEnd);\n\n      const delta = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.pointDelta(pStart, pEnd, 0);\n      if (!delta) {\n        path.removePoint(lastIndex, l);\n      }\n\n    }\n  }\n};\n\nconst parsePath = (svgPath) => {\n  // split at all chars but keep the char using positive look ahead\n  // sample payload for path d = M 13.882,4.8592 L 14.6757,4.738 L 13.9668,4.4896 L 14.005,4.4896 C 15.3211,5.4567,14.79,3.1599,14.6624,4.155 L 13.9189,3.8945 L 13.9189,3.8 L 14.6234,3.7516 Z\n  // results into list with glyph with position array:\n  // ['M 13.882,4.8592', 'L 14.6757,4.738', 'L 13.9668,4.4896', 'L 14.005,4.4896', 'C 15.3211,5.4567,14.79,3.1599,14.6624,4.155', 'L 13.9189,3.8945', 'L 13.9189,3.8', 'L 14.6234,3.7516', 'Z']\n  const pointStrings = svgPath.split(/ (?=[a-zA-Z])/gi);\n  const validChars = \"MLHVCZA\";\n\n  // Reused per cycle\n  const ellipseParams = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n  const nextPoint = new THREE.Vector2();\n\n  // the current loop that we are adding edges to\n  let loopIndex = 0;\n\n  const path = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path();\n\n  for (let i = 0; i < pointStrings.length; i++) {\n\n    // Check for unexpected characters\n    const pointString = pointStrings[i];\n    if (validChars.indexOf(pointString[0]) === -1) {\n      throw `\\\"${pointString[0]}\\\" is not a supported or invalid glyph: ${pointString}`;\n    }\n\n    const segmentIndex = path.getVertexCount(loopIndex) - 1;\n\n    // Determine edge type, position, and extra params for arcs\n    let value = pointString.substring(1);\n    switch (pointString[0]) {\n      case 'M':\n        // start new loop\n        loopIndex = path.nextFreeLoop();\n      case 'L':\n        let coords = value.split(',');\n        nextPoint.x = parseFloat(coords[0]);\n        nextPoint.y = parseFloat(coords[1]);\n        break;\n      case 'H':\n        nextPoint.x = parseFloat(value);\n        break;\n      case 'V':\n        nextPoint.y = parseFloat(value);\n        break;\n      case 'C':\n\n        // tokenize params\n        const bezierCoords = value.split(',');\n\n        // get position\n        nextPoint.x = parseFloat(bezierCoords[4]);\n        nextPoint.y = parseFloat(bezierCoords[5]);\n\n        // get bezier params\n        const cp1x = parseFloat(bezierCoords[0]);\n        const cp1y = parseFloat(bezierCoords[1]);\n        const cp2x = parseFloat(bezierCoords[2]);\n        const cp2y = parseFloat(bezierCoords[3]);\n\n        if (segmentIndex >= 0) {\n          path.setBezierArc(segmentIndex, cp1x, cp1y, cp2x, cp2y, loopIndex);\n        } else {\n          console.error('SVG Parse error: Path is not expected to start with \"C\" command');\n        }\n        break;\n\n      case 'A':\n        // tokenize params\n        const src = value.split(',');\n\n        // get position\n        nextPoint.x = parseFloat(src[5]);\n        nextPoint.y = parseFloat(src[6]);\n\n        // read ellipse params.\n        ellipseParams.rx = parseFloat(src[0]);\n        ellipseParams.ry = parseFloat(src[1]);\n        ellipseParams.rotation = parseFloat(src[2]);\n        ellipseParams.largeArcFlag = Boolean(parseFloat(src[3]));\n        ellipseParams.sweepFlag = Boolean(parseFloat(src[4]));\n\n        if (segmentIndex >= 0) {\n          path.setEllipseArc(segmentIndex, ellipseParams, loopIndex);\n        } else {\n          console.error('SVG Parse error: Path is not expected to start with \"A\" command');\n        }\n        break;\n      case 'Z':\n        // we are done\n        path.isClosed = true;\n        continue;\n    }\n\n    // add next point\n    path.addPoint(nextPoint.x, nextPoint.y, loopIndex);\n  }\n\n  removeDuplicateLoopEndPoints(path);\n\n  return path;\n};\n\nconst pathToSvgPath = function (path) {let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!path.vertexCount) {\n    return [];\n  }\n\n  // Shortcut for restricting number of digits\n  const ld = (num) => limitDigits(num, digits);\n\n  let svgPath = [];\n\n  // reused per loop cycle\n  let p = new THREE.Vector2();\n  let pPrev = new THREE.Vector2();\n  let params = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EllipseArcParams();\n  let cp1 = new THREE.Vector2();\n  let cp2 = new THREE.Vector2();\n\n  const loopCount = path.loopCount;\n  for (let l = 0; l < loopCount; l++) {\n\n    // Add M command for first vertex\n    const edgeCount = path.getEdgeCount(l);\n    if (edgeCount > 0) {\n      p = path.getPoint(0, l, p);\n      svgPath.push(`M ${ld(p.x)},${ld(p.y)}`);\n    }\n\n    for (let i = 0; i < edgeCount; i++) {\n\n      // Vertex i is the end point of segment i-1, which defines edge type and arc params\n      const segmentIndex = i;\n      const edgeType = path.isPath() ? path.getEdgeType(segmentIndex, l) : _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line;\n\n      // get next point. Note: If the path is closed, p will be the start vertex of the loop again.\n      const edgeEndVertex = path.nextIndex(segmentIndex, l);\n      p = path.getPoint(edgeEndVertex, l, p);\n\n      let value = '';\n      switch (edgeType) {\n\n        case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse:\n          params = path.getEllipseArcParams(segmentIndex, l, params);\n\n          // Convert boolean flags to 1/0\n          const largeArc = params.largeArcFlag ? 1 : 0;\n          const sweep = params.sweepFlag ? 1 : 0;\n\n          value = `A ${params.rx},${params.ry},${params.rotation},${largeArc},${sweep},${p.x},${p.y}`;\n          break;\n\n        case _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier:\n          cp1 = path.getControlPoint(segmentIndex, 1, l, cp1);\n          cp2 = path.getControlPoint(segmentIndex, 2, l, cp2);\n          value = `C ${ld(cp1.x, digits)},${ld(cp1.y, digits)},${ld(cp2.x, digits)},${ld(cp2.y, digits)},${ld(p.x, digits)},${ld(p.y, digits)}`;\n          break;\n\n        default:\n          {\n            // skip empty/duplicate points\n            pPrev = path.getPoint(i, l, pPrev);\n            let delta = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.pointDelta(pPrev, p, digits);\n            if (!delta) {\n              continue;\n            }\n\n            if (Math.abs(delta.x) <= precision) {\n              value = `V ${ld(p.y)}`;\n            } else if (Math.abs(delta.y) <= precision) {\n              value = `H ${ld(p.x)}`;\n            } else {\n              value = `L ${ld(p.x)},${ld(p.y)}`;\n            }\n          }\n      }\n\n      // For closed paths, the edge end vertex will be 0. Repeating the start vertex is only necessary if the\n      // last segment is an arc: Without repeating the start vertex at the loop end, we could not store the arc parameters in SVG.\n      const isRepeatedStartVertex = edgeEndVertex === 0;\n      if (isRepeatedStartVertex && edgeType === _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line) {\n        // Last segment of the loop is a line. We don't need to repeat the start vertex in this case.\n        continue;\n      }\n\n      svgPath.push(value);\n    }\n\n    // For a closed path, repeat the end vertex. This is necessary to preserve arc params\n    if (path.isClosed) {\n      // close loop\n      svgPath.push('Z');\n    }\n  }\n\n  return svgPath;\n};\n\n// Extract dictionary of SVG style attributes from Edit2D style\n//  @param {Style} style\n//  @returns {Object}\nconst getSvgStyleAttributes = (style) => {\n\n  const target = {};\n  target[\"stroke\"] = style.lineColor;\n  target[\"fill\"] = style.fillColor;\n  target[\"stroke-width\"] = style.lineWidth;\n\n  // omit opacities if they are 1 (default)\n  if (style.lineAlpha != 1) target[\"stroke-opacity\"] = style.lineAlpha;\n  if (style.fillAlpha != 1) target[\"fill-opacity\"] = style.fillAlpha;\n\n  return target;\n};\n\n// Converts the result of getSvgStyleAttributes to a string postfix. Since we append it\n// to other attributes, it contains a preceding space.\n// Example: ' stroke=\"rgb(0,0,0)\" fill=\"rgb(0,0,255)\" ... '\nconst getAttributePostFix = (attribs) => {\n  let str = '';\n  for (let key in attribs) {\n    str += ` ${key}=\"${attribs[key]}\"`;\n  }\n  return str;\n};\n\n// Apply all given attributes to a Dom Element\nconst applyAttributes = (domElement, attribs) => {\n  for (let key in attribs) {\n    domElement.setAttribute(key, attribs[key]);\n  }\n};\n\n// Converts a shape into a string describing an SVG path. Note that (for legacy reasons),\n// style attributes are only exported if specified in options.\n//\n// @param {Shape} shape\n// @param {Object} [options]\n// @param {number} [options.precision=0]       - accuracy for unifying duplicate points\n// @param {number} [options.digis=0]           - number of digits for number strings\n// @param {bool}   [options.exportStyle=false] - If true, we also export style attributes\n//\n// Note: We currently have to use function syntax, otherwise we cannot use 'arguments' for the legacy fallback below.\nconst toSvg = function (shape, options) {\n\n  let precision = options && options.precision || 0;\n  let digits = options && options.digits || null; // means no limitation of digits\n  let exportStyle = options && options.exportStyle || false;\n\n  // add style params if wanted\n  let stylePostfix = '';\n  if (exportStyle) {\n    const attribs = getSvgStyleAttributes(shape.style);\n    stylePostfix = getAttributePostFix(attribs);\n  }\n\n  // Legacy: Keep old code using that still passes precision/digits separately\n  // Todo: Remove this when checked with clients.\n  if (typeof options !== 'object') {\n    if (typeof arguments[1] == 'number') precision = arguments[1];\n    if (typeof arguments[2] == 'number') digits = arguments[2];\n  }\n\n  if (shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Circle) {\n    return circleToSvg(shape, digits, stylePostfix);\n  }\n\n  if (!(shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase)) {\n    console.error('SVG serialization not supported for this shape: ', shape);\n    return;\n  }\n\n  // PolyBase and Path are translated to SVG Path\n  let path = pathToSvgPath(shape, precision, digits);\n\n  return `<path d=\"${path.join(' ')}\"${stylePostfix}/>`;\n};\n\n// see toSvg for options.\nconst createSvgShape = (shape, options) => {\n  const precision = options && options.precision || 0;\n  const digits = options && options.digits || 0;\n  const exportStyle = options && options.exportStyle || true;\n\n  // Todo: support circles and other shapes if anyone needs it.\n  if (!(shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase)) {\n    console.error('SVG serialization not supported for this shape: ', shape);\n    return;\n  }\n\n  const path = document.createElementNS(SvgNs, 'path');\n  path.setAttribute('d', pathToSvgPath(shape, precision, digits));\n\n  if (exportStyle) {\n    const attribs = getSvgStyleAttributes(shape.style);\n    applyAttributes(path, attribs);\n  }\n\n  return path;\n};\n\n// @param {string}  svg - e.g. '<path d=\"M 13.882,4.8592 L 14.6757,4.738\"/>'\nconst fromSvg = (svg) => {\n  if (!svg) {\n    return;\n  }\n\n  // init on first use\n  domParser = domParser || new DOMParser();\n\n  const dom = domParser.parseFromString(svg, 'application/xml');\n\n  if (dom.childNodes.length !== 1) {\n    throw 'Function does only support svg with a single element: path, circle';\n  }\n  const node = dom.firstChild;\n  if (node.nodeName === 'circle') {\n    return domToCircle(node);\n  } else\n  if (node.nodeName === 'path') {\n    return domToPath(node);\n  }\n\n  throw `Unsupported svg node type: ${node.nodeName}`;\n};\n\n// Converts several shapes to an SVG element.\n//  @param {Object} [options]\n//  @param {Box2} [dstBox] - If specified, shapes can be rescaled to fit into a destination box for the given SVG.\n//  @param {Box2} [srcBox] - By default, srcBox is the union of all shapeBoxes. Shapes are uniformly rescaled from srcBox into dstBox.\n// see toSvg() for other options\nconst createSvgElement = function (shapes) {let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // get summed box of all shapes\n  let sumBox = new THREE.Box2();\n  shapes.forEach((shape) => sumBox.union(shape.getBBox()));\n\n  let srcBox = options.srcBox || sumBox;\n  let dstBox = options.dstBox || sumBox;\n\n  // Note that we always have to swap y-axis, because the y-axis direction is flipped when\n  // converting 2D world coords in LMV to SVG.\n  const scaleOptions = {\n    preserveAspect: true,\n    flipY: true\n  };\n  const tf = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getFitToBoxTransform(srcBox, dstBox, scaleOptions);\n\n  // get required size of svg\n  let width = dstBox.max.x - dstBox.min.x;\n  let height = dstBox.max.y - dstBox.min.y;\n\n  // create svg root element\n  const svg = document.createElementNS(SvgNs, 'svg');\n  svg.setAttribute('height', width);\n  svg.setAttribute('width', height);\n\n  // rescale & convert each shape\n  shapes.forEach((shape) => {\n    const scaledShape = shape.clone().applyMatrix4(tf);\n    const path = createSvgShape(scaledShape, options);\n    svg.appendChild(path);\n  });\n\n  return svg;\n};\n\nconst Svg = {\n  toSvg: toSvg,\n  fromSvg: fromSvg,\n  createSvgShape: createSvgShape,\n  createSvgElement: createSvgElement\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Svg.js\n");

/***/ }),

/***/ "./extensions/Edit2D/TangentGizmo.js":
/*!*******************************************!*\
  !*** ./extensions/Edit2D/TangentGizmo.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TangentGizmo)\n/* harmony export */ });\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Actions.js */ \"./extensions/Edit2D/Actions.js\");\n// A tangent gizmo is a dashed line with two vertex gizmos at the end.\n// It is used to control tangents for Bezier arcs.\n\n\n\n\n\n\nconst tangentGizmoName = (vertexIndex, loopIndex, sideIndex) => {\n  return `TangentGizmo-$loopIndex-$vertexIndex-$sideIndex`;\n};\n\n// Indicates which endpoint of the tangent is being dragged\nconst DragIndex = {\n  None: -1, // Nothing dragged\n  Start: 0, // Dragging start point\n  End: 1 // Dragging end point\n};\n\nconst tmpVec = new THREE.Vector2();\n\nclass TangentGizmo {\n\n  constructor(path, index, loopIndex, layer, gizmoLayer, gizmoManager, undoStack) {\n\n    this.path = path;\n    this.gizmoLayer = gizmoLayer;\n    this.layer = layer;\n    this.gizmoManager = gizmoManager; // Used to track which gizmo is under mouse\n    this.undoStack = undoStack;\n\n    // index of the vertex whose tangent we control\n    this.index = index;\n    this.loopIndex = loopIndex;\n\n    // dashed tangent line\n    this.line = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_1__.Polyline();\n    this.lineVisible = false;\n\n    // configure style of dashed line\n    this.line.style.isScreenSpace = true;\n    this.line.style.lineColor = 'rgb(255, 0, 255)',\n    this.line.style.lineWidth = 1.0,\n    this.line.style.lineStyle = 10;\n    this.line.style.lineAlpha = 1.0;\n\n    // VertexGizmos at both ends of the tangent line\n    this.vertexGizmo1 = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_2__.VertexGizmo(this.gizmoLayer, 0, 0, tangentGizmoName(index, loopIndex, 1));\n    this.vertexGizmo2 = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_2__.VertexGizmo(this.gizmoLayer, 0, 0, tangentGizmoName(index, loopIndex, 2));\n\n    // Hide vertex gizmos until we have proper positions\n    this.vertexGizmo1.setVisible(false);\n    this.vertexGizmo2.setVisible(false);\n\n    // Start/end vertex of tangent Gizmo\n    this.pStart = new THREE.Vector2();\n    this.pEnd = new THREE.Vector2();\n\n    // Add this to main layer. This triggers this.update() on layer updates to respond to\n    // vertex position changes.\n    this.layer.addCanvasGizmo(this);\n\n    // 0: dragging startPoint, 1: dragging endPoint, 2: nothing dragged\n    this.dragIndex = DragIndex.None;\n\n    // Last tracked dragging position for currently dragged vertex\n    this.lastDragPos = new THREE.Vector2(); // in layer coords\n\n    // When dragging vertices, we store the offset (in layer-coords) between\n    // the accurate click position and the center of the clicked vertex gizmo\n    this.dragOffset = new THREE.Vector2(0, 0); // in pixels\n\n    // An action used during a drag operation\n    this.action = null;\n\n    this.update();\n  }\n\n  dtor() {\n    this.setVisible(false);\n    this.layer.removeCanvasGizmo(this);\n  }\n\n  setVisible(visible) {\n\n    this.vertexGizmo1.setVisible(visible);\n    this.vertexGizmo2.setVisible(visible);\n\n    // Show/Hide tangent line gizmo\n    if (visible !== this.lineVisible) {\n      if (visible) {\n        this.gizmoLayer.addShape(this.line);\n      } else {\n        this.gizmoLayer.removeShape(this.line);\n      }\n    }\n    this.lineVisible = visible;\n  }\n\n  update() {\n\n    // get index of previous edge (ending at the vertex)\n    const prevEdgeIndex = this.path.edgeBeforeVertex(this.index, this.loopIndex);\n    const nextEdgeIndex = this.path.edgeAfterVertex(this.index, this.loopIndex);\n\n    // prev/next edge may not exist in case of polyline paths\n    const prevEdgeExists = prevEdgeIndex !== -1;\n    const nextEdgeExists = nextEdgeIndex !== -1;\n\n    // Check which of the adjacent edges are arcs\n    const prevIsArc = prevEdgeExists && this.path.isBezierArc(prevEdgeIndex, this.loopIndex);\n    const nextIsArc = nextEdgeExists && this.path.isBezierArc(nextEdgeIndex, this.loopIndex);\n\n    // If none of the edges is an Arc, just hide all gizmos\n    if (!prevIsArc && !nextIsArc) {\n      this.setVisible(false);\n      return;\n    }\n\n    // Compute both endpoints of tangent gizmo\n    const p = this.path.getPoint(this.index, this.loopIndex, tmpVec);\n    if (nextIsArc) {\n\n      // End point is first control point of the arc starting at p\n      this.pEnd = this.path.getControlPoint(this.index, 1, this.loopIndex, this.pEnd);\n\n      // In general, the start point would be cp2 of the previous arc.\n      // But, we enforce tangents to be identical for previous edge and next edge.\n      // Therefore, we obtain the other endpoint by mirroring the tangent of the leaving edge\n      // on point p\n      _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.mirrorPointOnPoint(this.pEnd, p, this.pStart);\n    } else {\n      // Only previous edge is an arc: We have to obtain the tangent from\n      // control point 2 of the previous edge.\n      this.pStart = this.path.getControlPoint(prevEdgeIndex, 2, this.loopIndex, this.pStart);\n\n      _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.mirrorPointOnPoint(this.pStart, p, this.pEnd);\n    }\n\n    // update vertex gizmos\n    this.vertexGizmo1.setPosition(this.pStart.x, this.pStart.y);\n    this.vertexGizmo2.setPosition(this.pEnd.x, this.pEnd.y);\n\n    // update line gizmo\n    this.line.makeLine(this.pStart.x, this.pStart.y, this.pEnd.x, this.pEnd.y);\n    this.gizmoLayer.update();\n\n    this.setVisible(true);\n  }\n\n  // Apply modified tangent endpoints after dragging on of the tangent vertices.\n  //\n  // @param {Vector2} pStart, pEnd - Tangent start/end point in layer coords.\n  updateAction(pStart, pEnd) {\n\n    // Init action for the current drag-interaction (if needed)\n    if (!this.action) {\n      this.action = new _Actions_js__WEBPACK_IMPORTED_MODULE_3__.Actions.ChangeBezierTangent(this.layer, this.path, this.index, this.loopIndex, pStart, pEnd);\n    } else {\n      // However, for this specific action, it makes no difference.\n      this.action.setTangent(pStart, pEnd);\n    }\n\n    // In general, we need to undo() an action before calling redo() again. But, for this specific action,\n    // it does not make a difference, because we are overwriting the same control points.\n    this.action.redo();\n\n    // update gizmos\n    this.update();\n  }\n\n  // @param {Vector2} newPos - new position in layer coords\n  onStartVertexMoved(startPos) {\n    // get new tangent end point by mirroring on vertex position\n    const center = this.path.getPoint(this.index, this.loopIndex);\n    const endPos = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.mirrorPointOnPoint(startPos, center);\n\n    this.updateAction(startPos, endPos);\n  }\n\n  // @param {Vector2} startPos - new position in layer coords\n  onEndVertexMoved(endPos) {\n    // get new tangent start point by mirroring on vertex position\n    const center = this.path.getPoint(this.index, this.loopIndex);\n    const startPos = _Math2D_js__WEBPACK_IMPORTED_MODULE_0__.Math2D.mirrorPointOnPoint(endPos, center);\n\n    this.updateAction(startPos, endPos);\n  }\n\n  // @param {DragIndex} dragIndex\n  startDrag(canvasX, canvasY, dragIndex) {\n\n    this.dragIndex = dragIndex;\n\n    // Store offset between exact mouse pos and the vertex we are dragging\n    const vpos = dragIndex === DragIndex.Start ? this.pStart : this.pEnd;\n    const vposScreen = this.layer.layerToCanvas(vpos.x, vpos.y);\n    this.dragOffset.set(vposScreen.x - canvasX, vposScreen.y - canvasY);\n\n    this.lastDragPos.copy(vpos);\n  }\n\n  // process last position and finish dragging\n  endDrag(canvasX, canvasY) {\n    this.moveDrag(canvasX, canvasY);\n\n    // Mark action as finished. It is important to do this before running the action,\n    // because PolygonEditTool cancels unfinished dragging operations on external actions.\n    this.dragIndex = DragIndex.None;\n\n    // apply the action\n    if (this.action) {\n      this.undoStack.run(this.action);\n      this.action = null;\n    }\n  }\n\n  cancelDrag() {\n    if (!this.isDragging()) {\n      return;\n    }\n\n    this.dragIndex = DragIndex.None;\n    this.action && this.action.undo();\n    this.action = null;\n  }\n\n  moveDrag(canvasX, canvasY) {\n\n    // Compute canvas position of the gizmo after drag\n    // Note that the vertex we are dragging does not always match exactly with the mouse position.\n    // E.g., we may have picked the bottom-left boundary of a vertex gizmo at drag-start.\n    const x = canvasX + this.dragOffset.x;\n    const y = canvasY + this.dragOffset.y;\n    const p = this.layer.canvasToLayer(x, y);\n\n    // Move tangent vertex by dx/dy\n    if (this.dragIndex === DragIndex.Start) {\n      this.onStartVertexMoved(p);\n    } else if (this.dragIndex === DragIndex.End) {\n      this.onEndVertexMoved(p);\n    }\n\n    this.layer.update();\n  }\n\n  // @returns {bool} true if dragging started\n  onButtonDown(canvasX, canvasY) {\n\n    const startDragged = this.gizmoManager.isUnderMouse(this.vertexGizmo1);\n    const endDragged = this.gizmoManager.isUnderMouse(this.vertexGizmo2);\n\n    if (!startDragged && !endDragged) {\n      return false;\n    }\n\n    const dragIndex = startDragged ? DragIndex.Start : DragIndex.End;\n    this.startDrag(canvasX, canvasY, dragIndex);\n\n    return true;\n  }\n\n  isDragging() {\n    return this.dragIndex !== DragIndex.None;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/TangentGizmo.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Trackings.js":
/*!****************************************!*\
  !*** ./extensions/Edit2D/Trackings.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Trackings: () => (/* binding */ Trackings)\n/* harmony export */ });\nconst Drag = 'drag';\nconst Click = 'click';\nconst ButtonDown = 'buttonDown';\nconst ButtonUp = 'buttonUp';\n\nconst Trackings = {\n  ButtonDown,\n  ButtonUp,\n  Click,\n  Drag\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9UcmFja2luZ3MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLElBQUksR0FBRyxNQUFNO0FBQ25CLE1BQU1DLEtBQUssR0FBRyxPQUFPO0FBQ3JCLE1BQU1DLFVBQVUsR0FBRyxZQUFZO0FBQy9CLE1BQU1DLFFBQVEsR0FBRyxVQUFVOztBQUVwQixNQUFNQyxTQUFTLEdBQUc7RUFDckJGLFVBQVU7RUFDVkMsUUFBUTtFQUNSRixLQUFLO0VBQ0xEO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQyRC9UcmFja2luZ3MuanM/Zjg5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEcmFnID0gJ2RyYWcnO1xuY29uc3QgQ2xpY2sgPSAnY2xpY2snO1xuY29uc3QgQnV0dG9uRG93biA9ICdidXR0b25Eb3duJztcbmNvbnN0IEJ1dHRvblVwID0gJ2J1dHRvblVwJztcblxuZXhwb3J0IGNvbnN0IFRyYWNraW5ncyA9IHtcbiAgICBCdXR0b25Eb3duLFxuICAgIEJ1dHRvblVwLFxuICAgIENsaWNrLFxuICAgIERyYWcsXG59O1xuXG4iXSwibmFtZXMiOlsiRHJhZyIsIkNsaWNrIiwiQnV0dG9uRG93biIsIkJ1dHRvblVwIiwiVHJhY2tpbmdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Trackings.js\n");

/***/ }),

/***/ "./extensions/Edit2D/UndoStack.js":
/*!****************************************!*\
  !*** ./extensions/Edit2D/UndoStack.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UndoStack)\n/* harmony export */ });\n\nconst av = Autodesk.Viewing;\n\nclass UndoStack {\n\n  constructor() {\n\n    av.EventDispatcher.prototype.apply(this);\n\n    // Array of action objects\n    this.stack = [];\n\n    // By default, this simply points to the end of this.stack. Only if undo has been called,\n    // it points to the next operation to be run on a redo() call\n    this.current = 0;\n  }\n\n  // Executes an action and pushes it to the undo stack\n  run(action) {\n    // If we did a couple of undos before, a new operation will clear all redo steps\n    this.stack.length = this.current;\n\n    this.dispatchEvent({ type: UndoStack.BEFORE_ACTION, action: action });\n\n    action.redo();\n\n    this.dispatchEvent({ type: UndoStack.AFTER_ACTION, action: action });\n\n    this.stack.push(action);\n    this.current = this.stack.length;\n  }\n\n  undo() {\n    if (!this.current) {\n      // We reached the beginning of the stack\n      return false;\n    }\n    this.current--;\n\n    const action = this.stack[this.current];\n\n    this.dispatchEvent({ type: UndoStack.BEFORE_ACTION, action: action, isUndo: true });\n\n    action.undo();\n\n    this.dispatchEvent({ type: UndoStack.AFTER_ACTION, action: action, isUndo: true });\n\n    action.layer.update();\n\n    return true;\n  }\n\n  redo() {\n    const action = this.stack[this.current];\n    if (!action) {\n      // Nothing to redo\n      return false;\n    }\n\n    this.dispatchEvent({ type: UndoStack.BEFORE_ACTION, action: action, isUndo: false });\n\n    action.redo();\n\n    this.dispatchEvent({ type: UndoStack.AFTER_ACTION, action: action, isUndo: false });\n\n    this.current++;\n\n    action.layer.update();\n\n    return true;\n  }\n\n  clear() {\n    this.stack.length = 0;\n    this.current = 0;\n  }\n}\n\n// Events sent before/after any action is executed by UndoStack\nUndoStack.BEFORE_ACTION = 'beforeAction';\nUndoStack.AFTER_ACTION = 'afterAction';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9VbmRvU3RhY2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxNQUFNQSxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBTzs7QUFFWixNQUFNQyxTQUFTLENBQUM7O0VBRTNCQyxXQUFXQSxDQUFBLEVBQUc7O0lBRVZKLEVBQUUsQ0FBQ0ssZUFBZSxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUM7O0lBRXhDO0lBQ0EsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTs7SUFFZjtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQztFQUNwQjs7RUFFQTtFQUNBQyxHQUFHQSxDQUFDQyxNQUFNLEVBQUU7SUFDUjtJQUNBLElBQUksQ0FBQ0gsS0FBSyxDQUFDSSxNQUFNLEdBQUcsSUFBSSxDQUFDSCxPQUFPOztJQUVoQyxJQUFJLENBQUNJLGFBQWEsQ0FBQyxFQUFFQyxJQUFJLEVBQUVYLFNBQVMsQ0FBQ1ksYUFBYSxFQUFFSixNQUFNLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUM7O0lBRXJFQSxNQUFNLENBQUNLLElBQUksQ0FBQyxDQUFDOztJQUViLElBQUksQ0FBQ0gsYUFBYSxDQUFDLEVBQUVDLElBQUksRUFBRVgsU0FBUyxDQUFDYyxZQUFZLEVBQUVOLE1BQU0sRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQzs7SUFFcEUsSUFBSSxDQUFDSCxLQUFLLENBQUNVLElBQUksQ0FBQ1AsTUFBTSxDQUFDO0lBQ3ZCLElBQUksQ0FBQ0YsT0FBTyxHQUFHLElBQUksQ0FBQ0QsS0FBSyxDQUFDSSxNQUFNO0VBQ3BDOztFQUVBTyxJQUFJQSxDQUFBLEVBQUc7SUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDVixPQUFPLEVBQUU7TUFDZjtNQUNBLE9BQU8sS0FBSztJQUNoQjtJQUNBLElBQUksQ0FBQ0EsT0FBTyxFQUFFOztJQUVkLE1BQU1FLE1BQU0sR0FBRyxJQUFJLENBQUNILEtBQUssQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQzs7SUFFdkMsSUFBSSxDQUFDSSxhQUFhLENBQUMsRUFBRUMsSUFBSSxFQUFFWCxTQUFTLENBQUNZLGFBQWEsRUFBRUosTUFBTSxFQUFFQSxNQUFNLEVBQUVTLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDOztJQUVuRlQsTUFBTSxDQUFDUSxJQUFJLENBQUMsQ0FBQzs7SUFFYixJQUFJLENBQUNOLGFBQWEsQ0FBQyxFQUFFQyxJQUFJLEVBQUVYLFNBQVMsQ0FBQ2MsWUFBWSxFQUFFTixNQUFNLEVBQUVBLE1BQU0sRUFBRVMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7O0lBRWxGVCxNQUFNLENBQUNVLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUM7O0lBRXJCLE9BQU8sSUFBSTtFQUNmOztFQUVBTixJQUFJQSxDQUFBLEVBQUc7SUFDSCxNQUFNTCxNQUFNLEdBQUcsSUFBSSxDQUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDQyxPQUFPLENBQUM7SUFDdkMsSUFBSSxDQUFDRSxNQUFNLEVBQUU7TUFDVDtNQUNBLE9BQU8sS0FBSztJQUNoQjs7SUFFQSxJQUFJLENBQUNFLGFBQWEsQ0FBQyxFQUFFQyxJQUFJLEVBQUVYLFNBQVMsQ0FBQ1ksYUFBYSxFQUFFSixNQUFNLEVBQUVBLE1BQU0sRUFBRVMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7O0lBRXBGVCxNQUFNLENBQUNLLElBQUksQ0FBQyxDQUFDOztJQUViLElBQUksQ0FBQ0gsYUFBYSxDQUFDLEVBQUVDLElBQUksRUFBRVgsU0FBUyxDQUFDYyxZQUFZLEVBQUdOLE1BQU0sRUFBRUEsTUFBTSxFQUFFUyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQzs7SUFFcEYsSUFBSSxDQUFDWCxPQUFPLEVBQUU7O0lBRWRFLE1BQU0sQ0FBQ1UsS0FBSyxDQUFDQyxNQUFNLENBQUMsQ0FBQzs7SUFFckIsT0FBTyxJQUFJO0VBQ2Y7O0VBRUFDLEtBQUtBLENBQUEsRUFBRztJQUNKLElBQUksQ0FBQ2YsS0FBSyxDQUFDSSxNQUFNLEdBQUcsQ0FBQztJQUNyQixJQUFJLENBQUNILE9BQU8sR0FBRyxDQUFDO0VBQ3BCO0FBQ0o7O0FBRUE7QUFDQU4sU0FBUyxDQUFDWSxhQUFhLEdBQUcsY0FBYztBQUN4Q1osU0FBUyxDQUFDYyxZQUFZLEdBQUksYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQyRC9VbmRvU3RhY2suanM/NmFjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGF2ID0gQXV0b2Rlc2suVmlld2luZztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5kb1N0YWNrIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgIGF2LkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkodGhpcyk7XG5cbiAgICAgICAgLy8gQXJyYXkgb2YgYWN0aW9uIG9iamVjdHNcbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoaXMgc2ltcGx5IHBvaW50cyB0byB0aGUgZW5kIG9mIHRoaXMuc3RhY2suIE9ubHkgaWYgdW5kbyBoYXMgYmVlbiBjYWxsZWQsXG4gICAgICAgIC8vIGl0IHBvaW50cyB0byB0aGUgbmV4dCBvcGVyYXRpb24gdG8gYmUgcnVuIG9uIGEgcmVkbygpIGNhbGxcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gMDtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlcyBhbiBhY3Rpb24gYW5kIHB1c2hlcyBpdCB0byB0aGUgdW5kbyBzdGFja1xuICAgIHJ1bihhY3Rpb24pIHtcbiAgICAgICAgLy8gSWYgd2UgZGlkIGEgY291cGxlIG9mIHVuZG9zIGJlZm9yZSwgYSBuZXcgb3BlcmF0aW9uIHdpbGwgY2xlYXIgYWxsIHJlZG8gc3RlcHNcbiAgICAgICAgdGhpcy5zdGFjay5sZW5ndGggPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogVW5kb1N0YWNrLkJFRk9SRV9BQ1RJT04sIGFjdGlvbjogYWN0aW9uIH0pO1xuXG4gICAgICAgIGFjdGlvbi5yZWRvKCk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogVW5kb1N0YWNrLkFGVEVSX0FDVElPTiwgYWN0aW9uOiBhY3Rpb24gfSk7XG5cbiAgICAgICAgdGhpcy5zdGFjay5wdXNoKGFjdGlvbik7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIH1cblxuICAgIHVuZG8oKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBXZSByZWFjaGVkIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0YWNrXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50LS07XG5cbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5zdGFja1t0aGlzLmN1cnJlbnRdO1xuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7IHR5cGU6IFVuZG9TdGFjay5CRUZPUkVfQUNUSU9OLCBhY3Rpb246IGFjdGlvbiwgaXNVbmRvOiB0cnVlIH0pO1xuXG4gICAgICAgIGFjdGlvbi51bmRvKCk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogVW5kb1N0YWNrLkFGVEVSX0FDVElPTiwgYWN0aW9uOiBhY3Rpb24sIGlzVW5kbzogdHJ1ZSB9KTtcblxuICAgICAgICBhY3Rpb24ubGF5ZXIudXBkYXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmVkbygpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5zdGFja1t0aGlzLmN1cnJlbnRdO1xuICAgICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICAgICAgLy8gTm90aGluZyB0byByZWRvXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBVbmRvU3RhY2suQkVGT1JFX0FDVElPTiwgYWN0aW9uOiBhY3Rpb24sIGlzVW5kbzogZmFsc2UgfSk7XG5cbiAgICAgICAgYWN0aW9uLnJlZG8oKTtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBVbmRvU3RhY2suQUZURVJfQUNUSU9OLCAgYWN0aW9uOiBhY3Rpb24sIGlzVW5kbzogZmFsc2UgfSk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50Kys7XG5cbiAgICAgICAgYWN0aW9uLmxheWVyLnVwZGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7XG4gICAgfVxufVxuXG4vLyBFdmVudHMgc2VudCBiZWZvcmUvYWZ0ZXIgYW55IGFjdGlvbiBpcyBleGVjdXRlZCBieSBVbmRvU3RhY2tcblVuZG9TdGFjay5CRUZPUkVfQUNUSU9OID0gJ2JlZm9yZUFjdGlvbic7XG5VbmRvU3RhY2suQUZURVJfQUNUSU9OICA9ICdhZnRlckFjdGlvbic7XG4iXSwibmFtZXMiOlsiYXYiLCJBdXRvZGVzayIsIlZpZXdpbmciLCJVbmRvU3RhY2siLCJjb25zdHJ1Y3RvciIsIkV2ZW50RGlzcGF0Y2hlciIsInByb3RvdHlwZSIsImFwcGx5Iiwic3RhY2siLCJjdXJyZW50IiwicnVuIiwiYWN0aW9uIiwibGVuZ3RoIiwiZGlzcGF0Y2hFdmVudCIsInR5cGUiLCJCRUZPUkVfQUNUSU9OIiwicmVkbyIsIkFGVEVSX0FDVElPTiIsInB1c2giLCJ1bmRvIiwiaXNVbmRvIiwibGF5ZXIiLCJ1cGRhdGUiLCJjbGVhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/Edit2D/UndoStack.js\n");

/***/ }),

/***/ "./extensions/Edit2D/UnitHandler.js":
/*!******************************************!*\
  !*** ./extensions/Edit2D/UnitHandler.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultUnitHandler: () => (/* binding */ DefaultUnitHandler),\n/* harmony export */   SimpleUnitHandler: () => (/* binding */ SimpleUnitHandler),\n/* harmony export */   UnitHandler: () => (/* binding */ UnitHandler)\n/* harmony export */ });\n/* harmony import */ var _MeasureTransform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MeasureTransform.js */ \"./extensions/Edit2D/MeasureTransform.js\");\n\n\nconst avp = Autodesk.Viewing.Private;\n\n// Interface to control display of length/area units.\nclass UnitHandler {\n\n  constructor() {\n    // Optional: Returns a transform that is applied to all points for length/area calculations.\n    //  @returns {MeasureTransform}\n    this.measureTransform = null;\n  }\n\n  // @param   {number} val - length in layer coords\n  // @returns {string} String to display, including units.\n  lengthToString(val) {\n    console.error('Not implemented');\n  }\n\n  // @param   {number} val - area in layer coords\n  // @returns {string} String to display - including units.\n  areaToString(val) {\n    console.error('Not implemented');\n  }\n};\n\n// If nothing is specified, we display with 2 digits and assume all unit in inches.\nconst DefaultPrecision = 2;\nconst DefaultUnits = \"inch\";\n\n// Format length / area strings based on:\n//  - layerUnits:  We assume the layer to be specified in these units.\n//  - displayUnit: Values are converted from layerUnits to displayUnits for display\n//  - precision:   Number of digits shown\n//  - scaleFactor: Optional scale factor applied to all values\nclass SimpleUnitHandler extends UnitHandler {\n\n  constructor(viewer) {\n    super();\n\n    this.viewer = viewer;\n\n    this.config = {\n      // {string} We assume layers to be in these units (in GNU units format)\n      layerUnits: DefaultUnits,\n\n      // {string} Units in which we display lengths/areas (in GNU units format)\n      displayUnits: DefaultUnits,\n\n      // {number} Number of digits that we display\n      precision: DefaultPrecision,\n\n      // {number} Optional scale factor applied to all values\n      scaleFactor: 1.0,\n\n      // {string} Optional area suffix to alter display unit\n      areaSuffix: '^2',\n\n      // {boolean} Optional flag for mixed unit measurements such as m-and-cm to fallback to the larger unit\n      noMixedArea: false,\n\n      // {boolean} Optional flag for inches and feet, use 'in' and 'ft' over ' and \" respectively.\n      preferLetters: false\n    };\n  }\n\n  lengthToString(val) {\n    const cfg = this.config;\n\n    // Convert length units\n    val = avp.convertUnits(cfg.layerUnits, cfg.displayUnits, cfg.scaleFactor, val);\n\n    // Format length value with unit string\n    return avp.formatValueWithUnits(val, cfg.displayUnits, 3, cfg.precision, { preferLetters: cfg.preferLetters });\n  }\n\n  areaToString(val) {\n    const cfg = this.config;\n\n    // Convert area units\n    val = avp.convertUnits(cfg.layerUnits, cfg.displayUnits, cfg.scaleFactor, val, 'square');\n\n    // Format area value with unit string\n    const units = cfg.displayUnits ? `${cfg.displayUnits}${cfg.areaSuffix}` : null;\n    return avp.formatValueWithUnits(val, units, 3, cfg.precision, { noMixedArea: cfg.noMixedArea, preferLetters: cfg.preferLetters });\n  }\n}\n\n// The DefaultUnitHandler synchronizes the unit configuration based on current viewer model\n// and current settings from MeasureToolExtension:\n//  - If MeasureExtension is loaded, it displays in the same way as Measure tools\n//  - If MeasureExtension is not loaded, it just uses units of the current model without unit conversion.\n//  - If there is not even a model, it falls back to a fixed default configuration (see SimpleUnitHandler)\nclass DefaultUnitHandler extends SimpleUnitHandler {\n\n  constructor(viewer) {\n    super(viewer);\n\n    this.measureTransform = new _MeasureTransform_js__WEBPACK_IMPORTED_MODULE_0__.DefaultMeasureTransform(viewer);\n  }\n\n  updateConfig() {\n    const cfg = this.config;\n\n    // Assume values to be in model units or default units\n    const model = this.viewer.model;\n    cfg.layerUnits = model ? model.getUnitString() : DefaultUnits;\n\n    // Set other configuration values\n    const ext = this.viewer.getExtension('Autodesk.Measure');\n    const msrCfg = ext && ext.sharedMeasureConfig;\n    if (msrCfg) {\n      // get from measure extension\n      cfg.displayUnits = msrCfg.units;\n      cfg.precision = msrCfg.precision;\n      cfg.scaleFactor = msrCfg.calibrationFactor || 1.0;\n    } else {\n      // No Measure extension available => use defaults\n      cfg.displayUnits = this.config.layerUnits;\n      cfg.precision = DefaultPrecision;\n      cfg.scaleFactor = 1.0;\n    }\n  }\n\n  lengthToString(val) {\n    this.updateConfig();\n    return super.lengthToString(val);\n  }\n\n  areaToString(val) {\n    this.updateConfig();\n    return super.areaToString(val);\n  }\n\n  getPrecision() {\n    this.updateConfig();\n    return this.config.precision;\n  }\n\n  // Convert from current display units to the given units, considering the scale factor backwards.\n  fromDisplayUnits(toUnits, value) {\n    this.updateConfig();\n    return avp.convertUnits(this.config.displayUnits, toUnits, 1.0 / this.config.scaleFactor, value);\n  }\n\n  // Same for Vec3 value\n  fromDisplayUnitsVec3(toUnits, vec) {let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector3();\n    this.updateConfig();\n    target.x = this.fromDisplayUnits(toUnits, vec.x);\n    target.y = this.fromDisplayUnits(toUnits, vec.y);\n    target.z = this.fromDisplayUnits(toUnits, vec.z);\n    return target;\n  }\n\n  // Convert from current given fromUnits to display units, considering the current scale factor.\n  toDisplayUnits(fromUnits, value) {\n    this.updateConfig();\n    return avp.convertUnits(fromUnits, this.config.displayUnits, this.config.scaleFactor, value);\n  }\n\n  // Same for Vec3 value\n  toDisplayUnitsVec3(fromUnits, vec) {let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Vector3();\n    this.updateConfig();\n    target.x = this.toDisplayUnits(fromUnits, vec.x);\n    target.y = this.toDisplayUnits(fromUnits, vec.y);\n    target.z = this.toDisplayUnits(fromUnits, vec.z);\n    return target;\n  }\n\n  // @returns {string} name of the display unit, e.g. \"ft\" or \"m\".\n  getDisplayUnit() {\n    this.updateConfig();\n    return this.config.displayUnits;\n  }\n\n  // @returns {string} Similar to getDisplayUnit(), but simplifies combined units like \"decimal-feet\" or \"ft-and-fractional-in\" stuff to just \"ft\".\n  getMainDisplayUnit() {\n    const unit = this.getDisplayUnit();\n    return Autodesk.Viewing.Private.getMainUnit(unit);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9Vbml0SGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFOztBQUVoRSxNQUFNQyxHQUFHLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPOztBQUVwQztBQUNPLE1BQU1DLFdBQVcsQ0FBQzs7RUFFckJDLFdBQVdBLENBQUEsRUFBRztJQUNWO0lBQ0E7SUFDQSxJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUk7RUFDaEM7O0VBRUE7RUFDQTtFQUNBQyxjQUFjQSxDQUFDQyxHQUFHLEVBQUU7SUFDaEJDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0VBQ3BDOztFQUVBO0VBQ0E7RUFDQUMsWUFBWUEsQ0FBQ0gsR0FBRyxFQUFFO0lBQ2RDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0VBQ3BDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBLE1BQU1FLGdCQUFnQixHQUFHLENBQUM7QUFDMUIsTUFBTUMsWUFBWSxHQUFPLE1BQU07O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxpQkFBaUIsU0FBU1YsV0FBVyxDQUFDOztFQUUvQ0MsV0FBV0EsQ0FBQ1UsTUFBTSxFQUFFO0lBQ2hCLEtBQUssQ0FBQyxDQUFDOztJQUVQLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNOztJQUVwQixJQUFJLENBQUNDLE1BQU0sR0FBRztNQUNWO01BQ0FDLFVBQVUsRUFBSUosWUFBWTs7TUFFMUI7TUFDQUssWUFBWSxFQUFFTCxZQUFZOztNQUUxQjtNQUNBTSxTQUFTLEVBQUtQLGdCQUFnQjs7TUFFOUI7TUFDQVEsV0FBVyxFQUFHLEdBQUc7O01BRWpCO01BQ0FDLFVBQVUsRUFBSSxJQUFJOztNQUVsQjtNQUNBQyxXQUFXLEVBQUcsS0FBSzs7TUFFbkI7TUFDQUMsYUFBYSxFQUFFO0lBQ25CLENBQUM7RUFDTDs7RUFFQWhCLGNBQWNBLENBQUNDLEdBQUcsRUFBRTtJQUNoQixNQUFNZ0IsR0FBRyxHQUFHLElBQUksQ0FBQ1IsTUFBTTs7SUFFdkI7SUFDQVIsR0FBRyxHQUFHUixHQUFHLENBQUN5QixZQUFZLENBQUNELEdBQUcsQ0FBQ1AsVUFBVSxFQUFFTyxHQUFHLENBQUNOLFlBQVksRUFBRU0sR0FBRyxDQUFDSixXQUFXLEVBQUVaLEdBQUcsQ0FBQzs7SUFFOUU7SUFDQSxPQUFPUixHQUFHLENBQUMwQixvQkFBb0IsQ0FBQ2xCLEdBQUcsRUFBRWdCLEdBQUcsQ0FBQ04sWUFBWSxFQUFFLENBQUMsRUFBRU0sR0FBRyxDQUFDTCxTQUFTLEVBQUUsRUFBRUksYUFBYSxFQUFFQyxHQUFHLENBQUNELGFBQWEsQ0FBQyxDQUFDLENBQUM7RUFDbEg7O0VBRUFaLFlBQVlBLENBQUNILEdBQUcsRUFBRTtJQUNkLE1BQU1nQixHQUFHLEdBQUcsSUFBSSxDQUFDUixNQUFNOztJQUV2QjtJQUNBUixHQUFHLEdBQUdSLEdBQUcsQ0FBQ3lCLFlBQVksQ0FBQ0QsR0FBRyxDQUFDUCxVQUFVLEVBQUVPLEdBQUcsQ0FBQ04sWUFBWSxFQUFFTSxHQUFHLENBQUNKLFdBQVcsRUFBRVosR0FBRyxFQUFFLFFBQVEsQ0FBQzs7SUFFeEY7SUFDQSxNQUFNbUIsS0FBSyxHQUFHSCxHQUFHLENBQUNOLFlBQVksR0FBSSxHQUFFTSxHQUFHLENBQUNOLFlBQWEsR0FBRU0sR0FBRyxDQUFDSCxVQUFXLEVBQUMsR0FBRyxJQUFJO0lBQzlFLE9BQU9yQixHQUFHLENBQUMwQixvQkFBb0IsQ0FBQ2xCLEdBQUcsRUFBRW1CLEtBQUssRUFBRSxDQUFDLEVBQUVILEdBQUcsQ0FBQ0wsU0FBUyxFQUFFLEVBQUVHLFdBQVcsRUFBRUUsR0FBRyxDQUFDRixXQUFXLEVBQUVDLGFBQWEsRUFBRUMsR0FBRyxDQUFDRCxhQUFhLENBQUMsQ0FBQyxDQUFDO0VBQ3JJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1LLGtCQUFrQixTQUFTZCxpQkFBaUI7O0VBRXJEVCxXQUFXQSxDQUFDVSxNQUFNLEVBQUU7SUFDaEIsS0FBSyxDQUFDQSxNQUFNLENBQUM7O0lBRWIsSUFBSSxDQUFDVCxnQkFBZ0IsR0FBRyxJQUFJUCx5RUFBdUIsQ0FBQ2dCLE1BQU0sQ0FBQztFQUMvRDs7RUFFQWMsWUFBWUEsQ0FBQSxFQUFHO0lBQ1gsTUFBTUwsR0FBRyxHQUFHLElBQUksQ0FBQ1IsTUFBTTs7SUFFdkI7SUFDQSxNQUFNYyxLQUFLLEdBQUcsSUFBSSxDQUFDZixNQUFNLENBQUNlLEtBQUs7SUFDL0JOLEdBQUcsQ0FBQ1AsVUFBVSxHQUFHYSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsYUFBYSxDQUFDLENBQUMsR0FBR2xCLFlBQVk7O0lBRTdEO0lBQ0EsTUFBTW1CLEdBQUcsR0FBRyxJQUFJLENBQUNqQixNQUFNLENBQUNrQixZQUFZLENBQUMsa0JBQWtCLENBQUM7SUFDeEQsTUFBTUMsTUFBTSxHQUFHRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csbUJBQW1CO0lBQzdDLElBQUlELE1BQU0sRUFBRTtNQUNSO01BQ0FWLEdBQUcsQ0FBQ04sWUFBWSxHQUFHZ0IsTUFBTSxDQUFDUCxLQUFLO01BQy9CSCxHQUFHLENBQUNMLFNBQVMsR0FBTWUsTUFBTSxDQUFDZixTQUFTO01BQ25DSyxHQUFHLENBQUNKLFdBQVcsR0FBSWMsTUFBTSxDQUFDRSxpQkFBaUIsSUFBSyxHQUFHO0lBQ3ZELENBQUMsTUFBTTtNQUNIO01BQ0FaLEdBQUcsQ0FBQ04sWUFBWSxHQUFHLElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxVQUFVO01BQ3pDTyxHQUFHLENBQUNMLFNBQVMsR0FBTVAsZ0JBQWdCO01BQ25DWSxHQUFHLENBQUNKLFdBQVcsR0FBSSxHQUFHO0lBQzFCO0VBQ0o7O0VBRUFiLGNBQWNBLENBQUNDLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNxQixZQUFZLENBQUMsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQ3RCLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDO0VBQ3BDOztFQUVBRyxZQUFZQSxDQUFDSCxHQUFHLEVBQUU7SUFDZCxJQUFJLENBQUNxQixZQUFZLENBQUMsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQ2xCLFlBQVksQ0FBQ0gsR0FBRyxDQUFDO0VBQ2xDOztFQUVBNkIsWUFBWUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxDQUFDUixZQUFZLENBQUMsQ0FBQztJQUNuQixPQUFPLElBQUksQ0FBQ2IsTUFBTSxDQUFDRyxTQUFTO0VBQ2hDOztFQUVBO0VBQ0FtQixnQkFBZ0JBLENBQUNDLE9BQU8sRUFBRUMsS0FBSyxFQUFFO0lBQzdCLElBQUksQ0FBQ1gsWUFBWSxDQUFDLENBQUM7SUFDbkIsT0FBTzdCLEdBQUcsQ0FBQ3lCLFlBQVksQ0FBQyxJQUFJLENBQUNULE1BQU0sQ0FBQ0UsWUFBWSxFQUFFcUIsT0FBTyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUN2QixNQUFNLENBQUNJLFdBQVcsRUFBRW9CLEtBQUssQ0FBQztFQUNwRzs7RUFFQTtFQUNBQyxvQkFBb0JBLENBQUNGLE9BQU8sRUFBRUcsR0FBRyxFQUFnQyxLQUE5QkMsTUFBTSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxJQUFJRyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQzNELElBQUksQ0FBQ25CLFlBQVksQ0FBQyxDQUFDO0lBQ25CYyxNQUFNLENBQUNNLENBQUMsR0FBRyxJQUFJLENBQUNYLGdCQUFnQixDQUFDQyxPQUFPLEVBQUVHLEdBQUcsQ0FBQ08sQ0FBQyxDQUFDO0lBQ2hETixNQUFNLENBQUNPLENBQUMsR0FBRyxJQUFJLENBQUNaLGdCQUFnQixDQUFDQyxPQUFPLEVBQUVHLEdBQUcsQ0FBQ1EsQ0FBQyxDQUFDO0lBQ2hEUCxNQUFNLENBQUNRLENBQUMsR0FBRyxJQUFJLENBQUNiLGdCQUFnQixDQUFDQyxPQUFPLEVBQUVHLEdBQUcsQ0FBQ1MsQ0FBQyxDQUFDO0lBQ2hELE9BQU9SLE1BQU07RUFDakI7O0VBRUE7RUFDQVMsY0FBY0EsQ0FBQ0MsU0FBUyxFQUFFYixLQUFLLEVBQUU7SUFDN0IsSUFBSSxDQUFDWCxZQUFZLENBQUMsQ0FBQztJQUNuQixPQUFPN0IsR0FBRyxDQUFDeUIsWUFBWSxDQUFDNEIsU0FBUyxFQUFFLElBQUksQ0FBQ3JDLE1BQU0sQ0FBQ0UsWUFBWSxFQUFFLElBQUksQ0FBQ0YsTUFBTSxDQUFDSSxXQUFXLEVBQUVvQixLQUFLLENBQUM7RUFDaEc7O0VBRUE7RUFDQWMsa0JBQWtCQSxDQUFDRCxTQUFTLEVBQUVYLEdBQUcsRUFBZ0MsS0FBOUJDLE1BQU0sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsSUFBSUcsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxJQUFJLENBQUNuQixZQUFZLENBQUMsQ0FBQztJQUNuQmMsTUFBTSxDQUFDTSxDQUFDLEdBQUcsSUFBSSxDQUFDRyxjQUFjLENBQUNDLFNBQVMsRUFBRVgsR0FBRyxDQUFDTyxDQUFDLENBQUM7SUFDaEROLE1BQU0sQ0FBQ08sQ0FBQyxHQUFHLElBQUksQ0FBQ0UsY0FBYyxDQUFDQyxTQUFTLEVBQUVYLEdBQUcsQ0FBQ1EsQ0FBQyxDQUFDO0lBQ2hEUCxNQUFNLENBQUNRLENBQUMsR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0MsU0FBUyxFQUFFWCxHQUFHLENBQUNTLENBQUMsQ0FBQztJQUNoRCxPQUFPUixNQUFNO0VBQ2pCOztFQUVBO0VBQ0FZLGNBQWNBLENBQUEsRUFBRztJQUNiLElBQUksQ0FBQzFCLFlBQVksQ0FBQyxDQUFDO0lBQ25CLE9BQU8sSUFBSSxDQUFDYixNQUFNLENBQUNFLFlBQVk7RUFDbkM7O0VBRUE7RUFDQXNDLGtCQUFrQkEsQ0FBQSxFQUFHO0lBQ2pCLE1BQU1DLElBQUksR0FBRyxJQUFJLENBQUNGLGNBQWMsQ0FBQyxDQUFDO0lBQ2xDLE9BQU90RCxRQUFRLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDdUQsV0FBVyxDQUFDRCxJQUFJLENBQUM7RUFDckQ7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQyRC9Vbml0SGFuZGxlci5qcz84NjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlZmF1bHRNZWFzdXJlVHJhbnNmb3JtIH0gZnJvbSAnLi9NZWFzdXJlVHJhbnNmb3JtLmpzJztcblxuY29uc3QgYXZwID0gQXV0b2Rlc2suVmlld2luZy5Qcml2YXRlO1xuXG4vLyBJbnRlcmZhY2UgdG8gY29udHJvbCBkaXNwbGF5IG9mIGxlbmd0aC9hcmVhIHVuaXRzLlxuZXhwb3J0IGNsYXNzIFVuaXRIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBPcHRpb25hbDogUmV0dXJucyBhIHRyYW5zZm9ybSB0aGF0IGlzIGFwcGxpZWQgdG8gYWxsIHBvaW50cyBmb3IgbGVuZ3RoL2FyZWEgY2FsY3VsYXRpb25zLlxuICAgICAgICAvLyAgQHJldHVybnMge01lYXN1cmVUcmFuc2Zvcm19XG4gICAgICAgIHRoaXMubWVhc3VyZVRyYW5zZm9ybSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQHBhcmFtICAge251bWJlcn0gdmFsIC0gbGVuZ3RoIGluIGxheWVyIGNvb3Jkc1xuICAgIC8vIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyB0byBkaXNwbGF5LCBpbmNsdWRpbmcgdW5pdHMuXG4gICAgbGVuZ3RoVG9TdHJpbmcodmFsKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIC8vIEBwYXJhbSAgIHtudW1iZXJ9IHZhbCAtIGFyZWEgaW4gbGF5ZXIgY29vcmRzXG4gICAgLy8gQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHRvIGRpc3BsYXkgLSBpbmNsdWRpbmcgdW5pdHMuXG4gICAgYXJlYVRvU3RyaW5nKHZhbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG59O1xuXG4vLyBJZiBub3RoaW5nIGlzIHNwZWNpZmllZCwgd2UgZGlzcGxheSB3aXRoIDIgZGlnaXRzIGFuZCBhc3N1bWUgYWxsIHVuaXQgaW4gaW5jaGVzLlxuY29uc3QgRGVmYXVsdFByZWNpc2lvbiA9IDI7XG5jb25zdCBEZWZhdWx0VW5pdHMgICAgID0gXCJpbmNoXCI7XG5cbi8vIEZvcm1hdCBsZW5ndGggLyBhcmVhIHN0cmluZ3MgYmFzZWQgb246XG4vLyAgLSBsYXllclVuaXRzOiAgV2UgYXNzdW1lIHRoZSBsYXllciB0byBiZSBzcGVjaWZpZWQgaW4gdGhlc2UgdW5pdHMuXG4vLyAgLSBkaXNwbGF5VW5pdDogVmFsdWVzIGFyZSBjb252ZXJ0ZWQgZnJvbSBsYXllclVuaXRzIHRvIGRpc3BsYXlVbml0cyBmb3IgZGlzcGxheVxuLy8gIC0gcHJlY2lzaW9uOiAgIE51bWJlciBvZiBkaWdpdHMgc2hvd25cbi8vICAtIHNjYWxlRmFjdG9yOiBPcHRpb25hbCBzY2FsZSBmYWN0b3IgYXBwbGllZCB0byBhbGwgdmFsdWVzXG5leHBvcnQgY2xhc3MgU2ltcGxlVW5pdEhhbmRsZXIgZXh0ZW5kcyBVbml0SGFuZGxlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3ZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnZpZXdlciA9IHZpZXdlcjtcblxuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIC8vIHtzdHJpbmd9IFdlIGFzc3VtZSBsYXllcnMgdG8gYmUgaW4gdGhlc2UgdW5pdHMgKGluIEdOVSB1bml0cyBmb3JtYXQpXG4gICAgICAgICAgICBsYXllclVuaXRzOiAgIERlZmF1bHRVbml0cyxcblxuICAgICAgICAgICAgLy8ge3N0cmluZ30gVW5pdHMgaW4gd2hpY2ggd2UgZGlzcGxheSBsZW5ndGhzL2FyZWFzIChpbiBHTlUgdW5pdHMgZm9ybWF0KVxuICAgICAgICAgICAgZGlzcGxheVVuaXRzOiBEZWZhdWx0VW5pdHMsXG5cbiAgICAgICAgICAgIC8vIHtudW1iZXJ9IE51bWJlciBvZiBkaWdpdHMgdGhhdCB3ZSBkaXNwbGF5XG4gICAgICAgICAgICBwcmVjaXNpb246ICAgIERlZmF1bHRQcmVjaXNpb24sXG5cbiAgICAgICAgICAgIC8vIHtudW1iZXJ9IE9wdGlvbmFsIHNjYWxlIGZhY3RvciBhcHBsaWVkIHRvIGFsbCB2YWx1ZXNcbiAgICAgICAgICAgIHNjYWxlRmFjdG9yOiAgMS4wLFxuXG4gICAgICAgICAgICAvLyB7c3RyaW5nfSBPcHRpb25hbCBhcmVhIHN1ZmZpeCB0byBhbHRlciBkaXNwbGF5IHVuaXRcbiAgICAgICAgICAgIGFyZWFTdWZmaXg6ICAgJ14yJyxcblxuICAgICAgICAgICAgLy8ge2Jvb2xlYW59IE9wdGlvbmFsIGZsYWcgZm9yIG1peGVkIHVuaXQgbWVhc3VyZW1lbnRzIHN1Y2ggYXMgbS1hbmQtY20gdG8gZmFsbGJhY2sgdG8gdGhlIGxhcmdlciB1bml0XG4gICAgICAgICAgICBub01peGVkQXJlYTogIGZhbHNlLFxuXG4gICAgICAgICAgICAvLyB7Ym9vbGVhbn0gT3B0aW9uYWwgZmxhZyBmb3IgaW5jaGVzIGFuZCBmZWV0LCB1c2UgJ2luJyBhbmQgJ2Z0JyBvdmVyICcgYW5kIFwiIHJlc3BlY3RpdmVseS5cbiAgICAgICAgICAgIHByZWZlckxldHRlcnM6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGxlbmd0aFRvU3RyaW5nKHZhbCkge1xuICAgICAgICBjb25zdCBjZmcgPSB0aGlzLmNvbmZpZztcblxuICAgICAgICAvLyBDb252ZXJ0IGxlbmd0aCB1bml0c1xuICAgICAgICB2YWwgPSBhdnAuY29udmVydFVuaXRzKGNmZy5sYXllclVuaXRzLCBjZmcuZGlzcGxheVVuaXRzLCBjZmcuc2NhbGVGYWN0b3IsIHZhbCk7XG5cbiAgICAgICAgLy8gRm9ybWF0IGxlbmd0aCB2YWx1ZSB3aXRoIHVuaXQgc3RyaW5nXG4gICAgICAgIHJldHVybiBhdnAuZm9ybWF0VmFsdWVXaXRoVW5pdHModmFsLCBjZmcuZGlzcGxheVVuaXRzLCAzLCBjZmcucHJlY2lzaW9uLCB7IHByZWZlckxldHRlcnM6IGNmZy5wcmVmZXJMZXR0ZXJzIH0pO1xuICAgIH1cblxuICAgIGFyZWFUb1N0cmluZyh2YWwpIHtcbiAgICAgICAgY29uc3QgY2ZnID0gdGhpcy5jb25maWc7XG5cbiAgICAgICAgLy8gQ29udmVydCBhcmVhIHVuaXRzXG4gICAgICAgIHZhbCA9IGF2cC5jb252ZXJ0VW5pdHMoY2ZnLmxheWVyVW5pdHMsIGNmZy5kaXNwbGF5VW5pdHMsIGNmZy5zY2FsZUZhY3RvciwgdmFsLCAnc3F1YXJlJyk7XG5cbiAgICAgICAgLy8gRm9ybWF0IGFyZWEgdmFsdWUgd2l0aCB1bml0IHN0cmluZ1xuICAgICAgICBjb25zdCB1bml0cyA9IGNmZy5kaXNwbGF5VW5pdHMgPyBgJHtjZmcuZGlzcGxheVVuaXRzfSR7Y2ZnLmFyZWFTdWZmaXh9YCA6IG51bGw7XG4gICAgICAgIHJldHVybiBhdnAuZm9ybWF0VmFsdWVXaXRoVW5pdHModmFsLCB1bml0cywgMywgY2ZnLnByZWNpc2lvbiwgeyBub01peGVkQXJlYTogY2ZnLm5vTWl4ZWRBcmVhLCBwcmVmZXJMZXR0ZXJzOiBjZmcucHJlZmVyTGV0dGVycyB9KTtcbiAgICB9XG59XG5cbi8vIFRoZSBEZWZhdWx0VW5pdEhhbmRsZXIgc3luY2hyb25pemVzIHRoZSB1bml0IGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gY3VycmVudCB2aWV3ZXIgbW9kZWxcbi8vIGFuZCBjdXJyZW50IHNldHRpbmdzIGZyb20gTWVhc3VyZVRvb2xFeHRlbnNpb246XG4vLyAgLSBJZiBNZWFzdXJlRXh0ZW5zaW9uIGlzIGxvYWRlZCwgaXQgZGlzcGxheXMgaW4gdGhlIHNhbWUgd2F5IGFzIE1lYXN1cmUgdG9vbHNcbi8vICAtIElmIE1lYXN1cmVFeHRlbnNpb24gaXMgbm90IGxvYWRlZCwgaXQganVzdCB1c2VzIHVuaXRzIG9mIHRoZSBjdXJyZW50IG1vZGVsIHdpdGhvdXQgdW5pdCBjb252ZXJzaW9uLlxuLy8gIC0gSWYgdGhlcmUgaXMgbm90IGV2ZW4gYSBtb2RlbCwgaXQgZmFsbHMgYmFjayB0byBhIGZpeGVkIGRlZmF1bHQgY29uZmlndXJhdGlvbiAoc2VlIFNpbXBsZVVuaXRIYW5kbGVyKVxuZXhwb3J0IGNsYXNzIERlZmF1bHRVbml0SGFuZGxlciBleHRlbmRzIFNpbXBsZVVuaXRIYW5kbGVye1xuXG4gICAgY29uc3RydWN0b3Iodmlld2VyKSB7XG4gICAgICAgIHN1cGVyKHZpZXdlcik7XG5cbiAgICAgICAgdGhpcy5tZWFzdXJlVHJhbnNmb3JtID0gbmV3IERlZmF1bHRNZWFzdXJlVHJhbnNmb3JtKHZpZXdlcik7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29uZmlnKCkge1xuICAgICAgICBjb25zdCBjZmcgPSB0aGlzLmNvbmZpZztcblxuICAgICAgICAvLyBBc3N1bWUgdmFsdWVzIHRvIGJlIGluIG1vZGVsIHVuaXRzIG9yIGRlZmF1bHQgdW5pdHNcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLnZpZXdlci5tb2RlbDtcbiAgICAgICAgY2ZnLmxheWVyVW5pdHMgPSBtb2RlbCA/IG1vZGVsLmdldFVuaXRTdHJpbmcoKSA6IERlZmF1bHRVbml0cztcblxuICAgICAgICAvLyBTZXQgb3RoZXIgY29uZmlndXJhdGlvbiB2YWx1ZXNcbiAgICAgICAgY29uc3QgZXh0ID0gdGhpcy52aWV3ZXIuZ2V0RXh0ZW5zaW9uKCdBdXRvZGVzay5NZWFzdXJlJyk7XG4gICAgICAgIGNvbnN0IG1zckNmZyA9IGV4dCAmJiBleHQuc2hhcmVkTWVhc3VyZUNvbmZpZztcbiAgICAgICAgaWYgKG1zckNmZykge1xuICAgICAgICAgICAgLy8gZ2V0IGZyb20gbWVhc3VyZSBleHRlbnNpb25cbiAgICAgICAgICAgIGNmZy5kaXNwbGF5VW5pdHMgPSBtc3JDZmcudW5pdHM7XG4gICAgICAgICAgICBjZmcucHJlY2lzaW9uICAgID0gbXNyQ2ZnLnByZWNpc2lvbjtcbiAgICAgICAgICAgIGNmZy5zY2FsZUZhY3RvciAgPSBtc3JDZmcuY2FsaWJyYXRpb25GYWN0b3IgIHx8IDEuMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vIE1lYXN1cmUgZXh0ZW5zaW9uIGF2YWlsYWJsZSA9PiB1c2UgZGVmYXVsdHNcbiAgICAgICAgICAgIGNmZy5kaXNwbGF5VW5pdHMgPSB0aGlzLmNvbmZpZy5sYXllclVuaXRzO1xuICAgICAgICAgICAgY2ZnLnByZWNpc2lvbiAgICA9IERlZmF1bHRQcmVjaXNpb247XG4gICAgICAgICAgICBjZmcuc2NhbGVGYWN0b3IgID0gMS4wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGVuZ3RoVG9TdHJpbmcodmFsKSB7XG4gICAgICAgIHRoaXMudXBkYXRlQ29uZmlnKCk7XG4gICAgICAgIHJldHVybiBzdXBlci5sZW5ndGhUb1N0cmluZyh2YWwpO1xuICAgIH1cblxuICAgIGFyZWFUb1N0cmluZyh2YWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb25maWcoKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmFyZWFUb1N0cmluZyh2YWwpO1xuICAgIH1cblxuICAgIGdldFByZWNpc2lvbigpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb25maWcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnByZWNpc2lvbjtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGZyb20gY3VycmVudCBkaXNwbGF5IHVuaXRzIHRvIHRoZSBnaXZlbiB1bml0cywgY29uc2lkZXJpbmcgdGhlIHNjYWxlIGZhY3RvciBiYWNrd2FyZHMuXG4gICAgZnJvbURpc3BsYXlVbml0cyh0b1VuaXRzLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbmZpZygpO1xuICAgICAgICByZXR1cm4gYXZwLmNvbnZlcnRVbml0cyh0aGlzLmNvbmZpZy5kaXNwbGF5VW5pdHMsIHRvVW5pdHMsIDEuMCAvIHRoaXMuY29uZmlnLnNjYWxlRmFjdG9yLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gU2FtZSBmb3IgVmVjMyB2YWx1ZVxuICAgIGZyb21EaXNwbGF5VW5pdHNWZWMzKHRvVW5pdHMsIHZlYywgdGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbmZpZygpO1xuICAgICAgICB0YXJnZXQueCA9IHRoaXMuZnJvbURpc3BsYXlVbml0cyh0b1VuaXRzLCB2ZWMueCk7XG4gICAgICAgIHRhcmdldC55ID0gdGhpcy5mcm9tRGlzcGxheVVuaXRzKHRvVW5pdHMsIHZlYy55KTtcbiAgICAgICAgdGFyZ2V0LnogPSB0aGlzLmZyb21EaXNwbGF5VW5pdHModG9Vbml0cywgdmVjLnopO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8vIENvbnZlcnQgZnJvbSBjdXJyZW50IGdpdmVuIGZyb21Vbml0cyB0byBkaXNwbGF5IHVuaXRzLCBjb25zaWRlcmluZyB0aGUgY3VycmVudCBzY2FsZSBmYWN0b3IuXG4gICAgdG9EaXNwbGF5VW5pdHMoZnJvbVVuaXRzLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbmZpZygpO1xuICAgICAgICByZXR1cm4gYXZwLmNvbnZlcnRVbml0cyhmcm9tVW5pdHMsIHRoaXMuY29uZmlnLmRpc3BsYXlVbml0cywgdGhpcy5jb25maWcuc2NhbGVGYWN0b3IsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBTYW1lIGZvciBWZWMzIHZhbHVlXG4gICAgdG9EaXNwbGF5VW5pdHNWZWMzKGZyb21Vbml0cywgdmVjLCB0YXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpKSB7XG4gICAgICAgIHRoaXMudXBkYXRlQ29uZmlnKCk7XG4gICAgICAgIHRhcmdldC54ID0gdGhpcy50b0Rpc3BsYXlVbml0cyhmcm9tVW5pdHMsIHZlYy54KTtcbiAgICAgICAgdGFyZ2V0LnkgPSB0aGlzLnRvRGlzcGxheVVuaXRzKGZyb21Vbml0cywgdmVjLnkpO1xuICAgICAgICB0YXJnZXQueiA9IHRoaXMudG9EaXNwbGF5VW5pdHMoZnJvbVVuaXRzLCB2ZWMueik7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLy8gQHJldHVybnMge3N0cmluZ30gbmFtZSBvZiB0aGUgZGlzcGxheSB1bml0LCBlLmcuIFwiZnRcIiBvciBcIm1cIi5cbiAgICBnZXREaXNwbGF5VW5pdCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb25maWcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRpc3BsYXlVbml0cztcbiAgICB9XG5cbiAgICAvLyBAcmV0dXJucyB7c3RyaW5nfSBTaW1pbGFyIHRvIGdldERpc3BsYXlVbml0KCksIGJ1dCBzaW1wbGlmaWVzIGNvbWJpbmVkIHVuaXRzIGxpa2UgXCJkZWNpbWFsLWZlZXRcIiBvciBcImZ0LWFuZC1mcmFjdGlvbmFsLWluXCIgc3R1ZmYgdG8ganVzdCBcImZ0XCIuXG4gICAgZ2V0TWFpbkRpc3BsYXlVbml0KCkge1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5nZXREaXNwbGF5VW5pdCgpO1xuICAgICAgICByZXR1cm4gQXV0b2Rlc2suVmlld2luZy5Qcml2YXRlLmdldE1haW5Vbml0KHVuaXQpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJEZWZhdWx0TWVhc3VyZVRyYW5zZm9ybSIsImF2cCIsIkF1dG9kZXNrIiwiVmlld2luZyIsIlByaXZhdGUiLCJVbml0SGFuZGxlciIsImNvbnN0cnVjdG9yIiwibWVhc3VyZVRyYW5zZm9ybSIsImxlbmd0aFRvU3RyaW5nIiwidmFsIiwiY29uc29sZSIsImVycm9yIiwiYXJlYVRvU3RyaW5nIiwiRGVmYXVsdFByZWNpc2lvbiIsIkRlZmF1bHRVbml0cyIsIlNpbXBsZVVuaXRIYW5kbGVyIiwidmlld2VyIiwiY29uZmlnIiwibGF5ZXJVbml0cyIsImRpc3BsYXlVbml0cyIsInByZWNpc2lvbiIsInNjYWxlRmFjdG9yIiwiYXJlYVN1ZmZpeCIsIm5vTWl4ZWRBcmVhIiwicHJlZmVyTGV0dGVycyIsImNmZyIsImNvbnZlcnRVbml0cyIsImZvcm1hdFZhbHVlV2l0aFVuaXRzIiwidW5pdHMiLCJEZWZhdWx0VW5pdEhhbmRsZXIiLCJ1cGRhdGVDb25maWciLCJtb2RlbCIsImdldFVuaXRTdHJpbmciLCJleHQiLCJnZXRFeHRlbnNpb24iLCJtc3JDZmciLCJzaGFyZWRNZWFzdXJlQ29uZmlnIiwiY2FsaWJyYXRpb25GYWN0b3IiLCJnZXRQcmVjaXNpb24iLCJmcm9tRGlzcGxheVVuaXRzIiwidG9Vbml0cyIsInZhbHVlIiwiZnJvbURpc3BsYXlVbml0c1ZlYzMiLCJ2ZWMiLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJUSFJFRSIsIlZlY3RvcjMiLCJ4IiwieSIsInoiLCJ0b0Rpc3BsYXlVbml0cyIsImZyb21Vbml0cyIsInRvRGlzcGxheVVuaXRzVmVjMyIsImdldERpc3BsYXlVbml0IiwiZ2V0TWFpbkRpc3BsYXlVbml0IiwidW5pdCIsImdldE1haW5Vbml0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/Edit2D/UnitHandler.js\n");

/***/ }),

/***/ "./extensions/Edit2D/locales.js":
/*!**************************************!*\
  !*** ./extensions/Edit2D/locales.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   locales: () => (/* binding */ locales)\n/* harmony export */ });\n/* harmony import */ var _res_locales_en_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../res/locales/en/nobundle-edit2d.loc */ \"./res/locales/en/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_en_GB_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../res/locales/en-GB/nobundle-edit2d.loc */ \"./res/locales/en-GB/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_cs_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../res/locales/cs/nobundle-edit2d.loc */ \"./res/locales/cs/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_de_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../res/locales/de/nobundle-edit2d.loc */ \"./res/locales/de/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_es_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../res/locales/es/nobundle-edit2d.loc */ \"./res/locales/es/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_fr_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../res/locales/fr/nobundle-edit2d.loc */ \"./res/locales/fr/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_fr_CA_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../res/locales/fr-CA/nobundle-edit2d.loc */ \"./res/locales/fr-CA/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_it_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../res/locales/it/nobundle-edit2d.loc */ \"./res/locales/it/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_ja_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../res/locales/ja/nobundle-edit2d.loc */ \"./res/locales/ja/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_ko_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../res/locales/ko/nobundle-edit2d.loc */ \"./res/locales/ko/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_pl_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../res/locales/pl/nobundle-edit2d.loc */ \"./res/locales/pl/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_pt_BR_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../res/locales/pt-BR/nobundle-edit2d.loc */ \"./res/locales/pt-BR/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_ru_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../res/locales/ru/nobundle-edit2d.loc */ \"./res/locales/ru/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_tr_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../res/locales/tr/nobundle-edit2d.loc */ \"./res/locales/tr/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_zh_Hans_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../res/locales/zh-Hans/nobundle-edit2d.loc */ \"./res/locales/zh-Hans/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_zh_Hant_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../res/locales/zh-Hant/nobundle-edit2d.loc */ \"./res/locales/zh-Hant/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_zh_HK_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../res/locales/zh-HK/nobundle-edit2d.loc */ \"./res/locales/zh-HK/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_nl_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../res/locales/nl/nobundle-edit2d.loc */ \"./res/locales/nl/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_sv_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../res/locales/sv/nobundle-edit2d.loc */ \"./res/locales/sv/nobundle-edit2d.loc.json\");\n/* harmony import */ var _res_locales_da_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../res/locales/da/nobundle-edit2d.loc */ \"./res/locales/da/nobundle-edit2d.loc.json\");\n/**\n * Include each locale json file and return it in an object\n * that can be consumed by i18n\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst locales = {\n  en: _res_locales_en_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_0__,\n  \"en-GB\": _res_locales_en_GB_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_1__,\n  cs: _res_locales_cs_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_2__,\n  de: _res_locales_de_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_3__,\n  es: _res_locales_es_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_4__,\n  fr: _res_locales_fr_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_5__,\n  \"fr-CA\": _res_locales_fr_CA_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_6__,\n  it: _res_locales_it_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_7__,\n  ja: _res_locales_ja_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_8__,\n  ko: _res_locales_ko_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_9__,\n  pl: _res_locales_pl_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_10__,\n  \"pt-BR\": _res_locales_pt_BR_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_11__,\n  ru: _res_locales_ru_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_12__,\n  tr: _res_locales_tr_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_13__,\n  \"zh-Hans\": _res_locales_zh_Hans_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_14__,\n  \"zh-Hant\": _res_locales_zh_Hant_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_15__,\n  \"zh-HK\": _res_locales_zh_HK_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_16__,\n  nl: _res_locales_nl_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_17__,\n  sv: _res_locales_sv_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_18__,\n  da: _res_locales_da_nobundle_edit2d_loc__WEBPACK_IMPORTED_MODULE_19__\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9sb2NhbGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUUrRDtBQUNNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ007QUFDTjtBQUNBO0FBQ1U7QUFDQTtBQUNKO0FBQ047QUFDQTtBQUNBOztBQUV4RCxNQUFNb0IsT0FBTyxHQUFHO0VBQ25CQyxFQUFFLEVBQUVyQixnRUFBTztFQUNYLE9BQU8sRUFBRUMsbUVBQVU7RUFDbkJxQixFQUFFLEVBQUVwQixnRUFBTztFQUNYcUIsRUFBRSxFQUFFcEIsZ0VBQU87RUFDWHFCLEVBQUUsRUFBRXBCLGdFQUFPO0VBQ1hxQixFQUFFLEVBQUVwQixnRUFBTztFQUNYLE9BQU8sRUFBRUMsbUVBQVU7RUFDbkJvQixFQUFFLEVBQUVuQixnRUFBTztFQUNYb0IsRUFBRSxFQUFFbkIsZ0VBQU87RUFDWG9CLEVBQUUsRUFBRW5CLGdFQUFPO0VBQ1hvQixFQUFFLEVBQUVuQixpRUFBTztFQUNYLE9BQU8sRUFBRUMsb0VBQVU7RUFDbkJtQixFQUFFLEVBQUVsQixpRUFBTztFQUNYbUIsRUFBRSxFQUFFbEIsaUVBQU87RUFDWCxTQUFTLEVBQUVDLHNFQUFZO0VBQ3ZCLFNBQVMsRUFBRUMsc0VBQVk7RUFDdkIsT0FBTyxFQUFFQyxvRUFBVTtFQUNuQmdCLEVBQUUsRUFBRWYsaUVBQU87RUFDWGdCLEVBQUUsRUFBRWYsaUVBQU87RUFDWGdCLEVBQUUsRUFBRWYsaUVBQU9BO0FBQ2YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQyRC9sb2NhbGVzLmpzP2M4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbmNsdWRlIGVhY2ggbG9jYWxlIGpzb24gZmlsZSBhbmQgcmV0dXJuIGl0IGluIGFuIG9iamVjdFxuICogdGhhdCBjYW4gYmUgY29uc3VtZWQgYnkgaTE4blxuICovXG5cbmltcG9ydCBqc29uX2VuIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL2VuL25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25fZW5fR0IgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvZW4tR0Ivbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl9jcyBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy9jcy9ub2J1bmRsZS1lZGl0MmQubG9jJztcbmltcG9ydCBqc29uX2RlIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL2RlL25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25fZXMgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvZXMvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl9mciBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy9mci9ub2J1bmRsZS1lZGl0MmQubG9jJztcbmltcG9ydCBqc29uX2ZyX0NBIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL2ZyLUNBL25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25faXQgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvaXQvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl9qYSBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy9qYS9ub2J1bmRsZS1lZGl0MmQubG9jJztcbmltcG9ydCBqc29uX2tvIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL2tvL25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25fcGwgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvcGwvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl9wdF9CUiBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy9wdC1CUi9ub2J1bmRsZS1lZGl0MmQubG9jJztcbmltcG9ydCBqc29uX3J1IGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL3J1L25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25fdHIgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvdHIvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl96aF9IYW5zIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL3poLUhhbnMvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl96aF9IYW50IGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL3poLUhhbnQvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl96aF9ISyBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy96aC1ISy9ub2J1bmRsZS1lZGl0MmQubG9jJztcbmltcG9ydCBqc29uX25sIGZyb20gJy4uLy4uL3Jlcy9sb2NhbGVzL25sL25vYnVuZGxlLWVkaXQyZC5sb2MnO1xuaW1wb3J0IGpzb25fc3YgZnJvbSAnLi4vLi4vcmVzL2xvY2FsZXMvc3Yvbm9idW5kbGUtZWRpdDJkLmxvYyc7XG5pbXBvcnQganNvbl9kYSBmcm9tICcuLi8uLi9yZXMvbG9jYWxlcy9kYS9ub2J1bmRsZS1lZGl0MmQubG9jJztcblxuZXhwb3J0IGNvbnN0IGxvY2FsZXMgPSB7XG4gICAgZW46IGpzb25fZW4sXG4gICAgXCJlbi1HQlwiOiBqc29uX2VuX0dCLFxuICAgIGNzOiBqc29uX2NzLFxuICAgIGRlOiBqc29uX2RlLFxuICAgIGVzOiBqc29uX2VzLFxuICAgIGZyOiBqc29uX2ZyLFxuICAgIFwiZnItQ0FcIjoganNvbl9mcl9DQSxcbiAgICBpdDoganNvbl9pdCxcbiAgICBqYToganNvbl9qYSxcbiAgICBrbzoganNvbl9rbyxcbiAgICBwbDoganNvbl9wbCxcbiAgICBcInB0LUJSXCI6IGpzb25fcHRfQlIsXG4gICAgcnU6IGpzb25fcnUsXG4gICAgdHI6IGpzb25fdHIsXG4gICAgXCJ6aC1IYW5zXCI6IGpzb25femhfSGFucyxcbiAgICBcInpoLUhhbnRcIjoganNvbl96aF9IYW50LFxuICAgIFwiemgtSEtcIjoganNvbl96aF9ISyxcbiAgICBubDoganNvbl9ubCxcbiAgICBzdjoganNvbl9zdixcbiAgICBkYToganNvbl9kYSxcbn07XG4iXSwibmFtZXMiOlsianNvbl9lbiIsImpzb25fZW5fR0IiLCJqc29uX2NzIiwianNvbl9kZSIsImpzb25fZXMiLCJqc29uX2ZyIiwianNvbl9mcl9DQSIsImpzb25faXQiLCJqc29uX2phIiwianNvbl9rbyIsImpzb25fcGwiLCJqc29uX3B0X0JSIiwianNvbl9ydSIsImpzb25fdHIiLCJqc29uX3poX0hhbnMiLCJqc29uX3poX0hhbnQiLCJqc29uX3poX0hLIiwianNvbl9ubCIsImpzb25fc3YiLCJqc29uX2RhIiwibG9jYWxlcyIsImVuIiwiY3MiLCJkZSIsImVzIiwiZnIiLCJpdCIsImphIiwia28iLCJwbCIsInJ1IiwidHIiLCJubCIsInN2IiwiZGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit2D/locales.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/CopyTool.js":
/*!*********************************************!*\
  !*** ./extensions/Edit2D/tools/CopyTool.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CopyTool)\n/* harmony export */ });\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Clipboard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Clipboard.js */ \"./extensions/Edit2D/Clipboard.js\");\n\n\n\nconst CopyToolName = 'Edit2_CopyTool';\n\nconst av = Autodesk.Viewing;\n\n// Apply constant offset in x/y for each paste step, so that pasted shapes are not exactly on top of the src shapes.\nconst PasteOffset = 30;\n\nclass CopyTool {\n\n  constructor(ctx) {\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    this.viewer = ctx.viewer;\n    this.layer = ctx.layer;\n    this.selection = ctx.selection;\n    this.undoStack = ctx.undoStack;\n    this.clipboard = ctx.clipboard;\n    this.nameSuffix = `_${ctx.toolSetName}`;\n\n    this.enableCut = false;\n\n    // Track when this tool is posting shapes to the clipboard.\n    // Used to avoid modifying the pasteCounter when this tool is posting shapes.\n    // This is a reference to the array being posted or null. An array is used rather than\n    // a flag in case a clipboard listener posts to the clipboard during a callback.\n    this.shapesBeingPosted = null;\n    // Tracks the number of times the clipboard contents have been pasted.\n    // Pasted shapes are offset whenever the counter is greater than zero.\n    // Set the counter to a negative value to prevent offsetting for some pastes.\n    this.pasteCounter = 0;\n\n    this.onClipboardContentChanged = (event) => {\n      if (event.shapes !== this.shapesBeingPosted) {\n        // Do not apply offset to the first paste of content placed on the clipboard by other code\n        // to preserve its location\n        this.pasteCounter = -1;\n      }\n    };\n  }\n\n  register() {\n    this.clipboard.addEventListener(_Clipboard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].CONTENT_CHANGED, this.onClipboardContentChanged);\n  }\n\n  deregister() {\n    this.clipboard.removeEventListener(_Clipboard_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].CONTENT_CHANGED, this.onClipboardContentChanged);\n  }\n\n  _postSelectedShapesToClipboard() {\n    const shapes = this.selection.getSelectedShapes();\n\n    this.shapesBeingPosted = shapes;\n    this.clipboard.postShapes(shapes);\n    this.shapesBeingPosted = null;\n\n    return shapes;\n  }\n\n\n  /**\n   * Copy the currently selected shapes to the clipboard.\n   *\n   * Each time the shapes are pasted, they will be offset from their original positions (first paste)\n   * or their last pasted positions. The offset currently doesn't change with the undo/redo of paste operations.\n   */\n  copy() {\n    this._postSelectedShapesToClipboard();\n    this.pasteCounter = 0;\n  }\n\n  /**\n   * Cut the currently selected shapes to the clipboard.\n   *\n   * Each time the shapes are pasted, they will be in their original positions (first paste)\n   * or offset from their last pasted positions. The offset currently doesn't change with the\n   * undo/redo of paste operations.\n   */\n  cut() {\n    const shapes = this._postSelectedShapesToClipboard();\n    // Do not apply offset to the first paste\n    this.pasteCounter = -1;\n\n    this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.RemoveShapes(this.layer, shapes));\n  }\n\n  /**\n   * Paste clones of the shapes from the clipboard.\n   *\n   * Pasting will not occur if the BEFORE_PASTE event is vetoed.\n   * Shapes may be offset from their original or previously pasted positions depending on\n   * how they were posted to the clipboard (whether by this tool's copy/cut operations,\n   * or application code)\n   */\n  paste() {\n    this.pasteCounter++;\n    const shapes = this.clipboard.cloneShapes();\n\n    const beforePasteEvent = { type: CopyTool.BEFORE_PASTE, veto: false };\n    this.dispatchEvent(beforePasteEvent);\n    if (beforePasteEvent.veto) {\n      return;\n    }\n\n    if (this.pasteCounter > 0) {\n      // Compute how far we want to shift the copy that we create.\n      // We shift by 30 pixels, then by 60, etc.\n      const shapeOffset = this.pasteCounter * PasteOffset * this.layer.getUnitsPerPixel();\n      shapes.forEach((shape) => shape.move(shapeOffset, shapeOffset));\n    }\n\n    this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.AddShapes(this.layer, shapes));\n    // Change selection to new shapes\n    this.selection.setSelection(shapes);\n\n    this.dispatchEvent({ type: CopyTool.AFTER_PASTE, shapes });\n  }\n\n  /**\n   * Delete all selected shapes\n   */\n  delete() {\n    const shapes = this.selection.getSelectedShapes();\n    this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.RemoveShapes(this.layer, shapes));\n    this.selection.clear();\n  }\n\n  handleKeyDown(event, keyCode) {\n\n    // Accept command key on Mac as alternative to ctrl.\n    const ctrlKey = event.ctrlKey || event.metaKey;\n\n    if (!this.selection.empty()) {\n      if (keyCode === av.KeyCode.DELETE) {\n        this.delete();\n        return true;\n      }\n\n      if (ctrlKey) {\n        if (keyCode === av.KeyCode.c) {\n          this.copy();\n          return true;\n        }\n        if (this.enableCut && keyCode === av.KeyCode.x) {\n          this.cut();\n          return true;\n        }\n      }\n    }\n\n    if (this.clipboard.hasShapes() && ctrlKey && keyCode === av.KeyCode.v) {\n      this.paste();\n      return true;\n    }\n\n    return false;\n  }\n\n  // Some paperwork for ToolController\n  getName() {\n    return CopyToolName + this.nameSuffix;\n  }\n  getNames() {\n    return [this.getName()];\n  }\n  activate() {}\n  deactivate() {}\n};\n\nCopyTool.BEFORE_PASTE = \"BEFORE_PASTE\";\nCopyTool.AFTER_PASTE = \"AFTER_PASTE\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/CopyTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/EdgeMoveTool.js":
/*!*************************************************!*\
  !*** ./extensions/Edit2D/tools/EdgeMoveTool.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EdgeMoveTool)\n/* harmony export */ });\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n\n\n\n\n\n\n\nconst EdgeMoveToolName = \"Edit2_EdgeMoveTool\";\n\nconst av = Autodesk.Viewing;\n\nconst edgeGizmoName = (index) => {\n  return 'PolygonEditTool_edgeGizmo_' + index.toString();\n};\n\n// Given a Polyline/Polygon and a vertex index, check if the two edges next to 'vertex' are collinear.\n// Returns false if vertex does not have 2 different neighbor edges.\nconst edgesCollinear = (poly, vertex, loopIndex) => {\n\n  // If polygon/polyline just contains 0 or 1 edges, just return false.\n  const vertexCount = poly.getVertexCount(loopIndex);\n  if (vertexCount < 3) {\n    return false;\n  }\n\n  // check if neighbor edges exist\n  const isLine = poly.isPolyline();\n  const prevExists = !(isLine && vertex === 0);\n  const nextExists = !(isLine && vertex === vertexCount - 1);\n\n  // If poly has only 1 edge or 'vertex' is an end vertex of a polyline, stop here.\n  if (!prevExists || !nextExists) {\n    return false;\n  }\n\n  // get points before and after vertex\n  const prevIndex = poly.prevIndex(vertex, loopIndex);\n  const nextIndex = poly.nextIndex(vertex, loopIndex);\n\n  const precision = 1.e-5;\n\n  const a = poly.getPoint(prevIndex, loopIndex);\n  const b = poly.getPoint(vertex, loopIndex);\n  const c = poly.getPoint(nextIndex, loopIndex);\n  return _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.isPointOnLine(b, a, c, precision);\n};\n\nclass EdgeMoveTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n\n  constructor(ctx) {let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(ctx);\n\n    this.options = options;\n    this.layer = ctx.layer;\n    this.selection = ctx.selection;\n    this.nameSuffix = `_${ctx.toolSetName}`;\n\n    this.keyMap.CancelEdit = av.KeyCode.ESCAPE;\n\n    // When dragging an edge, this stores a copy of its original position\n    this.dragEdgeStartPos = {\n      a: new THREE.Vector2(),\n      b: new THREE.Vector2()\n    };\n\n    // Last drag position in layer coords\n    this.lastDragPoint = new THREE.Vector2();\n\n    // Index of the edge being dragged or -1\n    this.draggedEdge = null; // {PolyIndex}\n\n    // When dragging an edge, selectedEdge is the same as draggedEdge. After the interaction, draggedEdge is reset to -1, but\n    // the edge keeps selected until clicking somewhere else.\n    this.selectedEdge = null; // {PolyIndex}\n\n    // In some cases, we duplicate start/end vertex when beginning to drag an edge. This may shift this.draggedEdge by 1 or 2.\n    // draggedEdgeBefore stores the original edgeIndex before duplicating vertices.\n    this.draggedEdgeBefore = null; //{PolyIndex};\n\n    // Reused to store edge normal of dragged edge\n    this.draggedEdgeNormal = new THREE.Vector2();\n\n    // When dragging edges, we store the offset (in layer-coords) between the accurate click position and the center of the clicked edge gizmo\n    // Stored in pixels.\n    this.dragOffset = new THREE.Vector2(0, 0);\n\n    // Used when dragging an edge: Indicates whether we had to duplicate\n    // start/end vertex of the edge in order to move it.\n    this.duplicateStartVertex = false;\n    this.duplicateEndVertex = false;\n\n    // {EdgeGizmo[][]} Array of Gizmos per loop for moving edges.\n    this.edgeGizmos = [];\n\n    // gizmos are enabled by default.\n    this.gizmosEnabled = true;\n\n    // Used to highlight a dragged edge in a different color by drawing a single-edge overlay.\n    this.edgeGizmo = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Polyline();\n    this.edgeGizmoShown = false; // indicates that gizmo is currently added to gizmoLayer\n\n    // Displays dashed lines that connect start/end vertex of arc segments\n    this.arcEdgeGizmo = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.ArcEdgeGizmo(ctx.layer, ctx.gizmoLayer);\n\n    // Create length label. Default hidden - showing is optional.\n    this.lengthLabel = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.LengthLabel(null, this.layer, ctx.unitHandler, false);\n\n    // Constant color for highlighted edges\n    this.edgeHighlightStyle = this.options.edgeHighlightStyle || new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.Style({ lineColor: 'rgb(0, 255, 0)' });\n\n    this.gizmoClassName = this.options.gizmoClassName;\n  }\n\n  getName() {\n    return EdgeMoveToolName + this.nameSuffix;\n  }\n\n  deactivate() {\n    super.deactivate();\n    this.reset();\n  }\n\n  // Enable the length labels (public API)\n  setLengthLabelVisible(visible) {\n    this.lengthLabel.setVisible(visible);\n  }\n\n  handleButtonDown(event, button) {\n    // Support suppressing mouse buttons by holding a key\n    if (this.ignoreDragging) {\n      return false;\n    }\n\n    super.handleButtonDown(event, button);\n\n    // Only respond to left mouse button.\n    if (!button == 0) {\n      return false;\n    }\n\n    if (!this.poly) {\n      return;\n    }\n\n    this.setSelectedEdge(null);\n\n    // Handle Edge-Move: If we hit an EdgeGizmo, start dragging it\n    const selectedEdgeGizmo = this.getEdgeIndex();\n\n    if (this.edgeMovePossible() && selectedEdgeGizmo) {\n      this.startedDragging = true;\n      this.startDragEdge(event, selectedEdgeGizmo);\n      return true;\n    }\n\n    return false;\n  }\n\n  handleMouseMove(event) {\n    super.handleMouseMove(event);\n\n    this.updateEdgeGizmo();\n\n    if (!this.poly) {\n      return false;\n    }\n\n    if (this.draggedEdge) {\n      this.moveDragEdge(event);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  handleButtonUp(event, button) {\n    super.handleButtonUp(event, button);\n\n    const wasDragging = this.startedDragging;\n    this.startedDragging = false;\n\n    if (!this.poly) {\n      return;\n    }\n\n    if (this.draggedEdge) {\n      this.endDragEdge();\n      return true;\n    }\n\n    // Consider all left-button events as handled. E.g., if dragging was cancelled using Esc,\n    // we do nothing here, but letting the mouseUp pass to navigation classes would cause camera jumps.\n    return !this.ignoreDragging && wasDragging;\n  }\n\n  handleKeyDown(event, keyCode) {\n    let handled = super.handleKeyDown(event, keyCode);\n\n    if (keyCode === this.keyMap.CancelEdit) {\n      handled = this.cancelDrag();\n    }\n\n    return handled;\n  }\n\n  getCursor() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    // Note: Vertex gizmos and edge gizmos are separate DomElements and define own mouse cursors via style.\n    // Indicate: \"Moving a gizmo\". Currently, we use the same as for shape move. Note that\n    //           the cursor for gizmo dragging must be consistent with the one we have if the mouse is on the gizmo.\n    //           Otherwise, the mouse cursor would change its state when temporarily leaving the gizmo on fast moves.\n    if (this.draggedEdge) {\n      return 'move';\n    }\n\n    // => Just default cursor\n    return undefined;\n  }\n\n  // Returns the index of the edge gizmo under mouse (or -1 if no EdgeGizmo is hit)\n  // (x,y) are in layer-coords\n  //  @returns {PolyIndex}\n  getEdgeIndex() {\n    for (let l = 0; l < this.edgeGizmos.length; l++) {\n      const gizmos = this.edgeGizmos[l];\n      const index = this.gizmoManager.getGizmoIndex(gizmos);\n      if (index !== -1) {\n        return new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyIndex({ vertex: index, loop: l });\n      }\n    }\n    return null;\n  }\n\n  cancelDrag() {\n\n    let needsUpdate = false;\n\n    if (this.draggedEdge) {\n      this.restoreDragEdge();\n      this.draggedEdge = null;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      this.updateAllGizmos();\n      this.layer.update();\n    }\n\n    this.snapper.clearSnappingGizmos();\n\n    return needsUpdate;\n  }\n\n  handleExternalAction(action, isUndo) {\n\n    // make sure that selected edge/vertex are still valid (or switched off)\n    this.updateSelectionState(action, isUndo);\n\n    // Stop any ongoing drag-operations (e.g., an undo operation might have removed the vertex that we are just dragging)\n    this.cancelDrag();\n\n    // Sync gizmos in case vertices were modified\n    this.updateAllGizmos();\n\n    this.snapper.clearSnappingGizmos();\n  }\n\n  // Updates selection of shape(s), vertex, and edge after an action\n  updateSelectionState(action, isUndo) {\n\n    // Check if the action provides a hint how we should update selection\n    const hint = action.getSelectionHint(isUndo);\n    if (hint) {\n      this.setSelectedEdge(hint.edge);\n\n      return;\n    }\n\n    // Default behavior - if we don't know anything better:\n    //  - Keep shape selected if still existing\n    //  - Reset vertex/edge selection\n\n    // If shape was removed, reset state\n    const shapeFound = Boolean(this.poly && this.layer.findShapeById(this.poly.id));\n    if (!shapeFound) {\n      this.reset();\n    }\n\n    // If poly was modified from outside, we can't know if the selected vertex or edge\n    // still exist or have the same meaning. E.g., when undo/redoing a vertex-insert, the indices may have shifted.\n    this.setSelectedEdge(null);\n  }\n\n  startDragEdge(event, draggedEdge) {\n    const edgeIndex = draggedEdge.vertex;\n    const loopIndex = draggedEdge.loop;\n\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    // store edge normal for the edge being dragged\n    this.draggedEdgeNormal = this.poly.getLeftEdgeNormal(edgeIndex, loopIndex, this.draggedEdgeNormal);\n\n    // get edge\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    this.poly.getEdge(edgeIndex, a, b, loopIndex);\n\n    // get edge direction\n    const edgeDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(a, b);\n\n    // compute projection of p to the line spanned by the edge\n    let pointOnEdge = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.projectToLine(pointOnEdge, a, edgeDir);\n\n    // Set inital dragging point exactly on edge\n    this.lastDragPoint.copy(pointOnEdge);\n\n    // Store offset between exact mouse pos and the edge we are dragging\n    const edgePosScreen = this.layer.layerToCanvas(pointOnEdge.x, pointOnEdge.y);\n    this.dragOffset.set(edgePosScreen.x - event.canvasX, edgePosScreen.y - event.canvasY);\n\n    // store original position of the two edge vertices\n    const ia = edgeIndex;\n    const ib = (edgeIndex + 1) % this.poly.getVertexCount(loopIndex);\n    this.dragEdgeStartPos.a.copy(this.poly.getPoint(ia, loopIndex));\n    this.dragEdgeStartPos.b.copy(this.poly.getPoint(ib, loopIndex));\n\n    // Check if we need to duplicate start and/or end vertex of the edge.\n    // This happens when the neighbor edges are collinear with the ones being moved.\n    this.duplicateStartVertex = edgesCollinear(this.poly, ia, loopIndex);\n    this.duplicateEndVertex = edgesCollinear(this.poly, ib, loopIndex);\n\n    // Duplicate start/end vertices if necessary\n    _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveEdge.duplicateVertices(this.poly, edgeIndex, loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n\n    // Store initial edge index (not considering any duplicated vertices)\n    this.draggedEdgeBefore = draggedEdge;\n\n    // Select the edge - using its index after duplicating vertices\n    const newEdgeIndex = _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveEdge.getNewEdgeIndex(this.poly, edgeIndex, loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n    const polyIndex = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyIndex({ vertex: newEdgeIndex, loop: loopIndex });\n    this.setSelectedEdge(polyIndex);\n\n    // Set the edge being dragged\n    this.draggedEdge = polyIndex;\n\n    // Make sure that all gizmos are updated if we duplicated vertices\n    if (this.duplicateStartVertex || this.duplicateEndVertex) {\n      this.updateAllGizmos();\n    }\n  }\n\n  // If selection changes (may also be triggered outside this tool), we choose the selected polyon for editing\n  onSelectionChanged() {\n    const selected = this.selection.getSelectedShapes();\n\n    // Activate if exactly one shape is selected\n    const shape = selected.length == 1 ? selected[0] : null;\n    if (shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyBase) {\n      this.setEditPoly(shape);\n    } else {\n      this.setEditPoly(null);\n    }\n  }\n\n  // Finishes editing of a previous polygon\n  reset() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    this.poly = null;\n    this.draggedEdge = null;\n    this.selectedEdge = null;\n\n    // Clear any gizmos from previous polygon\n    this.updateAllGizmos();\n\n    this.lengthLabel.setShape(null);\n\n    this.snapper.stopAngleSnapping();\n  }\n\n  // Selects a new polygon / polyline for editing\n  setEditPoly(poly) {\n\n    this.reset();\n\n    if (poly) {\n      this.poly = poly;\n      this.updateAllGizmos();\n    }\n\n    const polyline = poly && poly.isPolyline() ? poly : null;\n    this.lengthLabel.setShape(polyline);\n  }\n\n  // Update edgeGizmos to this.poly or hide all if poly is null\n  createEdgeGizmos() {\n    // Make sure that we don't leak outdated ones\n    this.clearEdgeGizmos();\n\n    if (!this.gizmosEnabled) {\n      // gizmos not enabled, so don't add them.\n      return;\n    }\n\n    let hasEdgeMoveGizmos = false;\n\n    const loopCount = this.poly ? this.poly.loopCount : 0;\n    for (let l = 0; l < loopCount; l++) {\n\n      // Create gizmo per edge\n      const edgeCount = this.poly.getEdgeCount(l);\n\n      // For simple lines, we don't show the edge-move gizmo: It does not make sense to\n      // move an edge, because you can simply move the whole shape instead.\n      const needEdgeMoveGizmos = edgeCount >= 2;\n\n      const gizmos = [];\n      if (needEdgeMoveGizmos) {\n        for (let i = 0; i < edgeCount; i++) {\n          const gizmo = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.EdgeMoveGizmo(this.layer, edgeGizmoName(i), undefined, this.gizmoClassName);\n          gizmo.attachToEdge(this.poly, i, l);\n          gizmos.push(gizmo);\n        }\n\n        hasEdgeMoveGizmos = true;\n      }\n\n      // add gizmos for this loop\n      this.edgeGizmos.push(gizmos);\n    }\n\n    // attach arcEdgeGizmo to current shape, so that dashed lines are displayed for its arc segments\n    this.arcEdgeGizmo.setPoly(this.poly);\n\n    this.updateEdgeGizmoHighlighting();\n\n    // Shift label a bit up to avoid it from occluding the move-edge gizmo\n    const yOffset = hasEdgeMoveGizmos ? 20 : 0;\n    this.lengthLabel.pixelOffset.set(0, yOffset);\n  }\n\n  moveDragEdge(event) {\n\n    if (!this.draggedEdge) {\n      return;\n    }\n\n    const edgeIndex = this.draggedEdge.vertex;\n    const loopIndex = this.draggedEdge.loop;\n\n    // Note that the edge we are dragging does not always match exactly with the mouse position. E.g., we may have picked the bottom-left boundary of a edge gizmo at drag-start.\n    const x = event.canvasX + this.dragOffset.x;\n    const y = event.canvasY + this.dragOffset.y;\n\n    const p = this.getSnapPosition(x, y);\n\n    // get delta between last and current position\n    const delta = p.clone().sub(this.lastDragPoint);\n\n    // get indices of prev and next edge\n    const prevEdgeIndex = this.poly.prevEdgeIndex(edgeIndex, loopIndex);\n    const nextEdgeIndex = this.poly.nextEdgeIndex(edgeIndex, loopIndex);\n\n    // prev/next edge may not exist if we are at the end of a polyline\n    const prevEdgeExists = prevEdgeIndex !== -1;\n    const nextEdgeExists = nextEdgeIndex !== -1;\n\n    // Will contain the new edge endpoints\n    let newEdgeA = new THREE.Vector2();\n    let newEdgeB = new THREE.Vector2();\n\n    // get edge vertices\n    const curEdgeA = new THREE.Vector2();\n    const curEdgeB = new THREE.Vector2();\n    this.poly.getEdge(edgeIndex, curEdgeA, curEdgeB, loopIndex);\n\n    if (!prevEdgeExists && !nextEdgeExists) {\n      // If prev/next are both missing, we are moving an isoldated line segment around.\n      // In this case, we can just allow unconstrained moving and are done here.\n      newEdgeA.copy(curEdgeA).add(delta);\n      newEdgeB.copy(curEdgeB).add(delta);\n    } else {\n\n      // get next/previous edge (if existing)\n      const prevEdgeA = new THREE.Vector2();\n      const prevEdgeB = new THREE.Vector2();\n      const nextEdgeA = new THREE.Vector2();\n      const nextEdgeB = new THREE.Vector2();\n      prevEdgeExists && this.poly.getEdge(prevEdgeIndex, prevEdgeA, prevEdgeB, loopIndex);\n      nextEdgeExists && this.poly.getEdge(nextEdgeIndex, nextEdgeA, nextEdgeB, loopIndex);\n\n      // Handle start edges of polylines: Choose some \"assumed\" previous edge if there is none.\n      if (!prevEdgeExists) {\n\n        prevEdgeB.copy(curEdgeA);\n\n        if (!this.duplicateEndVertex) {\n          // Assume previous edge to be parallel to the next one. In this\n          // way, we constrain the movement only along one direction.\n          prevEdgeA.copy(nextEdgeB).sub(curEdgeB).add(curEdgeA);\n        } else {\n          // The second edge was collinear with the first, so we had to add an extra vertex at dragStart.\n          // Therefore, nextEdge is degenerated and we cannot use it.\n          // For this case, we just assume prevEdge to be perpendicular to the current edge.\n          prevEdgeA.copy(curEdgeA).add(this.draggedEdgeNormal);\n        }\n      }\n\n      // Handle end edges of polylines: Choose some \"assumed\" next edge if there is none\n      if (!nextEdgeExists) {\n\n        nextEdgeA.copy(curEdgeB);\n\n        if (!this.duplicateStartVertex) {\n          // Assume next edge to be parallel to the previous one. In this\n          // way, we constrain the movement only along one direction.\n          nextEdgeB.copy(prevEdgeA).sub(curEdgeA).add(curEdgeB);\n        } else {\n          // The previous edge was collinear with the current one, so we had to add an extra vertex at dragStart.\n          // Therefore, prevEdge is degenerated and we cannot use it.\n          // For this case, we just assume nextEdge to be perpendicular to the current edge.\n          nextEdgeB.copy(curEdgeB).add(this.draggedEdgeNormal);\n        }\n      }\n\n      // Compute directions for each edge to intersect\n      const prevEdgeDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(prevEdgeA, prevEdgeB);\n      const curEdgeDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(curEdgeA, curEdgeB);\n      const nextEdgeDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.getEdgeDirection(nextEdgeA, nextEdgeB);\n\n      // Apply move offset\n      curEdgeA.add(delta);\n      curEdgeB.add(delta);\n\n      // If we added extra vertices, the (newly inserted) neighbor edges will be degenerated\n      // and the edge directions will be invalid. In this case, we choose the edge direction\n      // perpendicular to the edge that we are dragging.\n      if (this.duplicateStartVertex) prevEdgeDir.copy(this.draggedEdgeNormal);\n      if (this.duplicateEndVertex) nextEdgeDir.copy(this.draggedEdgeNormal);\n\n      // Compute new edge endpoints as intersection of prev/next edge with the moved line\n      if (!_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.intersectLines(prevEdgeA, prevEdgeDir, curEdgeA, curEdgeDir, newEdgeA) ||\n      !_Math2D_js__WEBPACK_IMPORTED_MODULE_1__.Math2D.intersectLines(nextEdgeA, nextEdgeDir, curEdgeA, curEdgeDir, newEdgeB)) {\n        // If we don't find an intersection, reject this edge move attempt, because\n        // it's not possible to move the edge in this way by enlarging the neighbor edges.\n        return;\n      }\n    }\n\n    // get indices of the points to modify\n    const ia = edgeIndex;\n    const ib = this.poly.nextIndex(ia, loopIndex);\n\n    // The intersections gives us the new position for the edge vertices\n    this.poly.updatePoint(ia, newEdgeA.x, newEdgeA.y, loopIndex);\n    this.poly.updatePoint(ib, newEdgeB.x, newEdgeB.y, loopIndex);\n\n    this.gizmoLayer.update();\n    this.layer.update();\n\n    this.lastDragPoint.copy(p);\n\n    // We moved the edge => Keep gizmo in-sync\n    this.updateEdgeGizmo();\n  }\n\n  // While dragging an edge, this function restores the original position at drag start\n  restoreDragEdge() {\n\n    if (!this.draggedEdge) {\n      return;\n    }\n\n    const edgeIndex = this.draggedEdge.vertex;\n    const loopIndex = this.draggedEdge.loop;\n\n    const a = this.dragEdgeStartPos.a;\n    const b = this.dragEdgeStartPos.b;\n\n    const ia = edgeIndex;\n    const ib = this.poly.nextIndex(ia, loopIndex);\n\n    this.poly.updatePoint(ia, a.x, a.y, loopIndex);\n    this.poly.updatePoint(ib, b.x, b.y, loopIndex);\n\n    // Revert insertion of extra vertices\n    _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveEdge.revertDuplicateVertices(this.poly, this.draggedEdgeBefore.vertex, loopIndex, this.duplicateStartVertex, this.duplicateEndVertex);\n\n    // If we duplicated vertices at dragStart and reverted it now,\n    // the index of the selected edge may have shifted. So, we must change it to the old one to keep to (visually) keep the same\n    // edge selected as before.\n    this.selectedEdge = this.draggedEdgeBefore;\n  }\n\n  endDragEdge() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (!this.draggedEdge) {\n      return;\n    }\n    const edgeIndex = this.draggedEdge.vertex;\n    const loopIndex = this.draggedEdge.loop;\n\n    // get final position of the edge vertices\n    const ia = edgeIndex;\n    const ib = this.poly.nextIndex(ia, loopIndex);\n\n    const newPos1 = this.poly.getPoint(ia, loopIndex);\n    const newPos2 = this.poly.getPoint(ib, loopIndex);\n\n    this.restoreDragEdge();\n\n    // If the edge was hardly moved at all, we drop the operation. Otherwise, the only effect would be to add invisible\n    // vertex duplicates.\n    const delta = this.dragEdgeStartPos.a.distanceTo(newPos1) * this.layer.getPixelsPerUnit();\n    if (delta >= 3) {\n      this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveEdge(this.layer, this.poly, this.draggedEdgeBefore, newPos1, newPos2, this.duplicateStartVertex, this.duplicateEndVertex));\n\n      // If the action duplicated vertices, make sure that the selected edge is updated to\n      // the index that the selected edge has after the action.\n      this.selectedEdge = this.draggedEdge;\n    }\n\n    // Reset draggedEdge, but the edge keeps selected (we don't reset this.selectedEdge)\n    this.draggedEdge = null;\n\n    // update all gizmos\n    this.updateAllGizmos();\n  }\n\n  edgeMovePossible(loopIndex) {\n    return this.poly && this.poly.getVertexCount(loopIndex) > 2;\n  }\n\n  // Make sure that EdgeGizmo is up-to-date: Its purpose is to highlight the edge being dragged.\n  updateEdgeGizmo() {\n\n    // Check if mouse is on an edge gizmo\n    const edgeUnderMouse = this.getEdgeIndex(); // {PolyIndex}\n\n    const edgeMovePossible = this.edgeMovePossible();\n\n    // Check if we need any highlight\n    const edgeSelected = Boolean(this.poly && this.selectedEdge);\n    const edgeHovered = edgeMovePossible && edgeUnderMouse;\n\n    // If edge is an arc and hovered, we just colorize the arcEdgeGizmo and don't need the extra edge-highlight gizmo\n    const arcEdgeHovered = edgeHovered && this.poly.isPath() && this.poly.isArc(edgeUnderMouse.vertex, edgeUnderMouse.loop);\n\n    // We show the gizmo if an edge is selected or a line-segment is hovered. If gizmos are not enabled, don't show it\n    // regardless of mouse position.\n    const gizmoNeeded = this.gizmosEnabled ? edgeSelected || edgeHovered && !arcEdgeHovered : false;\n\n    // Make sure that edge gizmo is shown if needed\n    if (gizmoNeeded && !this.edgeGizmoShown) {\n      this.gizmoLayer.addShape(this.edgeGizmo);\n      this.edgeGizmoShown = true;\n    } else\n    if (!gizmoNeeded && this.edgeGizmoShown) {\n      this.gizmoLayer.removeShape(this.edgeGizmo);\n      this.edgeGizmoShown = false;\n    }\n\n    // get index of the edge to be highlighted\n    const polyIndex = edgeSelected ? this.selectedEdge : edgeUnderMouse; // {PolyBase}\n    const edgeToHighlight = polyIndex ? polyIndex.vertex : -1;\n    const loopIndex = polyIndex ? polyIndex.loop : -1;\n\n    // Only for arcs: Colorize ArcEdgeGizmo if needed. For hover, this replaces the highlight gizmo. For select, we just set it to the same color to avoid color conflicts.\n    const colorizeArcEdge = this.edgeGizmoShown || arcEdgeHovered;\n    colorizeArcEdge ? this.arcEdgeGizmo.setEdgeHighlighted(edgeToHighlight, loopIndex, this.edgeHighlightStyle.lineColor) : this.arcEdgeGizmo.clearEdgeHighlighting();\n\n    // If we just had to hide it, we are done here\n    if (!gizmoNeeded) {\n      return;\n    }\n\n    // Update edge gizmo position...\n\n    // get the two vertex positions of the edge\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    this.poly.getEdge(edgeToHighlight, a, b, loopIndex);\n\n    // copy values to edge gizmo\n    this.edgeGizmo.makeLine(a.x, a.y, b.x, b.y);\n\n    this.edgeGizmo.style = this.edgeHighlightStyle;\n\n    // Adopt lineWidth from selected polygon\n    this.edgeGizmo.style.lineWidth = this.poly.style.lineWidth;\n    this.edgeGizmo.style.isScreenSpace = this.poly.style.isScreenSpace;\n\n    if (edgeSelected) {\n      this.edgeGizmo.style.lineAlpha = 1.0;\n    } else {\n      // Just make it a bit brighter using a semitransparent white overlay\n      this.edgeGizmo.style.lineAlpha = 0.5;\n    }\n\n    this.gizmoLayer.update();\n  }\n\n  // @param {PolyIndex}\n  setSelectedEdge(polyIndex) {\n    this.selectedEdge = polyIndex;\n    this.updateEdgeGizmo();\n    this.updateEdgeGizmoHighlighting();\n  }\n\n  clearEdgeGizmos() {\n    for (let l = 0; l < this.edgeGizmos.length; l++) {\n      const gizmos = this.edgeGizmos[l];\n      for (let i = 0; i < gizmos.length; i++) {\n        gizmos[i].dtor();\n      }\n    }\n    this.edgeGizmos.length = 0;\n\n    // Clear dashed lines between start/endPoint of arcs.\n    this.arcEdgeGizmo.setPoly(null);\n  }\n\n  // Exclude currently edited polygon from snapping: The polygon shouldn't snap to itself, but rather\n  // to geometry below it.\n  snappingFilter(shape) {\n    return shape !== this.poly;\n  }\n\n  // Update edge gizmos (for edge highlighting)\n  updateAllGizmos() {\n    this.updateEdgeGizmo();\n    this.createEdgeGizmos();\n    this.updateEdgeGizmoHighlighting();\n    this.snapper.clearSnappingGizmos();\n  }\n\n  setAllGizmosEnabled(enabled) {\n    this.gizmosEnabled = enabled;\n\n    this.updateAllGizmos();\n  }\n\n  // Update selection highlighting for edge gizmos\n  updateEdgeGizmoHighlighting() {\n    if (!this.gizmosEnabled) {\n      // if gizmos are not enabled, there is nothing to highlight\n      return;\n    }\n\n    const edgeIndex = this.selectedEdge ? this.selectedEdge.vertex : -1;\n    const loopIndex = this.selectedEdge ? this.selectedEdge.loop : -1;\n\n    for (let l = 0; l < this.edgeGizmos.length; l++) {\n      const gizmos = this.edgeGizmos[l];\n      for (let i = 0; i < gizmos.length; i++) {\n        const gizmo = gizmos[i];\n        const selected = i === edgeIndex && l === loopIndex;\n        gizmo.setSelected(selected);\n      }\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/EdgeMoveTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/EditToolBase.js":
/*!*************************************************!*\
  !*** ./extensions/Edit2D/tools/EditToolBase.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EditToolBase)\n/* harmony export */ });\n/* harmony import */ var _Selection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Selection.js */ \"./extensions/Edit2D/Selection.js\");\n/* harmony import */ var _UndoStack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UndoStack.js */ \"./extensions/Edit2D/UndoStack.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n\n\n\n\n\n\nconst av = Autodesk.Viewing;\n\n\n// Utility class shared by Edit2D tools to facilitate snapping\nclass EditToolBase {\n\n  constructor(ctx) {\n\n    this.viewer = ctx.viewer;\n    this.setGlobalManager(this.viewer.globalManager);\n    this.layer = ctx.layer;\n    this.gizmoLayer = ctx.gizmoLayer;\n    this.snapper = ctx.snapper;\n    this.selection = ctx.selection;\n    this.undoStack = ctx.undoStack;\n    this.unitHandler = ctx.unitHandler;\n    this.nameSuffix = `_${ctx.toolSetName}`;\n    this.mouseTracker = ctx.mouseTracker; // needed for tracking mouse in Edit 2D\n\n    // If true, all mouse-dragging handlers just return false, so that the events are handled by LMV navigation tools instead.\n    this.ignoreDragging = false;\n\n    // This flag is used to avoid triggering handleExternalAction if we triggered an action ourselves.\n    this.ignoreActions = false;\n\n    // If another tool applies changes while this tool is active, we want to keep the tool state consistent.\n    // E.g., the UndoTool or CopyTool may be active in parallel and may modify/remove a polygon we are working on.\n    // his event listener makes sure that handleExternalAction() is called in this case so that this tool can respond.\n    this.onActionCb = (event) => {\n      if (!this.ignoreActions) {\n        this.handleExternalAction(event.action, event.isUndo);\n      }\n    };\n\n    // indicates if snapping is currently suppressed by hold modifier key\n    this.suppressSnapping = false;\n\n    this.keyMap = {\n      SnapKey: av.KeyCode.SHIFT, // Holding this key suppresses snapping\n      PanKey: av.KeyCode.SPACE // Holding space bypasses all edit tools, so that default navigation (usually panning) steps in\n    };\n\n    // When using selection, register a handler to notify about selection changed\n    if (this.selection) {\n      this.selectionCb = () => {\n\n        // Only respond if tool is activated\n        if (!this.active) {\n          return;\n        }\n\n        // Call handler if derived class defines one\n        this.onSelectionChanged && this.onSelectionChanged();\n      };\n\n      this.selection.addEventListener(_Selection_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.SELECTION_CHANGED, this.selectionCb);\n    }\n\n    this.active = false;\n\n    // Track last mouse position in canvas coords. Note that derived classes must call\n    // the base class mouse handlers to keep this value valid.\n    this.canvasPos = new THREE.Vector2();\n\n    // Tracks which gizmo is under mouse\n    this.gizmoManager = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_2__.GizmoManager();\n\n    // Track which keys are currently hold down\n    this.keyState = {\n      ctrl: false,\n      shift: false,\n      alt: false\n    };\n  }\n\n  getSnapPosition(canvasX, canvasY) {\n    const useSnapper = this.snapper && !this.suppressSnapping;\n    if (useSnapper) {\n      return this.snapper.getSnapPosition(canvasX, canvasY, (s) => this.snappingFilter(s));\n    } else {\n      // Make sure that we don't keep outdated snapping gizmos\n      this.snapper.clearSnappingGizmos();\n\n      // Just convert canvas pos to layer pos\n      return this.layer.canvasToLayer(canvasX, canvasY);\n    }\n  }\n\n  dtor() {\n    if (this.selectionCb) {\n      this.selection.removeEventListener(_Selection_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.SELECTION_CHANGED, this.selectionCb);\n    }\n  }\n\n  getNames() {\n    return [this.getName()];\n  }\n\n  handleKeyDown(event, keyCode) {\n\n    this.keyState[keyCode] = true;\n\n    // Hold key to suppress snapping\n    if (keyCode === this.keyMap.SnapKey && !this.suppressSnapping) {\n      this.suppressSnapping = true;\n\n      // Let tool instantly update hover-gizmos\n      this.onSnappingToggled && this.onSnappingToggled(this.canvasPos.x, this.canvasPos.y);\n    }\n\n    // While edit tools are active the BACKSPACE key should not make the browser go back in history, otherwise\n    // the customer might lose his drawings when he's in an editing session, does a invalid selection and\n    // hits backspace.\n    if (keyCode === av.KeyCode.BACKSPACE) {\n      return true;\n    }\n\n    if (keyCode === this.keyMap.PanKey) {\n      this.ignoreDragging = true;\n    }\n  }\n\n  handleKeyUp(event, keyCode) {\n\n    this.keyState[keyCode] = false;\n\n    if (keyCode === this.keyMap.SnapKey && this.suppressSnapping) {\n      this.suppressSnapping = false;\n\n      // Let tool instantly update hover-gizmos\n      this.onSnappingToggled && this.onSnappingToggled(this.canvasPos.x, this.canvasPos.y);\n    }\n\n    if (keyCode === this.keyMap.PanKey) {\n      this.ignoreDragging = false;\n    }\n  }\n\n  // Invoked whenever another tool triggered\n  handleExternalAction(action, isUndo) {}\n\n  // Run an action without triggering handleExternalAction\n  runAction(action) {\n    this.ignoreActions = true;\n    this.undoStack.run(action);\n    this.ignoreActions = false;\n  }\n\n  activate() {\n    this.active = true;\n    this.undoStack.addEventListener(_UndoStack_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].AFTER_ACTION, this.onActionCb);\n  }\n\n  deactivate() {\n    this.active = false;\n    this.undoStack.removeEventListener(_UndoStack_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].AFTER_ACTION, this.onActionCb);\n\n    // Make sure we don't keep outdated snapping indicators\n    this.snapper && this.snapper.clearSnappingGizmos();\n  }\n\n  register() {}\n\n  // Maps a key event to a function key in the key-map.\n  mapKey(event, keyMap) {\n\n    for (let key in keyMap) {\n      const assigned = keyMap[key];\n\n      // Skip disabled key commands\n      if (assigned === null) {\n        continue;\n      }\n\n      // If a single key is assigned to this function and it matches, return the function key\n      if (event.keyCode == assigned) {\n        return key;\n      }\n\n      // If multiple keys are assigned, check if one matches.\n      if (Array.isArray(assigned) && assigned.includes(event.keyCode)) {\n        return key;\n      }\n\n      // If it is an object, it may define modifiers and a custom filter\n      if (typeof assigned === 'object') {\n        const ctrl = assigned.ctrlKey === undefined ? true : assigned.ctrlKey === event.ctrlKey;\n        const shift = assigned.shiftKey === undefined ? true : assigned.shiftKey === event.shiftKey;\n        const alt = assigned.altKey === undefined ? true : assigned.altKey === event.altKey;\n        const meta = assigned.meta === undefined ? true : assigned.metaKey === event.metaKey;\n\n        // return true if code and all (assigned) modifiers match\n        const match = assigned.keyCode === event.keyCode && ctrl && shift && alt && meta;\n        if (match) {\n          return key;\n        }\n      }\n\n      // Allow generic key-handler function\n      if (typeof assigned === 'function' && assigned(event)) {\n        return key;\n      }\n    }\n    // event does not match any assigned keyCode\n    return null;\n  }\n\n  // By default, we consider all EditShapes for snapping\n  snappingFilter() {\n    return true;\n  }\n\n  // pass mouse changes to method provided to extension\n  trackMouseHook(event) {\n    if (this.mouseTracker) {\n      const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n      this.mouseTracker.trackMouse(event, p);\n    }\n  }\n\n  // Remember last mouse position\n  trackMousePos(e) {\n    this.trackMouseHook(e);\n    this.canvasPos.set(e.canvasX, e.canvasY);\n    this.gizmoManager.update(e);\n  }\n\n  handleMouseMove(e) {this.trackMousePos(e);}\n  handleSingleClick(e) {this.trackMousePos(e);}\n  handleDoubleClick(e) {this.trackMousePos(e);}\n  handleButtonUp(e) {this.trackMousePos(e);}\n  handleButtonDown(e) {this.trackMousePos(e);}\n}\n\nav.GlobalManagerMixin.call(EditToolBase.prototype);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/EditToolBase.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/InsertSymbolTool.js":
/*!*****************************************************!*\
  !*** ./extensions/Edit2D/tools/InsertSymbolTool.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertSymbolTool)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _EditToolBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditToolBase */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n\n\n\n\nconst InsertSymbolToolName = \"Edit2_InsertSymbolTool\";\n\nclass InsertSymbolTool extends _EditToolBase__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n  constructor(ctx) {\n    super(ctx);\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    this.symbol = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Circle(0, 0,\n    0.2,\n    new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style({\n      fillAlpha: 1.0,\n      lineWidth: 0.01,\n      fillColor: 'rgb(255, 255, 0)'\n    }));\n  }\n\n  getName() {\n    return InsertSymbolToolName + this.nameSuffix;\n  }\n\n  activate() {}\n  deactivate() {}\n  register() {}\n\n  setSymbol(symbol) {\n    this.symbol = symbol;\n  }\n\n  handleMouseMove(event) {\n  }\n\n  handleSingleClick(event) {\n\n    const res = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    let symbol = this.symbol.clone();\n    symbol.move(res.x, res.y);\n\n    this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.AddShape(this.layer, symbol));\n\n    this.dispatchEvent({ type: InsertSymbolTool.SYMBOL_INSERTED, symbol: symbol });\n\n    return true;\n  }\n\n  handleDoubleClick( /*event , button */) {\n    return true;\n  }\n\n  getCursor() {\n    return 'crosshair';\n  }\n}\n\nInsertSymbolTool.SYMBOL_INSERTED = \"symbolInserted\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC90b29scy9JbnNlcnRTeW1ib2xUb29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUQ7QUFDVDtBQUNFOztBQUUxQyxNQUFNSSxvQkFBb0IsR0FBRyx3QkFBd0I7O0FBRXRDLE1BQU1DLGdCQUFnQixTQUFTRixxREFBWSxDQUFDOztFQUV2REcsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2IsS0FBSyxDQUFDQSxHQUFHLENBQUM7O0lBRVZDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQzs7SUFFdEQsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSVosa0RBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN6QixHQUFHO0lBQ0gsSUFBSUQsaURBQUssQ0FBQztNQUNOYyxTQUFTLEVBQUUsR0FBRztNQUNkQyxTQUFTLEVBQUUsSUFBSTtNQUNmQyxTQUFTLEVBQUU7SUFDZixDQUFDLENBQUMsQ0FBQztFQUNYOztFQUVBQyxPQUFPQSxDQUFBLEVBQUc7SUFDTixPQUFPYixvQkFBb0IsR0FBRyxJQUFJLENBQUNjLFVBQVU7RUFDakQ7O0VBRUFDLFFBQVFBLENBQUEsRUFBRyxDQUFDO0VBQ1pDLFVBQVVBLENBQUEsRUFBRyxDQUFDO0VBQ2RDLFFBQVFBLENBQUEsRUFBRyxDQUFDOztFQUVaQyxTQUFTQSxDQUFDVCxNQUFNLEVBQUU7SUFDZCxJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtFQUN4Qjs7RUFFQVUsZUFBZUEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3ZCOztFQUVBQyxpQkFBaUJBLENBQUNELEtBQUssRUFBRTs7SUFFckIsTUFBTUUsR0FBRyxHQUFHLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxhQUFhLENBQUNKLEtBQUssQ0FBQ0ssT0FBTyxFQUFFTCxLQUFLLENBQUNNLE9BQU8sQ0FBQztJQUNsRSxJQUFJakIsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDa0IsS0FBSyxDQUFDLENBQUM7SUFDaENsQixNQUFNLENBQUNtQixJQUFJLENBQUNOLEdBQUcsQ0FBQ08sQ0FBQyxFQUFFUCxHQUFHLENBQUNRLENBQUMsQ0FBQzs7SUFFekIsSUFBSSxDQUFDQyxTQUFTLENBQUNDLEdBQUcsQ0FBQyxJQUFJbEMsZ0RBQU8sQ0FBQ21DLFFBQVEsQ0FBQyxJQUFJLENBQUNWLEtBQUssRUFBRWQsTUFBTSxDQUFDLENBQUM7O0lBRTVELElBQUksQ0FBQ3lCLGFBQWEsQ0FBQyxFQUFDQyxJQUFJLEVBQUVsQyxnQkFBZ0IsQ0FBQ21DLGVBQWUsRUFBRTNCLE1BQU0sRUFBRUEsTUFBTSxFQUFDLENBQUM7O0lBRTVFLE9BQU8sSUFBSTtFQUNmOztFQUVBNEIsaUJBQWlCQSxDQUFBLENBQUMscUJBQXFCO0lBQ25DLE9BQU8sSUFBSTtFQUNmOztFQUVBQyxTQUFTQSxDQUFBLEVBQUc7SUFDUixPQUFPLFdBQVc7RUFDdEI7QUFDSjs7QUFFQXJDLGdCQUFnQixDQUFDbUMsZUFBZSxHQUFHLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQyRC90b29scy9JbnNlcnRTeW1ib2xUb29sLmpzPzE3ODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R5bGUsIENpcmNsZSB9IGZyb20gJy4uL0VkaXRTaGFwZXMuanMnO1xuaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJy4uL0FjdGlvbnMuanMnO1xuaW1wb3J0IEVkaXRUb29sQmFzZSBmcm9tICcuL0VkaXRUb29sQmFzZSc7XG5cbmNvbnN0IEluc2VydFN5bWJvbFRvb2xOYW1lID0gXCJFZGl0Ml9JbnNlcnRTeW1ib2xUb29sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc2VydFN5bWJvbFRvb2wgZXh0ZW5kcyBFZGl0VG9vbEJhc2Uge1xuXG4gICAgY29uc3RydWN0b3IoY3R4KSB7XG4gICAgICAgIHN1cGVyKGN0eCk7XG5cbiAgICAgICAgQXV0b2Rlc2suVmlld2luZy5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3ltYm9sID0gbmV3IENpcmNsZSgwLCAwLFxuICAgICAgICAgICAgMC4yLFxuICAgICAgICAgICAgbmV3IFN0eWxlKHtcbiAgICAgICAgICAgICAgICBmaWxsQWxwaGE6IDEuMCxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDAuMDEsXG4gICAgICAgICAgICAgICAgZmlsbENvbG9yOiAncmdiKDI1NSwgMjU1LCAwKScsXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIEluc2VydFN5bWJvbFRvb2xOYW1lICsgdGhpcy5uYW1lU3VmZml4O1xuICAgIH1cblxuICAgIGFjdGl2YXRlKCkge31cbiAgICBkZWFjdGl2YXRlKCkge31cbiAgICByZWdpc3RlcigpIHt9XG5cbiAgICBzZXRTeW1ib2woc3ltYm9sKSB7XG4gICAgICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIH1cblxuICAgIGhhbmRsZU1vdXNlTW92ZShldmVudCkge1xuICAgIH1cblxuICAgIGhhbmRsZVNpbmdsZUNsaWNrKGV2ZW50KSB7XG5cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5sYXllci5jYW52YXNUb0xheWVyKGV2ZW50LmNhbnZhc1gsIGV2ZW50LmNhbnZhc1kpO1xuICAgICAgICBsZXQgc3ltYm9sID0gdGhpcy5zeW1ib2wuY2xvbmUoKTtcbiAgICAgICAgc3ltYm9sLm1vdmUocmVzLngsIHJlcy55KTtcblxuICAgICAgICB0aGlzLnVuZG9TdGFjay5ydW4obmV3IEFjdGlvbnMuQWRkU2hhcGUodGhpcy5sYXllciwgc3ltYm9sKSk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOiBJbnNlcnRTeW1ib2xUb29sLlNZTUJPTF9JTlNFUlRFRCwgc3ltYm9sOiBzeW1ib2x9KTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBoYW5kbGVEb3VibGVDbGljaygvKmV2ZW50ICwgYnV0dG9uICovKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGdldEN1cnNvcigpIHtcbiAgICAgICAgcmV0dXJuICdjcm9zc2hhaXInO1xuICAgIH1cbn1cblxuSW5zZXJ0U3ltYm9sVG9vbC5TWU1CT0xfSU5TRVJURUQgPSBcInN5bWJvbEluc2VydGVkXCI7XG4iXSwibmFtZXMiOlsiU3R5bGUiLCJDaXJjbGUiLCJBY3Rpb25zIiwiRWRpdFRvb2xCYXNlIiwiSW5zZXJ0U3ltYm9sVG9vbE5hbWUiLCJJbnNlcnRTeW1ib2xUb29sIiwiY29uc3RydWN0b3IiLCJjdHgiLCJBdXRvZGVzayIsIlZpZXdpbmciLCJFdmVudERpc3BhdGNoZXIiLCJwcm90b3R5cGUiLCJhcHBseSIsInN5bWJvbCIsImZpbGxBbHBoYSIsImxpbmVXaWR0aCIsImZpbGxDb2xvciIsImdldE5hbWUiLCJuYW1lU3VmZml4IiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwicmVnaXN0ZXIiLCJzZXRTeW1ib2wiLCJoYW5kbGVNb3VzZU1vdmUiLCJldmVudCIsImhhbmRsZVNpbmdsZUNsaWNrIiwicmVzIiwibGF5ZXIiLCJjYW52YXNUb0xheWVyIiwiY2FudmFzWCIsImNhbnZhc1kiLCJjbG9uZSIsIm1vdmUiLCJ4IiwieSIsInVuZG9TdGFjayIsInJ1biIsIkFkZFNoYXBlIiwiZGlzcGF0Y2hFdmVudCIsInR5cGUiLCJTWU1CT0xfSU5TRVJURUQiLCJoYW5kbGVEb3VibGVDbGljayIsImdldEN1cnNvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/InsertSymbolTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/LineTool.js":
/*!*********************************************!*\
  !*** ./extensions/Edit2D/tools/LineTool.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LineTool)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EditShapes */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n/* harmony import */ var _CanvasGizmo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../CanvasGizmo */ \"./extensions/Edit2D/CanvasGizmo.js\");\n\n\n\n\n\n\n\n\nconst LineToolName = \"Edit2_LineTool\";\n\nconst av = Autodesk.Viewing;\n\n// Draws lines with single drag\nclass LineTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n\n  constructor(ctx) {let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style();\n    super(ctx);\n\n    this.style = style;\n\n    // New polyline created by dragging\n    this.line = null;\n\n    // Start/Endpoint of the line being dragged\n    this.startPoint = new THREE.Vector2();\n    this.endPoint = new THREE.Vector2();\n\n    // Indicates that we interrupted dragging with Esc. In this case, we still consume the mouse-up\n    // event to avoid inconsistencies in other tool.\n    this.dragCanceled = false;\n\n    // Create length label. Default hidden - showing is optional.\n    this.lengthLabel = new _CanvasGizmo__WEBPACK_IMPORTED_MODULE_4__.LengthLabel(null, this.layer, ctx.unitHandler, false);\n\n    // If true, create Paths instead of Polygons\n    this.enableArcs = true;\n  }\n\n  // Enable the length labels (public API)\n  setLengthLabelVisible(visible) {\n    this.lengthLabel.setVisible(visible);\n  }\n\n  getName() {\n    return LineToolName + this.nameSuffix;\n  }\n\n  activate() {}\n  deactivate() {}\n  register() {}\n\n  handleButtonDown(event, button) {\n\n    // Only respond to left button\n    if (button != 0) {\n      return;\n    }\n\n    const p = this.getSnapPosition(event.canvasX, event.canvasY);\n    this.startDrag(p);\n    return true;\n  }\n\n  handleButtonUp(event, button) {\n\n    // Only respond to left button\n    if (button != 0) {\n      return;\n    }\n\n    // Make sure that we consider latest end-coords\n    this.handleMouseMove(event);\n\n    // If drag has been interrupted, consider the endDrag() as handled\n    if (this.dragCanceled) {\n      this.dragCanceled = false;\n      return true;\n    }\n\n    return this.endDrag();\n  }\n\n  handleMouseMove(event) {\n\n    // Get snapping position. Note that this even makes sense when not dragging: In this case, we\n    // just do it to update the snapping indicator.\n    const p = this.getSnapPosition(event.canvasX, event.canvasY);\n\n    if (!this.line) {\n      return false;\n    }\n\n    this.moveDrag(p, event.shiftKey);\n\n    return true;\n  }\n\n  // Start dragging a shape\n  //  @param {Shape}   shape\n  //  @param {Vector2} startPos - in layer coords\n  startDrag(startPos) {\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n    const points = [startPos.clone(), startPos.clone()];\n    const style = this.style.clone();\n\n    this.line = this.enableArcs ? new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolylinePath(points, style) : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline(points, style);\n    this.startPoint.copy(startPos);\n    this.endPoint.copy(startPos);\n\n    this.gizmoLayer.addShape(this.line);\n  }\n\n  updateLine() {\n\n    if (!this.isDragging()) {\n      return;\n    }\n\n    this.line.updatePoint(1, this.endPoint.x, this.endPoint.y);\n    this.gizmoLayer.update();\n\n    this.lengthLabel.setShape(this.line);\n  }\n\n  // p is in layer coords\n  moveDrag(p, forceQuad) {\n\n    // update rectangle\n    this.endPoint.copy(p);\n    this.updateLine();\n  }\n\n  endDrag() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (!this.line) {\n      return false;\n    }\n\n    // Remove temporary gizmo shape\n    this.gizmoLayer.removeShape(this.line);\n\n    // Add line shape if valid\n    const lineValid = !_Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.edgeIsDegenerated(this.startPoint, this.endPoint);\n    if (lineValid) {\n      this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.AddShape(this.layer, this.line));\n    }\n\n    this.line = null;\n\n    this.lengthLabel.setShape(null);\n\n    return true;\n  }\n\n  cancelDrag() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (this.line) {\n      // Remove temporary gizmo shape\n      this.gizmoLayer.removeShape(this.line);\n      this.line = null;\n\n      this.dragCanceled = true;\n\n      this.lengthLabel.setShape(null);\n    }\n  }\n\n  isDragging() {\n    return Boolean(this.line);\n  }\n\n  handleKeyDown(event, keyCode) {\n    // Update shape when toggling between rect and quad mode\n    if (keyCode == av.KeyCode.SHIFT) {\n      this.updateLine(true);\n    }\n  }\n\n  handleKeyUp(event, keyCode) {\n    // Update shape when toggling between rect and quad mode\n    if (keyCode == av.KeyCode.SHIFT) {\n      this.updateLine(false);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/LineTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/MoveTool.js":
/*!*********************************************!*\
  !*** ./extensions/Edit2D/tools/MoveTool.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MoveTool)\n/* harmony export */ });\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n\n\n\nconst MoveToolName = \"Edit2_MoveTool\";\n\nconst av = Autodesk.Viewing;\n\nclass MoveTool {\n\n  constructor(ctx) {\n    this.layer = ctx.layer;\n    this.gizmoLayer = ctx.gizmoLayer;\n    this.selection = ctx.selection;\n    this.undoStack = ctx.undoStack;\n    this.nameSuffix = `_${ctx.toolSetName}`;\n\n    // Only set during dragging\n    this.shapes = null; // Shape[]\n\n    // Optioanl: Only move a single loop. Only supported if only a single shape is selected.\n    this.loopIndex = -1;\n\n    // drag-start position in layer coords\n    this.dragStartPoint = new THREE.Vector2();\n\n    // backup original shapes on drag-start as long as we are modifying it on-hover\n    this.backupShapes = null; // Shape[]\n\n    this.keyMap = {\n      CancelEdit: av.KeyCode.ESCAPE\n    };\n\n    // Remember last mouse-pos on mouse-move events\n    this.lastMousePos = new THREE.Vector2(); // in layer coords\n\n    this.mouseTracker = ctx.mouseTracker;\n\n    this.moveFilters = [this.defaultMoveFilter];\n  }\n\n  addMoveFilter(filter) {\n    this.moveFilters.push(filter);\n  }\n\n  removeMoveFilter(filter) {\n    let index = this.moveFilters.indexOf(filter);\n    if (index == -1) {\n      return false;\n    }\n    this.moveFilters.splice(index, 1);\n    return true;\n  }\n\n  defaultMoveFilter(shapes) {\n    return shapes.every((s) => s.movable);\n  }\n\n  getNames() {\n    return [this.getName()];\n  }\n\n  getName() {\n    return MoveToolName + this.nameSuffix;\n  }\n\n  activate() {}\n  deactivate() {}\n  register() {}\n\n  handleSingleClick( /*event , button */) {\n    const shapesToMove = this.selection.getSelectedShapes();\n    return shapesToMove && shapesToMove.length > 0;\n  }\n\n  handleDoubleClick( /*event , button */) {\n    const shapesToMove = this.selection.getSelectedShapes();\n    return shapesToMove && shapesToMove.length > 0;\n  }\n\n  handleButtonDown(event, button) {\n    // Only respond to left button\n    if (button !== 0) {\n      return;\n    }\n\n    const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    const hitShape = this.layer.hitTest(p.x, p.y);\n\n    if (!hitShape) {\n      this.selection.clear();\n      return false;\n    }\n\n    // If shape was not selected before, select it\n    const wasSelected = hitShape && this.selection.shapeIsSelected(hitShape);\n    if (!wasSelected) {\n      this.selection.selectOnly(hitShape);\n    }\n\n    // Move all selected shapes\n    const shapesToMove = this.selection.getSelectedShapes();\n    if (shapesToMove.length > 0) {\n      this.startDrag(shapesToMove, p);\n    }\n\n    return true;\n  }\n\n  // Start dragging one or more shapes\n  //  @param {Shape[]} shapes\n  //  @param {Vector2} startPos - in layer coords\n  startDrag(shapes, startPos) {let loopIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    const allShapesCanBeMoved = this.moveFilters.every((m) => m(shapes));\n    if (!allShapesCanBeMoved) {\n      // if any of the selected shapes cannot be moved, don't allow the group to be moved.\n      return false;\n    }\n\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    this.shapes = shapes;\n    this.loopIndex = loopIndex;\n    this.dragStartPoint.copy(startPos);\n    this.backupShapes = shapes.map((s) => s.clone());\n  }\n\n  // p is in layer coords\n  moveDrag(p) {\n    const dx = p.x - this.dragStartPoint.x;\n    const dy = p.y - this.dragStartPoint.y;\n\n    // Apply this offset to shape. We always start with the original shape as a reference\n    // to avoid accumulating delta inaccuracies.\n    this.shapes.forEach((shape, i) => {\n      shape.copy(this.backupShapes[i]);\n\n      if (this.loopIndex === -1) {\n        // Default: Move whole shape(s)\n        shape.move(dx, dy);\n      } else {\n        // Only move single loop\n        shape.moveLoop(dx, dy, this.loopIndex);\n      }\n    });\n    this.layer.update();\n    this.gizmoLayer.update();\n  }\n\n  // Clean up data hold during a drag interaction\n  resetDragging() {\n    this.shapes = null;\n    this.loopIndex = -1;\n    this.backupShapes = null;\n  }\n\n  endDrag(p) {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    // No drag active\n    if (!this.shapes) {\n      return;\n    }\n\n    // Revert any temporary modifications done during mouse move\n    this.shapes.forEach((shape, i) => shape.copy(this.backupShapes[i]));\n\n    // Apply move operation\n    const dx = p.x - this.dragStartPoint.x;\n    const dy = p.y - this.dragStartPoint.y;\n\n    if (this.loopIndex === -1) {\n      this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveShapes(this.layer, this.shapes, dx, dy));\n    } else {\n      this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveLoop(this.layer, this.shapes[0], this.loopIndex, dx, dy));\n    }\n\n    this.shapes = null;\n    this.loopIndex = -1;\n    return true;\n  }\n\n  cancelDrag() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (this.isDragging()) {\n\n      // Revert shape o state when dragging was started\n      this.shapes.forEach((shape, i) => shape.copy(this.backupShapes[i]));\n      this.layer.update();\n      this.gizmoLayer.update();\n\n      this.resetDragging();\n\n      this.startedDragging = true;\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isDragging() {\n    return Boolean(this.shapes);\n  }\n\n  handleMouseMove(event) {\n\n    // Get and store latest mouse position\n    const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    this.lastMousePos.copy(p);\n\n    if (!this.shapes) {\n      return false;\n    }\n\n    // get delta between last and current position\n    this.moveDrag(p);\n\n    return true;\n  }\n\n  handleButtonUp(event, button) {\n    // Only respond to left button\n    if (button !== 0) {\n      return;\n    }\n\n    const wasDragging = this.startedDragging;\n    this.startedDragging = false;\n\n    const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    return this.endDrag(p) || wasDragging;\n  }\n\n  handleKeyDown(event, keyCode) {\n    if (keyCode === this.keyMap.CancelEdit) {\n      return this.cancelDrag();\n    }\n\n    return;\n  }\n\n  // Display move cursor if a shape is under mouse or if we are dragging\n  getCursor() {\n    // this.shape is defined when we are dragging\n    if (this.shapes) {\n      return 'move';\n    }\n\n    // Show move cursor if a shape is under mouse\n    const shapeAtMouse = this.layer.hitTest(this.lastMousePos.x, this.lastMousePos.y);\n\n    if (shapeAtMouse) {\n      const canBeMoved = this.moveFilters.every((m) => m([shapeAtMouse]));\n      if (canBeMoved) {\n        // if any of the selected shapes cannot be moved, don't allow the group to be moved.\n        return 'move';\n      }\n    }\n    return undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/MoveTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/PolygonEditTool.js":
/*!****************************************************!*\
  !*** ./extensions/Edit2D/tools/PolygonEditTool.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PolygonEditTool)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _TangentGizmo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../TangentGizmo.js */ \"./extensions/Edit2D/TangentGizmo.js\");\n/* harmony import */ var _EllipseArcGizmo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../EllipseArcGizmo.js */ \"./extensions/Edit2D/EllipseArcGizmo.js\");\n/* harmony import */ var _MoveTool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MoveTool.js */ \"./extensions/Edit2D/tools/MoveTool.js\");\n/* harmony import */ var _VertexMoveTool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./VertexMoveTool.js */ \"./extensions/Edit2D/tools/VertexMoveTool.js\");\n/* harmony import */ var _EdgeMoveTool_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EdgeMoveTool.js */ \"./extensions/Edit2D/tools/EdgeMoveTool.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst PolygonEditToolName = 'Edit2_PolygonEditTool';\n\nconst av = Autodesk.Viewing;\n\n// Allow to pick an edge within\nconst EdgeSelectTolerance = 17;\n\nclass PolygonEditTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\n\n  constructor(ctx) {\n    super(ctx);\n\n    this.moveTool = new _MoveTool_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](ctx);\n    this.edgeMoveTool = new _EdgeMoveTool_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](ctx);\n    this.vertexMoveTool = new _VertexMoveTool_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](ctx);\n\n    // Only set during dragging\n    this.poly = null;\n\n    this.keyMap.DeleteSelectedVertex = av.KeyCode.BACKSPACE;\n    this.keyMap.CancelEdit = av.KeyCode.ESCAPE;\n    this.keyMap.ChangeToArc = av.KeyCode.a; // Change selected edge to arc\n    this.keyMap.ChangeToLine = av.KeyCode.l; // Change selected edge to line\n    this.keyMap.ChangeToEllipse = av.KeyCode.e; // Change selected edge to ellipse arc\n\n    // Track mouse position in layer-coords\n    this.mousePos = new THREE.Vector2();\n\n    // Create area label. Default hidden - showing is optional.\n    this.areaLabel = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.AreaLabel(null, this.layer, ctx.unitHandler, false);\n\n    // {TangentGizmo[]} Array of TangentGizmos for BezierArcs\n    this.tangentGizmos = [];\n\n    this.tangentGizmosEnabled = true;\n    this.ellipseArcGizmosEnabled = true;\n\n    // If true, we apply hover-highlight on shape under mouse.\n    this.hoverEnabled = true;\n\n    // If true, we allow changing edge type to ellipse arcs.\n    this.enableEllipseArcs = false;\n\n    // Ellipse-arc gizmo. Only shown if an ellipse-edge is selected\n    this.ellipseArcGizmo = new _EllipseArcGizmo_js__WEBPACK_IMPORTED_MODULE_5__.EllipseArcGizmo(ctx.layer, this.gizmoManager, ctx.undoStack, false);\n\n    // Used in mouseDown handler: Indicates that mouse-down has been consumed by this tool, so that\n    // other LMV tools shouldn't handle the singleClick either. This avoids unwanted LMV object selection\n    // after ctrl-click on Edit2D shapes.\n    this.clickConsumed = false;\n  }\n\n  setTangentGizmosEnabled(enabled) {\n    this.tangentGizmosEnabled = enabled;\n    if (enabled) {\n      this.updateTangentGizmos();\n    } else {\n      this.clearTangentGizmos();\n    }\n  }\n\n  setEllipseArcGizmoEnabled(enabled) {\n    this.ellipseArcGizmosEnabled = enabled;\n    this.updateEllipseArcGizmo();\n  }\n\n  setAllGizmosEnabled(enabled) {\n    this.setTangentGizmosEnabled(enabled);\n    this.setEllipseArcGizmoEnabled(enabled);\n    this.vertexMoveTool.setAllGizmosEnabled(enabled);\n    this.edgeMoveTool.setAllGizmosEnabled(enabled);\n  }\n\n  setHoverEnabled(enabled) {\n\n    // On disable, make sure that we don't leave any highlight behind\n    if (this.hoverEnabled && !enabled) {\n      this.selection.setHovered(null);\n    }\n\n    this.hoverEnabled = enabled;\n  }\n\n  // Enable the area labels (public API)\n  setAreaLabelVisible(visible) {\n    this.areaLabel.setVisible(visible);\n  }\n\n  // Enable the length labels (public API)\n  setLengthLabelVisible(visible) {\n    this.edgeMoveTool.setLengthLabelVisible(visible);\n  }\n\n  getName() {\n    return PolygonEditToolName + this.nameSuffix;\n  }\n\n  deactivate() {\n    super.deactivate();\n    this.reset();\n  }\n\n  // Update vertex-gizmos, and tangent gizmos.\n  updateAllGizmos() {\n    this.updateTangentGizmos();\n    this.updateEllipseArcGizmo();\n    this.updateMouseOverHighlights();\n    this.vertexMoveTool.updateAllGizmos();\n    this.edgeMoveTool.updateAllGizmos();\n  }\n\n  // Finishes editing of a previous polygon\n  reset() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    this.poly = null;\n\n    this.vertexMoveTool.reset();\n    this.edgeMoveTool.reset();\n\n    // Clear any gizmos from previous polygon\n    this.updateAllGizmos();\n\n    // Cleanup area and length labels\n    this.areaLabel.setShape(null);\n\n    this.snapper.stopAngleSnapping();\n  }\n\n  // Selects a new polygon / polyline for editing\n  setEditPoly(poly) {\n\n    this.reset();\n\n    if (poly) {\n      this.poly = poly;\n      this.updateAllGizmos();\n    }\n\n    // Sync label with polygon or polyline. If this.poly is null, it will be hidden\n    const polygon = poly && poly.isPolygon() ? poly : null;\n    this.areaLabel.setShape(polygon);\n  }\n\n  insertPoint(polyIndex, p) {\n\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.AddVertex(this.layer, this.poly, polyIndex, p));\n\n    // removeupdate edge gizmos and tangent gizmos\n    this.updateAllGizmos();\n\n    // Display polygon change and new gizmo\n    this.layer.update();\n  }\n\n  // Remove loop (including any other loop it contains)\n  removeLoop(loopIndex) {\n\n    // Collect all loops to remove\n    const loopsToRemove = this.poly.getChildLoops(loopIndex);\n    loopsToRemove.push(loopIndex);\n\n    const action = new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.RemoveLoops(this.layer, this.poly, loopsToRemove);\n    this.runAction(action);\n\n    // Reset vertex/edge selection. We cannot keep it because the meaning of loopIndices has changed.\n    this.vertexMoveTool.setSelectedVertex(null);\n    this.edgeMoveTool.setSelectedEdge(null);\n\n    this.updateAllGizmos();\n    this.layer.update();\n  }\n\n  removePoint(polyIndex) {\n\n    const { loop } = polyIndex;\n\n    // If removing a vertex would make the loop degenerate, remove it completely\n    const minVerts = this.poly.isPolygon() ? 3 : 2;\n    if (this.poly.getVertexCount(loop) <= minVerts) {\n      this.removeLoop(loop);\n      return;\n    }\n\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.RemoveVertex(this.layer, this.poly, polyIndex));\n\n    // update vertex gizmos\n    this.vertexMoveTool.updateVertexGizmos();\n\n    // update edge gizmos and tangent gizmos\n    this.updateAllGizmos();\n\n    // Make sure that this vertex is not selected anymore\n    if (polyIndex.equals(this.vertexMoveTool.selectedVertex)) {\n      this.vertexMoveTool.setSelectedVertex(null);\n    }\n\n    // Unselect edge if edgeIndex got invalid\n    this.edgeMoveTool.setSelectedEdge(null);\n\n    this.layer.update();\n  }\n\n  isSingleLine() {\n    return this.poly && this.poly.loopCount === 1 && this.poly.getVertexCount(0) === 2;\n  }\n\n  // If the given mousePos (in layerCoords) is located close to an edge (not edge gizmo),\n  // the edge index is returned, otherwise null.\n  //  @returns {PolyIndex|null}\n  findEdgeUnderMouse(pos) {\n    if (!this.poly) {\n      return null;\n    }\n\n    const precision = EdgeSelectTolerance * this.layer.getUnitsPerPixel();\n    for (let l = 0; l < this.poly.loopCount; l++) {\n      const index = this.poly.findEdgeIndex(pos, precision, l);\n      if (index !== -1) {\n        return new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: index, loop: l });\n      }\n    }\n    return null;\n  }\n\n  // Checks if a point p can be inserted to split the given edge. If so, it returns the projected\n  // position that is located exactly on edge to be split.\n  //\n  //  @param {Vector2} p           - pos in layer coords - usually close to given edge.\n  //  @param {PolyIndex} polyIndex - index of the edge to be split by this vertex\n  //  @returns {Vector2|null} Adjusted position where the new point will be added.\n  getNewVertexPosition(p, polyIndex) {\n\n    if (!this.poly || !polyIndex) {\n      return null;\n    }\n\n    const edgeIndex = polyIndex.vertex;\n    const loopIndex = polyIndex.loop;\n    if (!this.poly.edgeIndexValid(edgeIndex, loopIndex)) {\n      return null;\n    }\n\n    // get edge\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    this.poly.getEdge(edgeIndex, a, b, loopIndex);\n\n    // get edge direction\n    const edgeDir = _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.getEdgeDirection(a, b);\n\n    // compute projection of p to the line spanned by the edge\n    const newPos = p.clone();\n    _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.projectToLine(newPos, a, edgeDir);\n\n    // Reject position if the projection is outside the segment\n    if (!_Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.isPointOnEdge(newPos, a, b, 0.0001)) {\n      return null;\n    }\n\n    // Return position where to insert the new vertex\n    return newPos;\n  }\n\n  handleButtonDown(event, button) {\n    // Support suppressing mouse buttons by holding a key\n    if (this.ignoreDragging) {\n      return false;\n    }\n\n    super.handleButtonDown(event, button);\n\n    // Only respond to left mouse button.\n    if (!button == 0) {\n      return false;\n    }\n\n    const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    this.mousePos.copy(p);\n\n    if (this.vertexMoveTool.handleButtonDown(event, button)) {\n      this.edgeMoveTool.setSelectedEdge(null);\n      return true;\n    }\n\n    // Note: In LMV, ToolController handles command key and ctrl key in the same way.\n    //       For consistency, we do the same here.\n    const ctrlHold = event.ctrlKey || event.metaKey;\n\n    // Handle Vertex-Add: Check if we hold ctrl and hit an edge\n    let newVertex = -1;\n    if (ctrlHold) {\n      // Is mouse close to an edge and can be projected onto that edge?\n      const edgeIndex = this.findEdgeUnderMouse(this.mousePos);\n      const newVertexPos = this.getNewVertexPosition(this.mousePos, edgeIndex);\n      if (newVertexPos) {\n        // We don't insert exactly at the mouse position. Instead, new vertices\n        // are always located exactly on the edge being split. Therefore, newVertexPos is\n        // usually slightly different from mousePos.\n\n        // insert new vertex after edge starting point\n        newVertex = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: edgeIndex.vertex + 1, loop: edgeIndex.loop });\n        this.insertPoint(newVertex, newVertexPos);\n\n        // Allow to drag the new vertex immediately\n        if (this.mouseTracker) {\n          this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.ButtonDown);\n        }\n        this.vertexMoveTool.startDragVertex(event, newVertex);\n\n        return true;\n      }\n    }\n\n    // Handle dragging of TangentGizmo control points for Bezier arcs.\n    for (let i = 0; i < this.tangentGizmos.length; i++) {\n      const gizmo = this.tangentGizmos[i];\n      if (gizmo.onButtonDown(event.canvasX, event.canvasY)) {\n        // We started dragging of a Bezier control point\n        return true;\n      }\n    }\n\n    // Handle dragging of EllipseArc gizmo\n    if (this.ellipseArcGizmo.startDrag(event.canvasX, event.canvasY)) {\n      if (this.mouseTracker) {\n        this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.ButtonDown);\n      }\n      // We started dragging an ellipse arc\n      return true;\n    }\n\n    // Reset selection highlighting of vertices.\n    this.vertexMoveTool.setSelectedVertex(null);\n\n    if (this.edgeMoveTool.handleButtonDown(event, button)) {\n      this.updateTangentGizmos();\n      this.updateEllipseArcGizmo();\n      return true;\n    }\n\n    // Check which polygon was hit\n    let newPolygon = this.layer.hitTest(p.x, p.y);\n\n    // Handle multiselect\n    if (this.enableMultiselection && ctrlHold && newPolygon) {\n      this.selection.toggleSelection(newPolygon);\n\n      // eat mouseUp event as well. Otherwise, LMV defaultHandler will select objects in the background in parallel\n      this.clickConsumed = true;\n      return true;\n    }\n\n    // Check if click was close to an edge of the current polygon.\n    const edgeIndex = this.poly && this.findEdgeUnderMouse(this.mousePos);\n\n    // Since tolerance for edge selection is higher, the edge shape hitTest may slightly miss\n    // the polygon, but we may be close to an edge. In this case, consider the shape as being it as well.\n    if (!newPolygon && edgeIndex) {\n      newPolygon = this.poly;\n    }\n\n    // If we just clicked inside the already selected polygon, delegate it to MoveTool.\n    if (this.selection.shapeIsSelected(newPolygon)) {\n\n      const loopIndex = edgeIndex ? edgeIndex.loop : -1;\n\n      // Allow moving loops - unless it is a single outer one\n      const mainLoops = this.poly && this.poly.getMainLoops();\n      const isOnlyMainLoop = mainLoops && mainLoops.length === 1 && mainLoops[0] === loopIndex;\n\n      // Handle single-loop move\n      const moveLoop = edgeIndex && !isOnlyMainLoop;\n      if (moveLoop) {\n        // Move single loop\n        this.moveTool.startDrag([this.poly], p, loopIndex);\n      } else {\n        // Move selected shape(s)\n        const shapesToMove = this.selection.getSelectedShapes();\n        this.moveTool.startDrag(shapesToMove, p);\n      }\n      return true;\n    }\n\n    // If the clicked object is neither polygon nor polyline, ignore it.\n    const isPolygon = newPolygon instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polygon;\n    const isPolyline = newPolygon instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline;\n    const isPath = newPolygon instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path;\n    if (!isPolygon && !isPolyline && !isPath) {\n      newPolygon = null;\n    }\n\n    // Set selection to current polygon. This will also trigger setEditPoly()\n    // via selectionChanged event.\n    this.selection.selectOnly(newPolygon);\n\n    return false;\n  }\n\n  handleSingleClick(e) {\n    super.handleSingleClick(e);\n\n    const handled = this.clickConsumed || Boolean(this.poly);\n\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Click);\n    }\n\n    this.clickConsumed = false;\n    return handled;\n  }\n\n  handleMouseMove(event) {\n    super.handleMouseMove(event);\n\n    this.mousePos.copy(this.layer.canvasToLayer(event.canvasX, event.canvasY));\n    this.updateMouseOverHighlights();\n\n    if (this.moveTool.isDragging()) {\n      this.moveTool.moveDrag(this.mousePos);\n    }\n\n    if (!this.poly) {\n      return false;\n    }\n\n    if (this.vertexMoveTool.handleMouseMove(event)) {\n      return true;\n    }\n\n    if (this.edgeMoveTool.handleMouseMove(event)) {\n      return true;\n    }\n\n    // Check if we are dragging an endpoint of any tangent gizmo\n    const tangentGizmo = this.findDraggedTangentGizmo();\n    if (tangentGizmo) {\n      tangentGizmo.moveDrag(event.canvasX, event.canvasY);\n    }\n\n    // Check if we are dragging the ellipseArc gizmo\n    if (this.ellipseArcGizmo.dragging) {\n      return this.ellipseArcGizmo.moveDrag(event.canvasX, event.canvasY);\n    }\n\n    return false;\n  }\n\n  handleButtonUp(event, button) {\n    super.handleButtonUp(event, button);\n\n    // Avoid triggering the handler for external modifications, because we control the EdgeMoveTool ourselves\n    this.ignoreActions = true;\n    let handled = this.vertexMoveTool.handleButtonUp(event, button);\n    this.ignoreActions = false;\n\n    if (handled) {\n      return true;\n    }\n\n    // Avoid triggering the handler for external modifications, because we control the EdgeMoveTool ourselves\n    this.ignoreActions = true;\n    handled = this.edgeMoveTool.handleButtonUp(event, button);\n    this.ignoreActions = false;\n\n    if (handled) {\n      return true;\n    }\n\n    if (this.moveTool.isDragging()) {\n      const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n\n      // Avoid triggering the handler for external modifications, because we control the MoveTool ourselves\n      this.ignoreActions = true;\n      this.moveTool.endDrag(p);\n      this.ignoreActions = false;\n\n      return true;\n    }\n\n    // Check if we are dragging an endpoint of any tangent gizmo\n    const tangentGizmo = this.findDraggedTangentGizmo();\n    if (tangentGizmo) {\n      if (this.mouseTracker) {\n        this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.ButtonUp);\n      }\n      tangentGizmo.endDrag(event.canvasX, event.canvasY);\n    }\n\n    // Check if we are dragging the center of an ellipse arc\n    if (this.ellipseArcGizmo.dragging) {\n      if (this.mouseTracker) {\n        this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.ButtonUp);\n      }\n      this.ellipseArcGizmo.endDrag(event.canvasX, event.canvasY);\n\n    }\n\n    // We let other tools down the stack such as the MoveTool and EdgeMoveTool handle the button up.\n    return false;\n  }\n\n  // Exclude currently edited polygon from snapping: The polygon shouldn't snap to itself, but rather\n  // to geometry below it.\n  snappingFilter(shape) {\n    return shape !== this.poly;\n  }\n\n  // If selection changes (may also be triggered outside this tool), we choose the selected polyon for editing\n  onSelectionChanged() {\n    const selected = this.selection.getSelectedShapes();\n\n    // Activate if exactly one shape is selected\n    const shape = selected.length == 1 ? selected[0] : null;\n    if (shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyBase) {\n      this.setEditPoly(shape);\n    } else {\n      this.setEditPoly(null);\n    }\n\n    this.vertexMoveTool.onSelectionChanged();\n    this.edgeMoveTool.onSelectionChanged();\n  }\n\n  handleKeyDown(event, keyCode) {\n    let handled = super.handleKeyDown(event, keyCode);\n\n    // Needed in order to update suppressSnapping\n    this.vertexMoveTool.handleKeyDown(event, keyCode);\n    this.edgeMoveTool.handleKeyDown(event, keyCode);\n\n    if (keyCode === this.keyMap.DeleteSelectedVertex) {\n      if (this.poly && this.vertexMoveTool.selectedVertex) {\n        this.removePoint(this.vertexMoveTool.selectedVertex);\n        handled = true;\n      }\n    }\n\n    if (keyCode === this.keyMap.CancelEdit) {\n      this.cancelDrag();\n      return true;\n    }\n\n    // Check if we have an edge to work on\n    const targetEdge = this.isSingleLine() ? new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolyIndex({ vertex: 0, loop: 0 }) : this.edgeMoveTool.selectedEdge; // If we have just a single segment, we don't need edge selection.\n    const targetEdgeValid = Boolean(this.poly && targetEdge && this.poly.edgeIndexValid(targetEdge.vertex, targetEdge.loop));\n\n    if (keyCode === this.keyMap.ChangeToArc) {\n\n      // If a line segment is selected, convert it to an arc\n      const lineSegmentSelected = targetEdgeValid && !this.poly.isBezierArc(targetEdge.vertex, targetEdge.loop);\n      if (lineSegmentSelected) {\n        this.changeEdgeToBezier(targetEdge);\n      }\n      return true;\n    }\n\n    if (keyCode === this.keyMap.ChangeToEllipse) {\n\n      // If a line segment is selected, convert it to an arc\n      const segmentSelected = targetEdgeValid && !this.poly.isEllipseArc(targetEdge.vertex, targetEdge.loop);\n      if (segmentSelected) {\n        this.changeEdgeToEllipse(targetEdge);\n      }\n      return true;\n    }\n\n    if (keyCode === this.keyMap.ChangeToLine) {\n      // If an arc segment is selected, convert it to a line\n      const arcSegmentSelected = targetEdgeValid && this.poly.isArc(targetEdge.vertex, targetEdge.loop);\n      if (arcSegmentSelected) {\n        this.changeEdgeToLine(targetEdge);\n      }\n    }\n\n    return handled;\n  }\n\n  handleKeyUp(event, keyCode) {\n    const handled = super.handleKeyUp(event, keyCode);\n\n    // Needed in order to update suppressSnapping\n    this.vertexMoveTool.handleKeyUp(event, keyCode);\n    this.edgeMoveTool.handleKeyUp(event, keyCode);\n\n    return handled;\n  }\n\n  // If snapping has toggled on/off, we instantly \"replay\" hovering at current mouse position. Purpose is to\n  // give instant feedback (e.g. hide/show SnapLine gizmos and adjust position of preview edge)\n  onSnappingToggled(canvasX, canvasY) {\n    this.vertexMoveTool.onSnappingToggled(canvasX, canvasY);\n  }\n\n  cancelDrag() {\n\n    let needsUpdate = false;\n\n    if (this.vertexMoveTool.cancelDrag()) {\n      needsUpdate = true;\n    }\n\n    if (this.edgeMoveTool.cancelDrag()) {\n      needsUpdate = true;\n    }\n\n    if (this.moveTool.cancelDrag()) {\n      needsUpdate = true;\n    }\n\n    this.tangentGizmos.forEach((tg) => {\n      if (tg.isDragging()) {\n        tg.cancelDrag();\n        needsUpdate = true;\n      }\n    });\n\n    if (needsUpdate) {\n      this.updateAllGizmos();\n      this.layer.update();\n    }\n\n    if (this.ellipseArcGizmo.dragging) {\n      if (this.mouseTracker) {\n        this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n      }\n      this.ellipseArcGizmo.cancelDrag();\n      this.updateAllGizmos();\n    }\n\n    this.snapper.clearSnappingGizmos();\n  }\n\n  // Updates selection of shape(s), vertex, and edge after an action\n  updateSelectionState(action, isUndo) {\n\n    // If the action is invoked by our own TangentGizmo, attach the currently selected item on first run.\n    // This allows us to recover later whether a vertex or an edge was selected.\n    if (action instanceof _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.ChangeBezierTangent) {\n      const hint = action.getSelectionHint(isUndo);\n      if (!hint) {\n        action.setSelectionItem(\n          this.vertexMoveTool.selectedVertex,\n          this.edgeMoveTool.selectedEdge\n        );\n      }\n    }\n\n    // Check if the action provides a hint how we should update selection\n    const hint = action.getSelectionHint(isUndo);\n    if (hint) {\n\n      // apply shape selection\n      const shapes = hint.shape ? [hint.shape] : hint.shapes;\n      this.selection.setSelection(shapes);\n\n      this.vertexMoveTool.setSelectedVertex(hint.vertex);\n      this.edgeMoveTool.setSelectedEdge(hint.edge);\n\n      return;\n    }\n\n    // Default behavior - if we don't know anything better:\n    //  - Keep shape selected if still existing\n    //  - Reset vertex/edge selection\n\n    // If shape was removed, reset state\n    const shapeFound = Boolean(this.poly && this.layer.findShapeById(this.poly.id));\n    if (!shapeFound) {\n      this.reset();\n    }\n\n    // If poly was modified from outside, we can't know if the selected vertex or edge\n    // still exist or have the same meaning. E.g., when undo/redoing a vertex-insert, the indices may have shifted.\n    this.vertexMoveTool.setSelectedVertex(null);\n    this.edgeMoveTool.setSelectedEdge(null);\n  }\n\n  handleExternalAction(action, isUndo) {\n\n    // make sure that selected edge/vertex are still valid (or switched off)\n    this.updateSelectionState(action, isUndo);\n\n    // Stop any ongoing drag-operations (e.g., an undo operation might have removed the vertex that we are just dragging)\n    this.cancelDrag();\n\n    // Sync gizmos in case vertices were modified\n    this.updateAllGizmos();\n\n    this.snapper.clearSnappingGizmos();\n  }\n\n\n  updateMouseOverHighlights() {\n    // Handle mouse-over highlighting for shapes\n    if (this.hoverEnabled) {\n      const shape = this.layer.hitTest(this.mousePos.x, this.mousePos.y);\n      this.selection.setHoveredId(shape ? shape.id : 0);\n    }\n  }\n\n  getCursor() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    // Note: Vertex gizmos and edge gizmos are separate DomElements and define own mouse cursors via style.\n\n    const p = this.mousePos;\n\n    // Indicate: \"Moving whole shape\"\n    // While dragging, keep the move-cursor, even if the mouse is temporarily leaving polygon and gizmos\n    if (this.moveTool.isDragging()) {\n      return 'move';\n    }\n\n    // Indicate: \"Moving a gizmo\". Currently, we use the same as for shape move. Note that\n    //           the cursor for gizmo dragging must be consistent with the one we have if the mouse is on the gizmo.\n    //           Otherwise, the mouse cursor would change its state when temporarily leaving the gizmo on fast moves.\n    const vertexEdgeCursor = this.vertexMoveTool.getCursor() || this.edgeMoveTool.getCursor();\n    if (vertexEdgeCursor) {\n      return vertexEdgeCursor;\n    }\n\n    // Indicate: \"Moving a ellipse-arc gizmo\" to modify radius of an ellipse arc.\n    if (this.ellipseArcGizmo.dragging) {\n      return 'move';\n    }\n\n    // Check if mouse is close to an edge\n    const precision = EdgeSelectTolerance * this.layer.getUnitsPerPixel();\n    const edgeIndex = this.findEdgeUnderMouse(this.mousePos, precision);\n\n    // Indicate: \"Click to insert new vertex\"\n    //\n    // If we are holding down Ctrl (or command) and hover over an edge, clicking would insert a vertex.\n    const ctrlHold = this.keyState[av.KeyCode.CONTROL];\n    if (ctrlHold) {\n      if (edgeIndex) {\n        return 'copy';\n      }\n    }\n\n    // Are we about to move a shape?\n    const hitRadius = this.layer.getLineHitRadius(this.poly);\n    const moveShape = edgeIndex || this.poly.hitTest(p.x, p.y, hitRadius);\n    if (moveShape) {\n      return 'move';\n    }\n\n    // => Just default cursor\n    return undefined;\n  }\n\n  clearTangentGizmos() {\n    this.tangentGizmos.forEach((g) => g.dtor());\n    this.tangentGizmos.length = 0;\n  }\n\n  updateTangentGizmos() {\n\n    // Clear any previous gizmos (if any)\n    this.clearTangentGizmos();\n\n    if (!this.poly || !this.poly.isPath()) {\n      return;\n    }\n\n    // We only show a tangent gizmo if it has relevance for the selected vertex or edge:\n    // For a vertex v with neighbor edges prevEdge und nextEdge, we show a tangent gizmo if...\n    //  - v, prevEdge, or nextEdge is selected\n    //  - If an edge is selected, the selected edge is an arc\n    //  - If v is selected, prevEdge or nextEdge is an arc\n    for (let l = 0; l < this.poly.loopCount; l++) {\n      const vertexCount = this.poly.getVertexCount(l);\n      for (let i = 0; i < vertexCount; i++) {\n\n        const sv = this.vertexMoveTool.selectedVertex;\n        const vertexSelected = Boolean(sv && sv.vertex === i && sv.loop === l);\n\n        // get prev/next edge.\n        const prevEdge = this.poly.edgeBeforeVertex(i, l);\n        const nextEdge = this.poly.edgeAfterVertex(i, l);\n\n        // edges may not exist at polyline ends\n        const prevExists = prevEdge !== -1;\n        const nextExists = nextEdge !== -1;\n\n        // check if any neighbor edge is selected\n        const se = this.edgeMoveTool.selectedEdge;\n        const prevSelected = Boolean(prevExists && se && se.vertex === prevEdge && se.loop === l);\n        const nextSelected = Boolean(nextExists && se && se.vertex === nextEdge && se.loop === l);\n\n        // check if any neighbor edge is an arc\n        const prevIsArc = prevExists && this.poly.isBezierArc(prevEdge, l);\n        const nextIsArc = nextExists && this.poly.isBezierArc(nextEdge, l);\n\n        // If we just have a single line segment, always show the tangent gizmos\n        const isSingleLine = this.isSingleLine();\n\n        // Check if we selected an arc edge or a vertex of one\n        const arcVertexSelected = vertexSelected && (prevIsArc || nextIsArc);\n        const arcEdgeSelected = prevSelected && prevIsArc || nextSelected && nextIsArc;\n\n        // show the gizmo if anything is selected and one of the edges is an arc\n        const showTangents = isSingleLine || arcVertexSelected || arcEdgeSelected;\n        if (showTangents) {\n          this.tangentGizmos.push(new _TangentGizmo_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.poly, i, l, this.layer, this.gizmoLayer, this.gizmoManager, this.undoStack));\n        }\n      }\n    }\n  }\n\n  updateEllipseArcGizmo() {\n    const se = this.edgeMoveTool.selectedEdge;\n\n    const edgeSelected = Boolean(se);\n\n    // if ellipse arc gizmos are enabled, check if edge is selected and we the polygon at hand is a path, as well\n    // if the selected edge's vertex and loop is an ellipse arc. If ellipse arc gizmos are not enabled, then dettach\n    // them from the edge and return.\n    const showGizmo = this.ellipseArcGizmosEnabled ?\n    edgeSelected && this.poly instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path && this.poly.isEllipseArc(se.vertex, se.loop) :\n    false;\n\n    this.ellipseArcGizmo.setVisible(showGizmo);\n\n    if (!showGizmo) {\n      // Make sure that ellipseArcGizmo doesn't keep bound to an edge. Otherwise, it may\n      // cause an error later if that edge is removed.\n      this.ellipseArcGizmo.detachFromEdge();\n      return;\n    }\n\n    this.ellipseArcGizmo.attachToEdge(this.poly, se.vertex, se.loop);\n  }\n\n  // If any tangent gizmo is being dragged, it is returned.\n  // Result is null if nothing is dragged.\n  findDraggedTangentGizmo() {\n    return this.tangentGizmos.find((gizmo) => gizmo.isDragging());\n  }\n\n  // Heuristic for choosing the tangent length when turning a line segment into an arc.\n  // The basic idea here is\n  //  - When turning all 4 lines of a square into arcs, we should get something that approximates a circle.\n  //  - When generalizing that to more fancy cases, it should at least behave consistent and sort-of reasonable (e.g. always keep within a reasonable ratio to segment lengths)\n  //\n  // Note: It's probably cleaner to always approximate some sort of elliptical arcs for the general case. But that will make things a lot harder (and possibly slower).\n  //       So let's get away with the linear-scale cheating for now.\n  getVertexTangentLength(prevLength, nextLength) {\n\n    // Given a square of edge length sqrt(2), the circle passing through all 4 vertices can be\n    // approximated by 4 cubic bezier arc segments. The tangents for these bezier arcs all have this length:\n    // (See here: http://spencermortensen.com/articles/bezier-circle/)\n    const c = 0.551915024494;\n\n    // Scaling down the quad/beziers to a unit quad, we obtain the corresponding tangent lengths for a unit quad as:\n    const unitQuadTangentLength = c / Math.SQRT2;\n\n    // For a square of length l, the tangent length scales up accordingly.\n    // For different segment lengths, we simply use the average of both lengths.\n    const l = 0.5 * (prevLength + nextLength);\n\n    return l * unitQuadTangentLength;\n  }\n\n  // Given a corner vertex p and its previous and next neighbor, this function computes an averaged tangent\n  // vector that we use if (prev, p) and (p, next) are replaced by Bezier arcs.\n  getVertexTangent(prev, p, next) {\n\n    // get tangent direction by averaging the edge directions.\n    let tangent = new THREE.Vector2().copy(next).sub(prev).normalize();\n\n    // Scale tangent direction\n    const prevLength = p.distanceTo(prev);\n    const nextLength = p.distanceTo(next);\n    const tangentLength = this.getVertexTangentLength(prevLength, nextLength);\n\n    return tangent.multiplyScalar(tangentLength);\n  }\n\n  changeEdgeToEllipse(polyIndex) {\n\n    const edgeIndex = polyIndex.vertex;\n    const loopIndex = polyIndex.loop;\n\n    // By default, bend outsidde by half of the edge length. In this way, we get a circle centered\n    // at the line-segment midpoint.\n    const bendRadius = 0.5 * this.poly.getEdgeLength(edgeIndex, loopIndex);\n    const arcParams = (0,_EllipseArcGizmo_js__WEBPACK_IMPORTED_MODULE_5__.getEllipseArcEdgeParams)(this.poly, edgeIndex, loopIndex, bendRadius);\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.ChangeEdgeType(this.layer, this.poly, polyIndex, _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Ellipse, null, null, arcParams));\n\n    this.layer.update();\n    this.edgeMoveTool.setSelectedEdge(polyIndex);\n    this.updateAllGizmos();\n  }\n\n  changeEdgeToBezier(polyIndex) {\n\n    const edgeIndex = polyIndex.vertex;\n    const loopIndex = polyIndex.loop;\n\n    const path = this.poly;\n\n    // get neighbor edges\n    const prevEdgeIndex = path.prevEdgeIndex(edgeIndex, loopIndex);\n    const nextEdgeIndex = path.nextEdgeIndex(edgeIndex, loopIndex);\n\n    // check if neighbor edge exist (usually true unless at the end of a polyline)\n    const prevExists = prevEdgeIndex !== -1;\n    const nextExists = nextEdgeIndex !== -1;\n\n    // get start/end position of the segment\n    const a = new THREE.Vector2();\n    const b = new THREE.Vector2();\n    path.getEdge(edgeIndex, a, b, loopIndex);\n\n    // If previous/next edge exist, get their start/endVertex as well\n    let prevEdgeA = prevExists && path.getPoint(prevEdgeIndex, loopIndex);\n    let nextEdgeB = nextExists && path.getPoint(path.nextIndex(nextEdgeIndex, loopIndex), loopIndex);\n\n    // If prev/nextEdge do not exist, we simply assume length and angle of the missing edge to be the same as the current edge.\n    if (!prevExists) prevEdgeA = _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.mirrorPointOnPoint(b, a);\n    if (!nextExists) nextEdgeB = _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.mirrorPointOnPoint(a, b);\n\n    // Control points 0 and 3 are already given by edge a and b\n    // Below, we have to determine cp1, cp2 to define the tangents\n    let cp1 = null;\n    let cp2 = null;\n\n    // Check if previous and next edges are arcs as well\n    const prevIsArc = prevExists && path.isBezierArc(prevEdgeIndex, loopIndex);\n    const nextIsArc = nextExists && path.isBezierArc(nextEdgeIndex, loopIndex);\n\n    // Determine control point for start tangent cp1\n    if (prevIsArc) {\n      // Previous edge is an arc: Get start tangent by mirroring the end tangent of that arc.\n      const prevCp2 = path.getControlPoint(prevEdgeIndex, 2, loopIndex);\n      cp1 = _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.mirrorPointOnPoint(prevCp2, a);\n    } else {\n      // Previous edge is a line: Use average direction of both segments to choose the new tangent\n      cp1 = this.getVertexTangent(prevEdgeA, a, b).add(a);\n    }\n\n    // Analog for end tangent cp2\n    if (nextIsArc) {\n      // Next edge is an arc: Get end tangent by mirroring the start tangent of that arc.\n      const nextCp1 = path.getControlPoint(nextEdgeIndex, 1, loopIndex);\n      cp2 = _Math2D_js__WEBPACK_IMPORTED_MODULE_2__.Math2D.mirrorPointOnPoint(nextCp1, b);\n    } else {\n      // Next edge is a line: Use average direction of both segments to choose the new tangent\n      // Note that we must pass the points in backward order for the end tangent.\n      cp2 = this.getVertexTangent(nextEdgeB, b, a).add(b);\n    }\n\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.ChangeEdgeType(this.layer, this.poly, polyIndex, _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Bezier, cp1, cp2));\n\n    this.layer.update();\n\n    // select the edge so that you can edit its tangents\n    this.edgeMoveTool.setSelectedEdge(polyIndex);\n    this.updateAllGizmos();\n  }\n\n  changeEdgeToLine(polyIndex) {\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.ChangeEdgeType(this.layer, this.poly, polyIndex, _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.EdgeType.Line));\n    this.layer.update();\n\n    this.edgeMoveTool.setSelectedEdge(polyIndex);\n    this.updateAllGizmos();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/PolygonEditTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/PolygonTool.js":
/*!************************************************!*\
  !*** ./extensions/Edit2D/tools/PolygonTool.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PolygonTool)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n/* harmony import */ var _RectangleTool_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RectangleTool.js */ \"./extensions/Edit2D/tools/RectangleTool.js\");\n/* harmony import */ var _LineTool_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LineTool.js */ \"./extensions/Edit2D/tools/LineTool.js\");\n\n\n\n\n\n\n\n\nconst Mode = {\n  Polyline: 1,\n  Polygon: 2\n};\n\nconst PolygonToolName = \"Edit2_PolygonTool\";\nconst PolylineToolName = \"Edit2_PolylineTool\";\n\nconst av = Autodesk.Viewing;\nconst DefaultStyle = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style();\n\nclass PolygonTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n\n  constructor(ctx) {let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Mode.Polygon;let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style();\n    super(ctx);\n\n    // Delegate single-drag interactions:\n    this.lineRectTool = mode === Mode.Polygon ?\n    new _RectangleTool_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](ctx, style) : // PolygonMode: Draw rect/quad on drag\n    new _LineTool_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](ctx, style) // PolylineMode: Draw simple line on drag\n    ;\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    // Circle shapes per vertex\n    this.vertexGizmos = [];\n\n    // The polygon/polyline we are currently creating (if tool is active)\n    this.poly = undefined;\n\n    // Style used for polygon creation\n    this.style = style;\n\n    // Style used to display the thin line to connect last added vertex with current mouse position.\n    this.edgePreviewStyle = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style({\n      lineWidth: 2,\n      isScreenSpace: true,\n      lineStyle: 11 // dashed line\n    });\n\n    // whether editing Polylines or Polygons\n    this.mode = mode;\n\n    // last canvas position where we added a vertex\n    this.lastClickX = undefined;\n    this.lastClickY = undefined;\n\n    this.keyMap.CANCEL_EDIT = av.KeyCode.ESCAPE;\n    this.keyMap.REMOVE_LAST_VERTEX = av.KeyCode.BACKSPACE;\n    this.keyMap.FINISH_EDIT = [av.KeyCode.ENTER, av.KeyCode.c];\n\n    // FillGizmo: When editing a polygon, fillGizmo displays the polygon formed by all vertices + mousePos\n    this.fillGizmo = null;\n\n    // OutlineGizmo: Polyline that connects all added vertices\n    this.outlineGizmo = null;\n\n    // Line to connect last added vertex with mouse position\n    this.edgePreviewGizmo = null;\n\n    // Last tracked mouse-pos in layer-coords (after considering snapping)\n    this.mousePos = new THREE.Vector2();\n\n    // Label to display polygon area - hidden by default\n    // Note that the polygon preview is in the gizmoLayer. So we add the areaLabel there as well to keep it in sync.\n    this.areaLabel = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__.AreaLabel(null, this.gizmoLayer, this.unitHandler, false);\n\n    // Label to display polyline length\n    this.lengthLabel = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__.EdgeLabel(this.gizmoLayer, false);\n\n    // If true, we always create Paths instead of Polygons\n    this.enableArcs = true;\n  }\n\n  // Enable the area labels (public API)\n  setAreaLabelVisible(visible) {\n    this.areaLabel.setVisible(visible);\n  }\n\n  setLengthLabelVisible(visible) {\n    this.lengthLabel.setVisible(visible);\n  }\n\n  // If true, all new shapes are Paths instead of Polygons/Polylines.\n  setArcsEnabled(enable) {\n    this.enableArcs = enable;\n    this.lineRectTool.enableArcs = enable;\n  }\n\n  deactivate() {\n    super.deactivate();\n    this.cancelEdit();\n  }\n\n  // Returns true when editing a Polygon, false when editing a Polyline or nothing.\n  isPolygon() {\n    return this.poly && this.poly.isPolygon();\n  }\n\n  /**\n   * Set depending styles for the polygon / polyline tool. It will also set most of the styles to the temporary lines\n   * that appear during drawing. Style.isScreenSpace won't be considered.\n   * @param {Style} style         - a Style instance\n   * @param {boolean} skipDefault - If set (default) just apply the style that differ from the default Style\n   */\n  setStyles(style) {let skipDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (style.lineColor !== DefaultStyle.lineColor || !skipDefault) {\n      this.style.lineColor = style.lineColor;\n    }\n    if (style.lineAlpha !== DefaultStyle.lineAlpha || !skipDefault) {\n      this.style.lineAlpha = style.lineAlpha;\n    }\n    if (style.lineWidth !== DefaultStyle.lineWidth || !skipDefault) {\n      this.style.lineWidth = style.lineWidth;\n      this.lineRectTool.style.lineWidth = style.lineWidth;\n      this.edgePreviewStyle.lineWidth = style.lineWidth * 2 / 3;\n    }\n    if (style.lineStyle !== DefaultStyle.lineStyle || !skipDefault) {\n      this.style.lineStyle = style.lineStyle;\n      this.lineRectTool.style.lineStyle = style.lineStyle;\n      // skip this.edgePreviewStyle.lineStyle\n    }\n\n    if (style.fillColor !== DefaultStyle.fillColor || !skipDefault) {\n      this.style.fillColor = style.fillColor;\n    }\n    if (style.fillAlpha !== DefaultStyle.fillAlpha || !skipDefault) {\n      this.style.fillAlpha = style.fillAlpha;\n    }\n\n    if (style.isMiterLine !== DefaultStyle.isMiterLine || !skipDefault) {\n      this.style.isMiterLine = style.isMiterLine;\n    }\n\n    // skip isScreenSpace\n  }\n\n  // Initialize all gizmos when starting to edit a Polygon/Polyline\n  initGizmos() {\n\n    // FillGizmo: Draw fill of polygon formed by added vertices + mousePos\n    if (this.isPolygon()) {\n      this.fillGizmo = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polygon([], this.style.clone());\n      this.fillGizmo.style.lineAlpha = 0;\n      this.gizmoLayer.addShape(this.fillGizmo);\n    }\n\n    // OutlineGizmo: Connect added vertices\n    this.outlineGizmo = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline([], this.style.clone());\n    this.gizmoLayer.addShape(this.outlineGizmo);\n\n    // CurrentEdgeGizmo: Draw dashed line from last vertex to mousePos.\n    this.edgePreviewGizmo = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline([], this.edgePreviewStyle);\n    this.edgePreviewGizmo.style.lineColor = this.poly.style.lineColor;\n    this.gizmoLayer.addShape(this.edgePreviewGizmo);\n\n    this.areaLabel.setShape(this.fillGizmo);\n\n    // For Polylines, attach label to preview edge that displays the summed length\n    if (this.poly && this.poly.isPolyline()) {\n      this.lengthLabel.attachToEdge(this.edgePreviewGizmo, 0);\n    }\n  }\n\n  clearGizmos() {\n    if (this.fillGizmo) {\n      this.gizmoLayer.removeShape(this.fillGizmo);\n      this.fillGizmo = null;\n    }\n\n    this.areaLabel.setShape(null);\n    this.lengthLabel.detachFromEdge();\n\n    if (this.outlineGizmo) {\n      this.gizmoLayer.removeShape(this.outlineGizmo);\n      this.outlineGizmo = null;\n    }\n\n    if (this.edgePreviewGizmo) {\n      this.gizmoLayer.removeShape(this.edgePreviewGizmo);\n      this.edgePreviewGizmo = null;\n    }\n\n    // clear vertex gizmos\n    for (let i = 0; i < this.vertexGizmos.length; i++) {\n      this.vertexGizmos[i].dtor();\n    }\n    this.vertexGizmos.length = 0;\n  }\n\n  // Update gizmos and snapping if polygon was modified\n  polyModified() {\n    this.updateGizmos();\n\n    // Configure angle snapping to consider latest state of the polygon\n    // Note that angleSnapper requires the shape including \"vertex under mouse\", while\n    // this.poly only contains the already added/clicked vertices.\n    // Note that we cannot use fillGizmo here, because it does not exist for polylines.\n    const snapGeom = this.poly.clone();\n    snapGeom.addPoint(this.mousePos.x, this.mousePos.y);\n    this.snapper.startAngleSnapping(snapGeom, this.poly.vertexCount, 0); // For new polygons, loopIndex is always 0\n  }\n\n  // Update gizmos if vertices of current polygon/polyline have changed\n  updateGizmos() {\n\n    // FillGizmo: Show fill without outline for the polygon formed by all added\n    // vertices + current mousePos\n    if (this.fillGizmo) {\n      // copy vertices of main polygon (not geom, not style)\n      this.fillGizmo.clear();\n      for (let i = 0; i < this.poly.vertexCount; i++) {\n        const p = this.poly.getPoint(i);\n        this.fillGizmo.addPoint(p.x, p.y);\n      }\n      // add additional point that traces mouse-pos\n      this.fillGizmo.addPoint(this.mousePos.x, this.mousePos.y);\n    }\n\n    // OutlineGizmo: Solid polyline that connects all added vertices\n    this.outlineGizmo.clear();\n    if (this.poly.vertexCount >= 2) {\n      for (let i = 0; i < this.poly.vertexCount; i++) {\n        const p = this.poly.getPoint(i);\n        this.outlineGizmo.addPoint(p.x, p.y);\n      }\n    }\n\n    // currentEdgeGizmo: Dashed line to connect last added vertex with mouse position\n    this.edgePreviewGizmo.clear();\n    if (this.poly.vertexCount >= 1) {\n      const pLast = this.poly.getPoint(this.poly.vertexCount - 1);\n      this.edgePreviewGizmo.addPoint(pLast.x, pLast.y);\n      this.edgePreviewGizmo.addPoint(this.mousePos.x, this.mousePos.y);\n\n      this.updateLengthLabel();\n    }\n\n    this.gizmoLayer.update();\n  }\n\n  updateLengthLabel() {\n    // Compute resulting length of polyline including previewEdge\n    if (this.poly && this.poly.isPolyline()) {\n      // get transform from geometry coords to measure coordinate system\n      const transform = this.unitHandler.measureTransform;\n\n      let length = this.poly.getLength(transform) + this.edgePreviewGizmo.getLength(transform);\n      let lengthStr = this.unitHandler.lengthToString(length);\n      this.lengthLabel.setText(lengthStr);\n    }\n  }\n\n  getName() {\n    return (this.mode === Mode.Polygon ? PolygonToolName : PolylineToolName) + this.nameSuffix;\n  }\n\n  handleMouseMove(event) {\n    super.handleMouseMove(event);\n\n    if (!event.buttons) {\n      // When not dragging, we always return false here. Otherwise, the event will not propagated\n      // to navigation tools, so that the zoom focus is not updated properly.\n      this.onHover(event.canvasX, event.canvasY);\n      return false;\n    }\n    return this.lineRectTool.handleMouseMove(event);\n  }\n\n  onHover(canvasX, canvasY) {\n    // Check if shape editing is already in progress\n    if (!this.poly) {\n\n      // Perform snapping check, so that SnappingIndicator reflects if the start point would be snapped.\n      this.getSnapPosition(canvasX, canvasY);\n      return;\n    }\n\n    let pLayer = this.layer.canvasToLayer(canvasX, canvasY);\n\n    // When hovering the start vertex that will close the polygon (or line-loop), don't show any snapping indicators\n    const closingAllowed = this.poly.vertexCount >= 3;\n    const startVertexHit = closingAllowed && this.gizmoManager.isUnderMouse(this.vertexGizmos[0]);\n    this.setStartVertexHighlighted(startVertexHit); // indicate when hoving closing-vertex\n    if (startVertexHit) {\n      // Remove snapping indicators\n      this.snapper.clearSnappingGizmos();\n\n      // snap position to vertex center\n      pLayer.copy(this.vertexGizmos[0].layerPos);\n    } else {\n      // Standard case: If mouse is not on start vertex, allow standard snapping\n      pLayer = this.getSnapPosition(canvasX, canvasY);\n    }\n\n    // track last mouse pos\n    this.mousePos.copy(pLayer);\n\n    // Just hover: Only update vertex-positions for fillGizmo, edgePreview and alignmentGizmo\n    this.edgePreviewGizmo.updatePoint(1, pLayer.x, pLayer.y);\n    this.fillGizmo && this.fillGizmo.updatePoint(this.fillGizmo.vertexCount - 1, pLayer.x, pLayer.y); // will be null if this.poly is a Polyline\n    this.gizmoLayer.update();\n    this.updateLengthLabel();\n  }\n\n  // If we have enough vertices, clicking on the first vertex gizmo again will finish the shape.\n  handleStartVertexClicked(event) {\n\n    if (!this.poly && this.poly.vertexCount < 3) {\n      return;\n    }\n\n    // For polylines, we have to repeat the first vertex to close it\n    if (this.poly.isPolyline()) {\n      const pStart = this.poly.getPoint(0);\n      this.addVertex(pStart.x, pStart.y);\n    }\n\n    // Finish editing\n    this.finishPolygon();\n\n    // Make sure that the event is not passed on to ToolManager. Otherwise,\n    // we would evaluate it a second time in handleSingleClick()\n    event.stopPropagation();\n  }\n\n  // Add vertex on single-click\n  handleSingleClick(event, button) {\n    super.handleSingleClick(event, button);\n\n    // Only respond to left mouse button.\n    if (!button == 0) {\n      return false;\n    }\n\n    // Avoid duplicate vertices on double-clicks\n    if (this.vertexGizmos.length > 0 && event.canvasX === this.lastClickX && event.canvasY === this.lastClickY) {\n      return true;\n    }\n\n    this.lastClickX = event.canvasX;\n    this.lastClickY = event.canvasY;\n\n    this.mousePos.copy(this.getSnapPosition(event.canvasX, event.canvasY));\n\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Click);\n    }\n\n    // Init polygon on first click\n    if (!this.poly) {\n      this.startPoly(this.mousePos.x, this.mousePos.y);\n    }\n\n    this.addVertex(this.mousePos.x, this.mousePos.y);\n    return true;\n  }\n\n  handleButtonDown(event, button) {\n    // Support suppressing mouse buttons by holding a key. Note that we only need that for dragging operations.\n    if (this.ignoreDragging) {\n      return false;\n    }\n\n    // If no clicks have been made so far, allow to drag line/rectangle.\n    if (!this.poly) {\n      // Clear the selection, this will make sure all other gizmos get removed\n      this.selection.clear();\n\n      return this.lineRectTool.handleButtonDown(event, button);\n    }\n\n    return false;\n  }\n\n  handleButtonUp(event, button) {\n    return this.lineRectTool.handleButtonUp(event, button);\n  }\n\n  handleDoubleClick(event, button) {\n    super.handleDoubleClick(event, button);\n\n    // Only respond to left mouse button.\n    if (!button == 0) {\n      return false;\n    }\n\n    this.finishPolygon();\n    return true;\n  }\n\n  // Start new polyline or polygon\n  startPoly(x, y) {\n\n    if (this.enableArcs) {\n      // Arcs enabled: Always create Paths\n      const isClosed = this.mode === Mode.Polygon;\n      this.poly = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Path([], isClosed, this.style.clone());\n    } else {\n      // No arcs enabled: Create Polygons or Polylines\n      if (this.mode === Mode.Polygon) {\n        this.poly = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polygon([], this.style.clone());\n      } else {\n        this.poly = new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polyline([], this.style.clone());\n      }\n    }\n\n    this.initGizmos();\n  }\n\n  addVertex(x, y) {\n\n    // add \"next\" point - which will follow the mouse motion\n    // until next click\n    this.poly.addPoint(x, y);\n\n    // add vertex-gizmo\n    const name = 'PolygonTool_vertexGizmo_' + this.vertexGizmos.length;\n    const vertex = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_1__.VertexGizmo(this.gizmoLayer, x, y, name);\n    this.vertexGizmos.push(vertex);\n\n    // For the start vertex-gizmo, we register a handler to finish the polygon when clicking it again\n    const isStartVertex = this.vertexGizmos.length === 1;\n    if (isStartVertex) {\n      vertex.container.addEventListener('click', (e) => this.handleStartVertexClicked(e));\n    }\n\n    this.polyModified();\n  }\n\n  removeLastVertex() {\n    if (!this.poly || !this.poly.vertexCount) {\n      return;\n    }\n\n    // Cancel edit if there was only the starting point.\n    if (this.poly.vertexCount <= 1) {\n      this.cancelEdit();\n      return;\n    }\n\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Click);\n    }\n\n    this.poly.removePoint(this.poly.vertexCount - 1);\n\n    // remove last added vertex gizmo\n    const lastGizmo = this.vertexGizmos[this.vertexGizmos.length - 1];\n    lastGizmo.dtor();\n    this.vertexGizmos.pop();\n\n    this.polyModified();\n  }\n\n  finishPolygon() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Click);\n    }\n\n    // remove all vertex gizmos\n    this.clearGizmos();\n\n    // Stop snapping to edges of this polygon\n    this.snapper.stopAngleSnapping();\n\n    // move polygon to main layer\n    this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_2__.Actions.AddShape(this.layer, this.poly));\n\n    this.dispatchEvent({ type: PolygonTool.POLYGON_ADDED, polygon: this.poly });\n\n    // Start another polygon on next click\n    this.poly = null;\n  }\n\n  cancelEdit() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Click);\n    }\n\n    if (this.lineRectTool.isDragging()) {\n      this.lineRectTool.cancelDrag();\n    }\n\n    if (this.poly) {\n      this.gizmoLayer.removeShape(this.poly);\n      this.poly = null;\n    }\n\n    this.clearGizmos();\n    this.snapper.stopAngleSnapping();\n  }\n\n  handleFinishKey(event) {\n    if (!this.poly) {\n      return false;\n    }\n\n    // Avoid closing if it would result in a polygon that is degenerated to a line.\n    if (this.isPolygon() && this.poly.vertexCount < 3) {\n      return false;\n    }\n\n    this.finishPolygon();\n    return true;\n  }\n\n  handleKeyDown(event, keyCode) {\n    let handled = super.handleKeyDown(event, keyCode);\n\n    // delegate to rectTool\n    handled = this.lineRectTool.handleKeyDown(event, keyCode) || handled;\n\n    // Map event to any known key in this.keyMap\n    let funcKey = this.mapKey(event, this.keyMap);\n    switch (funcKey) {\n      case 'CANCEL_EDIT':this.cancelEdit();handled = true;break;\n      case 'REMOVE_LAST_VERTEX':this.removeLastVertex();handled = true;break;\n      case 'FINISH_EDIT':handled = this.handleFinishKey(event);break;\n    }\n    return handled;\n  }\n\n  handleKeyUp(event, keyCode) {\n    super.handleKeyUp(event, keyCode);\n    this.lineRectTool.handleKeyUp(event, keyCode);\n  }\n\n  // If snapping has toggled on/off, we instantly \"replay\" hovering at current mouse position. Purpose is to\n  // give instant feedback (e.g. hide/show SnapLine gizmos and adjust position of preview edge)\n  onSnappingToggled(canvasX, canvasY) {\n    this.onHover(canvasX, canvasY);\n  }\n\n  mouseOnStartVertex() {\n    if (!this.vertexGizmos[0]) {\n      return false;\n    }\n\n    // Check if start vertex was clicked\n    return this.gizmoManager(this.this.vertexGizmos[0]);\n  }\n\n  setStartVertexHighlighted(enable) {\n    if (this.vertexGizmos[0]) {\n      this.vertexGizmos[0].setSelected(enable);\n    }\n  }\n\n  getCursor() {\n    return 'crosshair';\n  }\n}\n\nPolygonTool.POLYGON_ADDED = \"polygonAdded\";\nPolygonTool.Mode = Mode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/PolygonTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/RectangleTool.js":
/*!**************************************************!*\
  !*** ./extensions/Edit2D/tools/RectangleTool.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RectangleTool)\n/* harmony export */ });\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _ModifierMask_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ModifierMask.js */ \"./extensions/Edit2D/ModifierMask.js\");\n\n\n\n\n\n\n\n\n\nconst RectangleToolName = \"Edit2_RectangleTool\";\n\nconst av = Autodesk.Viewing;\n\n// Creates rectangles by dragging\nclass RectangleTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n  constructor(ctx) {let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Style();\n    super(ctx);\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    this.style = style;\n\n    // New polygon created by dragging\n    this.rect = null;\n\n    // First corner of the new rectangle\n    this.startPoint = new THREE.Vector2();\n    this.endPoint = new THREE.Vector2();\n\n    // Indicates that we interrupted dragging with Esc. In this case, we still consume the mouse-up\n    // event to avoid inconsistencies in other tool.\n    this.dragCanceled = false;\n\n    // Create area label. Default hidden - showing is optional.\n    this.areaLabel = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.AreaLabel(null, this.layer, ctx.unitHandler, false);\n\n    // Allow to enable/disable tool based on modifiers\n    this.modifiers = new _ModifierMask_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n\n    // If true, create Paths instead of Polygons\n    this.enableArcs = true;\n  }\n\n  // Enable the area labels (public API)\n  setAreaLabelVisible(visible) {\n    this.areaLabel.setVisible(visible);\n  }\n\n  getName() {\n    return RectangleToolName + this.nameSuffix;\n  }\n\n  activate() {}\n  deactivate() {}\n  register() {}\n\n  handleButtonDown(event, button) {\n\n    // Check if modifers allow starting an interaction\n    if (!this.modifiers.accepts(event)) {\n      return false;\n    }\n\n    // Only respond to left button\n    if (button != 0) {\n      return;\n    }\n\n    const p = this.getSnapPosition(event.canvasX, event.canvasY);\n    this.startDrag(p);\n    return true;\n  }\n\n  handleButtonUp(event, button) {\n\n    // Only respond to left button\n    if (button != 0) {\n      return false;\n    }\n\n    // If drag has been interrupted, consider the endDrag() as handled\n    if (this.dragCanceled) {\n      this.dragCanceled = false;\n      return true;\n    }\n\n    // Make sure that we consider latest mouse position\n    this.handleMouseMove(event);\n\n    return this.endDrag();\n  }\n\n  handleMouseMove(event) {\n\n    // Get snapping position. Note that this even makes sense when not dragging: In this case, we\n    // just do it to update the snapping indicator.\n    const p = this.getSnapPosition(event.canvasX, event.canvasY);\n\n    if (!this.rect) {\n      return false;\n    }\n\n    this.moveDrag(p, event.shiftKey);\n\n    return true;\n  }\n\n  // Start dragging a shape\n  //  @param {Shape}   shape\n  //  @param {Vector2} startPos - in layer coords\n  startDrag(startPos) {\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n    let points = [startPos.clone(), startPos.clone(), startPos.clone(), startPos.clone()];\n    let style = this.style.clone();\n\n    this.rect = this.enableArcs ? new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.PolygonPath(points, style) : new _EditShapes_js__WEBPACK_IMPORTED_MODULE_0__.Polygon(points, style);\n\n    this.startPoint.copy(startPos);\n    this.endPoint.copy(startPos);\n\n    this.gizmoLayer.addShape(this.rect);\n  }\n\n  updateRect(forceQuad) {\n\n    if (!this.isDragging()) {\n      return;\n    }\n\n    const p0 = this.startPoint;\n    const p1 = this.endPoint;\n\n    if (forceQuad) {\n\n      // Use maximum of dx/dy as edge length\n      const dx = p1.x - p0.x;\n      const dy = p1.y - p0.y;\n\n      const edgeLength = Math.max(Math.abs(dx), Math.abs(dy));\n\n      // Consider drag direction to span quad right/left resp. up/down\n      const sx = Math.sign(dx);\n      const sy = Math.sign(dy);\n\n      this.rect.updatePoint(1, p0.x + edgeLength * sx, p0.y);\n      this.rect.updatePoint(2, p0.x + edgeLength * sx, p0.y + edgeLength * sy);\n      this.rect.updatePoint(3, p0.x, p0.y + edgeLength * sy);\n\n    } else {\n      this.rect.updatePoint(1, p1.x, p0.y);\n      this.rect.updatePoint(2, p1.x, p1.y);\n      this.rect.updatePoint(3, p0.x, p1.y);\n    }\n\n    this.gizmoLayer.update();\n\n    this.areaLabel.setShape(this.rect);\n  }\n\n  // p is in layer coords\n  moveDrag(p, forceQuad) {\n\n    // update rectangle\n    this.endPoint.copy(p);\n    this.updateRect(forceQuad);\n  }\n\n  endDrag() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (!this.rect) {\n      return false;\n    }\n\n    // Check if rect is valid\n    const dx = this.endPoint.x - this.startPoint.x;\n    const dy = this.endPoint.y - this.startPoint.y;\n    const Eps = 1.e-10;\n    const rectValid = Math.abs(dx) > Eps && Math.abs(dy) > Eps;\n\n    // Move shape to main layer (or just remove if invalid)\n    this.gizmoLayer.removeShape(this.rect);\n    if (rectValid) {\n      this.undoStack.run(new _Actions_js__WEBPACK_IMPORTED_MODULE_1__.Actions.AddShape(this.layer, this.rect));\n    }\n\n    this.rect = null;\n\n    this.areaLabel.setShape(null);\n\n    return true;\n  }\n\n  cancelDrag() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    if (this.rect) {\n      // Remove temporary gizmo shape\n      this.gizmoLayer.removeShape(this.rect);\n      this.rect = null;\n\n      this.dragCanceled = true;\n\n      this.areaLabel.setShape(null);\n    }\n  }\n\n  isDragging() {\n    return Boolean(this.rect);\n  }\n\n  handleKeyDown(event, keyCode) {\n    // Update shape when toggling between rect and quad mode\n    if (keyCode == av.KeyCode.SHIFT) {\n      this.updateRect(true);\n    }\n  }\n\n  handleKeyUp(event, keyCode) {\n    // Update shape when toggling between rect and quad mode\n    if (keyCode == av.KeyCode.SHIFT) {\n      this.updateRect(false);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/RectangleTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/UndoTool.js":
/*!*********************************************!*\
  !*** ./extensions/Edit2D/tools/UndoTool.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UndoTool)\n/* harmony export */ });\nconst UndoToolName = 'Edit2_UndoTool';\n\nconst av = Autodesk.Viewing;\n\n// Simple tool that triggers undo/redo in response to a keyboard shortcut\nclass UndoTool {\n\n  constructor(undoStack) {\n    this.undoStack = undoStack;\n  }\n\n  handleKeyDown(event, keyCode) {\n    // Undo\n    //  - Ctrl + Z (Windows)\n    //  - Command + Z (Mac)\n    // Redo\n    // - Ctrl + Shift + Z (Windows)\n    // - Command + Shift + Z (Mac)\n    // - Ctrl + Y (Used on Windows but not Mac)\n\n    if ((event.ctrlKey || event.metaKey) && keyCode === av.KeyCode.z) {\n      if (event.shiftKey) {\n        this.undoStack.redo();\n      } else {\n        this.undoStack.undo();\n      }\n\n      return true;\n    }\n\n    if (event.ctrlKey && keyCode === av.KeyCode.y) {\n      this.undoStack.redo();\n      return true;\n    }\n\n    return false;\n  }\n\n  // Some paperwork for ToolController\n  getName() {\n    return UndoToolName;\n  }\n  getNames() {\n    return [this.getName()];\n  }\n  activate() {}\n  deactivate() {}\n  register() {}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC90b29scy9VbmRvVG9vbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsWUFBWSxHQUFHLGdCQUFnQjs7QUFFckMsTUFBTUMsRUFBRSxHQUFHQyxRQUFRLENBQUNDLE9BQU87O0FBRTNCO0FBQ2UsTUFBTUMsUUFBUSxDQUFDOztFQUUxQkMsV0FBV0EsQ0FBQ0MsU0FBUyxFQUFFO0lBQ25CLElBQUksQ0FBQ0EsU0FBUyxHQUFHQSxTQUFTO0VBQzlCOztFQUVBQyxhQUFhQSxDQUFDQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtJQUMxQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7SUFFQSxJQUFJLENBQUNELEtBQUssQ0FBQ0UsT0FBTyxJQUFJRixLQUFLLENBQUNHLE9BQU8sS0FBS0YsT0FBTyxLQUFLUixFQUFFLENBQUNXLE9BQU8sQ0FBQ0MsQ0FBQyxFQUFFO01BQzlELElBQUlMLEtBQUssQ0FBQ00sUUFBUSxFQUFFO1FBQ2hCLElBQUksQ0FBQ1IsU0FBUyxDQUFDUyxJQUFJLENBQUMsQ0FBQztNQUN6QixDQUFDLE1BQU07UUFDSCxJQUFJLENBQUNULFNBQVMsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7TUFDekI7O01BRUEsT0FBTyxJQUFJO0lBQ2Y7O0lBRUEsSUFBSVIsS0FBSyxDQUFDRSxPQUFPLElBQUlELE9BQU8sS0FBS1IsRUFBRSxDQUFDVyxPQUFPLENBQUNLLENBQUMsRUFBRTtNQUMzQyxJQUFJLENBQUNYLFNBQVMsQ0FBQ1MsSUFBSSxDQUFDLENBQUM7TUFDckIsT0FBTyxJQUFJO0lBQ2Y7O0lBRUEsT0FBTyxLQUFLO0VBQ2hCOztFQUVBO0VBQ0FHLE9BQU9BLENBQUEsRUFBRztJQUNOLE9BQU9sQixZQUFZO0VBQ3ZCO0VBQ0FtQixRQUFRQSxDQUFBLEVBQUc7SUFDUCxPQUFPLENBQUMsSUFBSSxDQUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0VBQzNCO0VBQ0FFLFFBQVFBLENBQUEsRUFBRyxDQUFFO0VBQ2JDLFVBQVVBLENBQUEsRUFBRyxDQUFFO0VBQ2ZDLFFBQVFBLENBQUEsRUFBRyxDQUFFO0FBQ2pCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9FZGl0MkQvdG9vbHMvVW5kb1Rvb2wuanM/YTU4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVbmRvVG9vbE5hbWUgPSAnRWRpdDJfVW5kb1Rvb2wnO1xuXG5jb25zdCBhdiA9IEF1dG9kZXNrLlZpZXdpbmc7XG5cbi8vIFNpbXBsZSB0b29sIHRoYXQgdHJpZ2dlcnMgdW5kby9yZWRvIGluIHJlc3BvbnNlIHRvIGEga2V5Ym9hcmQgc2hvcnRjdXRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuZG9Ub29sIHtcblxuICAgIGNvbnN0cnVjdG9yKHVuZG9TdGFjaykge1xuICAgICAgICB0aGlzLnVuZG9TdGFjayA9IHVuZG9TdGFjaztcbiAgICB9XG5cbiAgICBoYW5kbGVLZXlEb3duKGV2ZW50LCBrZXlDb2RlKSB7XG4gICAgICAgIC8vIFVuZG9cbiAgICAgICAgLy8gIC0gQ3RybCArIFogKFdpbmRvd3MpXG4gICAgICAgIC8vICAtIENvbW1hbmQgKyBaIChNYWMpXG4gICAgICAgIC8vIFJlZG9cbiAgICAgICAgLy8gLSBDdHJsICsgU2hpZnQgKyBaIChXaW5kb3dzKVxuICAgICAgICAvLyAtIENvbW1hbmQgKyBTaGlmdCArIFogKE1hYylcbiAgICAgICAgLy8gLSBDdHJsICsgWSAoVXNlZCBvbiBXaW5kb3dzIGJ1dCBub3QgTWFjKVxuXG4gICAgICAgIGlmICgoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSAmJiBrZXlDb2RlID09PSBhdi5LZXlDb2RlLnopIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5kb1N0YWNrLnJlZG8oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmRvU3RhY2sudW5kbygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdHJsS2V5ICYmIGtleUNvZGUgPT09IGF2LktleUNvZGUueSkge1xuICAgICAgICAgICAgdGhpcy51bmRvU3RhY2sucmVkbygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8vIFNvbWUgcGFwZXJ3b3JrIGZvciBUb29sQ29udHJvbGxlclxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiBVbmRvVG9vbE5hbWU7XG4gICAgfVxuICAgIGdldE5hbWVzKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuZ2V0TmFtZSgpXTtcbiAgICB9XG4gICAgYWN0aXZhdGUoKSB7IH1cbiAgICBkZWFjdGl2YXRlKCkgeyB9XG4gICAgcmVnaXN0ZXIoKSB7IH1cbn07XG4iXSwibmFtZXMiOlsiVW5kb1Rvb2xOYW1lIiwiYXYiLCJBdXRvZGVzayIsIlZpZXdpbmciLCJVbmRvVG9vbCIsImNvbnN0cnVjdG9yIiwidW5kb1N0YWNrIiwiaGFuZGxlS2V5RG93biIsImV2ZW50Iiwia2V5Q29kZSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiS2V5Q29kZSIsInoiLCJzaGlmdEtleSIsInJlZG8iLCJ1bmRvIiwieSIsImdldE5hbWUiLCJnZXROYW1lcyIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/UndoTool.js\n");

/***/ }),

/***/ "./extensions/Edit2D/tools/VertexMoveTool.js":
/*!***************************************************!*\
  !*** ./extensions/Edit2D/tools/VertexMoveTool.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VertexMoveTool)\n/* harmony export */ });\n/* harmony import */ var _Actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Actions.js */ \"./extensions/Edit2D/Actions.js\");\n/* harmony import */ var _Math2D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Math2D.js */ \"./extensions/Edit2D/Math2D.js\");\n/* harmony import */ var _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EditShapes.js */ \"./extensions/Edit2D/EditShapes.js\");\n/* harmony import */ var _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../CanvasGizmo.js */ \"./extensions/Edit2D/CanvasGizmo.js\");\n/* harmony import */ var _EditToolBase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EditToolBase.js */ \"./extensions/Edit2D/tools/EditToolBase.js\");\n\n\n\n\n\n\n\nconst VertexMoveToolName = \"Edit2_VertexMoveTool\";\n\nconst av = Autodesk.Viewing;\n\nconst vertexGizmoName = (index, loopIndex) => {\n  return 'PolygonEditTool_vertexGizmo_' + loopIndex.toString() + '_' + index.toString();\n};\n\nclass VertexMoveTool extends _EditToolBase_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n\n  constructor(ctx) {\n    super(ctx);\n\n    this.layer = ctx.layer;\n    this.selection = ctx.selection;\n    this.nameSuffix = `_${ctx.toolSetName}`;\n\n    this.keyMap.CancelEdit = av.KeyCode.ESCAPE;\n    this.keyMap.DeleteSelectedVertex = av.KeyCode.BACKSPACE;\n\n    // Track mouse position in layer-coords\n    this.mousePos = new THREE.Vector2();\n\n    // Array of VertexGizmo per loop\n    this.vertexGizmos = []; // VertexGizmo[][]\n\n    // Index of the vertex currently being dragged (or -1 if no dragging is active)\n    this.draggedVertex = null; // {PolyIndex}\n\n    // When dragging a vertex, this stores a copy of its original position\n    this.dragVertexStartPos = new THREE.Vector2();\n\n    // gizmos are enabled by default.\n    this.gizmosEnabled = true;\n\n    // selectedVertex is the one that was last clicked on. It is set together with draggedVertex,\n    // but (unlike draggedVertex) keeps the same after dragEnd.\n    // selectedVertex is the one that is highlighted and which will be deleted when pressing backspace.\n    this.selectedVertex = null; // {PolyIndex}\n\n    // When dragging vertices, we store the offset (in layer-coords) between the accurate click position and the center of the clicked vertex gizmo\n    // Stored in pixels.\n    this.dragOffset = new THREE.Vector2(0, 0);\n\n    // Last drag position in layer coords\n    this.lastDragPoint = new THREE.Vector2();\n  }\n\n  getName() {\n    return VertexMoveToolName + this.nameSuffix;\n  }\n\n  deactivate() {\n    super.deactivate();\n    this.reset();\n  }\n\n  setAllGizmosEnabled(enabled) {\n    this.gizmosEnabled = enabled;\n\n    this.updateVertexGizmos();\n  }\n\n  // create VertexGizmos for a single loop\n  updateVertexGizmoLoop(loopIndex) {\n\n    const gizmos = [];\n    const vertexCount = this.poly.getVertexCount(loopIndex);\n    for (let i = 0; i < vertexCount; i++) {\n\n      // create new vertex gizmo\n      let p = this.poly.getPoint(i, loopIndex);\n      let vertex = new _CanvasGizmo_js__WEBPACK_IMPORTED_MODULE_3__.VertexGizmo(this.gizmoLayer, p.x, p.y, vertexGizmoName(i, loopIndex));\n      vertex.attachToVertex(this.poly, i, loopIndex);\n      gizmos.push(vertex);\n\n      // We implement drag-behavior, so we want hover-highlight\n      vertex.setHoverEnabled(true);\n    }\n\n    this.vertexGizmos[loopIndex] = gizmos;\n  }\n\n  // Create VertexGizmos for all loops\n  updateVertexGizmos() {\n    // clear any outdated ones\n    this.clearVertexGizmos();\n\n    if (!this.gizmosEnabled) {\n      return;\n    }\n\n    if (this.poly) {\n      for (let l = 0; l < this.poly.loopCount; l++) {\n        this.updateVertexGizmoLoop(l);\n      }\n    }\n\n    // Make sure that vertex-highlighting is up to date\n    this.updateVertexHighlighting();\n  }\n\n  clearVertexGizmos() {\n    for (let l = 0; l < this.vertexGizmos.length; l++) {\n      const gizmos = this.vertexGizmos[l];\n      for (let i = 0; i < gizmos.length; i++) {\n        gizmos[i].dtor();\n      }\n    }\n    this.vertexGizmos.length = 0;\n  }\n\n  // Make sure that only the vertexGizmo is only highlighted for the selectedVertex (if any)\n  updateVertexHighlighting() {\n    const selected = this.selectedVertex;\n    for (let l = 0; l < this.vertexGizmos.length; l++) {\n      const gizmos = this.vertexGizmos[l];\n      for (let i = 0; i < gizmos.length; i++) {\n        gizmos[i].setSelected(selected && selected.vertex === i && selected.loop === l);\n      }\n    }\n  }\n\n  // Update vertex-gizmos, and tangent gizmos.\n  updateAllGizmos() {\n    this.updateVertexGizmos();\n  }\n\n  // @param{PolyIndex} polyIndex\n  setSelectedVertex(polyIndex) {\n    this.selectedVertex = this.poly ? polyIndex : null;\n    this.updateVertexHighlighting();\n  }\n\n  // Return index of the vertex gizmo under mouse. (or null if no vertexGizmo is hit)\n  // returns {PolyIndex}\n  findVertexUnderMouse() {\n    let vertexIndex = -1;\n    for (let l = 0; l < this.vertexGizmos.length; l++) {\n      const gizmos = this.vertexGizmos[l];\n      vertexIndex = this.gizmoManager.getGizmoIndex(gizmos);\n\n      // Return vertex index if we found one.\n      if (vertexIndex >= 0) {\n        return new _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyIndex({\n          loop: l,\n          vertex: vertexIndex\n        });\n      }\n    }\n    return null;\n  }\n\n  // Finishes editing of a previous polygon\n  reset() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    this.poly = null;\n    this.draggedVertex = null;\n    this.selectedVertex = null;\n\n    // Clear any gizmos from previous polygon\n    this.updateAllGizmos();\n\n    this.snapper.stopAngleSnapping();\n  }\n\n  // Selects a new polygon / polyline for editing\n  setEditPoly(poly) {\n\n    this.reset();\n\n    if (poly) {\n      this.poly = poly;\n      this.updateAllGizmos();\n    }\n  }\n\n  // If selection changes (may also be triggered outside this tool), we choose the selected polyon for editing\n  onSelectionChanged() {\n    const selected = this.selection.getSelectedShapes();\n\n    // Activate if exactly one shape is selected\n    const shape = selected.length == 1 ? selected[0] : null;\n    if (shape instanceof _EditShapes_js__WEBPACK_IMPORTED_MODULE_2__.PolyBase) {\n      this.setEditPoly(shape);\n    } else {\n      this.setEditPoly(null);\n    }\n  }\n\n  handleButtonDown(event, button) {\n    // Support suppressing mouse buttons by holding a key\n    if (this.ignoreDragging) {\n      return false;\n    }\n\n    super.handleButtonDown(event, button);\n\n    // Only respond to left mouse button.\n    if (!button == 0) {\n      return false;\n    }\n\n    const p = this.layer.canvasToLayer(event.canvasX, event.canvasY);\n    this.mousePos.copy(p);\n\n    // If we hit an existing vertex, start dragging it\n    const draggedVertex = this.findVertexUnderMouse();\n    if (draggedVertex) {\n      this.startDragVertex(event, draggedVertex);\n      this.startedDragging = true;\n      return true;\n    }\n\n    return false;\n  }\n\n\n  // @param {Event} event\n  // @param {PolyIndex} draggedVertex\n  startDragVertex(event, draggedVertex) {\n    if (this.mouseTracker) {\n      this.mouseTracker.startTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    // Configure angle snapping to consider latest state of the polygon\n    this.snapper.startAngleSnapping(this.poly.clone(), draggedVertex.vertex, draggedVertex.loop);\n\n    this.draggedVertex = draggedVertex;\n\n    // Store offset between exact mouse pos and the vertex we are dragging\n    const vpos = this.poly.getPoint(this.draggedVertex.vertex, this.draggedVertex.loop);\n    const vposScreen = this.layer.layerToCanvas(vpos.x, vpos.y);\n    this.dragOffset.set(vposScreen.x - event.canvasX, vposScreen.y - event.canvasY);\n\n    // highlight the vertex we clicked on\n    this.setSelectedVertex(this.draggedVertex);\n\n    this.lastDragPoint.copy(vpos);\n    this.dragVertexStartPos.copy(vpos);\n  }\n\n  moveDragVertex(canvasX, canvasY) {\n\n    const { loop, vertex } = this.draggedVertex;\n\n    // Note that the vertex we are dragging does not always match exactly with the mouse position. E.g., we may have picked the bottom-left boundary of a vertex gizmo at drag-start.\n    const x = canvasX + this.dragOffset.x;\n    const y = canvasY + this.dragOffset.y;\n\n    // get delta between last and current position\n    const p = this.getSnapPosition(x, y);\n    const dx = p.x - this.lastDragPoint.x;\n    const dy = p.y - this.lastDragPoint.y;\n\n    // apply this offset to polygon point\n    let point = this.poly.getPoint(vertex, loop);\n    this.poly.updatePoint(vertex, point.x + dx, point.y + dy, loop);\n\n    // re-center gizmo at new point position\n    const vertexGizmo = this.vertexGizmos[loop][vertex];\n    vertexGizmo.setPosition(point.x, point.y);\n\n    this.gizmoLayer.update(); // we moved the vertex gizmo\n    this.layer.update(); // we changed the main polygon\n\n    this.lastDragPoint.copy(p);\n  }\n\n  restoreDragVertex() {\n    this.poly.updatePoint(this.draggedVertex.vertex, this.dragVertexStartPos.x, this.dragVertexStartPos.y, this.draggedVertex.loop);\n  }\n\n  endDragVertex() {\n    if (this.mouseTracker) {\n      this.mouseTracker.stopTracking(this.getName(), Autodesk.Edit2D.Trackings.Drag);\n    }\n\n    // First, restore \"before move\" position of the vertex\n    this.restoreDragVertex();\n\n    const pBefore = this.dragVertexStartPos;\n    const pAfter = this.lastDragPoint;\n\n    // don't add extra undo-operation if the vertex was hardly moved at all\n    const minDist = this.layer.getUnitsPerPixel() * 0.5;\n    const moved = pBefore.distanceTo(pAfter) > minDist;\n\n    if (moved) {\n      // Finalize vertex-move\n      this.runAction(new _Actions_js__WEBPACK_IMPORTED_MODULE_0__.Actions.MoveVertex(this.layer, this.poly, this.draggedVertex, pAfter));\n    }\n\n    this.draggedVertex = null;\n    this.snapper.clearSnappingGizmos();\n  }\n\n  handleMouseMove(event) {\n    super.handleMouseMove(event);\n\n    this.mousePos.copy(this.layer.canvasToLayer(event.canvasX, event.canvasY));\n\n    if (!this.poly) {\n      return false;\n    }\n\n    if (this.draggedVertex) {\n      this.moveDragVertex(event.canvasX, event.canvasY);\n      return true;\n    }\n\n    return false;\n  }\n\n  handleButtonUp(event, button) {\n    super.handleButtonUp(event, button);\n\n    const wasDragging = this.startedDragging;\n    this.startedDragging = false;\n\n    if (this.draggedVertex) {\n      this.endDragVertex();\n      return true;\n    }\n\n    // Consider all left-button events as handled. E.g., if dragging was cancelled using Esc,\n    // we do nothing here, but letting the mouseUp pass to navigation classes would cause camera jumps.\n    return !this.ignoreDragging && wasDragging;\n  }\n\n  // Exclude currently edited polygon from snapping: The polygon shouldn't snap to itself, but rather\n  // to geometry below it.\n  snappingFilter(shape) {\n    return shape !== this.poly;\n  }\n\n  handleKeyDown(event, keyCode) {\n    let handled = super.handleKeyDown(event, keyCode);\n\n    if (keyCode === this.keyMap.CancelEdit) {\n      handled = this.cancelDrag();\n    }\n\n    return handled;\n  }\n\n  cancelDrag() {\n\n    let needsUpdate = false;\n\n    if (this.draggedVertex) {\n      this.restoreDragVertex();\n      this.draggedVertex = null;\n      needsUpdate = true;\n    }\n\n    if (needsUpdate) {\n      this.updateAllGizmos();\n      this.layer.update();\n    }\n\n    this.snapper.clearSnappingGizmos();\n\n    return needsUpdate;\n  }\n\n  // If snapping has toggled on/off, we instantly \"replay\" hovering at current mouse position. Purpose is to\n  // give instant feedback (e.g. hide/show SnapLine gizmos and adjust position of preview edge)\n  onSnappingToggled(canvasX, canvasY) {\n\n    // If we are dragging a vertex, toggling snapping will affect the result and\n    // we should update line gizmos and snapping lines.\n    if (this.draggedVertex) {\n      this.moveDragVertex(canvasX, canvasY);\n    }\n  }\n\n  // Updates selection of shape(s), vertex, and edge after an action\n  updateSelectionState(action, isUndo) {\n    // Check if the action provides a hint how we should update selection\n    const hint = action.getSelectionHint(isUndo);\n    if (hint) {\n      this.setSelectedVertex(hint.vertex);\n      return;\n    }\n\n    // Default behavior - if we don't know anything better:\n    //  - Keep shape selected if still existing\n    //  - Reset vertex/edge selection\n\n    // If shape was removed, reset state\n    const shapeFound = Boolean(this.poly && this.layer.findShapeById(this.poly.id));\n    if (!shapeFound) {\n      this.reset();\n    }\n\n    this.setSelectedVertex(null);\n  }\n\n  handleExternalAction(action, isUndo) {\n\n    // make sure that selected edge/vertex are still valid (or switched off)\n    this.updateSelectionState(action, isUndo);\n\n    // Stop any ongoing drag-operations (e.g., an undo operation might have removed the vertex that we are just dragging)\n    this.cancelDrag();\n\n    // Sync gizmos in case vertices were modified\n    this.updateAllGizmos();\n\n    this.snapper.clearSnappingGizmos();\n  }\n\n  getCursor() {\n\n    if (!this.poly) {\n      return;\n    }\n\n    // Note: Vertex gizmos and edge gizmos are separate DomElements and define own mouse cursors via style.\n    // Indicate: \"Moving a gizmo\". Currently, we use the same as for shape move. Note that\n    //           the cursor for gizmo dragging must be consistent with the one we have if the mouse is on the gizmo.\n    //           Otherwise, the mouse cursor would change its state when temporarily leaving the gizmo on fast moves.\n    if (this.draggedVertex) {\n      return 'move';\n    }\n\n    // => Just default cursor\n    return undefined;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit2D/tools/VertexMoveTool.js\n");

/***/ }),

/***/ "./extensions/MSDF/Vector2.js":
/*!************************************!*\
  !*** ./extensions/MSDF/Vector2.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vector2: () => (/* binding */ Vector2)\n/* harmony export */ });\n/**\n * Vector2D copied from THREEJS\n * IT will reduce the bundle size when we put it into worker\n */\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nfunction Vector2(x, y) {\n\n  this.x = x || 0;\n  this.y = y || 0;\n\n}\n\nObject.defineProperties(Vector2.prototype, {\n\n  \"width\": {\n\n    get: function () {\n\n      return this.x;\n\n    },\n\n    set: function (value) {\n\n      this.x = value;\n\n    }\n\n  },\n\n  \"height\": {\n\n    get: function () {\n\n      return this.y;\n\n    },\n\n    set: function (value) {\n\n      this.y = value;\n\n    }\n\n  }\n\n});\n\nObject.assign(Vector2.prototype, {\n\n  isVector2: true,\n\n  set: function (x, y) {\n\n    this.x = x;\n    this.y = y;\n\n    return this;\n\n  },\n\n  setScalar: function (scalar) {\n\n    this.x = scalar;\n    this.y = scalar;\n\n    return this;\n\n  },\n\n  setX: function (x) {\n\n    this.x = x;\n\n    return this;\n\n  },\n\n  setY: function (y) {\n\n    this.y = y;\n\n    return this;\n\n  },\n\n  setComponent: function (index, value) {\n\n    switch (index) {\n\n      case 0:this.x = value;break;\n      case 1:this.y = value;break;\n      default:throw new Error('index is out of range: ' + index);\n\n    }\n\n    return this;\n\n  },\n\n  getComponent: function (index) {\n\n    switch (index) {\n\n      case 0:return this.x;\n      case 1:return this.y;\n      default:throw new Error('index is out of range: ' + index);\n\n    }\n\n  },\n\n  clone: function () {\n\n    return new this.constructor(this.x, this.y);\n\n  },\n\n  copy: function (v) {\n\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n\n  },\n\n  add: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n\n  },\n\n  addScalar: function (s) {\n\n    this.x += s;\n    this.y += s;\n\n    return this;\n\n  },\n\n  addVectors: function (a, b) {\n\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n\n  },\n\n  addScaledVector: function (v, s) {\n\n    this.x += v.x * s;\n    this.y += v.y * s;\n\n    return this;\n\n  },\n\n  sub: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n\n  },\n\n  subScalar: function (s) {\n\n    this.x -= s;\n    this.y -= s;\n\n    return this;\n\n  },\n\n  subVectors: function (a, b) {\n\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n\n  },\n\n  multiply: function (v) {\n\n    this.x *= v.x;\n    this.y *= v.y;\n\n    return this;\n\n  },\n\n  multiplyScalar: function (scalar) {\n\n    this.x *= scalar;\n    this.y *= scalar;\n\n    return this;\n\n  },\n\n  divide: function (v) {\n\n    this.x /= v.x;\n    this.y /= v.y;\n\n    return this;\n\n  },\n\n  divideScalar: function (scalar) {\n\n    return this.multiplyScalar(1 / scalar);\n\n  },\n\n  applyMatrix3: function (m) {\n\n    var x = this.x,y = this.y;\n    var e = m.elements;\n\n    this.x = e[0] * x + e[3] * y + e[6];\n    this.y = e[1] * x + e[4] * y + e[7];\n\n    return this;\n\n  },\n\n  min: function (v) {\n\n    this.x = Math.min(this.x, v.x);\n    this.y = Math.min(this.y, v.y);\n\n    return this;\n\n  },\n\n  max: function (v) {\n\n    this.x = Math.max(this.x, v.x);\n    this.y = Math.max(this.y, v.y);\n\n    return this;\n\n  },\n\n  clamp: function (min, max) {\n\n    // assumes min < max, componentwise\n\n    this.x = Math.max(min.x, Math.min(max.x, this.x));\n    this.y = Math.max(min.y, Math.min(max.y, this.y));\n\n    return this;\n\n  },\n\n  clampScalar: function (minVal, maxVal) {\n\n    this.x = Math.max(minVal, Math.min(maxVal, this.x));\n    this.y = Math.max(minVal, Math.min(maxVal, this.y));\n\n    return this;\n\n  },\n\n  clampLength: function (min, max) {\n\n    var length = this.length();\n\n    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\n  },\n\n  floor: function () {\n\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n\n    return this;\n\n  },\n\n  ceil: function () {\n\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n\n    return this;\n\n  },\n\n  round: function () {\n\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n\n    return this;\n\n  },\n\n  roundToZero: function () {\n\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\n    return this;\n\n  },\n\n  negate: function () {\n\n    this.x = -this.x;\n    this.y = -this.y;\n\n    return this;\n\n  },\n\n  dot: function (v) {\n\n    return this.x * v.x + this.y * v.y;\n\n  },\n\n  cross: function (v) {\n\n    return this.x * v.y - this.y * v.x;\n\n  },\n\n  lengthSq: function () {\n\n    return this.x * this.x + this.y * this.y;\n\n  },\n\n  length: function () {\n\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n\n  },\n\n  manhattanLength: function () {\n\n    return Math.abs(this.x) + Math.abs(this.y);\n\n  },\n\n  normalize: function () {\n\n    return this.divideScalar(this.length() || 1);\n\n  },\n\n  angle: function () {\n\n    // computes the angle in radians with respect to the positive x-axis\n\n    var angle = Math.atan2(this.y, this.x);\n\n    if (angle < 0) angle += 2 * Math.PI;\n\n    return angle;\n\n  },\n\n  distanceTo: function (v) {\n\n    return Math.sqrt(this.distanceToSquared(v));\n\n  },\n\n  distanceToSquared: function (v) {\n\n    var dx = this.x - v.x,dy = this.y - v.y;\n    return dx * dx + dy * dy;\n\n  },\n\n  manhattanDistanceTo: function (v) {\n\n    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\n  },\n\n  setLength: function (length) {\n\n    return this.normalize().multiplyScalar(length);\n\n  },\n\n  lerp: function (v, alpha) {\n\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n\n  },\n\n  lerpVectors: function (v1, v2, alpha) {\n\n    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n\n  },\n\n  equals: function (v) {\n\n    return v.x === this.x && v.y === this.y;\n\n  },\n\n  fromArray: function (array, offset) {\n\n    if (offset === undefined) offset = 0;\n\n    this.x = array[offset];\n    this.y = array[offset + 1];\n\n    return this;\n\n  },\n\n  toArray: function (array, offset) {\n\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n\n    return array;\n\n  },\n\n  fromBufferAttribute: function (attribute, index, offset) {\n\n    if (offset !== undefined) {\n\n      console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\n    }\n\n    this.x = attribute.getX(index);\n    this.y = attribute.getY(index);\n\n    return this;\n\n  },\n\n  rotateAround: function (center, angle) {\n\n    var c = Math.cos(angle),s = Math.sin(angle);\n\n    var x = this.x - center.x;\n    var y = this.y - center.y;\n\n    this.x = x * c - y * s + center.x;\n    this.y = x * s + y * c + center.y;\n\n    return this;\n\n  }\n\n});\n\nVector2.prototype.isEmtpy = function () {\n  return !this.x && !this.y;\n};\n\nVector2.prototype.getOrthogonal = function (polarity) {\n  return polarity ? new Vector2(-this.y, this.x) : new Vector2(this.y, this.x);\n};\n\nVector2.prototype.getOrthonormal = function (polarity) {let allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let len = this.length();\n  if (len == 0) {\n    let y = !allowZero ? 1 : 0;\n    return polarity ? new Vector2(0, y) : new Vector2(0, -y);\n  }\n  return polarity ? new Vector2(-this.y / len, this.x / len) : new Vector2(this.y / len, -this.x / len);\n};\n\nVector2.prototype.cross = function (v) {\n  return this.x * v.y - this.y * v.x;\n};\n\n\nVector2.prototype.normalizeExt = function (allowZero) {\n  let len = this.length();\n  if (Math.abs(len) <= 0.0000001)\n  return new Vector2(0, allowZero ? 0 : 1);\n  return new Vector2(this.x / len, this.y / len);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/MSDF/Vector2.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Edit2D/Edit2D.css":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Edit2D/Edit2D.css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.adsk-viewing-viewer .edge-gizmo:hover {\n  background-color: rgb(0, 255, 0);\n}\n\n.adsk-viewing-viewer .edge-gizmo {\n  position: absolute;\n  background-color: #009bff;\n  box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.25);\n  border-radius: 8px;\n  cursor: move;\n  z-index: 1; /* Place above the viewer but below the measure labels, which are at 2 */\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.adsk-viewing-viewer .edge-gizmo.selected {\n  background-color: rgb(0, 255, 0);\n}\n\n.adsk-viewing-viewer .vertex-gizmo:hover.vertex-gizmo.enable-hover {\n  border-color: rgb(0, 255, 0);\n}\n\n.adsk-viewing-viewer .vertex-gizmo {\n  display: inline-block;\n  position: absolute;\n  width: 7px;\n  height: 7px;\n  left: -2px;\n  top: -2px;\n  background-color: #009bff;\n  border-style: solid;\n  border-width: 2px;\n  border-color: #FFFFFF;\n  border-radius: 100px;\n  box-shadow: 0 2px 5px 0 #182A3D;\n  z-index: 1; /* Place above the viewer but below the measure labels, which are at 2 */\n  cursor: move;\n}\n\n.adsk-viewing-viewer .ellipse-arc-gizmo {\n  display: inline-block;\n  position: absolute;\n  width: 5px;\n  height: 5px;\n  left: -1px;\n  top: -1px;\n  background-color: #ff00ff;\n  border-style: solid;\n  border-width: 1px;\n  border-color: #000000;\n  border-radius: 100px;\n  box-shadow: 0 2px 5px 0 #182A3D;\n  z-index: 2; /* Must always be in front of the EdgeMove gizmo. Otherwise it would become unreachable on low radii.*/\n  cursor: move;\n}\n\n.adsk-viewing-viewer .vertex-gizmo.selected {\n  border-color: rgb(0, 255, 0);\n}\n\n.adsk-viewing-viewer .edge-move-gizmo {\n  width: 20px; /* width along the edge */\n  height: 6px; /* height vertical to the edge */\n}\n\n.adsk-viewing-viewer .edit2d-label {\n  display: none;\n  position: absolute;\n  height: 19px;\n  left: 0px;\n  top: 0px;\n  padding: 2px 0 2px 0;\n  background-color: #009bff;\n  box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.25);\n  color: #f4f4f4;\n  font-size: 12px;\n  text-align: center;\n  line-height: 1.2;\n  white-space: nowrap;\n  border-radius: 8px;\n  pointer-events: none;\n  cursor: pointer;\n  z-index: 2;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n.adsk-viewing-viewer .edit2d-label.visible {\n  display: block;\n}\n\n.adsk-viewing-viewer .edit2d-label-text {\n  display: inline-block;\n  margin: 0 5px 0 5px;\n  vertical-align: middle;\n  font-size: 16px;\n  pointer-events: none;\n}\n\n/* Mark area labels for invalid shapes with red background */\n.adsk-viewing-viewer .edit2d-label.error-indicator {\n  background-color: red;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./extensions/Edit2D/Edit2D.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,gCAAgC;AAClC;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,+CAA+C;EAC/C,kBAAkB;EAClB,YAAY;EACZ,UAAU,EAAE,wEAAwE;EACpF,6CAA6C;AAC/C;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,UAAU;EACV,SAAS;EACT,yBAAyB;EACzB,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;EACrB,oBAAoB;EACpB,+BAA+B;EAC/B,UAAU,EAAE,wEAAwE;EACpF,YAAY;AACd;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,UAAU;EACV,SAAS;EACT,yBAAyB;EACzB,mBAAmB;EACnB,iBAAiB;EACjB,qBAAqB;EACrB,oBAAoB;EACpB,+BAA+B;EAC/B,UAAU,EAAE,sGAAsG;EAClH,YAAY;AACd;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,WAAW,EAAE,yBAAyB;EACtC,WAAW,EAAE,gCAAgC;AAC/C;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,YAAY;EACZ,SAAS;EACT,QAAQ;EACR,oBAAoB;EACpB,yBAAyB;EACzB,+CAA+C;EAC/C,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;EACf,UAAU;EACV,6CAA6C;AAC/C;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;EACf,oBAAoB;AACtB;;AAEA,4DAA4D;AAC5D;EACE,qBAAqB;AACvB\",\"sourcesContent\":[\".adsk-viewing-viewer .edge-gizmo:hover {\\n  background-color: rgb(0, 255, 0);\\n}\\n\\n.adsk-viewing-viewer .edge-gizmo {\\n  position: absolute;\\n  background-color: #009bff;\\n  box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.25);\\n  border-radius: 8px;\\n  cursor: move;\\n  z-index: 1; /* Place above the viewer but below the measure labels, which are at 2 */\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n}\\n\\n.adsk-viewing-viewer .edge-gizmo.selected {\\n  background-color: rgb(0, 255, 0);\\n}\\n\\n.adsk-viewing-viewer .vertex-gizmo:hover.vertex-gizmo.enable-hover {\\n  border-color: rgb(0, 255, 0);\\n}\\n\\n.adsk-viewing-viewer .vertex-gizmo {\\n  display: inline-block;\\n  position: absolute;\\n  width: 7px;\\n  height: 7px;\\n  left: -2px;\\n  top: -2px;\\n  background-color: #009bff;\\n  border-style: solid;\\n  border-width: 2px;\\n  border-color: #FFFFFF;\\n  border-radius: 100px;\\n  box-shadow: 0 2px 5px 0 #182A3D;\\n  z-index: 1; /* Place above the viewer but below the measure labels, which are at 2 */\\n  cursor: move;\\n}\\n\\n.adsk-viewing-viewer .ellipse-arc-gizmo {\\n  display: inline-block;\\n  position: absolute;\\n  width: 5px;\\n  height: 5px;\\n  left: -1px;\\n  top: -1px;\\n  background-color: #ff00ff;\\n  border-style: solid;\\n  border-width: 1px;\\n  border-color: #000000;\\n  border-radius: 100px;\\n  box-shadow: 0 2px 5px 0 #182A3D;\\n  z-index: 2; /* Must always be in front of the EdgeMove gizmo. Otherwise it would become unreachable on low radii.*/\\n  cursor: move;\\n}\\n\\n.adsk-viewing-viewer .vertex-gizmo.selected {\\n  border-color: rgb(0, 255, 0);\\n}\\n\\n.adsk-viewing-viewer .edge-move-gizmo {\\n  width: 20px; /* width along the edge */\\n  height: 6px; /* height vertical to the edge */\\n}\\n\\n.adsk-viewing-viewer .edit2d-label {\\n  display: none;\\n  position: absolute;\\n  height: 19px;\\n  left: 0px;\\n  top: 0px;\\n  padding: 2px 0 2px 0;\\n  background-color: #009bff;\\n  box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.25);\\n  color: #f4f4f4;\\n  font-size: 12px;\\n  text-align: center;\\n  line-height: 1.2;\\n  white-space: nowrap;\\n  border-radius: 8px;\\n  pointer-events: none;\\n  cursor: pointer;\\n  z-index: 2;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n}\\n\\n.adsk-viewing-viewer .edit2d-label.visible {\\n  display: block;\\n}\\n\\n.adsk-viewing-viewer .edit2d-label-text {\\n  display: inline-block;\\n  margin: 0 5px 0 5px;\\n  vertical-align: middle;\\n  font-size: 16px;\\n  pointer-events: none;\\n}\\n\\n/* Mark area labels for invalid shapes with red background */\\n.adsk-viewing-viewer .edit2d-label.error-indicator {\\n  background-color: red;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Edit2D/Edit2D.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var hashClear = __webpack_require__(/*! ./_hashClear */ \"./node_modules/lodash/_hashClear.js\"),\n    hashDelete = __webpack_require__(/*! ./_hashDelete */ \"./node_modules/lodash/_hashDelete.js\"),\n    hashGet = __webpack_require__(/*! ./_hashGet */ \"./node_modules/lodash/_hashGet.js\"),\n    hashHas = __webpack_require__(/*! ./_hashHas */ \"./node_modules/lodash/_hashHas.js\"),\n    hashSet = __webpack_require__(/*! ./_hashSet */ \"./node_modules/lodash/_hashSet.js\");\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjO0FBQ3RDLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyxxREFBWTtBQUNsQyxjQUFjLG1CQUFPLENBQUMscURBQVk7QUFDbEMsY0FBYyxtQkFBTyxDQUFDLHFEQUFZOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcz9lMjRiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_Hash.js\n");

/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ \"./node_modules/lodash/_listCacheClear.js\"),\n    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ \"./node_modules/lodash/_listCacheDelete.js\"),\n    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ \"./node_modules/lodash/_listCacheGet.js\"),\n    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ \"./node_modules/lodash/_listCacheHas.js\"),\n    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ \"./node_modules/lodash/_listCacheSet.js\");\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1CO0FBQ2hELHNCQUFzQixtQkFBTyxDQUFDLHFFQUFvQjtBQUNsRCxtQkFBbUIsbUJBQU8sQ0FBQywrREFBaUI7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzVDLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcz81ZTJlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_ListCache.js\n");

/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getNative = __webpack_require__(/*! ./_getNative */ \"./node_modules/lodash/_getNative.js\"),\n    root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMseURBQWM7QUFDdEMsV0FBVyxtQkFBTyxDQUFDLCtDQUFTOztBQUU1QjtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcz83OWJjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_Map.js\n");

/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ \"./node_modules/lodash/_mapCacheClear.js\"),\n    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ \"./node_modules/lodash/_mapCacheDelete.js\"),\n    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ \"./node_modules/lodash/_mapCacheGet.js\"),\n    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ \"./node_modules/lodash/_mapCacheHas.js\"),\n    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ \"./node_modules/lodash/_mapCacheSet.js\");\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxvQkFBb0IsbUJBQU8sQ0FBQyxpRUFBa0I7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1CO0FBQ2hELGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMxQyxrQkFBa0IsbUJBQU8sQ0FBQyw2REFBZ0I7QUFDMUMsa0JBQWtCLG1CQUFPLENBQUMsNkRBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanM/N2I4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_MapCache.js\n");

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLCtDQUFTOztBQUU1QjtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcz85ZTY5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_Symbol.js\n");

/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzPzc5NDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_arrayMap.js\n");

/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ \"./node_modules/lodash/_baseAssignValue.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDbEQsU0FBUyxtQkFBTyxDQUFDLHlDQUFNOztBQUV2QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzPzMyYjMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_assignValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\");\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLHlDQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzP2NiNWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_assocIndexOf.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var defineProperty = __webpack_require__(/*! ./_defineProperty */ \"./node_modules/lodash/_defineProperty.js\");\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1COztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnblZhbHVlLmpzPzg3MmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseAssignValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\"),\n    getRawTag = __webpack_require__(/*! ./_getRawTag */ \"./node_modules/lodash/_getRawTag.js\"),\n    objectToString = __webpack_require__(/*! ./_objectToString */ \"./node_modules/lodash/_objectToString.js\");\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxtREFBVztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyxtRUFBbUI7O0FBRWhEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzPzM3MjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseGetTag.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isFunction = __webpack_require__(/*! ./isFunction */ \"./node_modules/lodash/isFunction.js\"),\n    isMasked = __webpack_require__(/*! ./_isMasked */ \"./node_modules/lodash/_isMasked.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    toSource = __webpack_require__(/*! ./_toSource */ \"./node_modules/lodash/_toSource.js\");\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMseURBQWM7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLHVEQUFhO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsdURBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzPzM0YWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseIsNative.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var assignValue = __webpack_require__(/*! ./_assignValue */ \"./node_modules/lodash/_assignValue.js\"),\n    castPath = __webpack_require__(/*! ./_castPath */ \"./node_modules/lodash/_castPath.js\"),\n    isIndex = __webpack_require__(/*! ./_isIndex */ \"./node_modules/lodash/_isIndex.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    toKey = __webpack_require__(/*! ./_toKey */ \"./node_modules/lodash/_toKey.js\");\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsdURBQWE7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLHFEQUFZO0FBQ2xDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxZQUFZLG1CQUFPLENBQUMsaURBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsY0FBYztBQUN6QixXQUFXLEdBQUc7QUFDZCxXQUFXLFVBQVU7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0LmpzPzE1OWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseSet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\"),\n    arrayMap = __webpack_require__(/*! ./_arrayMap */ \"./node_modules/lodash/_arrayMap.js\"),\n    isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\"),\n    isSymbol = __webpack_require__(/*! ./isSymbol */ \"./node_modules/lodash/isSymbol.js\");\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLG1EQUFXO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyx1REFBYTtBQUNwQyxjQUFjLG1CQUFPLENBQUMsbURBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcz9jZTg2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\"),\n    isKey = __webpack_require__(/*! ./_isKey */ \"./node_modules/lodash/_isKey.js\"),\n    stringToPath = __webpack_require__(/*! ./_stringToPath */ \"./node_modules/lodash/_stringToPath.js\"),\n    toString = __webpack_require__(/*! ./toString */ \"./node_modules/lodash/toString.js\");\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsbURBQVc7QUFDakMsWUFBWSxtQkFBTyxDQUFDLGlEQUFVO0FBQzlCLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjtBQUM1QyxlQUFlLG1CQUFPLENBQUMscURBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcz9lMmU0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_castPath.js\n");

/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQywrQ0FBUzs7QUFFNUI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzP2RhMDMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_coreJsData.js\n");

/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getNative = __webpack_require__(/*! ./_getNative */ \"./node_modules/lodash/_getNative.js\");\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsSUFBSTtBQUNKLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanM/M2I0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_defineProperty.js\n");

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\nmodule.exports = freeGlobal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esd0JBQXdCLHFCQUFNLGdCQUFnQixxQkFBTSxJQUFJLHFCQUFNLHNCQUFzQixxQkFBTTs7QUFFMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcz81ODVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_freeGlobal.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isKeyable = __webpack_require__(/*! ./_isKeyable */ \"./node_modules/lodash/_isKeyable.js\");\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanM/NDI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getMapData.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ \"./node_modules/lodash/_baseIsNative.js\"),\n    getValue = __webpack_require__(/*! ./_getValue */ \"./node_modules/lodash/_getValue.js\");\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyx1REFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcz8wYjA3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getNative.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLG1EQUFXOztBQUVoQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcz8wMGZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getRawTag.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ ((module) => {

eval("/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"./node_modules/lodash/_nativeCreate.js\");\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcz80OWY0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_hashClear.js\n");

/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ ((module) => {

eval("/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzPzFlZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_hashDelete.js\n");

/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"./node_modules/lodash/_nativeCreate.js\");\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcz9iYmMwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_hashGet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"./node_modules/lodash/_nativeCreate.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzPzdhNDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_hashHas.js\n");

/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ \"./node_modules/lodash/_nativeCreate.js\");\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanM/MjUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_hashSet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzP2MwOTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isIndex.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\"),\n    isSymbol = __webpack_require__(/*! ./isSymbol */ \"./node_modules/lodash/isSymbol.js\");\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsbURBQVc7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzP2Y2MDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isKey.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ ((module) => {

eval("/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzPzEyOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isKeyable.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var coreJsData = __webpack_require__(/*! ./_coreJsData */ \"./node_modules/lodash/_coreJsData.js\");\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcz8xMzY4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isMasked.js\n");

/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzPzI4YzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_listCacheClear.js\n");

/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"./node_modules/lodash/_assocIndexOf.js\");\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanM/NjlkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_listCacheDelete.js\n");

/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"./node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxHQUFHO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzP2I0YzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_listCacheGet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"./node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcz9mYmE1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_listCacheHas.js\n");

/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ \"./node_modules/lodash/_assocIndexOf.js\");\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLG1CQUFPLENBQUMsK0RBQWlCOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanM/NjdjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_listCacheSet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Hash = __webpack_require__(/*! ./_Hash */ \"./node_modules/lodash/_Hash.js\"),\n    ListCache = __webpack_require__(/*! ./_ListCache */ \"./node_modules/lodash/_ListCache.js\"),\n    Map = __webpack_require__(/*! ./_Map */ \"./node_modules/lodash/_Map.js\");\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQywrQ0FBUztBQUM1QixnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYztBQUN0QyxVQUFVLG1CQUFPLENBQUMsNkNBQVE7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzPzdjNjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_mapCacheClear.js\n");

/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getMapData = __webpack_require__(/*! ./_getMapData */ \"./node_modules/lodash/_getMapData.js\");\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanM/OTNlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_mapCacheDelete.js\n");

/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getMapData = __webpack_require__(/*! ./_getMapData */ \"./node_modules/lodash/_getMapData.js\");\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcz8yNDc4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_mapCacheGet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getMapData = __webpack_require__(/*! ./_getMapData */ \"./node_modules/lodash/_getMapData.js\");\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUhhcy5qcz9hNTI0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_mapCacheHas.js\n");

/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getMapData = __webpack_require__(/*! ./_getMapData */ \"./node_modules/lodash/_getMapData.js\");\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcz8xZmM4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_mapCacheSet.js\n");

/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var memoize = __webpack_require__(/*! ./memoize */ \"./node_modules/lodash/memoize.js\");\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxtREFBVzs7QUFFakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanM/MjM0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_memoizeCapped.js\n");

/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var getNative = __webpack_require__(/*! ./_getNative */ \"./node_modules/lodash/_getNative.js\");\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMseURBQWM7O0FBRXRDO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzPzYwNDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_nativeCreate.js\n");

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ ((module) => {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcz8yOWYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_objectToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"./node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlOztBQUV4QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcz8yYjNlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_root.js\n");

/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ \"./node_modules/lodash/_memoizeCapped.js\");\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMsaUVBQWtCOztBQUU5QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcz8xOGQ4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_stringToPath.js\n");

/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isSymbol = __webpack_require__(/*! ./isSymbol */ \"./node_modules/lodash/isSymbol.js\");\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMscURBQVk7O0FBRW5DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcz9mNGQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_toKey.js\n");

/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ ((module) => {

eval("/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanM/ZGM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_toSource.js\n");

/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

eval("/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzPzk2MzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/eq.js\n");

/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

eval("/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcz82NzQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzPzk1MjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isFunction.js\n");

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzPzFhOGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcz8xMzEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObjectLike.js\n");

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcz9mZmQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isSymbol.js\n");

/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var MapCache = __webpack_require__(/*! ./_MapCache */ \"./node_modules/lodash/_MapCache.js\");\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHVEQUFhOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcz9lMzgwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/memoize.js\n");

/***/ }),

/***/ "./node_modules/lodash/set.js":
/*!************************************!*\
  !*** ./node_modules/lodash/set.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseSet = __webpack_require__(/*! ./_baseSet */ \"./node_modules/lodash/_baseSet.js\");\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nmodule.exports = set;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NldC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMscURBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGNBQWM7QUFDekIsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUSxPQUFPLFVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc2V0LmpzPzBmNWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VTZXQgPSByZXF1aXJlKCcuL19iYXNlU2V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gKiBgcGF0aGAgY3JlYXRpb24uXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICogLy8gPT4gNFxuICpcbiAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAqIC8vID0+IDVcbiAqL1xuZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/set.js\n");

/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseToString = __webpack_require__(/*! ./_baseToString */ \"./node_modules/lodash/_baseToString.js\");\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLG1CQUFtQixtQkFBTyxDQUFDLCtEQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanM/NzZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/toString.js\n");

/***/ }),

/***/ "./extensions/Edit2D/Edit2D.css":
/*!**************************************!*\
  !*** ./extensions/Edit2D/Edit2D.css ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Edit2D_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!../../node_modules/css-unicode-loader/index.js!../../node_modules/sass-loader/dist/cjs.js!./Edit2D.css */ \"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Edit2D/Edit2D.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Edit2D_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Edit2D_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Edit2D_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Edit2D_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQyRC9FZGl0MkQuY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE1BQWtHO0FBQ2xHLE1BQXdGO0FBQ3hGLE1BQStGO0FBQy9GLE1BQWtIO0FBQ2xILE1BQTJHO0FBQzNHLE1BQTJHO0FBQzNHLE1BQXVTO0FBQ3ZTO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLHFHQUFtQjtBQUMvQyx3QkFBd0Isa0hBQWE7O0FBRXJDLHVCQUF1Qix1R0FBYTtBQUNwQztBQUNBLGlCQUFpQiwrRkFBTTtBQUN2Qiw2QkFBNkIsc0dBQWtCOztBQUUvQyxhQUFhLDBHQUFHLENBQUMsNlBBQU87Ozs7QUFJaVA7QUFDelEsT0FBTyxpRUFBZSw2UEFBTyxJQUFJLDZQQUFPLFVBQVUsNlBBQU8sbUJBQW1CLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9FZGl0MkQvRWRpdDJELmNzcz9iN2Y4Il0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy11bmljb2RlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9FZGl0MkQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy11bmljb2RlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9FZGl0MkQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit2D/Edit2D.css\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcz9lNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./extensions/Edit2D/SegmentTreeWorker.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./extensions/Edit2D/SegmentTreeWorker.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Worker_fn)\n/* harmony export */ });\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !!../../node_modules/worker-loader/dist/runtime/inline.js */ \"./node_modules/worker-loader/dist/runtime/inline.js\");\n/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Worker_fn() {\n  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()(\"/*!\\n * LMV v7.105.0\\n *\\n * Copyright 2025 Autodesk, Inc.\\n * All rights reserved.\\n *\\n * This computer source code and related instructions and comments are the\\n * unpublished confidential and proprietary information of Autodesk, Inc.\\n * and are protected under Federal copyright and state trade secret law.\\n * They may not be disclosed to, copied or used by any third party without\\n * the prior written consent of Autodesk, Inc.\\n *\\n * Autodesk Viewer SDK Usage Limitations:\\n *\\n * The Autodesk Viewer SDK JavaScript must be delivered from an\\n * Autodesk-hosted URL.\\n */\\n/*\\n * ATTENTION: An \\\"eval-source-map\\\" devtool has been used.\\n * This devtool is neither made for production nor for readable output files.\\n * It uses \\\"eval()\\\" calls to create a separate source file with attached SourceMaps in the browser devtools.\\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\\n * or disable the default devtool with \\\"devtool: false\\\".\\n * If you are looking for production-ready output files, see mode: \\\"production\\\" (https://webpack.js.org/configuration/mode/).\\n */\\n/******/ (() => { // webpackBootstrap\\n/******/ \\t\\\"use strict\\\";\\n/******/ \\tvar __webpack_modules__ = ({\\n\\n/***/ \\\"./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[0]!./extensions/Edit2D/SegmentTreeWorker.js\\\":\\n/*!*********************************************************************************************************************!*\\\\\\n  !*** ./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[0]!./extensions/Edit2D/SegmentTreeWorker.js ***!\\n  \\\\*********************************************************************************************************************/\\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\\n\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _src_wgs_scene_VertexBufferReader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/wgs/scene/VertexBufferReader */ \\\\\\\"./src/wgs/scene/VertexBufferReader.js\\\\\\\");\\\\n\\\\n\\\\nconst primCountPerBatch = 5000; // The number of primitives per batch.\\\\nconst numOfArgs = 8; // Number of arguments per primitive\\\\nconst stride = numOfArgs + 1; // Number of arguments plus the position for the primitive type.\\\\nconst size = stride * primCountPerBatch; // Size for the Float64Array\\\\n\\\\n// Allocate the number of arguments per primitive plus a position for the primitive type and multiply it by the batch count.\\\\n// Float64Array is required because there were float arguments that contained more than 7 digits.\\\\nlet primitiveBatch = new Float64Array(size);\\\\n\\\\nlet numGeoms = 0; // Number of geometries processed\\\\nlet totalGeoms = 0; // Total number of geometries to process. This is passed in from the main thread.\\\\nlet batchIndex = 0; // Keeps track of the batch index. When the limit is reached this will be reset.\\\\n\\\\n// Integers to write into the TypeArray for each primitive type\\\\nconst primitiveTypes = {\\\\n  onLineSegment: 1,\\\\n  onCircularArc: 2,\\\\n  onEllipticalArc: 3,\\\\n  finished: 9\\\\n};\\\\n\\\\n/**\\\\n * Batches geom primitives and sends it to the main thread once the primCountPerBatch is reached.\\\\n * @param {String} type - Geometry Primitive type string\\\\n * @param {Number[]} args - An array of arguments that are returned from the VertexBufferBuilder callbacks\\\\n */\\\\nfunction post(type) {let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\\\n  // The first entry will be the primitive type\\\\n  primitiveBatch[batchIndex++] = primitiveTypes[type];\\\\n\\\\n  // Add the arguments to the batch\\\\n  for (let i = 0; i < numOfArgs; i++) {\\\\n    primitiveBatch[batchIndex++] = i < args.length ? args[i] : 0;\\\\n  }\\\\n\\\\n  // Message the main thread once the primitive count was reached or once the number of processed geometries reaches the total number of geometries\\\\n  if (batchIndex >= primCountPerBatch * stride || numGeoms === totalGeoms) {\\\\n    // Send existing batch and create a new batch\\\\n    postMessage(primitiveBatch, [primitiveBatch.buffer]);\\\\n\\\\n    primitiveBatch = new Float64Array(size);\\\\n    batchIndex = 0;\\\\n  }\\\\n}\\\\n\\\\nonmessage = function (e) {\\\\n  // First call from the SegementTree.js\\\\n  // This will initialize the geometry count and other global variables.\\\\n  if (e.data.hasOwnProperty('totalGeoms')) {\\\\n    totalGeoms = e.data.totalGeoms;\\\\n    primitiveBatch = new Float64Array(size);\\\\n    numGeoms = 0;\\\\n    batchIndex = 0;\\\\n    return;\\\\n  }\\\\n\\\\n  // Iterate over an array of geometry objects.\\\\n  // A geometry object contains information from the FragmentList that will be used by the VertexBufferReader.\\\\n  for (let i = 0; i < e.data.length; i++) {\\\\n    const geom = e.data[i];\\\\n    const collectSegment = {\\\\n      onLineSegment: function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return post('onLineSegment', args);},\\\\n      onCircularArc: function () {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return post('onCircularArc', args);},\\\\n      onEllipticalArc: function () {for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}return post('onEllipticalArc', args);}\\\\n    };\\\\n    const vbr = new _src_wgs_scene_VertexBufferReader__WEBPACK_IMPORTED_MODULE_0__.VertexBufferReader(geom);\\\\n\\\\n    vbr.enumGeoms(null, collectSegment);\\\\n    numGeoms++;\\\\n  }\\\\n\\\\n  // Notify the main thread that a geometry was processed.\\\\n  post('finished');\\\\n};//# sourceURL=[module]\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/wgs/scene/VertexBufferReader.js\\\":\\n/*!*********************************************!*\\\\\\n  !*** ./src/wgs/scene/VertexBufferReader.js ***!\\n  \\\\*********************************************/\\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\\n\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\\\n/* harmony export */   VertexBufferReader: () => (/* binding */ VertexBufferReader)\\\\n/* harmony export */ });\\\\n\\\\n\\\\n\\\\nvar TAU = Math.PI * 2;\\\\n\\\\n//Constants duplicated from src/lmvtk/VertexBufferBuilder.js\\\\nvar VBB_GT_TRIANGLE_INDEXED = 0,\\\\n  VBB_GT_LINE_SEGMENT = 1,\\\\n  VBB_GT_ARC_CIRCULAR = 2,\\\\n  VBB_GT_ARC_ELLIPTICAL = 3,\\\\n  VBB_GT_TEX_QUAD = 4,\\\\n  VBB_GT_ONE_TRIANGLE = 5,\\\\n  VBB_GT_LINE_SEGMENT_CAPPED = 8,\\\\n  VBB_GT_LINE_SEGMENT_CAPPED_START = 9,\\\\n  VBB_GT_LINE_SEGMENT_CAPPED_END = 10,\\\\n  VBB_GT_LINE_SEGMENT_MITER = 11;\\\\n\\\\nvar VBB_COLOR_OFFSET = 6,\\\\n  VBB_DBID_OFFSET = 7,\\\\n  VBB_FLAGS_OFFSET = 8,\\\\n  VBB_LAYER_VP_OFFSET = 9;\\\\n\\\\n/**\\\\n * Initializes a \\\\\\\"view\\\\\\\" into a compacted interleaved vertex buffer array using our custom 2D vertex layout.\\\\n * See src/lmvtk/VertexBufferBuilder.js for more details.\\\\n * @param {BufferGeometry|MeshData} geometry\\\\n */\\\\nfunction VertexBufferReader(geometry)\\\\n{var _geometry$tIdColor;\\\\n  this.vb = geometry.vb.buffer;\\\\n  this.stride = geometry.vbstride;\\\\n\\\\n  this.vbf = new Float32Array(this.vb);\\\\n  this.vbi = new Int32Array(this.vb);\\\\n  this.vbs = new Uint16Array(this.vb);\\\\n\\\\n  this.ib = geometry.ib;\\\\n\\\\n  this.vcount = this.vbf.length / this.stride;\\\\n\\\\n  this.useInstancing = geometry.numInstances > 0;\\\\n  this.useCompactBuffers = geometry.unpackXform;\\\\n  this.texData = this.useCompactBuffers && ((_geometry$tIdColor = geometry.tIdColor) === null || _geometry$tIdColor === void 0 || (_geometry$tIdColor = _geometry$tIdColor.image) === null || _geometry$tIdColor === void 0 ? void 0 : _geometry$tIdColor.data) && new Uint32Array(geometry.tIdColor.image.data.buffer);\\\\n\\\\n  // Does the geom use interleaved vb?\\\\n  // Used by FragmentList.updateVertexBufferForThemingAndGhosting which only\\\\n  // workes with interleaved vb\\\\n  this.isInterleavedVb = (() => {\\\\n    const attr = geometry.attributes;\\\\n    if (!attr) return false;\\\\n\\\\n    const atLayerVp = attr.layerVp4b;\\\\n    const atFlags = attr.flags4b;\\\\n\\\\n    if (this.useCompactBuffers) {\\\\n      const atIdColors = attr.uvIdColor;\\\\n      return atIdColors && atLayerVp && atFlags;\\\\n    } else {\\\\n      const atColors = attr.color4b;\\\\n      const atIds = attr.dbId4b;\\\\n      return atColors && atIds && atLayerVp && atFlags;\\\\n    }\\\\n  })();\\\\n};\\\\n\\\\nVertexBufferReader.prototype.getDbIdAt = function (vindex) {\\\\n  if (this.texData) {\\\\n    return this.texData[this.vbs[vindex * this.stride * 2 + VBB_DBID_OFFSET]];\\\\n  }\\\\n  return this.vbi[vindex * this.stride + VBB_DBID_OFFSET];\\\\n};\\\\n\\\\nVertexBufferReader.prototype.getColorAt = function (vindex) {\\\\n  if (this.texData) {\\\\n    return this.texData[this.vbs[vindex * this.stride * 2 + VBB_COLOR_OFFSET]];\\\\n  }\\\\n  return this.vbi[vindex * this.stride + VBB_COLOR_OFFSET];\\\\n};\\\\n\\\\nVertexBufferReader.prototype.getVertexFlagsAt = function (vindex) {\\\\n  if (this.texData) {\\\\n    return this.vbi[vindex * this.stride + 4];\\\\n  }\\\\n  return this.vbi[vindex * this.stride + VBB_FLAGS_OFFSET];\\\\n};\\\\n\\\\nVertexBufferReader.prototype.getLayerIndexAt = function (vindex) {\\\\n  if (this.texData) {\\\\n    return this.vbi[vindex * this.stride + 5] & 0xffff;\\\\n  }\\\\n  return this.vbi[vindex * this.stride + VBB_LAYER_VP_OFFSET] & 0xffff;\\\\n};\\\\n\\\\nVertexBufferReader.prototype.getViewportIndexAt = function (vindex) {\\\\n  if (this.texData) {\\\\n    return this.vbi[vindex * this.stride + 5] >> 16 & 0xffff;\\\\n  }\\\\n  return this.vbi[vindex * this.stride + VBB_LAYER_VP_OFFSET] >> 16 & 0xffff;\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeLineAt = function (vindex, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onLineSegment) {return;}\\\\n\\\\n  if (this.useCompactBuffers) {\\\\n    var vertexOffset = this.stride * vindex * 2;\\\\n    var x0 = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var y0 = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n    var angle = this.vbs[vertexOffset + 2] / 65535 * TAU - Math.PI;\\\\n    var distAlong = this.vbs[vertexOffset + 3] / 65535 * Math.max(this.useCompactBuffers.x, this.useCompactBuffers.y);\\\\n    var lineWidth = this.vbs[vertexOffset + 4] / 32767 * Math.max(this.useCompactBuffers.x, this.useCompactBuffers.y) * 2.0;\\\\n  } else {\\\\n    var baseOffset = this.stride * vindex;\\\\n    var x0 = this.vbf[baseOffset];\\\\n    var y0 = this.vbf[baseOffset + 1];\\\\n    var angle = this.vbf[baseOffset + 2] * TAU - Math.PI; // decode angle: see VertexBufferBuilder.addVertexLine\\\\n    var distAlong = this.vbf[baseOffset + 3];\\\\n    var lineWidth = this.vbf[baseOffset + 4] * 2.0;\\\\n  }\\\\n\\\\n  var x1 = x0 + distAlong * Math.cos(angle);\\\\n  var y1 = y0 + distAlong * Math.sin(angle);\\\\n\\\\n  callback.onLineSegment(x0, y0, x1, y1, vpId, lineWidth);\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeCircularArcAt = function (vindex, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onCircularArc) {return;}\\\\n\\\\n  if (this.useCompactBuffers) {\\\\n    var vertexOffset = this.stride * vindex * 2;\\\\n    var cx = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var cy = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n    var start = this.vbs[vertexOffset + 2] / 65535 * TAU;\\\\n    var end = this.vbs[vertexOffset + 3] / 65535 * TAU;\\\\n    var radius = this.vbs[vertexOffset + 5] / 65535 * Math.max(this.useCompactBuffers.x, this.useCompactBuffers.y);\\\\n  } else {\\\\n    var baseOffset = this.stride * vindex;\\\\n    var cx = this.vbf[baseOffset];\\\\n    var cy = this.vbf[baseOffset + 1];\\\\n    var start = this.vbf[baseOffset + 2] * TAU;\\\\n    var end = this.vbf[baseOffset + 3] * TAU;\\\\n    var radius = this.vbf[baseOffset + 5];\\\\n  }\\\\n\\\\n  callback.onCircularArc(cx, cy, start, end, radius, vpId);\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeEllipticalArcAt = function (vindex, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onEllipticalArc) {return;}\\\\n\\\\n  // Note: compaction will not happen for the VBB_GT_ARC_ELLIPTICAL\\\\n  var baseOffset = this.stride * vindex;\\\\n  var cx = this.vbf[baseOffset];\\\\n  var cy = this.vbf[baseOffset + 1];\\\\n  var start = this.vbf[baseOffset + 2] * TAU;\\\\n  var end = this.vbf[baseOffset + 3] * TAU;\\\\n  var major = this.vbf[baseOffset + 5];\\\\n  var minor = this.vbf[baseOffset + 10];\\\\n  var tilt = this.vbf[baseOffset + 11];\\\\n\\\\n  callback.onEllipticalArc(cx, cy, start, end, major, minor, tilt, vpId);\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeTexQuadAt = function (vindex, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onTexQuad) {return;}\\\\n\\\\n  if (this.useCompactBuffers) {\\\\n    var vertexOffset = this.stride * vindex * 2;\\\\n    var centerX = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var centerY = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n    var rotation = this.vbs[vertexOffset + 2] / 65535 * TAU;\\\\n    var width = this.vbs[vertexOffset + 3] / 65535 * Math.max(this.useCompactBuffers.x, this.useCompactBuffers.y);\\\\n    var height = this.vbs[vertexOffset + 4] / 65535 * Math.max(this.useCompactBuffers.x, this.useCompactBuffers.y);\\\\n  } else {\\\\n    var baseOffset = this.stride * vindex;\\\\n    var centerX = this.vbf[baseOffset];\\\\n    var centerY = this.vbf[baseOffset + 1];\\\\n    // yes, this is in a different order than output, following VertexBufferBuilder's order\\\\n    var rotation = this.vbf[baseOffset + 2] * TAU;\\\\n    var width = this.vbf[baseOffset + 3];\\\\n    var height = this.vbf[baseOffset + 4];\\\\n  }\\\\n\\\\n  callback.onTexQuad(centerX, centerY, width, height, rotation, vpId);\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeOneTriangleAt = function (vindex, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onOneTriangle) {return;}\\\\n\\\\n  if (this.useCompactBuffers) {\\\\n    var vertexOffset = this.stride * vindex * 2;\\\\n    var x1 = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var y1 = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n    var x2 = this.useCompactBuffers.x * this.vbs[vertexOffset + 2] / 65535 + this.useCompactBuffers.z;\\\\n    var y2 = this.useCompactBuffers.y * this.vbs[vertexOffset + 3] / 65535 + this.useCompactBuffers.w;\\\\n    var x3 = this.useCompactBuffers.x * this.vbs[vertexOffset + 4] / 65535 + this.useCompactBuffers.z;\\\\n    var y3 = this.useCompactBuffers.y * this.vbs[vertexOffset + 5] / 65535 + this.useCompactBuffers.w;\\\\n  } else {\\\\n    var baseOffset = this.stride * vindex;\\\\n    var x1 = this.vbf[baseOffset];\\\\n    var y1 = this.vbf[baseOffset + 1];\\\\n    var x2 = this.vbf[baseOffset + 2];\\\\n    var y2 = this.vbf[baseOffset + 3];\\\\n    var x3 = this.vbf[baseOffset + 4];\\\\n    var y3 = this.vbf[baseOffset + 5];\\\\n  }\\\\n\\\\n  callback.onOneTriangle(x1, y1, x2, y2, x3, y3, vpId);\\\\n};\\\\n\\\\n\\\\nVertexBufferReader.prototype.decodeTriangleIndexed = function (vi0, vi1, vi2, layer, vpId, callback)\\\\n{\\\\n  if (!callback.onOneTriangle) {return;}\\\\n\\\\n  if (this.useCompactBuffers) {\\\\n    var vertexOffset = this.stride * vi0 * 2;\\\\n    var x1 = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var y1 = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n\\\\n    vertexOffset = this.stride * vi1 * 2;\\\\n    var x2 = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var y2 = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n\\\\n    vertexOffset = this.stride * vi2 * 2;\\\\n    var x3 = this.useCompactBuffers.x * this.vbs[vertexOffset] / 65535 + this.useCompactBuffers.z;\\\\n    var y3 = this.useCompactBuffers.y * this.vbs[vertexOffset + 1] / 65535 + this.useCompactBuffers.w;\\\\n  } else {\\\\n    var baseOffset = this.stride * vi0;\\\\n    var x1 = this.vbf[baseOffset];\\\\n    var y1 = this.vbf[baseOffset + 1];\\\\n\\\\n    baseOffset = this.stride * vi1;\\\\n    var x2 = this.vbf[baseOffset];\\\\n    var y2 = this.vbf[baseOffset + 1];\\\\n\\\\n    baseOffset = this.stride * vi2;\\\\n    var x3 = this.vbf[baseOffset];\\\\n    var y3 = this.vbf[baseOffset + 1];\\\\n  }\\\\n\\\\n  callback.onOneTriangle(x1, y1, x2, y2, x3, y3, vpId);\\\\n};\\\\n\\\\nVertexBufferReader.prototype.decodeByType = function (geomType, vindex, layer, vpId, callback) {\\\\n  switch (geomType) {\\\\n    case VBB_GT_LINE_SEGMENT_MITER:\\\\n    case VBB_GT_LINE_SEGMENT_CAPPED:\\\\n    case VBB_GT_LINE_SEGMENT_CAPPED_START:\\\\n    case VBB_GT_LINE_SEGMENT_CAPPED_END:\\\\n    case VBB_GT_LINE_SEGMENT:this.decodeLineAt(vindex, layer, vpId, callback);break;\\\\n    case VBB_GT_ARC_CIRCULAR:this.decodeCircularArcAt(vindex, layer, vpId, callback);break;\\\\n    case VBB_GT_ARC_ELLIPTICAL:this.decodeEllipticalArcAt(vindex, layer, vpId, callback);break; //  compaction is not performed\\\\n    case VBB_GT_TEX_QUAD:this.decodeTexQuadAt(vindex, layer, vpId, callback);break;\\\\n    case VBB_GT_ONE_TRIANGLE:this.decodeOneTriangleAt(vindex, layer, vpId, callback);break;\\\\n    default:break;\\\\n  }\\\\n\\\\n};\\\\n\\\\n// used by the snapper and by the bounds finder\\\\nVertexBufferReader.prototype.enumGeomsForObject = function (dbId, callback)\\\\n{\\\\n  if (this.useInstancing) {\\\\n\\\\n    //When instancing is used, each geometry primitive is encoded into a single vertex\\\\n    //and there is no index buffer.\\\\n\\\\n    var i = 0;\\\\n    while (i < this.vcount) {\\\\n      var flag = this.getVertexFlagsAt(i);\\\\n\\\\n      //var vertexId  = (flag >>  0) & 0xff;        //  8 bit\\\\n      var geomType = flag >> 8 & 0xff; //  8 bit\\\\n      //var linePattern = (flag >> 16) & 0xff;      //  8 bit\\\\n      var layerId = this.getLayerIndexAt(i); // 16 bit\\\\n      var vpId = this.getViewportIndexAt(i); // 16 bit\\\\n      var visible = this.getDbIdAt(i) === dbId;\\\\n      if (visible) {\\\\n        this.decodeByType(geomType, i, layerId, vpId, callback);\\\\n      }\\\\n\\\\n      //In the case of instancing, there is no vertex duplication and no index buffer, we just\\\\n      //move to the next vertex\\\\n      i += 1;\\\\n    }\\\\n  } else {\\\\n\\\\n    var i = 0;\\\\n    while (i < this.ib.length) {\\\\n      var vi = this.ib[i];\\\\n      var flag = this.getVertexFlagsAt(vi);\\\\n\\\\n      //var vertexId    = (flag >>  0) & 0xff;        //  8 bit\\\\n      var geomType = flag >> 8 & 0xff; //  8 bit\\\\n      //var linePattern = (flag >> 16) & 0xff;        //  8 bit\\\\n      var layerId = this.getLayerIndexAt(vi); // 16 bit\\\\n      var vpId = this.getViewportIndexAt(vi); // 16 bit\\\\n\\\\n      var visible = this.getDbIdAt(vi) === dbId;\\\\n\\\\n      if (geomType === VBB_GT_TRIANGLE_INDEXED) {\\\\n\\\\n        //Triangles are encoded in three vertices (like a simple mesh) instead of 4 like everything else\\\\n\\\\n        if (visible) {\\\\n          this.decodeTriangleIndexed(this.ib[i], this.ib[i + 1], this.ib[i + 2], layerId, vpId, callback);\\\\n        }\\\\n\\\\n        //Advance to the next primitive\\\\n        i += 3;\\\\n\\\\n      } else {\\\\n\\\\n        if (visible) {\\\\n          this.decodeByType(geomType, vi, layerId, vpId, callback);\\\\n        }\\\\n\\\\n        //Skip duplicate vertices (when not using instancing and the geometry is not a simple polytriangle,\\\\n        //each vertex is listed four times with a different vertexId flag\\\\n        i += 6;\\\\n      }\\\\n\\\\n\\\\n    }\\\\n  }\\\\n\\\\n};\\\\n\\\\n\\\\n/**\\\\n * Used by the bounds finder.\\\\n * @param {array[number]} layerIdsVisible - list of layer ids that are visible\\\\n * @param {function} callback\\\\n * @private\\\\n */\\\\nVertexBufferReader.prototype.enumGeomsForVisibleLayer = function (layerIdsVisible, callback)\\\\n{\\\\n  var filter = function (dbId, layerId, viewportId) {\\\\n    return !layerIdsVisible || layerId !== 0 && layerIdsVisible.indexOf(layerId) !== -1;\\\\n  };\\\\n  this.enumGeoms(filter, callback);\\\\n};\\\\n\\\\n\\\\n/**\\\\n * Enumerate all geometric primitives that match the given filter.\\\\n * @param {function} [filter] - function(dbId, layerId, viewportId): Filter function to define a subset of primitives to include. By default, all geometry is included.\\\\n * @param {function} callback\\\\n * @private\\\\n */\\\\nVertexBufferReader.prototype.enumGeoms = function (filter, callback)\\\\n{\\\\n  if (this.useInstancing) {\\\\n\\\\n    //When instancing is used, each geometry primitive is encoded into a single vertex\\\\n    //and there is no index buffer.\\\\n\\\\n    var i = 0;\\\\n    while (i < this.vcount) {\\\\n      var flag = this.getVertexFlagsAt(i);\\\\n\\\\n      //var vertexId    = (flag >>  0) & 0xff;        //  8 bit\\\\n      var geomType = flag >> 8 & 0xff; //  8 bit\\\\n      //var linePattern = (flag >> 16) & 0xff;        //  8 bit\\\\n      var layerId = this.getLayerIndexAt(i); // 16 bit\\\\n      var vpId = this.getViewportIndexAt(i); // 16 bit\\\\n      var dbId = this.getDbIdAt(i);\\\\n\\\\n      // Get the bounds of only the visible layers. Ignore layer 0, which is always the page.\\\\n      // If layerId visibility is not set, consider the layer visible.\\\\n      var visible = !filter || filter(dbId, layerId, vpId);\\\\n      if (visible) {\\\\n        this.decodeByType(geomType, i, layerId, vpId, callback);\\\\n      }\\\\n\\\\n      //In the case of instancing, there is no vertex duplication and no index buffer, we just\\\\n      //move to the next vertex\\\\n      i += 1;\\\\n    }\\\\n  } else {\\\\n\\\\n    var i = 0;\\\\n    while (i < this.ib.length) {\\\\n      var vi = this.ib[i];\\\\n      var flag = this.getVertexFlagsAt(vi);\\\\n\\\\n      //var vertexId    = (flag >>  0) & 0xff;        //  8 bit\\\\n      var geomType = flag >> 8 & 0xff; //  8 bit\\\\n      //var linePattern = (flag >> 16) & 0xff;        //  8 bit\\\\n      var layerId = this.getLayerIndexAt(vi); // 16 bit\\\\n      var vpId = this.getViewportIndexAt(vi); // 16 bit\\\\n      var dbId = this.getDbIdAt(vi);\\\\n\\\\n      // Get the bounds of only the visible layers. Ignore layer 0, which is always the page.\\\\n      // If layerId visibility is not set, consider the layer visible.\\\\n      var visible = !filter || filter(dbId, layerId, vpId);\\\\n\\\\n      if (geomType === VBB_GT_TRIANGLE_INDEXED) {\\\\n\\\\n        //Triangles are encoded in three vertices (like a simple mesh) instead of 4 like everything else\\\\n\\\\n        if (visible) {\\\\n          this.decodeTriangleIndexed(this.ib[i], this.ib[i + 1], this.ib[i + 2], layerId, vpId, callback);\\\\n        }\\\\n\\\\n        //Advance to the next primitive\\\\n        i += 3;\\\\n\\\\n      } else {\\\\n        if (visible) {\\\\n          this.decodeByType(geomType, vi, layerId, vpId, callback);\\\\n        }\\\\n        //Skip duplicate vertices (when not using instancing and the geometry is not a simple polytriangle,\\\\n        //each vertex is listed four times with a different vertexId flag\\\\n        i += 6;\\\\n      }\\\\n\\\\n    }\\\\n  }\\\\n\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/wgs/scene/VertexBufferReader.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ \\t});\\n/************************************************************************/\\n/******/ \\t// The module cache\\n/******/ \\tvar __webpack_module_cache__ = {};\\n/******/ \\t\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tvar cachedModule = __webpack_module_cache__[moduleId];\\n/******/ \\t\\tif (cachedModule !== undefined) {\\n/******/ \\t\\t\\treturn cachedModule.exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = __webpack_module_cache__[moduleId] = {\\n/******/ \\t\\t\\t// no module.id needed\\n/******/ \\t\\t\\t// no module.loaded needed\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/ \\t\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\\n/******/ \\t\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t/* webpack/runtime/define property getters */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define getter functions for harmony exports\\n/******/ \\t\\t__webpack_require__.d = (exports, definition) => {\\n/******/ \\t\\t\\tfor(var key in definition) {\\n/******/ \\t\\t\\t\\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\\n/******/ \\t\\t\\t\\t\\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\\n/******/ \\t\\t\\t\\t}\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/hasOwnProperty shorthand */\\n/******/ \\t(() => {\\n/******/ \\t\\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\\n/******/ \\t})();\\n/******/ \\t\\n/******/ \\t/* webpack/runtime/make namespace object */\\n/******/ \\t(() => {\\n/******/ \\t\\t// define __esModule on exports\\n/******/ \\t\\t__webpack_require__.r = (exports) => {\\n/******/ \\t\\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t\\t}\\n/******/ \\t\\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t\\t};\\n/******/ \\t})();\\n/******/ \\t\\n/************************************************************************/\\n/******/ \\t\\n/******/ \\t// startup\\n/******/ \\t// Load entry module and return exports\\n/******/ \\t// This entry module can't be inlined because the eval-source-map devtool is used.\\n/******/ \\tvar __webpack_exports__ = __webpack_require__(\\\"./node_modules/babel-loader/lib/index.js??ruleSet[1].rules[0].use[0]!./extensions/Edit2D/SegmentTreeWorker.js\\\");\\n/******/ \\t\\n/******/ })()\\n;\", \"Worker\", undefined, undefined);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./extensions/Edit2D/SegmentTreeWorker.js\n");

/***/ }),

/***/ "./node_modules/worker-loader/dist/runtime/inline.js":
/*!***********************************************************!*\
  !*** ./node_modules/worker-loader/dist/runtime/inline.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzP2VjZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIG5ldy1jYXAgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRlbnQsIHdvcmtlckNvbnN0cnVjdG9yLCB3b3JrZXJPcHRpb25zLCB1cmwpIHtcbiAgdmFyIGdsb2JhbFNjb3BlID0gc2VsZiB8fCB3aW5kb3c7XG5cbiAgdHJ5IHtcbiAgICB0cnkge1xuICAgICAgdmFyIGJsb2I7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE5ldyBBUElcbiAgICAgICAgYmxvYiA9IG5ldyBnbG9iYWxTY29wZS5CbG9iKFtjb250ZW50XSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEJsb2JCdWlsZGVyID0gRGVwcmVjYXRlZCwgYnV0IHdpZGVseSBpbXBsZW1lbnRlZFxuICAgICAgICB2YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWxTY29wZS5CbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5XZWJLaXRCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5Nb3pCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5NU0Jsb2JCdWlsZGVyO1xuICAgICAgICBibG9iID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICBibG9iID0gYmxvYi5nZXRCbG9iKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBVUkwgPSBnbG9iYWxTY29wZS5VUkwgfHwgZ2xvYmFsU2NvcGUud2Via2l0VVJMO1xuICAgICAgdmFyIG9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICB2YXIgd29ya2VyID0gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShvYmplY3RVUkwsIHdvcmtlck9wdGlvbnMpO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVUkwpO1xuICAgICAgcmV0dXJuIHdvcmtlcjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShcImRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCxcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKSwgd29ya2VyT3B0aW9ucyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRocm93IEVycm9yKFwiSW5saW5lIHdvcmtlciBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKHVybCwgd29ya2VyT3B0aW9ucyk7XG4gIH1cbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/runtime/inline.js\n");

/***/ }),

/***/ "./res/locales/cs/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/cs/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"cs","@@context":"Rozšíření Edit2D","Apply as Cutout":"Použít jako výřez","Remove Shapes":"Odebrat tvary","Unify Shapes":"Sjednotit tvary","Remove Vertex":"Odebrat vrchol","Insert Vertex":"Vložit vrchol","Change to Line Segment":"Změnit na úsečkový segment","Change to Arc Segment":"Změnit na obloukový segment","Change to Ellipse Segment":"Změnit na segment elipsy","Remove Shape":"Odebrat tvar","Remove Shape Part":"Odebrat součást tvaru","Remove Hole":"Odebrat díru","Remove Loop":"Odebrat smyčku","Invalid shape":"Chyba: Neplatný tvar"}');

/***/ }),

/***/ "./res/locales/da/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/da/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"da","@@context":"Edit2D-udvidelse","Apply as Cutout":"Anvend som udskæring","Remove Shapes":"Fjern former","Unify Shapes":"Ensret former","Remove Vertex":"Fjern toppunkt","Insert Vertex":"Indsæt toppunkt","Change to Line Segment":"Skift til linjesegment","Change to Arc Segment":"Skift til buesegment","Change to Ellipse Segment":"Skift til ellipsesegment","Remove Shape":"Fjern form","Remove Shape Part":"Fjern formdel","Remove Hole":"Fjern hul","Remove Loop":"Fjern loop","Invalid shape":"Fejl: Ugyldig form"}');

/***/ }),

/***/ "./res/locales/de/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/de/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"de","@@context":"2D-Erweiterung bearbeiten","Apply as Cutout":"Als Aussparung anwenden","Remove Shapes":"Konturen entfernen","Unify Shapes":"Konturen vereinigen","Remove Vertex":"Scheitelpunkt entfernen","Insert Vertex":"Scheitelpunkt einfügen","Change to Line Segment":"In Liniensegment ändern","Change to Arc Segment":"In Bogensegment ändern","Change to Ellipse Segment":"In Ellipsensegment ändern","Remove Shape":"Kontur entfernen","Remove Shape Part":"Formteil entfernen","Remove Hole":"Aussparung entfernen","Remove Loop":"Schleife entfernen","Invalid shape":"Fehler: Ungültige Form"}');

/***/ }),

/***/ "./res/locales/en-GB/nobundle-edit2d.loc.json":
/*!****************************************************!*\
  !*** ./res/locales/en-GB/nobundle-edit2d.loc.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"en","@@context":"Edit2D Extension","Apply as Cutout":"Apply as Cutout","Remove Shapes":"Remove Shapes","Unify Shapes":"Unify Shapes","Remove Vertex":"Remove Vertex","Insert Vertex":"Insert Vertex","Change to Line Segment":"Change to Line Segment","Change to Arc Segment":"Change to Arc Segment","Change to Ellipse Segment":"Change to Ellipse Segment","Remove Shape":"Remove Shape","Remove Shape Part":"Remove Shape Part","Remove Hole":"Remove Hole","Remove Loop":"Remove Loop","Invalid shape":"Error: Invalid shape"}');

/***/ }),

/***/ "./res/locales/en/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/en/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"en","@@context":"Edit2D Extension","Apply as Cutout":"Apply as Cutout","Remove Shapes":"Remove Shapes","Unify Shapes":"Unify Shapes","Remove Vertex":"Remove Vertex","Insert Vertex":"Insert Vertex","Change to Line Segment":"Change to Line Segment","Change to Arc Segment":"Change to Arc Segment","Change to Ellipse Segment":"Change to Ellipse Segment","Remove Shape":"Remove Shape","Remove Shape Part":"Remove Shape Part","Remove Hole":"Remove Hole","Remove Loop":"Remove Loop","Invalid shape":"Error: Invalid shape"}');

/***/ }),

/***/ "./res/locales/es/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/es/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"es","@@context":"Edit2D Extension","Apply as Cutout":"Aplicar como corte","Remove Shapes":"Eliminar formas","Unify Shapes":"Unificar formas","Remove Vertex":"Eliminar vértice","Insert Vertex":"Insertar vértice","Change to Line Segment":"Cambiar a segmento de línea","Change to Arc Segment":"Cambiar a segmento de arco","Change to Ellipse Segment":"Cambiar a segmento de elipse","Remove Shape":"Eliminar forma","Remove Shape Part":"Eliminar parte de forma","Remove Hole":"Eliminar agujero","Remove Loop":"Eliminar bucle","Invalid shape":"Error: forma no válida"}');

/***/ }),

/***/ "./res/locales/fr-CA/nobundle-edit2d.loc.json":
/*!****************************************************!*\
  !*** ./res/locales/fr-CA/nobundle-edit2d.loc.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"fr-CA","@@context":"Extension Edit2D","Apply as Cutout":"Appliquer en tant que découpe","Remove Shapes":"Supprimer les formes","Unify Shapes":"Unifier les formes","Remove Vertex":"Supprimer le sommet","Insert Vertex":"Insérer un sommet","Change to Line Segment":"Modifier en segment de ligne","Change to Arc Segment":"Modifier en segment d\'arc","Change to Ellipse Segment":"Modifier en segment d\'ellipse","Remove Shape":"Supprimer la forme","Remove Shape Part":"Supprimer la partie de la forme","Remove Hole":"Supprimer le trou","Remove Loop":"Supprimer la boucle","Invalid shape":"Erreur : forme incorrecte"}');

/***/ }),

/***/ "./res/locales/fr/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/fr/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"fr_fr","@@context":"Modifier l\'extension 2D","Apply as Cutout":"Appliquer comme découpe","Remove Shapes":"Supprimer les formes","Unify Shapes":"Unifier les formes","Remove Vertex":"Supprimer le sommet","Insert Vertex":"Insérer un sommet","Change to Line Segment":"Changer en segment de ligne","Change to Arc Segment":"Changer en segment d\'arc","Change to Ellipse Segment":"Changer en segment d\'ellipse","Remove Shape":"Supprimer la forme","Remove Shape Part":"Supprimer la pièce de forme","Remove Hole":"Supprimer le perçage","Remove Loop":"Supprimer la boucle","Invalid shape":"Erreur: forme incorrecte"}');

/***/ }),

/***/ "./res/locales/it/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/it/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"it","@@context":"Modifica estensione 2D","Apply as Cutout":"Applica come ritaglio","Remove Shapes":"Rimuovi forme","Unify Shapes":"Unifica forme","Remove Vertex":"Rimuovi vertice","Insert Vertex":"Inserisci vertice","Change to Line Segment":"Cambia in segmento di linea","Change to Arc Segment":"Cambia in segmento di arco","Change to Ellipse Segment":"Cambia in segmento di ellisse","Remove Shape":"Rimuovi forma","Remove Shape Part":"Rimuovi parte forma","Remove Hole":"Rimuovi foro","Remove Loop":"Rimuovi linea chiusa","Invalid shape":"Errore: forma non valida"}');

/***/ }),

/***/ "./res/locales/ja/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/ja/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"ja","@@context":"2D Extension を編集","Apply as Cutout":"カットアウトとして適用","Remove Shapes":"シェイプを除去","Unify Shapes":"シェイプを統一","Remove Vertex":"頂点を除去","Insert Vertex":"頂点を挿入","Change to Line Segment":"線分セグメントに変更","Change to Arc Segment":"円弧セグメントに変更","Change to Ellipse Segment":"楕円セグメントに変更","Remove Shape":"シェイプを除去","Remove Shape Part":"シェイプ パーツを除去","Remove Hole":"穴を除去","Remove Loop":"ループを除去","Invalid shape":"エラー: 無効なシェイプ"}');

/***/ }),

/***/ "./res/locales/ko/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/ko/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"ko","@@context":"Edit2D 확장","Apply as Cutout":"절단부로 적용","Remove Shapes":"모양 제거","Unify Shapes":"쉐이프 통합","Remove Vertex":"정점 제거","Insert Vertex":"정점 삽입","Change to Line Segment":"선 세그먼트로 변경","Change to Arc Segment":"호 세그먼트로 변경","Change to Ellipse Segment":"타원 세그먼트로 변경","Remove Shape":"모양 제거","Remove Shape Part":"쉐이프 부품 제거","Remove Hole":"구멍 제거","Remove Loop":"루프 제거","Invalid shape":"오류: 잘못된 쉐이프"}');

/***/ }),

/***/ "./res/locales/nl/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/nl/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"nl","@@context":"Edit2D-uitbreiding","Apply as Cutout":"Toepassen als uitsnijding","Remove Shapes":"Vormen verwijderen","Unify Shapes":"Vormen uniform maken","Remove Vertex":"Vertex verwijderen","Insert Vertex":"Vertex invoegen","Change to Line Segment":"Wijzigen in lijnsegment","Change to Arc Segment":"Wijzigen in boogsegment","Change to Ellipse Segment":"Wijzigen in ellipssegment","Remove Shape":"Vorm verwijderen","Remove Shape Part":"Vormgedeelte verwijderen","Remove Hole":"Gat verwijderen","Remove Loop":"Lus verwijderen","Invalid shape":"Fout: Ongeldige vorm"}');

/***/ }),

/***/ "./res/locales/pl/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/pl/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"pl","@@context":"Rozszerzenie Edit2D","Apply as Cutout":"Zastosuj jako wycięcie","Remove Shapes":"Usuń kształty","Unify Shapes":"Ujednolić kształty","Remove Vertex":"Usuń wierzchołek","Insert Vertex":"Wstaw wierzchołek","Change to Line Segment":"Zmień na segment linii","Change to Arc Segment":"Zmień na segment łuku","Change to Ellipse Segment":"Zmień na segment elipsy","Remove Shape":"Usuń kształt","Remove Shape Part":"Usuń część kształtu","Remove Hole":"Usuń otwór","Remove Loop":"Usuń pętlę","Invalid shape":"Błąd: nieprawidłowy kształt"}');

/***/ }),

/***/ "./res/locales/pt-BR/nobundle-edit2d.loc.json":
/*!****************************************************!*\
  !*** ./res/locales/pt-BR/nobundle-edit2d.loc.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"ptb","@@context":"Extensão Edit2D","Apply as Cutout":"Aplicar como corte","Remove Shapes":"Remover formas","Unify Shapes":"Unificar formas","Remove Vertex":"Remover vértice","Insert Vertex":"Inserir vértice","Change to Line Segment":"Alterar para segmento de linha","Change to Arc Segment":"Alterar para segmento de arco","Change to Ellipse Segment":"Alterar para segmento de elipse","Remove Shape":"Remover forma","Remove Shape Part":"Remover peça de forma","Remove Hole":"Remover furo","Remove Loop":"Remover loop","Invalid shape":"Erro: Forma inválida"}');

/***/ }),

/***/ "./res/locales/ru/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/ru/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"ru","@@context":"Расширение Edit2D","Apply as Cutout":"Применить как вырез","Remove Shapes":"Удалить формы","Unify Shapes":"Объединить формы","Remove Vertex":"Удалить вершину","Insert Vertex":"Вставить вершину","Change to Line Segment":"Изменить на сегмент линии","Change to Arc Segment":"Изменить на сегмент дуги","Change to Ellipse Segment":"Изменить на сегмент эллипса","Remove Shape":"Удалить форму","Remove Shape Part":"Удалить деталь формы","Remove Hole":"Удалить отверстие","Remove Loop":"Удалить контур","Invalid shape":"Ошибка: недопустимая форма"}');

/***/ }),

/***/ "./res/locales/sv/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/sv/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"sv","@@context":"Edit2D-tillägg","Apply as Cutout":"Använd som utsnitt","Remove Shapes":"Ta bort former","Unify Shapes":"Unifiera former","Remove Vertex":"Ta bort Vertex","Insert Vertex":"Infoga Vertex","Change to Line Segment":"Ändra till linjesegment","Change to Arc Segment":"Ändra till bågsegment","Change to Ellipse Segment":"Ändra till ellipssegment","Remove Shape":"Ta bort form","Remove Shape Part":"Ta bort del av form","Remove Hole":"Ta bort hål","Remove Loop":"Ta bort slinga","Invalid shape":"Fel: felaktig form"}');

/***/ }),

/***/ "./res/locales/tr/nobundle-edit2d.loc.json":
/*!*************************************************!*\
  !*** ./res/locales/tr/nobundle-edit2d.loc.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"tr","@@context":"Edit2D Uzantısı","Apply as Cutout":"Kesim Olarak Uygula","Remove Shapes":"Şekilleri Kaldır","Unify Shapes":"Şekilleri Birleştir","Remove Vertex":"Tepe Noktayı Kaldır","Insert Vertex":"Tepe Nokta Ekle","Change to Line Segment":"Çizgi Segmetine Değiştir","Change to Arc Segment":"Yay Segmentine Değiştir","Change to Ellipse Segment":"Elips Segmentine Değiştir","Remove Shape":"Şekli Kaldır","Remove Shape Part":"Şekil Parçasını Kaldır","Remove Hole":"Deliği Kaldır","Remove Loop":"Döngüyü Kaldır","Invalid shape":"Hata: Geçersiz şekil"}');

/***/ }),

/***/ "./res/locales/zh-HK/nobundle-edit2d.loc.json":
/*!****************************************************!*\
  !*** ./res/locales/zh-HK/nobundle-edit2d.loc.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"zh-hk","@@context":"編輯 2D 擴充程式","Apply as Cutout":"套用為剪裁圖樣","Remove Shapes":"移除形狀","Unify Shapes":"統一形狀","Remove Vertex":"移除頂點","Insert Vertex":"插入頂點","Change to Line Segment":"變更至線區段","Change to Arc Segment":"變更至弧形區段","Change to Ellipse Segment":"變更至橢圓形區段","Remove Shape":"移除形狀","Remove Shape Part":"移除形狀部分","Remove Hole":"移除洞孔","Remove Loop":"移除迴圈","Invalid shape":"錯誤: 無效形狀"}');

/***/ }),

/***/ "./res/locales/zh-Hans/nobundle-edit2d.loc.json":
/*!******************************************************!*\
  !*** ./res/locales/zh-Hans/nobundle-edit2d.loc.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"zh-Hans","@@context":"编辑二维扩展","Apply as Cutout":"应用为裁切","Remove Shapes":"删除形状","Unify Shapes":"统一形状","Remove Vertex":"删除顶点","Insert Vertex":"插入顶点","Change to Line Segment":"更改为线段","Change to Arc Segment":"更改为圆弧段","Change to Ellipse Segment":"更改为椭圆段","Remove Shape":"删除形状","Remove Shape Part":"删除形状部件","Remove Hole":"删除孔","Remove Loop":"删除回路","Invalid shape":"错误: 形状无效"}');

/***/ }),

/***/ "./res/locales/zh-Hant/nobundle-edit2d.loc.json":
/*!******************************************************!*\
  !*** ./res/locales/zh-Hant/nobundle-edit2d.loc.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"@@locale":"zh-Hant","@@context":"Edit2D 延伸","Apply as Cutout":"套用為凹口","Remove Shapes":"移除造型","Unify Shapes":"統一造型","Remove Vertex":"移除頂點","Insert Vertex":"插入頂點","Change to Line Segment":"變更為線段","Change to Arc Segment":"變更為弧線段","Change to Ellipse Segment":"變更為橢圓線段","Remove Shape":"移除造型","Remove Shape Part":"移除造型零件","Remove Hole":"移除孔","Remove Loop":"移除迴路","Invalid shape":"錯誤: 造型無效"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./extensions/Edit2D/Edit2D.js");
/******/ 	Autodesk.Extensions.Edit2D = __webpack_exports__;
/******/ 	
/******/ })()
;