/*!
 * LMV v7.105.0
 *
 * Copyright 2025 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./extensions/CompGeom/LmvCanvasContext.js":
/*!*************************************************!*\
  !*** ./extensions/CompGeom/LmvCanvasContext.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LmvCanvasContext: () => (/* binding */ LmvCanvasContext),\n/* harmony export */   hijackContextAPI: () => (/* binding */ hijackContextAPI)\n/* harmony export */ });\n/* harmony import */ var _path2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path2d */ \"./extensions/CompGeom/path2d.js\");\n\n\nvar av = Autodesk.Viewing,\n  avp = av.Private;\n\nconst VertexBufferBuilder = avp.VertexBufferBuilder;\n\n//Custom implementation of HTML Canvas API used for rendering PDF geometry using the WebGL accelerated F2D renderer\n\n\n//A custom context object that overloads standard HMTL Canvas 2D context to intercept draw\n//calls and pipe them into LMV vertex buffers\nfunction hijackContextAPI(inContext, lmvContext) {\n\n  let fnList = [\n  \"fillRect\",\n  \"strokeRect\",\n  \"clearRect\",\n  \"beginPath\",\n  \"closePath\",\n  \"moveTo\",\n  \"lineTo\",\n  \"arc\",\n  \"arcTo\",\n  \"quadraticCurveTo\",\n  \"bezierCurveTo\",\n  \"rect\",\n  \"fill\",\n  \"stroke\",\n  \"clip\",\n  \"strokeText\",\n  \"fillText\",\n  \"drawImage\",\n  \"save\",\n  \"restore\",\n  \"setLineDash\",\n  \"createPattern\",\n\n  // OCG related\n  \"beginMarkedContent\",\n  \"beginMarkedContentProps\",\n  \"endMarkedContent\",\n  \"setCurrentOperatorIndex\",\n\n  \"isLMVCanvasContext\",\n\n  // subgroups\n  \"beginChildGroup\",\n  \"endChildGroup\"];\n\n\n  fnList.forEach((fn) => {\n    inContext[\"_original\" + fn] = inContext[fn];\n    inContext[fn] = lmvContext[fn].bind(lmvContext);\n  });\n\n}\n\nconst QUAD_TEXTURE = 1;\nconst IMAGE_TEXTURE = 2;\n\nlet _tmpXform = new Array(6);\nlet _tmpVec = new THREE.Vector2();\nlet _tmpBox = new THREE.Box2();\n\n\n//Used for matrix decomposition in drawImage\nvar _offset = new THREE.Vector3();\nvar _quat = new THREE.Quaternion();\nvar _scale = new THREE.Vector3();\nvar _axis = new THREE.Vector3();\nvar _mtx4 = new THREE.Matrix4();\n\nclass LmvCanvasContext {\n\n  static getLayerKey(properties) {\n    let key;\n    if (properties && typeof properties == \"object\") {\n      key = properties.ocgId;\n      // some PDFs have a missing ocgId, as in https://jira.autodesk.com/browse/BLMV-8395\n      if (key === undefined) {\n        key = properties.name;\n      }\n    } else {\n      key = properties;\n    }\n    return key;\n  }\n\n  /**\n   * Check is a PDF Ref object\n   * @param {PDF.Ref} obj\n   */\n  static isRef(obj) {\n    return obj != null && typeof obj.num === \"number\" && typeof obj.gen === \"number\";\n  }\n\n  /**\n   * generate a simple string works as a key for the ref.\n   * @param {PDF.Ref} ref\n   */\n  static refKey(ref) {\n    return `${ref.num}-${ref.gen}`;\n  }\n\n  // from /@adsk/pdfjs-dist/lib/shared/util.js\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n\n  constructor(viewport, toPageUnits, meshCallback, fontEngine, usingTextLayer, fontAtlas, pdfRefMap) {\n\n    //\n    // Prepare canvas using PDF page dimensions\n    //\n    //TODO: Do we need that or can we just overload the entire CanvasContext API and skip the HTML element creation completely?\n    const _document = av.getGlobal().document;\n    var canvas = _document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    canvas.height = viewport.height;\n    canvas.width = viewport.width;\n    // do not use image smoothing to improve quality of small image sequences\n    context.imageSmoothingEnabled = false;\n\n    this.canvasContext = context; //REQUIRED for PDF.js interface\n    this.viewport = viewport; //REQUIRED for PDF.js interface\n    this.toPageUnits = toPageUnits;\n\n    this.meshCallback = meshCallback;\n    // Only set bounds for PDF, because Edit2d is using LmvCanvasContext for drawing, and doesn't require clipping\n    if (viewport.clipToViewport == true) {\n      let offsetX = viewport.offsetX || 0;\n      let offsetY = viewport.offsetY || 0;\n      this.bounds = new THREE.Vector4(offsetX * toPageUnits, offsetY * toPageUnits,\n      (viewport.width + offsetX) * toPageUnits, (viewport.height + offsetY) * toPageUnits);\n    }\n\n    this.currentMeshIndex = 0;\n    this.imageNumber = 0;\n    this.currentVbb = new VertexBufferBuilder(false);\n    this._curPath = null;\n    this._curClip = null;\n    this.first = true;\n    this.states = [];\n    this.glyphCache = {};\n    this.usingTextLayer = usingTextLayer;\n\n    //Fixed precision tolerance assuming the input is in typographic \"point\" units.\n    this.precisionTolerance = 0.1;\n\n    this.dbId = -1;\n    this.maxDbId = 0;\n\n    // If true, dbId is automatically increased on each beginPath call.\n    this.consecutiveIds = false;\n\n    if (av.isMobileDevice()) {\n      Autodesk.Extensions.CompGeom.SetTesselationParams(undefined, 0.1);\n    }\n\n    this.fontEngine = fontEngine;\n\n    // Use solid lines by default. See LineStyleDef.js for other line types (dashed etc.)\n    this.lineStyle = 0;\n\n    // If true, lines widths are applied in screen-space\n    this.isScreenSpace = false;\n\n    hijackContextAPI(context, this);\n\n    this.layers = {};\n    this.defaultLayerId = 0;\n    this.currentLayerId = this.defaultLayerId;\n    this.sequencedDbId = -1;\n    this.taggedId = null;\n    this.defaultVPId = 0;\n    this.viewportCounter = 1;\n    this.currentVpId = this.defaultVPId;\n    this.viewports = [this.createViewPortData(\n      new THREE.Matrix4().makeScale(viewport.scale, viewport.scale, viewport.scale).elements\n    )];\n    this.viewportMap = {};\n\n    this.ocgStack = [];\n\n    this.msdfRender = true;\n    this.fontAtlas = fontAtlas;\n    this.pdfRefMap = pdfRefMap || {};\n\n    this.smallImageSequenceToCheck = -1;\n    this.inSmallImageRendering = false;\n\n    this.inChildGroup = false;\n    this.overrideCompositeOperation = 'source-over';\n    this.overrideAlpha = 1.0;\n  }\n\n  destroy() {\n    this.canvasContext = null;\n    this.meshCallback = null;\n  }\n\n  updateDBId() {\n    if (this.taggedId != null) {\n      this.dbId = this.taggedId;\n    } else {\n      if (this.consecutiveIds) {\n        this.sequencedDbId++;\n        this.dbId = this.sequencedDbId;\n      }\n    }\n\n    this.maxDbId = Math.max(this.maxDbId, this.dbId);\n  }\n\n  snapToPixel(x, y) {\n    const invM = this.canvasContext.mozCurrentTransformInverse;\n    const m = this.canvasContext.mozCurrentTransform;\n\n    let p = LmvCanvasContext.applyTransform([x, y], m);\n    p[0] = Math.round(p[0]);\n    p[1] = Math.round(p[1]);\n    return LmvCanvasContext.applyTransform(p, invM);\n  }\n\n  save() {\n    //console.log(\"save\");\n    this.states.push({\n      clip: this._curClip,\n      consecutiveIds: this.consecutiveIds,\n      lineDashedDef: this.lineDashedDef,\n      lineStyle: this.lineStyle,\n      overrideCompositeOperation: this.overrideCompositeOperation,\n      overrideAlpha: this.overrideAlpha,\n      inChildGroup: this.inChildGroup\n    });\n\n    this.canvasContext._originalsave();\n  }\n\n  restore() {\n\n    let state = this.states.pop();\n\n    if (state) {\n      this._curClip = state.clip;\n      this.consecutiveIds = state.consecutiveIds;\n      this.lineDashedDef = state.lineDashedDef;\n      this.lineStyle = state.lineStyle;\n      this.overrideCompositeOperation = state.overrideCompositeOperation;\n      this.overrideAlpha = state.overrideAlpha;\n      this.inChildGroup = state.inChildGroup;\n    }\n\n    //console.log(\"restore\");\n    this.canvasContext._originalrestore();\n  }\n\n  flushBuffer(addCount, finalFlush, textureOption) {\n    if (!this.currentVbb.vcount && !finalFlush) {\n      return;\n    }\n\n    // LMV-5542 - support blend modes for fill colors\n    // Limit the number of times that meshes are split up.\n    // When adding support for a new compositeOperation, add it to the if condition.\n    let compositeOperation = 'source-over';\n    // ToDo: how to handle multiple composite operations? For now, an override with 'source-over' is ignored, any other override wins. See also beginChildGroup().\n    const globalCompOp = this.overrideCompositeOperation != 'source-over' ? this.overrideCompositeOperation : this.canvasContext.globalCompositeOperation;\n    if (globalCompOp === 'multiply' || globalCompOp === 'min' || globalCompOp === 'darken' || globalCompOp === 'lighten') {\n      compositeOperation = globalCompOp;\n    }\n\n    // When the blending mode has changed, we have to flush the shapes that were added with the blending mode that\n    // was current until now, that's why we use this.currentCompositeOperation below when setting material.compositeOperation.\n    const blendModeChanged = this.currentCompositeOperation !== compositeOperation;\n    const flush = finalFlush || this.currentVbb.isFull(addCount) || blendModeChanged;\n\n    if (flush) {\n      if (this.currentVbb.vcount) {\n        const mesh = this.currentVbb.toMesh();\n        mesh.material = {\n          skipEllipticals: !this.currentVbb.numEllipticals,\n          skipCircles: !this.currentVbb.numCirculars,\n          skipTriangleGeoms: !this.currentVbb.numTriangleGeoms,\n          skipMiterLines: !this.currentVbb.numMiterLines,\n          useInstancing: this.currentVbb.useInstancing,\n          isScreenSpace: !this.currentImage,\n          hasLineStyles: this.currentVbb.hasLineStyles,\n          msdfFontTexture: !!this.hasMSDFContent,\n          viewportBounds: this.bounds,\n          imageUVTexture: textureOption === IMAGE_TEXTURE\n        };\n\n        if (this.currentImage) {\n          mesh.material.image = this.currentImage;\n          mesh.material.image.name = this.currentImage.cacheKey || this.imageNumber++;\n          // Assume the background of PDF page is white, when use it to do multiply, white is better then black color\n          // And it should be correct for most cases\n          mesh.material.compositeCanvasColor = \"#ffffff\";\n          mesh.material.opacity = this.canvasContext.globalAlpha;\n          this.currentImage = null;\n        }\n\n        mesh.material.compositeOperation = this.currentCompositeOperation;\n        // LMV-5840: Apply the global alpha to the meshes in the group.\n        if (this.inChildGroup && mesh.material.opacity !== this.overrideAlpha) {\n          mesh.material.hasOpacity = !!this.overrideAlpha;\n          mesh.material.opacity = this.overrideAlpha;\n        }\n\n        this.meshCallback(mesh, this.currentMeshIndex++);\n        this.currentVbb.reset(0);\n        this.hasMSDFContent = false;\n      }\n    }\n\n    this.currentCompositeOperation = compositeOperation;\n  }\n\n  //Polytriangle requires some post-processing depending on wheter instancing is used or not\n  //TODO: This is copy-pasted from the same function in F2D.js. It's purely used to\n  //add half width outline to polytriangles so that they look antialiased.\n  addPolyTriangle(points, inds, color, dbId, layer, antialiasEdges) {\n    var me = this;\n    var edgeMap = null;\n\n    var currentVpId = this.currentVpId;\n\n    var aaLineWeight = -0.5; //negative = in pixel units\n\n    function processEdge(iFrom, iTo) {\n      if (iFrom > iTo) {\n        var tmp = iFrom;\n        iFrom = iTo;\n        iTo = tmp;\n      }\n\n      if (!edgeMap[iFrom])\n      edgeMap[iFrom] = [iTo];else\n      {\n        var adjacentVerts = edgeMap[iFrom];\n        var idx = adjacentVerts.lastIndexOf(iTo);\n        if (idx == -1)\n        adjacentVerts.push(iTo); //first time we see this edge, so remember it as exterior edge\n        else\n        adjacentVerts[idx] = -1; //the second time we see an edge mark it as interior edge\n      }\n    }\n\n\n    function addAllAntialiasEdges() {\n\n      for (var i = 0, iEnd = edgeMap.length; i < iEnd; i++) {\n\n        var adjacentVerts = edgeMap[i];\n        if (!adjacentVerts)\n        continue;\n\n        for (var j = 0; j < adjacentVerts.length; j++) {\n          var iTo = adjacentVerts[j];\n          if (iTo == -1)\n          continue; //an interior edge was here -- skip\n          else {\n            //exterior edge -- add an antialiasing line for it\n            me.flushBuffer(4);\n            me.currentVbb.addSegment(points[2 * i], points[2 * i + 1],\n            points[2 * iTo], points[2 * iTo + 1],\n            me.currentLayerId,\n            aaLineWeight,\n            color,\n            dbId, layer, currentVpId, me.lineStyle);\n          }\n        }\n      }\n    }\n\n    function antialiasOneEdge(iFrom, iTo) {\n      if (iFrom > iTo) {\n        var tmp = iFrom;\n        iFrom = iTo;\n        iTo = tmp;\n      }\n\n      var adjacentVerts = edgeMap[iFrom];\n      if (!adjacentVerts)\n      return;\n\n      var idx = adjacentVerts.indexOf(iTo);\n      if (idx != -1) {\n        //exterior edge -- add an antialiasing line for it\n        me.flushBuffer(4);\n        me.currentVbb.addSegment(points[2 * iFrom], points[2 * iFrom + 1],\n        points[2 * iTo], points[2 * iTo + 1],\n        me.currentLayerId,\n        aaLineWeight,\n        color,\n        dbId, layer, currentVpId, me.lineStyle);\n      }\n    }\n\n    if (antialiasEdges) {\n      edgeMap = new Array(points.length / 2);\n\n      for (var i = 0, iEnd = inds.length; i < iEnd; i += 3) {\n        var i0 = inds[i];\n        var i1 = inds[i + 1];\n        var i2 = inds[i + 2];\n\n        processEdge(i0, i1);\n        processEdge(i1, i2);\n        processEdge(i2, i0);\n      }\n    }\n\n    if (isNaN(color) && (color.isPattern === true || color.imageTransform)) {\n      this.flushBuffer(0, true);\n      var image = color.image;\n      var count = points.length / 2; // number of vertices\n\n      this.flushBuffer(count);\n      var vbb = this.currentVbb;\n      var vbase = vbb.vcount;\n\n      // need to apply the transformation to the UV\n      var xform = this.getCurrentTransform();\n\n      //LMV-5353\n      if (color.repetition === \"no-repeat\" && !color.isGradient) {\n        const x1 = this.tx(0, 0, xform);\n        const y1 = this.ty(0, 0, xform);\n        const x2 = this.tx(image.width, image.height, xform);\n        const y2 = this.ty(image.width, image.height, xform);\n        vbb.addVertexImagePolytriangle(x1, y1, 0, 0, 0xFFFFFFFF, dbId, layer, currentVpId);\n        vbb.addVertexImagePolytriangle(x1, y2, 0, -1, 0xFFFFFFFF, dbId, layer, currentVpId);\n        vbb.addVertexImagePolytriangle(x2, y2, 1, -1, 0xFFFFFFFF, dbId, layer, currentVpId);\n        vbb.addVertexImagePolytriangle(x2, y1, 1, 0, 0xFFFFFFFF, dbId, layer, currentVpId);\n\n        inds = [0, 1, 2, 0, 2, 3];\n      } else if (color.imageTransform) {\n        for (let i = 0; i < count; ++i) {\n          var x = points[2 * i];\n          var y = points[2 * i + 1];\n\n          const uv = LmvCanvasContext.applyTransform([x, y], color.imageTransform);\n\n          vbb.addVertexImagePolytriangle(x, y, uv[0], uv[1], 0xFFFFFFFF, dbId, layer, currentVpId);\n        }\n      } else {\n        for (let i = 0; i < count; ++i) {\n          const x = points[2 * i];\n          const y = points[2 * i + 1];\n\n          let u, v;\n          if (color.isGradient) {\n            const x1 = this._curPath.bbox.min.x;\n            const y1 = this._curPath.bbox.min.y;\n            const w1 = this._curPath.bbox.max.x - x1;\n            const h1 = this._curPath.bbox.max.y - y1;\n\n            u = (x - x1) / w1;\n            v = (y - y1) / h1;\n          } else {\n            const uv = LmvCanvasContext.applyTransform([x / this.toPageUnits, y / this.toPageUnits], this.getCurrentInverseTransform());\n\n            u = uv[0] / image.width;\n            v = uv[1] / image.height;\n          }\n\n\n          vbb.addVertexImagePolytriangle(x, y, u, 1 - v, 0xFFFFFFFF, dbId, layer, currentVpId);\n        }\n      }\n\n      this.currentImage = image;\n      vbb.addIndices(inds, vbase);\n      this.flushBuffer(0, true, IMAGE_TEXTURE);\n    } else {\n      if (this.currentVbb.useInstancing) {\n        const count = inds.length;\n        for (let i = 0; i < count; i += 3) {\n          let i0 = inds[i];\n          let i1 = inds[i + 1];\n          let i2 = inds[i + 2];\n          this.flushBuffer(4);\n\n          this.currentVbb.addTriangleGeom(points[2 * i0], points[2 * i0 + 1],\n          points[2 * i1], points[2 * i1 + 1],\n          points[2 * i2], points[2 * i2 + 1],\n          color, dbId, layer, currentVpId);\n\n          if (antialiasEdges) {\n            antialiasOneEdge(i0, i1);\n            antialiasOneEdge(i1, i2);\n            antialiasOneEdge(i2, i0);\n          }\n        }\n      } else\n      {\n        const count = points.length / 2; // number of vertices\n        this.flushBuffer(count);\n        const vbb = this.currentVbb;\n        const vbase = vbb.vcount;\n\n        for (let i = 0; i < count; ++i) {\n          const x = points[2 * i];\n          const y = points[2 * i + 1];\n          vbb.addVertexPolytriangle(x, y, color, dbId, layer, currentVpId);\n        }\n\n        vbb.addIndices(inds, vbase);\n\n        if (antialiasEdges) {\n          addAllAntialiasEdges();\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Returns a new GradientData instance.\n   * @param {Object} data - contains the raw data to create the GradientData.\n   * @returns {GradientData}\n   */\n  createGradientData(data) {\n    return new GradientData(data);\n  }\n\n  //Extract colors from HTML Canvas state\n  getFillColor() {\n    // Create a pattern from a CanvasGradient\n    const getGradientFill = (gradientData) => {\n\n      const startPoint = gradientData.startPoint.slice();\n      const endPoint = gradientData.endPoint.slice();\n\n      // according to the PDF spec, the gradient points are in shape space\n      // so apply the current transform to the gradient points\n      const xform = this.getCurrentTransform();\n      const sp0 = startPoint[0];\n      const ep0 = endPoint[0];\n      startPoint[0] = this.tx(sp0, startPoint[1], xform);\n      startPoint[1] = this.ty(sp0, startPoint[1], xform);\n      endPoint[0] = this.tx(ep0, endPoint[1], xform);\n      endPoint[1] = this.ty(ep0, endPoint[1], xform);\n\n      // build a canvas that is the size of the path's bounding box at a reasonable resolution\n      const scale = this.viewport.scale || 1;\n      let toCanvas = 1.0 / this.toPageUnits / scale;\n      let width = (this._curPath.bbox.max.x - this._curPath.bbox.min.x) * toCanvas;\n      let height = (this._curPath.bbox.max.y - this._curPath.bbox.min.y) * toCanvas;\n\n      // limit the size of the canvas to save memory\n      const CANVAS_SIZE_LIMIT = 2048;\n      const maxDim = Math.max(width, height, 1);\n      if (maxDim > CANVAS_SIZE_LIMIT) {\n        toCanvas *= CANVAS_SIZE_LIMIT / maxDim;\n        // repeat the transform with the new scale\n        width = (this._curPath.bbox.max.x - this._curPath.bbox.min.x) * toCanvas;\n        height = (this._curPath.bbox.max.y - this._curPath.bbox.min.y) * toCanvas;\n      }\n\n      // map the gradient from shape space into the path bbox\n      // subtract the bounding box min point\n      const offsetX = this._curPath.bbox.min.x;\n      const offsetY = this._curPath.bbox.min.y;\n      startPoint[0] -= offsetX;\n      startPoint[1] -= offsetY;\n      endPoint[0] -= offsetX;\n      endPoint[1] -= offsetY;\n\n      // scale the gradient to the size of the canvas\n      startPoint[0] *= toCanvas;\n      startPoint[1] *= toCanvas;\n      endPoint[0] *= toCanvas;\n      endPoint[1] *= toCanvas;\n\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = Math.max(width, 1);\n      tempCanvas.height = Math.max(height, 1);\n\n      const tempCtx = tempCanvas.getContext('2d');\n      // Create the gradient with the paths bounding box offset applied\n      // var gradient = createGradient(tempCtx, gradientData);\n      const gradient = gradientData.generateCanvasGradient(tempCtx, startPoint, endPoint);\n      tempCtx.fillStyle = gradient;\n      tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\n\n      const pattern = this.createPattern(tempCanvas, 'no-repeat');\n      pattern.isGradient = true;\n      return pattern;\n    };\n\n\n    const fillStyle = this.canvasContext.fillStyle;\n    if (fillStyle && fillStyle.isPattern === true) {\n      return fillStyle;\n    } else if (fillStyle instanceof CanvasGradient) {\n      const gradientData = new GradientData(fillStyle);\n      return getGradientFill(gradientData);\n    } else if (typeof fillStyle !== \"string\") {\n      console.warn(\"Unsupported fill style.\");\n      return 0x00000000;\n    }\n\n    var rgb = parseInt(fillStyle.slice(1), 16);\n    var a = 255 * this.canvasContext.globalAlpha << 24;\n    var c = a | (rgb & 0xff) << 16 | rgb & 0xff00 | rgb >> 16 & 0xff;\n    return c;\n  }\n\n  getStrokeColor() {\n\n    let ctx = this.canvasContext;\n\n    if (this.lastStrokeStyle === ctx.strokeStyle && ctx.globalAlpha === this.lastAlpha) {\n      return this.lastRgb;\n    } else {\n      let rgb;\n      if (typeof ctx.strokeStyle !== \"string\") {\n        console.warn(\"Unsupported stroke style.\");\n        rgb = parseInt(0x00000000, 16);\n      } else {\n        rgb = parseInt(ctx.strokeStyle.slice(1), 16);\n      }\n      var a = 255 * ctx.globalAlpha << 24;\n      var c = a | (rgb & 0xff) << 16 | rgb & 0xff00 | rgb >> 16 & 0xff;\n\n      this.lastRgb = c;\n      this.lastStrokeStyle = ctx.strokeStyle;\n      this.lastAlpha = ctx.globalAlpha;\n\n      return c;\n    }\n\n  }\n\n  getCurrentTransform() {\n    let xform = this.canvasContext.mozCurrentTransform;\n\n    //Pay attention here: In case we are processing the path of a character and we want to\n    //cache it for later use, we have to neutralize the part of the canvas transform that positions\n    //the character in the page, but we need to keep the rest of the transform (that positions parts\n    //of the character in its own em-box). This is what the inverse transform multiplication here does.\n    //TODO: we can optimize this to only compute the multiplication in case mozCurrentTransform changes.\n    if (this.isFontChar) {\n      let m = this.invXform;\n      let a = xform[0],b = xform[1],c = xform[2],d = xform[3],e = xform[4],f = xform[5];\n      _tmpXform[0] = m[0] * a + m[2] * b;\n      _tmpXform[1] = m[1] * a + m[3] * b;\n      _tmpXform[2] = m[0] * c + m[2] * d;\n      _tmpXform[3] = m[1] * c + m[3] * d;\n      _tmpXform[4] = m[0] * e + m[2] * f + m[4];\n      _tmpXform[5] = m[1] * e + m[3] * f + m[5];\n      return _tmpXform;\n    }\n    return xform;\n  }\n\n  getCurrentInverseTransform() {\n    return this.canvasContext.mozCurrentTransformInverse;\n  }\n\n  tx(x, y, xform) {\n    xform = xform || this.getCurrentTransform();\n    return (x * xform[0] + y * xform[2] + xform[4]) * (this.isFontChar ? 1 : this.toPageUnits);\n  }\n\n  ty(x, y, xform) {\n    xform = xform || this.getCurrentTransform();\n    return (x * xform[1] + y * xform[3] + xform[5]) * (this.isFontChar ? 1 : this.toPageUnits);\n  }\n\n  scaleValue(v, xform) {\n    xform = xform || this.getCurrentTransform();\n    return this.toPageUnits * Math.sqrt(Math.abs(xform[0] * xform[3] - xform[1] * xform[2])) * v; //assumes uniform;\n  }\n\n  transformBox(bbox, xform, dst) {\n    xform = xform || this.getCurrentTransform();\n\n    _tmpBox.makeEmpty();\n\n    _tmpVec.set(this.tx(bbox.min.x, bbox.min.y, xform), this.ty(bbox.min.x, bbox.min.y, xform));\n    _tmpBox.expandByPoint(_tmpVec);\n\n    _tmpVec.set(this.tx(bbox.max.x, bbox.min.y, xform), this.ty(bbox.max.x, bbox.min.y, xform));\n    _tmpBox.expandByPoint(_tmpVec);\n\n    _tmpVec.set(this.tx(bbox.max.x, bbox.max.y, xform), this.ty(bbox.max.x, bbox.max.y, xform));\n    _tmpBox.expandByPoint(_tmpVec);\n\n    _tmpVec.set(this.tx(bbox.min.x, bbox.max.y, xform), this.ty(bbox.min.x, bbox.max.y, xform));\n    _tmpBox.expandByPoint(_tmpVec);\n\n    if (dst) {\n      dst.copy(_tmpBox);\n      return dst;\n    } else {\n      return _tmpBox.clone();\n    }\n  }\n\n\n  fillRect(x, y, w, h) {\n    if (this.inSmallImageRendering) {\n      // Snap the rectangle to whole pixel dimensions in order to avoid antialiasing\n      const p1 = this.snapToPixel(x, y);\n      const p2 = this.snapToPixel(x + w, y + h);\n      const wS = p2[0] - p1[0];\n      const hS = p2[1] - p1[1];\n      this.canvasContext._originalfillRect(p1[0], p1[1], wS, hS);\n      return;\n    }\n\n    this.updateDBId();\n\n    // Hack: Assumption here is that the first fillRect call is for the white background quad.\n    //       For this, we don't want a dbI and use -1 instead. Unfortunately, this fillRect call happens\n    //       inside PDF.js (see beginDrawing in display/canvas.js), so we cannot easily set this id from outside.\n    this.rect(x, y, w, h);\n\n    this.dbId = this.first ? -1 : this.dbId;\n    this.first = false;\n    this.fill();\n    this.beginPath();\n  }\n\n  strokeRect(x, y, w, h) {\n    //TODO:\n    console.log(\"strokeRect\");\n  }\n\n  clearRect(x, y, w, h) {\n    console.log(\"clearRect\");\n    //TODO:\n  }\n\n  _beginTextChar(character, x, y, font, fontSize) {\n    this.isFontChar = true;\n    this.invXform = this.canvasContext.mozCurrentTransformInverse;\n    this.hashKey = character.codePointAt(0) + \"/\" + font.loadedName + \"/\" + fontSize;\n    this.cachedGlyph = this.glyphCache[this.hashKey];\n\n    if (this.cachedGlyph) {\n      this.skipPath = true;\n    } else {\n      this.skipPath = false;\n    }\n    //console.log(character, x, y, font, fontSize);\n  }\n\n  drawMSDFText(character, scaleX, scaleY, font, fontSize) {\n    scaleX = 0;\n    var fontName = font.name;\n\n    function distance(x0, y0, x1, y1, x2, y2) {\n      return Math.abs((y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1) / Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    }\n\n    if (this.fontAtlas && this.fontAtlas.charsMap && this.fontAtlas.charsMap[fontName]) {\n      var charIndex = this.fontAtlas.charsMap[fontName][character.charCodeAt(0)];\n      if (charIndex == undefined) {\n        return false;\n      } else {\n        if (this.currentVbb.isFull(4)) {\n          this.flushBuffer(0, true);\n        }\n\n        this.hasMSDFContent = true;\n        var char = this.fontAtlas.chars[charIndex];\n        if (char.page > 0) {\n          // Now only support 1 page of font texture, need to add extra logic for multiple font texture in the shader pipeline\n          return false;\n        }\n        var common = this.fontAtlas.common[char.common];\n        var info = this.fontAtlas.info[char.info];\n\n        // need to consider the font size\n        var scale = fontSize / info.size;\n        var w = char.width * (scale + scaleX);\n        let flag = char.inverseYAxis ? -1 : 1;\n        var h = char.height * (scale + scaleY) * flag;\n        var x = char.txoffset * (scale + scaleX),\n          y = char.tyoffset * (scale + scaleY) * -flag;\n\n        var points = [\n        x, y,\n        x, y + h,\n        x + w, y + h,\n        x + w, y];\n\n\n        var ps = [];\n        for (let i = 0; i < points.length; i += 2) {\n          ps.push(this.tx(points[i], points[i + 1]));\n          ps.push(this.ty(points[i], points[i + 1]));\n        }\n        let uv = [];\n\n        if (char.inverseYAxis) {\n          uv = [\n          char.x / common.scaleW, 1 - char.y / common.scaleH,\n          char.x / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n          (char.x + char.width) / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n          (char.x + char.width) / common.scaleW, 1 - char.y / common.scaleH];\n\n        } else {\n          uv = [\n          char.x / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n          char.x / common.scaleW, 1 - char.y / common.scaleH,\n          (char.x + char.width) / common.scaleW, 1 - char.y / common.scaleH,\n          (char.x + char.width) / common.scaleW, 1 - (char.y + char.height) / common.scaleH];\n\n        }\n\n        // do a fast clipping for MSDF text, if the text is clipped out any part, will not show the text to make it simple\n        // otherwise it requires to do a whole UV mapping for each part left, which is overhead at this moment.\n        if (this._curClip) {\n          var path = new _path2d__WEBPACK_IMPORTED_MODULE_0__.Path2D(this.precisionTolerance);\n          let index = 0;\n          path.moveTo(ps[index++], ps[index++]);\n          path.lineTo(ps[index++], ps[index++]);\n          path.lineTo(ps[index++], ps[index++]);\n          path.lineTo(ps[index++], ps[index++]);\n          path.closePath();\n\n          var subjFlatted = path.flattened || path.flatten(true);\n          var clipFlatted = this._curClip.flattened || this._curClip.flatten(true);\n          var precheckResult = path.preCheckForClipping(this, clipFlatted, subjFlatted, false, false);\n          if (precheckResult.needClipping) {\n            var polygons = path.msdfClipping(clipFlatted);\n            let x1 = ps[0],y1 = ps[1];\n            let x2 = ps[6],y2 = ps[7];\n            let x3 = ps[2],y3 = ps[3];\n\n            let w1 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            let h1 = Math.sqrt((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1));\n            // need to get the corresponding UV value\n            for (var j = 0; j < polygons.length; j++) {\n              let polygon = polygons[j];\n              if (this.currentVbb.isFull(polygon.vertices.length)) {\n                this.flushBuffer(0, true);\n              }\n              let vbase = this.currentVbb.vcount;\n              for (var i = 0; i < polygon.vertices.length; i += 2) {\n                let x0 = polygon.vertices[i];\n                let y0 = polygon.vertices[i + 1];\n                let dy = distance(x0, y0, x1, y1, x2, y2);\n                let dx = distance(x0, y0, x1, y1, x3, y3);\n\n                let u = uv[0] + (uv[4] - uv[0]) * (dx / w1);\n                let v = uv[1] + (uv[5] - uv[1]) * (dy / h1);\n                this.currentVbb.addVertexMSDFPolytriangle(x0, y0, u, v, this.getFillColor(), this.dbId, this.currentLayerId, 0);\n              }\n              this.currentVbb.addIndices(polygon.indices, vbase);\n            }\n\n            this.currentImage = this.fontAtlas.pages[char.page];\n            return true;\n          } else if (precheckResult.needCancel) {\n            return true;\n          }\n        }\n\n        if (this.currentVbb.isFull(4)) {\n          this.flushBuffer(0, true);\n        }\n        let vbase = this.currentVbb.vcount;\n        var count = points.length / 2;\n        for (let i = 0; i < count; i++) {\n          this.currentVbb.addVertexMSDFPolytriangle(ps[i * 2], ps[i * 2 + 1], uv[i * 2], uv[i * 2 + 1], this.getFillColor(), this.dbId, this.currentLayerId, 0);\n        }\n\n        this.currentVbb.addIndices([0, 2, 1, 0, 2, 3], vbase);\n        this.currentImage = this.fontAtlas.pages[char.page];\n\n        return true;\n      }\n\n    } else {\n      return false;\n    }\n  }\n\n  beginPath(character, x, y, font, fontSize) {\n    if (this.inSmallImageRendering) {\n      // ignore text use case\n      if (typeof character !== \"string\") {\n        this.canvasContext._originalbeginPath();\n      }\n      return;\n    }\n\n    this.updateDBId();\n\n    if (typeof character === \"string\" && font && fontSize) {\n      if (this.fontAtlas && this.drawMSDFText(character, x, y, font, fontSize)) {\n        this.skipPath = true;\n      } else {\n        if (this.usingTextLayer === true) {\n          this.skipPath = true;\n        } else {\n          this._beginTextChar(character, x, y, font, fontSize);\n        }\n      }\n    } else {\n      this.skipPath = false;\n      this.isFontChar = false;\n      this.cachedGlyph = null;\n    }\n\n    if (this.skipPath)\n    this._curPath = null;else\n    {\n      this._curPath = new _path2d__WEBPACK_IMPORTED_MODULE_0__.Path2D(this.isFontChar ? 0.0001 : this.precisionTolerance);\n\n      // Apply custom tess params (if specified)\n      this._curPath.setTessParams(this.tessParams);\n    }\n  }\n\n  setMiterLine(isMiterLine) {\n    this._curPath.isMiterLine = isMiterLine;\n  }\n\n  closePath() {\n    if (this.inSmallImageRendering) {\n      this.canvasContext._originalclosePath();\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    this._curPath.closePath();\n    this.cachedGlyph = null;\n  }\n\n  moveTo(x, y) {\n    if (this.inSmallImageRendering) {\n      // snap to pixel so that axis-aligned rectangles do not trigger antialiasing\n      const p = this.snapToPixel(x, y);\n      this.canvasContext._originalmoveTo(p[0], p[1]);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    if (!this._curPath)\n    this.beginPath();\n\n    let xform = this.getCurrentTransform();\n\n    this._curPath.moveTo(this.tx(x, y, xform), this.ty(x, y, xform));\n  }\n\n  lineTo(x, y) {\n    if (this.inSmallImageRendering) {\n      // snap to pixel so that axis-aligned rectangles do not trigger antialiasing\n      const p = this.snapToPixel(x, y);\n      this.canvasContext._originallineTo(p[0], p[1]);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    let xform = this.getCurrentTransform();\n\n    this._curPath.lineTo(this.tx(x, y, xform), this.ty(x, y, xform));\n  }\n\n  arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    if (this.inSmallImageRendering) {\n      // forward without special treatment - seems unlikely to be used between image strips\n      this.canvasContext._originalarc(x, y, radius, startAngle, endAngle, anticlockwise);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    //TODO: transform\n\n    this._curPath.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n  }\n\n  arcTo(x1, y1, x2, y2, radius) {\n    if (this.inSmallImageRendering) {\n      // forward without special treatment - seems unlikely to be used between image strips\n      this.canvasContext._originalarcTo(x1, y1, x2, y2, radius);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    let xform = this.getCurrentTransform();\n\n    this._curPath.arcTo(this.tx(x1, y1, xform), this.ty(x1, y1, xform),\n    this.tx(x2, y2, xform), this.ty(x2, y2, xform),\n    this.scaleValue(radius, xform));\n  }\n\n  quadraticCurveTo(cp1x, cp1y, x, y) {\n    if (this.inSmallImageRendering) {\n      // forward without special treatment - seems unlikely to be used between image strips\n      this.canvasContext._originalquadraticCurveTo(cp1x, cp1y, x, y);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    let xform = this.getCurrentTransform();\n\n    this._curPath.quadraticCurveTo(this.tx(cp1x, cp1y, xform), this.ty(cp1x, cp1y, xform),\n    this.tx(x, y, xform), this.ty(x, y, xform));\n  }\n\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    if (this.inSmallImageRendering) {\n      // forward without special treatment - seems unlikely to be used between image strips\n      this.canvasContext._originalbezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    let xform = this.getCurrentTransform();\n\n    this._curPath.bezierCurveTo(this.tx(cp1x, cp1y, xform), this.ty(cp1x, cp1y, xform),\n    this.tx(cp2x, cp2y, xform), this.ty(cp2x, cp2y, xform),\n    this.tx(x, y, xform), this.ty(x, y, xform));\n  }\n\n  ellipse(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n    if (this.inSmallImageRendering) {\n      // forward without special treatment - seems unlikely to be used between image strips\n      this.canvasContext._originalellipse(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n      return;\n    }\n\n\n    if (this.skipPath) {\n      return;\n    }\n\n    // TODO: We currently don't use ellipse() with a transform.\n    //       The current code only works for translation and uniform scale.\n    //       For rotation, startAngle/endAngle would change.\n    //       For flipping, ccw may change.\n    //       For skew, it gets really fun:\n    //        see https://math.stackexchange.com/questions/2068583/when-you-skew-an-ellipse-how-do-you-calculate-the-angle-of-rotation-and-the-new\n    let xform = this.getCurrentTransform();\n\n    this._curPath.ellipse(\n      this.tx(cx, cy, xform), this.ty(cx, cy, xform),\n      this.scaleValue(rx, xform),\n      this.scaleValue(ry, xform),\n      rotation,\n      startAngle,\n      endAngle,\n      ccw\n    );\n  }\n\n  rect(x, y, w, h) {\n    if (this.inSmallImageRendering) {\n      // snap to pixel so that axis-aligned rectangles do not trigger antialiasing\n      const p1 = this.snapToPixel(x, y);\n      const p2 = this.snapToPixel(x + w, y + h);\n      const wS = p2[0] - p1[0];\n      const hS = p2[1] - p1[1];\n      this.canvasContext._originalrect(p1[0], p1[1], wS, hS);\n      return;\n    }\n\n\n    if (this.skipPath)\n    return;\n\n    let xform = this.getCurrentTransform();\n\n    if (!this._curPath)\n    this.beginPath();\n\n    this._curPath.moveTo(this.tx(x, y, xform), this.ty(x, y, xform));\n    this._curPath.lineTo(this.tx(x + w, y, xform), this.ty(x + w, y, xform));\n    this._curPath.lineTo(this.tx(x + w, y + h, xform), this.ty(x + w, y + h, xform));\n    this._curPath.lineTo(this.tx(x, y + h, xform), this.ty(x, y + h, xform));\n    this._curPath.closePath();\n  }\n\n  fill() {\n    if (this.inSmallImageRendering) {\n      // let the original canvas do its job\n      if (arguments.length > 0 && typeof (arguments.length <= 0 ? undefined : arguments[0]) === \"string\") {\n        // arg[0] is fillrule, ignore possible extra custom arguments\n        this.canvasContext._originalfill(arguments.length <= 0 ? undefined : arguments[0]);\n      } else {\n        // no or only custom arguments\n        this.canvasContext._originalfill();\n      }\n      return;\n    }\n\n\n    //Special flag passed to us by customization in the pdf.js library,\n    //telling us to skip the antialiasing for polygons that are both filled and stroked\n    let isFillStrokeCombo = false;\n    let fillRule = 'nonzero';\n    if (arguments.length) {var _ref;\n      let lastArg = (_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]);\n      if (typeof lastArg === \"boolean\") {\n        isFillStrokeCombo = lastArg;\n      }\n\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === \"string\") {\n        fillRule = arguments.length <= 0 ? undefined : arguments[0];\n      }\n    }\n\n    if (this.isFontChar && !this.cachedGlyph) {\n      this.glyphCache[this.hashKey] = this._curPath;\n      this.cachedGlyph = this._curPath;\n      this.cachedGlyph.isFontChar = true;\n    }\n\n    this.isFontChar = false;\n\n    if (this.cachedGlyph) {\n      this.cachedGlyph.fill(this, this.getFillColor(), this.dbId, this.currentLayerId, this._curClip, true);\n    } else {\n      this._curPath && this._curPath.fill(this, this.getFillColor(), this.dbId, this.currentLayerId, this._curClip, false, isFillStrokeCombo, fillRule);\n    }\n\n    this.skipPath = false;\n\n    //this._curClip = null;\n    //lmvContext._curPath = null;\n  }\n\n  stroke() {\n    if (this.inSmallImageRendering) {\n      // let the original canvas do its job\n      this.canvasContext._originalstroke();\n      return;\n    }\n\n    if (this.isFontChar && !this.cachedGlyph) {\n      this.glyphCache[this.hashKey] = this._curPath;\n      this.cachedGlyph = this._curPath;\n      this.cachedGlyph.isFontChar = true;\n    }\n\n    this.updateLineDashStyle();\n    this.isFontChar = false;\n\n    // LineShader uses negative lineWidths to indicate screen-space line widths. Note that this.canvasContext.lineWidth does not allow negative values.\n    // Therefore, we apply the sign separately.\n    const sign = this.isScreenSpace ? -1.0 : 1.0;\n\n    if (this.cachedGlyph) {\n      this.cachedGlyph.stroke(this, sign * this.scaleValue(this.canvasContext.lineWidth), this.getStrokeColor(), this.dbId, this.currentLayerId, this._curClip, true, this.lineStyle, this.canvasContext.lineCap);\n    } else {\n      this._curPath && this._curPath.stroke(this, sign * this.scaleValue(this.canvasContext.lineWidth), this.getStrokeColor(), this.dbId, this.currentLayerId, this._curClip, false, this.lineStyle, this.canvasContext.lineCap);\n    }\n\n    this.skipPath = false;\n\n    //lmvContext._curPath = null;\n  }\n\n  clip(param1, param2) {\n    if (this.inSmallImageRendering) {\n      // let the original canvas do its job\n      this.canvasContext._originalclip(param1);\n      return;\n    }\n\n\n    if (param2 !== undefined && param1 !== undefined) {\n      this._curClip = param1;\n      console.log(\"Probably unsupported use case\");\n    } else {\n\n      //The clip region is also affected by any existing clip region,\n      //i.e. we have to clip the clip.\n      if (this._curClip) {\n        this._curClip = this._curClip.clip(this._curPath, param1);\n      } else {\n        this._curClip = this._curPath;\n      }\n\n      this._curPath = null;\n    }\n\n    //console.log(\"CLIP\", param1, param2);\n  }\n\n  strokeText(text, x, y, maxWidth, font, fontSize) {\n\n    let ctx = this.canvasContext;\n    ctx.save();\n    ctx.translate(x, y);\n\n    this.fontEngine.drawText(this, text, 0, 0, font, fontSize);\n    this.stroke();\n\n    ctx.restore();\n  }\n\n  fillText(text, x, y, maxWidth, font, fontSize) {\n\n    let ctx = this.canvasContext;\n    ctx.save();\n    ctx.translate(x, y);\n\n    this.fontEngine.drawText(this, text, 0, 0, font, fontSize);\n    this.fill();\n    //this.stroke();\n\n    ctx.restore();\n  }\n\n  getRotationAndScale(xform) {\n    _mtx4.elements[0] = xform[0];\n    _mtx4.elements[1] = xform[1];\n    _mtx4.elements[4] = xform[2];\n    _mtx4.elements[5] = xform[3];\n    _mtx4.elements[12] = xform[4];\n    _mtx4.elements[13] = xform[5];\n    _mtx4.decompose(_offset, _quat, _scale);\n\n    //Derive the rotation angle by converting the quaternion to axis-angle.\n    let s = Math.sqrt(1.0 - _quat.w * _quat.w);\n    _axis.set(_quat.x / s, _quat.y / s, _quat.z / s);\n    let angle = 2.0 * Math.acos(Math.max(Math.min(1, _quat.w), -1));\n    //Take care to negate the angle if the rotation axis is into the page.\n    if (_quat.z < 0) {\n      angle = -angle;\n    }\n\n    //Angle needs to be in the range 0-2pi for use by addTextureQuad below,\n    //while input has domain [-pi, pi].\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    return {\n      angle,\n      scale: _scale\n    };\n  }\n\n  drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n\n    if (this.inSmallImageRendering) {\n      let fourParam = false;\n      if (dx === undefined) {\n        // 2 or 4 param call (drawImage(image, dx, dy) or drawImage(image, dx, dy, dWidth, dHeight))\n        // -> move data into the correct variables\n        dx = sx;\n        dy = sy;\n        dWidth = sWidth;\n        dHeight = sHeight;\n        fourParam = true;\n      }\n\n      if (dWidth === undefined) {\n        // dWidth still undefined -> 2 param call (drawImage(image, dx, dy))\n        // -> move data into the correct variables and fill in image dimensions\n        dx = sx;\n        dy = sy;\n        dWidth = image.width;\n        dHeight = image.height;\n        // treat it as 4-param call later since we tamper with the dimensions\n        fourParam = true;\n      }\n\n      const p1 = this.snapToPixel(dx, dy);\n      const p2 = this.snapToPixel(dx + dWidth, dy + dHeight);\n      const w = p2[0] - p1[0];\n      const h = p2[1] - p1[1];\n      if (fourParam) {\n        this.canvasContext._originaldrawImage(image, p1[0], p1[1], w, h);\n      } else {\n        this.canvasContext._originaldrawImage(image, sx, sy, sWidth, sHeight, p1[0], p1[1], w, h);\n      }\n      return;\n    }\n\n    let clip = this._curClip;\n\n    if (image.width === 0 || image.height === 0) {\n      console.warn(\"Zero size image, skipping\");\n      return;\n    }\n\n    const xform = this.getCurrentTransform();\n    const { angle, scale } = this.getRotationAndScale(xform);\n\n    if (dx === undefined) {\n      dx = sx;\n      dy = sy;\n      dWidth = sWidth;\n      dHeight = sHeight;\n    }\n\n    if (dWidth === undefined) {\n      dWidth = image.width;\n      dHeight = image.height;\n    }\n\n    if (!dWidth) {\n      console.warn(\"Zero size image, skipping\");\n      return;\n    }\n\n    //console.log(\"Draw image\", dWidth, dHeight);\n\n    if (clip) {\n      // if a clipping path is specified we will render the image with the clipping polygon and\n      // not with a quad\n\n      const x1 = this.tx(dx, dy);\n      const y1 = this.ty(dx, dy);\n      const x2 = this.tx(dx + dWidth, dy);\n      const y2 = this.ty(dx + dWidth, dy);\n      const x3 = this.tx(dx + dWidth, dy + dHeight);\n      const y3 = this.ty(dx + dWidth, dy + dHeight);\n      const x4 = this.tx(dx, dy + dHeight);\n      const y4 = this.ty(dx, dy + dHeight);\n\n      // compute transformation from uv to page space:\n      // straight-forward solution without y-flip should read as\n      //   const uv2page = [ x2-x1, y2-y1, x4-x1, y4-y1, x1, y1 ];\n      // but webgl uvs have [0, 0] at lower left corner while pdf images have [0, 0] at upper left corner\n      // pdf.js calls drawImage() with image convention, so the flip needs to get accounted for here:\n      // [0, 0] -> [x4, y4]; [1, 0] -> [x3, y3]; [1, 1] -> [x2, y2]; [0, 1] -> [x1, y1]\n      const uv2page = [x3 - x4, y3 - y4, x1 - x4, y1 - y4, x4, y4];\n      // now invert uv2page to get from page to uv space\n      const page2uv = LmvCanvasContext.inverseTransform(uv2page);\n\n      let color = {\n        image: image,\n        imageTransform: page2uv\n      };\n\n      // the clipping path might be larger than the image so we need to clip it with the image quad\n      // to avoid repetition\n      let imageClip = new _path2d__WEBPACK_IMPORTED_MODULE_0__.Path2D(this.precisionTolerance);\n      imageClip.moveTo(x1, y1);\n      imageClip.lineTo(x2, y2);\n      imageClip.lineTo(x3, y3);\n      imageClip.lineTo(x4, y4);\n      imageClip.closePath();\n\n      clip.fill(this, color, this.dbId, this.currentLayerId, imageClip, false, false);\n    } else {\n      //Get the transformed page space image center\n      let cx = this.tx(dx + dWidth / 2, dy + dHeight / 2);\n      let cy = this.ty(dx + dWidth / 2, dy + dHeight / 2);\n\n      //Get scaled width/height. Note these scalings can result in negative numbers\n      let w = dWidth * scale.x * this.toPageUnits;\n      let h = -dHeight * scale.y * this.toPageUnits; //Image input is y-down, so we build in a y-inversion\n\n      this.flushBuffer(0, true);\n      this.currentVbb.addTexturedQuad(cx, cy, w, h, angle, 0xffff00ff, 0, this.currentLayerId, 0);\n      this.currentImage = image;\n      this.flushBuffer(0, true, QUAD_TEXTURE);\n    }\n  }\n\n  /**\n   * Mapping back the reference object to its value, and loop 1 level in\n   * @param {Object} properties\n   */\n  _processProperties(properties) {\n    if (LmvCanvasContext.isRef(properties)) {\n      properties = this.pdfRefMap[LmvCanvasContext.refKey(properties)];\n    }\n\n    for (let key in properties) {\n      if (LmvCanvasContext.isRef(properties[key])) {\n        properties[key] = this.pdfRefMap[LmvCanvasContext.refKey(properties[key])];\n      }\n    }\n    return properties;\n  }\n\n  beginMarkedContent(properties) {\n    if (properties) {\n      properties = this._processProperties(properties);\n    }\n\n    // Revit will provided tag as number\n    let tag = properties.name || properties.DBID;\n    if (!isNaN(tag)) {\n      this.taggedId = parseInt(tag);\n    } else {\n      this.taggedId = null;\n    }\n\n    if (this.taggedId !== null && this.dbId !== this.taggedId) {\n      this.updateDBId();\n    }\n\n    if (properties.VP)\n    this.currentVpId = this.viewportCounter++;\n\n    this.ocgStack.push({\n      taggedId: this.taggedId,\n      viewPortId: this.currentVpId\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (properties) {\n      properties = this._processProperties(properties);\n    }\n\n    if (tag === \"OC\") {\n      var layerId = this.layers[LmvCanvasContext.getLayerKey(properties)];\n      if (layerId === undefined) {\n        // VIZX-219: continue to use current layer if the layer is not found\n        layerId = this.currentLayerId;\n      }\n      this.currentLayerId = layerId;\n\n      this.ocgStack.push({\n        layerId: this.currentLayerId\n      });\n    } else {\n      if (!isNaN(tag)) {\n        this.taggedId = parseInt(tag);\n        if (this.dbId !== this.taggedId) {\n          this.updateDBId();\n        }\n      }\n      if (properties) {\n        if (properties.VP)\n        this.currentVpId = this.viewportCounter++;\n\n        this.ocgStack.push({\n          viewPortId: this.currentVpId,\n          taggedId: this.taggedId\n        });\n      } else {\n        this.ocgStack.push({\n        });\n      }\n    }\n  }\n\n  endMarkedContent() {\n    if (this.ocgStack.length > 0) {\n      this.ocgStack.pop();\n    }\n\n    const findLast = (key) => {\n      for (let i = this.ocgStack.length - 1; i >= 0; --i) {\n        if (key in this.ocgStack[i]) {\n          return this.ocgStack[i][key];\n        }\n      }\n      return null;\n    };\n\n    // Assign last used layer, taggedId and vpId\n    let prevLayerId = findLast('layerId');\n    let prevVpId = findLast('viewPortId');\n    let prevTaggedId = findLast('taggedId');\n\n    this.currentLayerId = prevLayerId !== null ? prevLayerId : this.defaultLayerId;\n    this.currentVpId = prevVpId !== null ? prevVpId : this.defaultVPId;\n    let tagChanged = prevTaggedId !== this.taggedId;\n    this.taggedId = prevTaggedId;\n    if (tagChanged) {\n      this.updateDBId();\n    }\n  }\n\n  setLineStyleParam(param) {\n    if (!this.lineStyleInitialized) {\n      // Add those default definition in, to keep the app constent.\n      let exH = avp.LineStyleDefs.length;\n      let exW = 1;\n      for (var i = 0; i < avp.LineStyleDefs.length; i++) {\n        exW = Math.max(avp.LineStyleDefs[i].def.length, exW);\n      }\n\n      let { tex, pw, lineStyleTex } = avp.createLinePatternTextureData(Math.max(param.width, exW), param.height + exH + 1);\n      this.lineStyleIndex = 0;\n      this.lineStylePw = pw;\n      this.lineStyleTexData = tex;\n      this.lineStyleTexture = lineStyleTex;\n      this.lineStyleIndexMap = {};\n\n      for (let i = 0; i < avp.LineStyleDefs.length; i++) {\n        this.addNewDashedLineStyle(avp.LineStyleDefs[i], 96);\n      }\n\n      // set the default value\n      this.lineStyle = 0;\n      this.lineStyleInitialized = true;\n    }\n  }\n\n  addNewDashedLineStyle(ls, dpi) {\n    let key = ls.def.join(\"/\");\n    if (this.lineStyleIndexMap[key] != undefined) {\n      return this.lineStyleIndexMap[key];\n    } else {\n      avp.createLinePatternForDef(ls, this.lineStyleTexData, this.lineStyleIndex, this.lineStylePw, dpi);\n      let index = this.lineStyleIndex;\n      this.lineStyleIndexMap[key] = index;\n      this.lineStyleIndex++;\n\n      return index;\n    }\n  }\n\n  setLineDash(def) {\n    if (!this.lineStyleInitialized) {\n      this.setLineStyleParam({ width: 5, height: 4 });\n    }\n\n    this.lineDashedDef = def;\n  }\n\n  createPattern(image, repetition) {\n    var pattern = this.canvasContext._originalcreatePattern(image, repetition);\n    pattern.image = image;\n    pattern.repetition = repetition;\n    pattern.isPattern = true;\n    return pattern;\n  }\n\n  updateLineDashStyle() {\n    // need apply the transformation matrix to the dashed value\n    let def = this.lineDashedDef;\n\n    if (def) {\n      if (def.length > 0) {\n        let xform = this.getCurrentTransform();\n        let def1 = [];\n        for (var i = 0; i < def.length; i++) {\n          let x = (def[i] * xform[0] + def[i] * xform[2]) * this.toPageUnits;\n          x = parseFloat(x.toFixed(6));\n          def1.push(x);\n        }\n        // 96 DPI was defined for lineStyleDef.js, and shader were expecting that value\n        // when we parse the pdf, the effective dpi need to be ==> 96 / 72 / this.toPageUnits\n        this.lineStyle = this.addNewDashedLineStyle({ def: def1 }, 96 / 72 / this.toPageUnits);\n      } else {\n        this.lineStyle = 0;\n      }\n    }\n    // In case of user directly controlled the line style\n    // Do not set lineStyle to 0 here.\n  }\n\n  setCircleInfo(circleInfo) {\n    this.circleInfo = circleInfo;\n  }\n\n  setCurrentOperatorIndex(index) {\n    const addPointBBox = function (bbox, x, y) {\n      bbox[0] = Math.min(bbox[0], x);\n      bbox[1] = Math.min(bbox[1], y);\n      bbox[2] = Math.max(bbox[2], x);\n      bbox[3] = Math.max(bbox[3], y);\n    };\n\n    const transformBBox = function (bbox, xform) {\n      let result = [1e10, 1e10, -1e10, -1e10]; // [minx, miny, maxx, maxy]\n      // xform uses the canvas context convention: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform\n      addPointBBox(result, bbox[0] * xform[0] + bbox[1] * xform[2] + xform[4], bbox[0] * xform[1] + bbox[1] * xform[3] + xform[5]); // minx, miny\n      addPointBBox(result, bbox[0] * xform[0] + bbox[3] * xform[2] + xform[4], bbox[0] * xform[1] + bbox[3] * xform[3] + xform[5]); // minx, maxy\n      addPointBBox(result, bbox[2] * xform[0] + bbox[1] * xform[2] + xform[4], bbox[2] * xform[1] + bbox[1] * xform[3] + xform[5]); // maxx, miny\n      addPointBBox(result, bbox[2] * xform[0] + bbox[3] * xform[2] + xform[4], bbox[2] * xform[1] + bbox[3] * xform[3] + xform[5]); // maxx, maxy\n      return result;\n    };\n\n    this.currentOpIndex = index;\n    if (this.circleInfo && this.circleInfo[index]) {\n      let xform = this.getCurrentTransform();\n      let x = this.tx(this.circleInfo[index][0], this.circleInfo[index][1], xform);\n      let y = this.ty(this.circleInfo[index][0], this.circleInfo[index][1], xform);\n\n      // Inject the center of the circle\n      const hiddenColor = 0x01ffffff; // Note that lineShader discards fully transparent fragments. Therefore, we use a white here with very small, but nonzero alpha.\n      let c = this.currentVbb.addVertexLine(x, y, 0, 0.0001, 0, 0, hiddenColor, this.dbId, this.currentLayerId, this.currentVpId);\n      this.currentVbb.finalizeQuad(c);\n    }\n    if (this.smallImageSequenceToCheck >= 0) {\n      const sis = this.smallImageSequences[this.smallImageSequenceToCheck];\n      if (sis.start == index) {\n        // begin render into an actual canvas\n        this.inSmallImageRendering = true;\n\n        // compute actual area of interest in pixels (plus buffer)\n        const imgBBox = transformBBox(sis.bbox, this.viewport.transform);\n        const imgX = Math.floor(imgBBox[0]) - 1;\n        const imgY = Math.floor(imgBBox[1]) - 1;\n        const imgWidth = Math.ceil(imgBBox[2] - imgBBox[0]) + 2;\n        const imgHeight = Math.ceil(imgBBox[3] - imgBBox[1]) + 2;\n\n        // clear the area of interest and then fill with almost-transparent white\n        // this will prevent dark borders that result from the default transparent black background\n        this.canvasContext.save();\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n        this.canvasContext._originalclearRect(imgX, imgY, imgWidth, imgHeight);\n        this.canvasContext.fillStyle = 'rgba(255, 255, 255, 0.005)';\n        this.canvasContext._originalfillRect(imgX, imgY, imgWidth, imgHeight);\n        this.canvasContext.restore();\n      } else if (sis.end == index) {\n        // stop render into an actual canvas and send completed image to the VBB\n        this.inSmallImageRendering = false;\n\n        // compute actual area of interest in pixels (plus buffer)\n        const imgBBox = transformBBox(sis.bbox, this.viewport.transform);\n        const imgX = Math.floor(imgBBox[0]) - 1;\n        const imgY = Math.floor(imgBBox[1]) - 1;\n        const imgWidth = Math.ceil(imgBBox[2] - imgBBox[0]) + 2;\n        const imgHeight = Math.ceil(imgBBox[3] - imgBBox[1]) + 2;\n\n        // copy the relevant part into a new canvas (our texture handling only supports full images, no partial images)\n        let imgCanvas = document.createElement(\"canvas\");\n        imgCanvas.width = imgWidth;\n        imgCanvas.height = imgHeight;\n        const imgCtx = imgCanvas.getContext(\"2d\");\n        imgCtx.drawImage(this.canvasContext.canvas, imgX, imgY, imgWidth, imgHeight, 0, 0, imgWidth, imgHeight);\n\n        // send to our renderer\n        this.canvasContext.save();\n        this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n        this.canvasContext.drawImage(imgCanvas, imgX, imgY, imgWidth, imgHeight);\n        this.canvasContext.restore();\n\n        // advance to next sequence\n        this.smallImageSequenceToCheck++;\n        if (this.smallImageSequenceToCheck >= this.smallImageSequences.length) {\n          this.smallImageSequenceToCheck = -1;\n        }\n      }\n    }\n  }\n\n  setSmallImageSequences(smallImageSequences) {\n    if (smallImageSequences && smallImageSequences.length > 0) {\n      this.smallImageSequences = smallImageSequences;\n      this.smallImageSequenceToCheck = 0;\n    }\n  }\n\n  // Set custom tesselation params for bezier arcs (see Bezier.h)\n  // If undefined, we use the default settings.\n  setTessParams(tessParams) {\n    this.tessParams = tessParams;\n  }\n\n  finish() {\n    this.flushBuffer(0, true);\n    this.fontAtlas = null;\n  }\n\n  createViewPortData(matrix, units, precision) {\n    return {\n      \"units\": units || \"feet and inches\",\n      \"transform\": matrix,\n      \"geom_metrics\": this.initGeomMetrics(),\n      \"precision\": precision\n    };\n  }\n\n  isLMVCanvasContext() {\n    return true;\n  }\n\n  //Initializes a structure of counters used for statistical purposes and sheet content hash\n  initGeomMetrics() {\n    return {\n      \"arcs\": 0,\n      \"circles\": 0,\n      \"circ_arcs\": 0,\n      \"viewports\": 0,\n      \"clips\": 0,\n      \"colors\": 0,\n      \"db_ids\": 0,\n      \"dots\": 0,\n      \"fills\": 0,\n      \"layers\": 0,\n      \"line_caps\": 0,\n      \"line_joins\": 0,\n      \"line_patterns\": 0,\n      \"line_pat_refs\": 0,\n      \"plines\": 0,\n      \"pline_points\": 0,\n      \"line_weights\": 0,\n      \"links\": 0,\n      \"miters\": 0,\n      \"ptris\": 0,\n      \"ptri_indices\": 0,\n      \"ptri_points\": 0,\n      \"rasters\": 0,\n      \"texts\": 0,\n      \"strings\": []\n    };\n  }\n\n  // Needs to be called when using\n  //Copied from pdf.js, because our 2D renderer relies on mozCurrentTransform being available\n  addContextCurrentTransform() {\n\n    const ctx = this.canvasContext;\n\n    if (!ctx.mozCurrentTransform) {\n      ctx._originalSave = ctx.save;\n      ctx._originalRestore = ctx.restore;\n      ctx._originalRotate = ctx.rotate;\n      ctx._originalScale = ctx.scale;\n      ctx._originalTranslate = ctx.translate;\n      ctx._originalTransform = ctx.transform;\n      ctx._originalSetTransform = ctx.setTransform;\n      ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n      ctx._transformStack = [];\n      Object.defineProperty(ctx, 'mozCurrentTransform', {\n        get: function getCurrentTransform() {\n          return this._transformMatrix;\n        }\n      });\n      Object.defineProperty(ctx, 'mozCurrentTransformInverse', {\n        get: function getCurrentTransformInverse() {\n          var m = this._transformMatrix;\n          var a = m[0],\n            b = m[1],\n            c = m[2],\n            d = m[3],\n            e = m[4],\n            f = m[5];\n          var ad_bc = a * d - b * c;\n          var bc_ad = b * c - a * d;\n          return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n        }\n      });\n      ctx.save = function ctxSave() {\n        var old = this._transformMatrix;\n        this._transformStack.push(old);\n        this._transformMatrix = old.slice(0, 6);\n        this._originalSave();\n      };\n      ctx.restore = function ctxRestore() {\n        var prev = this._transformStack.pop();\n        if (prev) {\n          this._transformMatrix = prev;\n          this._originalRestore();\n        }\n      };\n      ctx.translate = function ctxTranslate(x, y) {\n        var m = this._transformMatrix;\n        m[4] = m[0] * x + m[2] * y + m[4];\n        m[5] = m[1] * x + m[3] * y + m[5];\n        this._originalTranslate(x, y);\n      };\n      ctx.scale = function ctxScale(x, y) {\n        var m = this._transformMatrix;\n        m[0] = m[0] * x;\n        m[1] = m[1] * x;\n        m[2] = m[2] * y;\n        m[3] = m[3] * y;\n        this._originalScale(x, y);\n      };\n      ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n        var m = this._transformMatrix;\n        this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n        ctx._originalTransform(a, b, c, d, e, f);\n      };\n      ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n        this._transformMatrix = [a, b, c, d, e, f];\n        ctx._originalSetTransform(a, b, c, d, e, f);\n      };\n      ctx.rotate = function ctxRotate(angle) {\n        var cosValue = Math.cos(angle);\n        var sinValue = Math.sin(angle);\n        var m = this._transformMatrix;\n        this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n        this._originalRotate(angle);\n      };\n    }\n  }\n\n  // @returns {Boolean} - true: skip regular pdf.js logic, false: continue with regular pdf.js logic\n  beginChildGroup(group) {\n    // cannot handle groups with masks\n    if (group.smask) {\n      // set inChildGroup to false in case this is a nested group. It will get restore()'d to true when the nested group ends.\n      this.inChildGroup = false;\n      return false;\n    }\n    // TODO: LMV-5595 (isolated groups)\n\n    this.flushBuffer(0, true);\n\n    // how should we handle nested groups? We would have to apply a sequence of compositions and transparencies in a single rendering call.\n    // solution for now: only apply the topmost composition operation, but combine alpha\n    this.overrideCompositeOperation = this.canvasContext.globalCompositeOperation;\n    this.overrideAlpha *= this.canvasContext.globalAlpha;\n\n    this.inChildGroup = true;\n\n    return true;\n  }\n\n  // @returns {Boolean} - true: skip regular pdf.js logic, false: continue with regular pdf.js logic\n  // Matching beginChildGroup()/endChildGroup() pairs must return the same value to not confuse pdf.js!\n  endChildGroup(group) {\n    if (!this.inChildGroup) {\n      return false;\n    }\n\n    this.flushBuffer(0, true);\n\n    return true;\n  }\n\n  _getModelToViewportMatrix(vpData, isUnitsDefined) {\n    // This is the model to vp matrix without 300 / 72 viewport scaling\n    let vp = typeof vpData === 'string' ? JSON.parse(vpData) : vpData;\n\n    // Apply the viewport scale\n    if (isUnitsDefined) {\n      const vpMat = new Autodesk.Viewing.Private.LmvMatrix4(true).fromArray(vp);\n      const scale = new Autodesk.Viewing.Private.LmvMatrix4(true).makeScale(this.viewport.scale, this.viewport.scale, 1);\n\n      scale.multiply(vpMat);\n      vp = scale.elements;\n    }\n    return vp;\n  }\n\n}\n\n/**\n * Class used to normalize gradient data.\n */\nclass GradientData {\n  constructor(color) {\n    // RawData comes from PDFjs.\n    if (Object.prototype.hasOwnProperty.call(color, 'rawData')) {\n      const data = color.rawData;\n      this.type = data[1];\n      this.colorStops = data[3];\n      this.startPoint = data[4];\n      this.endPoint = data[5];\n      this.startRadius = data[6];\n      this.endRadius = data[7];\n    } else {\n      Object.assign(this, color);\n    }\n  }\n\n  /**\n   * Check if the GradientData is valid.\n   * @return {boolean} - true if valid.\n   */\n  isValid() {\n    if (!this.type || !this.startPoint || !this.endPoint || !this.colorStops) {\n      return false;\n    }\n\n    if (this.type === 'radial' && (this.startRadius === undefined || this.endRadius === undefined)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Creates a temporary canvasGradient with all of the GradientData properties assigned to it.\n   * This is required when assigning a context's fillstyle.\n   * @param {CanvasRenderingContext2D} ctx - 2d render context.\n   * @returns {CanvasGradient} - containing the GradientData's properties\n   */\n  getFillStyle(ctx) {\n    if (!this.isValid()) {\n      return;\n    }\n    // This is a temporary gradient. It is only used to pass the gradient data's properties to the fillStyle.\n    const tempGradient = ctx.createLinearGradient(0, 0, 1, 1);\n    Object.assign(tempGradient, this);\n    return tempGradient;\n  }\n\n  /**\n   * Generate a CanvasGradient.\n   * @param {CanvasRenderingContext2D} ctx - 2d render context.\n   * @param {number[]} [startPoint] - modified start position\n   * @param {number[]} [endPoint] - modified end position\n   * @returns {CanvasGradient} - Canvas Gradient\n   */\n  generateCanvasGradient(ctx, startPoint, endPoint) {\n    if (!this.isValid()) {\n      return;\n    }\n    const type = this.type;\n    const colorStops = this.colorStops;\n    const p0 = startPoint || this.startPoint;\n    const p1 = endPoint || this.endPoint;\n    const r0 = this.startRadius;\n    const r1 = this.endRadius;\n    let grad = null;\n\n    if (type === 'axial' || type === 'linear') {\n      grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n    } else if (type === 'radial') {\n      grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n    }\n    for (let i = 0, ii = colorStops.length; i < ii; ++i) {\n      const c = colorStops[i];\n      grad.addColorStop(c[0], c[1]);\n    }\n\n    return grad;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/LmvCanvasContext.js\n");

/***/ }),

/***/ "./extensions/CompGeom/ThirdParty/lmv_poly2tri.js":
/*!********************************************************!*\
  !*** ./extensions/CompGeom/ThirdParty/lmv_poly2tri.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var lmv_poly2tri = __webpack_require__(/*! poly2tri */ \"./extensions/CompGeom/node_modules/poly2tri/src/poly2tri.js\");\n\n// -------------------------------------------------------------------------Edge\n/**\n * Represents a simple polygon's edge\n * @constructor\n * @struct\n * @private\n * @param {Point} p1\n * @param {Point} p2\n * @throw {PointError} if p1 is same as p2\n */\nvar Edge = function Edge(p1, p2) {\n  this.p = p1;\n  this.q = p2;\n\n  if (p1.y > p2.y) {\n    this.q = p1;\n    this.p = p2;\n  } else if (p1.y === p2.y) {\n    if (p1.x > p2.x) {\n      this.q = p1;\n      this.p = p2;\n    } else if (p1.x === p2.x) {\n      throw new Error('poly2tri Invalid Edge constructor: repeated points!', [p1]);\n    }\n  }\n\n  if (!this.q._p2t_edge_list) {\n    this.q._p2t_edge_list = [];\n  }\n  this.q._p2t_edge_list.push(this);\n};\n\nlmv_poly2tri.SweepContext.prototype.initEdges = function (polyline, isOpen) {\n  var i,len = polyline.length,iEnd = isOpen ? polyline.length - 1 : polyline.length;\n  for (i = 0; i < iEnd; ++i) {\n    this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\n  }\n};\n\nmodule.exports = lmv_poly2tri;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL1RoaXJkUGFydHkvbG12X3BvbHkydHJpLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyw2RUFBVSxDQUFDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLElBQUksR0FBRyxTQUFTQSxJQUFJQSxDQUFDQyxFQUFFLEVBQUVDLEVBQUUsRUFBRTtFQUMvQixJQUFJLENBQUNDLENBQUMsR0FBR0YsRUFBRTtFQUNYLElBQUksQ0FBQ0csQ0FBQyxHQUFHRixFQUFFOztFQUVYLElBQUlELEVBQUUsQ0FBQ0ksQ0FBQyxHQUFHSCxFQUFFLENBQUNHLENBQUMsRUFBRTtJQUNmLElBQUksQ0FBQ0QsQ0FBQyxHQUFHSCxFQUFFO0lBQ1gsSUFBSSxDQUFDRSxDQUFDLEdBQUdELEVBQUU7RUFDYixDQUFDLE1BQU0sSUFBSUQsRUFBRSxDQUFDSSxDQUFDLEtBQUtILEVBQUUsQ0FBQ0csQ0FBQyxFQUFFO0lBQ3hCLElBQUlKLEVBQUUsQ0FBQ0ssQ0FBQyxHQUFHSixFQUFFLENBQUNJLENBQUMsRUFBRTtNQUNmLElBQUksQ0FBQ0YsQ0FBQyxHQUFHSCxFQUFFO01BQ1gsSUFBSSxDQUFDRSxDQUFDLEdBQUdELEVBQUU7SUFDYixDQUFDLE1BQU0sSUFBSUQsRUFBRSxDQUFDSyxDQUFDLEtBQUtKLEVBQUUsQ0FBQ0ksQ0FBQyxFQUFFO01BQ3hCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHFEQUFxRCxFQUFFLENBQUNOLEVBQUUsQ0FBQyxDQUFDO0lBQzlFO0VBQ0Y7O0VBRUEsSUFBSSxDQUFDLElBQUksQ0FBQ0csQ0FBQyxDQUFDSSxjQUFjLEVBQUU7SUFDMUIsSUFBSSxDQUFDSixDQUFDLENBQUNJLGNBQWMsR0FBRyxFQUFFO0VBQzVCO0VBQ0EsSUFBSSxDQUFDSixDQUFDLENBQUNJLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztBQUNsQyxDQUFDOztBQUVEWCxZQUFZLENBQUNZLFlBQVksQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTLEdBQUcsVUFBU0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7RUFDdkUsSUFBSUMsQ0FBQyxDQUFFQyxHQUFHLEdBQUdILFFBQVEsQ0FBQ0ksTUFBTSxDQUFFQyxJQUFJLEdBQUdKLE1BQU0sR0FBR0QsUUFBUSxDQUFDSSxNQUFNLEdBQUMsQ0FBQyxHQUFHSixRQUFRLENBQUNJLE1BQU07RUFDakYsS0FBS0YsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRyxJQUFJLEVBQUUsRUFBRUgsQ0FBQyxFQUFFO0lBQ3ZCLElBQUksQ0FBQ0ksU0FBUyxDQUFDVixJQUFJLENBQUMsSUFBSVQsSUFBSSxDQUFDYSxRQUFRLENBQUNFLENBQUMsQ0FBQyxFQUFFRixRQUFRLENBQUMsQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsSUFBSUMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUN2RTtBQUNKLENBQUM7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL1RoaXJkUGFydHkvbG12X3BvbHkydHJpLmpzPzE1YTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGxtdl9wb2x5MnRyaSA9IHJlcXVpcmUoJ3BvbHkydHJpJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1FZGdlXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzaW1wbGUgcG9seWdvbidzIGVkZ2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQHN0cnVjdFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UG9pbnR9IHAxXG4gKiBAcGFyYW0ge1BvaW50fSBwMlxuICogQHRocm93IHtQb2ludEVycm9yfSBpZiBwMSBpcyBzYW1lIGFzIHAyXG4gKi9cbnZhciBFZGdlID0gZnVuY3Rpb24gRWRnZShwMSwgcDIpIHtcbiAgdGhpcy5wID0gcDE7XG4gIHRoaXMucSA9IHAyO1xuXG4gIGlmIChwMS55ID4gcDIueSkge1xuICAgIHRoaXMucSA9IHAxO1xuICAgIHRoaXMucCA9IHAyO1xuICB9IGVsc2UgaWYgKHAxLnkgPT09IHAyLnkpIHtcbiAgICBpZiAocDEueCA+IHAyLngpIHtcbiAgICAgIHRoaXMucSA9IHAxO1xuICAgICAgdGhpcy5wID0gcDI7XG4gICAgfSBlbHNlIGlmIChwMS54ID09PSBwMi54KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHkydHJpIEludmFsaWQgRWRnZSBjb25zdHJ1Y3RvcjogcmVwZWF0ZWQgcG9pbnRzIScsIFtwMV0pO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdGhpcy5xLl9wMnRfZWRnZV9saXN0KSB7XG4gICAgdGhpcy5xLl9wMnRfZWRnZV9saXN0ID0gW107XG4gIH1cbiAgdGhpcy5xLl9wMnRfZWRnZV9saXN0LnB1c2godGhpcyk7XG59O1xuXG5sbXZfcG9seTJ0cmkuU3dlZXBDb250ZXh0LnByb3RvdHlwZS5pbml0RWRnZXMgPSBmdW5jdGlvbihwb2x5bGluZSwgaXNPcGVuKSB7XG4gICAgdmFyIGksIGxlbiA9IHBvbHlsaW5lLmxlbmd0aCwgaUVuZCA9IGlzT3BlbiA/IHBvbHlsaW5lLmxlbmd0aC0xIDogcG9seWxpbmUubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpRW5kOyArK2kpIHtcbiAgICAgICAgdGhpcy5lZGdlX2xpc3QucHVzaChuZXcgRWRnZShwb2x5bGluZVtpXSwgcG9seWxpbmVbKGkgKyAxKSAlIGxlbl0pKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxtdl9wb2x5MnRyaTsiXSwibmFtZXMiOlsibG12X3BvbHkydHJpIiwicmVxdWlyZSIsIkVkZ2UiLCJwMSIsInAyIiwicCIsInEiLCJ5IiwieCIsIkVycm9yIiwiX3AydF9lZGdlX2xpc3QiLCJwdXNoIiwiU3dlZXBDb250ZXh0IiwicHJvdG90eXBlIiwiaW5pdEVkZ2VzIiwicG9seWxpbmUiLCJpc09wZW4iLCJpIiwibGVuIiwibGVuZ3RoIiwiaUVuZCIsImVkZ2VfbGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/CompGeom/ThirdParty/lmv_poly2tri.js\n");

/***/ }),

/***/ "./extensions/CompGeom/bezier.js":
/*!***************************************!*\
  !*** ./extensions/CompGeom/bezier.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTessParams: () => (/* binding */ DefaultTessParams),\n/* harmony export */   SetTesselationParams: () => (/* binding */ SetTesselationParams),\n/* harmony export */   TesselateCubic: () => (/* binding */ TesselateCubic),\n/* harmony export */   TesselateQuad: () => (/* binding */ TesselateQuad),\n/* harmony export */   getCubeBezierPoint: () => (/* binding */ getCubeBezierPoint)\n/* harmony export */ });\n\n\nconst DefaultTessParams = {\n  //How many forward iterations to use when approximating Bezier curves\n  //More iterations are needed in case the min_seg_len setting below is smaller\n  //relative to mesh size. However, the two numbers need to be tuned together\n  //so that NUM_ITERATIONS is enough to result in segment lengths desired.\n\n  //Note that those values are tuned for PDF rendering, where text characters\n  //are drawn one by one. If a long piece of text is drawn all at once, then\n  //its bounding box will be quite large, so the relative min_seg_len will also\n  //be too large and the characters will look coarse. In such cases, we will need\n  //to better estimate this by using e.g. the font height only.\n  numIterations: 100,\n\n  //What fraction of the bounding sbox should be the minimum length of\n  //a segment\n  minSegLenFraction: 0.05\n};\n\nfunction SetTesselationParams(num_iterations, min_seg_len_fraction) {\n  if (num_iterations)\n  DefaultTessParams.numIterations = num_iterations;\n\n  if (min_seg_len_fraction)\n  DefaultTessParams.minSegLenFraction = min_seg_len_fraction;\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nfunction adjustMaxdim(maxdim, segLength) {\n  if (maxdim > 4 * segLength && segLength > 0) {\n    var time = Math.sqrt(maxdim / segLength);\n    time = Math.min(4, time);\n    maxdim = segLength * time;\n  }\n  return maxdim;\n}\n\nfunction TesselateCubic(ctx, px1, py1, px2, py2, px3, py3, px4, py4, maxdim, tessParams, isFont)\n{\n  tessParams = tessParams || DefaultTessParams;\n\n  var aproximateLength = distance(px1, py1, px2, py2) + distance(px2, py2, px3, py3) + distance(px3, py3, px4, py4);\n\n  // maxdim is the size of the bounds of the path\n  // but for individual path, we need to use aproximateLength\n  // we need to balance both performance and visual effect\n  // so we leverage both value and try to balance it.\n  if (!isFont) {\n    maxdim = adjustMaxdim(maxdim, aproximateLength);\n  }\n\n  //we will base the max number of segments to use for approximation\n  //on the bounds of the full line buffer contents\n  //TODO: as an improvement we could take the bounds of this particular curve\n  //with respect to the full bounds of the line buffer data.\n  maxdim = maxdim || 1 / tessParams.minSegLenFraction;\n\n  //minimum length of tesselation segment\n  //set to 1/100 of the bounds\n  var minSegLen = maxdim * tessParams.minSegLenFraction;\n\n  //but for now we will iterate 100 times\n  var dt = 1.0 / tessParams.numIterations;\n\n  //double dt2 = dt*dt;\n  var dt3 = dt * dt * dt;\n\n  var pre1 = 3.0 * dt;\n  var pre2 = pre1 * dt;\n  var pre3 = pre2 + pre2;\n  var pre4 = 6.0 * dt3;\n\n  var temp1x = px1 - 2.0 * px2 + px3;\n  var temp1y = py1 - 2.0 * py2 + py3;\n  var temp2x = 3.0 * (px2 - px3) - px1 + px4;\n  var temp2y = 3.0 * (py2 - py3) - py1 + py4;\n\n  var fx = px1;\n  var fy = py1;\n  var dfx = (px2 - px1) * pre1 + temp1x * pre2 + temp2x * dt3;\n  var dfy = (py2 - py1) * pre1 + temp1y * pre2 + temp2y * dt3;\n  var ddfx = temp1x * pre3 + temp2x * pre4;\n  var ddfy = temp1y * pre3 + temp2y * pre4;\n  var dddfx = temp2x * pre4;\n  var dddfy = temp2y * pre4;\n\n  var error = 0.0;\n\n  // forward differencing loop\n  var tMax = 0 | 1.0 / dt - 0.5;\n  for (var t = 0; t < tMax; t++)\n  {\n    fx += dfx;\n    fy += dfy;\n    dfx += ddfx;\n    dfy += ddfy;\n    ddfy += dddfy;\n    ddfx += dddfx;\n\n    error += Math.sqrt(dfx * dfx + dfy * dfy);\n\n    if (error >= minSegLen) //add segment only if we have reached treshold length\n      {\n        // line to current\n        ctx.lineTo(fx, fy);\n        error = 0.0;\n      }\n  }\n\n  ctx.lineTo(px4, py4);\n}\n\nfunction TesselateQuad(ctx, px1, py1, px2, py2, px3, py3, maxdim, tessParams, isFont)\n{\n  tessParams = tessParams || DefaultTessParams;\n\n  var aproximateLength = distance(px1, py1, px2, py2) + distance(px2, py2, px3, py3);\n\n  // maxdim is the size of the bounds of the path\n  // but for individual path, we need to use aproximateLength\n  // we need to balance both performance and visual effect\n  // so we leverage both value and try to balance it.\n  if (!isFont) {\n    maxdim = adjustMaxdim(maxdim, aproximateLength);\n  }\n\n  //we will base the max number of segments to use for approximation\n  //on the bounds of the full line buffer contents\n  //TODO: as an improvement we could take the bounds of this particular curve\n  //with respect to the full bounds of the line buffer data.\n  maxdim = maxdim || 1 / tessParams.minSegLenFraction;\n\n  //minimum length of tesselation segment\n  //set to a fraction of the bbox of the entire path (value chosen to work well for text at reasonable font size)\n  var minSegLen = maxdim * tessParams.minSegLenFraction;\n\n  //but for now we will iterate 100 times\n  var dt = 1.0 / tessParams.numIterations;\n\n  var dt2 = dt * dt;\n\n  var ax = px1 - 2.0 * px2 + px3; //replace 2* by addition?\n  var ay = py1 - 2.0 * py2 + py3; //replace 2* by addition?\n\n  var bx = 2.0 * (px2 - px1);\n  var by = 2.0 * (py2 - py1);\n\n  var fx = px1;\n  var fy = py1;\n  var dfx = bx * dt + ax * dt2;\n  var dfy = by * dt + ay * dt2;\n  var ddfx = 2.0 * ax * dt2;\n  var ddfy = 2.0 * ay * dt2;\n\n  var error = 0.0;\n\n  //forward differencing loop\n  var tMax = 0 | 1.0 / dt - 0.5;\n  for (var t = 0; t < tMax; t++)\n  {\n    fx += dfx;\n    fy += dfy;\n    dfx += ddfx;\n    dfy += ddfy;\n\n    error += Math.sqrt(dfx * dfx + dfy * dfy);\n\n    if (error >= minSegLen) // how many pixels should each line be?)\n      {\n        ctx.lineTo(fx, fy);\n        error = 0.0;\n      }\n  }\n\n  ctx.lineTo(px3, py3);\n}\n\n// Cubic Bezier for single points. Note that TesselateCubic is faster by using deltas.\n// Result is returned as a new {x,y} or written to optionalTarget.\nfunction getCubeBezierPoint(t, px1, py1, px2, py2, px3, py3, px4, py4, optionalTarget) {\n\n  var result = optionalTarget || { x: undefined, y: undefined };\n\n  let k = 1 - t;\n\n  // Bernstein coefficients\n  let bp1 = k * k * k;\n  let bp2 = 3 * k * k * t;\n  let bp3 = 3 * k * t * t;\n  let bp4 = t * t * t;\n\n  result.x = bp1 * px1 + bp2 * px2 + bp3 * px3 + bp4 * px4;\n  result.y = bp1 * py1 + bp2 * py2 + bp3 * py3 + bp4 * py4;\n\n  return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/bezier.js\n");

/***/ }),

/***/ "./extensions/CompGeom/complex-polygon.js":
/*!************************************************!*\
  !*** ./extensions/CompGeom/complex-polygon.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComplexPolygon: () => (/* binding */ ComplexPolygon)\n/* harmony export */ });\n/* harmony import */ var _ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ThirdParty/lmv_poly2tri */ \"./extensions/CompGeom/ThirdParty/lmv_poly2tri.js\");\n/* harmony import */ var _ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _interval_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interval-tree */ \"./extensions/CompGeom/interval-tree.js\");\n/* harmony import */ var _x_line_line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./x-line-line */ \"./extensions/CompGeom/x-line-line.js\");\n/* harmony import */ var _point_list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point-list */ \"./extensions/CompGeom/point-list.js\");\n\n\n\n\n\n\nfunction jitterPoints(pts) {\n\n  for (let i = 0, iEnd = pts.length; i < iEnd; i++) {\n    pts[i].x += (Math.random() - 0.5) * 1e-9;\n    pts[i].y += (Math.random() - 0.5) * 1e-9;\n  }\n\n}\n\nfunction copyPoints(pts, bbox) {\n\n  //Moving poiints to be centered on the origin\n  //seems to improve triangulation success rate, or\n  //at least avoids some bugs in poly2yti\n\n  let sz = bbox.getSize(bbox instanceof THREE.Box3 ? new THREE.Vector3() : new THREE.Vector2());\n  let offsetx = bbox.min.x + sz.x * 0.5;\n  let offsety = bbox.min.y + sz.y * 0.5;\n  let scale = 2.0 / sz.length();\n\n  let pts2 = [];\n\n  for (let i = 0, iEnd = pts.length; i < iEnd; i++) {\n    pts2.push({\n      x: (pts[i].x - offsetx) * scale, // + (Math.random()-0.5) * 1e-9,\n      y: (pts[i].y - offsety) * scale, // + (Math.random()-0.5) * 1e-9,\n      _triidx: i + 1\n    });\n  }\n\n  return pts2;\n\n}\n\n\n//Represents a polygon with holes, and provides triangulation and mesh conversion utilities\nclass ComplexPolygon {\n\n  constructor(uniquePoints, customInsidechecker, bbox) {\n    this.pts = uniquePoints;\n    this.contours = [];\n    this.customInsideChecker = customInsidechecker;\n    this.bbox = bbox;\n    this._tmpVec = bbox instanceof THREE.Box3 ? new THREE.Vector3() : new THREE.Vector2();\n  }\n\n  addContour(indices) {\n    this.contours.push(indices);\n  }\n\n  pointInContour(x, y, cntr) {\n    var yflag0, yflag1;\n    var vtx0X, vtx0Y, vtx1X, vtx1Y;\n\n    var inside_flag = false;\n\n    var pts = this.pts;\n\n    // get the last point in the polygon\n    vtx0X = pts[cntr[cntr.length - 1]].x;\n    vtx0Y = pts[cntr[cntr.length - 1]].y;\n\n    // get test bit for above/below X axis\n    yflag0 = vtx0Y >= y;\n\n    for (var j = 0, jEnd = cntr.length; j < jEnd; ++j)\n    {\n      vtx1X = pts[cntr[j]].x;\n      vtx1Y = pts[cntr[j]].y;\n\n      yflag1 = vtx1Y >= y;\n\n      // Check if endpoints straddle (are on opposite sides) of X axis\n      // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n      // The old test also checked whether the endpoints are both to the\n      // right or to the left of the test point.  However, given the faster\n      // intersection point computation used below, this test was found to\n      // be a break-even proposition for most polygons and a loser for\n      // triangles (where 50% or more of the edges which survive this test\n      // will cross quadrants and so have to have the X intersection computed\n      // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n      // the \"both left or both right\" part of my code.\n      if (yflag0 != yflag1)\n      {\n        // Check intersection of pgon segment with +X ray.\n        // Note if >= point's X; if so, the ray hits it.\n        // The division operation is avoided for the \">=\" test by checking\n        // the sign of the first vertex wrto the test point; idea inspired\n        // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n        // polygon inclusion tests.\n        if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n        (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n        {\n          inside_flag = !inside_flag;\n        }\n      }\n\n      // move to the next pair of vertices, retaining info as possible\n      yflag0 = yflag1;\n      vtx0X = vtx1X;\n      vtx0Y = vtx1Y;\n    }\n\n    return inside_flag;\n  }\n\n\n  pointInPolygon(x, y) {\n    var inside = false;\n\n    for (var i = 0; i < this.contours.length; i++) {\n\n      if (this.pointInContour(x, y, this.contours[i]))\n      inside = !inside;\n    }\n\n    return inside;\n  }\n\n  triangulate(options) {\n    try {\n      this.triangulateInternal(false, options);\n    } catch (e) {\n\n      if (e.message.indexOf(\"Collinear not supported!\") !== -1) {\n        try {\n          this.triangulateInternal(true, options);\n          //logger.log(\"Triangulation retry success.\");\n        } catch (e) {\n          //logger.warn(\"Triangulation retry failed\", e);\n          this.triangulationFailed = true;\n        }\n      } else {\n        //logger.warn(\"Triangulation failed\", e);\n        this.triangulationFailed = true;\n      }\n    }\n  }\n\n  createPointInPolygonChecker() {\n\n    let edges = [];\n\n    for (let i = 0; i < this.contours.length; i++) {\n      let cntr = this.contours[i];\n\n      var len = cntr.length;\n      for (let k = 0; k < len - 1; k++) {\n        let e = {\n          p1: cntr[k],\n          p2: cntr[k + 1]\n        };\n        edges.push(e);\n      }\n    }\n\n    let it = new _interval_tree__WEBPACK_IMPORTED_MODULE_1__.IntervalTree(this.pts, edges, this.bbox);\n    it.build();\n    this.customInsideChecker = it;\n  }\n\n  /**\n   * @param {boolean} wantJitter\n   * @param {Object} options Options objects\n   * @param {boolean=false} options.skipOpenContour Flag indicating whether to skip triangulation for open polygons\n   */\n  triangulateInternal(wantJitter) {let inOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const options = {\n      skipOpenContour: false,\n      ...inOptions\n    };\n\n    if (!this.contours.length) {\n      this.triangulationFailed = true;\n      this.indices = null;\n      return;\n    }\n\n    this.indices = [];\n\n    var _pts = copyPoints(this.pts, this.bbox);\n\n    if (wantJitter) {\n      jitterPoints(_pts);\n    }\n\n    var sweepCtx = new (_ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_0___default().SweepContext)([]);\n\n    sweepCtx.points_ = _pts;\n\n    for (let i = 0; i < this.contours.length; i++) {\n      let cntr = this.contours[i];\n\n      //Contour is not closed\n      var isOpen = cntr[0] !== cntr[cntr.length - 1];\n\n      if (isOpen && options.skipOpenContour)\n      continue;\n\n      var len = isOpen ? cntr.length : cntr.length - 1;\n      var edge = new Array(len);\n      for (var k = 0; k < len; k++) {\n        edge[k] = _pts[cntr[k]];\n      }\n\n      sweepCtx.initEdges(edge, isOpen);\n    }\n\n    sweepCtx.triangulate();\n\n    this.processResult(sweepCtx);\n\n    this.triangulationFailed = !this.indices || !this.indices.length;\n\n  }\n\n  processResult(sweepCtx) {\n\n    //If the polygon has a lot of vertices, create\n    //an acceleration structure for point-in-polygon checks\n    //so we can filter the triangles faster.\n    if (this.pts.length > 10 && !this.customInsideChecker)\n    this.createPointInPolygonChecker();\n\n    let tris = sweepCtx.map_;\n    for (var i = 0; i < tris.length; i++) {\n      var tpts = tris[i].points_;\n      var p0 = tpts[0];\n      var p1 = tpts[1];\n      var p2 = tpts[2];\n\n      var i0 = p0._triidx;\n      var i1 = p1._triidx;\n      var i2 = p2._triidx;\n\n      if (i0 && i1 && i2)\n      this.filterFace(i0 - 1, i1 - 1, i2 - 1);\n\n    }\n  }\n\n\n  filterFace(i0, i1, i2) {\n\n    var p0 = this.pts[i0];\n    var p1 = this.pts[i1];\n    var p2 = this.pts[i2];\n\n    var cx = (p0.x + p1.x + p2.x) / 3;\n    var cy = (p0.y + p1.y + p2.y) / 3;\n\n    let inside = this.customInsideChecker ? this.customInsideChecker.pointInPolygon(cx, cy) : this.pointInPolygon(cx, cy);\n\n    if (inside) {\n\n      var e1x = p1.x - p0.x;\n      var e1y = p1.y - p0.y;\n      var e2x = p2.x - p0.x;\n      var e2y = p2.y - p0.y;\n\n      var cross = e1x * e2y - e2x * e1y;\n\n      if (cross > 0) {\n        this.indices.push(i0, i1, i2);\n      } else {\n        this.indices.push(i0, i2, i1);\n      }\n\n    }\n  }\n\n  //Returns intersection points between the given line\n  //segment and the polygon's contours\n  findSegmentIntersections(ex1, ey1, ex2, ey2) {\n\n    if (!this.cachedEdges) {\n\n      this.cachedEdges = [];\n\n      for (let j = 0; j < this.contours.length; j++) {\n        let cntr = this.contours[j];\n\n        for (let i = 0; i < cntr.length - 1; i++) {\n\n          //Add quad for each face formed by the extruded contour\n          let x1 = this.pts[cntr[i]].x;\n          let y1 = this.pts[cntr[i]].y;\n          let x2 = this.pts[cntr[i + 1]].x;\n          let y2 = this.pts[cntr[i + 1]].y;\n\n          let etmp = {\n            v1: { x: x1, y: y1 },\n            v2: { x: x2, y: y2 },\n            dx: x2 - x1,\n            dy: y2 - y1,\n            length: Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n          };\n\n          this.cachedEdges.push(etmp);\n        }\n      }\n    }\n\n    let e = {\n      v1: { x: ex1, y: ey1 },\n      v2: { x: ex2, y: ey2 },\n      dx: ex2 - ex1,\n      dy: ey2 - ey1,\n      length: Math.sqrt((ex1 - ex2) ** 2 + (ey1 - ey2) ** 2)\n    };\n\n    let precision = this.bbox.getSize(this._tmpVec).length() * 1e-4;\n\n    let res = [];\n\n    for (let i = 0; i < this.cachedEdges.length; i++) {\n      let etmp = this.cachedEdges[i];\n      let xsect = (0,_x_line_line__WEBPACK_IMPORTED_MODULE_2__.segmentsIntersect)(e, etmp, precision);\n\n      if (xsect && xsect.status === _x_line_line__WEBPACK_IMPORTED_MODULE_2__.ONE_INTERSECTION) {\n        let pt = { x: xsect.e1[0], y: xsect.e1[1] };\n        pt.d = Math.sqrt((pt.x - ex1) ** 2 + (pt.y - ey1) ** 2);\n        res.push(pt);\n      }\n    }\n\n    if (res.length) {\n      //Sort in order along the input segment\n      res.sort((a, b) => a.d - b.d);\n\n      //Drop start and/or end points if they coincide with the segment start/end\n      if (res[0].d < precision) {\n        res.shift();\n      }\n\n      if (res.length && Math.abs(res[res.length - 1].d - e.length) < precision) {\n        res.pop();\n      }\n    }\n\n    return res.length ? res : null;\n  }\n\n  //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\n  //as 2D polygon mesh in the 3D model space\n  toPolygonMesh(packNormals) {\n\n    if (this.polygonMesh)\n    return this.polygonMesh;\n\n    var pts = this.pts;\n\n    var bg = new THREE.BufferGeometry();\n\n    var pos = new Float32Array(3 * pts.length);\n    for (let j = 0; j < pts.length; j++) {\n      pos[3 * j] = pts[j].x;\n      pos[3 * j + 1] = pts[j].y;\n      pos[3 * j + 2] = 0;\n    }\n    bg.setAttribute(\"position\", new THREE.BufferAttribute(pos, 3));\n\n    var normal = packNormals ? new Uint16Array(2 * pts.length) : new Float32Array(3 * pts.length);\n\n    for (let j = 0; j < pts.length; j++) {\n\n      if (packNormals) {\n        var pnx = (0 /*Math.atan2(0, 0)*/ / Math.PI + 1.0) * 0.5;\n        var pny = (1.0 + 1.0) * 0.5;\n\n        normal[j * 2] = pnx * 65535 | 0;\n        normal[j * 2 + 1] = pny * 65535 | 0;\n      } else {\n        normal[3 * j] = 0;\n        normal[3 * j + 1] = 0;\n        normal[3 * j + 2] = 1;\n      }\n    }\n\n    bg.setAttribute(\"normal\", new THREE.BufferAttribute(normal, packNormals ? 2 : 3));\n    if (packNormals) {\n      bg.attributes.normal.bytesPerItem = 2;\n      bg.attributes.normal.normalized = true;\n    }\n\n    var index = new Uint16Array(this.indices.length);\n    index.set(this.indices);\n\n    bg.setIndex(new THREE.BufferAttribute(index, 1));\n\n    bg.streamingDraw = true;\n    bg.streamingIndex = true;\n\n    this.polygonMesh = bg;\n\n    return bg;\n  }\n\n\n  //creates an extruded polygon 3d mesh\n  //with the given thickness (maxZ=0, minZ=-thickness)\n  toExtrudedMesh(thickness) {\n\n    if (this.extrudedMesh)\n    return this.extrudedMesh;\n\n    if (thickness === undefined)\n    thickness = 1;\n\n    //TODO: in case of failed triangulation\n    //we can still generate a tube mesh with just the sides, without top and bottom caps\n    if (!this.indices)\n    return null;\n\n    let vb = [];\n    let indices = [];\n    let iblines = [];\n    let vbase = 0;\n\n    //TODO: for better performance we can allocate ArrayBuffers up front with known\n    //sizes... once the logic works.\n\n    //Add the top and bottom polygons\n\n    //The top is just the already triangulated 2D polygon\n    //same as toPolygonMesh\n\n    let pts = this.pts;\n    for (let i = 0; i < pts.length; i++) {\n      vb.push(pts[i].x, pts[i].y, 0);\n      vb.push(0, 0, 1);\n    }\n\n    let inds = this.indices;\n\n    for (let i = 0; i < inds.length; i += 3) {\n      indices.push(inds[i], inds[i + 1], inds[i + 2]);\n    }\n\n    vbase += pts.length;\n\n    //The bottom is like the top, but mirrored.\n\n    for (let i = 0; i < pts.length; i++) {\n      vb.push(pts[i].x, pts[i].y, -thickness);\n      vb.push(0, 0, -1);\n    }\n\n    for (let i = 0; i < inds.length; i += 3) {\n      indices.push(vbase + inds[i], vbase + inds[i + 2], vbase + inds[i + 1]);\n    }\n\n    vbase += pts.length;\n\n    //The sides -- each segment of the contours becomes a quad\n\n    let tmp = new THREE.Vector3();\n    let bbox = new THREE.Box3();\n\n    for (let j = 0; j < this.contours.length; j++) {\n      let cntr = this.contours[j];\n\n      for (let i = 0; i < cntr.length - 1; i++) {\n\n        //Add quad for each face formed by the extruded contour\n        let x1 = this.pts[cntr[i]].x;\n        let y1 = this.pts[cntr[i]].y;\n        let z1 = 0;\n\n        tmp.set(x1, y1, z1);\n        bbox.expandByPoint(tmp);\n\n        let x2 = this.pts[cntr[i + 1]].x;\n        let y2 = this.pts[cntr[i + 1]].y;\n        let z2 = 0;\n\n        tmp.set(x2, y2, z2);\n        bbox.expandByPoint(tmp);\n\n        tmp.set(x1, y1, z1 - thickness);\n        bbox.expandByPoint(tmp);\n\n        //orthogonal to the face, will use for the normals\n        tmp.set(y2 - y1, x1 - x2, 0).normalize();\n\n        vb.push(x1, y1, z1, tmp.x, tmp.y, tmp.z,\n        x2, y2, z2, tmp.x, tmp.y, tmp.z,\n        x1, y1, z1 - thickness, tmp.x, tmp.y, tmp.z,\n        x2, y2, z2 - thickness, tmp.x, tmp.y, tmp.z);\n\n        iblines.push(vbase, vbase + 1, vbase, vbase + 2, vbase + 1, vbase + 3, vbase + 2, vbase + 3);\n\n        indices.push(vbase, vbase + 2, vbase + 3, vbase, vbase + 3, vbase + 1);\n\n        vbase += 4;\n      }\n    }\n\n    //Convert to mesh suitable for rendering\n    //TODO: As mentioned above, we can do this directly in the loop above\n    //for better performance.\n\n    let vbp = new Float32Array(vb.length);\n    vbp.set(vb);\n\n    let vbi = new Uint16Array(indices.length);\n    vbi.set(indices);\n\n    let vbili = new Uint16Array(iblines.length);\n    vbili.set(iblines);\n\n    let mdata = {\n      mesh: {\n        vb: vbp,\n        indices: vbi,\n        iblines: vbili,\n\n        vbstride: 6,\n        vblayout: {\n          position: { offset: 0, itemSize: 3, bytesPerItem: 4 },\n          normal: { offset: 3, itemSize: 3, bytesPerItem: 4 }\n        },\n        boundingBox: bbox,\n        boundingSphere: { center: bbox.getCenter(new THREE.Vector3()),\n          radius: bbox.getSize(new THREE.Vector3()).length * 0.5 }\n      }\n    };\n\n    this.extrudedMesh = Autodesk.Viewing.Private.BufferGeometryUtils.meshToGeometry(mdata);\n\n    this.extrudedMesh.streamingDraw = true;\n    this.extrudedMesh.streamingIndex = true;\n\n    return this.extrudedMesh;\n  }\n\n  static FromClipperPaths(paths, bbox, scale) {\n\n    let ptList = new _point_list__WEBPACK_IMPORTED_MODULE_3__.UniquePointList(bbox);\n    let complexPolygon = new ComplexPolygon(ptList.pts, null, bbox);\n    for (let path of paths) {\n      let cntr = [];\n      for (let i = 0; i < path.length; i++) {\n        let pt = ptList.findOrAddPoint(path[i].X * scale, path[i].Y * scale);\n        cntr.push(pt.id);\n      }\n\n      //Clipper doesn't explicitly close its paths, so we do\n      cntr.push(cntr[0]);\n\n      complexPolygon.addContour(cntr);\n    }\n\n    return complexPolygon;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/complex-polygon.js\n");

/***/ }),

/***/ "./extensions/CompGeom/contour-set.js":
/*!********************************************!*\
  !*** ./extensions/CompGeom/contour-set.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContourSet: () => (/* binding */ ContourSet),\n/* harmony export */   polygonArea: () => (/* binding */ polygonArea)\n/* harmony export */ });\n/* harmony import */ var _complex_polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./complex-polygon */ \"./extensions/CompGeom/complex-polygon.js\");\n\n\n\nfunction polygonArea(pts) {\n\n  if (pts.length < 3)\n  return 0;\n\n  let needsClose = false;\n  if (pts[0] !== pts[pts.length - 1])\n  needsClose = true;\n\n  let total = 0;\n  for (let i = 0, len = pts.length - 1; i < len; i++) {\n    let v1 = pts[i];\n    let v2 = pts[i + 1];\n    total += v1.x * v2.y - v2.x * v1.y;\n  }\n\n  if (needsClose) {\n    let v1 = pts[pts.length - 1];\n    let v2 = pts[0];\n    total += v1.x * v2.y - v2.x * v1.y;\n  }\n\n  return total * 0.5;\n}\n\n\nlet v2 = new THREE.Vector2();\n\n\n//An intermediate complex polygon representation, used by the DCEL structure to compose and triangulate\n//complex polygons, and also to convert the polygon data to various visualization representations\nclass ContourSet {\n\n  constructor() {\n    this.contours = [];\n    this.areas = [];\n    this.bbox = new THREE.Box2();\n\n    this.allPoints = this.pts = [];\n    this.allPointsMap = {};\n  }\n\n  addContour(verts, skipZeroAreas) {\n\n    this.polygon = null;\n    this.perimeterMem = undefined;\n\n    let area = polygonArea(verts);\n\n    if (area < 0) {\n      verts.reverse();\n      area = Math.abs(area);\n    }\n\n    let cntr = [];\n\n    verts.forEach((v, i) => {\n\n      let id = v.id;\n\n      if (typeof id === \"undefined\") {\n        //Auto-assign unique vertex ID if not given -- this assumes the caller\n        //has cleaned up the vertex data, or the polygon is simple enough not to\n        //suffer from numeric issues.\n        id = this.contours.length + \":\" + i;\n      }\n\n      let idx = this.allPointsMap[id];\n      if (idx === undefined) {\n        idx = this.allPoints.length;\n        this.allPoints.push(v);\n        this.allPointsMap[id] = idx;\n\n        v2.set(v.x, v.y);\n        this.bbox.expandByPoint(v2);\n      }\n      cntr.push(idx);\n    });\n\n    if (area === 0 && skipZeroAreas)\n    return;\n\n    this.contours.push(cntr);\n    this.areas.push(area);\n  }\n\n  addContourSet(cset) {\n\n    //TODO: this can be optimized to skip this pre-processing\n\n    let cntr = cset.contours[0];\n    let pts = cset.allPoints;\n\n    let ptlist = cntr.map((idx) => pts[idx]);\n\n    this.addContour(ptlist);\n  }\n\n\n  triangulate(customInsideChecker) {\n\n    if (this.polygon)\n    return;\n\n    let pts = this.allPoints;\n\n    let polygon = new _complex_polygon__WEBPACK_IMPORTED_MODULE_0__.ComplexPolygon(pts, customInsideChecker, this.bbox);\n\n    polygon.contours = this.contours;\n\n    polygon.triangulate();\n\n    this.polygon = polygon;\n    this.triangulationFailed = this.polygon.triangulationFailed;\n  }\n\n  area() {\n    return this.areas[0];\n  }\n\n  areaNet() {\n    let total = this.areas[0];\n    for (let i = 1; i < this.areas.length; i++)\n    total -= this.areas[i];\n    return total;\n  }\n\n  perimeter() {\n\n    if (this.perimeterMem)\n    return this.perimeterMem;\n\n    let total = 0;\n    let pts = this.contours[0];\n    for (let i = 0, len = pts.length - 1; i < len; i++) {\n      let v1 = pts[i];\n      let v2 = pts[i + 1];\n      total += Math.sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y));\n    }\n\n    this.perimeterMem = total;\n\n    return total;\n  }\n\n\n  getThemeColor() {\n    //returns a stable random-ish color value\n    //based on properties of the geometry,\n    //for use during colorized visualization of areas and volumes\n\n    let r = this.areas[0] * 100 % 17 / 16;\n    let g = this.allPoints.length % 23 / 22;\n    let b = this.perimeterMem * 100 % 29 / 28;\n\n    return { r: r, g: g, b: b };\n  }\n\n  hash() {\n    let all = [];\n    this.contours.forEach((c) => {\n      let vids = c.map((idx) => this.allPoints[idx].id);\n      if (vids[0] === vids[vids.length - 1])\n      vids.pop(); //remove last point that equals first point, since the same closed contour can use any of its points as a start point\n      vids.sort();\n      all.push(vids);\n    });\n    return JSON.stringify(all);\n  }\n\n\n  stitchContours() {\n\n    //invalidate this just in case something tries to use it...\n    //it makes no sense for open polylines anyway\n    this.areas = [];\n\n    let openCntrs = [];\n    for (var i = 0; i < this.contours.length; i++) {\n      let cntr = this.contours[i];\n      if (cntr[0] !== cntr[cntr.length - 1])\n      openCntrs.push(cntr);\n    }\n\n    if (!openCntrs.length)\n    return;\n\n\n    let didSomething = true;\n    while (didSomething) {\n\n      didSomething = false;\n\n      //Try to combine contours\n      let cntr_edge_table = {};\n      let contours = this.contours;\n\n      for (let i = 0; i < contours.length; i++) {\n        let cntr = contours[i];\n\n        let start = cntr[0];\n        let end = cntr[cntr.length - 1];\n\n        if (start === end)\n        continue;\n\n        if (!cntr_edge_table[start])\n        cntr_edge_table[start] = [-i - 1];else\n\n        cntr_edge_table[start].push(-i - 1);\n\n\n        if (!cntr_edge_table[end])\n        cntr_edge_table[end] = [i];else\n\n        cntr_edge_table[end].push(i);\n      }\n\n      for (let p in cntr_edge_table) {\n        let entry = cntr_edge_table[p];\n\n        if (entry.length === 2) {\n          let toerase = undefined;\n\n          if (entry[0] < 0 && entry[1] < 0) {\n            let c1 = -entry[0] - 1;let c2 = -entry[1] - 1;\n            //join start point to startpoint\n            contours[c2].shift();\n            Array.prototype.push.apply(contours[c1].reverse(), contours[c2]);\n            toerase = c2;\n          }\n\n          if (entry[0] < 0 && entry[1] > 0) {\n            let c1 = -entry[0] - 1;let c2 = entry[1];\n            //join start point to endpoint\n            contours[c2].pop();\n            Array.prototype.push.apply(contours[c2], contours[c1]);\n            toerase = c1;\n          }\n\n          if (entry[0] > 0 && entry[1] < 0) {\n            let c1 = entry[0];let c2 = -entry[1] - 1;\n            //join end point to startpoint\n            contours[c1].pop();\n            Array.prototype.push.apply(contours[c1], contours[c2]);\n            toerase = c2;\n          }\n\n          if (entry[0] > 0 && entry[1] > 0) {\n            let c1 = entry[0];let c2 = entry[1];\n            //join end point to endpoint\n            contours[c1].pop();\n            Array.prototype.push.apply(contours[c1], contours[c2].reverse());\n            toerase = c2;\n          }\n\n          if (toerase !== undefined) {\n            contours.splice(toerase, 1);\n            didSomething = true;\n          }\n          break;\n        }\n      }\n\n    }\n\n  }\n\n\n  containsPointFrom(cs2) {\n\n    //Only need to check a single point from the interior of the\n    //potential hole. Make sure it's inside the triangulation and not on the edge\n    //to avoid numeric noise.\n    if (!cs2.polygon.indices || cs2.polygon.indices.length < 3)\n    return false;\n\n    let p0 = cs2.allPoints[cs2.polygon.indices[0]];\n    let p1 = cs2.allPoints[cs2.polygon.indices[1]];\n    let p2 = cs2.allPoints[cs2.polygon.indices[2]];\n\n    let cx = (p0.x + p1.x + p2.x) / 3;\n    let cy = (p0.y + p1.y + p2.y) / 3;\n\n    return this.polygon && this.polygon.pointInPolygon(cx, cy);\n  }\n\n\n  //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\n  //as 2D polygon mesh in the 3D model space\n  //TODO: Use this directly from the this.polygon\n  toPolygonMesh(packNormals) {\n\n    return this.polygon.toPolygonMesh(packNormals);\n\n  }\n\n  //creates an extruded polygon 3d mesh\n  //with the given thickness (maxZ=0, minZ=-thickness)\n  //TODO: Use this directly from the this.polygon\n  toExtrudedMesh(thickness) {\n\n    return this.polygon.toExtrudedMesh(thickness);\n  }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/contour-set.js\n");

/***/ }),

/***/ "./extensions/CompGeom/dcel.js":
/*!*************************************!*\
  !*** ./extensions/CompGeom/dcel.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DCEL: () => (/* binding */ DCEL)\n/* harmony export */ });\n/* harmony import */ var _x_line_line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./x-line-line */ \"./extensions/CompGeom/x-line-line.js\");\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n/* harmony import */ var _contour_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./contour-set */ \"./extensions/CompGeom/contour-set.js\");\n/* harmony import */ var _quad_tree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./quad-tree */ \"./extensions/CompGeom/quad-tree.js\");\n/* harmony import */ var _point_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./point-list */ \"./extensions/CompGeom/point-list.js\");\n\n\n\n\n\n\nconst avp = Autodesk.Viewing.Private;\nconst logger = avp.logger;\n\nclass Vertex {\n\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.edges = [];\n    this.dbIds = [];\n    this.dbIdsChanged = false;\n  }\n\n  isDegenerate() {\n    return this.edges.length < 2;\n  }\n\n  addEdge(de) {\n\n    //Make sure the same edge doesn't already exist\n    for (let i = 0; i < this.edges.length; i++) {\n\n      let e = this.edges[i];\n\n      //We already have the exact same edge, return existing id\n      if (e.v1 === de.v1 && e.v2 === de.v2)\n      return e;\n    }\n\n    //Add the edge\n    this.edges.push(de);\n    return de;\n  }\n\n  removeEdge(de) {\n    let idx = this.edges.indexOf(de);\n    if (idx >= 0)\n    this.edges.splice(idx, 1);else\n\n    logger.warn(\"Failed to find edge in vertex list\");\n  }\n\n  findEdgeTo(v) {\n    for (let i = 0; i < this.edges.length; i++) {\n      let e = this.edges[i];\n      if (e.getOppositeVertex(this) === v)\n      return e;\n    }\n\n    return null;\n  }\n\n  //TODO: make use of this when removing redundant vertices\n  disconnect() {\n    for (let i = 0; i < this.edges.length; i++) {\n      let e = this.edges[i];\n      e.getOppositeVertex(this).removeEdge(e);\n    }\n\n    let res = this.edges;\n    this.edges = [];\n\n    //Return the edges that got orphaned and need deletion\n    //from the parent structure\n    return res;\n  }\n\n  sortEdges() {\n\n    this.edges.sort((a, b) => {\n      let angle1 = a.angle;\n      if (a.v1 !== this) {\n        angle1 -= Math.PI;\n      }\n\n      let angle2 = b.angle;\n      if (b.v1 !== this) {\n        angle2 -= Math.PI;\n      }\n\n      return angle1 - angle2;\n    });\n\n  }\n\n  _canTraverse(e) {\n    //forward edge\n    if (e.v1 === this && !e.flagFwd) {\n      e.flagFwd = 1;\n      return true;\n    }\n\n    //reverse edge (points into this vertex)\n    if (e.v2 === this && !e.flagRev) {\n      e.flagRev = 1;\n      return true;\n    }\n\n    return false;\n  }\n\n  //Returns an edge that's not yet traversed during\n  //area finding\n  findUntraversedEdge() {\n    for (let i = 0; i < this.edges.length; i++) {\n      let e = this.edges[i];\n\n      if (this._canTraverse(e))\n      return e;\n    }\n\n    return null;\n  }\n\n  //Assuming edges are already sorted,\n  //returns the edge that's immediately CCW to\n  //the given edge\n  findNextCCWEdge(e) {\n\n    let idx = this.edges.indexOf(e);\n\n    if (idx === -1) {\n      logger.error(\"This edge isn't mine.\");\n      return null;\n    }\n\n    //Dangling vertex\n    if (this.isDegenerate()) {\n      return null;\n    }\n    /*\n            let idxNext = idx - 1;\n            if (idxNext < 0)\n                idxNext = this.edges.length -1;\n                */\n    let idxNext = (idx + 1) % this.edges.length;\n\n    let eNext = this.edges[idxNext];\n\n    if (this._canTraverse(eNext))\n    return eNext;\n\n    //logger.warn(\"Hmmm... Didn't find an edge to continue from here.\");\n    return null;\n  }\n\n}\n\n\nclass DirectedEdge {\n\n  constructor(v1, v2, id) {\n    let swap = false;\n\n    //Orient the edge so it has increasing dy and dx\n    if (v2.y < v1.y)\n    swap = true;else\n    if (v2.y === v1.y)\n    swap = v2.x < v1.x;\n\n    //the coordinates stored in the edge\n    //might be slightly different from the vertex coordinates\n    //of the v1 and v2 vertices. The vertices are \"snapped\" to\n    //the nearest snap positin, while the edge coordinates are the \"original\" ones\n    //from the 3d mesh that generated the edge.\n    if (swap) {\n      this.v1 = v2;\n      this.v2 = v1;\n    } else {\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    this.dx = this.v2.x - this.v1.x;\n    this.dy = this.v2.y - this.v1.y;\n    this.length2 = this.dx * this.dx + this.dy * this.dy;\n    this.length = Math.sqrt(this.length2);\n    this.angle = Math.atan2(this.dy, this.dx);\n\n    if (this.angle < 0) {\n      if ((0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_1__.isZero)(this.angle))\n      this.angle = 0;else\n      if ((0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_1__.isEqual)(this.angle, -Math.PI))\n      this.angle = Math.PI;\n\n      if (this.angle < 0)\n      logger.warn(\"Unexpected edge slope <0 :\", this.angle);\n    }\n\n    //the edge index in the edge list of the parent data structure\n    this.id = id;\n\n    this.minx = Math.min(this.v1.x, this.v2.x);\n    this.miny = Math.min(this.v1.y, this.v2.y);\n    this.maxx = Math.max(this.v1.x, this.v2.x);\n    this.maxy = Math.max(this.v1.y, this.v2.y);\n\n\n    //traversal flags, set temporarily\n    //during graph tarversal\n    this.flagFwd = 0;\n    this.flagRev = 0;\n\n    this.dbIdsCached = null;\n  }\n\n  paramAlong(x, y) {\n    let dot = (x - this.v1.x) * this.dx + (y - this.v1.y) * this.dy;\n    return dot / this.length2;\n  }\n\n  getOppositeVertex(v) {\n    if (this.v1 === v)\n    return this.v2;else\n    if (this.v2 === v)\n    return this.v1;else\n\n    logger.warn(\"Edge does not own this vertex.\");\n  }\n\n  getDbIds() {\n    //Return all dbIds that are common between the two\n    //vertices of the edge. Used when splitting edges\n    //to pass the information to new vertices\n\n    if (!this.v1.dbIdsChanged && !this.v2.dbIdsChanged) {\n      return this.dbIdsCached;\n    }\n\n    //Calculate intersection of the dbId arrays of\n    //the two vertices.\n    let res = [];\n    let idv1 = this.v1.dbIds;\n    let idv2 = this.v2.dbIds;\n    for (let i = 0; i < idv1.length; i++) {\n      if (idv2.indexOf(idv1[i]) !== -1)\n      res.push(idv1[i]);\n    }\n\n    //Cache the result so we don't recompute unnecessarily\n    //This requires cooperation by the vertex object change flag.\n    this.dbIdsCached = res;\n    this.v1.dbIdsChanged = false;\n    this.v2.dbIdsChanged = false;\n\n    return res;\n  }\n}\n\n\n\n//doubly connected edge list\nclass DCEL {\n\n\n  constructor(bbox, precisionTolerance) {\n\n    this.bbox = bbox;\n    this.boxSize = this.bbox.getSize(new THREE.Vector3()).length();\n\n    if (typeof precisionTolerance === \"number\") {\n      //Input is in model units, e.g. if model is in feet,\n      //precision tolerance has to be in feet\n      this.precisionTolerance = precisionTolerance;\n    } else {\n      this.precisionTolerance = _fuzzy_math__WEBPACK_IMPORTED_MODULE_1__.TOL * this.boxSize;\n    }\n\n    this.edges = [];\n    this.verts = new _point_list__WEBPACK_IMPORTED_MODULE_4__.UniquePointList(this.bbox, this.precisionTolerance, Vertex, true);\n\n    this.quadTreeEdges = new _quad_tree__WEBPACK_IMPORTED_MODULE_3__.QuadTree(this.bbox.min.x, this.bbox.min.y, this.bbox.max.x, this.bbox.max.y, this.precisionTolerance);\n\n    this.nextEdgeId = 1;\n  }\n\n  _addVertex(px, py, dbIds) {\n    return this.verts.findOrAddPoint(px, py, dbIds);\n  }\n\n\n  splitEdge(de, points) {\n\n    let pts = [];\n\n    pts.push({\n      x: de.v1.x,\n      y: de.v1.y,\n      u: 0\n    });\n\n    //Remember the originating objects for this edge, to set them on the\n    //resulting split edges\n    let dbIds = de.getDbIds();\n\n    for (let i = 0; i < points.length; i += 2) {\n\n      let p = {\n        x: points[i],\n        y: points[i + 1],\n        u: de.paramAlong(points[i], points[i + 1])\n      };\n\n      if ((0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_1__.isZero)(p.u) || (0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_1__.isEqual)(p.u, 1))\n      continue;\n\n      pts.push(p);\n    }\n\n    //The intersection points were either on the beginning or on the end\n    //vertex of the edge, so splitting is not needed as it will result\n    //in a zero length edge.\n    if (pts.length === 1)\n    return;\n\n    pts.push({\n      x: de.v2.x,\n      y: de.v2.y,\n      u: 1\n    });\n\n    pts.sort((a, b) => {\n      return a.u - b.u;\n    });\n\n    //Remove the source edge\n    this.removeDirectedEdge(de);\n\n    //Add all the pieces that the edge was split into\n    for (let i = 1; i < pts.length; i++) {\n      this.addDirectedEdge(pts[i - 1].x, pts[i - 1].y, pts[i].x, pts[i].y, true, dbIds);\n    }\n  }\n\n  _enumNearEdges(de, cb) {\n\n    this.quadTreeEdges.enumNearItems(de, cb);\n  }\n\n  addDirectedEdge(x1, y1, x2, y2, skipSplitting, dbIds) {\n    let v1 = this._addVertex(x1, y1, dbIds);\n    let v2 = this._addVertex(x2, y2, dbIds);\n\n    if (v1 === v2) {\n      //logger.warn(\"zero length edge\");\n      return;\n    }\n\n    if (v1.findEdgeTo(v2)) {\n      //edge already exists\n      return;\n    }\n\n    let de = new DirectedEdge(v1, v2, this.nextEdgeId++);\n\n    let addedEdge = de.v1.addEdge(de);\n\n    //If the edge did not already exist...\n    if (addedEdge === de) {\n      de.v2.addEdge(de);\n\n      //Remember the unsnapped positions used for this edge\n      de.sourcePts = [x1, y1, x2, y2];\n\n      this.edges[de.id] = de;\n\n      this.quadTreeEdges.addItem(de);\n    } else {\n      //Edge is already in the graph, nothing to do\n      return addedEdge;\n    }\n\n    if (skipSplitting)\n    return addedEdge;\n\n    //Now make sure the new edge doesn't overlap or intersect existing edges\n    //by finding and splitting any intersecting edges\n    let myInts = [];\n    let otherInts = {};\n\n    this._enumNearEdges(de, (e) => {\n      let ints = (0,_x_line_line__WEBPACK_IMPORTED_MODULE_0__.segmentsIntersect)(e, de, this.precisionTolerance);\n\n      if (!ints)\n      return;\n\n      //Existing edge was crossed by new edge -- split it\n      if (ints.e1 && ints.e1.length) {\n        otherInts[e.id] = ints.e1;\n      }\n\n      //New edge crossed existing edge -- remember the intersection point for later\n      if (ints.e2 && ints.e2.length) {\n        myInts.push.apply(myInts, ints.e2);\n      }\n\n    });\n\n    for (let id in otherInts) {\n      this.splitEdge(this.edges[parseInt(id)], otherInts[id]);\n    }\n\n    if (myInts.length)\n    this.splitEdge(de, myInts);\n\n    this.dirty = true;\n\n    return addedEdge;\n  }\n\n  removeDirectedEdge(de) {\n\n    de.v1.removeEdge(de);\n    de.v2.removeEdge(de);\n\n    this.edges[de.id] = undefined;\n\n    this.quadTreeEdges.deleteItem(de);\n  }\n\n  removeDanglingPolyline(startVertex) {\n\n    while (startVertex.edges.length === 1) {\n\n      let de = startVertex.edges[0];\n      let endVertex = de.getOppositeVertex(startVertex);\n      this.removeDirectedEdge(de);\n      startVertex = endVertex;\n    }\n\n  }\n\n  cleanupFlatEdges() {\n    //get rid of vertices that only have two parallel edges going into them\n\n    let removeList = [];\n\n    this.verts.forEach((v) => {\n\n      if (!v)\n      return;\n\n      if (v.edges.length !== 2)\n      return;\n\n      let e1 = v.edges[0];\n      let e2 = v.edges[1];\n\n      //Detect co-linear edges\n      let angleDelta = Math.abs(e1.angle - e2.angle);\n      const ANGLE_TOLERANCE = 2e-3;\n      if (angleDelta < ANGLE_TOLERANCE || Math.abs(angleDelta - Math.PI) < ANGLE_TOLERANCE) {\n        removeList.push(v);\n      }\n\n      //Detect degenerate triangles\n      let v1 = e1.getOppositeVertex(v);\n      let v2 = e2.getOppositeVertex(v);\n      let eShared = v1.findEdgeTo(v2);\n\n      if (eShared) {\n        let area = 0.5 * Math.abs(e1.dx * e2.dy - e2.dx * e1.dy);\n        if (area < 1e-3) {\n          removeList.push(v);\n        }\n      }\n\n      //TODO: more generic co-linearity and degeneracy heuristics...\n\n    });\n\n\n    //if (removeList.length)\n    //    logger.log(\"Redundant edges\", removeList.length);\n\n    for (let i = 0; i < removeList.length; i++) {\n\n      let v = removeList[i];\n\n      if (v.edges.length !== 2) {\n        //logger.warn(\"Number of edges changed\");\n        continue;\n      }\n\n      let e1 = v.edges[0];\n      let e2 = v.edges[1];\n\n      let vOther1 = e1.getOppositeVertex(v);\n      let vOther2 = e2.getOppositeVertex(v);\n\n      this.removeDirectedEdge(e1);\n      this.removeDirectedEdge(e2);\n\n      this.verts.delete(v);\n\n      this.addDirectedEdge(vOther1.x, vOther1.y, vOther2.x, vOther2.y, true);\n    }\n\n    //Clean up again, until no more redundant vertices exist\n    if (removeList.length)\n    return this.cleanupFlatEdges();\n  }\n\n\n\n  _compactLists() {\n\n    this.verts.compact();\n\n\n    let edges = [];\n\n    for (let i = 0, len = this.edges.length; i < len; i++) {\n      let e = this.edges[i];\n      if (!e)\n      continue;\n\n      e.oldid = e.id;\n      e.flagFwd = 0;\n      e.flagRev = 0;\n      e.id = edges.length;\n      edges.push(e);\n    }\n\n    this.edges = edges;\n  }\n\n\n  //converts closed areas to polygons with holes, in a way where\n  //holes themseves are also marked as separate polygons in their own\n  //right, thus filling the whole area (i.e. non-zero fill method).\n  _detectHolesNonZero(customInsideChecker) {\n\n    this.holes = [];\n\n    //Skip the very largest polygon, because that is\n    //the overall model perimeter\n    //TODO: This logic is Location Breakdown specific\n    this.outerPerimeter = this.closedAreas[this.closedAreas.length - 1];\n    if (this.outerPerimeter)\n    this.outerPerimeter.triangulate();\n\n    for (let i = 0, len = this.closedAreas.length - 1; i < len; i++) {\n\n      let cs = this.closedAreas[i];\n\n      //detect if the polygon is actually a hole in a\n      //bigger exterior polygon\n      //The logic we use here: if a polygon contains\n      //any of the smaller polygons inside it, it is a hole of a bigger polygon\n      //If a polygon contains a polygon marked as a hole, then add the hole to it\n      //before triangulating.\n      //TODO: this can be optimized via spatial index if number of polygons becomes large\n      for (let j = i - 1; j >= 0; j--) {\n        let cs2 = this.closedAreas[j];\n\n        //Only need to check a single point from the interior of the\n        //potential hole. Make sure it's inside the triangulation and not on the edge\n        //to avoid numeric noise.\n        if (cs.containsPointFrom(cs2)) {\n          if (cs2.isHole) {\n            cs.addContourSet(cs2);\n          } else {\n            cs.isHole = true;\n            this.holes.push(cs);\n            break;\n          }\n        }\n      }\n\n      //We added all the holes, now triangulate again with the holes in mind\n      if (!cs.isHole) {\n        cs.triangulate(customInsideChecker);\n      }\n\n    }\n\n\n    //Do a second pass over just the holes\n    //and convert each hole that contains a hole\n    //to a real polygon area.\n    //TODO: I don't really know if this is mathematically correct...\n    for (let i = 0, len = this.holes.length; i < len; i++) {\n\n      let cs = this.holes[i];\n\n      cs.triangulate(customInsideChecker);\n\n      //If a hole contains a hole inside it, then it is\n      //no longer hole, mark both as processed\n      for (let j = i - 1; j >= 0; j--) {\n\n        let cs2 = this.holes[j];\n\n        if (cs2.holeProcessFlag)\n        continue;\n\n        //Only need to check a single point from the interior of the\n        //potential hole. Make sure it's inside the triangulation and not on the edge\n        //to avoid numeric noise.\n        if (cs.containsPointFrom(cs2)) {\n          cs.addContourSet(cs2);\n          cs.isHole = false;\n          cs2.holeProcessFlag = true;\n        }\n      }\n\n      //We added all the holes, now triangulate again with the holes in mind\n      if (!cs.isHole) {\n        cs.triangulate(customInsideChecker);\n      }\n\n    }\n\n    //Remove all holes from the list of polygons\n    let filteredNonHoles = [];\n    for (let i = 0; i < this.closedAreas.length - 1; i++) {\n      let cs = this.closedAreas[i];\n      if (cs.isHole)\n      continue;\n\n      cs.id = filteredNonHoles.length;\n      filteredNonHoles.push(cs);\n    }\n\n    this.closedAreas = filteredNonHoles;\n\n\n  }\n\n  _detectHolesEvenOdd(customInsideChecker) {\n\n    let allAreas = this.closedAreas;\n    if (this.openAreas && this.openAreas.length)\n    allAreas = allAreas.concat(this.openAreas);\n\n    if (!allAreas.length) {\n      this.closedAreas = [];\n      this.openAreas = null;\n      return;\n    }\n\n    //In the DCEL, each polygon outline or hole contour\n    //appears twice (due to the structure being doubly connected), so\n    //here we drop the twin polygon.\n    let cmap = {};\n    for (let i = 0; i < allAreas.length; i++) {\n      let a = allAreas[i];\n      let hash = a.hash();\n      if (!cmap[hash])\n      cmap[hash] = a;\n    }\n\n    allAreas = Object.values(cmap);\n\n    //Make one giant complex polygon out of all the contours, and let\n    //it triangulate itself using its default even-odd fill rule\n    let csAll = new _contour_set__WEBPACK_IMPORTED_MODULE_2__.ContourSet();\n\n    for (let i = 0; i < allAreas.length; i++) {\n      csAll.addContourSet(allAreas[i]);\n    }\n\n    csAll.triangulate(customInsideChecker || this.quadTreeEdges);\n\n    if (csAll.triangulationFailed) {\n      //OK, now we get desperate -- the above triangulation attempt\n      //of the whole thing as one failed, so we triangulate each\n      //area separately (together with areas that are roughly inside it),\n      //and filter that result based on even-odd inside checker.\n      this._detectHolesNonZero(customInsideChecker || this.quadTreeEdges);\n    } else {\n      this.closedAreas = [csAll];\n      this.openAreas = [];\n    }\n  }\n\n\n  finalize(useEvenOddFill, customInsideChecker) {\n\n    //Remove useless vertices\n    this.cleanupFlatEdges();\n\n    this._compactLists();\n\n    //Sort the edges of each vertex according to direction\n    this.verts.forEach((v) => v.sortEdges());\n\n    //traverse the graph and build closed polygons\n    //by following the edges in a counterclockwise direction\n\n    let polygons = [];\n    let openPolygons = [];\n\n    this.verts.forEach((v) => {\n      let e = v.findUntraversedEdge();\n\n      if (!e)\n      return;\n\n      let polygon = [v];\n\n      let vNext = e.getOppositeVertex(v);\n      do {\n        polygon.push(vNext);\n        e = vNext.findNextCCWEdge(e);\n        if (!e)\n        break;\n        vNext = e.getOppositeVertex(vNext);\n      } while (vNext && vNext !== v);\n\n      if (vNext === v) {\n        polygon.push(v);\n        polygons.push(polygon);\n      } else {\n        openPolygons.push(polygon);\n      }\n    });\n\n    //logger.log(\"closed polygons:\", polygons.length);\n    //if (openPolygons.length)\n    //  logger.log(\"open polygons:\", openPolygons.length);\n\n    this.closedAreas = [];\n    for (let i = 0, len = polygons.length; i < len; i++) {\n      let cs = new _contour_set__WEBPACK_IMPORTED_MODULE_2__.ContourSet();\n      cs.addContour(polygons[i]);\n      this.closedAreas.push(cs);\n    }\n\n    //Sort by increasing area, so that\n    //we discover potential polygon holes before we\n    //triangulate their bigger exterior outlines\n    this.closedAreas.sort((a, b) => {\n      return a.area() - b.area();\n    });\n\n\n    if (useEvenOddFill) {\n      this._detectHolesEvenOdd(customInsideChecker);\n    } else {\n      this._detectHolesNonZero(customInsideChecker);\n    }\n\n\n    //Put all open polygons into a single set of contours\n    //and combine as many as possible end to end to get\n    //a minimal number of open contours.\n    this.openAreas = [];\n    if (openPolygons.length) {\n      let openAreas = [];\n      let cs = new _contour_set__WEBPACK_IMPORTED_MODULE_2__.ContourSet();\n      for (let i = 0, len = openPolygons.length; i < len; i++) {\n        cs.addContour(openPolygons[i]);\n      }\n      cs.stitchContours();\n      cs.triangulate();\n      openAreas.push(cs);\n      //logger.log(\"Stitched open polygons\", cs.contours.length);\n\n      this.openAreas = openAreas;\n    }\n\n  }\n\n\n  deleteEdgesOnLine(x1, y1, x2, y2) {\n\n    let v1Tmp = new Vertex(x1, y1);\n    let v2Tmp = new Vertex(x2, y2);\n    let deTmp = new DirectedEdge(v1Tmp, v2Tmp, -1);\n\n    //Find edges crossed by the given segment\n    let otherInts = {};\n\n    this._enumNearEdges(deTmp, (e) => {\n\n      let ints = (0,_x_line_line__WEBPACK_IMPORTED_MODULE_0__.segmentsIntersect)(e, deTmp, this.precisionTolerance);\n\n      if (!ints)\n      return;\n\n      //Existing edge was crossed by new edge\n      if (ints.e1 && ints.e1.length) {\n        otherInts[e.id] = ints.e1;\n      }\n    });\n\n    //Remove the intersected edges, effectively\n    //joining all areas defined by those edges.\n    //This is brute force, in theory we can find all\n    //contour sets that own the intersected edges\n    //and update the triangulations, but it doesn't seem worth it\n    for (let sid in otherInts) {\n      let eid = parseInt(sid);\n      let edge = this.edges[eid];\n      this.removeDirectedEdge(edge);\n\n      //clean up any \"dangling\" vertices left by the edge removal.\n      //those are edges that are only connected to the deleted edge and nothing else\n      this.removeDanglingPolyline(edge.v1);\n      this.removeDanglingPolyline(edge.v2);\n    }\n\n    this.dirty = true;\n  }\n\n  //Given a rectangle, join all areas that intersect the rectangle\n  deleteEdgesInRectangle(x1, y1, x2, y2) {\n\n    let minx = Math.min(x1, x2);\n    let miny = Math.min(y1, y2);\n    let maxx = Math.max(x1, x2);\n    let maxy = Math.max(y1, y2);\n\n    let otherInts = {};\n\n    //find edges completely inside the rectangle\n    this.quadTreeEdges.enumInBox(minx, miny, maxx, maxy, (e) => {\n      otherInts[e.id] = e;\n    });\n\n    //Remove the intersected edges, effectively\n    //joining all areas defined by those edges.\n    //This is brute force, in theory we can find all\n    //contour sets that own the intersected edges\n    //and update the triangulations, but it doesn't seem worth it\n    for (let sid in otherInts) {\n      let eid = parseInt(sid);\n      let edge = this.edges[eid];\n\n      if (!edge)\n      continue;\n\n      this.removeDirectedEdge(edge);\n\n      //clean up any \"dangling\" vertices left by the edge removal.\n      //those are edges that are only connected to the deleted edge and nothing else\n      this.removeDanglingPolyline(edge.v1);\n      this.removeDanglingPolyline(edge.v2);\n    }\n\n\n    this.dirty = true;\n  }\n\n  findNearestVertex(x, y, radius) {\n\n    if (typeof radius !== \"number\")\n    radius = this.precisionTolerance;\n\n    let dNear = Infinity;\n    let vNear = null;\n\n    this.verts.enumInBox(x - radius, y - radius, x + radius, y + radius, (v) => {\n\n      let d = (v.x - x) * (v.x - x) + (v.y - y) * (v.y - y);\n      if (d < dNear) {\n        dNear = d;\n        vNear = v;\n      }\n\n    });\n\n    return dNear <= radius * radius ? vNear : null;\n  }\n\n  findNearestPointOnEdge(x, y, radius) {\n\n    if (typeof radius !== \"number\")\n    radius = this.precisionTolerance;\n\n    let tmp = { x: 0, y: 0, u: 0, d: -1 };\n    let ptNearest = { x: 0, y: 0, d: Infinity, e: null };\n\n    this.quadTreeEdges.enumInBox(x - radius, y - radius, x + radius, y + radius, (e) => {\n\n      let result = (0,_x_line_line__WEBPACK_IMPORTED_MODULE_0__.pointOnLine)(x, y, e, true, radius, tmp);\n\n      if (result) {\n        if (tmp.d < ptNearest.d) {\n          ptNearest.x = tmp.x;\n          ptNearest.y = tmp.y;\n          ptNearest.d = tmp.d;\n          ptNearest.e = e;\n        }\n      }\n    });\n\n    return ptNearest.d <= radius ? ptNearest : null;\n\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/dcel.js\n");

/***/ }),

/***/ "./extensions/CompGeom/edge-set.js":
/*!*****************************************!*\
  !*** ./extensions/CompGeom/edge-set.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdgeSet: () => (/* binding */ EdgeSet)\n/* harmony export */ });\n/* harmony import */ var _interval_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interval-tree */ \"./extensions/CompGeom/interval-tree.js\");\n/* harmony import */ var _point_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./point-list */ \"./extensions/CompGeom/point-list.js\");\n/* harmony import */ var _complex_polygon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex-polygon */ \"./extensions/CompGeom/complex-polygon.js\");\n/* harmony import */ var _src_compat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/compat */ \"./src/compat.js\");\n\n\n\n\n\nconst _window = (0,_src_compat__WEBPACK_IMPORTED_MODULE_3__.getGlobal)();\n\n\n//Functionality for converting a list of two-point line segments into a connected\n//set of (hopefully) closed contour lines. The contour set is then used\n//for triangulation.\n//This data structure assumes there are no intersecting edges (use the DCEL if there are, or you need fully-connected topology).\nclass EdgeSet {\n\n  constructor(edges, bbox, precisionTolerance) {\n\n    this.edges = edges;\n    this.bbox = bbox;\n\n    this.verts = new _point_list__WEBPACK_IMPORTED_MODULE_1__.UniquePointList(bbox, precisionTolerance);\n    this.polygon = null;\n  }\n\n\n  getPointIndex(px, py) {\n\n    let v = this.verts.findOrAddPoint(px, py);\n\n    return v.id;\n  }\n\n  snapEdges() {\n\n    for (var i = 0; i < this.edges.length; i++) {\n\n      var e = this.edges[i];\n\n      e.p1 = this.getPointIndex(e.v1.x, e.v1.y);\n      e.p2 = this.getPointIndex(e.v2.x, e.v2.y);\n    }\n  }\n\n  sanitizeEdges() {\n    var edgeSet = {};\n    var sanitizedEdges = [];\n\n    for (var i = 0, len = this.edges.length; i < len; i++) {\n      var e = this.edges[i];\n      if (e.p1 === e.p2) {\n        continue;\n      }\n\n      var key = Math.min(e.p1, e.p2) + ':' + Math.max(e.p1, e.p2);\n      if (edgeSet[key] !== true) {\n        edgeSet[key] = true;\n        sanitizedEdges.push(e);\n      }\n    }\n\n    this.edges = sanitizedEdges;\n  }\n\n\n  stitchContours() {\n\n    this.contours = [];\n\n    //Create jump table from edge to edge\n    //and back\n    var edge_table = {};\n\n    for (var i = 0; i < this.edges.length; i++) {\n      var e = this.edges[i];\n\n      if (e.p1 === e.p2)\n      continue;\n\n      if (edge_table[e.p1] !== undefined)\n      edge_table[e.p1].push(e.p2);else\n\n      edge_table[e.p1] = [e.p2];\n\n      if (edge_table[e.p2] !== undefined)\n      edge_table[e.p2].push(e.p1);else\n\n      edge_table[e.p2] = [e.p1];\n    }\n\n    var cur_cntr = [];\n\n    for (var p in edge_table) {\n      if (edge_table[p].length !== 2) {var _window$Autodesk;\n        (_window$Autodesk = _window.Autodesk) === null || _window$Autodesk === void 0 || _window$Autodesk.Viewing.Private.logger.warn(\"Incomplete edge table\");\n        break;\n      }\n    }\n\n    //Start with the first edge, and stitch until we can no longer\n    while (true) {\n\n      var sfrom = undefined;\n\n      //Look for doubly connected point first\n      for (let p in edge_table) {\n        if (edge_table[p].length > 1) {\n          sfrom = p;\n          break;\n        }\n      }\n\n      //If no double-connected point found, we know\n      //the it will be an open contour, but stitch as much\n      //as we can anyway.\n      if (!sfrom) {\n        for (let p in edge_table) {\n          if (edge_table[p].length > 0) {\n            sfrom = p;\n            break;\n          }\n        }\n      }\n\n      if (!sfrom)\n      break;\n\n      var prev = -1;\n      var cur = parseInt(sfrom);\n      var cur_segs = edge_table[sfrom];\n\n      //start a new contour\n      cur_cntr.push(cur);\n\n      while (cur_segs && cur_segs.length) {\n\n        var toPt = cur_segs.shift();\n\n        //skip backpointer if we hit it\n        if (toPt === prev)\n        toPt = cur_segs.shift();\n\n        if (toPt === undefined) {\n          delete edge_table[cur];\n          break;\n        }\n\n        cur_cntr.push(toPt);\n\n        if (cur_segs.length == 0)\n        delete edge_table[cur];else\n        if (cur_segs[0] === prev)\n        delete edge_table[cur];\n\n        prev = cur;\n        cur = toPt;\n        cur_segs = edge_table[toPt];\n      }\n\n      if (cur_cntr.length) {\n        this.contours.push(cur_cntr);\n        cur_cntr = [];\n      }\n    }\n\n    var openCntrs = [];\n    for (let i = 0; i < this.contours.length; i++) {\n      var cntr = this.contours[i];\n      if (cntr[0] !== cntr[cntr.length - 1])\n      openCntrs.push(cntr);\n    }\n\n\n    if (openCntrs.length) {\n      //avp.logger.warn(\"Incomplete stitch\");\n\n      var didSomething = true;\n      while (didSomething) {\n\n        didSomething = false;\n\n        //Try to combine contours\n        var cntr_edge_table = {};\n        var contours = this.contours;\n\n        for (let i = 0; i < contours.length; i++) {\n          const cntr = contours[i];\n          var start = cntr[0];\n          var end = cntr[cntr.length - 1];\n\n          if (start === end)\n          continue;\n\n          if (!cntr_edge_table[start])\n          cntr_edge_table[start] = [-i - 1];else\n\n          cntr_edge_table[start].push(-i - 1);\n\n\n          if (!cntr_edge_table[end])\n          cntr_edge_table[end] = [i];else\n\n          cntr_edge_table[end].push(i);\n        }\n\n        for (let p in cntr_edge_table) {\n          var entry = cntr_edge_table[p];\n\n          if (entry.length == 2) {\n            var toerase = undefined;\n\n            if (entry[0] < 0 && entry[1] < 0) {\n              var c1 = -entry[0] - 1;var c2 = -entry[1] - 1;\n              //join start point to startpoint\n              contours[c2].shift();\n              Array.prototype.push.apply(contours[c1].reverse(), contours[c2]);\n              toerase = c2;\n            }\n\n            if (entry[0] < 0 && entry[1] > 0) {\n              const c1 = -entry[0] - 1;\n              const c2 = entry[1];\n              //join start point to endpoint\n              contours[c2].pop();\n              Array.prototype.push.apply(contours[c2], contours[c1]);\n              toerase = c1;\n            }\n\n            if (entry[0] > 0 && entry[1] < 0) {\n              const c1 = entry[0];\n              const c2 = -entry[1] - 1;\n              //join end point to startpoint\n              contours[c1].pop();\n              Array.prototype.push.apply(contours[c1], contours[c2]);\n              toerase = c2;\n            }\n\n            if (entry[0] > 0 && entry[1] > 0) {\n              const c1 = entry[0];\n              const c2 = entry[1];\n              //join end point to endpoint\n              contours[c1].pop();\n              Array.prototype.push.apply(contours[c1], contours[c2].reverse());\n              toerase = c2;\n            }\n\n            if (toerase !== undefined) {\n              contours.splice(toerase, 1);\n              didSomething = true;\n            }\n            break;\n          }\n        }\n\n      }\n\n    }\n  }\n\n\n  cleanupFlatEdges() {\n\n    let pts = this.verts.pts;\n    let TOL = this.verts.precisionTolerance;\n\n    for (let i = 0; i < this.contours.length; i++) {\n\n      let cntr = this.contours[i];\n\n      while (true) {\n        let removePt = -1;\n\n        for (let j = 1; j < cntr.length - 1; j++) {\n          let prev = cntr[j - 1];\n          let cur = cntr[j];\n          let next = cntr[j + 1];\n\n          let p0 = pts[prev];\n          let p1 = pts[cur];\n          let p2 = pts[next];\n\n          let dx1 = p1.x - p0.x;\n          let dy1 = p1.y - p0.y;\n          let dx2 = p2.x - p1.x;\n          let dy2 = p2.y - p1.y;\n\n          let len1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n          if (len1 < TOL) {\n            removePt = j;\n            break;\n          }\n\n          let len2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n          if (len2 < TOL) {\n            removePt = j;\n            break;\n          }\n\n          dx1 /= len1;\n          dy1 /= len1;\n          dx2 /= len2;\n          dy2 /= len2;\n\n          let dot = dx1 * dx2 + dy1 * dy2;\n\n          if (Math.abs(dot - 1.0) < 1e-2) {\n            removePt = j;\n            break;\n          }\n        }\n\n        if (removePt < 0)\n        break;\n\n        cntr.splice(removePt, 1);\n      }\n\n    }\n\n  }\n\n\n  triangulate() {let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    //this.cleanupFlatEdges();\n\n    //The interval tree is a faster and more tolerant\n    //way of checking if a point is inside the complex polygon defined\n    //by a set of edges. We use that in preference to the built-in\n    //ComplexPolygon inside checker.\n    let it = new _interval_tree__WEBPACK_IMPORTED_MODULE_0__.IntervalTree(this.verts.pts, this.edges, this.bbox);\n    it.build();\n\n    let polygon = new _complex_polygon__WEBPACK_IMPORTED_MODULE_2__.ComplexPolygon(this.verts.pts, it, this.bbox);\n    polygon.contours = this.contours;\n    polygon.triangulate(options);\n    return polygon;\n\n  }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/edge-set.js\n");

/***/ }),

/***/ "./extensions/CompGeom/ellipse.js":
/*!****************************************!*\
  !*** ./extensions/CompGeom/ellipse.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EllipseArc: () => (/* binding */ EllipseArc),\n/* harmony export */   angleInsideArc: () => (/* binding */ angleInsideArc),\n/* harmony export */   angleInsideArcCCW: () => (/* binding */ angleInsideArcCCW),\n/* harmony export */   getAngleDelta: () => (/* binding */ getAngleDelta),\n/* harmony export */   getEllipseArcPoint: () => (/* binding */ getEllipseArcPoint),\n/* harmony export */   getEllipsePoint: () => (/* binding */ getEllipsePoint),\n/* harmony export */   normalizeAngle: () => (/* binding */ normalizeAngle)\n/* harmony export */ });\n// Sample ellipse at a given angle.\n//  @param {number} angle    - ccw angle along the ellipse in radians. 0 = point is ellipse x-axis.\n//  @param {number} cx, cy   - ellipse center\n//  @param {number} rx, ry   - ellipse radii\n//  @param {number} rotation - ccw in radians\n//  @param {Vector2} [target]\n//  @returns {Vector2}\nconst getEllipsePoint = function (angle, cx, cy, rx, ry) {let rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;let target = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n\n  const point = target || new THREE.Vector2();\n\n  // compute point from unrotated ellipse equation\n  let x = cx + rx * Math.cos(angle);\n  let y = cy + ry * Math.sin(angle);\n\n  // apply this.rotation: (x,y) around center (cx, cy)\n  if (rotation !== 0) {\n\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n\n    const tx = x - cx;\n    const ty = y - cy;\n\n    // Rotate the point about the center of the ellipse.\n    x = tx * cos - ty * sin + cx;\n    y = tx * sin + ty * cos + cy;\n  }\n\n  return point.set(x, y);\n};\n\n// Sample a single point from an ellipse arc that runs counterclockwise from startAngle to endAngle.\n//  @param {number} cx, cy               - center\n//  @param {number} rx, ry               - radii in x/y axis\n//  @param {number} startAngle, endAngle - ccw angles in radians. 0 corresponds to (xRadius, 0)\n//  @param {number} rotation             - ellipse axis rotation, ccw in radians\n//  @param {number} t                    - sampling position along ellipse. 0 => startAngle, 1 = endAngle\n//  @param {Vector2} [target]\n//  @returns {Vector2}\nconst getEllipseArcPoint = function (t, cx, cy, rx, ry, startAngle, endAngle) {let rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0.0;let target = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n\n  let deltaAngle = endAngle - startAngle;\n\n  // If start/end angle are approximately the same, just sample at start angle\n  const samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n  if (samePoints) {\n    return getEllipsePoint(0.0, cx, cy, rx, ry, rotation, target);\n  }\n\n  // ensures that deltaAngle is [0,2 PI[\n  deltaAngle = normalizeAngle(deltaAngle);\n\n  // Since samePoints was false, but deltaAngle is close to 0 after normalization,\n  // deltaAngle must be close to a multiple of 2*Pi.\n  const wholeEllipse = deltaAngle < Number.EPSILON;\n  if (wholeEllipse) {\n    deltaAngle = 2.0 * Math.PI;\n  }\n\n  // Sample ellipse point at that angle\n  const angle = startAngle + t * deltaAngle;\n  return getEllipsePoint(angle, cx, cy, rx, ry, rotation, target);\n};\n\n// Force angle to be within [0, 2Pi[\nconst normalizeAngle = (angle) => {\n  // Scale [0, 2Pi] to [0,1]\n  angle /= 2.0 * Math.PI;\n\n  // Remove integer part\n  angle -= Math.trunc(angle);\n\n  // Angle is either in [0,1] or was negative. In the latter case,\n  // it is in [-1, 0] now and we add 1 to bring it to [0,1] as well.\n  if (angle < 0) {\n    angle += 1.0;\n  }\n\n  // Scale back to [0, 2Pi] range\n  return angle * 2.0 * Math.PI;\n};\n\n// Compute the arc angle difference of an arc running from startAngle to endAngle.\n//  @param {number} startAngle - in radians\n//  @param {number} endAngle   - in radians\n//  @param {bool}   ccw        - whether the arc runs counterclockwise (true) or clockwise (false)\nconst getAngleDelta = (startAngle, endAngle, ccw) => {\n\n  // get angle difference\n  let delta = endAngle - startAngle;\n\n  // Force to [0, 2Pi] range\n  delta = normalizeAngle(delta);\n\n  // invert if arc is clockwise\n  return ccw ? delta : 2.0 * Math.PI - delta;\n};\n\n// Given start/end angle of an arc, this function checks whether angle is within the arc.\n// All angles are ccw in radians. We assume the arc to be running ccw. Note that start may be > end if the arc range contains a 2*Pi mulitple.\nconst angleInsideArcCCW = (angle, start, end) => {\n\n  // ensure 0 <= a < 2Pi for all angles\n  angle = normalizeAngle(angle);\n  start = normalizeAngle(start);\n  end = normalizeAngle(end);\n\n  if (start < end) {\n    return angle >= start && angle <= end;\n  }\n\n  // If start > end, we are crossing a full-circle boundary. So, the range between [start, end] is actually\n  // the circle part outside the arc.\n  // For start = end, the arc is the whole circle and the result will always be true.\n  return angle >= start || angle <= end;\n};\n\n// Like angleInsideCCW, but adding an option param to support clockwise arcs.\nconst angleInsideArc = function (angle, start, end) {let ccw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const insideCCW = angleInsideArcCCW(angle, start, end);\n  return ccw ? insideCCW : !insideCCW;\n};\n\nconst svgAngle = (ux, uy, vx, vy) => {\n\n  var dot = ux * vx + uy * vy;\n  var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n  var ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n  if (ux * vy - uy * vx < 0) ang = -ang;\n  return ang;\n};\n\nconst tmpVec = new THREE.Vector2();\n\n// Parameters to describe ellipse arc\nclass EllipseArc {\n\n  constructor(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n    this.set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n  }\n\n  set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n    // center\n    this.cx = cx;\n    this.cy = cy;\n\n    // radii\n    this.rx = rx;\n    this.ry = ry;\n\n    // angle in radians\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n\n    // If true, arc runs from startAngle in counterclockwise direction, otherwise clockwise\n    this.ccw = ccw;\n\n    // ellipse rotation in radians\n    this.rotation = rotation;\n\n    return this;\n  }\n\n  /**\n   * Convert SVG-style specification of an ellipse arc into an ellipse arc with center and start/end angle that is easier to sample.\n   * Implementation is based on parseArcCommand() helper function in THREE.SVGLoader. All output angles in radians.\n   *\n   * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n   * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n   *\n   * @param {number}   rx, ry        - radii in x/y axis (before xAxisRoation)\n   * @param {number}   xAxisRotation - ccw rotation of the ellipse axes in degrees\n   * @param {bool}     largeArcFlag  - whether to use short or long path along the ellipse\n   * @param {bool}     sweepFlag     - whether to run counterclockwise around the arc from the startPoint\n   * @param {Vector2}  start, end    - startPoint and endPoint of the arc\n   */\n  setFromSvgArc(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, start, end) {\n\n    // get rotation in radians\n    const rotation = xAxisRotation * Math.PI / 180;\n\n    // Ensure radii are positive\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    // To avoid NaNs and for consistency with browser SVG behavior:\n    // If any radius is 0, fall back to a straight segment. An EllipseCurve is not able to represent a straight line segment.\n    // However, we can resemble this using an arc whose radius is large enough so that the angle difference is hardly noticeable.\n    if (rx == 0 || ry == 0) {\n      // Choose radius large enough so that 0.01 degrees correspond to the (start, end) distance.\n      const minAngleDelta = 0.01;\n      const dist = tmpVec.copy(start).distanceTo(end); // still works if start/end are just {x,y} pairs\n      const perimeter = dist * 360 / minAngleDelta;\n      const radius = perimeter / (2.0 * Math.PI);\n      rx = radius;\n      ry = radius;\n    }\n\n    // Compute (x1′, y1′)\n    const dx2 = (start.x - end.x) / 2.0;\n    const dy2 = (start.y - end.y) / 2.0;\n    const x1p = Math.cos(rotation) * dx2 + Math.sin(rotation) * dy2;\n    const y1p = -Math.sin(rotation) * dx2 + Math.cos(rotation) * dy2;\n\n    // Compute (cx′, cy′)\n    let rxs = rx * rx;\n    let rys = ry * ry;\n    const x1ps = x1p * x1p;\n    const y1ps = y1p * y1p;\n\n    // Ensure radii are large enough\n    const cr = x1ps / rxs + y1ps / rys;\n\n    if (cr > 1) {\n      // scale up rx,ry equally so cr == 1\n      const s = Math.sqrt(cr);\n      rx = s * rx;\n      ry = s * ry;\n      rxs = rx * rx;\n      rys = ry * ry;\n    }\n\n    const dq = rxs * y1ps + rys * x1ps;\n    const pq = (rxs * rys - dq) / dq;\n    let q = Math.sqrt(Math.max(0, pq));\n    if (largeArcFlag === sweepFlag) q = -q;\n    const cxp = q * rx * y1p / ry;\n    const cyp = -q * ry * x1p / rx;\n\n    // Step 3: Compute (cx, cy) from (cx′, cy′)\n    const cx = Math.cos(rotation) * cxp - Math.sin(rotation) * cyp + (start.x + end.x) / 2;\n    const cy = Math.sin(rotation) * cxp + Math.cos(rotation) * cyp + (start.y + end.y) / 2;\n\n    // Step 4: Compute θ1 and Δθ\n    const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n    const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n\n    // Set curve params\n    this.cx = cx;\n    this.cy = cy;\n    this.rx = rx;\n    this.ry = ry;\n    this.rotation = rotation;\n    this.startAngle = theta;\n    this.endAngle = theta + delta;\n    this.ccw = sweepFlag;\n\n    return this;\n  }\n\n  // Sample point along arc.\n  //  @param {number}  t - 0: startPoint, 1: endPoint\n  //  @param {Vector2} [target]\n  //  @returns Vector2\n  getPoint(t, target) {\n\n    let start = this.startAngle;\n    let end = this.endAngle;\n\n    // In case the arc is clockwise...\n    if (!this.ccw) {\n      // Swap start/end to get opposite ccw arc and sample it at position 1-t instead.\n      start = this.endAngle;\n      end = this.startAngle;\n      t = 1.0 - t;\n    }\n\n    return getEllipseArcPoint(t, this.cx, this.cy, this.rx, this.ry, start, end, this.rotation, target);\n  }\n\n  isValid() {\n    return isFinite(this.cx) && isFinite(this.cy) && isFinite(this.rx) && isFinite(this.ry) && isFinite(this.rotation) &&\n    isFinite(this.startAngle) && isFinite(this.endAngle);\n  }\n\n  // @param {Box2} [targetBox]\n  // returns {Box2}\n  computeBBox(targetBox) {\n\n    // compute extreme points of ellipse equation\n    const tanPhi = Math.tan(this.rotation);\n    const thetaX1 = -Math.atan(this.ry * tanPhi / this.rx);\n    const thetaX2 = Math.PI - Math.atan(this.ry * tanPhi / this.rx);\n    const thetaY1 = Math.atan(this.ry / (tanPhi * this.rx));\n    const thetaY2 = Math.PI + Math.atan(this.ry / (tanPhi * this.rx));\n\n    // Clear targetBox or create a new one\n    const box = targetBox ? targetBox.makeEmpty() : new THREE.Box2();\n\n    // Helper function to add an ellipse point that we obtain at angle theta in the ellipse equation\n    const addEllipsePoint = (theta) => {\n      const p = getEllipsePoint(theta, this.cx, this.cy, this.rx, this.ry, this.rotation);\n      box.expandByPoint(p);\n    };\n\n    addEllipsePoint(this.startAngle);\n    addEllipsePoint(this.endAngle);\n\n    // Add all extreme points to the bbox that are inside the arc\n    angleInsideArc(thetaX1, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaX1);\n    angleInsideArc(thetaX2, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaX2);\n    angleInsideArc(thetaY1, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaY1);\n    angleInsideArc(thetaY2, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaY2);\n\n    return box;\n  }\n\n  // Samples an ellipse arc as lineTo segments that are added a canvas context object.\n  // Note: lineTo() is not called with the arc starting point. ctx is expected to end at the arc start point already.\n  //\n  //  @param {Path2D|LmvCanvasContext|CanvasContext} ctx - line segment are added by ctx.lineTo(x,y) calls.\n  //  @param {number} maxSegmentCount  - Maximum number of line segments\n  //  @param {number} minSegmentLength - Skip small segments below this length\n  tesselate(ctx, maxSegments, minSegmentLength) {\n\n    // Init lastX/lastY\n    const lastPoint = this.getPoint(0);\n\n    // Note that we only iterate over inner points.\n    // Start point is not added by this function and endpoint is added separately below\n    for (var i = 1; i < maxSegments; i++) {\n\n      // get next point along arc\n      const t = i / maxSegments;\n      const p = this.getPoint(t, tmpVec);\n\n      // Skip point if too close to previous point\n      const dist = p.distanceTo(lastPoint);\n      if (dist < minSegmentLength) {\n        continue;\n      }\n\n      // add line segment\n      ctx.lineTo(p.x, p.y);\n      lastPoint.copy(p);\n    }\n\n    // Always add end point (without minSegmentLength-check)\n    const p = this.getPoint(1.0, tmpVec);\n    ctx.lineTo(p.x, p.y);\n  }\n\n  getAngleDelta() {\n    return getAngleDelta(this.startAngle, this.endAngle, this.ccw);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/ellipse.js\n");

/***/ }),

/***/ "./extensions/CompGeom/fuzzy-math.js":
/*!*******************************************!*\
  !*** ./extensions/CompGeom/fuzzy-math.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TOL: () => (/* binding */ TOL),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isZero: () => (/* binding */ isZero)\n/* harmony export */ });\n\nconst TOL = 1e-6;\n\nfunction isZero(f) {\n  return Math.abs(f) < TOL;\n}\n\nfunction isEqual(a, b) {\n  return isZero(a - b);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL2Z1enp5LW1hdGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNPLE1BQU1BLEdBQUcsR0FBRyxJQUFJOztBQUVoQixTQUFTQyxNQUFNQSxDQUFDQyxDQUFDLEVBQUU7RUFDdEIsT0FBT0MsSUFBSSxDQUFDQyxHQUFHLENBQUNGLENBQUMsQ0FBQyxHQUFHRixHQUFHO0FBQzVCOztBQUVPLFNBQVNLLE9BQU9BLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQzFCLE9BQU9OLE1BQU0sQ0FBQ0ssQ0FBQyxHQUFHQyxDQUFDLENBQUM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9Db21wR2VvbS9mdXp6eS1tYXRoLmpzP2QyMDEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgY29uc3QgVE9MID0gMWUtNjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzWmVybyhmKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGYpIDwgVE9MO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGlzWmVybyhhIC0gYik7XG59Il0sIm5hbWVzIjpbIlRPTCIsImlzWmVybyIsImYiLCJNYXRoIiwiYWJzIiwiaXNFcXVhbCIsImEiLCJiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/CompGeom/fuzzy-math.js\n");

/***/ }),

/***/ "./extensions/CompGeom/index.js":
/*!**************************************!*\
  !*** ./extensions/CompGeom/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar av = Autodesk.Viewing;\nvar avecg = AutodeskNamespace('Autodesk.Viewing.Extensions.CompGeom');\n\nfunction _export(m, ns) {\n  for (var prop in m) {\n    if (Object.prototype.hasOwnProperty.call(m, prop)) {\n      //Export directly into the module (e.g. for node.js use, where LMV is used via require instead from global namespace)\n      module.exports[prop] = m[prop];\n\n      //Export into the desired viewer namespace\n      ns[prop] = m[prop];\n    }\n  }\n}\n\n_export(__webpack_require__(/*! ./contour-set */ \"./extensions/CompGeom/contour-set.js\"), avecg);\n_export(__webpack_require__(/*! ./edge-set */ \"./extensions/CompGeom/edge-set.js\"), avecg);\n_export(__webpack_require__(/*! ./dcel */ \"./extensions/CompGeom/dcel.js\"), avecg);\n_export(__webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\"), avecg);\n_export(__webpack_require__(/*! ./quad-tree */ \"./extensions/CompGeom/quad-tree.js\"), avecg);\n_export(__webpack_require__(/*! ./x-box-box */ \"./extensions/CompGeom/x-box-box.js\"), avecg);\n_export(__webpack_require__(/*! ./x-box-plane */ \"./extensions/CompGeom/x-box-plane.js\"), avecg);\n_export(__webpack_require__(/*! ./x-line-box */ \"./extensions/CompGeom/x-line-box.js\"), avecg);\n_export(__webpack_require__(/*! ./x-line-line */ \"./extensions/CompGeom/x-line-line.js\"), avecg);\n_export(__webpack_require__(/*! ./x-mesh-plane */ \"./extensions/CompGeom/x-mesh-plane.js\"), avecg);\n_export(__webpack_require__(/*! ./x-plane-segment */ \"./extensions/CompGeom/x-plane-segment.js\"), avecg);\n_export(__webpack_require__(/*! ./x-triangle-plane */ \"./extensions/CompGeom/x-triangle-plane.js\"), avecg);\n_export(__webpack_require__(/*! ./interval-tree */ \"./extensions/CompGeom/interval-tree.js\"), avecg);\n_export(__webpack_require__(/*! ./complex-polygon */ \"./extensions/CompGeom/complex-polygon.js\"), avecg);\n_export(__webpack_require__(/*! ./point-list */ \"./extensions/CompGeom/point-list.js\"), avecg);\n_export(__webpack_require__(/*! ./ThirdParty/lmv_poly2tri */ \"./extensions/CompGeom/ThirdParty/lmv_poly2tri.js\"), avecg);\n_export(__webpack_require__(/*! ./ellipse */ \"./extensions/CompGeom/ellipse.js\"), avecg);\n_export(__webpack_require__(/*! ./bezier */ \"./extensions/CompGeom/bezier.js\"), avecg);\n_export(__webpack_require__(/*! ./LmvCanvasContext */ \"./extensions/CompGeom/LmvCanvasContext.js\"), avecg);\n_export(__webpack_require__(/*! ./path2d */ \"./extensions/CompGeom/path2d.js\"), avecg);\n\n/**\n * Computational geometry library extension\n */\nclass CompGeomExtension extends av.Extension {\n\n  constructor(viewer, options) {\n    super(viewer, options);\n  }\n\n  load() {return true;}\n  unload() {return true;}\n  activate() {return true;}\n  deactivate() {return false;}\n}\n\n// The ExtensionManager requires an extension to be registered.\nav.theExtensionManager.registerExtension('Autodesk.CompGeom', CompGeomExtension);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxFQUFHLENBQUUsT0FBTyxJQUFJLENBQUU7RUFDeEJDLFFBQVFBLENBQUEsRUFBRyxDQUFFLE9BQU8sSUFBSSxDQUFFO0VBQzFCQyxVQUFVQSxDQUFBLEVBQUcsQ0FBRSxPQUFPLEtBQUssQ0FBRTtBQUNqQzs7QUFFQTtBQUNBeEIsRUFBRSxDQUFDeUIsbUJBQW1CLENBQUNDLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFVixpQkFBaUIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL2luZGV4LmpzPzk4ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgYXYgPSBBdXRvZGVzay5WaWV3aW5nO1xudmFyIGF2ZWNnID0gQXV0b2Rlc2tOYW1lc3BhY2UoJ0F1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9ucy5Db21wR2VvbScpO1xuXG5mdW5jdGlvbiBfZXhwb3J0KG0sIG5zKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBtKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobSwgcHJvcCkpIHtcbiAgICAgICAgICAgIC8vRXhwb3J0IGRpcmVjdGx5IGludG8gdGhlIG1vZHVsZSAoZS5nLiBmb3Igbm9kZS5qcyB1c2UsIHdoZXJlIExNViBpcyB1c2VkIHZpYSByZXF1aXJlIGluc3RlYWQgZnJvbSBnbG9iYWwgbmFtZXNwYWNlKVxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHNbcHJvcF0gPSBtW3Byb3BdO1xuXG4gICAgICAgICAgICAvL0V4cG9ydCBpbnRvIHRoZSBkZXNpcmVkIHZpZXdlciBuYW1lc3BhY2VcbiAgICAgICAgICAgIG5zW3Byb3BdID0gbVtwcm9wXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuX2V4cG9ydChyZXF1aXJlKFwiLi9jb250b3VyLXNldFwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi9lZGdlLXNldFwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi9kY2VsXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL2Z1enp5LW1hdGhcIiksIGF2ZWNnKTtcbl9leHBvcnQocmVxdWlyZShcIi4vcXVhZC10cmVlXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL3gtYm94LWJveFwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi94LWJveC1wbGFuZVwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi94LWxpbmUtYm94XCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL3gtbGluZS1saW5lXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL3gtbWVzaC1wbGFuZVwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi94LXBsYW5lLXNlZ21lbnRcIiksIGF2ZWNnKTtcbl9leHBvcnQocmVxdWlyZShcIi4veC10cmlhbmdsZS1wbGFuZVwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi9pbnRlcnZhbC10cmVlXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL2NvbXBsZXgtcG9seWdvblwiKSwgYXZlY2cpO1xuX2V4cG9ydChyZXF1aXJlKFwiLi9wb2ludC1saXN0XCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL1RoaXJkUGFydHkvbG12X3BvbHkydHJpXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL2VsbGlwc2VcIiksIGF2ZWNnKTtcbl9leHBvcnQocmVxdWlyZShcIi4vYmV6aWVyXCIpLCBhdmVjZyk7XG5fZXhwb3J0KHJlcXVpcmUoXCIuL0xtdkNhbnZhc0NvbnRleHRcIiksIGF2ZWNnKTtcbl9leHBvcnQocmVxdWlyZShcIi4vcGF0aDJkXCIpLCBhdmVjZyk7XG5cbi8qKlxuICogQ29tcHV0YXRpb25hbCBnZW9tZXRyeSBsaWJyYXJ5IGV4dGVuc2lvblxuICovXG5jbGFzcyAgQ29tcEdlb21FeHRlbnNpb24gZXh0ZW5kcyBhdi5FeHRlbnNpb24ge1xuXG4gICAgY29uc3RydWN0b3Iodmlld2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHZpZXdlciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgbG9hZCgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICB1bmxvYWQoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgYWN0aXZhdGUoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgZGVhY3RpdmF0ZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG59XG5cbi8vIFRoZSBFeHRlbnNpb25NYW5hZ2VyIHJlcXVpcmVzIGFuIGV4dGVuc2lvbiB0byBiZSByZWdpc3RlcmVkLlxuYXYudGhlRXh0ZW5zaW9uTWFuYWdlci5yZWdpc3RlckV4dGVuc2lvbignQXV0b2Rlc2suQ29tcEdlb20nLCBDb21wR2VvbUV4dGVuc2lvbik7XG5cbiJdLCJuYW1lcyI6WyJhdiIsIkF1dG9kZXNrIiwiVmlld2luZyIsImF2ZWNnIiwiQXV0b2Rlc2tOYW1lc3BhY2UiLCJfZXhwb3J0IiwibSIsIm5zIiwicHJvcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiQ29tcEdlb21FeHRlbnNpb24iLCJFeHRlbnNpb24iLCJjb25zdHJ1Y3RvciIsInZpZXdlciIsIm9wdGlvbnMiLCJsb2FkIiwidW5sb2FkIiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwidGhlRXh0ZW5zaW9uTWFuYWdlciIsInJlZ2lzdGVyRXh0ZW5zaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/CompGeom/index.js\n");

/***/ }),

/***/ "./extensions/CompGeom/interval-tree.js":
/*!**********************************************!*\
  !*** ./extensions/CompGeom/interval-tree.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntervalTree: () => (/* binding */ IntervalTree)\n/* harmony export */ });\nfunction IntervalNode() {\n\n  this.bbox = new THREE.Box2();\n  this.left = null;\n  this.right = null;\n  this.node_edges = [];\n}\n\n//Acceleration structure for point-in-polygon checking.\n//Takes in a list of points and edges indexing into those points.\n//The Point-in-polygon check is a simple even-odd test based on counting\n//number of edges intersected by a ray from the input point to infinity.\nfunction IntervalTree(pts, edges, bbox) {\n\n  this.pts = pts;\n  this.edges = edges;\n  this.bbox = bbox;\n  this.pipResult = false;\n\n}\n\n\n\nIntervalTree.prototype.splitNode = function (node) {\n\n  if (node.bbox.min.y >= node.bbox.max.y)\n  return;\n\n  if (node.node_edges.length < 3)\n  return;\n\n  var split = 0.5 * (node.bbox.min.y + node.bbox.max.y);\n\n  //node.bbox.makeEmpty();\n\n  node.left = new IntervalNode();\n  node.right = new IntervalNode();\n\n  var pts = this.pts;\n  var ne = node.node_edges;\n  var remaining_node_edges = [];\n  var tmpPt = new THREE.Vector2();\n\n  for (var i = 0; i < ne.length; i++) {\n\n    var e = this.edges[ne[i]];\n\n    var p1y = pts[e.p1].y;\n    var p2y = pts[e.p2].y;\n\n    if (p1y > p2y) {\n      var tmp = p1y;\n      p1y = p2y;\n      p2y = tmp;\n    }\n\n    var boxPtr = null;\n\n    if (p2y < split) {\n      node.left.node_edges.push(ne[i]);\n      boxPtr = node.left.bbox;\n    } else if (p1y > split) {\n      node.right.node_edges.push(ne[i]);\n      boxPtr = node.right.bbox;\n    } else {\n      remaining_node_edges.push(ne[i]);\n      //boxPtr = node.bbox;\n    }\n\n    if (boxPtr) {\n      tmpPt.set(pts[e.p1].x, pts[e.p1].y);\n      boxPtr.expandByPoint(tmpPt);\n      tmpPt.set(pts[e.p2].x, pts[e.p2].y);\n      boxPtr.expandByPoint(tmpPt);\n    }\n  }\n\n  node.node_edges = remaining_node_edges;\n\n  if (node.left.node_edges.length)\n  this.splitNode(node.left);\n  if (node.right.node_edges.length)\n  this.splitNode(node.right);\n};\n\n\nIntervalTree.prototype.build = function () {\n\n  this.root = new IntervalNode();\n\n  var edge_indices = this.root.node_edges;\n  for (var i = 0; i < this.edges.length; i++)\n  edge_indices.push(i);\n\n  this.root.bbox.copy(this.bbox);\n\n  //split recursively\n  this.splitNode(this.root);\n};\n\n\n\n\nIntervalTree.prototype.pointInPolygonRec = function (node, x, y) {\n\n  if (node.bbox.min.y <= y && node.bbox.max.y >= y) {\n\n    var pts = this.pts;\n    var ne = node.node_edges;\n\n    for (var i = 0, iEnd = ne.length; i < iEnd; i++) {\n\n      var e = this.edges[ne[i]];\n\n      // get the last point in the polygon\n      var p1 = pts[e.p1];\n      var vtx0X = p1.x;\n      var vtx0Y = p1.y;\n\n      // get test bit for above/below X axis\n      var yflag0 = vtx0Y >= y;\n\n      var p2 = pts[e.p2];\n      var vtx1X = p2.x;\n      var vtx1Y = p2.y;\n\n      var yflag1 = vtx1Y >= y;\n\n      // Check if endpoints straddle (are on opposite sides) of X axis\n      // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n      // The old test also checked whether the endpoints are both to the\n      // right or to the left of the test point.  However, given the faster\n      // intersection point computation used below, this test was found to\n      // be a break-even proposition for most polygons and a loser for\n      // triangles (where 50% or more of the edges which survive this test\n      // will cross quadrants and so have to have the X intersection computed\n      // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n      // the \"both left or both right\" part of my code.\n      if (yflag0 != yflag1)\n      {\n        // Check intersection of pgon segment with +X ray.\n        // Note if >= point's X; if so, the ray hits it.\n        // The division operation is avoided for the \">=\" test by checking\n        // the sign of the first vertex wrto the test point; idea inspired\n        // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n        // polygon inclusion tests.\n        if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n        (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n        {\n          this.pipResult = !this.pipResult;\n        }\n      }\n\n    }\n\n  }\n\n  var nl = node.left;\n  if (nl && nl.bbox.min.y <= y && nl.bbox.max.y >= y) {\n    this.pointInPolygonRec(nl, x, y);\n  }\n\n  var nr = node.right;\n  if (nr && nr.bbox.min.y <= y && nr.bbox.max.y >= y) {\n    this.pointInPolygonRec(nr, x, y);\n  }\n\n};\n\nIntervalTree.prototype.pointInPolygon = function (x, y) {\n\n  this.pipResult = false;\n\n  this.pointInPolygonRec(this.root, x, y);\n\n  return this.pipResult;\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/interval-tree.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/clipper-lib-fpoint/clipper.js":
/*!************************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/clipper-lib-fpoint/clipper.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("/*******************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.4.2                                                           *\n * Date      :  27 February 2017                                                *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2017                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.4.2.2 (FPoint)                                                *\n * Date      :  8 September 2017                                                *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n *                                                                              *\n *******************************************************************************/\n(function ()\n{\n  \"use strict\";\n  var ClipperLib = {};\n  ClipperLib.version = '6.4.2.2';\n\n  //UseLines: Enables open path clipping. Adds a very minor cost to performance.\n  ClipperLib.use_lines = true;\n\n  //ClipperLib.use_xyz: adds a Z member to FPoint. Adds a minor cost to performance.\n  ClipperLib.use_xyz = false;\n\n  var isNode = false;\n  if ( true && module.exports)\n  {\n    module.exports = ClipperLib;\n    isNode = true;\n  } else\n\n  {\n    if (typeof document !== \"undefined\") window.ClipperLib = ClipperLib;else\n    self['ClipperLib'] = ClipperLib;\n  }\n  var navigator_appName;\n  if (!isNode)\n  {\n    var nav = navigator.userAgent.toString().toLowerCase();\n    navigator_appName = navigator.appName;\n  } else\n\n  {\n    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n  }\n  // Browser test to speedup performance critical functions\n  var browser = {};\n\n  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;else\n  browser.chrome = 0;\n  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;else\n  browser.chromium = 0;\n  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;else\n  browser.safari = 0;\n  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;else\n  browser.firefox = 0;\n  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;else\n  browser.firefox17 = 0;\n  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;else\n  browser.firefox15 = 0;\n  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;else\n  browser.firefox3 = 0;\n  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;else\n  browser.opera = 0;\n  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;else\n  browser.msie10 = 0;\n  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;else\n  browser.msie9 = 0;\n  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;else\n  browser.msie8 = 0;\n  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;else\n  browser.msie7 = 0;\n  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;else\n  browser.msie = 0;\n\n  // Here starts the actual Clipper library:\n  // Helper function to support Inheritance in Javascript\n  var Inherit = function (ce, ce2)\n  {\n    var p;\n    if (typeof Object.getOwnPropertyNames === 'undefined')\n    {\n      for (p in ce2.prototype)\n      if (typeof ce.prototype[p] === 'undefined' || ce.prototype[p] === Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n      for (p in ce2)\n      if (typeof ce[p] === 'undefined') ce[p] = ce2[p];\n      ce.$baseCtor = ce2;\n    } else\n\n    {\n      var props = Object.getOwnPropertyNames(ce2.prototype);\n      for (var i = 0; i < props.length; i++)\n      if (typeof Object.getOwnPropertyDescriptor(ce.prototype, props[i]) === 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n      for (p in ce2)\n      if (typeof ce[p] === 'undefined') ce[p] = ce2[p];\n      ce.$baseCtor = ce2;\n    }\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.Path = function ()\n  {\n    return [];\n  };\n\n  ClipperLib.Path.prototype.push = Array.prototype.push;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.Paths = function ()\n  {\n    return []; // Was previously [[]], but caused problems when pushed\n  };\n\n  ClipperLib.Paths.prototype.push = Array.prototype.push;\n\n  // PolyTree & PolyNode start\n  /**\n  * @suppress {missingProperties}\n  */\n  ClipperLib.PolyNode = function ()\n  {\n    this.m_Parent = null;\n    this.m_polygon = new ClipperLib.Path();\n    this.m_Index = 0;\n    this.m_jointype = 0;\n    this.m_endtype = 0;\n    this.m_Childs = [];\n    this.IsOpen = false;\n  };\n\n  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n  {\n    var result = true;\n    var node = this.m_Parent;\n    while (node !== null)\n    {\n      result = !result;\n      node = node.m_Parent;\n    }\n    return result;\n  };\n\n  ClipperLib.PolyNode.prototype.ChildCount = function ()\n  {\n    return this.m_Childs.length;\n  };\n\n  ClipperLib.PolyNode.prototype.Contour = function ()\n  {\n    return this.m_polygon;\n  };\n\n  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n  {\n    var cnt = this.m_Childs.length;\n    this.m_Childs.push(Child);\n    Child.m_Parent = this;\n    Child.m_Index = cnt;\n  };\n\n  ClipperLib.PolyNode.prototype.GetNext = function ()\n  {\n    if (this.m_Childs.length > 0)\n    return this.m_Childs[0];else\n\n    return this.GetNextSiblingUp();\n  };\n\n  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n  {\n    if (this.m_Parent === null)\n    return null;else\n    if (this.m_Index === this.m_Parent.m_Childs.length - 1)\n    return this.m_Parent.GetNextSiblingUp();else\n\n    return this.m_Parent.m_Childs[this.m_Index + 1];\n  };\n\n  ClipperLib.PolyNode.prototype.Childs = function ()\n  {\n    return this.m_Childs;\n  };\n\n  ClipperLib.PolyNode.prototype.Parent = function ()\n  {\n    return this.m_Parent;\n  };\n\n  ClipperLib.PolyNode.prototype.IsHole = function ()\n  {\n    return this.IsHoleNode();\n  };\n\n  // PolyTree : PolyNode\n  /**\n   * @suppress {missingProperties}\n   * @constructor\n   */\n  ClipperLib.PolyTree = function ()\n  {\n    this.m_AllPolys = [];\n    ClipperLib.PolyNode.call(this);\n  };\n\n  ClipperLib.PolyTree.prototype.Clear = function ()\n  {\n    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n    this.m_AllPolys[i] = null;\n    this.m_AllPolys.length = 0;\n    this.m_Childs.length = 0;\n  };\n\n  ClipperLib.PolyTree.prototype.GetFirst = function ()\n  {\n    if (this.m_Childs.length > 0)\n    return this.m_Childs[0];else\n\n    return null;\n  };\n\n  ClipperLib.PolyTree.prototype.Total = function ()\n  {\n    var result = this.m_AllPolys.length;\n    //with negative offsets, ignore the hidden outer polygon ...\n    if (result > 0 && this.m_Childs[0] !== this.m_AllPolys[0]) result--;\n    return result;\n  };\n\n  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\n  // PolyTree & PolyNode end\n\n  ClipperLib.Clear = function (a)\n  {\n    a.length = 0;\n  };\n\n  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n  ClipperLib.PI = 3.141592653589793;\n  ClipperLib.PI2 = 2 * 3.141592653589793;\n  /**\n  * @constructor\n  */\n  ClipperLib.FPoint = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    this.X = 0;\n    this.Y = 0;\n    if (ClipperLib.use_xyz)\n    {\n      this.Z = 0;\n      if (alen === 3) // public FPoint(cInt x, cInt y, cInt z = 0)\n        {\n          this.X = a[0];\n          this.Y = a[1];\n          this.Z = a[2];\n        } else\n      if (alen === 2) // public FPoint(cInt x, cInt y)\n        {\n          this.X = a[0];\n          this.Y = a[1];\n          this.Z = 0;\n        } else\n      if (alen === 1)\n      {\n        if (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n          {\n            var dp = a[0];\n            this.X = dp.X;\n            this.Y = dp.Y;\n            this.Z = 0;\n          } else\n          // public FPoint(FPoint pt)\n          {\n            var pt = a[0];\n            if (typeof pt.Z === \"undefined\") pt.Z = 0;\n            this.X = pt.X;\n            this.Y = pt.Y;\n            this.Z = pt.Z;\n          }\n      } else\n        // public FPoint()\n        {\n          this.X = 0;\n          this.Y = 0;\n          this.Z = 0;\n        }\n    } else\n      // if (!ClipperLib.use_xyz)\n      {\n        if (alen === 2) // public FPoint(cInt X, cInt Y)\n          {\n            this.X = a[0];\n            this.Y = a[1];\n          } else\n        if (alen === 1)\n        {\n          if (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n            {\n              var dp = a[0];\n              this.X = dp.X;\n              this.Y = dp.Y;\n            } else\n            // public FPoint(FPoint pt)\n            {\n              var pt = a[0];\n              this.X = pt.X;\n              this.Y = pt.Y;\n            }\n        } else\n          // public FPoint(FPoint pt)\n          {\n            this.X = 0;\n            this.Y = 0;\n          }\n      }\n  };\n\n  ClipperLib.FPoint.op_Equality = function (a, b)\n  {\n    //return a == b;\n    return a.X === b.X && a.Y === b.Y;\n  };\n\n  ClipperLib.FPoint.op_Inequality = function (a, b)\n  {\n    //return a !== b;\n    return a.X !== b.X || a.Y !== b.Y;\n  };\n\n  /*\n   ClipperLib.FPoint.prototype.Equals = function (obj)\n   {\n     if (obj === null)\n         return false;\n     if (obj instanceof ClipperLib.FPoint)\n     {\n         var a = Cast(obj, ClipperLib.FPoint);\n         return (this.X == a.X) && (this.Y == a.Y);\n     }\n     else\n         return false;\n   };\n  \t*/\n\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FPoint0 = function ()\n  {\n    this.X = 0;\n    this.Y = 0;\n    if (ClipperLib.use_xyz)\n    this.Z = 0;\n  };\n\n  ClipperLib.FPoint0.prototype = ClipperLib.FPoint.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FPoint1 = function (pt)\n  {\n    this.X = pt.X;\n    this.Y = pt.Y;\n    if (ClipperLib.use_xyz)\n    {\n      if (typeof pt.Z === \"undefined\") this.Z = 0;else\n      this.Z = pt.Z;\n    }\n  };\n\n  ClipperLib.FPoint1.prototype = ClipperLib.FPoint.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FPoint1dp = function (dp)\n  {\n    this.X = dp.X;\n    this.Y = dp.Y;\n    if (ClipperLib.use_xyz)\n    this.Z = 0;\n  };\n\n  ClipperLib.FPoint1dp.prototype = ClipperLib.FPoint.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FPoint2 = function (x, y, z)\n  {\n    this.X = x;\n    this.Y = y;\n    if (ClipperLib.use_xyz)\n    {\n      if (typeof z === \"undefined\") this.Z = 0;else\n      this.Z = z;\n    }\n  };\n\n  ClipperLib.FPoint2.prototype = ClipperLib.FPoint.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FRect = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    if (alen === 4) // function (l, t, r, b)\n      {\n        this.left = a[0];\n        this.top = a[1];\n        this.right = a[2];\n        this.bottom = a[3];\n      } else\n    if (alen === 1) // function (ir)\n      {\n        var ir = a[0];\n        this.left = ir.left;\n        this.top = ir.top;\n        this.right = ir.right;\n        this.bottom = ir.bottom;\n      } else\n      // function ()\n      {\n        this.left = 0;\n        this.top = 0;\n        this.right = 0;\n        this.bottom = 0;\n      }\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FRect0 = function ()\n  {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n  };\n\n  ClipperLib.FRect0.prototype = ClipperLib.FRect.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FRect1 = function (ir)\n  {\n    this.left = ir.left;\n    this.top = ir.top;\n    this.right = ir.right;\n    this.bottom = ir.bottom;\n  };\n\n  ClipperLib.FRect1.prototype = ClipperLib.FRect.prototype;\n\n  /**\n  * @constructor\n  */\n  ClipperLib.FRect4 = function (l, t, r, b)\n  {\n    this.left = l;\n    this.top = t;\n    this.right = r;\n    this.bottom = b;\n  };\n\n  ClipperLib.FRect4.prototype = ClipperLib.FRect.prototype;\n\n  ClipperLib.ClipType = {\n    ctIntersection: 0,\n    ctUnion: 1,\n    ctDifference: 2,\n    ctXor: 3\n  };\n\n  ClipperLib.PolyType = {\n    ptSubject: 0,\n    ptClip: 1\n  };\n\n  ClipperLib.PolyFillType = {\n    pftEvenOdd: 0,\n    pftNonZero: 1,\n    pftPositive: 2,\n    pftNegative: 3\n  };\n\n  ClipperLib.JoinType = {\n    jtSquare: 0,\n    jtRound: 1,\n    jtMiter: 2\n  };\n\n  ClipperLib.EndType = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedLine: 3,\n    etClosedPolygon: 4\n  };\n\n  ClipperLib.EdgeSide = {\n    esLeft: 0,\n    esRight: 1\n  };\n\n  ClipperLib.Direction = {\n    dRightToLeft: 0,\n    dLeftToRight: 1\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.TEdge = function ()\n  {\n    this.Bot = new ClipperLib.FPoint0();\n    this.Curr = new ClipperLib.FPoint0(); //current (updated for every new scanbeam)\n    this.Top = new ClipperLib.FPoint0();\n    this.Delta = new ClipperLib.FPoint0();\n    this.Dx = 0;\n    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n    this.Side = ClipperLib.EdgeSide.esLeft; //side only refers to current side of solution poly\n    this.WindDelta = 0; //1 or -1 depending on winding direction\n    this.WindCnt = 0;\n    this.WindCnt2 = 0; //winding count of the opposite polytype\n    this.OutIdx = 0;\n    this.Next = null;\n    this.Prev = null;\n    this.NextInLML = null;\n    this.NextInAEL = null;\n    this.PrevInAEL = null;\n    this.NextInSEL = null;\n    this.PrevInSEL = null;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.IntersectNode = function ()\n  {\n    this.Edge1 = null;\n    this.Edge2 = null;\n    this.Pt = new ClipperLib.FPoint0();\n  };\n\n  ClipperLib.MyIntersectNodeSort = function () {};\n\n  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n  {\n    var i = node2.Pt.Y - node1.Pt.Y;\n    if (i > 0) return 1;else\n    if (i < 0) return -1;else\n    return 0;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.LocalMinima = function ()\n  {\n    this.Y = 0;\n    this.LeftBound = null;\n    this.RightBound = null;\n    this.Next = null;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.Scanbeam = function ()\n  {\n    this.Y = 0;\n    this.Next = null;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.Maxima = function ()\n  {\n    this.X = 0;\n    this.Next = null;\n    this.Prev = null;\n  };\n\n  //OutRec: contains a path in the clipping solution. Edges in the AEL will\n  //carry a pointer to an OutRec when they are part of the clipping solution.\n  /**\n  * @constructor\n  */\n  ClipperLib.OutRec = function ()\n  {\n    this.Idx = 0;\n    this.IsHole = false;\n    this.IsOpen = false;\n    this.FirstLeft = null; //see comments in clipper.pas\n    this.Pts = null;\n    this.BottomPt = null;\n    this.PolyNode = null;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.OutPt = function ()\n  {\n    this.Idx = 0;\n    this.Pt = new ClipperLib.FPoint0();\n    this.Next = null;\n    this.Prev = null;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.Join = function ()\n  {\n    this.OutPt1 = null;\n    this.OutPt2 = null;\n    this.OffPt = new ClipperLib.FPoint0();\n  };\n\n  ClipperLib.ClipperBase = function ()\n  {\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_edges = new Array();\n    this.m_HasOpenPaths = false;\n    this.PreserveCollinear = false;\n    this.m_Scanbeam = null;\n    this.m_PolyOuts = null;\n    this.m_ActiveEdges = null;\n  };\n\n  ClipperLib.ClipperBase.horizontal = -3.4E+38;\n  ClipperLib.ClipperBase.Skip = -2;\n  ClipperLib.ClipperBase.Unassigned = -1;\n  ClipperLib.ClipperBase.tolerance = 1E-20;\n\n  // The MAX_VALUE property has a value of 1.7976931348623157e+308. Values larger than MAX_VALUE are represented as \"Infinity\".\n  //MIN_VALUE has a value of 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0.\n  ClipperLib.ClipperBase.maxValue = Math.sqrt(Number.MAX_VALUE); // 1.3407807929942596e+154\n  ClipperLib.ClipperBase.minValue = Math.sqrt(Number.MIN_VALUE); // 2.2227587494850775e-162\n\n  ClipperLib.ClipperBase.near_zero = function (val)\n  {\n    return val > -ClipperLib.ClipperBase.tolerance && val < ClipperLib.ClipperBase.tolerance;\n  };\n\n  ClipperLib.ClipperBase.IsHorizontal = function (e)\n  {\n    return e.Delta.Y === 0;\n  };\n\n  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n  {\n    var pp2 = pp;\n    do {\n      if (ClipperLib.FPoint.op_Equality(pp2.Pt, pt))\n      return true;\n      pp2 = pp2.Next;\n    } while (\n    pp2 !== pp);\n    return false;\n  };\n\n  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2)\n  {\n    return pt.X === linePt1.X && pt.Y === linePt1.Y || pt.X === linePt2.X && pt.Y === linePt2.Y || pt.X > linePt1.X === pt.X < linePt2.X && pt.Y > linePt1.Y === pt.Y < linePt2.Y && (pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) === (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y);\n  };\n\n  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp)\n  {\n    var pp2 = pp;\n    while (true)\n    {\n      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt))\n      return true;\n      pp2 = pp2.Next;\n      if (pp2 === pp)\n      break;\n    }\n    return false;\n  };\n\n  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    var e1, e2, pt1, pt2, pt3, pt4;\n    if (alen === 2) // function (e1, e2)\n      {\n        e1 = a[0];\n        e2 = a[1];\n        return e1.Delta.Y * e2.Delta.X === e1.Delta.X * e2.Delta.Y;\n      } else\n    if (alen === 3) // function (pt1, pt2, pt3)\n      {\n        pt1 = a[0];\n        pt2 = a[1];\n        pt3 = a[2];\n        return (pt1.Y - pt2.Y) * (pt2.X - pt3.X) - (pt1.X - pt2.X) * (pt2.Y - pt3.Y) === 0;\n      } else\n      // function (pt1, pt2, pt3, pt4)\n      {\n        pt1 = a[0];\n        pt2 = a[1];\n        pt3 = a[2];\n        pt4 = a[3];\n        return (pt1.Y - pt2.Y) * (pt3.X - pt4.X) - (pt1.X - pt2.X) * (pt3.Y - pt4.Y) === 0;\n      }\n  };\n\n  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2)\n  {\n    return e1.Delta.Y * e2.Delta.X === e1.Delta.X * e2.Delta.Y;\n  };\n\n  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3)\n  {\n    return (pt1.Y - pt2.Y) * (pt2.X - pt3.X) - (pt1.X - pt2.X) * (pt2.Y - pt3.Y) === 0;\n  };\n\n  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4)\n  {\n    return (pt1.Y - pt2.Y) * (pt3.X - pt4.X) - (pt1.X - pt2.X) * (pt3.Y - pt4.Y) === 0;\n  };\n\n  ClipperLib.ClipperBase.prototype.Clear = function ()\n  {\n    this.DisposeLocalMinimaList();\n    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n    {\n      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n      this.m_edges[i][j] = null;\n      ClipperLib.Clear(this.m_edges[i]);\n    }\n    ClipperLib.Clear(this.m_edges);\n    this.m_HasOpenPaths = false;\n  };\n\n  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n  {\n    while (this.m_MinimaList !== null)\n    {\n      var tmpLm = this.m_MinimaList.Next;\n      this.m_MinimaList = null;\n      this.m_MinimaList = tmpLm;\n    }\n    this.m_CurrentLM = null;\n  };\n\n  ClipperLib.ClipperBase.prototype.RangeTest = function (pt)\n  {\n    if (pt.X > ClipperLib.ClipperBase.maxValue || pt.X < -ClipperLib.ClipperBase.maxValue ||\n    pt.Y > ClipperLib.ClipperBase.maxValue || pt.Y < -ClipperLib.ClipperBase.maxValue ||\n    pt.X > 0 && pt.X < ClipperLib.ClipperBase.minValue ||\n    pt.Y > 0 && pt.Y < ClipperLib.ClipperBase.minValue ||\n    pt.X < 0 && pt.X > -ClipperLib.ClipperBase.minValue ||\n    pt.Y < 0 && pt.Y > -ClipperLib.ClipperBase.minValue)\n    ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n  };\n\n  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n  {\n    e.Next = eNext;\n    e.Prev = ePrev;\n    //e.Curr = pt;\n    e.Curr.X = pt.X;\n    e.Curr.Y = pt.Y;\n    if (ClipperLib.use_xyz) e.Curr.Z = pt.Z;\n    e.OutIdx = -1;\n  };\n\n  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n  {\n    if (e.Curr.Y >= e.Next.Curr.Y)\n    {\n      //e.Bot = e.Curr;\n      e.Bot.X = e.Curr.X;\n      e.Bot.Y = e.Curr.Y;\n      if (ClipperLib.use_xyz) e.Bot.Z = e.Curr.Z;\n      //e.Top = e.Next.Curr;\n      e.Top.X = e.Next.Curr.X;\n      e.Top.Y = e.Next.Curr.Y;\n      if (ClipperLib.use_xyz) e.Top.Z = e.Next.Curr.Z;\n    } else\n\n    {\n      //e.Top = e.Curr;\n      e.Top.X = e.Curr.X;\n      e.Top.Y = e.Curr.Y;\n      if (ClipperLib.use_xyz) e.Top.Z = e.Curr.Z;\n      //e.Bot = e.Next.Curr;\n      e.Bot.X = e.Next.Curr.X;\n      e.Bot.Y = e.Next.Curr.Y;\n      if (ClipperLib.use_xyz) e.Bot.Z = e.Next.Curr.Z;\n    }\n    this.SetDx(e);\n    e.PolyTyp = polyType;\n  };\n\n  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n  {\n    var E2;\n    for (;;)\n    {\n      while (ClipperLib.FPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.FPoint.op_Equality(E.Curr, E.Top))\n      E = E.Next;\n      if (E.Dx !== ClipperLib.ClipperBase.horizontal && E.Prev.Dx !== ClipperLib.ClipperBase.horizontal)\n      break;\n      while (E.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n      E = E.Prev;\n      E2 = E;\n      while (E.Dx === ClipperLib.ClipperBase.horizontal)\n      E = E.Next;\n      if (E.Top.Y === E.Prev.Bot.Y)\n      continue;\n      //ie just an intermediate horz.\n      if (E2.Prev.Bot.X < E.Bot.X)\n      E = E2;\n      break;\n    }\n    return E;\n  };\n\n  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n  {\n    var EStart;\n    var Result = E;\n    var Horz;\n\n    if (Result.OutIdx === ClipperLib.ClipperBase.Skip)\n    {\n      //check if there are edges beyond the skip edge in the bound and if so\n      //create another LocMin and calling ProcessBound once more ...\n      E = Result;\n      if (LeftBoundIsForward)\n      {\n        while (E.Top.Y === E.Next.Bot.Y) E = E.Next;\n        while (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Prev;\n      } else\n\n      {\n        while (E.Top.Y === E.Prev.Bot.Y) E = E.Prev;\n        while (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Next;\n      }\n      if (E === Result)\n      {\n        if (LeftBoundIsForward) Result = E.Next;else\n        Result = E.Prev;\n      } else\n\n      {\n        //there are more edges in the bound beyond result starting with E\n        if (LeftBoundIsForward)\n        E = Result.Next;else\n\n        E = Result.Prev;\n        var locMin = new ClipperLib.LocalMinima();\n        locMin.Next = null;\n        locMin.Y = E.Bot.Y;\n        locMin.LeftBound = null;\n        locMin.RightBound = E;\n        E.WindDelta = 0;\n        Result = this.ProcessBound(E, LeftBoundIsForward);\n        this.InsertLocalMinima(locMin);\n      }\n      return Result;\n    }\n\n    if (E.Dx === ClipperLib.ClipperBase.horizontal)\n    {\n      //We need to be careful with open paths because this may not be a\n      //true local minima (ie E may be following a skip edge).\n      //Also, consecutive horz. edges may start heading left before going right.\n      if (LeftBoundIsForward) EStart = E.Prev;else\n      EStart = E.Next;\n\n      if (EStart.Dx === ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n        {\n          if (EStart.Bot.X !== E.Bot.X && EStart.Top.X !== E.Bot.X)\n          this.ReverseHorizontal(E);\n        } else\n      if (EStart.Bot.X !== E.Bot.X)\n      this.ReverseHorizontal(E);\n    }\n\n    EStart = E;\n    if (LeftBoundIsForward)\n    {\n      while (Result.Top.Y === Result.Next.Bot.Y && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n      Result = Result.Next;\n      if (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n      {\n        //nb: at the top of a bound, horizontals are added to the bound\n        //only when the preceding edge attaches to the horizontal's left vertex\n        //unless a Skip edge is encountered when that becomes the top divide\n        Horz = Result;\n        while (Horz.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n        Horz = Horz.Prev;\n        if (Horz.Prev.Top.X > Result.Next.Top.X)\n        Result = Horz.Prev;\n      }\n      while (E !== Result)\n      {\n        E.NextInLML = E.Next;\n        if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n        this.ReverseHorizontal(E);\n        E = E.Next;\n      }\n      if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n      this.ReverseHorizontal(E);\n      Result = Result.Next;\n      //move to the edge just beyond current bound\n    } else\n\n    {\n      while (Result.Top.Y === Result.Prev.Bot.Y && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n      Result = Result.Prev;\n      if (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n      {\n        Horz = Result;\n        while (Horz.Next.Dx === ClipperLib.ClipperBase.horizontal)\n        Horz = Horz.Next;\n        if (Horz.Next.Top.X === Result.Prev.Top.X || Horz.Next.Top.X > Result.Prev.Top.X)\n        {\n          Result = Horz.Next;\n        }\n      }\n      while (E !== Result)\n      {\n        E.NextInLML = E.Prev;\n        if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n        this.ReverseHorizontal(E);\n        E = E.Prev;\n      }\n      if (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n      this.ReverseHorizontal(E);\n      Result = Result.Prev;\n      //move to the edge just beyond current bound\n    }\n\n    return Result;\n  };\n\n  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n  {\n    if (ClipperLib.use_lines)\n    {\n      if (!Closed && polyType === ClipperLib.PolyType.ptClip)\n      ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n    } else\n\n    {\n      if (!Closed)\n      ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n    }\n    var highI = pg.length - 1;\n    if (Closed)\n    while (highI > 0 && ClipperLib.FPoint.op_Equality(pg[highI], pg[0]))\n    --highI;\n    while (highI > 0 && ClipperLib.FPoint.op_Equality(pg[highI], pg[highI - 1]))\n    --highI;\n    if (Closed && highI < 2 || !Closed && highI < 1)\n    return false;\n    //create a new edge array ...\n    var edges = new Array();\n    for (var i = 0; i <= highI; i++)\n    edges.push(new ClipperLib.TEdge());\n    var IsFlat = true;\n    //1. Basic (first) edge initialization ...\n\n    //edges[1].Curr = pg[1];\n    edges[1].Curr.X = pg[1].X;\n    edges[1].Curr.Y = pg[1].Y;\n    if (ClipperLib.use_xyz) edges[1].Curr.Z = pg[1].Z;\n\n    this.RangeTest(pg[0]);\n\n    this.RangeTest(pg[highI]);\n\n    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n    for (var i = highI - 1; i >= 1; --i)\n    {\n      this.RangeTest(pg[i]);\n\n      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n    }\n\n    var eStart = edges[0];\n    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n    var E = eStart,\n      eLoopStop = eStart;\n    for (;;)\n    {\n      //console.log(E.Next, eStart);\n      //nb: allows matching start and end points when not Closed ...\n      if (E.Curr === E.Next.Curr && (Closed || E.Next !== eStart))\n      {\n        if (E === E.Next)\n        break;\n        if (E === eStart)\n        eStart = E.Next;\n        E = this.RemoveEdge(E);\n        eLoopStop = E;\n        continue;\n      }\n      if (E.Prev === E.Next)\n      break;else\n      if (Closed && ClipperLib.ClipperBase.SlopesEqual4(E.Prev.Curr, E.Curr, E.Next.Curr) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n      {\n        //Collinear edges are allowed for open paths but in closed paths\n        //the default is to merge adjacent collinear edges into a single edge.\n        //However, if the PreserveCollinear property is enabled, only overlapping\n        //collinear edges (ie spikes) will be removed from closed paths.\n        if (E === eStart)\n        eStart = E.Next;\n        E = this.RemoveEdge(E);\n        E = E.Prev;\n        eLoopStop = E;\n        continue;\n      }\n      E = E.Next;\n      if (E === eLoopStop || !Closed && E.Next === eStart) break;\n    }\n    if (!Closed && E === E.Next || Closed && E.Prev === E.Next)\n    return false;\n    if (!Closed)\n    {\n      this.m_HasOpenPaths = true;\n      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n    }\n    //3. Do second stage of edge initialization ...\n    E = eStart;\n    do {\n      this.InitEdge2(E, polyType);\n      E = E.Next;\n      if (IsFlat && E.Curr.Y !== eStart.Curr.Y)\n      IsFlat = false;\n    } while (\n    E !== eStart);\n    //4. Finally, add edge bounds to LocalMinima list ...\n    //Totally flat paths must be handled differently when adding them\n    //to LocalMinima list to avoid endless loops etc ...\n    if (IsFlat)\n    {\n      if (Closed)\n      return false;\n\n      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      locMin.LeftBound = null;\n      locMin.RightBound = E;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      locMin.RightBound.WindDelta = 0;\n\n      for (;;)\n      {\n        if (E.Bot.X !== E.Prev.Top.X) this.ReverseHorizontal(E);\n        if (E.Next.OutIdx === ClipperLib.ClipperBase.Skip) break;\n        E.NextInLML = E.Next;\n        E = E.Next;\n      }\n      this.InsertLocalMinima(locMin);\n      this.m_edges.push(edges);\n      return true;\n    }\n    this.m_edges.push(edges);\n    var leftBoundIsForward;\n    var EMin = null;\n\n    //workaround to avoid an endless loop in the while loop below when\n    //open paths have matching start and end points ...\n    if (ClipperLib.FPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n    E = E.Next;\n\n    for (;;)\n    {\n      E = this.FindNextLocMin(E);\n      if (E === EMin)\n      break;else\n      if (EMin === null)\n      EMin = E;\n      //E and E.Prev now share a local minima (left aligned if horizontal).\n      //Compare their slopes to find which starts which bound ...\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      if (E.Dx < E.Prev.Dx)\n      {\n        locMin.LeftBound = E.Prev;\n        locMin.RightBound = E;\n        leftBoundIsForward = false;\n        //Q.nextInLML = Q.prev\n      } else\n\n      {\n        locMin.LeftBound = E;\n        locMin.RightBound = E.Prev;\n        leftBoundIsForward = true;\n        //Q.nextInLML = Q.next\n      }\n      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      if (!Closed)\n      locMin.LeftBound.WindDelta = 0;else\n      if (locMin.LeftBound.Next === locMin.RightBound)\n      locMin.LeftBound.WindDelta = -1;else\n\n      locMin.LeftBound.WindDelta = 1;\n      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n      E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n      if (E.OutIdx === ClipperLib.ClipperBase.Skip)\n      E = this.ProcessBound(E, leftBoundIsForward);\n      var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n      if (E2.OutIdx === ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n      if (locMin.LeftBound.OutIdx === ClipperLib.ClipperBase.Skip)\n      locMin.LeftBound = null;else\n      if (locMin.RightBound.OutIdx === ClipperLib.ClipperBase.Skip)\n      locMin.RightBound = null;\n      this.InsertLocalMinima(locMin);\n      if (!leftBoundIsForward)\n      E = E2;\n    }\n    return true;\n  };\n\n  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n  {\n    //  console.log(\"-------------------------------------------\");\n    //  console.log(JSON.stringify(ppg));\n    var result = false;\n    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n    if (this.AddPath(ppg[i], polyType, closed))\n    result = true;\n    return result;\n  };\n\n  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n  {\n    if (ClipperLib.FPoint.op_Equality(pt1, pt3) || ClipperLib.FPoint.op_Equality(pt1, pt2) || ClipperLib.FPoint.op_Equality(pt3, pt2))\n\n      //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n      return false;else\n\n    if (pt1.X !== pt3.X)\n    return pt2.X > pt1.X === pt2.X < pt3.X;else\n\n    return pt2.Y > pt1.Y === pt2.Y < pt3.Y;\n  };\n\n  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n  {\n    //removes e from double_linked_list (but without removing from memory)\n    e.Prev.Next = e.Next;\n    e.Next.Prev = e.Prev;\n    var result = e.Next;\n    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n    return result;\n  };\n\n  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n  {\n    e.Delta.X = e.Top.X - e.Bot.X;\n    e.Delta.Y = e.Top.Y - e.Bot.Y;\n    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;else\n    e.Dx = e.Delta.X / e.Delta.Y;\n  };\n\n  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n  {\n    if (this.m_MinimaList === null)\n    {\n      this.m_MinimaList = newLm;\n    } else\n    if (newLm.Y >= this.m_MinimaList.Y)\n    {\n      newLm.Next = this.m_MinimaList;\n      this.m_MinimaList = newLm;\n    } else\n\n    {\n      var tmpLm = this.m_MinimaList;\n      while (tmpLm.Next !== null && newLm.Y < tmpLm.Next.Y)\n      tmpLm = tmpLm.Next;\n      newLm.Next = tmpLm.Next;\n      tmpLm.Next = newLm;\n    }\n  };\n\n  ClipperLib.ClipperBase.prototype.PopLocalMinima = function (Y, current)\n  {\n    current.v = this.m_CurrentLM;\n    if (this.m_CurrentLM !== null && this.m_CurrentLM.Y === Y)\n    {\n      this.m_CurrentLM = this.m_CurrentLM.Next;\n      return true;\n    }\n    return false;\n  };\n\n  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n  {\n    //swap horizontal edges' top and bottom x's so they follow the natural\n    //progression of the bounds - ie so their xbots will align with the\n    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n    var tmp = e.Top.X;\n    e.Top.X = e.Bot.X;\n    e.Bot.X = tmp;\n    if (ClipperLib.use_xyz)\n    {\n      tmp = e.Top.Z;\n      e.Top.Z = e.Bot.Z;\n      e.Bot.Z = tmp;\n    }\n  };\n\n  ClipperLib.ClipperBase.prototype.Reset = function ()\n  {\n    this.m_CurrentLM = this.m_MinimaList;\n    if (this.m_CurrentLM === null) //ie nothing to process\n      return;\n    //reset all edges ...\n    this.m_Scanbeam = null;\n    var lm = this.m_MinimaList;\n    while (lm !== null)\n    {\n      this.InsertScanbeam(lm.Y);\n      var e = lm.LeftBound;\n      if (e !== null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        if (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      e = lm.RightBound;\n      if (e !== null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        if (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      lm = lm.Next;\n    }\n    this.m_ActiveEdges = null;\n  };\n\n  ClipperLib.ClipperBase.prototype.InsertScanbeam = function (Y)\n  {\n    //single-linked list: sorted descending, ignoring dups.\n    if (this.m_Scanbeam === null)\n    {\n      this.m_Scanbeam = new ClipperLib.Scanbeam();\n      this.m_Scanbeam.Next = null;\n      this.m_Scanbeam.Y = Y;\n    } else\n    if (Y > this.m_Scanbeam.Y)\n    {\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = this.m_Scanbeam;\n      this.m_Scanbeam = newSb;\n    } else\n\n    {\n      var sb2 = this.m_Scanbeam;\n      while (sb2.Next !== null && Y <= sb2.Next.Y)\n      {\n        sb2 = sb2.Next;\n      }\n      if (Y === sb2.Y)\n      {\n        return;\n      } //ie ignores duplicates\n      var newSb1 = new ClipperLib.Scanbeam();\n      newSb1.Y = Y;\n      newSb1.Next = sb2.Next;\n      sb2.Next = newSb1;\n    }\n  };\n\n  ClipperLib.ClipperBase.prototype.PopScanbeam = function (Y)\n  {\n    if (this.m_Scanbeam === null)\n    {\n      Y.v = 0;\n      return false;\n    }\n    Y.v = this.m_Scanbeam.Y;\n    this.m_Scanbeam = this.m_Scanbeam.Next;\n    return true;\n  };\n\n  ClipperLib.ClipperBase.prototype.LocalMinimaPending = function ()\n  {\n    return this.m_CurrentLM !== null;\n  };\n\n  ClipperLib.ClipperBase.prototype.CreateOutRec = function ()\n  {\n    var result = new ClipperLib.OutRec();\n    result.Idx = ClipperLib.ClipperBase.Unassigned;\n    result.IsHole = false;\n    result.IsOpen = false;\n    result.FirstLeft = null;\n    result.Pts = null;\n    result.BottomPt = null;\n    result.PolyNode = null;\n    this.m_PolyOuts.push(result);\n    result.Idx = this.m_PolyOuts.length - 1;\n    return result;\n  };\n\n  ClipperLib.ClipperBase.prototype.DisposeOutRec = function (index)\n  {\n    var outRec = this.m_PolyOuts[index];\n    outRec.Pts = null;\n    outRec = null;\n    this.m_PolyOuts[index] = null;\n  };\n\n  ClipperLib.ClipperBase.prototype.UpdateEdgeIntoAEL = function (e)\n  {\n    if (e.NextInLML === null)\n    {\n      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n    }\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    e.NextInLML.OutIdx = e.OutIdx;\n    if (AelPrev !== null)\n    {\n      AelPrev.NextInAEL = e.NextInLML;\n    } else\n\n    {\n      this.m_ActiveEdges = e.NextInLML;\n    }\n    if (AelNext !== null)\n    {\n      AelNext.PrevInAEL = e.NextInLML;\n    }\n    e.NextInLML.Side = e.Side;\n    e.NextInLML.WindDelta = e.WindDelta;\n    e.NextInLML.WindCnt = e.WindCnt;\n    e.NextInLML.WindCnt2 = e.WindCnt2;\n    e = e.NextInLML;\n    e.Curr.X = e.Bot.X;\n    e.Curr.Y = e.Bot.Y;\n    e.PrevInAEL = AelPrev;\n    e.NextInAEL = AelNext;\n    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n    {\n      this.InsertScanbeam(e.Top.Y);\n    }\n    return e;\n  };\n\n  ClipperLib.ClipperBase.prototype.SwapPositionsInAEL = function (edge1, edge2)\n  {\n    //check that one or other edge hasn't already been removed from AEL ...\n    if (edge1.NextInAEL === edge1.PrevInAEL || edge2.NextInAEL === edge2.PrevInAEL)\n    {\n      return;\n    }\n\n    if (edge1.NextInAEL === edge2)\n    {\n      var next = edge2.NextInAEL;\n      if (next !== null)\n      {\n        next.PrevInAEL = edge1;\n      }\n      var prev = edge1.PrevInAEL;\n      if (prev !== null)\n      {\n        prev.NextInAEL = edge2;\n      }\n      edge2.PrevInAEL = prev;\n      edge2.NextInAEL = edge1;\n      edge1.PrevInAEL = edge2;\n      edge1.NextInAEL = next;\n    } else\n    if (edge2.NextInAEL === edge1)\n    {\n      var next1 = edge1.NextInAEL;\n      if (next1 !== null)\n      {\n        next1.PrevInAEL = edge2;\n      }\n      var prev1 = edge2.PrevInAEL;\n      if (prev1 !== null)\n      {\n        prev1.NextInAEL = edge1;\n      }\n      edge1.PrevInAEL = prev1;\n      edge1.NextInAEL = edge2;\n      edge2.PrevInAEL = edge1;\n      edge2.NextInAEL = next1;\n    } else\n\n    {\n      var next2 = edge1.NextInAEL;\n      var prev2 = edge1.PrevInAEL;\n      edge1.NextInAEL = edge2.NextInAEL;\n      if (edge1.NextInAEL !== null)\n      {\n        edge1.NextInAEL.PrevInAEL = edge1;\n      }\n      edge1.PrevInAEL = edge2.PrevInAEL;\n      if (edge1.PrevInAEL !== null)\n      {\n        edge1.PrevInAEL.NextInAEL = edge1;\n      }\n      edge2.NextInAEL = next2;\n      if (edge2.NextInAEL !== null)\n      {\n        edge2.NextInAEL.PrevInAEL = edge2;\n      }\n      edge2.PrevInAEL = prev2;\n      if (edge2.PrevInAEL !== null)\n      {\n        edge2.PrevInAEL.NextInAEL = edge2;\n      }\n    }\n\n    if (edge1.PrevInAEL === null)\n    {\n      this.m_ActiveEdges = edge1;\n    } else\n\n    {\n      if (edge2.PrevInAEL === null)\n      {\n        this.m_ActiveEdges = edge2;\n      }\n    }\n  };\n\n  ClipperLib.ClipperBase.prototype.DeleteFromAEL = function (e)\n  {\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    if (AelPrev === null && AelNext === null && e !== this.m_ActiveEdges)\n    {\n      return;\n    } //already deleted\n    if (AelPrev !== null)\n    {\n      AelPrev.NextInAEL = AelNext;\n    } else\n\n    {\n      this.m_ActiveEdges = AelNext;\n    }\n    if (AelNext !== null)\n    {\n      AelNext.PrevInAEL = AelPrev;\n    }\n    e.NextInAEL = null;\n    e.PrevInAEL = null;\n  };\n\n  // public Clipper(int InitOptions = 0)\n  /**\n   * @suppress {missingProperties}\n   */\n  ClipperLib.Clipper = function (InitOptions)\n  {\n    if (typeof InitOptions === \"undefined\") InitOptions = 0;\n    this.m_PolyOuts = null;\n    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n    this.m_Scanbeam = null;\n    this.m_Maxima = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = null;\n    this.m_IntersectNodeComparer = null;\n    this.m_ExecuteLocked = false;\n    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_Joins = null;\n    this.m_GhostJoins = null;\n    this.m_UsingPolyTree = false;\n    this.ReverseSolution = false;\n    this.StrictlySimple = false;\n\n    ClipperLib.ClipperBase.call(this);\n\n    this.m_Scanbeam = null;\n    this.m_Maxima = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = new Array();\n    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n    this.m_ExecuteLocked = false;\n    this.m_UsingPolyTree = false;\n    this.m_PolyOuts = new Array();\n    this.m_Joins = new Array();\n    this.m_GhostJoins = new Array();\n    this.ReverseSolution = (1 & InitOptions) !== 0;\n    this.StrictlySimple = (2 & InitOptions) !== 0;\n    this.PreserveCollinear = (4 & InitOptions) !== 0;\n    if (ClipperLib.use_xyz)\n    {\n      this.ZFillFunction = null; // function (FPoint bot1, FPoint top1, FPoint bot2, FPoint top2, ref FPoint intersectPt);\n    }\n  };\n\n  ClipperLib.Clipper.ioReverseSolution = 1;\n  ClipperLib.Clipper.ioStrictlySimple = 2;\n  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\n  ClipperLib.Clipper.prototype.Clear = function ()\n  {\n    if (this.m_edges.length === 0)\n    return;\n    //avoids problems with ClipperBase destructor\n    this.DisposeAllPolyPts();\n    ClipperLib.ClipperBase.prototype.Clear.call(this);\n  };\n\n  ClipperLib.Clipper.prototype.InsertMaxima = function (X)\n  {\n    //double-linked list: sorted ascending, ignoring dups.\n    var newMax = new ClipperLib.Maxima();\n    newMax.X = X;\n    if (this.m_Maxima === null)\n    {\n      this.m_Maxima = newMax;\n      this.m_Maxima.Next = null;\n      this.m_Maxima.Prev = null;\n    } else\n    if (X < this.m_Maxima.X)\n    {\n      newMax.Next = this.m_Maxima;\n      newMax.Prev = null;\n      this.m_Maxima = newMax;\n    } else\n\n    {\n      var m = this.m_Maxima;\n      while (m.Next !== null && X >= m.Next.X)\n      {\n        m = m.Next;\n      }\n      if (X === m.X)\n      {\n        return;\n      } //ie ignores duplicates (& CG to clean up newMax)\n      //insert newMax between m and m.Next ...\n      newMax.Next = m.Next;\n      newMax.Prev = m;\n      if (m.Next !== null)\n      {\n        m.Next.Prev = newMax;\n      }\n      m.Next = newMax;\n    }\n  };\n\n  // ************************************\n  ClipperLib.Clipper.prototype.Execute = function ()\n  {\n    var a = arguments,\n      alen = a.length,\n      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n    if (alen === 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n      {\n        var clipType = a[0],\n          solution = a[1],\n          subjFillType = a[2],\n          clipFillType = a[3];\n        if (this.m_ExecuteLocked)\n        return false;\n        if (this.m_HasOpenPaths)\n        ClipperLib.Error(\"Error: PolyTree struct is needed for open path clipping.\");\n        this.m_ExecuteLocked = true;\n        ClipperLib.Clear(solution);\n        this.m_SubjFillType = subjFillType;\n        this.m_ClipFillType = clipFillType;\n        this.m_ClipType = clipType;\n        this.m_UsingPolyTree = false;\n        try\n        {\n          var succeeded = this.ExecuteInternal();\n          //build the return polygons ...\n          if (succeeded) this.BuildResult(solution);\n        } finally\n\n        {\n          this.DisposeAllPolyPts();\n          this.m_ExecuteLocked = false;\n        }\n        return succeeded;\n      } else\n    if (alen === 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n      {\n        var clipType = a[0],\n          polytree = a[1],\n          subjFillType = a[2],\n          clipFillType = a[3];\n        if (this.m_ExecuteLocked)\n        return false;\n        this.m_ExecuteLocked = true;\n        this.m_SubjFillType = subjFillType;\n        this.m_ClipFillType = clipFillType;\n        this.m_ClipType = clipType;\n        this.m_UsingPolyTree = true;\n        try\n        {\n          var succeeded = this.ExecuteInternal();\n          //build the return polygons ...\n          if (succeeded) this.BuildResult2(polytree);\n        } finally\n\n        {\n          this.DisposeAllPolyPts();\n          this.m_ExecuteLocked = false;\n        }\n        return succeeded;\n      } else\n    if (alen === 2 && !ispolytree) // function (clipType, solution)\n      {\n        var clipType = a[0],\n          solution = a[1];\n        return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n      } else\n    if (alen === 2 && ispolytree) // function (clipType, polytree)\n      {\n        var clipType = a[0],\n          polytree = a[1];\n        return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n      }\n  };\n\n  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n  {\n    //skip if an outermost polygon or\n    //already already points to the correct FirstLeft ...\n    if (outRec.FirstLeft === null || outRec.IsHole !== outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null)\n    return;\n    var orfl = outRec.FirstLeft;\n    while (orfl !== null && (orfl.IsHole === outRec.IsHole || orfl.Pts === null))\n    orfl = orfl.FirstLeft;\n    outRec.FirstLeft = orfl;\n  };\n\n  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n  {\n    try\n    {\n      this.Reset();\n      this.m_SortedEdges = null;\n      this.m_Maxima = null;\n\n      var botY = {},\n        topY = {};\n\n      if (!this.PopScanbeam(botY))\n      {\n        return false;\n      }\n      this.InsertLocalMinimaIntoAEL(botY.v);\n      while (this.PopScanbeam(topY) || this.LocalMinimaPending())\n      {\n        this.ProcessHorizontals();\n        this.m_GhostJoins.length = 0;\n        if (!this.ProcessIntersections(topY.v))\n        {\n          return false;\n        }\n        this.ProcessEdgesAtTopOfScanbeam(topY.v);\n        botY.v = topY.v;\n        this.InsertLocalMinimaIntoAEL(botY.v);\n      }\n\n      //fix orientations ...\n      var outRec, i, ilen;\n      //fix orientations ...\n      for (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        outRec = this.m_PolyOuts[i];\n        if (outRec.Pts === null || outRec.IsOpen) continue;\n        if ((outRec.IsHole ^ this.ReverseSolution) == this.Area$1(outRec) > 0)\n        this.ReversePolyPtLinks(outRec.Pts);\n      }\n\n      this.JoinCommonEdges();\n\n      for (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        outRec = this.m_PolyOuts[i];\n        if (outRec.Pts === null)\n        continue;else\n        if (outRec.IsOpen)\n        this.FixupOutPolyline(outRec);else\n\n        this.FixupOutPolygon(outRec);\n      }\n\n      if (this.StrictlySimple) this.DoSimplePolygons();\n      return true;\n    }\n    //catch { return false; }\n    finally\n    {\n      this.m_Joins.length = 0;\n      this.m_GhostJoins.length = 0;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n    this.DisposeOutRec(i);\n    ClipperLib.Clear(this.m_PolyOuts);\n  };\n\n  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op1;\n    j.OutPt2 = Op2;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    if (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n    this.m_Joins.push(j);\n  };\n\n  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    if (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n    this.m_GhostJoins.push(j);\n  };\n\n  //if (ClipperLib.use_xyz)\n  //{\n  ClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n  {\n    if (this.ZFillFunction !== null)\n    {\n      if (pt.Z !== 0 || this.ZFillFunction === null) return;else\n      if (ClipperLib.FPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;else\n      if (ClipperLib.FPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;else\n      if (ClipperLib.FPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;else\n      if (ClipperLib.FPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;else\n      this.ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n    }\n  };\n  //}\n\n  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n  {\n    var lm = {};\n\n    var lb;\n    var rb;\n    while (this.PopLocalMinima(botY, lm))\n    {\n      lb = lm.v.LeftBound;\n      rb = lm.v.RightBound;\n\n      var Op1 = null;\n      if (lb === null)\n      {\n        this.InsertEdgeIntoAEL(rb, null);\n        this.SetWindingCount(rb);\n        if (this.IsContributing(rb))\n        Op1 = this.AddOutPt(rb, rb.Bot);\n      } else\n      if (rb === null)\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.SetWindingCount(lb);\n        if (this.IsContributing(lb))\n        Op1 = this.AddOutPt(lb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      } else\n\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.InsertEdgeIntoAEL(rb, lb);\n        this.SetWindingCount(lb);\n        rb.WindCnt = lb.WindCnt;\n        rb.WindCnt2 = lb.WindCnt2;\n        if (this.IsContributing(lb))\n        Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      if (rb !== null)\n      {\n        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n        {\n          if (rb.NextInLML !== null)\n          {\n            this.InsertScanbeam(rb.NextInLML.Top.Y);\n          }\n          this.AddEdgeToSEL(rb);\n        } else\n\n        {\n          this.InsertScanbeam(rb.Top.Y);\n        }\n      }\n      if (lb === null || rb === null) continue;\n      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n      {\n        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n        {\n          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n          //the 'ghost' join to a real join ready for later ...\n          var j = this.m_GhostJoins[i];\n\n          if (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n          this.AddJoin(j.OutPt1, Op1, j.OffPt);\n        }\n      }\n\n      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n      lb.PrevInAEL.Curr.X === lb.Bot.X &&\n      lb.PrevInAEL.OutIdx >= 0 &&\n      ClipperLib.ClipperBase.SlopesEqual5(lb.PrevInAEL.Curr, lb.PrevInAEL.Top, lb.Curr, lb.Top) &&\n      lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n      {\n        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n        this.AddJoin(Op1, Op2, lb.Top);\n      }\n      if (lb.NextInAEL !== rb)\n      {\n        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n        ClipperLib.ClipperBase.SlopesEqual5(rb.PrevInAEL.Curr, rb.PrevInAEL.Top, rb.Curr, rb.Top) &&\n        rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n        {\n          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n          this.AddJoin(Op1, Op2, rb.Top);\n        }\n        var e = lb.NextInAEL;\n        if (e !== null)\n        while (e !== rb)\n        {\n          //nb: For calculating winding counts etc, IntersectEdges() assumes\n          //that param1 will be to the right of param2 ABOVE the intersection ...\n          this.IntersectEdges(rb, e, lb.Curr);\n          //order important here\n          e = e.NextInAEL;\n        }\n      }\n    }\n  };\n\n  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n  {\n    if (this.m_ActiveEdges === null)\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = null;\n      this.m_ActiveEdges = edge;\n    } else\n    if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = this.m_ActiveEdges;\n      this.m_ActiveEdges.PrevInAEL = edge;\n      this.m_ActiveEdges = edge;\n    } else\n\n    {\n      if (startEdge === null)\n      startEdge = this.m_ActiveEdges;\n      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n      startEdge = startEdge.NextInAEL;\n      edge.NextInAEL = startEdge.NextInAEL;\n      if (startEdge.NextInAEL !== null)\n      startEdge.NextInAEL.PrevInAEL = edge;\n      edge.PrevInAEL = startEdge;\n      startEdge.NextInAEL = edge;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n  {\n    if (e2.Curr.X === e1.Curr.X)\n    {\n      if (e2.Top.Y > e1.Top.Y)\n      return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);else\n\n      return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n    } else\n\n    return e2.Curr.X < e1.Curr.X;\n  };\n\n  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n  {\n    if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n    return this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;else\n\n    return this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n  };\n\n  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n  {\n    if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n    return this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;else\n\n    return this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n  };\n\n  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n  {\n    var pft, pft2;\n    if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n    {\n      pft = this.m_SubjFillType;\n      pft2 = this.m_ClipFillType;\n    } else\n\n    {\n      pft = this.m_ClipFillType;\n      pft2 = this.m_SubjFillType;\n    }\n    switch (pft) {\n\n      case ClipperLib.PolyFillType.pftEvenOdd:\n        if (edge.WindDelta === 0 && edge.WindCnt !== 1)\n        return false;\n        break;\n      case ClipperLib.PolyFillType.pftNonZero:\n        if (Math.abs(edge.WindCnt) !== 1)\n        return false;\n        break;\n      case ClipperLib.PolyFillType.pftPositive:\n        if (edge.WindCnt !== 1)\n        return false;\n        break;\n      default:\n        if (edge.WindCnt !== -1)\n        return false;\n        break;\n    }\n    switch (this.m_ClipType) {\n\n      case ClipperLib.ClipType.ctIntersection:\n        switch (pft2) {\n\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return edge.WindCnt2 !== 0;\n          case ClipperLib.PolyFillType.pftPositive:\n            return edge.WindCnt2 > 0;\n          default:\n            return edge.WindCnt2 < 0;\n        }\n      case ClipperLib.ClipType.ctUnion:\n        switch (pft2) {\n\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return edge.WindCnt2 === 0;\n          case ClipperLib.PolyFillType.pftPositive:\n            return edge.WindCnt2 <= 0;\n          default:\n            return edge.WindCnt2 >= 0;\n        }\n      case ClipperLib.ClipType.ctDifference:\n        if (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n        switch (pft2) {\n\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return edge.WindCnt2 === 0;\n          case ClipperLib.PolyFillType.pftPositive:\n            return edge.WindCnt2 <= 0;\n          default:\n            return edge.WindCnt2 >= 0;\n        } else\n\n        switch (pft2) {\n\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return edge.WindCnt2 !== 0;\n          case ClipperLib.PolyFillType.pftPositive:\n            return edge.WindCnt2 > 0;\n          default:\n            return edge.WindCnt2 < 0;\n        }\n      case ClipperLib.ClipType.ctXor:\n        if (edge.WindDelta === 0)\n        switch (pft2) {\n\n          case ClipperLib.PolyFillType.pftEvenOdd:\n          case ClipperLib.PolyFillType.pftNonZero:\n            return edge.WindCnt2 === 0;\n          case ClipperLib.PolyFillType.pftPositive:\n            return edge.WindCnt2 <= 0;\n          default:\n            return edge.WindCnt2 >= 0;\n        } else\n\n        return true;\n    }\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n  {\n    var e = edge.PrevInAEL;\n    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n    while (e !== null && (e.PolyTyp !== edge.PolyTyp || e.WindDelta === 0))\n    e = e.PrevInAEL;\n    if (e === null)\n    {\n      var pft = edge.PolyTyp === ClipperLib.PolyType.ptSubject ? this.m_SubjFillType : this.m_ClipFillType;\n      if (edge.WindDelta === 0)\n      {\n        edge.WindCnt = pft === ClipperLib.PolyFillType.pftNegative ? -1 : 1;\n      } else\n\n      {\n        edge.WindCnt = edge.WindDelta;\n      }\n      edge.WindCnt2 = 0;\n      e = this.m_ActiveEdges;\n      //ie get ready to calc WindCnt2\n    } else\n    if (edge.WindDelta === 0 && this.m_ClipType !== ClipperLib.ClipType.ctUnion)\n    {\n      edge.WindCnt = 1;\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    } else\n    if (this.IsEvenOddFillType(edge))\n    {\n      //EvenOdd filling ...\n      if (edge.WindDelta === 0)\n      {\n        //are we inside a subj polygon ...\n        var Inside = true;\n        var e2 = e.PrevInAEL;\n        while (e2 !== null)\n        {\n          if (e2.PolyTyp === e.PolyTyp && e2.WindDelta !== 0)\n          Inside = !Inside;\n          e2 = e2.PrevInAEL;\n        }\n        edge.WindCnt = Inside ? 0 : 1;\n      } else\n\n      {\n        edge.WindCnt = edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    } else\n\n    {\n      //nonZero, Positive or Negative filling ...\n      if (e.WindCnt * e.WindDelta < 0)\n      {\n        //prev edge is 'decreasing' WindCount (WC) toward zero\n        //so we're outside the previous polygon ...\n        if (Math.abs(e.WindCnt) > 1)\n        {\n          //outside prev poly but still inside another.\n          //when reversing direction of prev poly use the same WC\n          if (e.WindDelta * edge.WindDelta < 0)\n          edge.WindCnt = e.WindCnt;else\n\n          edge.WindCnt = e.WindCnt + edge.WindDelta;\n        } else\n\n        edge.WindCnt = edge.WindDelta === 0 ? 1 : edge.WindDelta;\n      } else\n\n      {\n        //prev edge is 'increasing' WindCount (WC) away from zero\n        //so we're inside the previous polygon ...\n        if (edge.WindDelta === 0)\n        edge.WindCnt = e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1;else\n        if (e.WindDelta * edge.WindDelta < 0)\n        edge.WindCnt = e.WindCnt;else\n\n        edge.WindCnt = e.WindCnt + edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    //update WindCnt2 ...\n    if (this.IsEvenOddAltFillType(edge))\n    {\n      //EvenOdd filling ...\n      while (e !== edge)\n      {\n        if (e.WindDelta !== 0)\n        edge.WindCnt2 = edge.WindCnt2 === 0 ? 1 : 0;\n        e = e.NextInAEL;\n      }\n    } else\n\n    {\n      //nonZero, Positive or Negative filling ...\n      while (e !== edge)\n      {\n        edge.WindCnt2 += e.WindDelta;\n        e = e.NextInAEL;\n      }\n    }\n  };\n\n  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n  {\n    //SEL pointers in PEdge are use to build transient lists of horizontal edges.\n    //However, since we don't need to worry about processing order, all additions\n    //are made to the front of the list ...\n    if (this.m_SortedEdges === null)\n    {\n      this.m_SortedEdges = edge;\n      edge.PrevInSEL = null;\n      edge.NextInSEL = null;\n    } else\n\n    {\n      edge.NextInSEL = this.m_SortedEdges;\n      edge.PrevInSEL = null;\n      this.m_SortedEdges.PrevInSEL = edge;\n      this.m_SortedEdges = edge;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.PopEdgeFromSEL = function (e)\n  {\n    //Pop edge from front of SEL (ie SEL is a FILO list)\n    e.v = this.m_SortedEdges;\n    if (e.v === null)\n    {\n      return false;\n    }\n    var oldE = e.v;\n    this.m_SortedEdges = e.v.NextInSEL;\n    if (this.m_SortedEdges !== null)\n    {\n      this.m_SortedEdges.PrevInSEL = null;\n    }\n    oldE.NextInSEL = null;\n    oldE.PrevInSEL = null;\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n  {\n    var e = this.m_ActiveEdges;\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e = e.NextInAEL;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n  {\n    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n    return;\n    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n    return;\n    if (edge1.NextInSEL === edge2)\n    {\n      var next = edge2.NextInSEL;\n      if (next !== null)\n      next.PrevInSEL = edge1;\n      var prev = edge1.PrevInSEL;\n      if (prev !== null)\n      prev.NextInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      edge2.NextInSEL = edge1;\n      edge1.PrevInSEL = edge2;\n      edge1.NextInSEL = next;\n    } else\n    if (edge2.NextInSEL === edge1)\n    {\n      var next = edge1.NextInSEL;\n      if (next !== null)\n      next.PrevInSEL = edge2;\n      var prev = edge2.PrevInSEL;\n      if (prev !== null)\n      prev.NextInSEL = edge1;\n      edge1.PrevInSEL = prev;\n      edge1.NextInSEL = edge2;\n      edge2.PrevInSEL = edge1;\n      edge2.NextInSEL = next;\n    } else\n\n    {\n      var next = edge1.NextInSEL;\n      var prev = edge1.PrevInSEL;\n      edge1.NextInSEL = edge2.NextInSEL;\n      if (edge1.NextInSEL !== null)\n      edge1.NextInSEL.PrevInSEL = edge1;\n      edge1.PrevInSEL = edge2.PrevInSEL;\n      if (edge1.PrevInSEL !== null)\n      edge1.PrevInSEL.NextInSEL = edge1;\n      edge2.NextInSEL = next;\n      if (edge2.NextInSEL !== null)\n      edge2.NextInSEL.PrevInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      if (edge2.PrevInSEL !== null)\n      edge2.PrevInSEL.NextInSEL = edge2;\n    }\n    if (edge1.PrevInSEL === null)\n    this.m_SortedEdges = edge1;else\n    if (edge2.PrevInSEL === null)\n    this.m_SortedEdges = edge2;\n  };\n\n  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n  {\n    this.AddOutPt(e1, pt);\n    if (e2.WindDelta === 0) this.AddOutPt(e2, pt);\n    if (e1.OutIdx === e2.OutIdx)\n    {\n      e1.OutIdx = -1;\n      e2.OutIdx = -1;\n    } else\n    if (e1.OutIdx < e2.OutIdx)\n    this.AppendPolygon(e1, e2);else\n\n    this.AppendPolygon(e2, e1);\n  };\n\n  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n  {\n    var result;\n    var e, prevE;\n    if (ClipperLib.ClipperBase.IsHorizontal(e2) || e1.Dx > e2.Dx)\n    {\n      result = this.AddOutPt(e1, pt);\n      e2.OutIdx = e1.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esLeft;\n      e2.Side = ClipperLib.EdgeSide.esRight;\n      e = e1;\n      if (e.PrevInAEL === e2)\n      prevE = e2.PrevInAEL;else\n\n      prevE = e.PrevInAEL;\n    } else\n\n    {\n      result = this.AddOutPt(e2, pt);\n      e1.OutIdx = e2.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esRight;\n      e2.Side = ClipperLib.EdgeSide.esLeft;\n      e = e2;\n      if (e.PrevInAEL === e1)\n      prevE = e1.PrevInAEL;else\n\n      prevE = e.PrevInAEL;\n    }\n\n    if (prevE !== null && prevE.OutIdx >= 0 && prevE.Top.Y < pt.Y && e.Top.Y < pt.Y)\n    {\n      var xPrev = ClipperLib.Clipper.TopX(prevE, pt.Y);\n      var xE = ClipperLib.Clipper.TopX(e, pt.Y);\n      if (xPrev === xE && e.WindDelta !== 0 && prevE.WindDelta !== 0 && ClipperLib.ClipperBase.SlopesEqual5(new ClipperLib.FPoint2(xPrev, pt.Y), prevE.Top, new ClipperLib.FPoint2(xE, pt.Y), e.Top))\n      {\n        var outPt = this.AddOutPt(prevE, pt);\n        this.AddJoin(result, outPt, e.Top);\n      }\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n  {\n    if (e.OutIdx < 0)\n    {\n      var outRec = this.CreateOutRec();\n      outRec.IsOpen = e.WindDelta === 0;\n      var newOp = new ClipperLib.OutPt();\n      outRec.Pts = newOp;\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      if (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n      newOp.Next = newOp;\n      newOp.Prev = newOp;\n      if (!outRec.IsOpen)\n      this.SetHoleState(e, outRec);\n      e.OutIdx = outRec.Idx;\n      //nb: do this after SetZ !\n      return newOp;\n    } else\n\n    {\n      var outRec = this.m_PolyOuts[e.OutIdx];\n      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n      var op = outRec.Pts;\n      var ToFront = e.Side === ClipperLib.EdgeSide.esLeft;\n      if (ToFront && ClipperLib.FPoint.op_Equality(pt, op.Pt))\n      return op;else\n      if (!ToFront && ClipperLib.FPoint.op_Equality(pt, op.Prev.Pt))\n      return op.Prev;\n      var newOp = new ClipperLib.OutPt();\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      if (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n      newOp.Next = op;\n      newOp.Prev = op.Prev;\n      newOp.Prev.Next = newOp;\n      op.Prev = newOp;\n      if (ToFront)\n      outRec.Pts = newOp;\n      return newOp;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetLastOutPt = function (e)\n  {\n    var outRec = this.m_PolyOuts[e.OutIdx];\n    if (e.Side === ClipperLib.EdgeSide.esLeft)\n    {\n      return outRec.Pts;\n    } else\n\n    {\n      return outRec.Pts.Prev;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n  {\n    var tmp = new ClipperLib.FPoint1(pt1.Value);\n    //pt1.Value = pt2.Value;\n    pt1.Value.X = pt2.Value.X;\n    pt1.Value.Y = pt2.Value.Y;\n    if (ClipperLib.use_xyz) pt1.Value.Z = pt2.Value.Z;\n    //pt2.Value = tmp;\n    pt2.Value.X = tmp.X;\n    pt2.Value.Y = tmp.Y;\n    if (ClipperLib.use_xyz) pt2.Value.Z = tmp.Z;\n  };\n\n  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n  {\n    var tmp;\n    if (seg1a > seg1b)\n    {\n      tmp = seg1a;\n      seg1a = seg1b;\n      seg1b = tmp;\n    }\n    if (seg2a > seg2b)\n    {\n      tmp = seg2a;\n      seg2a = seg2b;\n      seg2b = tmp;\n    }\n    return seg1a < seg2b && seg2a < seg1b;\n  };\n\n  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n  {\n    var e2 = e.PrevInAEL;\n    var eTmp = null;\n    while (e2 !== null)\n    {\n      if (e2.OutIdx >= 0 && e2.WindDelta !== 0)\n      {\n        if (eTmp === null)\n        eTmp = e2;else\n        if (eTmp.OutIdx === e2.OutIdx)\n        eTmp = null; //paired\n      }\n      e2 = e2.PrevInAEL;\n    }\n\n    if (eTmp === null)\n    {\n      outRec.FirstLeft = null;\n      outRec.IsHole = false;\n    } else\n\n    {\n      outRec.FirstLeft = this.m_PolyOuts[eTmp.OutIdx];\n      outRec.IsHole = !outRec.FirstLeft.IsHole;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n  {\n    if (pt1.Y === pt2.Y)\n    return ClipperLib.ClipperBase.horizontal;else\n\n    return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n  };\n\n  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n  {\n    var p = btmPt1.Prev;\n    while (ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt) && p !== btmPt1)\n    p = p.Prev;\n    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt1.Next;\n    while (ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt) && p !== btmPt1)\n    p = p.Next;\n    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt2.Prev;\n    while (ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt) && p !== btmPt2)\n    p = p.Prev;\n    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    p = btmPt2.Next;\n    while (ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt) && p !== btmPt2)\n    p = p.Next;\n    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\n    if (Math.max(dx1p, dx1n) === Math.max(dx2p, dx2n) && Math.min(dx1p, dx1n) === Math.min(dx2p, dx2n))\n    {\n      return this.Area(btmPt1) > 0; //if otherwise identical use orientation\n    } else\n\n    {\n      return dx1p >= dx2p && dx1p >= dx2n || dx1n >= dx2p && dx1n >= dx2n;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n  {\n    var dups = null;\n    var p = pp.Next;\n    while (p !== pp)\n    {\n      if (p.Pt.Y > pp.Pt.Y)\n      {\n        pp = p;\n        dups = null;\n      } else\n      if (p.Pt.Y === pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n      {\n        if (p.Pt.X < pp.Pt.X)\n        {\n          dups = null;\n          pp = p;\n        } else\n\n        {\n          if (p.Next !== pp && p.Prev !== pp)\n          dups = p;\n        }\n      }\n      p = p.Next;\n    }\n    if (dups !== null)\n    {\n      //there appears to be at least 2 vertices at bottomPt so ...\n      while (dups !== p)\n      {\n        if (!this.FirstIsBottomPt(p, dups))\n        pp = dups;\n        dups = dups.Next;\n        while (ClipperLib.FPoint.op_Inequality(dups.Pt, pp.Pt))\n        dups = dups.Next;\n      }\n    }\n    return pp;\n  };\n\n  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n  {\n    //work out which polygon fragment has the correct hole state ...\n    if (outRec1.BottomPt === null)\n    outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n    if (outRec2.BottomPt === null)\n    outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n    var bPt1 = outRec1.BottomPt;\n    var bPt2 = outRec2.BottomPt;\n    if (bPt1.Pt.Y > bPt2.Pt.Y)\n    return outRec1;else\n    if (bPt1.Pt.Y < bPt2.Pt.Y)\n    return outRec2;else\n    if (bPt1.Pt.X < bPt2.Pt.X)\n    return outRec1;else\n    if (bPt1.Pt.X > bPt2.Pt.X)\n    return outRec2;else\n    if (bPt1.Next === bPt1)\n    return outRec2;else\n    if (bPt2.Next === bPt2)\n    return outRec1;else\n    if (this.FirstIsBottomPt(bPt1, bPt2))\n    return outRec1;else\n\n    return outRec2;\n  };\n\n  ClipperLib.Clipper.prototype.OutRec1RightOfOutRec2 = function (outRec1, outRec2)\n  {\n    do {\n      outRec1 = outRec1.FirstLeft;\n      if (outRec1 === outRec2)\n      return true;\n    } while (\n    outRec1 !== null);\n    return false;\n  };\n\n  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n  {\n    var outrec = this.m_PolyOuts[idx];\n    while (outrec !== this.m_PolyOuts[outrec.Idx])\n    outrec = this.m_PolyOuts[outrec.Idx];\n    return outrec;\n  };\n\n  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n  {\n    //get the start and ends of both output polygons ...\n    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n    var holeStateRec;\n    if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n    holeStateRec = outRec2;else\n    if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n    holeStateRec = outRec1;else\n\n    holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n    //get the start and ends of both output polygons and\n    //join E2 poly onto E1 poly and delete pointers to E2 ...\n\n    var p1_lft = outRec1.Pts;\n    var p1_rt = p1_lft.Prev;\n    var p2_lft = outRec2.Pts;\n    var p2_rt = p2_lft.Prev;\n    //join e2 poly onto e1 poly and delete pointers to e2 ...\n    if (e1.Side === ClipperLib.EdgeSide.esLeft)\n    {\n      if (e2.Side === ClipperLib.EdgeSide.esLeft)\n      {\n        //z y x a b c\n        this.ReversePolyPtLinks(p2_lft);\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        outRec1.Pts = p2_rt;\n      } else\n\n      {\n        //x y z a b c\n        p2_rt.Next = p1_lft;\n        p1_lft.Prev = p2_rt;\n        p2_lft.Prev = p1_rt;\n        p1_rt.Next = p2_lft;\n        outRec1.Pts = p2_lft;\n      }\n    } else\n\n    {\n      if (e2.Side === ClipperLib.EdgeSide.esRight)\n      {\n        //a b c z y x\n        this.ReversePolyPtLinks(p2_lft);\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n      } else\n\n      {\n        //a b c x y z\n        p1_rt.Next = p2_lft;\n        p2_lft.Prev = p1_rt;\n        p1_lft.Prev = p2_rt;\n        p2_rt.Next = p1_lft;\n      }\n    }\n    outRec1.BottomPt = null;\n    if (holeStateRec === outRec2)\n    {\n      if (outRec2.FirstLeft !== outRec1)\n      outRec1.FirstLeft = outRec2.FirstLeft;\n      outRec1.IsHole = outRec2.IsHole;\n    }\n    outRec2.Pts = null;\n    outRec2.BottomPt = null;\n    outRec2.FirstLeft = outRec1;\n    var OKIdx = e1.OutIdx;\n    var ObsoleteIdx = e2.OutIdx;\n    e1.OutIdx = -1;\n    //nb: safe because we only get here via AddLocalMaxPoly\n    e2.OutIdx = -1;\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (e.OutIdx === ObsoleteIdx)\n      {\n        e.OutIdx = OKIdx;\n        e.Side = e1.Side;\n        break;\n      }\n      e = e.NextInAEL;\n    }\n    outRec2.Idx = outRec1.Idx;\n  };\n\n  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n  {\n    if (pp === null)\n    return;\n    var pp1;\n    var pp2;\n    pp1 = pp;\n    do {\n      pp2 = pp1.Next;\n      pp1.Next = pp1.Prev;\n      pp1.Prev = pp2;\n      pp1 = pp2;\n    } while (\n    pp1 !== pp);\n  };\n\n  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n  {\n    var side = edge1.Side;\n    edge1.Side = edge2.Side;\n    edge2.Side = side;\n  };\n\n  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n  {\n    var outIdx = edge1.OutIdx;\n    edge1.OutIdx = edge2.OutIdx;\n    edge2.OutIdx = outIdx;\n  };\n\n  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n  {\n    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n    //e2 in AEL except when e1 is being inserted at the intersection point ...\n    var e1Contributing = e1.OutIdx >= 0;\n    var e2Contributing = e2.OutIdx >= 0;\n\n    if (ClipperLib.use_xyz)\n    this.SetZ(pt, e1, e2);\n\n    if (ClipperLib.use_lines)\n    {\n      //if either edge is on an OPEN path ...\n      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n      {\n        //ignore subject-subject open path intersections UNLESS they\n        //are both open paths, AND they are both 'contributing maximas' ...\n        if (e1.WindDelta === 0 && e2.WindDelta === 0) return;\n        //if intersecting a subj line with a subj poly ...\n        else if (e1.PolyTyp === e2.PolyTyp &&\n        e1.WindDelta !== e2.WindDelta && this.m_ClipType === ClipperLib.ClipType.ctUnion)\n        {\n          if (e1.WindDelta === 0)\n          {\n            if (e2Contributing)\n            {\n              this.AddOutPt(e1, pt);\n              if (e1Contributing)\n              e1.OutIdx = -1;\n            }\n          } else\n\n          {\n            if (e1Contributing)\n            {\n              this.AddOutPt(e2, pt);\n              if (e2Contributing)\n              e2.OutIdx = -1;\n            }\n          }\n        } else\n        if (e1.PolyTyp !== e2.PolyTyp)\n        {\n          if (e1.WindDelta === 0 && Math.abs(e2.WindCnt) === 1 && (\n          this.m_ClipType !== ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n          {\n            this.AddOutPt(e1, pt);\n            if (e1Contributing)\n            e1.OutIdx = -1;\n          } else\n          if (e2.WindDelta === 0 && Math.abs(e1.WindCnt) === 1 && (\n          this.m_ClipType !== ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n          {\n            this.AddOutPt(e2, pt);\n            if (e2Contributing)\n            e2.OutIdx = -1;\n          }\n        }\n        return;\n      }\n    }\n    //update winding counts...\n    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n    if (e1.PolyTyp === e2.PolyTyp)\n    {\n      if (this.IsEvenOddFillType(e1))\n      {\n        var oldE1WindCnt = e1.WindCnt;\n        e1.WindCnt = e2.WindCnt;\n        e2.WindCnt = oldE1WindCnt;\n      } else\n\n      {\n        if (e1.WindCnt + e2.WindDelta === 0)\n        e1.WindCnt = -e1.WindCnt;else\n\n        e1.WindCnt += e2.WindDelta;\n        if (e2.WindCnt - e1.WindDelta === 0)\n        e2.WindCnt = -e2.WindCnt;else\n\n        e2.WindCnt -= e1.WindDelta;\n      }\n    } else\n\n    {\n      if (!this.IsEvenOddFillType(e2))\n      e1.WindCnt2 += e2.WindDelta;else\n\n      e1.WindCnt2 = e1.WindCnt2 === 0 ? 1 : 0;\n      if (!this.IsEvenOddFillType(e1))\n      e2.WindCnt2 -= e1.WindDelta;else\n\n      e2.WindCnt2 = e2.WindCnt2 === 0 ? 1 : 0;\n    }\n    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n    if (e1.PolyTyp === ClipperLib.PolyType.ptSubject)\n    {\n      e1FillType = this.m_SubjFillType;\n      e1FillType2 = this.m_ClipFillType;\n    } else\n\n    {\n      e1FillType = this.m_ClipFillType;\n      e1FillType2 = this.m_SubjFillType;\n    }\n    if (e2.PolyTyp === ClipperLib.PolyType.ptSubject)\n    {\n      e2FillType = this.m_SubjFillType;\n      e2FillType2 = this.m_ClipFillType;\n    } else\n\n    {\n      e2FillType = this.m_ClipFillType;\n      e2FillType2 = this.m_SubjFillType;\n    }\n    var e1Wc, e2Wc;\n    switch (e1FillType) {\n\n      case ClipperLib.PolyFillType.pftPositive:\n        e1Wc = e1.WindCnt;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e1Wc = -e1.WindCnt;\n        break;\n      default:\n        e1Wc = Math.abs(e1.WindCnt);\n        break;\n    }\n    switch (e2FillType) {\n\n      case ClipperLib.PolyFillType.pftPositive:\n        e2Wc = e2.WindCnt;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e2Wc = -e2.WindCnt;\n        break;\n      default:\n        e2Wc = Math.abs(e2.WindCnt);\n        break;\n    }\n    if (e1Contributing && e2Contributing)\n    {\n      if (e1Wc !== 0 && e1Wc !== 1 || e2Wc !== 0 && e2Wc !== 1 ||\n      e1.PolyTyp !== e2.PolyTyp && this.m_ClipType !== ClipperLib.ClipType.ctXor)\n      {\n        this.AddLocalMaxPoly(e1, e2, pt);\n      } else\n\n      {\n        this.AddOutPt(e1, pt);\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    } else\n    if (e1Contributing)\n    {\n      if (e2Wc === 0 || e2Wc === 1)\n      {\n        this.AddOutPt(e1, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    } else\n    if (e2Contributing)\n    {\n      if (e1Wc === 0 || e1Wc === 1)\n      {\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    } else\n    if ((e1Wc === 0 || e1Wc === 1) && (e2Wc === 0 || e2Wc === 1))\n    {\n      //neither edge is currently contributing ...\n      var e1Wc2, e2Wc2;\n      switch (e1FillType2) {\n\n        case ClipperLib.PolyFillType.pftPositive:\n          e1Wc2 = e1.WindCnt2;\n          break;\n        case ClipperLib.PolyFillType.pftNegative:\n          e1Wc2 = -e1.WindCnt2;\n          break;\n        default:\n          e1Wc2 = Math.abs(e1.WindCnt2);\n          break;\n      }\n      switch (e2FillType2) {\n\n        case ClipperLib.PolyFillType.pftPositive:\n          e2Wc2 = e2.WindCnt2;\n          break;\n        case ClipperLib.PolyFillType.pftNegative:\n          e2Wc2 = -e2.WindCnt2;\n          break;\n        default:\n          e2Wc2 = Math.abs(e2.WindCnt2);\n          break;\n      }\n      if (e1.PolyTyp !== e2.PolyTyp)\n      {\n        this.AddLocalMinPoly(e1, e2, pt);\n      } else\n      if (e1Wc === 1 && e2Wc === 1)\n      switch (this.m_ClipType) {\n\n        case ClipperLib.ClipType.ctIntersection:\n          if (e1Wc2 > 0 && e2Wc2 > 0)\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctUnion:\n          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctDifference:\n          if (e1.PolyTyp === ClipperLib.PolyType.ptClip && e1Wc2 > 0 && e2Wc2 > 0 ||\n          e1.PolyTyp === ClipperLib.PolyType.ptSubject && e1Wc2 <= 0 && e2Wc2 <= 0)\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctXor:\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n      } else\n\n      ClipperLib.Clipper.SwapSides(e1, e2);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n  {\n    var SelPrev = e.PrevInSEL;\n    var SelNext = e.NextInSEL;\n    if (SelPrev === null && SelNext === null && e !== this.m_SortedEdges)\n    return;\n    //already deleted\n    if (SelPrev !== null)\n    SelPrev.NextInSEL = SelNext;else\n\n    this.m_SortedEdges = SelNext;\n    if (SelNext !== null)\n    SelNext.PrevInSEL = SelPrev;\n    e.NextInSEL = null;\n    e.PrevInSEL = null;\n  };\n\n  ClipperLib.Clipper.prototype.ProcessHorizontals = function ()\n  {\n    var horzEdge = {}; //m_SortedEdges;\n    while (this.PopEdgeFromSEL(horzEdge))\n    {\n      this.ProcessHorizontal(horzEdge.v);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n  {\n    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n    {\n      $var.Left = HorzEdge.Bot.X;\n      $var.Right = HorzEdge.Top.X;\n      $var.Dir = ClipperLib.Direction.dLeftToRight;\n    } else\n\n    {\n      $var.Left = HorzEdge.Top.X;\n      $var.Right = HorzEdge.Bot.X;\n      $var.Dir = ClipperLib.Direction.dRightToLeft;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge)\n  {\n    var $var = {\n      Dir: null,\n      Left: null,\n      Right: null\n    };\n\n    this.GetHorzDirection(horzEdge, $var);\n    var dir = $var.Dir;\n    var horzLeft = $var.Left;\n    var horzRight = $var.Right;\n\n    var IsOpen = horzEdge.WindDelta === 0;\n\n    var eLastHorz = horzEdge,\n      eMaxPair = null;\n    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n    eLastHorz = eLastHorz.NextInLML;\n    if (eLastHorz.NextInLML === null)\n    eMaxPair = this.GetMaximaPair(eLastHorz);\n\n    var currMax = this.m_Maxima;\n    if (currMax !== null)\n    {\n      //get the first maxima in range (X) ...\n      if (dir === ClipperLib.Direction.dLeftToRight)\n      {\n        while (currMax !== null && currMax.X <= horzEdge.Bot.X)\n        {\n          currMax = currMax.Next;\n        }\n        if (currMax !== null && currMax.X >= eLastHorz.Top.X)\n        {\n          currMax = null;\n        }\n      } else\n\n      {\n        while (currMax.Next !== null && currMax.Next.X < horzEdge.Bot.X)\n        {\n          currMax = currMax.Next;\n        }\n        if (currMax.X <= eLastHorz.Top.X)\n        {\n          currMax = null;\n        }\n      }\n    }\n    var op1 = null;\n    for (;;) //loop through consec. horizontal edges\n    {\n      var IsLastHorz = horzEdge === eLastHorz;\n      var e = this.GetNextInAEL(horzEdge, dir);\n      while (e !== null)\n      {\n        //this code block inserts extra coords into horizontal edges (in output\n        //polygons) whereever maxima touch these horizontal edges. This helps\n        //'simplifying' polygons (ie if the Simplify property is set).\n        if (currMax !== null)\n        {\n          if (dir === ClipperLib.Direction.dLeftToRight)\n          {\n            while (currMax !== null && currMax.X < e.Curr.X)\n            {\n              if (horzEdge.OutIdx >= 0 && !IsOpen)\n              {\n                this.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax.X, horzEdge.Bot.Y));\n              }\n              currMax = currMax.Next;\n            }\n          } else\n\n          {\n            while (currMax !== null && currMax.X > e.Curr.X)\n            {\n              if (horzEdge.OutIdx >= 0 && !IsOpen)\n              {\n                this.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax.X, horzEdge.Bot.Y));\n              }\n              currMax = currMax.Prev;\n            }\n          }\n        }\n\n        if (dir === ClipperLib.Direction.dLeftToRight && e.Curr.X > horzRight || dir === ClipperLib.Direction.dRightToLeft && e.Curr.X < horzLeft)\n        {\n          break;\n        }\n\n        //Also break if we've got to the end of an intermediate horizontal edge ...\n        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n        if (e.Curr.X === horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n        break;\n\n        if (horzEdge.OutIdx >= 0 && !IsOpen) //note: may be done multiple times\n          {\n            if (ClipperLib.use_xyz)\n            {\n              if (dir === ClipperLib.Direction.dLeftToRight)\n              this.SetZ(e.Curr, horzEdge, e);else\n              this.SetZ(e.Curr, e, horzEdge);\n            }\n\n            op1 = this.AddOutPt(horzEdge, e.Curr);\n            var eNextHorz = this.m_SortedEdges;\n            while (eNextHorz !== null)\n            {\n              if (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n              {\n                var op2 = this.GetLastOutPt(eNextHorz);\n                this.AddJoin(op2, op1, eNextHorz.Top);\n              }\n              eNextHorz = eNextHorz.NextInSEL;\n            }\n            this.AddGhostJoin(op1, horzEdge.Bot);\n          }\n\n        //OK, so far we're still in range of the horizontal Edge  but make sure\n        //we're at the last of consec. horizontals when matching with eMaxPair\n        if (e === eMaxPair && IsLastHorz)\n        {\n          if (horzEdge.OutIdx >= 0)\n          {\n            this.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n          }\n          this.DeleteFromAEL(horzEdge);\n          this.DeleteFromAEL(eMaxPair);\n          return;\n        }\n\n        if (dir === ClipperLib.Direction.dLeftToRight)\n        {\n          var Pt = new ClipperLib.FPoint2(e.Curr.X, horzEdge.Curr.Y);\n          this.IntersectEdges(horzEdge, e, Pt);\n        } else\n\n        {\n          var Pt = new ClipperLib.FPoint2(e.Curr.X, horzEdge.Curr.Y);\n          this.IntersectEdges(e, horzEdge, Pt);\n        }\n        var eNext = this.GetNextInAEL(e, dir);\n        this.SwapPositionsInAEL(horzEdge, e);\n        e = eNext;\n      } //end while(e !== null)\n\n      //Break out of loop if HorzEdge.NextInLML is not also horizontal ...\n      if (horzEdge.NextInLML === null || !ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n      {\n        break;\n      }\n\n      horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n      if (horzEdge.OutIdx >= 0)\n      {\n        this.AddOutPt(horzEdge, horzEdge.Bot);\n      }\n\n      $var = {\n        Dir: dir,\n        Left: horzLeft,\n        Right: horzRight\n      };\n\n      this.GetHorzDirection(horzEdge, $var);\n      dir = $var.Dir;\n      horzLeft = $var.Left;\n      horzRight = $var.Right;\n\n    } //end for (;;)\n\n    if (horzEdge.OutIdx >= 0 && op1 === null)\n    {\n      op1 = this.GetLastOutPt(horzEdge);\n      var eNextHorz = this.m_SortedEdges;\n      while (eNextHorz !== null)\n      {\n        if (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n        {\n          var op2 = this.GetLastOutPt(eNextHorz);\n          this.AddJoin(op2, op1, eNextHorz.Top);\n        }\n        eNextHorz = eNextHorz.NextInSEL;\n      }\n      this.AddGhostJoin(op1, horzEdge.Top);\n    }\n\n    if (horzEdge.NextInLML !== null)\n    {\n      if (horzEdge.OutIdx >= 0)\n      {\n        op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.WindDelta === 0)\n        {\n          return;\n        }\n        //nb: HorzEdge is no longer horizontal here\n        var ePrev = horzEdge.PrevInAEL;\n        var eNext = horzEdge.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X === horzEdge.Bot.X && ePrev.Curr.Y === horzEdge.Bot.Y && ePrev.WindDelta === 0 && ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, ePrev))\n        {\n          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        } else\n        if (eNext !== null && eNext.Curr.X === horzEdge.Bot.X && eNext.Curr.Y === horzEdge.Bot.Y && eNext.WindDelta !== 0 && eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, eNext))\n        {\n          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n      } else\n\n      {\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n      }\n    } else\n\n    {\n      if (horzEdge.OutIdx >= 0)\n      {\n        this.AddOutPt(horzEdge, horzEdge.Top);\n      }\n      this.DeleteFromAEL(horzEdge);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n  {\n    return Direction === ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n  };\n\n  ClipperLib.Clipper.prototype.IsMinima = function (e)\n  {\n    return e !== null && e.Prev.NextInLML !== e && e.Next.NextInLML !== e;\n  };\n\n  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n  {\n    return e !== null && e.Top.Y === Y && e.NextInLML === null;\n  };\n\n  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n  {\n    return e.Top.Y === Y && e.NextInLML !== null;\n  };\n\n  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n  {\n    if (ClipperLib.FPoint.op_Equality(e.Next.Top, e.Top) && e.Next.NextInLML === null)\n    {\n      return e.Next;\n    } else\n\n    {\n      if (ClipperLib.FPoint.op_Equality(e.Prev.Top, e.Top) && e.Prev.NextInLML === null)\n      {\n        return e.Prev;\n      } else\n\n      {\n        return null;\n      }\n    }\n  };\n\n  ClipperLib.Clipper.prototype.GetMaximaPairEx = function (e)\n  {\n    //as above but returns null if MaxPair isn't in AEL (unless it's horizontal)\n    var result = this.GetMaximaPair(e);\n    if (result === null || result.OutIdx === ClipperLib.ClipperBase.Skip ||\n    result.NextInAEL === result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))\n    {\n      return null;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n  {\n    if (this.m_ActiveEdges === null)\n    return true;\n    try\n    {\n      this.BuildIntersectList(topY);\n      if (this.m_IntersectList.length === 0)\n      return true;\n      if (this.m_IntersectList.length === 1 || this.FixupIntersectionOrder())\n      this.ProcessIntersectList();else\n\n      return false;\n    }\n    catch ($$e2)\n    {\n      this.m_SortedEdges = null;\n      this.m_IntersectList.length = 0;\n      ClipperLib.Error(\"ProcessIntersections error\");\n    }\n    this.m_SortedEdges = null;\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n  {\n    if (this.m_ActiveEdges === null)\n    return;\n    //prepare for sorting ...\n    var e = this.m_ActiveEdges;\n    //console.log(JSON.stringify(JSON.decycle( e )));\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n      e = e.NextInAEL;\n    }\n    //bubblesort ...\n    var isModified = true;\n    while (isModified && this.m_SortedEdges !== null)\n    {\n      isModified = false;\n      e = this.m_SortedEdges;\n      while (e.NextInSEL !== null)\n      {\n        var eNext = e.NextInSEL;\n        var pt = new ClipperLib.FPoint0();\n        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n        if (e.Curr.X > eNext.Curr.X)\n        {\n          this.IntersectPoint(e, eNext, pt);\n          if (pt.Y < topY)\n          {\n            pt = new ClipperLib.FPoint2(ClipperLib.Clipper.TopX(e, topY), topY);\n          }\n          var newNode = new ClipperLib.IntersectNode();\n          newNode.Edge1 = e;\n          newNode.Edge2 = eNext;\n          //newNode.Pt = pt;\n          newNode.Pt.X = pt.X;\n          newNode.Pt.Y = pt.Y;\n          if (ClipperLib.use_xyz) newNode.Pt.Z = pt.Z;\n          this.m_IntersectList.push(newNode);\n          this.SwapPositionsInSEL(e, eNext);\n          isModified = true;\n        } else\n\n        e = eNext;\n      }\n      if (e.PrevInSEL !== null)\n      e.PrevInSEL.NextInSEL = null;else\n\n      break;\n    }\n    this.m_SortedEdges = null;\n  };\n\n  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n  {\n    return inode.Edge1.NextInSEL === inode.Edge2 || inode.Edge1.PrevInSEL === inode.Edge2;\n  };\n\n  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n  {\n    //the following typecast is safe because the differences in Pt.Y will\n    //be limited to the height of the scanbeam.\n    return node2.Pt.Y - node1.Pt.Y;\n  };\n\n  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n  {\n    //pre-condition: intersections are sorted bottom-most first.\n    //Now it's crucial that intersections are made only between adjacent edges,\n    //so to ensure this the order of intersections may need adjusting ...\n    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n    this.CopyAELToSEL();\n    var cnt = this.m_IntersectList.length;\n    for (var i = 0; i < cnt; i++)\n    {\n      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n      {\n        var j = i + 1;\n        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n        j++;\n        if (j === cnt)\n        return false;\n        var tmp = this.m_IntersectList[i];\n        this.m_IntersectList[i] = this.m_IntersectList[j];\n        this.m_IntersectList[j] = tmp;\n      }\n      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n    }\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n  {\n    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n    {\n      var iNode = this.m_IntersectList[i];\n      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n    }\n    this.m_IntersectList.length = 0;\n  };\n\n  ClipperLib.Clipper.TopX = function (edge, currentY)\n  {\n    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n    if (currentY === edge.Top.Y)\n    return edge.Top.X;\n    return edge.Bot.X + edge.Dx * (currentY - edge.Bot.Y);\n  };\n\n  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n  {\n    ip.X = 0;\n    ip.Y = 0;\n    var b1, b2;\n    //nb: with very large coordinate values, it's possible for SlopesEqual() to\n    //return false but for the edge.Dx value be equal due to double precision rounding.\n    if (edge1.Dx === edge2.Dx)\n    {\n      ip.Y = edge1.Curr.Y;\n      ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n      return;\n    }\n    if (edge1.Delta.X === 0)\n    {\n      ip.X = edge1.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n      {\n        ip.Y = edge2.Bot.Y;\n      } else\n\n      {\n        b2 = edge2.Bot.Y - edge2.Bot.X / edge2.Dx;\n        ip.Y = ip.X / edge2.Dx + b2;\n      }\n    } else\n    if (edge2.Delta.X === 0)\n    {\n      ip.X = edge2.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n      {\n        ip.Y = edge1.Bot.Y;\n      } else\n\n      {\n        b1 = edge1.Bot.Y - edge1.Bot.X / edge1.Dx;\n        ip.Y = ip.X / edge1.Dx + b1;\n      }\n    } else\n\n    {\n      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n      ip.Y = q;\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n      ip.X = edge1.Dx * q + b1;else\n\n      ip.X = edge2.Dx * q + b2;\n    }\n    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n    {\n      if (edge1.Top.Y > edge2.Top.Y)\n      {\n        ip.Y = edge1.Top.Y;\n        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n        return ip.X < edge1.Top.X;\n      } else\n\n      ip.Y = edge2.Top.Y;\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n      ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);else\n\n      ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n    }\n    //finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n    if (ip.Y > edge1.Curr.Y)\n    {\n      ip.Y = edge1.Curr.Y;\n      //better to use the more vertical edge to derive X ...\n      if (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n      ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);else\n\n      ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n  {\n    var e = this.m_ActiveEdges;\n\n    while (e !== null)\n    {\n      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n      var IsMaximaEdge = this.IsMaxima(e, topY);\n      if (IsMaximaEdge)\n      {\n        var eMaxPair = this.GetMaximaPairEx(e);\n        IsMaximaEdge = eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair);\n      }\n      if (IsMaximaEdge)\n      {\n        if (this.StrictlySimple)\n        {\n          this.InsertMaxima(e.Top.X);\n        }\n        var ePrev = e.PrevInAEL;\n        this.DoMaxima(e);\n        if (ePrev === null)\n        e = this.m_ActiveEdges;else\n\n        e = ePrev.NextInAEL;\n      } else\n\n      {\n        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n        {\n          e = this.UpdateEdgeIntoAEL(e);\n          if (e.OutIdx >= 0)\n          this.AddOutPt(e, e.Bot);\n          this.AddEdgeToSEL(e);\n        } else\n\n        {\n          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n          e.Curr.Y = topY;\n        }\n\n        if (ClipperLib.use_xyz)\n        {\n          if (e.Top.Y === topY) e.Curr.Z = e.Top.Z;else\n          if (e.Bot.Y === topY) e.Curr.Z = e.Bot.Z;else\n          e.Curr.Z = 0;\n        }\n\n        //When StrictlySimple and 'e' is being touched by another edge, then\n        //make sure both edges have a vertex here ...\n        if (this.StrictlySimple)\n        {\n          var ePrev = e.PrevInAEL;\n          if (e.OutIdx >= 0 && e.WindDelta !== 0 && ePrev !== null &&\n          ePrev.OutIdx >= 0 && ePrev.Curr.X === e.Curr.X &&\n          ePrev.WindDelta !== 0)\n          {\n            var ip = new ClipperLib.FPoint1(e.Curr);\n\n            if (ClipperLib.use_xyz)\n            {\n              this.SetZ(ip, ePrev, e);\n            }\n\n            var op = this.AddOutPt(ePrev, ip);\n            var op2 = this.AddOutPt(e, ip);\n            this.AddJoin(op, op2, ip); //StrictlySimple (type-3) join\n          }\n        }\n        e = e.NextInAEL;\n      }\n    }\n    //3. Process horizontals at the Top of the scanbeam ...\n    this.ProcessHorizontals();\n    this.m_Maxima = null;\n    //4. Promote intermediate vertices ...\n    e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (this.IsIntermediate(e, topY))\n      {\n        var op = null;\n        if (e.OutIdx >= 0)\n        op = this.AddOutPt(e, e.Top);\n        e = this.UpdateEdgeIntoAEL(e);\n        //if output polygons share an edge, they'll need joining later ...\n        var ePrev = e.PrevInAEL;\n        var eNext = e.NextInAEL;\n\n        if (ePrev !== null && ePrev.Curr.X === e.Bot.X && ePrev.Curr.Y === e.Bot.Y && op !== null && ePrev.OutIdx >= 0 && ePrev.Curr.Y === ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, ePrev.Curr, ePrev.Top) && e.WindDelta !== 0 && ePrev.WindDelta !== 0)\n        {\n          var op2 = this.AddOutPt(ePrev2, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        } else\n        if (eNext !== null && eNext.Curr.X === e.Bot.X && eNext.Curr.Y === e.Bot.Y && op !== null && eNext.OutIdx >= 0 && eNext.Curr.Y === eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, eNext.Curr, eNext.Top) && e.WindDelta !== 0 && eNext.WindDelta !== 0)\n        {\n          var op2 = this.AddOutPt(eNext, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n      }\n      e = e.NextInAEL;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n  {\n    var eMaxPair = this.GetMaximaPairEx(e);\n    if (eMaxPair === null)\n    {\n      if (e.OutIdx >= 0)\n      this.AddOutPt(e, e.Top);\n      this.DeleteFromAEL(e);\n      return;\n    }\n    var eNext = e.NextInAEL;\n    while (eNext !== null && eNext !== eMaxPair)\n    {\n      this.IntersectEdges(e, eNext, e.Top);\n      this.SwapPositionsInAEL(e, eNext);\n      eNext = e.NextInAEL;\n    }\n    if (e.OutIdx === -1 && eMaxPair.OutIdx === -1)\n    {\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    } else\n    if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n    {\n      if (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    } else\n    if (ClipperLib.use_lines && e.WindDelta === 0)\n    {\n      if (e.OutIdx >= 0)\n      {\n        this.AddOutPt(e, e.Top);\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      this.DeleteFromAEL(e);\n      if (eMaxPair.OutIdx >= 0)\n      {\n        this.AddOutPt(eMaxPair, e.Top);\n        eMaxPair.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      this.DeleteFromAEL(eMaxPair);\n    } else\n\n    ClipperLib.Error(\"DoMaxima error\");\n  };\n\n  ClipperLib.Clipper.ReversePaths = function (polys)\n  {\n    for (var i = 0, len = polys.length; i < len; i++)\n    polys[i].reverse();\n  };\n\n  ClipperLib.Clipper.Orientation = function (poly)\n  {\n    return ClipperLib.Clipper.Area(poly) >= 0;\n  };\n\n  ClipperLib.Clipper.prototype.PointCount = function (pts)\n  {\n    if (pts === null)\n    return 0;\n    var result = 0;\n    var p = pts;\n    do {\n      result++;\n      p = p.Next;\n    } while (\n    p !== pts);\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n  {\n    ClipperLib.Clear(polyg);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null)\n      continue;\n      var p = outRec.Pts.Prev;\n      var cnt = this.PointCount(p);\n      if (cnt < 2)\n      continue;\n      var pg = new Array(cnt);\n      for (var j = 0; j < cnt; j++)\n      {\n        pg[j] = p.Pt;\n        p = p.Prev;\n      }\n      polyg.push(pg);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n  {\n    polytree.Clear();\n    //add each output polygon/contour to polytree ...\n    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      var cnt = this.PointCount(outRec.Pts);\n      if (outRec.IsOpen && cnt < 2 || !outRec.IsOpen && cnt < 3)\n      continue;\n      this.FixHoleLinkage(outRec);\n      var pn = new ClipperLib.PolyNode();\n      polytree.m_AllPolys.push(pn);\n      outRec.PolyNode = pn;\n      pn.m_polygon.length = cnt;\n      var op = outRec.Pts.Prev;\n      for (var j = 0; j < cnt; j++)\n      {\n        pn.m_polygon[j] = op.Pt;\n        op = op.Prev;\n      }\n    }\n    //fixup PolyNode links etc ...\n    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.PolyNode === null)\n      continue;else\n      if (outRec.IsOpen)\n      {\n        outRec.PolyNode.IsOpen = true;\n        polytree.AddChild(outRec.PolyNode);\n      } else\n      if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode !== null)\n      outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);else\n\n      polytree.AddChild(outRec.PolyNode);\n    }\n  };\n\n  ClipperLib.Clipper.prototype.FixupOutPolyline = function (outRec)\n  {\n    var pp = outRec.Pts;\n    var lastPP = pp.Prev;\n    while (pp !== lastPP)\n    {\n      pp = pp.Next;\n      if (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt))\n      {\n        if (pp === lastPP)\n        {\n          lastPP = pp.Prev;\n        }\n        var tmpPP = pp.Prev;\n        tmpPP.Next = pp.Next;\n        pp.Next.Prev = tmpPP;\n        pp = tmpPP;\n      }\n    }\n    if (pp === pp.Prev)\n    {\n      outRec.Pts = null;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n  {\n    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n    //parallel edges by removing the middle vertex.\n    var lastOK = null;\n    outRec.BottomPt = null;\n    var pp = outRec.Pts;\n    var preserveCol = this.PreserveCollinear || this.StrictlySimple;\n    for (;;)\n    {\n      if (pp.Prev === pp || pp.Prev === pp.Next)\n      {\n        outRec.Pts = null;\n        return;\n      }\n\n      //test for duplicate points and collinear edges ...\n      if (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Next.Pt) || ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt) || ClipperLib.ClipperBase.SlopesEqual4(pp.Prev.Pt, pp.Pt, pp.Next.Pt) && (!preserveCol || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt)))\n      {\n        lastOK = null;\n        pp.Prev.Next = pp.Next;\n        pp.Next.Prev = pp.Prev;\n        pp = pp.Prev;\n      } else\n      if (pp === lastOK)\n      break;else\n\n      {\n        if (lastOK === null)\n        lastOK = pp;\n        pp = pp.Next;\n      }\n    }\n    outRec.Pts = pp;\n  };\n\n  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n  {\n    var result = new ClipperLib.OutPt();\n    //result.Pt = outPt.Pt;\n    result.Pt.X = outPt.Pt.X;\n    result.Pt.Y = outPt.Pt.Y;\n    if (ClipperLib.use_xyz) result.Pt.Z = outPt.Pt.Z;\n    result.Idx = outPt.Idx;\n    if (InsertAfter)\n    {\n      result.Next = outPt.Next;\n      result.Prev = outPt;\n      outPt.Next.Prev = result;\n      outPt.Next = result;\n    } else\n\n    {\n      result.Prev = outPt.Prev;\n      result.Next = outPt;\n      outPt.Prev.Next = result;\n      outPt.Prev = result;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n  {\n    if (a1 < a2)\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a1, b1);\n        $val.Right = Math.min(a2, b2);\n      } else\n\n      {\n        $val.Left = Math.max(a1, b2);\n        $val.Right = Math.min(a2, b1);\n      }\n    } else\n\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a2, b1);\n        $val.Right = Math.min(a1, b2);\n      } else\n\n      {\n        $val.Left = Math.max(a2, b2);\n        $val.Right = Math.min(a1, b1);\n      }\n    }\n    return $val.Left < $val.Right;\n  };\n\n  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n  {\n    var Dir1 = op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight;\n    var Dir2 = op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight;\n    if (Dir1 === Dir2)\n    return false;\n    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n    //So, to facilitate this while inserting Op1b and Op2b ...\n    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n    if (Dir1 === ClipperLib.Direction.dLeftToRight)\n    {\n      while (op1.Next.Pt.X <= Pt.X &&\n      op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n      op1 = op1.Next;\n      if (DiscardLeft && op1.Pt.X !== Pt.X)\n      op1 = op1.Next;\n      op1b = this.DupOutPt(op1, !DiscardLeft);\n      if (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        if (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n        op1b = this.DupOutPt(op1, !DiscardLeft);\n      }\n    } else\n\n    {\n      while (op1.Next.Pt.X >= Pt.X &&\n      op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n      op1 = op1.Next;\n      if (!DiscardLeft && op1.Pt.X !== Pt.X)\n      op1 = op1.Next;\n      op1b = this.DupOutPt(op1, DiscardLeft);\n      if (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        if (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n        op1b = this.DupOutPt(op1, DiscardLeft);\n      }\n    }\n    if (Dir2 === ClipperLib.Direction.dLeftToRight)\n    {\n      while (op2.Next.Pt.X <= Pt.X &&\n      op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n      op2 = op2.Next;\n      if (DiscardLeft && op2.Pt.X !== Pt.X)\n      op2 = op2.Next;\n      op2b = this.DupOutPt(op2, !DiscardLeft);\n      if (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        if (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n        op2b = this.DupOutPt(op2, !DiscardLeft);\n      }\n    } else\n\n    {\n      while (op2.Next.Pt.X >= Pt.X &&\n      op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n      op2 = op2.Next;\n      if (!DiscardLeft && op2.Pt.X !== Pt.X)\n      op2 = op2.Next;\n      op2b = this.DupOutPt(op2, DiscardLeft);\n      if (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        if (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n        op2b = this.DupOutPt(op2, DiscardLeft);\n      }\n    }\n    if (Dir1 === ClipperLib.Direction.dLeftToRight === DiscardLeft)\n    {\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n    } else\n\n    {\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n    }\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n  {\n    var op1 = j.OutPt1,\n      op1b = new ClipperLib.OutPt();\n    var op2 = j.OutPt2,\n      op2b = new ClipperLib.OutPt();\n    //There are 3 kinds of joins for output polygons ...\n    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are vertices anywhere\n    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n    //3. StrictlySimple joins where edges touch but are not collinear and where\n    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n    var isHorizontal = j.OutPt1.Pt.Y === j.OffPt.Y;\n    if (isHorizontal && ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt1.Pt) && ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt2.Pt))\n    {\n      //Strictly Simple join ...\n      if (outRec1 !== outRec2) return false;\n\n      op1b = j.OutPt1.Next;\n      while (op1b !== op1 && ClipperLib.FPoint.op_Equality(op1b.Pt, j.OffPt))\n      op1b = op1b.Next;\n      var reverse1 = op1b.Pt.Y > j.OffPt.Y;\n      op2b = j.OutPt2.Next;\n      while (op2b !== op2 && ClipperLib.FPoint.op_Equality(op2b.Pt, j.OffPt))\n      op2b = op2b.Next;\n      var reverse2 = op2b.Pt.Y > j.OffPt.Y;\n      if (reverse1 === reverse2)\n      return false;\n      if (reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      } else\n\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    } else\n    if (isHorizontal)\n    {\n      //treat horizontal joins differently to non-horizontal joins since with\n      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n      //may be anywhere along the horizontal edge.\n      op1b = op1;\n      while (op1.Prev.Pt.Y === op1.Pt.Y && op1.Prev !== op1b && op1.Prev !== op2)\n      op1 = op1.Prev;\n      while (op1b.Next.Pt.Y === op1b.Pt.Y && op1b.Next !== op1 && op1b.Next !== op2)\n      op1b = op1b.Next;\n      if (op1b.Next === op1 || op1b.Next === op2)\n      return false;\n      //a flat 'polygon'\n      op2b = op2;\n      while (op2.Prev.Pt.Y === op2.Pt.Y && op2.Prev !== op2b && op2.Prev !== op1b)\n      op2 = op2.Prev;\n      while (op2b.Next.Pt.Y === op2b.Pt.Y && op2b.Next !== op2 && op2b.Next !== op1)\n      op2b = op2b.Next;\n      if (op2b.Next === op2 || op2b.Next === op1)\n      return false;\n      //a flat 'polygon'\n      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n      var $val = {\n        Left: null,\n        Right: null\n      };\n\n      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n      return false;\n      var Left = $val.Left;\n      var Right = $val.Right;\n\n      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n      //on the discard Side as either may still be needed for other joins ...\n      var Pt = new ClipperLib.FPoint0();\n      var DiscardLeftSide;\n      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n      {\n        //Pt = op1.Pt;\n        Pt.X = op1.Pt.X;\n        Pt.Y = op1.Pt.Y;\n        if (ClipperLib.use_xyz) Pt.Z = op1.Pt.Z;\n        DiscardLeftSide = op1.Pt.X > op1b.Pt.X;\n      } else\n      if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n      {\n        //Pt = op2.Pt;\n        Pt.X = op2.Pt.X;\n        Pt.Y = op2.Pt.Y;\n        if (ClipperLib.use_xyz) Pt.Z = op2.Pt.Z;\n        DiscardLeftSide = op2.Pt.X > op2b.Pt.X;\n      } else\n      if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n      {\n        //Pt = op1b.Pt;\n        Pt.X = op1b.Pt.X;\n        Pt.Y = op1b.Pt.Y;\n        if (ClipperLib.use_xyz) Pt.Z = op1b.Pt.Z;\n        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n      } else\n\n      {\n        //Pt = op2b.Pt;\n        Pt.X = op2b.Pt.X;\n        Pt.Y = op2b.Pt.Y;\n        if (ClipperLib.use_xyz) Pt.Z = op2b.Pt.Z;\n        DiscardLeftSide = op2b.Pt.X > op2.Pt.X;\n      }\n      j.OutPt1 = op1;\n      j.OutPt2 = op2;\n      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n    } else\n\n    {\n      //nb: For non-horizontal joins ...\n      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n      //make sure the polygons are correctly oriented ...\n      op1b = op1.Next;\n      while (ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt) && op1b !== op1)\n      op1b = op1b.Next;\n      var Reverse1 = op1b.Pt.Y > op1.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt);\n      if (Reverse1)\n      {\n        op1b = op1.Prev;\n        while (ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt) && op1b !== op1)\n        op1b = op1b.Prev;\n\n        if (op1b.Pt.Y > op1.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt))\n        return false;\n      }\n      op2b = op2.Next;\n      while (ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt) && op2b !== op2)\n      op2b = op2b.Next;\n\n      var Reverse2 = op2b.Pt.Y > op2.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt);\n      if (Reverse2)\n      {\n        op2b = op2.Prev;\n        while (ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt) && op2b !== op2)\n        op2b = op2b.Prev;\n\n        if (op2b.Pt.Y > op2.Pt.Y || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt))\n        return false;\n      }\n      if (op1b === op1 || op2b === op2 || op1b === op2b ||\n      outRec1 === outRec2 && Reverse1 === Reverse2)\n      return false;\n      if (Reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      } else\n\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n  };\n\n  ClipperLib.Clipper.GetBounds = function (paths)\n  {\n    var i = 0,\n      cnt = paths.length;\n    while (i < cnt && paths[i].length === 0) i++;\n    if (i === cnt) return new ClipperLib.FRect(0, 0, 0, 0);\n    var result = new ClipperLib.FRect();\n    result.left = paths[i][0].X;\n    result.right = result.left;\n    result.top = paths[i][0].Y;\n    result.bottom = result.top;\n    for (; i < cnt; i++)\n    for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n    {\n      if (paths[i][j].X < result.left) result.left = paths[i][j].X;else\n      if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n      if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;else\n      if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n  {\n    var opStart = ops;\n    var result = new ClipperLib.FRect();\n    result.left = ops.Pt.X;\n    result.right = ops.Pt.X;\n    result.top = ops.Pt.Y;\n    result.bottom = ops.Pt.Y;\n    ops = ops.Next;\n    while (ops !== opStart)\n    {\n      if (ops.Pt.X < result.left)\n      result.left = ops.Pt.X;\n      if (ops.Pt.X > result.right)\n      result.right = ops.Pt.X;\n      if (ops.Pt.Y < result.top)\n      result.top = ops.Pt.Y;\n      if (ops.Pt.Y > result.bottom)\n      result.bottom = ops.Pt.Y;\n      ops = ops.Next;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n    //See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0,\n      cnt = path.length;\n    if (cnt < 3)\n    return 0;\n    var ip = path[0];\n    for (var i = 1; i <= cnt; ++i)\n    {\n      var ipNext = i === cnt ? path[0] : path[i];\n      if (ipNext.Y === pt.Y)\n      {\n        if (ipNext.X === pt.X || ip.Y === pt.Y && ipNext.X > pt.X === ip.X < pt.X)\n        return -1;\n      }\n      if (ip.Y < pt.Y !== ipNext.Y < pt.Y)\n      {\n        if (ip.X >= pt.X)\n        {\n          if (ipNext.X > pt.X)\n          result = 1 - result;else\n\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d === 0)\n            return -1;else\n            if (d > 0 === ipNext.Y > ip.Y)\n            result = 1 - result;\n          }\n        } else\n\n        {\n          if (ipNext.X > pt.X)\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d === 0)\n            return -1;else\n            if (d > 0 === ipNext.Y > ip.Y)\n            result = 1 - result;\n          }\n        }\n      }\n      ip = ipNext;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n    var result = 0;\n    var startOp = op;\n    var ptx = pt.X,\n      pty = pt.Y;\n    var poly0x = op.Pt.X,\n      poly0y = op.Pt.Y;\n    do {\n      op = op.Next;\n      var poly1x = op.Pt.X,\n        poly1y = op.Pt.Y;\n      if (poly1y === pty)\n      {\n        if (poly1x === ptx || poly0y === pty && poly1x > ptx === poly0x < ptx)\n        return -1;\n      }\n      if (poly0y < pty !== poly1y < pty)\n      {\n        if (poly0x >= ptx)\n        {\n          if (poly1x > ptx)\n          result = 1 - result;else\n\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d === 0)\n            return -1;\n            if (d > 0 === poly1y > poly0y)\n            result = 1 - result;\n          }\n        } else\n\n        {\n          if (poly1x > ptx)\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d === 0)\n            return -1;\n            if (d > 0 === poly1y > poly0y)\n            result = 1 - result;\n          }\n        }\n      }\n      poly0x = poly1x;\n      poly0y = poly1y;\n    } while (startOp !== op);\n\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n  {\n    var op = outPt1;\n    do {\n      //nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n      var res = this.PointInPolygon(op.Pt, outPt2);\n      if (res >= 0)\n      return res > 0;\n      op = op.Next;\n    } while (\n    op !== outPt1);\n    return true;\n  };\n\n  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n  {\n    var outRec, firstLeft;\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      outRec = this.m_PolyOuts[i];\n      firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n      if (outRec.Pts !== null && firstLeft === OldOutRec)\n      {\n        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n        outRec.FirstLeft = NewOutRec;\n      }\n    }\n  };\n\n  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (innerOutRec, outerOutRec)\n  {\n    //A polygon has split into two such that one is now the inner of the other.\n    //It's possible that these polygons now wrap around other polygons, so check\n    //every polygon that's also contained by OuterOutRec's FirstLeft container\n    //(including nil) to see if they've become inner to the new inner polygon ...\n    var orfl = outerOutRec.FirstLeft;\n    var outRec, firstLeft;\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null || outRec === outerOutRec || outRec === innerOutRec)\n      continue;\n      firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n      if (firstLeft !== orfl && firstLeft !== innerOutRec && firstLeft !== outerOutRec)\n      continue;\n      if (this.Poly2ContainsPoly1(outRec.Pts, innerOutRec.Pts))\n      outRec.FirstLeft = innerOutRec;else\n      if (this.Poly2ContainsPoly1(outRec.Pts, outerOutRec.Pts))\n      outRec.FirstLeft = outerOutRec;else\n      if (outRec.FirstLeft === innerOutRec || outRec.FirstLeft === outerOutRec)\n      outRec.FirstLeft = orfl;\n    }\n  };\n\n  ClipperLib.Clipper.prototype.FixupFirstLefts3 = function (OldOutRec, NewOutRec)\n  {\n    //same as FixupFirstLefts1 but doesn't call Poly2ContainsPoly1()\n    var outRec;\n    var firstLeft;\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      outRec = this.m_PolyOuts[i];\n      firstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n      if (outRec.Pts !== null && firstLeft === OldOutRec)\n      outRec.FirstLeft = NewOutRec;\n    }\n  };\n\n  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n  {\n    while (FirstLeft !== null && FirstLeft.Pts === null)\n    FirstLeft = FirstLeft.FirstLeft;\n    return FirstLeft;\n  };\n\n  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n  {\n    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n    {\n      var join = this.m_Joins[i];\n      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n      if (outRec1.Pts === null || outRec2.Pts === null)\n      continue;\n\n      if (outRec1.IsOpen || outRec2.IsOpen)\n      {\n        continue;\n      }\n\n      //get the polygon fragment with the correct hole state (FirstLeft)\n      //before calling JoinPoints() ...\n      var holeStateRec;\n      if (outRec1 === outRec2)\n      holeStateRec = outRec1;else\n      if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n      holeStateRec = outRec2;else\n      if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n      holeStateRec = outRec1;else\n\n      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n      if (outRec1 === outRec2)\n      {\n        //instead of joining two polygons, we've just created a new one by\n        //splitting one polygon into two.\n        outRec1.Pts = join.OutPt1;\n        outRec1.BottomPt = null;\n        outRec2 = this.CreateOutRec();\n        outRec2.Pts = join.OutPt2;\n        //update all OutRec2.Pts Idx's ...\n        this.UpdateOutPtIdxs(outRec2);\n\n        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n        {\n          //outRec1 contains outRec2 ...\n          outRec2.IsHole = !outRec1.IsHole;\n          outRec2.FirstLeft = outRec1;\n          if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec2, outRec1);\n          if ((outRec2.IsHole ^ this.ReverseSolution) == this.Area$1(outRec2) > 0)\n          this.ReversePolyPtLinks(outRec2.Pts);\n        } else\n        if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n        {\n          //outRec2 contains outRec1 ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec1.IsHole = !outRec2.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          outRec1.FirstLeft = outRec2;\n          if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec1, outRec2);\n\n          if ((outRec1.IsHole ^ this.ReverseSolution) == this.Area$1(outRec1) > 0)\n          this.ReversePolyPtLinks(outRec1.Pts);\n        } else\n\n        {\n          //the 2 polygons are completely separate ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          //fixup FirstLeft pointers that may need reassigning to OutRec2\n          if (this.m_UsingPolyTree)\n          this.FixupFirstLefts1(outRec1, outRec2);\n        }\n      } else\n\n      {\n        //joined 2 polygons together ...\n        outRec2.Pts = null;\n        outRec2.BottomPt = null;\n        outRec2.Idx = outRec1.Idx;\n        outRec1.IsHole = holeStateRec.IsHole;\n        if (holeStateRec === outRec2)\n        outRec1.FirstLeft = outRec2.FirstLeft;\n        outRec2.FirstLeft = outRec1;\n        //fixup FirstLeft pointers that may need reassigning to OutRec1\n        if (this.m_UsingPolyTree)\n        this.FixupFirstLefts3(outRec2, outRec1);\n      }\n    }\n  };\n\n  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n  {\n    var op = outrec.Pts;\n    do {\n      op.Idx = outrec.Idx;\n      op = op.Prev;\n    } while (\n    op !== outrec.Pts);\n  };\n\n  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n  {\n    var i = 0;\n    while (i < this.m_PolyOuts.length)\n    {\n      var outrec = this.m_PolyOuts[i++];\n      var op = outrec.Pts;\n      if (op === null || outrec.IsOpen)\n      continue;\n      do //for each Pt in Polygon until duplicate found do ...\n      {\n        var op2 = op.Next;\n        while (op2 !== outrec.Pts)\n        {\n          if (ClipperLib.FPoint.op_Equality(op.Pt, op2.Pt) && op2.Next !== op && op2.Prev !== op)\n          {\n            //split the polygon into two ...\n            var op3 = op.Prev;\n            var op4 = op2.Prev;\n            op.Prev = op4;\n            op4.Next = op;\n            op2.Prev = op3;\n            op3.Next = op2;\n            outrec.Pts = op;\n            var outrec2 = this.CreateOutRec();\n            outrec2.Pts = op2;\n            this.UpdateOutPtIdxs(outrec2);\n            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n            {\n              //OutRec2 is contained by OutRec1 ...\n              outrec2.IsHole = !outrec.IsHole;\n              outrec2.FirstLeft = outrec;\n              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n            } else\n            if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n            {\n              //OutRec1 is contained by OutRec2 ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec.IsHole = !outrec2.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n              outrec.FirstLeft = outrec2;\n              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n            } else\n\n            {\n              //the 2 polygons are separate ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n              if (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n            }\n            op2 = op;\n            //ie get ready for the next iteration\n          }\n          op2 = op2.Next;\n        }\n        op = op.Next;\n      } while (\n      op !== outrec.Pts);\n    }\n  };\n\n  ClipperLib.Clipper.Area = function (poly)\n  {\n    if (!Array.isArray(poly))\n    return 0;\n    var cnt = poly.length;\n    if (cnt < 3)\n    return 0;\n    var a = 0;\n    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n    {\n      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n      j = i;\n    }\n    return -a * 0.5;\n  };\n\n  ClipperLib.Clipper.prototype.Area = function (op)\n  {\n    var opFirst = op;\n    if (op === null) return 0;\n    var a = 0;\n    do {\n      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n      op = op.Next;\n    } while (op !== opFirst); // && typeof op !== 'undefined');\n    return a * 0.5;\n  };\n\n  ClipperLib.Clipper.prototype.Area$1 = function (outRec)\n  {\n    return this.Area(outRec.Pts);\n  };\n\n  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n  {\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n\n  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n  {\n    if (typeof fillType === \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n\n  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n  {\n    var dx = pt1.X - pt2.X;\n    var dy = pt1.Y - pt2.Y;\n    return dx * dx + dy * dy;\n  };\n\n  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n  {\n    //The equation of a line in general form (Ax + By + C = 0)\n    //given 2 points (x¹,y¹) & (x²,y²) is ...\n    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n    var A = ln1.Y - ln2.Y;\n    var B = ln2.X - ln1.X;\n    var C = A * ln1.X + B * ln1.Y;\n    C = A * pt.X + B * pt.Y - C;\n    return C * C / (A * A + B * B);\n  };\n\n  ClipperLib.Clipper.SlopesNearCollinear = function (pt1, pt2, pt3, distSqrd)\n  {\n    //this function is more accurate when the point that's GEOMETRICALLY\n    //between the other 2 points is the one that's tested for distance.\n    //nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n    if (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n    {\n      if (pt1.X > pt2.X === pt1.X < pt3.X)\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;else\n      if (pt2.X > pt1.X === pt2.X < pt3.X)\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;else\n\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n    } else\n\n    {\n      if (pt1.Y > pt2.Y === pt1.Y < pt3.Y)\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;else\n      if (pt2.Y > pt1.Y === pt2.Y < pt3.Y)\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;else\n\n      return ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n    }\n  };\n\n  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n  {\n    var dx = pt1.X - pt2.X;\n    var dy = pt1.Y - pt2.Y;\n    return dx * dx + dy * dy <= distSqrd;\n  };\n\n  ClipperLib.Clipper.ExcludeOp = function (op)\n  {\n    var result = op.Prev;\n    result.Next = op.Next;\n    op.Next.Prev = result;\n    result.Idx = 0;\n    return result;\n  };\n\n  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n  {\n    if (typeof distance === \"undefined\") distance = 1.415;\n    //distance = proximity in units/pixels below which vertices will be stripped.\n    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n    //both x & y coords within 1 unit, then the second vertex will be stripped.\n    var cnt = path.length;\n    if (cnt === 0)\n    return new Array();\n    var outPts = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n    outPts[i] = new ClipperLib.OutPt();\n    for (var i = 0; i < cnt; ++i)\n    {\n      outPts[i].Pt = path[i];\n      outPts[i].Next = outPts[(i + 1) % cnt];\n      outPts[i].Next.Prev = outPts[i];\n      outPts[i].Idx = 0;\n    }\n    var distSqrd = distance * distance;\n    var op = outPts[0];\n    while (op.Idx === 0 && op.Next !== op.Prev)\n    {\n      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      } else\n      if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n      {\n        ClipperLib.Clipper.ExcludeOp(op.Next);\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt -= 2;\n      } else\n      if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      } else\n\n      {\n        op.Idx = 1;\n        op = op.Next;\n      }\n    }\n    if (cnt < 3)\n    cnt = 0;\n    var result = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n    {\n      result[i] = new ClipperLib.FPoint1(op.Pt);\n      op = op.Next;\n    }\n    outPts = null;\n    return result;\n  };\n\n  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n  {\n    var result = new Array(polys.length);\n    for (var i = 0, ilen = polys.length; i < ilen; i++)\n    result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n    return result;\n  };\n\n  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n  {\n    var delta = IsClosed ? 1 : 0;\n    var polyCnt = pattern.length;\n    var pathCnt = path.length;\n    var result = new Array();\n    if (IsSum)\n    for (var i = 0; i < pathCnt; i++)\n    {\n      var p = new Array(polyCnt);\n      for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n      p[j] = new ClipperLib.FPoint2(path[i].X + ip.X, path[i].Y + ip.Y);\n      result.push(p);\n    } else\n\n    for (var i = 0; i < pathCnt; i++)\n    {\n      var p = new Array(polyCnt);\n      for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n      p[j] = new ClipperLib.FPoint2(path[i].X - ip.X, path[i].Y - ip.Y);\n      result.push(p);\n    }\n    var quads = new Array();\n    for (var i = 0; i < pathCnt - 1 + delta; i++)\n    for (var j = 0; j < polyCnt; j++)\n    {\n      var quad = new Array();\n      quad.push(result[i % pathCnt][j % polyCnt]);\n      quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n      quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n      quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n      if (!ClipperLib.Clipper.Orientation(quad))\n      quad.reverse();\n      quads.push(quad);\n    }\n    return quads;\n  };\n\n  ClipperLib.Clipper.MinkowskiSum = function (pattern, path_or_paths, pathIsClosed)\n  {\n    if (!(path_or_paths[0] instanceof Array))\n    {\n      var path = path_or_paths;\n      var paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n      var c = new ClipperLib.Clipper();\n      c.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n      c.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n      return paths;\n    } else\n\n    {\n      var paths = path_or_paths;\n      var solution = new ClipperLib.Paths();\n      var c = new ClipperLib.Clipper();\n      for (var i = 0; i < paths.length; ++i)\n      {\n        var tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n        c.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n        if (pathIsClosed)\n        {\n          var path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n          c.AddPath(path, ClipperLib.PolyType.ptClip, true);\n        }\n      }\n      c.Execute(ClipperLib.ClipType.ctUnion, solution,\n      ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n      return solution;\n    }\n  };\n\n  ClipperLib.Clipper.TranslatePath = function (path, delta)\n  {\n    var outPath = new ClipperLib.Path();\n    for (var i = 0; i < path.length; i++)\n    outPath.push(new ClipperLib.FPoint2(path[i].X + delta.X, path[i].Y + delta.Y));\n    return outPath;\n  };\n\n  ClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n  {\n    var paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n    var c = new ClipperLib.Clipper();\n    c.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n    return paths;\n  };\n\n  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n  {\n    var result = new Array();\n    //result.set_Capacity(polytree.get_Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n    return result;\n  };\n\n  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n  {\n    var match = true;\n    switch (nt) {\n\n      case ClipperLib.Clipper.NodeType.ntOpen:\n        return;\n      case ClipperLib.Clipper.NodeType.ntClosed:\n        match = !polynode.IsOpen;\n        break;\n      default:\n        break;\n    }\n    if (polynode.m_polygon.length > 0 && match)\n    paths.push(polynode.m_polygon);\n    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n    ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n  };\n\n  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.ChildCount());\n    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n    if (polytree.Childs()[i].IsOpen)\n    result.push(polytree.Childs()[i].m_polygon);\n    return result;\n  };\n\n  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n    return result;\n  };\n\n  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n  ClipperLib.Clipper.NodeType = {\n    ntAny: 0,\n    ntOpen: 1,\n    ntClosed: 2\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n  {\n    if (typeof miterLimit === \"undefined\") miterLimit = 2;\n    if (typeof arcTolerance === \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n    this.m_destPolys = new ClipperLib.Paths();\n    this.m_srcPoly = new ClipperLib.Path();\n    this.m_destPoly = new ClipperLib.Path();\n    this.m_normals = new Array();\n    this.m_delta = 0;\n    this.m_sinA = 0;\n    this.m_sin = 0;\n    this.m_cos = 0;\n    this.m_miterLim = 0;\n    this.m_StepsPerRad = 0;\n    this.m_lowest = new ClipperLib.FPoint0();\n    this.m_polyNodes = new ClipperLib.PolyNode();\n    this.MiterLimit = miterLimit;\n    this.ArcTolerance = arcTolerance;\n    this.m_lowest.X = -1;\n  };\n\n  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n  ClipperLib.ClipperOffset.prototype.Clear = function ()\n  {\n    ClipperLib.Clear(this.m_polyNodes.Childs());\n    this.m_lowest.X = -1;\n  };\n\n  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n  {\n    var highI = path.length - 1;\n    if (highI < 0)\n    return;\n    var newNode = new ClipperLib.PolyNode();\n    newNode.m_jointype = joinType;\n    newNode.m_endtype = endType;\n    //strip duplicate points from path and also get index to the lowest point ...\n    if (endType === ClipperLib.EndType.etClosedLine || endType === ClipperLib.EndType.etClosedPolygon)\n    while (highI > 0 && ClipperLib.FPoint.op_Equality(path[0], path[highI]))\n    highI--;\n    //newNode.m_polygon.set_Capacity(highI + 1);\n    newNode.m_polygon.push(path[0]);\n    var j = 0,\n      k = 0;\n    for (var i = 1; i <= highI; i++)\n    if (ClipperLib.FPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n    {\n      j++;\n      newNode.m_polygon.push(path[i]);\n      if (path[i].Y > newNode.m_polygon[k].Y || path[i].Y === newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X)\n      k = j;\n    }\n    if (endType === ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n    this.m_polyNodes.AddChild(newNode);\n    //if this path's lowest pt is lower than all the others then update m_lowest\n    if (endType !== ClipperLib.EndType.etClosedPolygon)\n    return;\n    if (this.m_lowest.X < 0)\n    this.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);else\n\n    {\n      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n      if (newNode.m_polygon[k].Y > ip.Y || newNode.m_polygon[k].Y === ip.Y && newNode.m_polygon[k].X < ip.X)\n      this.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);\n    }\n  };\n\n  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n  {\n    for (var i = 0, ilen = paths.length; i < ilen; i++)\n    this.AddPath(paths[i], joinType, endType);\n  };\n\n  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n  {\n    //fixup orientations of all closed paths if the orientation of the\n    //closed path with the lowermost vertex is wrong ...\n    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype === ClipperLib.EndType.etClosedPolygon || node.m_endtype === ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon))\n        node.m_polygon.reverse();\n      }\n    } else\n\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype === ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n        node.m_polygon.reverse();\n      }\n    }\n  };\n\n  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n  {\n    var dx = pt2.X - pt1.X;\n    var dy = pt2.Y - pt1.Y;\n    if (dx === 0 && dy === 0)\n    return new ClipperLib.FPoint2(0, 0);\n    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n    dx *= f;\n    dy *= f;\n    return new ClipperLib.FPoint2(dy, -dx);\n  };\n\n  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n  {\n    this.m_destPolys = new Array();\n    this.m_delta = delta;\n    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n    if (ClipperLib.ClipperBase.near_zero(delta))\n    {\n      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n        this.m_destPolys.push(node.m_polygon);\n      }\n      return;\n    }\n    //see offset_triginometry3.svg in the documentation folder ...\n    if (this.MiterLimit > 2)\n    this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);else\n\n    this.m_miterLim = 0.5;\n    var y;\n    if (this.ArcTolerance <= 0)\n    y = ClipperLib.ClipperOffset.def_arc_tolerance;else\n    if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n    y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;else\n\n    y = this.ArcTolerance;\n    //see offset_triginometry2.svg in the documentation folder ...\n    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n    if (delta < 0)\n    this.m_sin = -this.m_sin;\n    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n    {\n      var node = this.m_polyNodes.Childs()[i];\n      this.m_srcPoly = node.m_polygon;\n      var len = this.m_srcPoly.length;\n      if (len === 0 || delta <= 0 && (len < 3 || node.m_endtype !== ClipperLib.EndType.etClosedPolygon))\n      continue;\n      this.m_destPoly = new Array();\n      if (len === 1)\n      {\n        if (node.m_jointype === ClipperLib.JoinType.jtRound)\n        {\n          var X = 1,\n            Y = 0;\n          for (var j = 1; j <= steps; j++)\n          {\n            this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0].X + X * delta, this.m_srcPoly[0].Y + Y * delta));\n            var X2 = X;\n            X = X * this.m_cos - this.m_sin * Y;\n            Y = X2 * this.m_sin + Y * this.m_cos;\n          }\n        } else\n\n        {\n          var X = -1,\n            Y = -1;\n          for (var j = 0; j < 4; ++j)\n          {\n            this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0].X + X * delta, this.m_srcPoly[0].Y + Y * delta));\n            if (X < 0)\n            X = 1;else\n            if (Y < 0)\n            Y = 1;else\n\n            X = -1;\n          }\n        }\n        this.m_destPolys.push(this.m_destPoly);\n        continue;\n      }\n      //build m_normals ...\n      this.m_normals.length = 0;\n      //this.m_normals.set_Capacity(len);\n      for (var j = 0; j < len - 1; j++)\n      this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n      if (node.m_endtype === ClipperLib.EndType.etClosedLine || node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n      this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));else\n\n      this.m_normals.push(new ClipperLib.FPoint1(this.m_normals[len - 2]));\n      if (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      } else\n      if (node.m_endtype === ClipperLib.EndType.etClosedLine)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n        this.m_destPoly = new Array();\n        //re-build m_normals ...\n        var n = this.m_normals[len - 1];\n        for (var j = len - 1; j > 0; j--)\n        this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.FPoint2(-n.X, -n.Y);\n        k = 0;\n        for (var j = len - 1; j >= 0; j--)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      } else\n\n      {\n        var k = 0;\n        for (var j = 1; j < len - 1; ++j)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n        var pt1;\n        if (node.m_endtype === ClipperLib.EndType.etOpenButt)\n        {\n          var j = len - 1;\n          pt1 = new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[j].X * delta, this.m_srcPoly[j].Y + this.m_normals[j].Y * delta);\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.FPoint2(this.m_srcPoly[j].X - this.m_normals[j].X * delta, this.m_srcPoly[j].Y - this.m_normals[j].Y * delta);\n          this.m_destPoly.push(pt1);\n        } else\n\n        {\n          var j = len - 1;\n          k = len - 2;\n          this.m_sinA = 0;\n          this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j].X, -this.m_normals[j].Y);\n          if (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n          this.DoSquare(j, k);else\n\n          this.DoRound(j, k);\n        }\n        //re-build m_normals ...\n        for (var j = len - 1; j > 0; j--)\n        this.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.FPoint2(-this.m_normals[1].X, -this.m_normals[1].Y);\n        k = len - 1;\n        for (var j = k - 1; j > 0; --j)\n        k = this.OffsetPoint(j, k, node.m_jointype);\n        if (node.m_endtype === ClipperLib.EndType.etOpenButt)\n        {\n          pt1 = new ClipperLib.FPoint2(this.m_srcPoly[0].X - this.m_normals[0].X * delta, this.m_srcPoly[0].Y - this.m_normals[0].Y * delta);\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.FPoint2(this.m_srcPoly[0].X + this.m_normals[0].X * delta, this.m_srcPoly[0].Y + this.m_normals[0].Y * delta);\n          this.m_destPoly.push(pt1);\n        } else\n\n        {\n          k = 1;\n          this.m_sinA = 0;\n          if (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n          this.DoSquare(0, 1);else\n\n          this.DoRound(0, 1);\n        }\n        this.m_destPolys.push(this.m_destPoly);\n      }\n    }\n  };\n\n  ClipperLib.ClipperOffset.prototype.Execute = function ()\n  {\n    var a = arguments,\n      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n    if (!ispolytree) // function (solution, delta)\n      {\n        var solution = a[0],\n          delta = a[1];\n        ClipperLib.Clear(solution);\n        this.FixOrientations();\n        this.DoOffset(delta);\n        //now clean up 'corners' ...\n        var clpr = new ClipperLib.Clipper(0);\n        clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n        if (delta > 0)\n        {\n          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n        } else\n\n        {\n          var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n          var outer = new ClipperLib.Path();\n          outer.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n          outer.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n          outer.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n          outer.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n          clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n          clpr.ReverseSolution = true;\n          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n          if (solution.length > 0)\n          solution.splice(0, 1);\n        }\n        //console.log(JSON.stringify(solution));\n      } else\n      // function (polytree, delta)\n      {\n        var solution = a[0],\n          delta = a[1];\n        solution.Clear();\n        this.FixOrientations();\n        this.DoOffset(delta);\n        //now clean up 'corners' ...\n        var clpr = new ClipperLib.Clipper(0);\n        clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n        if (delta > 0)\n        {\n          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n        } else\n\n        {\n          var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n          var outer = new ClipperLib.Path();\n          outer.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n          outer.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n          outer.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n          outer.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n          clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n          clpr.ReverseSolution = true;\n          clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n          //remove the outer PolyNode rectangle ...\n          if (solution.ChildCount() === 1 && solution.Childs()[0].ChildCount() > 0)\n          {\n            var outerNode = solution.Childs()[0];\n            //solution.Childs.set_Capacity(outerNode.ChildCount);\n            solution.Childs()[0] = outerNode.Childs()[0];\n            solution.Childs()[0].m_Parent = solution;\n            for (var i = 1; i < outerNode.ChildCount(); i++)\n            solution.AddChild(outerNode.Childs()[i]);\n          } else\n\n          solution.Clear();\n        }\n      }\n  };\n\n  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n  {\n    //cross product ...\n    this.m_sinA = this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y;\n\n    if (this.m_sinA === 0)\n    {\n      return k;\n    }\n\n    /*\n    \t\telse if (this.m_sinA < 0.00005 && this.m_sinA > -0.00005)\n    {\n    \t\t\tconsole.log(this.m_sinA);\n          return k;\n    }\n    */\n    /*\n    \t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n    \t\t{\n    \t\t\t//dot product ...\n    \t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n    \t\t\tif (cosA > 0) // angle ==> 0 degrees\n    \t\t\t{\n    \t\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta,\n    \t\t\t\t\tthis.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta));\n    \t\t\t\treturn k;\n    \t\t\t}\n    \t\t\t//else angle ==> 180 degrees\n    \t\t}\n    */else\n    if (this.m_sinA > 1)\n    this.m_sinA = 1.0;else\n    if (this.m_sinA < -1)\n    this.m_sinA = -1.0;\n    if (this.m_sinA * this.m_delta < 0)\n    {\n      this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta,\n      this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta));\n      this.m_destPoly.push(new ClipperLib.FPoint1(this.m_srcPoly[j]));\n      this.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta,\n      this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta));\n    } else\n\n    switch (jointype) {\n\n      case ClipperLib.JoinType.jtMiter:\n        {\n          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n          if (r >= this.m_miterLim)\n          this.DoMiter(j, k, r);else\n\n          this.DoSquare(j, k);\n          break;\n        }\n      case ClipperLib.JoinType.jtSquare:\n        this.DoSquare(j, k);\n        break;\n      case ClipperLib.JoinType.jtRound:\n        this.DoRound(j, k);\n        break;\n    }\n    k = j;\n    return k;\n  };\n\n  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n  {\n    var dx = Math.tan(Math.atan2(this.m_sinA,\n    this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n    this.m_destPoly.push(new ClipperLib.FPoint2(\n      this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx),\n      this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx)));\n    this.m_destPoly.push(new ClipperLib.FPoint2(\n      this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx),\n      this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx)));\n  };\n\n  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n  {\n    var q = this.m_delta / r;\n    this.m_destPoly.push(new ClipperLib.FPoint2(\n      this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q,\n      this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q));\n  };\n\n  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n  {\n    var a = Math.atan2(this.m_sinA,\n    this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\n    var steps = Math.max(Math.round(this.m_StepsPerRad * Math.abs(a)), 1);\n\n    var X = this.m_normals[k].X,\n      Y = this.m_normals[k].Y,\n      X2;\n    for (var i = 0; i < steps; ++i)\n    {\n      this.m_destPoly.push(new ClipperLib.FPoint2(\n        this.m_srcPoly[j].X + X * this.m_delta,\n        this.m_srcPoly[j].Y + Y * this.m_delta));\n      X2 = X;\n      X = X * this.m_cos - this.m_sin * Y;\n      Y = X2 * this.m_sin + Y * this.m_cos;\n    }\n    this.m_destPoly.push(new ClipperLib.FPoint2(\n      this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta,\n      this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta));\n  };\n\n  ClipperLib.Error = function (message)\n  {\n    try\n    {\n      throw new Error(message);\n    }\n    catch (err)\n    {\n      alert(err.message);\n    }\n  };\n\n  // ---------------------------------------------\n\n  // JS extension by Timo 2013\n  ClipperLib.JS = {};\n\n  ClipperLib.JS.AreaOfPolygon = function (poly)\n  {\n    return ClipperLib.Clipper.Area(poly);\n  };\n\n  ClipperLib.JS.AreaOfPolygons = function (poly)\n  {\n    var area = 0;\n    for (var i = 0; i < poly.length; i++)\n    {\n      area += ClipperLib.Clipper.Area(poly[i]);\n    }\n    return area;\n  };\n\n  ClipperLib.JS.BoundsOfPath = function (path)\n  {\n    return ClipperLib.JS.BoundsOfPaths([path]);\n  };\n\n  ClipperLib.JS.BoundsOfPaths = function (paths)\n  {\n    var bounds = ClipperLib.Clipper.GetBounds(paths);\n    return bounds;\n  };\n\n  // Clean() joins vertices that are too near each other\n  // and causes distortion to offsetted polygons without cleaning\n  ClipperLib.JS.Clean = function (polygon, delta)\n  {\n    if (!(polygon instanceof Array)) return [];\n    var isPolygons = polygon[0] instanceof Array;\n    var polygon = ClipperLib.JS.Clone(polygon);\n    if (typeof delta !== \"number\" || delta === null)\n    {\n      ClipperLib.Error(\"Delta is not a number in Clean().\");\n      return polygon;\n    }\n    if (polygon.length === 0 || polygon.length === 1 && polygon[0].length === 0 || delta < 0) return polygon;\n    if (!isPolygons) polygon = [polygon];\n    var k_length = polygon.length;\n    var len, poly, result, d, p, j, i;\n    var results = [];\n    for (var k = 0; k < k_length; k++)\n    {\n      poly = polygon[k];\n      len = poly.length;\n      if (len === 0) continue;else\n      if (len < 3)\n      {\n        result = poly;\n        results.push(result);\n        continue;\n      }\n      result = poly;\n      d = delta * delta;\n      //d = Math.floor(c_delta * c_delta);\n      p = poly[0];\n      j = 1;\n      for (i = 1; i < len; i++)\n      {\n        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n        (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n        continue;\n        result[j] = poly[i];\n        p = poly[i];\n        j++;\n      }\n      p = poly[j - 1];\n      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n      (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n      j--;\n      if (j < len)\n      result.splice(j, len - j);\n      if (result.length) results.push(result);\n    }\n    if (!isPolygons && results.length) results = results[0];else\n    if (!isPolygons && results.length === 0) results = [];else\n    if (isPolygons && results.length === 0) results = [\n    []];\n\n    return results;\n  };\n  // Make deep copy of Polygons or Polygon\n  // so that also FPoint objects are cloned and not only referenced\n  // This should be the fastest way\n  ClipperLib.JS.Clone = function (polygon)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (polygon.length === 0) return [];else\n    if (polygon.length === 1 && polygon[0].length === 0) return [\n    []];\n\n    var isPolygons = polygon[0] instanceof Array;\n    if (!isPolygons) polygon = [polygon];\n    var len = polygon.length,\n      plen,i,j,result;\n    var results = new Array(len);\n    for (i = 0; i < len; i++)\n    {\n      plen = polygon[i].length;\n      result = new Array(plen);\n      for (j = 0; j < plen; j++)\n      {\n        result[j] = {\n          X: polygon[i][j].X,\n          Y: polygon[i][j].Y\n        };\n\n      }\n      results[i] = result;\n    }\n    if (!isPolygons) results = results[0];\n    return results;\n  };\n\n  // Removes points that doesn't affect much to the visual appearance.\n  // If middle point is at or under certain distance (tolerance) of the line segment between\n  // start and end point, the middle point is removed.\n  ClipperLib.JS.Lighten = function (polygon, tolerance)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (typeof tolerance !== \"number\" || tolerance === null)\n    {\n      ClipperLib.Error(\"Tolerance is not a number in Lighten().\");\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (polygon.length === 0 || polygon.length === 1 && polygon[0].length === 0 || tolerance < 0)\n    {\n      return ClipperLib.JS.Clone(polygon);\n    }\n    var isPolygons = polygon[0] instanceof Array;\n    if (!isPolygons) polygon = [polygon];\n    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n    var bxax, byay, l, ax, ay;\n    var len = polygon.length;\n    var toleranceSq = tolerance * tolerance;\n    var results = [];\n    for (i = 0; i < len; i++)\n    {\n      poly = polygon[i];\n      plen = poly.length;\n      if (plen === 0) continue;\n      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n      {\n        poly2 = [];\n        plen = poly.length;\n        // the first have to added to the end, if first and last are not the same\n        // this way we ensure that also the actual last point can be removed if needed\n        if (poly[plen - 1].X !== poly[0].X || poly[plen - 1].Y !== poly[0].Y)\n        {\n          addlast = 1;\n          poly.push(\n            {\n              X: poly[0].X,\n              Y: poly[0].Y\n            });\n          plen = poly.length;\n        } else\n        addlast = 0;\n        rem = []; // Indexes of removed points\n        for (j = 0; j < plen - 2; j++)\n        {\n          A = poly[j]; // Start point of line segment\n          P = poly[j + 1]; // Middle point. This is the one to be removed.\n          B = poly[j + 2]; // End point of line segment\n          ax = A.X;\n          ay = A.Y;\n          bxax = B.X - ax;\n          byay = B.Y - ay;\n          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n            {\n              l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n              if (l > 1)\n              {\n                ax = B.X;\n                ay = B.Y;\n              } else\n              if (l > 0)\n              {\n                ax += bxax * l;\n                ay += byay * l;\n              }\n            }\n          bxax = P.X - ax;\n          byay = P.Y - ay;\n          d = bxax * bxax + byay * byay;\n          if (d <= toleranceSq)\n          {\n            rem[j + 1] = 1;\n            j++; // when removed, transfer the pointer to the next one\n          }\n        }\n        // add all unremoved points to poly2\n        poly2.push(\n          {\n            X: poly[0].X,\n            Y: poly[0].Y\n          });\n        for (j = 1; j < plen - 1; j++)\n        if (!rem[j]) poly2.push(\n          {\n            X: poly[j].X,\n            Y: poly[j].Y\n          });\n        poly2.push(\n          {\n            X: poly[plen - 1].X,\n            Y: poly[plen - 1].Y\n          });\n        // if the first point was added to the end, remove it\n        if (addlast) poly.pop();\n        // break, if there was not anymore removed points\n        if (!rem.length) break;\n        // else continue looping using poly2, to check if there are points to remove\n        else poly = poly2;\n      }\n      plen = poly2.length;\n      // remove duplicate from end, if needed\n      if (poly2[plen - 1].X === poly2[0].X && poly2[plen - 1].Y === poly2[0].Y)\n      {\n        poly2.pop();\n      }\n      if (poly2.length > 2) // to avoid two-point-polygons\n        results.push(poly2);\n    }\n    if (!isPolygons)\n    {\n      results = results[0];\n    }\n    if (typeof results === \"undefined\")\n    {\n      results = [];\n    }\n    return results;\n  };\n\n  ClipperLib.JS.PerimeterOfPath = function (path, closed)\n  {\n    if (typeof path === \"undefined\") return 0;\n    var sqrt = Math.sqrt;\n    var perimeter = 0.0;\n    var p1,p2,p1x = 0.0,\n      p1y = 0.0,\n      p2x = 0.0,\n      p2y = 0.0;\n    var j = path.length;\n    if (j < 2) return 0;\n    if (closed)\n    {\n      path[j] = path[0];\n      j++;\n    }\n    while (--j)\n    {\n      p1 = path[j];\n      p1x = p1.X;\n      p1y = p1.Y;\n      p2 = path[j - 1];\n      p2x = p2.X;\n      p2y = p2.Y;\n      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n    }\n    if (closed) path.pop();\n    return perimeter;\n  };\n\n  ClipperLib.JS.PerimeterOfPaths = function (paths, closed)\n  {\n    var perimeter = 0;\n    for (var i = 0; i < paths.length; i++)\n    {\n      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed);\n    }\n    return perimeter;\n  };\n\n  /**\n  * @constructor\n  */\n  ClipperLib.ExPolygons = function ()\n  {\n    return [];\n  };\n  /**\n  * @constructor\n  */\n  ClipperLib.ExPolygon = function ()\n  {\n    this.outer = null;\n    this.holes = null;\n  };\n\n  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n  {\n    var ep = new ClipperLib.ExPolygon();\n    ep.outer = polynode.Contour();\n    var childs = polynode.Childs();\n    var ilen = childs.length;\n    ep.holes = new Array(ilen);\n    var node, n, i, j, childs2, jlen;\n    for (i = 0; i < ilen; i++)\n    {\n      node = childs[i];\n      ep.holes[i] = node.Contour();\n      //Add outer polygons contained by (nested within) holes ...\n      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n      {\n        n = childs2[j];\n        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n      }\n    }\n    expolygons.push(ep);\n  };\n\n  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n  {\n    var a, i, alen, ilen;\n    var paths = new ClipperLib.Paths();\n    for (a = 0, alen = expolygons.length; a < alen; a++)\n    {\n      paths.push(expolygons[a].outer);\n      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n      {\n        paths.push(expolygons[a].holes[i]);\n      }\n    }\n    return paths;\n  };\n  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n  {\n    var expolygons = new ClipperLib.ExPolygons();\n    var node, i, childs, ilen;\n    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n    {\n      node = childs[i];\n      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n    }\n    return expolygons;\n  };\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9jbGlwcGVyLWxpYi1mcG9pbnQvY2xpcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0VBQ0MsWUFBWTtFQUNaLElBQUlBLFVBQVUsR0FBRyxDQUFDLENBQUM7RUFDbkJBLFVBQVUsQ0FBQ0MsT0FBTyxHQUFHLFNBQVM7O0VBRTlCO0VBQ0FELFVBQVUsQ0FBQ0UsU0FBUyxHQUFHLElBQUk7O0VBRTNCO0VBQ0FGLFVBQVUsQ0FBQ0csT0FBTyxHQUFHLEtBQUs7O0VBRTFCLElBQUlDLE1BQU0sR0FBRyxLQUFLO0VBQ2xCLElBQUksS0FBNkIsSUFBSUMsTUFBTSxDQUFDQyxPQUFPO0VBQ25EO0lBQ0NELE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTixVQUFVO0lBQzNCSSxNQUFNLEdBQUcsSUFBSTtFQUNkLENBQUM7O0VBRUQ7SUFDQyxJQUFJLE9BQVFHLFFBQVMsS0FBSyxXQUFXLEVBQUVDLE1BQU0sQ0FBQ1IsVUFBVSxHQUFHQSxVQUFVLENBQUM7SUFDakVTLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBR1QsVUFBVTtFQUNyQztFQUNBLElBQUlVLGlCQUFpQjtFQUNyQixJQUFJLENBQUNOLE1BQU07RUFDWDtJQUNDLElBQUlPLEdBQUcsR0FBR0MsU0FBUyxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RETCxpQkFBaUIsR0FBR0UsU0FBUyxDQUFDSSxPQUFPO0VBQ3RDLENBQUM7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ZGVfbW9kdWxlcy9jbGlwcGVyLWxpYi1mcG9pbnQvY2xpcHBlci5qcz9iZWRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvciAgICA6ICBBbmd1cyBKb2huc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVmVyc2lvbiAgIDogIDYuNC4yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBEYXRlICAgICAgOiAgMjcgRmVicnVhcnkgMjAxNyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFdlYnNpdGUgICA6ICBodHRwOi8vd3d3LmFuZ3Vzai5jb20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IDogIEFuZ3VzIEpvaG5zb24gMjAxMC0yMDE3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIExpY2Vuc2U6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVXNlLCBtb2RpZmljYXRpb24gJiBkaXN0cmlidXRpb24gaXMgc3ViamVjdCB0byBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlIFZlciAxLiAqXG4gKiBodHRwOi8vd3d3LmJvb3N0Lm9yZy9MSUNFTlNFXzFfMC50eHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQXR0cmlidXRpb25zOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGUgY29kZSBpbiB0aGlzIGxpYnJhcnkgaXMgYW4gZXh0ZW5zaW9uIG9mIEJhbGEgVmF0dGkncyBjbGlwcGluZyBhbGdvcml0aG06ICpcbiAqIFwiQSBnZW5lcmljIHNvbHV0aW9uIHRvIHBvbHlnb24gY2xpcHBpbmdcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDb21tdW5pY2F0aW9ucyBvZiB0aGUgQUNNLCBWb2wgMzUsIElzc3VlIDcgKEp1bHkgMTk5MikgcHAgNTYtNjMuICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly9wb3J0YWwuYWNtLm9yZy9jaXRhdGlvbi5jZm0/aWQ9MTI5OTA2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDb21wdXRlciBncmFwaGljcyBhbmQgZ2VvbWV0cmljIG1vZGVsaW5nOiBpbXBsZW1lbnRhdGlvbiBhbmQgYWxnb3JpdGhtcyAgICAgICpcbiAqIEJ5IE1heCBLLiBBZ29zdG9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogU3ByaW5nZXI7IDEgZWRpdGlvbiAoSmFudWFyeSA0LCAyMDA1KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vYm9va3MuZ29vZ2xlLmNvbS9ib29rcz9xPXZhdHRpK2NsaXBwaW5nK2Fnb3N0b24gICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogU2VlIGFsc286ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBcIlBvbHlnb24gT2Zmc2V0dGluZyBieSBDb21wdXRpbmcgV2luZGluZyBOdW1iZXJzXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogUGFwZXIgbm8uIERFVEMyMDA1LTg1NTEzIHBwLiA1NjUtNTc1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBU01FIDIwMDUgSW50ZXJuYXRpb25hbCBEZXNpZ24gRW5naW5lZXJpbmcgVGVjaG5pY2FsIENvbmZlcmVuY2VzICAgICAgICAgICAgICpcbiAqIGFuZCBDb21wdXRlcnMgYW5kIEluZm9ybWF0aW9uIGluIEVuZ2luZWVyaW5nIENvbmZlcmVuY2UgKElERVRDL0NJRTIwMDUpICAgICAgKlxuICogU2VwdGVtYmVyIDI0LTI4LCAyMDA1ICwgTG9uZyBCZWFjaCwgQ2FsaWZvcm5pYSwgVVNBICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vd3d3Lm1lLmJlcmtlbGV5LmVkdS9+bWNtYWlucy9wdWJzL0RBQzA1T2Zmc2V0UG9seWdvbi5wZGYgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdXRob3IgICAgOiAgVGltbyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFZlcnNpb24gICA6ICA2LjQuMi4yIChGUG9pbnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogRGF0ZSAgICAgIDogIDggU2VwdGVtYmVyIDIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoaXMgaXMgYSB0cmFuc2xhdGlvbiBvZiB0aGUgQyMgQ2xpcHBlciBsaWJyYXJ5IHRvIEphdmFzY3JpcHQuICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbihmdW5jdGlvbiAoKVxue1xuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIENsaXBwZXJMaWIgPSB7fTtcblx0Q2xpcHBlckxpYi52ZXJzaW9uID0gJzYuNC4yLjInO1xuXG5cdC8vVXNlTGluZXM6IEVuYWJsZXMgb3BlbiBwYXRoIGNsaXBwaW5nLiBBZGRzIGEgdmVyeSBtaW5vciBjb3N0IHRvIHBlcmZvcm1hbmNlLlxuXHRDbGlwcGVyTGliLnVzZV9saW5lcyA9IHRydWU7XG5cblx0Ly9DbGlwcGVyTGliLnVzZV94eXo6IGFkZHMgYSBaIG1lbWJlciB0byBGUG9pbnQuIEFkZHMgYSBtaW5vciBjb3N0IHRvIHBlcmZvcm1hbmNlLlxuXHRDbGlwcGVyTGliLnVzZV94eXogPSBmYWxzZTtcblxuXHR2YXIgaXNOb2RlID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cylcblx0e1xuXHRcdG1vZHVsZS5leHBvcnRzID0gQ2xpcHBlckxpYjtcblx0XHRpc05vZGUgPSB0cnVlO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGlmICh0eXBlb2YgKGRvY3VtZW50KSAhPT0gXCJ1bmRlZmluZWRcIikgd2luZG93LkNsaXBwZXJMaWIgPSBDbGlwcGVyTGliO1xuXHRcdGVsc2Ugc2VsZlsnQ2xpcHBlckxpYiddID0gQ2xpcHBlckxpYjtcblx0fVxuXHR2YXIgbmF2aWdhdG9yX2FwcE5hbWU7XG5cdGlmICghaXNOb2RlKVxuXHR7XG5cdFx0dmFyIG5hdiA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuXHRcdG5hdmlnYXRvcl9hcHBOYW1lID0gbmF2aWdhdG9yLmFwcE5hbWU7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0dmFyIG5hdiA9IFwiY2hyb21lXCI7IC8vIE5vZGUuanMgdXNlcyBDaHJvbWUncyBWOCBlbmdpbmVcblx0XHRuYXZpZ2F0b3JfYXBwTmFtZSA9IFwiTmV0c2NhcGVcIjsgLy8gRmlyZWZveCwgQ2hyb21lIGFuZCBTYWZhcmkgcmV0dXJucyBcIk5ldHNjYXBlXCIsIHNvIE5vZGUuanMgc2hvdWxkIGFsc29cblx0fVxuXHQvLyBCcm93c2VyIHRlc3QgdG8gc3BlZWR1cCBwZXJmb3JtYW5jZSBjcml0aWNhbCBmdW5jdGlvbnNcblx0dmFyIGJyb3dzZXIgPSB7fTtcblxuXHRpZiAobmF2LmluZGV4T2YoXCJjaHJvbWVcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5jaHJvbWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21lID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiY2hyb21pdW1cIikgIT0gLTEpIGJyb3dzZXIuY2hyb21pdW0gPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21pdW0gPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJzYWZhcmlcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWVcIikgPT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5zYWZhcmkgPSAxO1xuXHRlbHNlIGJyb3dzZXIuc2FmYXJpID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiZmlyZWZveFwiKSAhPSAtMSkgYnJvd3Nlci5maXJlZm94ID0gMTtcblx0ZWxzZSBicm93c2VyLmZpcmVmb3ggPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE3XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTcgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE1XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTUgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzNcIikgIT0gLTEpIGJyb3dzZXIuZmlyZWZveDMgPSAxO1xuXHRlbHNlIGJyb3dzZXIuZmlyZWZveDMgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJvcGVyYVwiKSAhPSAtMSkgYnJvd3Nlci5vcGVyYSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5vcGVyYSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgMTBcIikgIT0gLTEpIGJyb3dzZXIubXNpZTEwID0gMTtcblx0ZWxzZSBicm93c2VyLm1zaWUxMCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOVwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOFwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOCA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgN1wiKSAhPSAtMSkgYnJvd3Nlci5tc2llNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llNyA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgXCIpICE9IC0xKSBicm93c2VyLm1zaWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIubXNpZSA9IDA7XG5cblx0Ly8gSGVyZSBzdGFydHMgdGhlIGFjdHVhbCBDbGlwcGVyIGxpYnJhcnk6XG5cdC8vIEhlbHBlciBmdW5jdGlvbiB0byBzdXBwb3J0IEluaGVyaXRhbmNlIGluIEphdmFzY3JpcHRcblx0dmFyIEluaGVyaXQgPSBmdW5jdGlvbiAoY2UsIGNlMilcblx0e1xuXHRcdHZhciBwO1xuXHRcdGlmICh0eXBlb2YgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSA9PT0gJ3VuZGVmaW5lZCcpXG5cdFx0e1xuXHRcdFx0Zm9yIChwIGluIGNlMi5wcm90b3R5cGUpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNlLnByb3RvdHlwZVtwXSkgPT09ICd1bmRlZmluZWQnIHx8IGNlLnByb3RvdHlwZVtwXSA9PT0gT2JqZWN0LnByb3RvdHlwZVtwXSkgY2UucHJvdG90eXBlW3BdID0gY2UyLnByb3RvdHlwZVtwXTtcblx0XHRcdGZvciAocCBpbiBjZTIpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNlW3BdKSA9PT0gJ3VuZGVmaW5lZCcpIGNlW3BdID0gY2UyW3BdO1xuXHRcdFx0Y2UuJGJhc2VDdG9yID0gY2UyO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY2UyLnByb3RvdHlwZSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRpZiAodHlwZW9mIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNlLnByb3RvdHlwZSwgcHJvcHNbaV0pKSA9PT0gJ3VuZGVmaW5lZCcpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjZS5wcm90b3R5cGUsIHByb3BzW2ldLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNlMi5wcm90b3R5cGUsIHByb3BzW2ldKSk7XG5cdFx0XHRmb3IgKHAgaW4gY2UyKVxuXHRcdFx0XHRpZiAodHlwZW9mIChjZVtwXSkgPT09ICd1bmRlZmluZWQnKSBjZVtwXSA9IGNlMltwXTtcblx0XHRcdGNlLiRiYXNlQ3RvciA9IGNlMjtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuUGF0aCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gW107XG5cdH07XG5cblx0Q2xpcHBlckxpYi5QYXRoLnByb3RvdHlwZS5wdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuUGF0aHMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIFtdOyAvLyBXYXMgcHJldmlvdXNseSBbW11dLCBidXQgY2F1c2VkIHByb2JsZW1zIHdoZW4gcHVzaGVkXG5cdH07XG5cblx0Q2xpcHBlckxpYi5QYXRocy5wcm90b3R5cGUucHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgc3RhcnRcblx0LyoqXG5cdCogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc31cblx0Ki9cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fUGFyZW50ID0gbnVsbDtcblx0XHR0aGlzLm1fcG9seWdvbiA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fSW5kZXggPSAwO1xuXHRcdHRoaXMubV9qb2ludHlwZSA9IDA7XG5cdFx0dGhpcy5tX2VuZHR5cGUgPSAwO1xuXHRcdHRoaXMubV9DaGlsZHMgPSBbXTtcblx0XHR0aGlzLklzT3BlbiA9IGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLklzSG9sZU5vZGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IHRydWU7XG5cdFx0dmFyIG5vZGUgPSB0aGlzLm1fUGFyZW50O1xuXHRcdHdoaWxlIChub2RlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9ICFyZXN1bHQ7XG5cdFx0XHRub2RlID0gbm9kZS5tX1BhcmVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5DaGlsZENvdW50ID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Db250b3VyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fcG9seWdvbjtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5BZGRDaGlsZCA9IGZ1bmN0aW9uIChDaGlsZClcblx0e1xuXHRcdHZhciBjbnQgPSB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0XHR0aGlzLm1fQ2hpbGRzLnB1c2goQ2hpbGQpO1xuXHRcdENoaWxkLm1fUGFyZW50ID0gdGhpcztcblx0XHRDaGlsZC5tX0luZGV4ID0gY250O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLkdldE5leHQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB0aGlzLkdldE5leHRTaWJsaW5nVXAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5HZXROZXh0U2libGluZ1VwID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGlmICh0aGlzLm1fUGFyZW50ID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0ZWxzZSBpZiAodGhpcy5tX0luZGV4ID09PSB0aGlzLm1fUGFyZW50Lm1fQ2hpbGRzLmxlbmd0aCAtIDEpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudC5HZXROZXh0U2libGluZ1VwKCk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9QYXJlbnQubV9DaGlsZHNbdGhpcy5tX0luZGV4ICsgMV07XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZS5wcm90b3R5cGUuQ2hpbGRzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLlBhcmVudCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Jc0hvbGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuSXNIb2xlTm9kZSgpO1xuXHR9O1xuXG5cdC8vIFBvbHlUcmVlIDogUG9seU5vZGVcblx0LyoqXG5cdCAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fQWxsUG9seXMgPSBbXTtcblx0XHRDbGlwcGVyTGliLlBvbHlOb2RlLmNhbGwodGhpcyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0dGhpcy5tX0FsbFBvbHlzW2ldID0gbnVsbDtcblx0XHR0aGlzLm1fQWxsUG9seXMubGVuZ3RoID0gMDtcblx0XHR0aGlzLm1fQ2hpbGRzLmxlbmd0aCA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuR2V0Rmlyc3QgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seVRyZWUucHJvdG90eXBlLlRvdGFsID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciByZXN1bHQgPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoO1xuXHRcdC8vd2l0aCBuZWdhdGl2ZSBvZmZzZXRzLCBpZ25vcmUgdGhlIGhpZGRlbiBvdXRlciBwb2x5Z29uIC4uLlxuXHRcdGlmIChyZXN1bHQgPiAwICYmIHRoaXMubV9DaGlsZHNbMF0gIT09IHRoaXMubV9BbGxQb2x5c1swXSkgcmVzdWx0LS07XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRJbmhlcml0KENsaXBwZXJMaWIuUG9seVRyZWUsIENsaXBwZXJMaWIuUG9seU5vZGUpO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgZW5kXG5cblx0Q2xpcHBlckxpYi5DbGVhciA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0YS5sZW5ndGggPSAwO1xuXHR9O1xuXG5cdC8vQ2xpcHBlckxpYi5NYXhTdGVwcyA9IDY0OyAvLyBIb3cgbWFueSBzdGVwcyBhdCBtYXhpbXVtIGluIGFyYyBpbiBCdWlsZEFyYygpIGZ1bmN0aW9uXG5cdENsaXBwZXJMaWIuUEkgPSAzLjE0MTU5MjY1MzU4OTc5Mztcblx0Q2xpcHBlckxpYi5QSTIgPSAyICogMy4xNDE1OTI2NTM1ODk3OTM7XG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkZQb2ludCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHR0aGlzLlogPSAwO1xuXHRcdFx0aWYgKGFsZW4gPT09IDMpIC8vIHB1YmxpYyBGUG9pbnQoY0ludCB4LCBjSW50IHksIGNJbnQgeiA9IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IGFbMF07XG5cdFx0XHRcdHRoaXMuWSA9IGFbMV07XG5cdFx0XHRcdHRoaXMuWiA9IGFbMl07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhbGVuID09PSAyKSAvLyBwdWJsaWMgRlBvaW50KGNJbnQgeCwgY0ludCB5KVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlggPSBhWzBdO1xuXHRcdFx0XHR0aGlzLlkgPSBhWzFdO1xuXHRcdFx0XHR0aGlzLlogPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoYWxlbiA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGFbMF0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLkZQb2ludCkgLy8gcHVibGljIEZQb2ludChGUG9pbnQgZHApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZHAgPSBhWzBdO1xuXHRcdFx0XHRcdHRoaXMuWCA9IGRwLlg7XG5cdFx0XHRcdFx0dGhpcy5ZID0gZHAuWTtcblx0XHRcdFx0XHR0aGlzLlogPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgLy8gcHVibGljIEZQb2ludChGUG9pbnQgcHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgcHQgPSBhWzBdO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgKHB0LlopID09PSBcInVuZGVmaW5lZFwiKSBwdC5aID0gMDtcblx0XHRcdFx0XHR0aGlzLlggPSBwdC5YO1xuXHRcdFx0XHRcdHRoaXMuWSA9IHB0Llk7XG5cdFx0XHRcdFx0dGhpcy5aID0gcHQuWjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSAvLyBwdWJsaWMgRlBvaW50KClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5YID0gMDtcblx0XHRcdFx0dGhpcy5ZID0gMDtcblx0XHRcdFx0dGhpcy5aID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSAvLyBpZiAoIUNsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHRpZiAoYWxlbiA9PT0gMikgLy8gcHVibGljIEZQb2ludChjSW50IFgsIGNJbnQgWSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5YID0gYVswXTtcblx0XHRcdFx0dGhpcy5ZID0gYVsxXTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGFsZW4gPT09IDEpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChhWzBdIGluc3RhbmNlb2YgQ2xpcHBlckxpYi5GUG9pbnQpIC8vIHB1YmxpYyBGUG9pbnQoRlBvaW50IGRwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGRwID0gYVswXTtcblx0XHRcdFx0XHR0aGlzLlggPSBkcC5YO1xuXHRcdFx0XHRcdHRoaXMuWSA9IGRwLlk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSAvLyBwdWJsaWMgRlBvaW50KEZQb2ludCBwdClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBwdCA9IGFbMF07XG5cdFx0XHRcdFx0dGhpcy5YID0gcHQuWDtcblx0XHRcdFx0XHR0aGlzLlkgPSBwdC5ZO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIC8vIHB1YmxpYyBGUG9pbnQoRlBvaW50IHB0KVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlggPSAwO1xuXHRcdFx0XHR0aGlzLlkgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eSA9IGZ1bmN0aW9uIChhLCBiKVxuXHR7XG5cdFx0Ly9yZXR1cm4gYSA9PSBiO1xuXHRcdHJldHVybiBhLlggPT09IGIuWCAmJiBhLlkgPT09IGIuWTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkZQb2ludC5vcF9JbmVxdWFsaXR5ID0gZnVuY3Rpb24gKGEsIGIpXG5cdHtcblx0XHQvL3JldHVybiBhICE9PSBiO1xuXHRcdHJldHVybiBhLlggIT09IGIuWCB8fCBhLlkgIT09IGIuWTtcblx0fTtcblxuXHQvKlxuICBDbGlwcGVyTGliLkZQb2ludC5wcm90b3R5cGUuRXF1YWxzID0gZnVuY3Rpb24gKG9iailcbiAge1xuICAgIGlmIChvYmogPT09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgQ2xpcHBlckxpYi5GUG9pbnQpXG4gICAge1xuICAgICAgICB2YXIgYSA9IENhc3Qob2JqLCBDbGlwcGVyTGliLkZQb2ludCk7XG4gICAgICAgIHJldHVybiAodGhpcy5YID09IGEuWCkgJiYgKHRoaXMuWSA9PSBhLlkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuXHQqL1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkZQb2ludDAgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5YID0gMDtcblx0XHR0aGlzLlkgPSAwO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0XHR0aGlzLlogPSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRlBvaW50MC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkZQb2ludC5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuRlBvaW50MSA9IGZ1bmN0aW9uIChwdClcblx0e1xuXHRcdHRoaXMuWCA9IHB0Llg7XG5cdFx0dGhpcy5ZID0gcHQuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2YgcHQuWiA9PT0gXCJ1bmRlZmluZWRcIikgdGhpcy5aID0gMDtcblx0XHRcdGVsc2UgdGhpcy5aID0gcHQuWjtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5GUG9pbnQxLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRlBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5GUG9pbnQxZHAgPSBmdW5jdGlvbiAoZHApXG5cdHtcblx0XHR0aGlzLlggPSBkcC5YO1xuXHRcdHRoaXMuWSA9IGRwLlk7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHRcdHRoaXMuWiA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5GUG9pbnQxZHAucHJvdG90eXBlID0gQ2xpcHBlckxpYi5GUG9pbnQucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkZQb2ludDIgPSBmdW5jdGlvbiAoeCwgeSwgeilcblx0e1xuXHRcdHRoaXMuWCA9IHg7XG5cdFx0dGhpcy5ZID0geTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2YgeiA9PT0gXCJ1bmRlZmluZWRcIikgdGhpcy5aID0gMDtcblx0XHRcdGVsc2UgdGhpcy5aID0gejtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5GUG9pbnQyLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRlBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5GUmVjdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHRpZiAoYWxlbiA9PT0gNCkgLy8gZnVuY3Rpb24gKGwsIHQsIHIsIGIpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gYVswXTtcblx0XHRcdHRoaXMudG9wID0gYVsxXTtcblx0XHRcdHRoaXMucmlnaHQgPSBhWzJdO1xuXHRcdFx0dGhpcy5ib3R0b20gPSBhWzNdO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSAxKSAvLyBmdW5jdGlvbiAoaXIpXG5cdFx0e1xuXHRcdFx0dmFyIGlyID0gYVswXTtcblx0XHRcdHRoaXMubGVmdCA9IGlyLmxlZnQ7XG5cdFx0XHR0aGlzLnRvcCA9IGlyLnRvcDtcblx0XHRcdHRoaXMucmlnaHQgPSBpci5yaWdodDtcblx0XHRcdHRoaXMuYm90dG9tID0gaXIuYm90dG9tO1xuXHRcdH1cblx0XHRlbHNlIC8vIGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gMDtcblx0XHRcdHRoaXMudG9wID0gMDtcblx0XHRcdHRoaXMucmlnaHQgPSAwO1xuXHRcdFx0dGhpcy5ib3R0b20gPSAwO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5GUmVjdDAgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5sZWZ0ID0gMDtcblx0XHR0aGlzLnRvcCA9IDA7XG5cdFx0dGhpcy5yaWdodCA9IDA7XG5cdFx0dGhpcy5ib3R0b20gPSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRlJlY3QwLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRlJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkZSZWN0MSA9IGZ1bmN0aW9uIChpcilcblx0e1xuXHRcdHRoaXMubGVmdCA9IGlyLmxlZnQ7XG5cdFx0dGhpcy50b3AgPSBpci50b3A7XG5cdFx0dGhpcy5yaWdodCA9IGlyLnJpZ2h0O1xuXHRcdHRoaXMuYm90dG9tID0gaXIuYm90dG9tO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRlJlY3QxLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRlJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkZSZWN0NCA9IGZ1bmN0aW9uIChsLCB0LCByLCBiKVxuXHR7XG5cdFx0dGhpcy5sZWZ0ID0gbDtcblx0XHR0aGlzLnRvcCA9IHQ7XG5cdFx0dGhpcy5yaWdodCA9IHI7XG5cdFx0dGhpcy5ib3R0b20gPSBiO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRlJlY3Q0LnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRlJlY3QucHJvdG90eXBlO1xuXG5cdENsaXBwZXJMaWIuQ2xpcFR5cGUgPSB7XG5cdFx0Y3RJbnRlcnNlY3Rpb246IDAsXG5cdFx0Y3RVbmlvbjogMSxcblx0XHRjdERpZmZlcmVuY2U6IDIsXG5cdFx0Y3RYb3I6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlUeXBlID0ge1xuXHRcdHB0U3ViamVjdDogMCxcblx0XHRwdENsaXA6IDFcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlGaWxsVHlwZSA9IHtcblx0XHRwZnRFdmVuT2RkOiAwLFxuXHRcdHBmdE5vblplcm86IDEsXG5cdFx0cGZ0UG9zaXRpdmU6IDIsXG5cdFx0cGZ0TmVnYXRpdmU6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLkpvaW5UeXBlID0ge1xuXHRcdGp0U3F1YXJlOiAwLFxuXHRcdGp0Um91bmQ6IDEsXG5cdFx0anRNaXRlcjogMlxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRW5kVHlwZSA9IHtcblx0XHRldE9wZW5TcXVhcmU6IDAsXG5cdFx0ZXRPcGVuUm91bmQ6IDEsXG5cdFx0ZXRPcGVuQnV0dDogMixcblx0XHRldENsb3NlZExpbmU6IDMsXG5cdFx0ZXRDbG9zZWRQb2x5Z29uOiA0XG5cdH07XG5cblx0Q2xpcHBlckxpYi5FZGdlU2lkZSA9IHtcblx0XHRlc0xlZnQ6IDAsXG5cdFx0ZXNSaWdodDogMVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRGlyZWN0aW9uID0ge1xuXHRcdGRSaWdodFRvTGVmdDogMCxcblx0XHRkTGVmdFRvUmlnaHQ6IDFcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5URWRnZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLkJvdCA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDAoKTtcblx0XHR0aGlzLkN1cnIgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQwKCk7IC8vY3VycmVudCAodXBkYXRlZCBmb3IgZXZlcnkgbmV3IHNjYW5iZWFtKVxuXHRcdHRoaXMuVG9wID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MCgpO1xuXHRcdHRoaXMuRGVsdGEgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQwKCk7XG5cdFx0dGhpcy5EeCA9IDA7XG5cdFx0dGhpcy5Qb2x5VHlwID0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3Q7XG5cdFx0dGhpcy5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQ7IC8vc2lkZSBvbmx5IHJlZmVycyB0byBjdXJyZW50IHNpZGUgb2Ygc29sdXRpb24gcG9seVxuXHRcdHRoaXMuV2luZERlbHRhID0gMDsgLy8xIG9yIC0xIGRlcGVuZGluZyBvbiB3aW5kaW5nIGRpcmVjdGlvblxuXHRcdHRoaXMuV2luZENudCA9IDA7XG5cdFx0dGhpcy5XaW5kQ250MiA9IDA7IC8vd2luZGluZyBjb3VudCBvZiB0aGUgb3Bwb3NpdGUgcG9seXR5cGVcblx0XHR0aGlzLk91dElkeCA9IDA7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0XHR0aGlzLlByZXYgPSBudWxsO1xuXHRcdHRoaXMuTmV4dEluTE1MID0gbnVsbDtcblx0XHR0aGlzLk5leHRJbkFFTCA9IG51bGw7XG5cdFx0dGhpcy5QcmV2SW5BRUwgPSBudWxsO1xuXHRcdHRoaXMuTmV4dEluU0VMID0gbnVsbDtcblx0XHR0aGlzLlByZXZJblNFTCA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50ZXJzZWN0Tm9kZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLkVkZ2UxID0gbnVsbDtcblx0XHR0aGlzLkVkZ2UyID0gbnVsbDtcblx0XHR0aGlzLlB0ID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MCgpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuTXlJbnRlcnNlY3ROb2RlU29ydCA9IGZ1bmN0aW9uICgpIHt9O1xuXG5cdENsaXBwZXJMaWIuTXlJbnRlcnNlY3ROb2RlU29ydC5Db21wYXJlID0gZnVuY3Rpb24gKG5vZGUxLCBub2RlMilcblx0e1xuXHRcdHZhciBpID0gbm9kZTIuUHQuWSAtIG5vZGUxLlB0Llk7XG5cdFx0aWYgKGkgPiAwKSByZXR1cm4gMTtcblx0XHRlbHNlIGlmIChpIDwgMCkgcmV0dXJuIC0xO1xuXHRcdGVsc2UgcmV0dXJuIDA7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuTG9jYWxNaW5pbWEgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5ZID0gMDtcblx0XHR0aGlzLkxlZnRCb3VuZCA9IG51bGw7XG5cdFx0dGhpcy5SaWdodEJvdW5kID0gbnVsbDtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLlNjYW5iZWFtID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5NYXhpbWEgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5YID0gMDtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdH07XG5cblx0Ly9PdXRSZWM6IGNvbnRhaW5zIGEgcGF0aCBpbiB0aGUgY2xpcHBpbmcgc29sdXRpb24uIEVkZ2VzIGluIHRoZSBBRUwgd2lsbFxuXHQvL2NhcnJ5IGEgcG9pbnRlciB0byBhbiBPdXRSZWMgd2hlbiB0aGV5IGFyZSBwYXJ0IG9mIHRoZSBjbGlwcGluZyBzb2x1dGlvbi5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuT3V0UmVjID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuSWR4ID0gMDtcblx0XHR0aGlzLklzSG9sZSA9IGZhbHNlO1xuXHRcdHRoaXMuSXNPcGVuID0gZmFsc2U7XG5cdFx0dGhpcy5GaXJzdExlZnQgPSBudWxsOyAvL3NlZSBjb21tZW50cyBpbiBjbGlwcGVyLnBhc1xuXHRcdHRoaXMuUHRzID0gbnVsbDtcblx0XHR0aGlzLkJvdHRvbVB0ID0gbnVsbDtcblx0XHR0aGlzLlBvbHlOb2RlID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5PdXRQdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLklkeCA9IDA7XG5cdFx0dGhpcy5QdCA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDAoKTtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSm9pbiA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLk91dFB0MSA9IG51bGw7XG5cdFx0dGhpcy5PdXRQdDIgPSBudWxsO1xuXHRcdHRoaXMuT2ZmUHQgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQwKCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fTWluaW1hTGlzdCA9IG51bGw7XG5cdFx0dGhpcy5tX0N1cnJlbnRMTSA9IG51bGw7XG5cdFx0dGhpcy5tX2VkZ2VzID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0hhc09wZW5QYXRocyA9IGZhbHNlO1xuXHRcdHRoaXMuUHJlc2VydmVDb2xsaW5lYXIgPSBmYWxzZTtcblx0XHR0aGlzLm1fU2NhbmJlYW0gPSBudWxsO1xuXHRcdHRoaXMubV9Qb2x5T3V0cyA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgPSAtMy40RSszODtcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwID0gLTI7XG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZCA9IC0xO1xuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSA9IDFFLTIwO1xuXG5cdC8vIFRoZSBNQVhfVkFMVUUgcHJvcGVydHkgaGFzIGEgdmFsdWUgb2YgMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDguIFZhbHVlcyBsYXJnZXIgdGhhbiBNQVhfVkFMVUUgYXJlIHJlcHJlc2VudGVkIGFzIFwiSW5maW5pdHlcIi5cblx0Ly9NSU5fVkFMVUUgaGFzIGEgdmFsdWUgb2YgNWUtMzI0LiBWYWx1ZXMgc21hbGxlciB0aGFuIE1JTl9WQUxVRSAoXCJ1bmRlcmZsb3cgdmFsdWVzXCIpIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5tYXhWYWx1ZSA9IE1hdGguc3FydChOdW1iZXIuTUFYX1ZBTFVFKTsgLy8gMS4zNDA3ODA3OTI5OTQyNTk2ZSsxNTRcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5taW5WYWx1ZSA9IE1hdGguc3FydChOdW1iZXIuTUlOX1ZBTFVFKTsgLy8gMi4yMjI3NTg3NDk0ODUwNzc1ZS0xNjJcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm5lYXJfemVybyA9IGZ1bmN0aW9uICh2YWwpXG5cdHtcblx0XHRyZXR1cm4gKHZhbCA+IC1DbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSkgJiYgKHZhbCA8IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UudG9sZXJhbmNlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0cmV0dXJuIGUuRGVsdGEuWSA9PT0gMDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb2ludElzVmVydGV4ID0gZnVuY3Rpb24gKHB0LCBwcClcblx0e1xuXHRcdHZhciBwcDIgPSBwcDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocHAyLlB0LCBwdCkpXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0cHAyID0gcHAyLk5leHQ7XG5cdFx0fVxuXHRcdHdoaWxlIChwcDIgIT09IHBwKVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb2ludE9uTGluZVNlZ21lbnQgPSBmdW5jdGlvbiAocHQsIGxpbmVQdDEsIGxpbmVQdDIpXG5cdHtcblx0XHRcdHJldHVybiAoKHB0LlggPT09IGxpbmVQdDEuWCkgJiYgKHB0LlkgPT09IGxpbmVQdDEuWSkpIHx8ICgocHQuWCA9PT0gbGluZVB0Mi5YKSAmJiAocHQuWSA9PT0gbGluZVB0Mi5ZKSkgfHwgKCgocHQuWCA+IGxpbmVQdDEuWCkgPT09IChwdC5YIDwgbGluZVB0Mi5YKSkgJiYgKChwdC5ZID4gbGluZVB0MS5ZKSA9PT0gKHB0LlkgPCBsaW5lUHQyLlkpKSAmJiAoKHB0LlggLSBsaW5lUHQxLlgpICogKGxpbmVQdDIuWSAtIGxpbmVQdDEuWSkgPT09IChsaW5lUHQyLlggLSBsaW5lUHQxLlgpICogKHB0LlkgLSBsaW5lUHQxLlkpKSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUG9pbnRPblBvbHlnb24gPSBmdW5jdGlvbiAocHQsIHBwKVxuXHR7XG5cdFx0dmFyIHBwMiA9IHBwO1xuXHRcdHdoaWxlICh0cnVlKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLlBvaW50T25MaW5lU2VnbWVudChwdCwgcHAyLlB0LCBwcDIuTmV4dC5QdCkpXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0cHAyID0gcHAyLk5leHQ7XG5cdFx0XHRpZiAocHAyID09PSBwcClcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5TbG9wZXNFcXVhbCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWwgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRhbGVuID0gYS5sZW5ndGg7XG5cdFx0dmFyIGUxLCBlMiwgcHQxLCBwdDIsIHB0MywgcHQ0O1xuXHRcdGlmIChhbGVuID09PSAyKSAvLyBmdW5jdGlvbiAoZTEsIGUyKVxuXHRcdHtcblx0XHRcdGUxID0gYVswXTtcblx0XHRcdGUyID0gYVsxXTtcblx0XHRcdHJldHVybiBlMS5EZWx0YS5ZICogZTIuRGVsdGEuWCA9PT0gZTEuRGVsdGEuWCAqIGUyLkRlbHRhLlk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFsZW4gPT09IDMpIC8vIGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzKVxuXHRcdHtcblx0XHRcdHB0MSA9IGFbMF07XG5cdFx0XHRwdDIgPSBhWzFdO1xuXHRcdFx0cHQzID0gYVsyXTtcblx0XHRcdHJldHVybiAocHQxLlkgLSBwdDIuWSkgKiAocHQyLlggLSBwdDMuWCkgLSAocHQxLlggLSBwdDIuWCkgKiAocHQyLlkgLSBwdDMuWSkgPT09IDA7XG5cdFx0fVxuXHRcdGVsc2UgLy8gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NClcblx0XHR7XG5cdFx0XHRwdDEgPSBhWzBdO1xuXHRcdFx0cHQyID0gYVsxXTtcblx0XHRcdHB0MyA9IGFbMl07XG5cdFx0XHRwdDQgPSBhWzNdO1xuXHRcdFx0cmV0dXJuIChwdDEuWSAtIHB0Mi5ZKSAqIChwdDMuWCAtIHB0NC5YKSAtIChwdDEuWCAtIHB0Mi5YKSAqIChwdDMuWSAtIHB0NC5ZKSA9PT0gMDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDMgPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0cmV0dXJuIGUxLkRlbHRhLlkgKiBlMi5EZWx0YS5YID09PSBlMS5EZWx0YS5YICogZTIuRGVsdGEuWTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNCA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzKVxuXHR7XG5cdFx0cmV0dXJuIChwdDEuWSAtIHB0Mi5ZKSAqIChwdDIuWCAtIHB0My5YKSAtIChwdDEuWCAtIHB0Mi5YKSAqIChwdDIuWSAtIHB0My5ZKSA9PT0gMDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNSA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBwdDQpXG5cdHtcblx0XHRyZXR1cm4gKHB0MS5ZIC0gcHQyLlkpICogKHB0My5YIC0gcHQ0LlgpIC0gKHB0MS5YIC0gcHQyLlgpICogKHB0My5ZIC0gcHQ0LlkpID09PSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkNsZWFyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuRGlzcG9zZUxvY2FsTWluaW1hTGlzdCgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX2VkZ2VzLmxlbmd0aDsgaSA8IGlsZW47ICsraSlcblx0XHR7XG5cdFx0XHRmb3IgKHZhciBqID0gMCwgamxlbiA9IHRoaXMubV9lZGdlc1tpXS5sZW5ndGg7IGogPCBqbGVuOyArK2opXG5cdFx0XHRcdHRoaXMubV9lZGdlc1tpXVtqXSA9IG51bGw7XG5cdFx0XHRDbGlwcGVyTGliLkNsZWFyKHRoaXMubV9lZGdlc1tpXSk7XG5cdFx0fVxuXHRcdENsaXBwZXJMaWIuQ2xlYXIodGhpcy5tX2VkZ2VzKTtcblx0XHR0aGlzLm1fSGFzT3BlblBhdGhzID0gZmFsc2U7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGlzcG9zZUxvY2FsTWluaW1hTGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR3aGlsZSAodGhpcy5tX01pbmltYUxpc3QgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHRtcExtID0gdGhpcy5tX01pbmltYUxpc3QuTmV4dDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbnVsbDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gdG1wTG07XG5cdFx0fVxuXHRcdHRoaXMubV9DdXJyZW50TE0gPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlJhbmdlVGVzdCA9IGZ1bmN0aW9uIChwdClcblx0e1xuXHRcdGlmKHB0LlggPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm1heFZhbHVlIHx8IHB0LlggPCAtQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5tYXhWYWx1ZVxuXHRcdHx8IHB0LlkgPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm1heFZhbHVlIHx8IHB0LlkgPCAtQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5tYXhWYWx1ZVxufHwgKHB0LlggPiAwICYmIHB0LlggPCBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm1pblZhbHVlKVxufHwgKHB0LlkgPiAwICYmIHB0LlkgPCBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm1pblZhbHVlKVxufHwgKHB0LlggPCAwICYmIHB0LlggPiAtQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5taW5WYWx1ZSlcbnx8IChwdC5ZIDwgMCAmJiBwdC5ZID4gLUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UubWluVmFsdWUpKVxuXHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIkNvb3JkaW5hdGUgb3V0c2lkZSBhbGxvd2VkIHJhbmdlIGluIFJhbmdlVGVzdCgpLlwiKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Jbml0RWRnZSA9IGZ1bmN0aW9uIChlLCBlTmV4dCwgZVByZXYsIHB0KVxuXHR7XG5cdFx0ZS5OZXh0ID0gZU5leHQ7XG5cdFx0ZS5QcmV2ID0gZVByZXY7XG5cdFx0Ly9lLkN1cnIgPSBwdDtcblx0XHRlLkN1cnIuWCA9IHB0Llg7XG5cdFx0ZS5DdXJyLlkgPSBwdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQ3Vyci5aID0gcHQuWjtcblx0XHRlLk91dElkeCA9IC0xO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluaXRFZGdlMiA9IGZ1bmN0aW9uIChlLCBwb2x5VHlwZSlcblx0e1xuXHRcdGlmIChlLkN1cnIuWSA+PSBlLk5leHQuQ3Vyci5ZKVxuXHRcdHtcblx0XHRcdC8vZS5Cb3QgPSBlLkN1cnI7XG5cdFx0XHRlLkJvdC5YID0gZS5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5DdXJyLlk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkJvdC5aID0gZS5DdXJyLlo7XG5cdFx0XHQvL2UuVG9wID0gZS5OZXh0LkN1cnI7XG5cdFx0XHRlLlRvcC5YID0gZS5OZXh0LkN1cnIuWDtcblx0XHRcdGUuVG9wLlkgPSBlLk5leHQuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuTmV4dC5DdXJyLlo7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL2UuVG9wID0gZS5DdXJyO1xuXHRcdFx0ZS5Ub3AuWCA9IGUuQ3Vyci5YO1xuXHRcdFx0ZS5Ub3AuWSA9IGUuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuQ3Vyci5aO1xuXHRcdFx0Ly9lLkJvdCA9IGUuTmV4dC5DdXJyO1xuXHRcdFx0ZS5Cb3QuWCA9IGUuTmV4dC5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5OZXh0LkN1cnIuWTtcblx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQm90LlogPSBlLk5leHQuQ3Vyci5aO1xuXHRcdH1cblx0XHR0aGlzLlNldER4KGUpO1xuXHRcdGUuUG9seVR5cCA9IHBvbHlUeXBlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkZpbmROZXh0TG9jTWluID0gZnVuY3Rpb24gKEUpXG5cdHtcblx0XHR2YXIgRTI7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHR3aGlsZSAoQ2xpcHBlckxpYi5GUG9pbnQub3BfSW5lcXVhbGl0eShFLkJvdCwgRS5QcmV2LkJvdCkgfHwgQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkoRS5DdXJyLCBFLlRvcCkpXG5cdFx0XHRcdEUgPSBFLk5leHQ7XG5cdFx0XHRpZiAoRS5EeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUuUHJldi5EeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdHdoaWxlIChFLlByZXYuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHRcdFx0RSA9IEUuUHJldjtcblx0XHRcdEUyID0gRTtcblx0XHRcdHdoaWxlIChFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdEUgPSBFLk5leHQ7XG5cdFx0XHRpZiAoRS5Ub3AuWSA9PT0gRS5QcmV2LkJvdC5ZKVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdC8vaWUganVzdCBhbiBpbnRlcm1lZGlhdGUgaG9yei5cblx0XHRcdGlmIChFMi5QcmV2LkJvdC5YIDwgRS5Cb3QuWClcblx0XHRcdFx0RSA9IEUyO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiBFO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlByb2Nlc3NCb3VuZCA9IGZ1bmN0aW9uIChFLCBMZWZ0Qm91bmRJc0ZvcndhcmQpXG5cdHtcblx0XHR2YXIgRVN0YXJ0O1xuXHRcdHZhciBSZXN1bHQgPSBFO1xuXHRcdHZhciBIb3J6O1xuXG5cdFx0aWYgKFJlc3VsdC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHR7XG5cdFx0XHQvL2NoZWNrIGlmIHRoZXJlIGFyZSBlZGdlcyBiZXlvbmQgdGhlIHNraXAgZWRnZSBpbiB0aGUgYm91bmQgYW5kIGlmIHNvXG5cdFx0XHQvL2NyZWF0ZSBhbm90aGVyIExvY01pbiBhbmQgY2FsbGluZyBQcm9jZXNzQm91bmQgb25jZSBtb3JlIC4uLlxuXHRcdFx0RSA9IFJlc3VsdDtcblx0XHRcdGlmIChMZWZ0Qm91bmRJc0ZvcndhcmQpXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlIChFLlRvcC5ZID09PSBFLk5leHQuQm90LlkpIEUgPSBFLk5leHQ7XG5cdFx0XHRcdHdoaWxlIChFICE9PSBSZXN1bHQgJiYgRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKSBFID0gRS5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZSAoRS5Ub3AuWSA9PT0gRS5QcmV2LkJvdC5ZKSBFID0gRS5QcmV2O1xuXHRcdFx0XHR3aGlsZSAoRSAhPT0gUmVzdWx0ICYmIEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCkgRSA9IEUuTmV4dDtcblx0XHRcdH1cblx0XHRcdGlmIChFID09PSBSZXN1bHQpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChMZWZ0Qm91bmRJc0ZvcndhcmQpIFJlc3VsdCA9IEUuTmV4dDtcblx0XHRcdFx0ZWxzZSBSZXN1bHQgPSBFLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vdGhlcmUgYXJlIG1vcmUgZWRnZXMgaW4gdGhlIGJvdW5kIGJleW9uZCByZXN1bHQgc3RhcnRpbmcgd2l0aCBFXG5cdFx0XHRcdGlmIChMZWZ0Qm91bmRJc0ZvcndhcmQpXG5cdFx0XHRcdFx0RSA9IFJlc3VsdC5OZXh0O1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0RSA9IFJlc3VsdC5QcmV2O1xuXHRcdFx0XHR2YXIgbG9jTWluID0gbmV3IENsaXBwZXJMaWIuTG9jYWxNaW5pbWEoKTtcblx0XHRcdFx0bG9jTWluLk5leHQgPSBudWxsO1xuXHRcdFx0XHRsb2NNaW4uWSA9IEUuQm90Llk7XG5cdFx0XHRcdGxvY01pbi5MZWZ0Qm91bmQgPSBudWxsO1xuXHRcdFx0XHRsb2NNaW4uUmlnaHRCb3VuZCA9IEU7XG5cdFx0XHRcdEUuV2luZERlbHRhID0gMDtcblx0XHRcdFx0UmVzdWx0ID0gdGhpcy5Qcm9jZXNzQm91bmQoRSwgTGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYShsb2NNaW4pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFJlc3VsdDtcblx0XHR9XG5cblx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdHtcblx0XHRcdC8vV2UgbmVlZCB0byBiZSBjYXJlZnVsIHdpdGggb3BlbiBwYXRocyBiZWNhdXNlIHRoaXMgbWF5IG5vdCBiZSBhXG5cdFx0XHQvL3RydWUgbG9jYWwgbWluaW1hIChpZSBFIG1heSBiZSBmb2xsb3dpbmcgYSBza2lwIGVkZ2UpLlxuXHRcdFx0Ly9BbHNvLCBjb25zZWN1dGl2ZSBob3J6LiBlZGdlcyBtYXkgc3RhcnQgaGVhZGluZyBsZWZ0IGJlZm9yZSBnb2luZyByaWdodC5cblx0XHRcdGlmIChMZWZ0Qm91bmRJc0ZvcndhcmQpIEVTdGFydCA9IEUuUHJldjtcblx0XHRcdGVsc2UgRVN0YXJ0ID0gRS5OZXh0O1xuXG5cdFx0XHRpZiAoRVN0YXJ0LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpIC8vaWUgYW4gYWRqb2luaW5nIGhvcml6b250YWwgc2tpcCBlZGdlXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChFU3RhcnQuQm90LlggIT09IEUuQm90LlggJiYgRVN0YXJ0LlRvcC5YICE9PSBFLkJvdC5YKVxuXHRcdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChFU3RhcnQuQm90LlggIT09IEUuQm90LlgpXG5cdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0fVxuXG5cdFx0RVN0YXJ0ID0gRTtcblx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHRcdHtcblx0XHRcdHdoaWxlIChSZXN1bHQuVG9wLlkgPT09IFJlc3VsdC5OZXh0LkJvdC5ZICYmIFJlc3VsdC5OZXh0Lk91dElkeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRSZXN1bHQgPSBSZXN1bHQuTmV4dDtcblx0XHRcdGlmIChSZXN1bHQuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBSZXN1bHQuTmV4dC5PdXRJZHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdHtcblx0XHRcdFx0Ly9uYjogYXQgdGhlIHRvcCBvZiBhIGJvdW5kLCBob3Jpem9udGFscyBhcmUgYWRkZWQgdG8gdGhlIGJvdW5kXG5cdFx0XHRcdC8vb25seSB3aGVuIHRoZSBwcmVjZWRpbmcgZWRnZSBhdHRhY2hlcyB0byB0aGUgaG9yaXpvbnRhbCdzIGxlZnQgdmVydGV4XG5cdFx0XHRcdC8vdW5sZXNzIGEgU2tpcCBlZGdlIGlzIGVuY291bnRlcmVkIHdoZW4gdGhhdCBiZWNvbWVzIHRoZSB0b3AgZGl2aWRlXG5cdFx0XHRcdEhvcnogPSBSZXN1bHQ7XG5cdFx0XHRcdHdoaWxlIChIb3J6LlByZXYuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHRcdFx0XHRIb3J6ID0gSG9yei5QcmV2O1xuXHRcdFx0XHRpZiAoSG9yei5QcmV2LlRvcC5YID4gUmVzdWx0Lk5leHQuVG9wLlgpXG5cdFx0XHRcdFx0UmVzdWx0ID0gSG9yei5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKEUgIT09IFJlc3VsdClcblx0XHRcdHtcblx0XHRcdFx0RS5OZXh0SW5MTUwgPSBFLk5leHQ7XG5cdFx0XHRcdGlmIChFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgRSAhPT0gRVN0YXJ0ICYmIEUuQm90LlggIT09IEUuUHJldi5Ub3AuWClcblx0XHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBFICE9PSBFU3RhcnQgJiYgRS5Cb3QuWCAhPT0gRS5QcmV2LlRvcC5YKVxuXHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0UmVzdWx0ID0gUmVzdWx0Lk5leHQ7XG5cdFx0XHQvL21vdmUgdG8gdGhlIGVkZ2UganVzdCBiZXlvbmQgY3VycmVudCBib3VuZFxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0d2hpbGUgKFJlc3VsdC5Ub3AuWSA9PT0gUmVzdWx0LlByZXYuQm90LlkgJiYgUmVzdWx0LlByZXYuT3V0SWR4ICE9PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0XHRcdFJlc3VsdCA9IFJlc3VsdC5QcmV2O1xuXHRcdFx0aWYgKFJlc3VsdC5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIFJlc3VsdC5QcmV2Lk91dElkeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0e1xuXHRcdFx0XHRIb3J6ID0gUmVzdWx0O1xuXHRcdFx0XHR3aGlsZSAoSG9yei5OZXh0LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdFx0SG9yeiA9IEhvcnouTmV4dDtcblx0XHRcdFx0aWYgKEhvcnouTmV4dC5Ub3AuWCA9PT0gUmVzdWx0LlByZXYuVG9wLlggfHwgSG9yei5OZXh0LlRvcC5YID4gUmVzdWx0LlByZXYuVG9wLlgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRSZXN1bHQgPSBIb3J6Lk5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlIChFICE9PSBSZXN1bHQpXG5cdFx0XHR7XG5cdFx0XHRcdEUuTmV4dEluTE1MID0gRS5QcmV2O1xuXHRcdFx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUgIT09IEVTdGFydCAmJiBFLkJvdC5YICE9PSBFLk5leHQuVG9wLlgpXG5cdFx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFx0RSA9IEUuUHJldjtcblx0XHRcdH1cblx0XHRcdGlmIChFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgRSAhPT0gRVN0YXJ0ICYmIEUuQm90LlggIT09IEUuTmV4dC5Ub3AuWClcblx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFJlc3VsdCA9IFJlc3VsdC5QcmV2O1xuXHRcdFx0Ly9tb3ZlIHRvIHRoZSBlZGdlIGp1c3QgYmV5b25kIGN1cnJlbnQgYm91bmRcblx0XHR9XG5cblx0XHRyZXR1cm4gUmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkFkZFBhdGggPSBmdW5jdGlvbiAocGcsIHBvbHlUeXBlLCBDbG9zZWQpXG5cdHtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfbGluZXMpXG5cdFx0e1xuXHRcdFx0aWYgKCFDbG9zZWQgJiYgcG9seVR5cGUgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRDbGlwKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiQWRkUGF0aDogT3BlbiBwYXRocyBtdXN0IGJlIHN1YmplY3QuXCIpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKCFDbG9zZWQpXG5cdFx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJBZGRQYXRoOiBPcGVuIHBhdGhzIGhhdmUgYmVlbiBkaXNhYmxlZC5cIik7XG5cdFx0fVxuXHRcdHZhciBoaWdoSSA9IHBnLmxlbmd0aCAtIDE7XG5cdFx0aWYgKENsb3NlZClcblx0XHRcdHdoaWxlIChoaWdoSSA+IDAgJiYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHBnW2hpZ2hJXSwgcGdbMF0pKSlcblx0XHRcdFx0LS1oaWdoSTtcblx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShwZ1toaWdoSV0sIHBnW2hpZ2hJIC0gMV0pKSlcblx0XHRcdC0taGlnaEk7XG5cdFx0aWYgKChDbG9zZWQgJiYgaGlnaEkgPCAyKSB8fCAoIUNsb3NlZCAmJiBoaWdoSSA8IDEpKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdC8vY3JlYXRlIGEgbmV3IGVkZ2UgYXJyYXkgLi4uXG5cdFx0dmFyIGVkZ2VzID0gbmV3IEFycmF5KCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gaGlnaEk7IGkrKylcblx0XHRcdGVkZ2VzLnB1c2gobmV3IENsaXBwZXJMaWIuVEVkZ2UoKSk7XG5cdFx0dmFyIElzRmxhdCA9IHRydWU7XG5cdFx0Ly8xLiBCYXNpYyAoZmlyc3QpIGVkZ2UgaW5pdGlhbGl6YXRpb24gLi4uXG5cblx0XHQvL2VkZ2VzWzFdLkN1cnIgPSBwZ1sxXTtcblx0XHRlZGdlc1sxXS5DdXJyLlggPSBwZ1sxXS5YO1xuXHRcdGVkZ2VzWzFdLkN1cnIuWSA9IHBnWzFdLlk7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZWRnZXNbMV0uQ3Vyci5aID0gcGdbMV0uWjtcblxuXHRcdHRoaXMuUmFuZ2VUZXN0KHBnWzBdKTtcblxuXHRcdHRoaXMuUmFuZ2VUZXN0KHBnW2hpZ2hJXSk7XG5cblx0XHR0aGlzLkluaXRFZGdlKGVkZ2VzWzBdLCBlZGdlc1sxXSwgZWRnZXNbaGlnaEldLCBwZ1swXSk7XG5cdFx0dGhpcy5Jbml0RWRnZShlZGdlc1toaWdoSV0sIGVkZ2VzWzBdLCBlZGdlc1toaWdoSSAtIDFdLCBwZ1toaWdoSV0pO1xuXHRcdGZvciAodmFyIGkgPSBoaWdoSSAtIDE7IGkgPj0gMTsgLS1pKVxuXHRcdHtcblx0XHRcdHRoaXMuUmFuZ2VUZXN0KHBnW2ldKTtcblxuXHRcdFx0dGhpcy5Jbml0RWRnZShlZGdlc1tpXSwgZWRnZXNbaSArIDFdLCBlZGdlc1tpIC0gMV0sIHBnW2ldKTtcblx0XHR9XG5cblx0XHR2YXIgZVN0YXJ0ID0gZWRnZXNbMF07XG5cdFx0Ly8yLiBSZW1vdmUgZHVwbGljYXRlIHZlcnRpY2VzLCBhbmQgKHdoZW4gY2xvc2VkKSBjb2xsaW5lYXIgZWRnZXMgLi4uXG5cdFx0dmFyIEUgPSBlU3RhcnQsXG5cdFx0XHRlTG9vcFN0b3AgPSBlU3RhcnQ7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHQvL2NvbnNvbGUubG9nKEUuTmV4dCwgZVN0YXJ0KTtcblx0XHRcdC8vbmI6IGFsbG93cyBtYXRjaGluZyBzdGFydCBhbmQgZW5kIHBvaW50cyB3aGVuIG5vdCBDbG9zZWQgLi4uXG5cdFx0XHRpZiAoRS5DdXJyID09PSBFLk5leHQuQ3VyciAmJiAoQ2xvc2VkIHx8IEUuTmV4dCAhPT0gZVN0YXJ0KSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKEUgPT09IEUuTmV4dClcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0aWYgKEUgPT09IGVTdGFydClcblx0XHRcdFx0XHRlU3RhcnQgPSBFLk5leHQ7XG5cdFx0XHRcdEUgPSB0aGlzLlJlbW92ZUVkZ2UoRSk7XG5cdFx0XHRcdGVMb29wU3RvcCA9IEU7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKEUuUHJldiA9PT0gRS5OZXh0KVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGVsc2UgaWYgKENsb3NlZCAmJiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChFLlByZXYuQ3VyciwgRS5DdXJyLCBFLk5leHQuQ3VycikgJiYgKCF0aGlzLlByZXNlcnZlQ29sbGluZWFyIHx8ICF0aGlzLlB0MklzQmV0d2VlblB0MUFuZFB0MyhFLlByZXYuQ3VyciwgRS5DdXJyLCBFLk5leHQuQ3VycikpKVxuXHRcdFx0e1xuXHRcdFx0XHQvL0NvbGxpbmVhciBlZGdlcyBhcmUgYWxsb3dlZCBmb3Igb3BlbiBwYXRocyBidXQgaW4gY2xvc2VkIHBhdGhzXG5cdFx0XHRcdC8vdGhlIGRlZmF1bHQgaXMgdG8gbWVyZ2UgYWRqYWNlbnQgY29sbGluZWFyIGVkZ2VzIGludG8gYSBzaW5nbGUgZWRnZS5cblx0XHRcdFx0Ly9Ib3dldmVyLCBpZiB0aGUgUHJlc2VydmVDb2xsaW5lYXIgcHJvcGVydHkgaXMgZW5hYmxlZCwgb25seSBvdmVybGFwcGluZ1xuXHRcdFx0XHQvL2NvbGxpbmVhciBlZGdlcyAoaWUgc3Bpa2VzKSB3aWxsIGJlIHJlbW92ZWQgZnJvbSBjbG9zZWQgcGF0aHMuXG5cdFx0XHRcdGlmIChFID09PSBlU3RhcnQpXG5cdFx0XHRcdFx0ZVN0YXJ0ID0gRS5OZXh0O1xuXHRcdFx0XHRFID0gdGhpcy5SZW1vdmVFZGdlKEUpO1xuXHRcdFx0XHRFID0gRS5QcmV2O1xuXHRcdFx0XHRlTG9vcFN0b3AgPSBFO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdEUgPSBFLk5leHQ7XG5cdFx0XHRpZiAoKEUgPT09IGVMb29wU3RvcCkgfHwgKCFDbG9zZWQgJiYgRS5OZXh0ID09PSBlU3RhcnQpKSBicmVhaztcblx0XHR9XG5cdFx0aWYgKCghQ2xvc2VkICYmIChFID09PSBFLk5leHQpKSB8fCAoQ2xvc2VkICYmIChFLlByZXYgPT09IEUuTmV4dCkpKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdGlmICghQ2xvc2VkKVxuXHRcdHtcblx0XHRcdHRoaXMubV9IYXNPcGVuUGF0aHMgPSB0cnVlO1xuXHRcdFx0ZVN0YXJ0LlByZXYuT3V0SWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwO1xuXHRcdH1cblx0XHQvLzMuIERvIHNlY29uZCBzdGFnZSBvZiBlZGdlIGluaXRpYWxpemF0aW9uIC4uLlxuXHRcdEUgPSBlU3RhcnQ7XG5cdFx0ZG8ge1xuXHRcdFx0dGhpcy5Jbml0RWRnZTIoRSwgcG9seVR5cGUpO1xuXHRcdFx0RSA9IEUuTmV4dDtcblx0XHRcdGlmIChJc0ZsYXQgJiYgRS5DdXJyLlkgIT09IGVTdGFydC5DdXJyLlkpXG5cdFx0XHRcdElzRmxhdCA9IGZhbHNlO1xuXHRcdH1cblx0XHR3aGlsZSAoRSAhPT0gZVN0YXJ0KVxuXHRcdC8vNC4gRmluYWxseSwgYWRkIGVkZ2UgYm91bmRzIHRvIExvY2FsTWluaW1hIGxpc3QgLi4uXG5cdFx0Ly9Ub3RhbGx5IGZsYXQgcGF0aHMgbXVzdCBiZSBoYW5kbGVkIGRpZmZlcmVudGx5IHdoZW4gYWRkaW5nIHRoZW1cblx0XHQvL3RvIExvY2FsTWluaW1hIGxpc3QgdG8gYXZvaWQgZW5kbGVzcyBsb29wcyBldGMgLi4uXG5cdFx0aWYgKElzRmxhdClcblx0XHR7XG5cdFx0XHRpZiAoQ2xvc2VkKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdEUuUHJldi5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXA7XG5cblx0XHRcdHZhciBsb2NNaW4gPSBuZXcgQ2xpcHBlckxpYi5Mb2NhbE1pbmltYSgpO1xuXHRcdFx0bG9jTWluLk5leHQgPSBudWxsO1xuXHRcdFx0bG9jTWluLlkgPSBFLkJvdC5ZO1xuXHRcdFx0bG9jTWluLkxlZnRCb3VuZCA9IG51bGw7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZCA9IEU7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc1JpZ2h0O1xuXHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQuV2luZERlbHRhID0gMDtcblxuXHRcdFx0Zm9yICg7Oylcblx0XHRcdHtcblx0XHRcdFx0aWYgKEUuQm90LlggIT09IEUuUHJldi5Ub3AuWCkgdGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFx0aWYgKEUuTmV4dC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcCkgYnJlYWs7XG5cdFx0XHRcdEUuTmV4dEluTE1MID0gRS5OZXh0O1xuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYShsb2NNaW4pO1xuXHRcdFx0dGhpcy5tX2VkZ2VzLnB1c2goZWRnZXMpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHRoaXMubV9lZGdlcy5wdXNoKGVkZ2VzKTtcblx0XHR2YXIgbGVmdEJvdW5kSXNGb3J3YXJkO1xuXHRcdHZhciBFTWluID0gbnVsbDtcblxuXHRcdC8vd29ya2Fyb3VuZCB0byBhdm9pZCBhbiBlbmRsZXNzIGxvb3AgaW4gdGhlIHdoaWxlIGxvb3AgYmVsb3cgd2hlblxuXHRcdC8vb3BlbiBwYXRocyBoYXZlIG1hdGNoaW5nIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIC4uLlxuXHRcdGlmIChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShFLlByZXYuQm90LCBFLlByZXYuVG9wKSlcblx0XHRcdEUgPSBFLk5leHQ7XG5cblx0XHRmb3IgKDs7KVxuXHRcdHtcblx0XHRcdEUgPSB0aGlzLkZpbmROZXh0TG9jTWluKEUpO1xuXHRcdFx0aWYgKEUgPT09IEVNaW4pXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZWxzZSBpZiAoRU1pbiA9PT0gbnVsbClcblx0XHRcdFx0RU1pbiA9IEU7XG5cdFx0XHQvL0UgYW5kIEUuUHJldiBub3cgc2hhcmUgYSBsb2NhbCBtaW5pbWEgKGxlZnQgYWxpZ25lZCBpZiBob3Jpem9udGFsKS5cblx0XHRcdC8vQ29tcGFyZSB0aGVpciBzbG9wZXMgdG8gZmluZCB3aGljaCBzdGFydHMgd2hpY2ggYm91bmQgLi4uXG5cdFx0XHR2YXIgbG9jTWluID0gbmV3IENsaXBwZXJMaWIuTG9jYWxNaW5pbWEoKTtcblx0XHRcdGxvY01pbi5OZXh0ID0gbnVsbDtcblx0XHRcdGxvY01pbi5ZID0gRS5Cb3QuWTtcblx0XHRcdGlmIChFLkR4IDwgRS5QcmV2LkR4KVxuXHRcdFx0e1xuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gRS5QcmV2O1xuXHRcdFx0XHRsb2NNaW4uUmlnaHRCb3VuZCA9IEU7XG5cdFx0XHRcdGxlZnRCb3VuZElzRm9yd2FyZCA9IGZhbHNlO1xuXHRcdFx0XHQvL1EubmV4dEluTE1MID0gUS5wcmV2XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGxvY01pbi5MZWZ0Qm91bmQgPSBFO1xuXHRcdFx0XHRsb2NNaW4uUmlnaHRCb3VuZCA9IEUuUHJldjtcblx0XHRcdFx0bGVmdEJvdW5kSXNGb3J3YXJkID0gdHJ1ZTtcblx0XHRcdFx0Ly9RLm5leHRJbkxNTCA9IFEubmV4dFxuXHRcdFx0fVxuXHRcdFx0bG9jTWluLkxlZnRCb3VuZC5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQ7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc1JpZ2h0O1xuXHRcdFx0aWYgKCFDbG9zZWQpXG5cdFx0XHRcdGxvY01pbi5MZWZ0Qm91bmQuV2luZERlbHRhID0gMDtcblx0XHRcdGVsc2UgaWYgKGxvY01pbi5MZWZ0Qm91bmQuTmV4dCA9PT0gbG9jTWluLlJpZ2h0Qm91bmQpXG5cdFx0XHRcdGxvY01pbi5MZWZ0Qm91bmQuV2luZERlbHRhID0gLTE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGxvY01pbi5MZWZ0Qm91bmQuV2luZERlbHRhID0gMTtcblx0XHRcdGxvY01pbi5SaWdodEJvdW5kLldpbmREZWx0YSA9IC1sb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YTtcblx0XHRcdEUgPSB0aGlzLlByb2Nlc3NCb3VuZChsb2NNaW4uTGVmdEJvdW5kLCBsZWZ0Qm91bmRJc0ZvcndhcmQpO1xuXHRcdFx0aWYgKEUuT3V0SWR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0XHRcdEUgPSB0aGlzLlByb2Nlc3NCb3VuZChFLCBsZWZ0Qm91bmRJc0ZvcndhcmQpO1xuXHRcdFx0dmFyIEUyID0gdGhpcy5Qcm9jZXNzQm91bmQobG9jTWluLlJpZ2h0Qm91bmQsICFsZWZ0Qm91bmRJc0ZvcndhcmQpO1xuXHRcdFx0aWYgKEUyLk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKSBFMiA9IHRoaXMuUHJvY2Vzc0JvdW5kKEUyLCAhbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdGlmIChsb2NNaW4uTGVmdEJvdW5kLk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gbnVsbDtcblx0XHRcdGVsc2UgaWYgKGxvY01pbi5SaWdodEJvdW5kLk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRsb2NNaW4uUmlnaHRCb3VuZCA9IG51bGw7XG5cdFx0XHR0aGlzLkluc2VydExvY2FsTWluaW1hKGxvY01pbik7XG5cdFx0XHRpZiAoIWxlZnRCb3VuZElzRm9yd2FyZClcblx0XHRcdFx0RSA9IEUyO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5BZGRQYXRocyA9IGZ1bmN0aW9uIChwcGcsIHBvbHlUeXBlLCBjbG9zZWQpXG5cdHtcblx0XHQvLyAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXHRcdC8vICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwcGcpKTtcblx0XHR2YXIgcmVzdWx0ID0gZmFsc2U7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwcGcubGVuZ3RoOyBpIDwgaWxlbjsgKytpKVxuXHRcdFx0aWYgKHRoaXMuQWRkUGF0aChwcGdbaV0sIHBvbHlUeXBlLCBjbG9zZWQpKVxuXHRcdFx0XHRyZXN1bHQgPSB0cnVlO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUHQySXNCZXR3ZWVuUHQxQW5kUHQzID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMpXG5cdHtcblx0XHRpZiAoKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHB0MSwgcHQzKSkgfHwgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHB0MSwgcHQyKSkgfHwgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHB0MywgcHQyKSkpXG5cblx0XHRcdC8vaWYgKChwdDEgPT0gcHQzKSB8fCAocHQxID09IHB0MikgfHwgKHB0MyA9PSBwdDIpKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0ZWxzZSBpZiAocHQxLlggIT09IHB0My5YKVxuXHRcdFx0cmV0dXJuIChwdDIuWCA+IHB0MS5YKSA9PT0gKHB0Mi5YIDwgcHQzLlgpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocHQyLlkgPiBwdDEuWSkgPT09IChwdDIuWSA8IHB0My5ZKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5SZW1vdmVFZGdlID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHQvL3JlbW92ZXMgZSBmcm9tIGRvdWJsZV9saW5rZWRfbGlzdCAoYnV0IHdpdGhvdXQgcmVtb3ZpbmcgZnJvbSBtZW1vcnkpXG5cdFx0ZS5QcmV2Lk5leHQgPSBlLk5leHQ7XG5cdFx0ZS5OZXh0LlByZXYgPSBlLlByZXY7XG5cdFx0dmFyIHJlc3VsdCA9IGUuTmV4dDtcblx0XHRlLlByZXYgPSBudWxsOyAvL2ZsYWcgYXMgcmVtb3ZlZCAoc2VlIENsaXBwZXJCYXNlLkNsZWFyKVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuU2V0RHggPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdGUuRGVsdGEuWCA9IChlLlRvcC5YIC0gZS5Cb3QuWCk7XG5cdFx0ZS5EZWx0YS5ZID0gKGUuVG9wLlkgLSBlLkJvdC5ZKTtcblx0XHRpZiAoZS5EZWx0YS5ZID09PSAwKSBlLkR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsO1xuXHRcdGVsc2UgZS5EeCA9IChlLkRlbHRhLlgpIC8gKGUuRGVsdGEuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuSW5zZXJ0TG9jYWxNaW5pbWEgPSBmdW5jdGlvbiAobmV3TG0pXG5cdHtcblx0XHRpZiAodGhpcy5tX01pbmltYUxpc3QgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX01pbmltYUxpc3QgPSBuZXdMbTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAobmV3TG0uWSA+PSB0aGlzLm1fTWluaW1hTGlzdC5ZKVxuXHRcdHtcblx0XHRcdG5ld0xtLk5leHQgPSB0aGlzLm1fTWluaW1hTGlzdDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbmV3TG07XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgdG1wTG0gPSB0aGlzLm1fTWluaW1hTGlzdDtcblx0XHRcdHdoaWxlICh0bXBMbS5OZXh0ICE9PSBudWxsICYmIChuZXdMbS5ZIDwgdG1wTG0uTmV4dC5ZKSlcblx0XHRcdFx0dG1wTG0gPSB0bXBMbS5OZXh0O1xuXHRcdFx0bmV3TG0uTmV4dCA9IHRtcExtLk5leHQ7XG5cdFx0XHR0bXBMbS5OZXh0ID0gbmV3TG07XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlBvcExvY2FsTWluaW1hID0gZnVuY3Rpb24gKFksIGN1cnJlbnQpXG5cdHtcblx0XHRjdXJyZW50LnYgPSB0aGlzLm1fQ3VycmVudExNO1xuXHRcdGlmICh0aGlzLm1fQ3VycmVudExNICE9PSBudWxsICYmIHRoaXMubV9DdXJyZW50TE0uWSA9PT0gWSlcblx0XHR7XG5cdFx0XHR0aGlzLm1fQ3VycmVudExNID0gdGhpcy5tX0N1cnJlbnRMTS5OZXh0O1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5SZXZlcnNlSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0Ly9zd2FwIGhvcml6b250YWwgZWRnZXMnIHRvcCBhbmQgYm90dG9tIHgncyBzbyB0aGV5IGZvbGxvdyB0aGUgbmF0dXJhbFxuXHRcdC8vcHJvZ3Jlc3Npb24gb2YgdGhlIGJvdW5kcyAtIGllIHNvIHRoZWlyIHhib3RzIHdpbGwgYWxpZ24gd2l0aCB0aGVcblx0XHQvL2Fkam9pbmluZyBsb3dlciBlZGdlLiBbSGVscGZ1bCBpbiB0aGUgUHJvY2Vzc0hvcml6b250YWwoKSBtZXRob2QuXVxuXHRcdHZhciB0bXAgPSBlLlRvcC5YO1xuXHRcdGUuVG9wLlggPSBlLkJvdC5YO1xuXHRcdGUuQm90LlggPSB0bXA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHR0bXAgPSBlLlRvcC5aO1xuXHRcdFx0ZS5Ub3AuWiA9IGUuQm90Llo7XG5cdFx0XHRlLkJvdC5aID0gdG1wO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5SZXNldCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fQ3VycmVudExNID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0aWYgKHRoaXMubV9DdXJyZW50TE0gPT09IG51bGwpIC8vaWUgbm90aGluZyB0byBwcm9jZXNzXG5cdFx0XHRyZXR1cm47XG5cdFx0Ly9yZXNldCBhbGwgZWRnZXMgLi4uXG5cdFx0dGhpcy5tX1NjYW5iZWFtID0gbnVsbDtcblx0XHR2YXIgbG0gPSB0aGlzLm1fTWluaW1hTGlzdDtcblx0XHR3aGlsZSAobG0gIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShsbS5ZKTtcblx0XHRcdHZhciBlID0gbG0uTGVmdEJvdW5kO1xuXHRcdFx0aWYgKGUgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdC8vZS5DdXJyID0gZS5Cb3Q7XG5cdFx0XHRcdGUuQ3Vyci5YID0gZS5Cb3QuWDtcblx0XHRcdFx0ZS5DdXJyLlkgPSBlLkJvdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdGUuT3V0SWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdFx0fVxuXHRcdFx0ZSA9IGxtLlJpZ2h0Qm91bmQ7XG5cdFx0XHRpZiAoZSAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0Ly9lLkN1cnIgPSBlLkJvdDtcblx0XHRcdFx0ZS5DdXJyLlggPSBlLkJvdC5YO1xuXHRcdFx0XHRlLkN1cnIuWSA9IGUuQm90Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQ3Vyci5aID0gZS5Cb3QuWjtcblx0XHRcdFx0ZS5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlVuYXNzaWduZWQ7XG5cdFx0XHR9XG5cdFx0XHRsbSA9IGxtLk5leHQ7XG5cdFx0fVxuXHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IG51bGw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuSW5zZXJ0U2NhbmJlYW0gPSBmdW5jdGlvbiAoWSlcblx0e1xuXHRcdC8vc2luZ2xlLWxpbmtlZCBsaXN0OiBzb3J0ZWQgZGVzY2VuZGluZywgaWdub3JpbmcgZHVwcy5cblx0XHRpZiAodGhpcy5tX1NjYW5iZWFtID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9TY2FuYmVhbSA9IG5ldyBDbGlwcGVyTGliLlNjYW5iZWFtKCk7XG5cdFx0XHR0aGlzLm1fU2NhbmJlYW0uTmV4dCA9IG51bGw7XG5cdFx0XHR0aGlzLm1fU2NhbmJlYW0uWSA9IFk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKFkgPiB0aGlzLm1fU2NhbmJlYW0uWSlcblx0XHR7XG5cdFx0XHR2YXIgbmV3U2IgPSBuZXcgQ2xpcHBlckxpYi5TY2FuYmVhbSgpO1xuXHRcdFx0bmV3U2IuWSA9IFk7XG5cdFx0XHRuZXdTYi5OZXh0ID0gdGhpcy5tX1NjYW5iZWFtO1xuXHRcdFx0dGhpcy5tX1NjYW5iZWFtID0gbmV3U2I7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgc2IyID0gdGhpcy5tX1NjYW5iZWFtO1xuXHRcdFx0d2hpbGUgKHNiMi5OZXh0ICE9PSBudWxsICYmIFkgPD0gc2IyLk5leHQuWSlcblx0XHRcdHtcblx0XHRcdFx0c2IyID0gc2IyLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoWSA9PT0gc2IyLlkpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gLy9pZSBpZ25vcmVzIGR1cGxpY2F0ZXNcblx0XHRcdHZhciBuZXdTYjEgPSBuZXcgQ2xpcHBlckxpYi5TY2FuYmVhbSgpO1xuXHRcdFx0bmV3U2IxLlkgPSBZO1xuXHRcdFx0bmV3U2IxLk5leHQgPSBzYjIuTmV4dDtcblx0XHRcdHNiMi5OZXh0ID0gbmV3U2IxO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb3BTY2FuYmVhbSA9IGZ1bmN0aW9uIChZKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9TY2FuYmVhbSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRZLnYgPSAwO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRZLnYgPSB0aGlzLm1fU2NhbmJlYW0uWTtcblx0XHR0aGlzLm1fU2NhbmJlYW0gPSB0aGlzLm1fU2NhbmJlYW0uTmV4dDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Mb2NhbE1pbmltYVBlbmRpbmcgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLm1fQ3VycmVudExNICE9PSBudWxsKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5DcmVhdGVPdXRSZWMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLk91dFJlYygpO1xuXHRcdHJlc3VsdC5JZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlVuYXNzaWduZWQ7XG5cdFx0cmVzdWx0LklzSG9sZSA9IGZhbHNlO1xuXHRcdHJlc3VsdC5Jc09wZW4gPSBmYWxzZTtcblx0XHRyZXN1bHQuRmlyc3RMZWZ0ID0gbnVsbDtcblx0XHRyZXN1bHQuUHRzID0gbnVsbDtcblx0XHRyZXN1bHQuQm90dG9tUHQgPSBudWxsO1xuXHRcdHJlc3VsdC5Qb2x5Tm9kZSA9IG51bGw7XG5cdFx0dGhpcy5tX1BvbHlPdXRzLnB1c2gocmVzdWx0KTtcblx0XHRyZXN1bHQuSWR4ID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aCAtIDE7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5EaXNwb3NlT3V0UmVjID0gZnVuY3Rpb24gKGluZGV4KVxuXHR7XG5cdFx0dmFyIG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpbmRleF07XG5cdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0b3V0UmVjID0gbnVsbDtcblx0XHR0aGlzLm1fUG9seU91dHNbaW5kZXhdID0gbnVsbDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5VcGRhdGVFZGdlSW50b0FFTCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0aWYgKGUuTmV4dEluTE1MID09PSBudWxsKVxuXHRcdHtcblx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJVcGRhdGVFZGdlSW50b0FFTDogaW52YWxpZCBjYWxsXCIpO1xuXHRcdH1cblx0XHR2YXIgQWVsUHJldiA9IGUuUHJldkluQUVMO1xuXHRcdHZhciBBZWxOZXh0ID0gZS5OZXh0SW5BRUw7XG5cdFx0ZS5OZXh0SW5MTUwuT3V0SWR4ID0gZS5PdXRJZHg7XG5cdFx0aWYgKEFlbFByZXYgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0QWVsUHJldi5OZXh0SW5BRUwgPSBlLk5leHRJbkxNTDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IGUuTmV4dEluTE1MO1xuXHRcdH1cblx0XHRpZiAoQWVsTmV4dCAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRBZWxOZXh0LlByZXZJbkFFTCA9IGUuTmV4dEluTE1MO1xuXHRcdH1cblx0XHRlLk5leHRJbkxNTC5TaWRlID0gZS5TaWRlO1xuXHRcdGUuTmV4dEluTE1MLldpbmREZWx0YSA9IGUuV2luZERlbHRhO1xuXHRcdGUuTmV4dEluTE1MLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0ZS5OZXh0SW5MTUwuV2luZENudDIgPSBlLldpbmRDbnQyO1xuXHRcdGUgPSBlLk5leHRJbkxNTDtcblx0XHRlLkN1cnIuWCA9IGUuQm90Llg7XG5cdFx0ZS5DdXJyLlkgPSBlLkJvdC5ZO1xuXHRcdGUuUHJldkluQUVMID0gQWVsUHJldjtcblx0XHRlLk5leHRJbkFFTCA9IEFlbE5leHQ7XG5cdFx0aWYgKCFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlKSlcblx0XHR7XG5cdFx0XHR0aGlzLkluc2VydFNjYW5iZWFtKGUuVG9wLlkpO1xuXHRcdH1cblx0XHRyZXR1cm4gZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Td2FwUG9zaXRpb25zSW5BRUwgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0Ly9jaGVjayB0aGF0IG9uZSBvciBvdGhlciBlZGdlIGhhc24ndCBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBmcm9tIEFFTCAuLi5cblx0XHRpZiAoZWRnZTEuTmV4dEluQUVMID09PSBlZGdlMS5QcmV2SW5BRUwgfHwgZWRnZTIuTmV4dEluQUVMID09PSBlZGdlMi5QcmV2SW5BRUwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChlZGdlMS5OZXh0SW5BRUwgPT09IGVkZ2UyKVxuXHRcdHtcblx0XHRcdHZhciBuZXh0ID0gZWRnZTIuTmV4dEluQUVMO1xuXHRcdFx0aWYgKG5leHQgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdG5leHQuUHJldkluQUVMID0gZWRnZTE7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcHJldiA9IGVkZ2UxLlByZXZJbkFFTDtcblx0XHRcdGlmIChwcmV2ICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRwcmV2Lk5leHRJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTIuUHJldkluQUVMID0gcHJldjtcblx0XHRcdGVkZ2UyLk5leHRJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTEuUHJldkluQUVMID0gZWRnZTI7XG5cdFx0XHRlZGdlMS5OZXh0SW5BRUwgPSBuZXh0O1xuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlMi5OZXh0SW5BRUwgPT09IGVkZ2UxKVxuXHRcdHtcblx0XHRcdHZhciBuZXh0MSA9IGVkZ2UxLk5leHRJbkFFTDtcblx0XHRcdGlmIChuZXh0MSAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0bmV4dDEuUHJldkluQUVMID0gZWRnZTI7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcHJldjEgPSBlZGdlMi5QcmV2SW5BRUw7XG5cdFx0XHRpZiAocHJldjEgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHByZXYxLk5leHRJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTEuUHJldkluQUVMID0gcHJldjE7XG5cdFx0XHRlZGdlMS5OZXh0SW5BRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UyLlByZXZJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTIuTmV4dEluQUVMID0gbmV4dDE7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgbmV4dDIgPSBlZGdlMS5OZXh0SW5BRUw7XG5cdFx0XHR2YXIgcHJldjIgPSBlZGdlMS5QcmV2SW5BRUw7XG5cdFx0XHRlZGdlMS5OZXh0SW5BRUwgPSBlZGdlMi5OZXh0SW5BRUw7XG5cdFx0XHRpZiAoZWRnZTEuTmV4dEluQUVMICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlMS5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTE7XG5cdFx0XHR9XG5cdFx0XHRlZGdlMS5QcmV2SW5BRUwgPSBlZGdlMi5QcmV2SW5BRUw7XG5cdFx0XHRpZiAoZWRnZTEuUHJldkluQUVMICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlMS5QcmV2SW5BRUwuTmV4dEluQUVMID0gZWRnZTE7XG5cdFx0XHR9XG5cdFx0XHRlZGdlMi5OZXh0SW5BRUwgPSBuZXh0Mjtcblx0XHRcdGlmIChlZGdlMi5OZXh0SW5BRUwgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UyLk5leHRJbkFFTC5QcmV2SW5BRUwgPSBlZGdlMjtcblx0XHRcdH1cblx0XHRcdGVkZ2UyLlByZXZJbkFFTCA9IHByZXYyO1xuXHRcdFx0aWYgKGVkZ2UyLlByZXZJbkFFTCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0ZWRnZTIuUHJldkluQUVMLk5leHRJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChlZGdlMS5QcmV2SW5BRUwgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTE7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoZWRnZTIuUHJldkluQUVMID09PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBlZGdlMjtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGVsZXRlRnJvbUFFTCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0dmFyIEFlbFByZXYgPSBlLlByZXZJbkFFTDtcblx0XHR2YXIgQWVsTmV4dCA9IGUuTmV4dEluQUVMO1xuXHRcdGlmIChBZWxQcmV2ID09PSBudWxsICYmIEFlbE5leHQgPT09IG51bGwgJiYgZSAhPT0gdGhpcy5tX0FjdGl2ZUVkZ2VzKVxuXHRcdHtcblx0XHRcdHJldHVybjtcblx0XHR9IC8vYWxyZWFkeSBkZWxldGVkXG5cdFx0aWYgKEFlbFByZXYgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0QWVsUHJldi5OZXh0SW5BRUwgPSBBZWxOZXh0O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gQWVsTmV4dDtcblx0XHR9XG5cdFx0aWYgKEFlbE5leHQgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0QWVsTmV4dC5QcmV2SW5BRUwgPSBBZWxQcmV2O1xuXHRcdH1cblx0XHRlLk5leHRJbkFFTCA9IG51bGw7XG5cdFx0ZS5QcmV2SW5BRUwgPSBudWxsO1xuXHR9XG5cblx0Ly8gcHVibGljIENsaXBwZXIoaW50IEluaXRPcHRpb25zID0gMClcblx0LyoqXG5cdCAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG5cdCAqL1xuXHRDbGlwcGVyTGliLkNsaXBwZXIgPSBmdW5jdGlvbiAoSW5pdE9wdGlvbnMpXG5cdHtcblx0XHRpZiAodHlwZW9mIChJbml0T3B0aW9ucykgPT09IFwidW5kZWZpbmVkXCIpIEluaXRPcHRpb25zID0gMDtcblx0XHR0aGlzLm1fUG9seU91dHMgPSBudWxsO1xuXHRcdHRoaXMubV9DbGlwVHlwZSA9IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RJbnRlcnNlY3Rpb247XG5cdFx0dGhpcy5tX1NjYW5iZWFtID0gbnVsbDtcblx0XHR0aGlzLm1fTWF4aW1hID0gbnVsbDtcblx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBudWxsO1xuXHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IG51bGw7XG5cdFx0dGhpcy5tX0ludGVyc2VjdExpc3QgPSBudWxsO1xuXHRcdHRoaXMubV9JbnRlcnNlY3ROb2RlQ29tcGFyZXIgPSBudWxsO1xuXHRcdHRoaXMubV9FeGVjdXRlTG9ja2VkID0gZmFsc2U7XG5cdFx0dGhpcy5tX0NsaXBGaWxsVHlwZSA9IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdFx0dGhpcy5tX1N1YmpGaWxsVHlwZSA9IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdFx0dGhpcy5tX0pvaW5zID0gbnVsbDtcblx0XHR0aGlzLm1fR2hvc3RKb2lucyA9IG51bGw7XG5cdFx0dGhpcy5tX1VzaW5nUG9seVRyZWUgPSBmYWxzZTtcblx0XHR0aGlzLlJldmVyc2VTb2x1dGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMuU3RyaWN0bHlTaW1wbGUgPSBmYWxzZTtcblxuXHRcdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuY2FsbCh0aGlzKTtcblxuXHRcdHRoaXMubV9TY2FuYmVhbSA9IG51bGw7XG5cdFx0dGhpcy5tX01heGltYSA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0ID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0ludGVyc2VjdE5vZGVDb21wYXJlciA9IENsaXBwZXJMaWIuTXlJbnRlcnNlY3ROb2RlU29ydC5Db21wYXJlO1xuXHRcdHRoaXMubV9FeGVjdXRlTG9ja2VkID0gZmFsc2U7XG5cdFx0dGhpcy5tX1VzaW5nUG9seVRyZWUgPSBmYWxzZTtcblx0XHR0aGlzLm1fUG9seU91dHMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fSm9pbnMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fR2hvc3RKb2lucyA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMuUmV2ZXJzZVNvbHV0aW9uID0gKDEgJiBJbml0T3B0aW9ucykgIT09IDA7XG5cdFx0dGhpcy5TdHJpY3RseVNpbXBsZSA9ICgyICYgSW5pdE9wdGlvbnMpICE9PSAwO1xuXHRcdHRoaXMuUHJlc2VydmVDb2xsaW5lYXIgPSAoNCAmIEluaXRPcHRpb25zKSAhPT0gMDtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdHtcblx0XHRcdHRoaXMuWkZpbGxGdW5jdGlvbiA9IG51bGw7IC8vIGZ1bmN0aW9uIChGUG9pbnQgYm90MSwgRlBvaW50IHRvcDEsIEZQb2ludCBib3QyLCBGUG9pbnQgdG9wMiwgcmVmIEZQb2ludCBpbnRlcnNlY3RQdCk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5pb1JldmVyc2VTb2x1dGlvbiA9IDE7XG5cdENsaXBwZXJMaWIuQ2xpcHBlci5pb1N0cmljdGx5U2ltcGxlID0gMjtcblx0Q2xpcHBlckxpYi5DbGlwcGVyLmlvUHJlc2VydmVDb2xsaW5lYXIgPSA0O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9lZGdlcy5sZW5ndGggPT09IDApXG5cdFx0XHRyZXR1cm47XG5cdFx0Ly9hdm9pZHMgcHJvYmxlbXMgd2l0aCBDbGlwcGVyQmFzZSBkZXN0cnVjdG9yXG5cdFx0dGhpcy5EaXNwb3NlQWxsUG9seVB0cygpO1xuXHRcdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkNsZWFyLmNhbGwodGhpcyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5JbnNlcnRNYXhpbWEgPSBmdW5jdGlvbiAoWClcblx0e1xuXHRcdC8vZG91YmxlLWxpbmtlZCBsaXN0OiBzb3J0ZWQgYXNjZW5kaW5nLCBpZ25vcmluZyBkdXBzLlxuXHRcdHZhciBuZXdNYXggPSBuZXcgQ2xpcHBlckxpYi5NYXhpbWEoKTtcblx0XHRuZXdNYXguWCA9IFg7XG5cdFx0aWYgKHRoaXMubV9NYXhpbWEgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX01heGltYSA9IG5ld01heDtcblx0XHRcdHRoaXMubV9NYXhpbWEuTmV4dCA9IG51bGw7XG5cdFx0XHR0aGlzLm1fTWF4aW1hLlByZXYgPSBudWxsO1xuXHRcdH1cblx0XHRlbHNlIGlmIChYIDwgdGhpcy5tX01heGltYS5YKVxuXHRcdHtcblx0XHRcdG5ld01heC5OZXh0ID0gdGhpcy5tX01heGltYTtcblx0XHRcdG5ld01heC5QcmV2ID0gbnVsbDtcblx0XHRcdHRoaXMubV9NYXhpbWEgPSBuZXdNYXg7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgbSA9IHRoaXMubV9NYXhpbWE7XG5cdFx0XHR3aGlsZSAobS5OZXh0ICE9PSBudWxsICYmIFggPj0gbS5OZXh0LlgpXG5cdFx0XHR7XG5cdFx0XHRcdG0gPSBtLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoWCA9PT0gbS5YKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IC8vaWUgaWdub3JlcyBkdXBsaWNhdGVzICgmIENHIHRvIGNsZWFuIHVwIG5ld01heClcblx0XHRcdC8vaW5zZXJ0IG5ld01heCBiZXR3ZWVuIG0gYW5kIG0uTmV4dCAuLi5cblx0XHRcdG5ld01heC5OZXh0ID0gbS5OZXh0O1xuXHRcdFx0bmV3TWF4LlByZXYgPSBtO1xuXHRcdFx0aWYgKG0uTmV4dCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0bS5OZXh0LlByZXYgPSBuZXdNYXg7XG5cdFx0XHR9XG5cdFx0XHRtLk5leHQgPSBuZXdNYXg7XG5cdFx0fVxuXHR9O1xuXG5cdC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkV4ZWN1dGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRhbGVuID0gYS5sZW5ndGgsXG5cdFx0XHRpc3BvbHl0cmVlID0gYVsxXSBpbnN0YW5jZW9mIENsaXBwZXJMaWIuUG9seVRyZWU7XG5cdFx0aWYgKGFsZW4gPT09IDQgJiYgIWlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgc29sdXRpb24sIHN1YmpGaWxsVHlwZSwgY2xpcEZpbGxUeXBlKVxuXHRcdHtcblx0XHRcdHZhciBjbGlwVHlwZSA9IGFbMF0sXG5cdFx0XHRcdHNvbHV0aW9uID0gYVsxXSxcblx0XHRcdFx0c3ViakZpbGxUeXBlID0gYVsyXSxcblx0XHRcdFx0Y2xpcEZpbGxUeXBlID0gYVszXTtcblx0XHRcdGlmICh0aGlzLm1fRXhlY3V0ZUxvY2tlZClcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0aWYgKHRoaXMubV9IYXNPcGVuUGF0aHMpXG5cdFx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJFcnJvcjogUG9seVRyZWUgc3RydWN0IGlzIG5lZWRlZCBmb3Igb3BlbiBwYXRoIGNsaXBwaW5nLlwiKTtcblx0XHRcdHRoaXMubV9FeGVjdXRlTG9ja2VkID0gdHJ1ZTtcblx0XHRcdENsaXBwZXJMaWIuQ2xlYXIoc29sdXRpb24pO1xuXHRcdFx0dGhpcy5tX1N1YmpGaWxsVHlwZSA9IHN1YmpGaWxsVHlwZTtcblx0XHRcdHRoaXMubV9DbGlwRmlsbFR5cGUgPSBjbGlwRmlsbFR5cGU7XG5cdFx0XHR0aGlzLm1fQ2xpcFR5cGUgPSBjbGlwVHlwZTtcblx0XHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gZmFsc2U7XG5cdFx0XHR0cnlcblx0XHRcdHtcblx0XHRcdFx0dmFyIHN1Y2NlZWRlZCA9IHRoaXMuRXhlY3V0ZUludGVybmFsKCk7XG5cdFx0XHRcdC8vYnVpbGQgdGhlIHJldHVybiBwb2x5Z29ucyAuLi5cblx0XHRcdFx0aWYgKHN1Y2NlZWRlZCkgdGhpcy5CdWlsZFJlc3VsdChzb2x1dGlvbik7XG5cdFx0XHR9XG5cdFx0XHRmaW5hbGx5XG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuRGlzcG9zZUFsbFBvbHlQdHMoKTtcblx0XHRcdFx0dGhpcy5tX0V4ZWN1dGVMb2NrZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzdWNjZWVkZWQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFsZW4gPT09IDQgJiYgaXNwb2x5dHJlZSkgLy8gZnVuY3Rpb24gKGNsaXBUeXBlLCBwb2x5dHJlZSwgc3ViakZpbGxUeXBlLCBjbGlwRmlsbFR5cGUpXG5cdFx0e1xuXHRcdFx0dmFyIGNsaXBUeXBlID0gYVswXSxcblx0XHRcdFx0cG9seXRyZWUgPSBhWzFdLFxuXHRcdFx0XHRzdWJqRmlsbFR5cGUgPSBhWzJdLFxuXHRcdFx0XHRjbGlwRmlsbFR5cGUgPSBhWzNdO1xuXHRcdFx0aWYgKHRoaXMubV9FeGVjdXRlTG9ja2VkKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IHRydWU7XG5cdFx0XHR0aGlzLm1fU3ViakZpbGxUeXBlID0gc3ViakZpbGxUeXBlO1xuXHRcdFx0dGhpcy5tX0NsaXBGaWxsVHlwZSA9IGNsaXBGaWxsVHlwZTtcblx0XHRcdHRoaXMubV9DbGlwVHlwZSA9IGNsaXBUeXBlO1xuXHRcdFx0dGhpcy5tX1VzaW5nUG9seVRyZWUgPSB0cnVlO1xuXHRcdFx0dHJ5XG5cdFx0XHR7XG5cdFx0XHRcdHZhciBzdWNjZWVkZWQgPSB0aGlzLkV4ZWN1dGVJbnRlcm5hbCgpO1xuXHRcdFx0XHQvL2J1aWxkIHRoZSByZXR1cm4gcG9seWdvbnMgLi4uXG5cdFx0XHRcdGlmIChzdWNjZWVkZWQpIHRoaXMuQnVpbGRSZXN1bHQyKHBvbHl0cmVlKTtcblx0XHRcdH1cblx0XHRcdGZpbmFsbHlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5EaXNwb3NlQWxsUG9seVB0cygpO1xuXHRcdFx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHN1Y2NlZWRlZDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoYWxlbiA9PT0gMiAmJiAhaXNwb2x5dHJlZSkgLy8gZnVuY3Rpb24gKGNsaXBUeXBlLCBzb2x1dGlvbilcblx0XHR7XG5cdFx0XHR2YXIgY2xpcFR5cGUgPSBhWzBdLFxuXHRcdFx0XHRzb2x1dGlvbiA9IGFbMV07XG5cdFx0XHRyZXR1cm4gdGhpcy5FeGVjdXRlKGNsaXBUeXBlLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZCwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFsZW4gPT09IDIgJiYgaXNwb2x5dHJlZSkgLy8gZnVuY3Rpb24gKGNsaXBUeXBlLCBwb2x5dHJlZSlcblx0XHR7XG5cdFx0XHR2YXIgY2xpcFR5cGUgPSBhWzBdLFxuXHRcdFx0XHRwb2x5dHJlZSA9IGFbMV07XG5cdFx0XHRyZXR1cm4gdGhpcy5FeGVjdXRlKGNsaXBUeXBlLCBwb2x5dHJlZSwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZCwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZCk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4SG9sZUxpbmthZ2UgPSBmdW5jdGlvbiAob3V0UmVjKVxuXHR7XG5cdFx0Ly9za2lwIGlmIGFuIG91dGVybW9zdCBwb2x5Z29uIG9yXG5cdFx0Ly9hbHJlYWR5IGFscmVhZHkgcG9pbnRzIHRvIHRoZSBjb3JyZWN0IEZpcnN0TGVmdCAuLi5cblx0XHRpZiAob3V0UmVjLkZpcnN0TGVmdCA9PT0gbnVsbCB8fCAob3V0UmVjLklzSG9sZSAhPT0gb3V0UmVjLkZpcnN0TGVmdC5Jc0hvbGUgJiYgb3V0UmVjLkZpcnN0TGVmdC5QdHMgIT09IG51bGwpKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciBvcmZsID0gb3V0UmVjLkZpcnN0TGVmdDtcblx0XHR3aGlsZSAob3JmbCAhPT0gbnVsbCAmJiAoKG9yZmwuSXNIb2xlID09PSBvdXRSZWMuSXNIb2xlKSB8fCBvcmZsLlB0cyA9PT0gbnVsbCkpXG5cdFx0XHRvcmZsID0gb3JmbC5GaXJzdExlZnQ7XG5cdFx0b3V0UmVjLkZpcnN0TGVmdCA9IG9yZmw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5FeGVjdXRlSW50ZXJuYWwgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dHJ5XG5cdFx0e1xuXHRcdFx0dGhpcy5SZXNldCgpO1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gbnVsbDtcblx0XHRcdHRoaXMubV9NYXhpbWEgPSBudWxsO1xuXG5cdFx0XHR2YXIgYm90WSA9IHt9LFxuXHRcdFx0XHR0b3BZID0ge307XG5cblx0XHRcdGlmICghdGhpcy5Qb3BTY2FuYmVhbShib3RZKSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYUludG9BRUwoYm90WS52KTtcblx0XHRcdHdoaWxlICh0aGlzLlBvcFNjYW5iZWFtKHRvcFkpIHx8IHRoaXMuTG9jYWxNaW5pbWFQZW5kaW5nKCkpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuUHJvY2Vzc0hvcml6b250YWxzKCk7XG5cdFx0XHRcdHRoaXMubV9HaG9zdEpvaW5zLmxlbmd0aCA9IDA7XG5cdFx0XHRcdGlmICghdGhpcy5Qcm9jZXNzSW50ZXJzZWN0aW9ucyh0b3BZLnYpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuUHJvY2Vzc0VkZ2VzQXRUb3BPZlNjYW5iZWFtKHRvcFkudik7XG5cdFx0XHRcdGJvdFkudiA9IHRvcFkudjtcblx0XHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYUludG9BRUwoYm90WS52KTtcblx0XHRcdH1cblxuXHRcdFx0Ly9maXggb3JpZW50YXRpb25zIC4uLlxuXHRcdFx0dmFyIG91dFJlYywgaSwgaWxlbjtcblx0XHRcdC8vZml4IG9yaWVudGF0aW9ucyAuLi5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRcdGlmIChvdXRSZWMuUHRzID09PSBudWxsIHx8IG91dFJlYy5Jc09wZW4pIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAoKG91dFJlYy5Jc0hvbGUgXiB0aGlzLlJldmVyc2VTb2x1dGlvbikgPT0gKHRoaXMuQXJlYSQxKG91dFJlYykgPiAwKSlcblx0XHRcdFx0XHR0aGlzLlJldmVyc2VQb2x5UHRMaW5rcyhvdXRSZWMuUHRzKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5Kb2luQ29tbW9uRWRnZXMoKTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdFx0aWYgKG91dFJlYy5QdHMgPT09IG51bGwpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdGVsc2UgaWYgKG91dFJlYy5Jc09wZW4pXG5cdFx0XHRcdFx0dGhpcy5GaXh1cE91dFBvbHlsaW5lKG91dFJlYyk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR0aGlzLkZpeHVwT3V0UG9seWdvbihvdXRSZWMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5TdHJpY3RseVNpbXBsZSkgdGhpcy5Eb1NpbXBsZVBvbHlnb25zKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly9jYXRjaCB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZpbmFsbHlcblx0XHR7XG5cdFx0XHR0aGlzLm1fSm9pbnMubGVuZ3RoID0gMDtcblx0XHRcdHRoaXMubV9HaG9zdEpvaW5zLmxlbmd0aCA9IDA7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRGlzcG9zZUFsbFBvbHlQdHMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKVxuXHRcdFx0dGhpcy5EaXNwb3NlT3V0UmVjKGkpO1xuXHRcdENsaXBwZXJMaWIuQ2xlYXIodGhpcy5tX1BvbHlPdXRzKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZEpvaW4gPSBmdW5jdGlvbiAoT3AxLCBPcDIsIE9mZlB0KVxuXHR7XG5cdFx0dmFyIGogPSBuZXcgQ2xpcHBlckxpYi5Kb2luKCk7XG5cdFx0ai5PdXRQdDEgPSBPcDE7XG5cdFx0ai5PdXRQdDIgPSBPcDI7XG5cdFx0Ly9qLk9mZlB0ID0gT2ZmUHQ7XG5cdFx0ai5PZmZQdC5YID0gT2ZmUHQuWDtcblx0XHRqLk9mZlB0LlkgPSBPZmZQdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGouT2ZmUHQuWiA9IE9mZlB0Llo7XG5cdFx0dGhpcy5tX0pvaW5zLnB1c2goaik7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRHaG9zdEpvaW4gPSBmdW5jdGlvbiAoT3AsIE9mZlB0KVxuXHR7XG5cdFx0dmFyIGogPSBuZXcgQ2xpcHBlckxpYi5Kb2luKCk7XG5cdFx0ai5PdXRQdDEgPSBPcDtcblx0XHQvL2ouT2ZmUHQgPSBPZmZQdDtcblx0XHRqLk9mZlB0LlggPSBPZmZQdC5YO1xuXHRcdGouT2ZmUHQuWSA9IE9mZlB0Llk7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgai5PZmZQdC5aID0gT2ZmUHQuWjtcblx0XHR0aGlzLm1fR2hvc3RKb2lucy5wdXNoKGopO1xuXHR9O1xuXG5cdC8vaWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0Ly97XG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuU2V0WiA9IGZ1bmN0aW9uIChwdCwgZTEsIGUyKVxuXHR7XG5cdFx0aWYgKHRoaXMuWkZpbGxGdW5jdGlvbiAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRpZiAocHQuWiAhPT0gMCB8fCB0aGlzLlpGaWxsRnVuY3Rpb24gPT09IG51bGwpIHJldHVybjtcblx0XHRcdGVsc2UgaWYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMS5Cb3QpKSBwdC5aID0gZTEuQm90Llo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShwdCwgZTEuVG9wKSkgcHQuWiA9IGUxLlRvcC5aO1xuXHRcdFx0ZWxzZSBpZiAoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocHQsIGUyLkJvdCkpIHB0LlogPSBlMi5Cb3QuWjtcblx0XHRcdGVsc2UgaWYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMi5Ub3ApKSBwdC5aID0gZTIuVG9wLlo7XG5cdFx0XHRlbHNlIHRoaXMuWkZpbGxGdW5jdGlvbihlMS5Cb3QsIGUxLlRvcCwgZTIuQm90LCBlMi5Ub3AsIHB0KTtcblx0XHR9XG5cdH07XG5cdC8vfVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMID0gZnVuY3Rpb24gKGJvdFkpXG5cdHtcblx0XHR2YXIgbG0gPSB7fTtcblxuXHRcdHZhciBsYjtcblx0XHR2YXIgcmI7XG5cdFx0d2hpbGUgKHRoaXMuUG9wTG9jYWxNaW5pbWEoYm90WSwgbG0pKVxuXHRcdHtcblx0XHRcdGxiID0gbG0udi5MZWZ0Qm91bmQ7XG5cdFx0XHRyYiA9IGxtLnYuUmlnaHRCb3VuZDtcblxuXHRcdFx0dmFyIE9wMSA9IG51bGw7XG5cdFx0XHRpZiAobGIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChyYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKHJiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KHJiLCByYi5Cb3QpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocmIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwobGIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChsYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKGxiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KGxiLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkluc2VydFNjYW5iZWFtKGxiLlRvcC5ZKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5JbnNlcnRFZGdlSW50b0FFTChsYiwgbnVsbCk7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIGxiKTtcblx0XHRcdFx0dGhpcy5TZXRXaW5kaW5nQ291bnQobGIpO1xuXHRcdFx0XHRyYi5XaW5kQ250ID0gbGIuV2luZENudDtcblx0XHRcdFx0cmIuV2luZENudDIgPSBsYi5XaW5kQ250Mjtcblx0XHRcdFx0aWYgKHRoaXMuSXNDb250cmlidXRpbmcobGIpKVxuXHRcdFx0XHRcdE9wMSA9IHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGxiLCByYiwgbGIuQm90KTtcblx0XHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShsYi5Ub3AuWSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmIgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChyYikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAocmIuTmV4dEluTE1MICE9PSBudWxsKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuTmV4dEluTE1MLlRvcC5ZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwocmIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuVG9wLlkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIgPT09IG51bGwgfHwgcmIgPT09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0Ly9pZiBvdXRwdXQgcG9seWdvbnMgc2hhcmUgYW4gRWRnZSB3aXRoIGEgaG9yaXpvbnRhbCByYiwgdGhleSdsbCBuZWVkIGpvaW5pbmcgbGF0ZXIgLi4uXG5cdFx0XHRpZiAoT3AxICE9PSBudWxsICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKHJiKSAmJiB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPiAwICYmIHJiLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL2lmIHRoZSBob3Jpem9udGFsIFJiIGFuZCBhICdnaG9zdCcgaG9yaXpvbnRhbCBvdmVybGFwLCB0aGVuIGNvbnZlcnRcblx0XHRcdFx0XHQvL3RoZSAnZ2hvc3QnIGpvaW4gdG8gYSByZWFsIGpvaW4gcmVhZHkgZm9yIGxhdGVyIC4uLlxuXHRcdFx0XHRcdHZhciBqID0gdGhpcy5tX0dob3N0Sm9pbnNbaV07XG5cblx0XHRcdFx0XHRpZiAodGhpcy5Ib3J6U2VnbWVudHNPdmVybGFwKGouT3V0UHQxLlB0LlgsIGouT2ZmUHQuWCwgcmIuQm90LlgsIHJiLlRvcC5YKSlcblx0XHRcdFx0XHRcdHRoaXMuQWRkSm9pbihqLk91dFB0MSwgT3AxLCBqLk9mZlB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGIuT3V0SWR4ID49IDAgJiYgbGIuUHJldkluQUVMICE9PSBudWxsICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5DdXJyLlggPT09IGxiLkJvdC5YICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNShsYi5QcmV2SW5BRUwuQ3VyciwgbGIuUHJldkluQUVMLlRvcCwgbGIuQ3VyciwgbGIuVG9wKSAmJlxuXHRcdFx0XHRsYi5XaW5kRGVsdGEgIT09IDAgJiYgbGIuUHJldkluQUVMLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dmFyIE9wMiA9IHRoaXMuQWRkT3V0UHQobGIuUHJldkluQUVMLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkFkZEpvaW4oT3AxLCBPcDIsIGxiLlRvcCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIuTmV4dEluQUVMICE9PSByYilcblx0XHRcdHtcblx0XHRcdFx0aWYgKHJiLk91dElkeCA+PSAwICYmIHJiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KHJiLlByZXZJbkFFTC5DdXJyLCByYi5QcmV2SW5BRUwuVG9wLCByYi5DdXJyLCByYi5Ub3ApICYmXG5cdFx0XHRcdFx0cmIuV2luZERlbHRhICE9PSAwICYmIHJiLlByZXZJbkFFTC5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgT3AyID0gdGhpcy5BZGRPdXRQdChyYi5QcmV2SW5BRUwsIHJiLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKE9wMSwgT3AyLCByYi5Ub3ApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBlID0gbGIuTmV4dEluQUVMO1xuXHRcdFx0XHRpZiAoZSAhPT0gbnVsbClcblx0XHRcdFx0XHR3aGlsZSAoZSAhPT0gcmIpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly9uYjogRm9yIGNhbGN1bGF0aW5nIHdpbmRpbmcgY291bnRzIGV0YywgSW50ZXJzZWN0RWRnZXMoKSBhc3N1bWVzXG5cdFx0XHRcdFx0XHQvL3RoYXQgcGFyYW0xIHdpbGwgYmUgdG8gdGhlIHJpZ2h0IG9mIHBhcmFtMiBBQk9WRSB0aGUgaW50ZXJzZWN0aW9uIC4uLlxuXHRcdFx0XHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhyYiwgZSwgbGIuQ3Vycik7XG5cdFx0XHRcdFx0XHQvL29yZGVyIGltcG9ydGFudCBoZXJlXG5cdFx0XHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkluc2VydEVkZ2VJbnRvQUVMID0gZnVuY3Rpb24gKGVkZ2UsIHN0YXJ0RWRnZSlcblx0e1xuXHRcdGlmICh0aGlzLm1fQWN0aXZlRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0ZWRnZS5QcmV2SW5BRUwgPSBudWxsO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoc3RhcnRFZGdlID09PSBudWxsICYmIHRoaXMuRTJJbnNlcnRzQmVmb3JlRTEodGhpcy5tX0FjdGl2ZUVkZ2VzLCBlZGdlKSlcblx0XHR7XG5cdFx0XHRlZGdlLlByZXZJbkFFTCA9IG51bGw7XG5cdFx0XHRlZGdlLk5leHRJbkFFTCA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcy5QcmV2SW5BRUwgPSBlZGdlO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmIChzdGFydEVkZ2UgPT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHdoaWxlIChzdGFydEVkZ2UuTmV4dEluQUVMICE9PSBudWxsICYmICF0aGlzLkUySW5zZXJ0c0JlZm9yZUUxKHN0YXJ0RWRnZS5OZXh0SW5BRUwsIGVkZ2UpKVxuXHRcdFx0XHRzdGFydEVkZ2UgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0aWYgKHN0YXJ0RWRnZS5OZXh0SW5BRUwgIT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZS5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluQUVMID0gc3RhcnRFZGdlO1xuXHRcdFx0c3RhcnRFZGdlLk5leHRJbkFFTCA9IGVkZ2U7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRTJJbnNlcnRzQmVmb3JlRTEgPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0aWYgKGUyLkN1cnIuWCA9PT0gZTEuQ3Vyci5YKVxuXHRcdHtcblx0XHRcdGlmIChlMi5Ub3AuWSA+IGUxLlRvcC5ZKVxuXHRcdFx0XHRyZXR1cm4gZTIuVG9wLlggPCBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMSwgZTIuVG9wLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZTEuVG9wLlggPiBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMiwgZTEuVG9wLlkpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gZTIuQ3Vyci5YIDwgZTEuQ3Vyci5YO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSXNFdmVuT2RkRmlsbFR5cGUgPSBmdW5jdGlvbiAoZWRnZSlcblx0e1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0cmV0dXJuIHRoaXMubV9TdWJqRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9DbGlwRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc0V2ZW5PZGRBbHRGaWxsVHlwZSA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0aWYgKGVkZ2UuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX0NsaXBGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1N1YmpGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzQ29udHJpYnV0aW5nID0gZnVuY3Rpb24gKGVkZ2UpXG5cdHtcblx0XHR2YXIgcGZ0LCBwZnQyO1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0c3dpdGNoIChwZnQpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiBlZGdlLldpbmRDbnQgIT09IDEpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdGlmIChNYXRoLmFicyhlZGdlLldpbmRDbnQpICE9PSAxKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0aWYgKGVkZ2UuV2luZENudCAhPT0gMSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmIChlZGdlLldpbmRDbnQgIT09IC0xKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0c3dpdGNoICh0aGlzLm1fQ2xpcFR5cGUpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdEludGVyc2VjdGlvbjpcblx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyICE9PSAwKTtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyIDwgMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb246XG5cdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHR7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA9PT0gMCk7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPj0gMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0RGlmZmVyZW5jZTpcblx0XHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdFx0e1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgIT09IDApO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA8IDApO1xuXHRcdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yOlxuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlNldFdpbmRpbmdDb3VudCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0dmFyIGUgPSBlZGdlLlByZXZJbkFFTDtcblx0XHQvL2ZpbmQgdGhlIGVkZ2Ugb2YgdGhlIHNhbWUgcG9seXR5cGUgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWVkcyAnZWRnZScgaW4gQUVMXG5cdFx0d2hpbGUgKGUgIT09IG51bGwgJiYgKChlLlBvbHlUeXAgIT09IGVkZ2UuUG9seVR5cCkgfHwgKGUuV2luZERlbHRhID09PSAwKSkpXG5cdFx0XHRlID0gZS5QcmV2SW5BRUw7XG5cdFx0aWYgKGUgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHBmdCA9IChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0ID8gdGhpcy5tX1N1YmpGaWxsVHlwZSA6IHRoaXMubV9DbGlwRmlsbFR5cGUpO1xuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlLldpbmRDbnQgPSAocGZ0ID09PSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSA/IC0xIDogMSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UuV2luZENudCA9IGVkZ2UuV2luZERlbHRhO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IDA7XG5cdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiB0aGlzLm1fQ2xpcFR5cGUgIT09IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbilcblx0XHR7XG5cdFx0XHRlZGdlLldpbmRDbnQgPSAxO1xuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IGUuV2luZENudDI7XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHQvL2llIGdldCByZWFkeSB0byBjYWxjIFdpbmRDbnQyXG5cdFx0fVxuXHRcdGVsc2UgaWYgKHRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZWRnZSkpXG5cdFx0e1xuXHRcdFx0Ly9FdmVuT2RkIGZpbGxpbmcgLi4uXG5cdFx0XHRpZiAoZWRnZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vYXJlIHdlIGluc2lkZSBhIHN1YmogcG9seWdvbiAuLi5cblx0XHRcdFx0dmFyIEluc2lkZSA9IHRydWU7XG5cdFx0XHRcdHZhciBlMiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHR3aGlsZSAoZTIgIT09IG51bGwpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZTIuUG9seVR5cCA9PT0gZS5Qb2x5VHlwICYmIGUyLldpbmREZWx0YSAhPT0gMClcblx0XHRcdFx0XHRcdEluc2lkZSA9ICFJbnNpZGU7XG5cdFx0XHRcdFx0ZTIgPSBlMi5QcmV2SW5BRUw7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gKEluc2lkZSA/IDAgOiAxKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHR9XG5cdFx0XHRlZGdlLldpbmRDbnQyID0gZS5XaW5kQ250Mjtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHRcdC8vaWUgZ2V0IHJlYWR5IHRvIGNhbGMgV2luZENudDJcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8vbm9uWmVybywgUG9zaXRpdmUgb3IgTmVnYXRpdmUgZmlsbGluZyAuLi5cblx0XHRcdGlmIChlLldpbmRDbnQgKiBlLldpbmREZWx0YSA8IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdkZWNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSB0b3dhcmQgemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIG91dHNpZGUgdGhlIHByZXZpb3VzIHBvbHlnb24gLi4uXG5cdFx0XHRcdGlmIChNYXRoLmFicyhlLldpbmRDbnQpID4gMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0c2lkZSBwcmV2IHBvbHkgYnV0IHN0aWxsIGluc2lkZSBhbm90aGVyLlxuXHRcdFx0XHRcdC8vd2hlbiByZXZlcnNpbmcgZGlyZWN0aW9uIG9mIHByZXYgcG9seSB1c2UgdGhlIHNhbWUgV0Ncblx0XHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgKiBlZGdlLldpbmREZWx0YSA8IDApXG5cdFx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZS5XaW5kQ250ICsgZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlZGdlLldpbmREZWx0YSA9PT0gMCA/IDEgOiBlZGdlLldpbmREZWx0YSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdpbmNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSBhd2F5IGZyb20gemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIGluc2lkZSB0aGUgcHJldmlvdXMgcG9seWdvbiAuLi5cblx0XHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlLldpbmRDbnQgPCAwID8gZS5XaW5kQ250IC0gMSA6IGUuV2luZENudCArIDEpO1xuXHRcdFx0XHRlbHNlIGlmIChlLldpbmREZWx0YSAqIGVkZ2UuV2luZERlbHRhIDwgMClcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQgKyBlZGdlLldpbmREZWx0YTtcblx0XHRcdH1cblx0XHRcdGVkZ2UuV2luZENudDIgPSBlLldpbmRDbnQyO1xuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHQvL3VwZGF0ZSBXaW5kQ250MiAuLi5cblx0XHRpZiAodGhpcy5Jc0V2ZW5PZGRBbHRGaWxsVHlwZShlZGdlKSlcblx0XHR7XG5cdFx0XHQvL0V2ZW5PZGQgZmlsbGluZyAuLi5cblx0XHRcdHdoaWxlIChlICE9PSBlZGdlKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdFx0ZWRnZS5XaW5kQ250MiA9IChlZGdlLldpbmRDbnQyID09PSAwID8gMSA6IDApO1xuXHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL25vblplcm8sIFBvc2l0aXZlIG9yIE5lZ2F0aXZlIGZpbGxpbmcgLi4uXG5cdFx0XHR3aGlsZSAoZSAhPT0gZWRnZSlcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250MiArPSBlLldpbmREZWx0YTtcblx0XHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZEVkZ2VUb1NFTCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0Ly9TRUwgcG9pbnRlcnMgaW4gUEVkZ2UgYXJlIHVzZSB0byBidWlsZCB0cmFuc2llbnQgbGlzdHMgb2YgaG9yaXpvbnRhbCBlZGdlcy5cblx0XHQvL0hvd2V2ZXIsIHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgcHJvY2Vzc2luZyBvcmRlciwgYWxsIGFkZGl0aW9uc1xuXHRcdC8vYXJlIG1hZGUgdG8gdGhlIGZyb250IG9mIHRoZSBsaXN0IC4uLlxuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluU0VMID0gbnVsbDtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gbnVsbDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0ZWRnZS5QcmV2SW5TRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IGVkZ2U7XG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlBvcEVkZ2VGcm9tU0VMID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHQvL1BvcCBlZGdlIGZyb20gZnJvbnQgb2YgU0VMIChpZSBTRUwgaXMgYSBGSUxPIGxpc3QpXG5cdFx0ZS52ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdGlmIChlLnYgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgb2xkRSA9IGUudjtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlLnYuTmV4dEluU0VMO1xuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IG51bGw7XG5cdFx0fVxuXHRcdG9sZEUuTmV4dEluU0VMID0gbnVsbDtcblx0XHRvbGRFLlByZXZJblNFTCA9IG51bGw7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Db3B5QUVMVG9TRUwgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZTtcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRlLlByZXZJblNFTCA9IGUuUHJldkluQUVMO1xuXHRcdFx0ZS5OZXh0SW5TRUwgPSBlLk5leHRJbkFFTDtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Td2FwUG9zaXRpb25zSW5TRUwgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gZWRnZTIpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMi5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UxLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gZWRnZTEpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMS5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UyLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgbmV4dCA9IGVkZ2UxLk5leHRJblNFTDtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTIuTmV4dEluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLk5leHRJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuTmV4dEluU0VMLlByZXZJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTEuUHJldkluU0VMID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLlByZXZJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuUHJldkluU0VMLk5leHRJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gbmV4dDtcblx0XHRcdGlmIChlZGdlMi5OZXh0SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGVkZ2UyLk5leHRJblNFTC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UyLlByZXZJblNFTCA9IHByZXY7XG5cdFx0XHRpZiAoZWRnZTIuUHJldkluU0VMICE9PSBudWxsKVxuXHRcdFx0XHRlZGdlMi5QcmV2SW5TRUwuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0fVxuXHRcdGlmIChlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMTtcblx0XHRlbHNlIGlmIChlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMjtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZExvY2FsTWF4UG9seSA9IGZ1bmN0aW9uIChlMSwgZTIsIHB0KVxuXHR7XG5cdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdGlmIChlMi5XaW5kRGVsdGEgPT09IDApIHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRpZiAoZTEuT3V0SWR4ID09PSBlMi5PdXRJZHgpXG5cdFx0e1xuXHRcdFx0ZTEuT3V0SWR4ID0gLTE7XG5cdFx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTEuT3V0SWR4IDwgZTIuT3V0SWR4KVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUxLCBlMik7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUyLCBlMSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRMb2NhbE1pblBvbHkgPSBmdW5jdGlvbiAoZTEsIGUyLCBwdClcblx0e1xuXHRcdHZhciByZXN1bHQ7XG5cdFx0dmFyIGUsIHByZXZFO1xuXHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlMikgfHwgKGUxLkR4ID4gZTIuRHgpKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdGUyLk91dElkeCA9IGUxLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdDtcblx0XHRcdGUyLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlID0gZTE7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUyKVxuXHRcdFx0XHRwcmV2RSA9IGUyLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdGUxLk91dElkeCA9IGUyLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlMi5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQ7XG5cdFx0XHRlID0gZTI7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUxKVxuXHRcdFx0XHRwcmV2RSA9IGUxLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cblx0XHRpZiAocHJldkUgIT09IG51bGwgJiYgcHJldkUuT3V0SWR4ID49IDAgJiYgcHJldkUuVG9wLlkgPCBwdC5ZICYmIGUuVG9wLlkgPCBwdC5ZKVxuXHRcdHtcblx0XHRcdHZhciB4UHJldiA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKHByZXZFLCBwdC5ZKTtcblx0XHRcdHZhciB4RSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHB0LlkpO1xuXHRcdFx0aWYgKCh4UHJldiA9PT0geEUpICYmIChlLldpbmREZWx0YSAhPT0gMCkgJiYgKHByZXZFLldpbmREZWx0YSAhPT0gMCkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDUobmV3IENsaXBwZXJMaWIuRlBvaW50Mih4UHJldiwgcHQuWSksIHByZXZFLlRvcCwgbmV3IENsaXBwZXJMaWIuRlBvaW50Mih4RSwgcHQuWSksIGUuVG9wKSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIG91dFB0ID0gdGhpcy5BZGRPdXRQdChwcmV2RSwgcHQpO1xuXHRcdFx0XHR0aGlzLkFkZEpvaW4ocmVzdWx0LCBvdXRQdCwgZS5Ub3ApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQWRkT3V0UHQgPSBmdW5jdGlvbiAoZSwgcHQpXG5cdHtcblx0XHRpZiAoZS5PdXRJZHggPCAwKVxuXHRcdHtcblx0XHRcdHZhciBvdXRSZWMgPSB0aGlzLkNyZWF0ZU91dFJlYygpO1xuXHRcdFx0b3V0UmVjLklzT3BlbiA9IChlLldpbmREZWx0YSA9PT0gMCk7XG5cdFx0XHR2YXIgbmV3T3AgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdFx0b3V0UmVjLlB0cyA9IG5ld09wO1xuXHRcdFx0bmV3T3AuSWR4ID0gb3V0UmVjLklkeDtcblx0XHRcdC8vbmV3T3AuUHQgPSBwdDtcblx0XHRcdG5ld09wLlB0LlggPSBwdC5YO1xuXHRcdFx0bmV3T3AuUHQuWSA9IHB0Llk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBuZXdPcC5QdC5aID0gcHQuWjtcblx0XHRcdG5ld09wLk5leHQgPSBuZXdPcDtcblx0XHRcdG5ld09wLlByZXYgPSBuZXdPcDtcblx0XHRcdGlmICghb3V0UmVjLklzT3Blbilcblx0XHRcdFx0dGhpcy5TZXRIb2xlU3RhdGUoZSwgb3V0UmVjKTtcblx0XHRcdGUuT3V0SWR4ID0gb3V0UmVjLklkeDtcblx0XHRcdC8vbmI6IGRvIHRoaXMgYWZ0ZXIgU2V0WiAhXG5cdFx0XHRyZXR1cm4gbmV3T3A7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2UuT3V0SWR4XTtcblx0XHRcdC8vT3V0UmVjLlB0cyBpcyB0aGUgJ0xlZnQtbW9zdCcgcG9pbnQgJiBPdXRSZWMuUHRzLlByZXYgaXMgdGhlICdSaWdodC1tb3N0J1xuXHRcdFx0dmFyIG9wID0gb3V0UmVjLlB0cztcblx0XHRcdHZhciBUb0Zyb250ID0gKGUuU2lkZSA9PT0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQpO1xuXHRcdFx0aWYgKFRvRnJvbnQgJiYgQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocHQsIG9wLlB0KSlcblx0XHRcdFx0cmV0dXJuIG9wO1xuXHRcdFx0ZWxzZSBpZiAoIVRvRnJvbnQgJiYgQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocHQsIG9wLlByZXYuUHQpKVxuXHRcdFx0XHRyZXR1cm4gb3AuUHJldjtcblx0XHRcdHZhciBuZXdPcCA9IG5ldyBDbGlwcGVyTGliLk91dFB0KCk7XG5cdFx0XHRuZXdPcC5JZHggPSBvdXRSZWMuSWR4O1xuXHRcdFx0Ly9uZXdPcC5QdCA9IHB0O1xuXHRcdFx0bmV3T3AuUHQuWCA9IHB0Llg7XG5cdFx0XHRuZXdPcC5QdC5ZID0gcHQuWTtcblx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG5ld09wLlB0LlogPSBwdC5aO1xuXHRcdFx0bmV3T3AuTmV4dCA9IG9wO1xuXHRcdFx0bmV3T3AuUHJldiA9IG9wLlByZXY7XG5cdFx0XHRuZXdPcC5QcmV2Lk5leHQgPSBuZXdPcDtcblx0XHRcdG9wLlByZXYgPSBuZXdPcDtcblx0XHRcdGlmIChUb0Zyb250KVxuXHRcdFx0XHRvdXRSZWMuUHRzID0gbmV3T3A7XG5cdFx0XHRyZXR1cm4gbmV3T3A7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0TGFzdE91dFB0ID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2UuT3V0SWR4XTtcblx0XHRpZiAoZS5TaWRlID09PSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdClcblx0XHR7XG5cdFx0XHRyZXR1cm4gb3V0UmVjLlB0cztcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldHVybiBvdXRSZWMuUHRzLlByZXY7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuU3dhcFBvaW50cyA9IGZ1bmN0aW9uIChwdDEsIHB0Milcblx0e1xuXHRcdHZhciB0bXAgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQxKHB0MS5WYWx1ZSk7XG5cdFx0Ly9wdDEuVmFsdWUgPSBwdDIuVmFsdWU7XG5cdFx0cHQxLlZhbHVlLlggPSBwdDIuVmFsdWUuWDtcblx0XHRwdDEuVmFsdWUuWSA9IHB0Mi5WYWx1ZS5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIHB0MS5WYWx1ZS5aID0gcHQyLlZhbHVlLlo7XG5cdFx0Ly9wdDIuVmFsdWUgPSB0bXA7XG5cdFx0cHQyLlZhbHVlLlggPSB0bXAuWDtcblx0XHRwdDIuVmFsdWUuWSA9IHRtcC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIHB0Mi5WYWx1ZS5aID0gdG1wLlo7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Ib3J6U2VnbWVudHNPdmVybGFwID0gZnVuY3Rpb24gKHNlZzFhLCBzZWcxYiwgc2VnMmEsIHNlZzJiKVxuXHR7XG5cdFx0dmFyIHRtcDtcblx0XHRpZiAoc2VnMWEgPiBzZWcxYilcblx0XHR7XG5cdFx0XHR0bXAgPSBzZWcxYTtcblx0XHRcdHNlZzFhID0gc2VnMWI7XG5cdFx0XHRzZWcxYiA9IHRtcDtcblx0XHR9XG5cdFx0aWYgKHNlZzJhID4gc2VnMmIpXG5cdFx0e1xuXHRcdFx0dG1wID0gc2VnMmE7XG5cdFx0XHRzZWcyYSA9IHNlZzJiO1xuXHRcdFx0c2VnMmIgPSB0bXA7XG5cdFx0fVxuXHRcdHJldHVybiAoc2VnMWEgPCBzZWcyYikgJiYgKHNlZzJhIDwgc2VnMWIpO1xuXHR9XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5TZXRIb2xlU3RhdGUgPSBmdW5jdGlvbiAoZSwgb3V0UmVjKVxuXHR7XG5cdFx0dmFyIGUyID0gZS5QcmV2SW5BRUw7XG5cdFx0dmFyIGVUbXAgPSBudWxsO1xuXHRcdHdoaWxlIChlMiAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRpZiAoZTIuT3V0SWR4ID49IDAgJiYgZTIuV2luZERlbHRhICE9PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZVRtcCA9PT0gbnVsbClcblx0XHRcdFx0XHRlVG1wID0gZTI7XG5cdFx0XHRcdGVsc2UgaWYgKGVUbXAuT3V0SWR4ID09PSBlMi5PdXRJZHgpXG5cdFx0XHRcdFx0ZVRtcCA9IG51bGw7IC8vcGFpcmVkXG5cdFx0XHR9XG5cdFx0XHRlMiA9IGUyLlByZXZJbkFFTDtcblx0XHR9XG5cblx0XHRpZiAoZVRtcCA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gbnVsbDtcblx0XHRcdG91dFJlYy5Jc0hvbGUgPSBmYWxzZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSB0aGlzLm1fUG9seU91dHNbZVRtcC5PdXRJZHhdO1xuXHRcdFx0b3V0UmVjLklzSG9sZSA9ICFvdXRSZWMuRmlyc3RMZWZ0LklzSG9sZTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXREeCA9IGZ1bmN0aW9uIChwdDEsIHB0Milcblx0e1xuXHRcdGlmIChwdDEuWSA9PT0gcHQyLlkpXG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiAocHQyLlggLSBwdDEuWCkgLyAocHQyLlkgLSBwdDEuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXJzdElzQm90dG9tUHQgPSBmdW5jdGlvbiAoYnRtUHQxLCBidG1QdDIpXG5cdHtcblx0XHR2YXIgcCA9IGJ0bVB0MS5QcmV2O1xuXHRcdHdoaWxlICgoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQxLlB0KSkgJiYgKHAgIT09IGJ0bVB0MSkpXG5cdFx0XHRwID0gcC5QcmV2O1xuXHRcdHZhciBkeDFwID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDEuUHQsIHAuUHQpKTtcblx0XHRwID0gYnRtUHQxLk5leHQ7XG5cdFx0d2hpbGUgKChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShwLlB0LCBidG1QdDEuUHQpKSAmJiAocCAhPT0gYnRtUHQxKSlcblx0XHRcdHAgPSBwLk5leHQ7XG5cdFx0dmFyIGR4MW4gPSBNYXRoLmFicyh0aGlzLkdldER4KGJ0bVB0MS5QdCwgcC5QdCkpO1xuXHRcdHAgPSBidG1QdDIuUHJldjtcblx0XHR3aGlsZSAoKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHAuUHQsIGJ0bVB0Mi5QdCkpICYmIChwICE9PSBidG1QdDIpKVxuXHRcdFx0cCA9IHAuUHJldjtcblx0XHR2YXIgZHgycCA9IE1hdGguYWJzKHRoaXMuR2V0RHgoYnRtUHQyLlB0LCBwLlB0KSk7XG5cdFx0cCA9IGJ0bVB0Mi5OZXh0O1xuXHRcdHdoaWxlICgoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQyLlB0KSkgJiYgKHAgIT09IGJ0bVB0MikpXG5cdFx0XHRwID0gcC5OZXh0O1xuXHRcdHZhciBkeDJuID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDIuUHQsIHAuUHQpKTtcblxuXHRcdGlmIChNYXRoLm1heChkeDFwLCBkeDFuKSA9PT0gTWF0aC5tYXgoZHgycCwgZHgybikgJiYgTWF0aC5taW4oZHgxcCwgZHgxbikgPT09IE1hdGgubWluKGR4MnAsIGR4Mm4pKVxuXHRcdHtcblx0XHRcdHJldHVybiB0aGlzLkFyZWEoYnRtUHQxKSA+IDA7IC8vaWYgb3RoZXJ3aXNlIGlkZW50aWNhbCB1c2Ugb3JpZW50YXRpb25cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldHVybiAoZHgxcCA+PSBkeDJwICYmIGR4MXAgPj0gZHgybikgfHwgKGR4MW4gPj0gZHgycCAmJiBkeDFuID49IGR4Mm4pO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEJvdHRvbVB0ID0gZnVuY3Rpb24gKHBwKVxuXHR7XG5cdFx0dmFyIGR1cHMgPSBudWxsO1xuXHRcdHZhciBwID0gcHAuTmV4dDtcblx0XHR3aGlsZSAocCAhPT0gcHApXG5cdFx0e1xuXHRcdFx0aWYgKHAuUHQuWSA+IHBwLlB0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdHBwID0gcDtcblx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChwLlB0LlkgPT09IHBwLlB0LlkgJiYgcC5QdC5YIDw9IHBwLlB0LlgpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwLlB0LlggPCBwcC5QdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHRcdFx0cHAgPSBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwLk5leHQgIT09IHBwICYmIHAuUHJldiAhPT0gcHApXG5cdFx0XHRcdFx0XHRkdXBzID0gcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cCA9IHAuTmV4dDtcblx0XHR9XG5cdFx0aWYgKGR1cHMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Ly90aGVyZSBhcHBlYXJzIHRvIGJlIGF0IGxlYXN0IDIgdmVydGljZXMgYXQgYm90dG9tUHQgc28gLi4uXG5cdFx0XHR3aGlsZSAoZHVwcyAhPT0gcClcblx0XHRcdHtcblx0XHRcdFx0aWYgKCF0aGlzLkZpcnN0SXNCb3R0b21QdChwLCBkdXBzKSlcblx0XHRcdFx0XHRwcCA9IGR1cHM7XG5cdFx0XHRcdGR1cHMgPSBkdXBzLk5leHQ7XG5cdFx0XHRcdHdoaWxlIChDbGlwcGVyTGliLkZQb2ludC5vcF9JbmVxdWFsaXR5KGR1cHMuUHQsIHBwLlB0KSlcblx0XHRcdFx0XHRkdXBzID0gZHVwcy5OZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcHA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRMb3dlcm1vc3RSZWMgPSBmdW5jdGlvbiAob3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdC8vd29yayBvdXQgd2hpY2ggcG9seWdvbiBmcmFnbWVudCBoYXMgdGhlIGNvcnJlY3QgaG9sZSBzdGF0ZSAuLi5cblx0XHRpZiAob3V0UmVjMS5Cb3R0b21QdCA9PT0gbnVsbClcblx0XHRcdG91dFJlYzEuQm90dG9tUHQgPSB0aGlzLkdldEJvdHRvbVB0KG91dFJlYzEuUHRzKTtcblx0XHRpZiAob3V0UmVjMi5Cb3R0b21QdCA9PT0gbnVsbClcblx0XHRcdG91dFJlYzIuQm90dG9tUHQgPSB0aGlzLkdldEJvdHRvbVB0KG91dFJlYzIuUHRzKTtcblx0XHR2YXIgYlB0MSA9IG91dFJlYzEuQm90dG9tUHQ7XG5cdFx0dmFyIGJQdDIgPSBvdXRSZWMyLkJvdHRvbVB0O1xuXHRcdGlmIChiUHQxLlB0LlkgPiBiUHQyLlB0LlkpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMTtcblx0XHRlbHNlIGlmIChiUHQxLlB0LlkgPCBiUHQyLlB0LlkpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMjtcblx0XHRlbHNlIGlmIChiUHQxLlB0LlggPCBiUHQyLlB0LlgpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMTtcblx0XHRlbHNlIGlmIChiUHQxLlB0LlggPiBiUHQyLlB0LlgpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMjtcblx0XHRlbHNlIGlmIChiUHQxLk5leHQgPT09IGJQdDEpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMjtcblx0XHRlbHNlIGlmIChiUHQyLk5leHQgPT09IGJQdDIpXG5cdFx0XHRyZXR1cm4gb3V0UmVjMTtcblx0XHRlbHNlIGlmICh0aGlzLkZpcnN0SXNCb3R0b21QdChiUHQxLCBiUHQyKSlcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyID0gZnVuY3Rpb24gKG91dFJlYzEsIG91dFJlYzIpXG5cdHtcblx0XHRkbyB7XG5cdFx0XHRvdXRSZWMxID0gb3V0UmVjMS5GaXJzdExlZnQ7XG5cdFx0XHRpZiAob3V0UmVjMSA9PT0gb3V0UmVjMilcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHdoaWxlIChvdXRSZWMxICE9PSBudWxsKVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE91dFJlYyA9IGZ1bmN0aW9uIChpZHgpXG5cdHtcblx0XHR2YXIgb3V0cmVjID0gdGhpcy5tX1BvbHlPdXRzW2lkeF07XG5cdFx0d2hpbGUgKG91dHJlYyAhPT0gdGhpcy5tX1BvbHlPdXRzW291dHJlYy5JZHhdKVxuXHRcdFx0b3V0cmVjID0gdGhpcy5tX1BvbHlPdXRzW291dHJlYy5JZHhdO1xuXHRcdHJldHVybiBvdXRyZWM7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BcHBlbmRQb2x5Z29uID0gZnVuY3Rpb24gKGUxLCBlMilcblx0e1xuXHRcdC8vZ2V0IHRoZSBzdGFydCBhbmQgZW5kcyBvZiBib3RoIG91dHB1dCBwb2x5Z29ucyAuLi5cblx0XHR2YXIgb3V0UmVjMSA9IHRoaXMubV9Qb2x5T3V0c1tlMS5PdXRJZHhdO1xuXHRcdHZhciBvdXRSZWMyID0gdGhpcy5tX1BvbHlPdXRzW2UyLk91dElkeF07XG5cdFx0dmFyIGhvbGVTdGF0ZVJlYztcblx0XHRpZiAodGhpcy5PdXRSZWMxUmlnaHRPZk91dFJlYzIob3V0UmVjMSwgb3V0UmVjMikpXG5cdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKHRoaXMuT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyKG91dFJlYzIsIG91dFJlYzEpKVxuXHRcdFx0aG9sZVN0YXRlUmVjID0gb3V0UmVjMTtcblx0XHRlbHNlXG5cdFx0XHRob2xlU3RhdGVSZWMgPSB0aGlzLkdldExvd2VybW9zdFJlYyhvdXRSZWMxLCBvdXRSZWMyKTtcblxuXHRcdC8vZ2V0IHRoZSBzdGFydCBhbmQgZW5kcyBvZiBib3RoIG91dHB1dCBwb2x5Z29ucyBhbmRcblx0XHQvL2pvaW4gRTIgcG9seSBvbnRvIEUxIHBvbHkgYW5kIGRlbGV0ZSBwb2ludGVycyB0byBFMiAuLi5cblxuXHRcdHZhciBwMV9sZnQgPSBvdXRSZWMxLlB0cztcblx0XHR2YXIgcDFfcnQgPSBwMV9sZnQuUHJldjtcblx0XHR2YXIgcDJfbGZ0ID0gb3V0UmVjMi5QdHM7XG5cdFx0dmFyIHAyX3J0ID0gcDJfbGZ0LlByZXY7XG5cdFx0Ly9qb2luIGUyIHBvbHkgb250byBlMSBwb2x5IGFuZCBkZWxldGUgcG9pbnRlcnMgdG8gZTIgLi4uXG5cdFx0aWYgKGUxLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KVxuXHRcdHtcblx0XHRcdGlmIChlMi5TaWRlID09PSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdClcblx0XHRcdHtcblx0XHRcdFx0Ly96IHkgeCBhIGIgY1xuXHRcdFx0XHR0aGlzLlJldmVyc2VQb2x5UHRMaW5rcyhwMl9sZnQpO1xuXHRcdFx0XHRwMl9sZnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9sZnQ7XG5cdFx0XHRcdHAxX3J0Lk5leHQgPSBwMl9ydDtcblx0XHRcdFx0cDJfcnQuUHJldiA9IHAxX3J0O1xuXHRcdFx0XHRvdXRSZWMxLlB0cyA9IHAyX3J0O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL3ggeSB6IGEgYiBjXG5cdFx0XHRcdHAyX3J0Lk5leHQgPSBwMV9sZnQ7XG5cdFx0XHRcdHAxX2xmdC5QcmV2ID0gcDJfcnQ7XG5cdFx0XHRcdHAyX2xmdC5QcmV2ID0gcDFfcnQ7XG5cdFx0XHRcdHAxX3J0Lk5leHQgPSBwMl9sZnQ7XG5cdFx0XHRcdG91dFJlYzEuUHRzID0gcDJfbGZ0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGUyLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNSaWdodClcblx0XHRcdHtcblx0XHRcdFx0Ly9hIGIgYyB6IHkgeFxuXHRcdFx0XHR0aGlzLlJldmVyc2VQb2x5UHRMaW5rcyhwMl9sZnQpO1xuXHRcdFx0XHRwMV9ydC5OZXh0ID0gcDJfcnQ7XG5cdFx0XHRcdHAyX3J0LlByZXYgPSBwMV9ydDtcblx0XHRcdFx0cDJfbGZ0Lk5leHQgPSBwMV9sZnQ7XG5cdFx0XHRcdHAxX2xmdC5QcmV2ID0gcDJfbGZ0O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL2EgYiBjIHggeSB6XG5cdFx0XHRcdHAxX3J0Lk5leHQgPSBwMl9sZnQ7XG5cdFx0XHRcdHAyX2xmdC5QcmV2ID0gcDFfcnQ7XG5cdFx0XHRcdHAxX2xmdC5QcmV2ID0gcDJfcnQ7XG5cdFx0XHRcdHAyX3J0Lk5leHQgPSBwMV9sZnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG91dFJlYzEuQm90dG9tUHQgPSBudWxsO1xuXHRcdGlmIChob2xlU3RhdGVSZWMgPT09IG91dFJlYzIpXG5cdFx0e1xuXHRcdFx0aWYgKG91dFJlYzIuRmlyc3RMZWZ0ICE9PSBvdXRSZWMxKVxuXHRcdFx0XHRvdXRSZWMxLkZpcnN0TGVmdCA9IG91dFJlYzIuRmlyc3RMZWZ0O1xuXHRcdFx0b3V0UmVjMS5Jc0hvbGUgPSBvdXRSZWMyLklzSG9sZTtcblx0XHR9XG5cdFx0b3V0UmVjMi5QdHMgPSBudWxsO1xuXHRcdG91dFJlYzIuQm90dG9tUHQgPSBudWxsO1xuXHRcdG91dFJlYzIuRmlyc3RMZWZ0ID0gb3V0UmVjMTtcblx0XHR2YXIgT0tJZHggPSBlMS5PdXRJZHg7XG5cdFx0dmFyIE9ic29sZXRlSWR4ID0gZTIuT3V0SWR4O1xuXHRcdGUxLk91dElkeCA9IC0xO1xuXHRcdC8vbmI6IHNhZmUgYmVjYXVzZSB3ZSBvbmx5IGdldCBoZXJlIHZpYSBBZGRMb2NhbE1heFBvbHlcblx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHR2YXIgZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRpZiAoZS5PdXRJZHggPT09IE9ic29sZXRlSWR4KVxuXHRcdFx0e1xuXHRcdFx0XHRlLk91dElkeCA9IE9LSWR4O1xuXHRcdFx0XHRlLlNpZGUgPSBlMS5TaWRlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHR9XG5cdFx0b3V0UmVjMi5JZHggPSBvdXRSZWMxLklkeDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlJldmVyc2VQb2x5UHRMaW5rcyA9IGZ1bmN0aW9uIChwcClcblx0e1xuXHRcdGlmIChwcCA9PT0gbnVsbClcblx0XHRcdHJldHVybjtcblx0XHR2YXIgcHAxO1xuXHRcdHZhciBwcDI7XG5cdFx0cHAxID0gcHA7XG5cdFx0ZG8ge1xuXHRcdFx0cHAyID0gcHAxLk5leHQ7XG5cdFx0XHRwcDEuTmV4dCA9IHBwMS5QcmV2O1xuXHRcdFx0cHAxLlByZXYgPSBwcDI7XG5cdFx0XHRwcDEgPSBwcDI7XG5cdFx0fVxuXHRcdHdoaWxlIChwcDEgIT09IHBwKVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwU2lkZXMgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0dmFyIHNpZGUgPSBlZGdlMS5TaWRlO1xuXHRcdGVkZ2UxLlNpZGUgPSBlZGdlMi5TaWRlO1xuXHRcdGVkZ2UyLlNpZGUgPSBzaWRlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0dmFyIG91dElkeCA9IGVkZ2UxLk91dElkeDtcblx0XHRlZGdlMS5PdXRJZHggPSBlZGdlMi5PdXRJZHg7XG5cdFx0ZWRnZTIuT3V0SWR4ID0gb3V0SWR4O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW50ZXJzZWN0RWRnZXMgPSBmdW5jdGlvbiAoZTEsIGUyLCBwdClcblx0e1xuXHRcdC8vZTEgd2lsbCBiZSB0byB0aGUgbGVmdCBvZiBlMiBCRUxPVyB0aGUgaW50ZXJzZWN0aW9uLiBUaGVyZWZvcmUgZTEgaXMgYmVmb3JlXG5cdFx0Ly9lMiBpbiBBRUwgZXhjZXB0IHdoZW4gZTEgaXMgYmVpbmcgaW5zZXJ0ZWQgYXQgdGhlIGludGVyc2VjdGlvbiBwb2ludCAuLi5cblx0XHR2YXIgZTFDb250cmlidXRpbmcgPSAoZTEuT3V0SWR4ID49IDApO1xuXHRcdHZhciBlMkNvbnRyaWJ1dGluZyA9IChlMi5PdXRJZHggPj0gMCk7XG5cblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0dGhpcy5TZXRaKHB0LCBlMSwgZTIpO1xuXG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX2xpbmVzKVxuXHRcdHtcblx0XHRcdC8vaWYgZWl0aGVyIGVkZ2UgaXMgb24gYW4gT1BFTiBwYXRoIC4uLlxuXHRcdFx0aWYgKGUxLldpbmREZWx0YSA9PT0gMCB8fCBlMi5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vaWdub3JlIHN1YmplY3Qtc3ViamVjdCBvcGVuIHBhdGggaW50ZXJzZWN0aW9ucyBVTkxFU1MgdGhleVxuXHRcdFx0XHQvL2FyZSBib3RoIG9wZW4gcGF0aHMsIEFORCB0aGV5IGFyZSBib3RoICdjb250cmlidXRpbmcgbWF4aW1hcycgLi4uXG5cdFx0XHRcdGlmIChlMS5XaW5kRGVsdGEgPT09IDAgJiYgZTIuV2luZERlbHRhID09PSAwKSByZXR1cm47XG5cdFx0XHRcdC8vaWYgaW50ZXJzZWN0aW5nIGEgc3ViaiBsaW5lIHdpdGggYSBzdWJqIHBvbHkgLi4uXG5cdFx0XHRcdGVsc2UgaWYgKGUxLlBvbHlUeXAgPT09IGUyLlBvbHlUeXAgJiZcblx0XHRcdFx0XHRlMS5XaW5kRGVsdGEgIT09IGUyLldpbmREZWx0YSAmJiB0aGlzLm1fQ2xpcFR5cGUgPT09IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChlMS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGUyQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUxLCBwdCk7XG5cdFx0XHRcdFx0XHRcdGlmIChlMUNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdFx0XHRlMS5PdXRJZHggPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChlMUNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMiwgcHQpO1xuXHRcdFx0XHRcdFx0XHRpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHRcdFx0ZTIuT3V0SWR4ID0gLTE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGUxLlBvbHlUeXAgIT09IGUyLlBvbHlUeXApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoKGUxLldpbmREZWx0YSA9PT0gMCkgJiYgTWF0aC5hYnMoZTIuV2luZENudCkgPT09IDEgJiZcblx0XHRcdFx0XHRcdCh0aGlzLm1fQ2xpcFR5cGUgIT09IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiB8fCBlMi5XaW5kQ250MiA9PT0gMCkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdFx0XHRcdFx0aWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0XHRlMS5PdXRJZHggPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoKGUyLldpbmREZWx0YSA9PT0gMCkgJiYgKE1hdGguYWJzKGUxLldpbmRDbnQpID09PSAxKSAmJlxuXHRcdFx0XHRcdFx0KHRoaXMubV9DbGlwVHlwZSAhPT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uIHx8IGUxLldpbmRDbnQyID09PSAwKSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUyLCBwdCk7XG5cdFx0XHRcdFx0XHRpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHRcdGUyLk91dElkeCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vdXBkYXRlIHdpbmRpbmcgY291bnRzLi4uXG5cdFx0Ly9hc3N1bWVzIHRoYXQgZTEgd2lsbCBiZSB0byB0aGUgUmlnaHQgb2YgZTIgQUJPVkUgdGhlIGludGVyc2VjdGlvblxuXHRcdGlmIChlMS5Qb2x5VHlwID09PSBlMi5Qb2x5VHlwKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLklzRXZlbk9kZEZpbGxUeXBlKGUxKSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIG9sZEUxV2luZENudCA9IGUxLldpbmRDbnQ7XG5cdFx0XHRcdGUxLldpbmRDbnQgPSBlMi5XaW5kQ250O1xuXHRcdFx0XHRlMi5XaW5kQ250ID0gb2xkRTFXaW5kQ250O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZTEuV2luZENudCArIGUyLldpbmREZWx0YSA9PT0gMClcblx0XHRcdFx0XHRlMS5XaW5kQ250ID0gLWUxLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlMS5XaW5kQ250ICs9IGUyLldpbmREZWx0YTtcblx0XHRcdFx0aWYgKGUyLldpbmRDbnQgLSBlMS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHRcdFx0ZTIuV2luZENudCA9IC1lMi5XaW5kQ250O1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0ZTIuV2luZENudCAtPSBlMS5XaW5kRGVsdGE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoIXRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZTIpKVxuXHRcdFx0XHRlMS5XaW5kQ250MiArPSBlMi5XaW5kRGVsdGE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGUxLldpbmRDbnQyID0gKGUxLldpbmRDbnQyID09PSAwKSA/IDEgOiAwO1xuXHRcdFx0aWYgKCF0aGlzLklzRXZlbk9kZEZpbGxUeXBlKGUxKSlcblx0XHRcdFx0ZTIuV2luZENudDIgLT0gZTEuV2luZERlbHRhO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRlMi5XaW5kQ250MiA9IChlMi5XaW5kQ250MiA9PT0gMCkgPyAxIDogMDtcblx0XHR9XG5cdFx0dmFyIGUxRmlsbFR5cGUsIGUyRmlsbFR5cGUsIGUxRmlsbFR5cGUyLCBlMkZpbGxUeXBlMjtcblx0XHRpZiAoZTEuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0e1xuXHRcdFx0ZTFGaWxsVHlwZSA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRlMUZpbGxUeXBlMiA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRlMUZpbGxUeXBlID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHRcdGUxRmlsbFR5cGUyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0aWYgKGUyLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdHtcblx0XHRcdGUyRmlsbFR5cGUgPSB0aGlzLm1fU3ViakZpbGxUeXBlO1xuXHRcdFx0ZTJGaWxsVHlwZTIgPSB0aGlzLm1fQ2xpcEZpbGxUeXBlO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0ZTJGaWxsVHlwZSA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0XHRlMkZpbGxUeXBlMiA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0fVxuXHRcdHZhciBlMVdjLCBlMldjO1xuXHRcdHN3aXRjaCAoZTFGaWxsVHlwZSlcblx0XHR7XG5cdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdGUxV2MgPSBlMS5XaW5kQ250O1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZTpcblx0XHRcdGUxV2MgPSAtZTEuV2luZENudDtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRlMVdjID0gTWF0aC5hYnMoZTEuV2luZENudCk7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0c3dpdGNoIChlMkZpbGxUeXBlKVxuXHRcdHtcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0ZTJXYyA9IGUyLldpbmRDbnQ7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0ZTJXYyA9IC1lMi5XaW5kQ250O1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGUyV2MgPSBNYXRoLmFicyhlMi5XaW5kQ250KTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAoZTFDb250cmlidXRpbmcgJiYgZTJDb250cmlidXRpbmcpXG5cdFx0e1xuXHRcdFx0aWYgKChlMVdjICE9PSAwICYmIGUxV2MgIT09IDEpIHx8IChlMldjICE9PSAwICYmIGUyV2MgIT09IDEpIHx8XG5cdFx0XHRcdChlMS5Qb2x5VHlwICE9PSBlMi5Qb2x5VHlwICYmIHRoaXMubV9DbGlwVHlwZSAhPT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFhvcikpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkTG9jYWxNYXhQb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkFkZE91dFB0KGUxLCBwdCk7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBTaWRlcyhlMSwgZTIpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFBvbHlJbmRleGVzKGUxLCBlMik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdHtcblx0XHRcdGlmIChlMldjID09PSAwIHx8IGUyV2MgPT09IDEpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBTaWRlcyhlMSwgZTIpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFBvbHlJbmRleGVzKGUxLCBlMik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGUyQ29udHJpYnV0aW5nKVxuXHRcdHtcblx0XHRcdGlmIChlMVdjID09PSAwIHx8IGUxV2MgPT09IDEpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBTaWRlcyhlMSwgZTIpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFBvbHlJbmRleGVzKGUxLCBlMik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChlMVdjID09PSAwIHx8IGUxV2MgPT09IDEpICYmIChlMldjID09PSAwIHx8IGUyV2MgPT09IDEpKVxuXHRcdHtcblx0XHRcdC8vbmVpdGhlciBlZGdlIGlzIGN1cnJlbnRseSBjb250cmlidXRpbmcgLi4uXG5cdFx0XHR2YXIgZTFXYzIsIGUyV2MyO1xuXHRcdFx0c3dpdGNoIChlMUZpbGxUeXBlMilcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRcdGUxV2MyID0gZTEuV2luZENudDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZTpcblx0XHRcdFx0ZTFXYzIgPSAtZTEuV2luZENudDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0ZTFXYzIgPSBNYXRoLmFicyhlMS5XaW5kQ250Mik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChlMkZpbGxUeXBlMilcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRcdGUyV2MyID0gZTIuV2luZENudDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZTpcblx0XHRcdFx0ZTJXYzIgPSAtZTIuV2luZENudDI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0ZTJXYzIgPSBNYXRoLmFicyhlMi5XaW5kQ250Mik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUxLlBvbHlUeXAgIT09IGUyLlBvbHlUeXApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoZTFXYyA9PT0gMSAmJiBlMldjID09PSAxKVxuXHRcdFx0XHRzd2l0Y2ggKHRoaXMubV9DbGlwVHlwZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RJbnRlcnNlY3Rpb246XG5cdFx0XHRcdFx0aWYgKGUxV2MyID4gMCAmJiBlMldjMiA+IDApXG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWluUG9seShlMSwgZTIsIHB0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb246XG5cdFx0XHRcdFx0aWYgKGUxV2MyIDw9IDAgJiYgZTJXYzIgPD0gMClcblx0XHRcdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuQ2xpcFR5cGUuY3REaWZmZXJlbmNlOlxuXHRcdFx0XHRcdGlmICgoKGUxLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRDbGlwKSAmJiAoZTFXYzIgPiAwKSAmJiAoZTJXYzIgPiAwKSkgfHxcblx0XHRcdFx0XHRcdCgoZTEuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpICYmIChlMVdjMiA8PSAwKSAmJiAoZTJXYzIgPD0gMCkpKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRMb2NhbE1pblBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFhvcjpcblx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWluUG9seShlMSwgZTIsIHB0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRGVsZXRlRnJvbVNFTCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0dmFyIFNlbFByZXYgPSBlLlByZXZJblNFTDtcblx0XHR2YXIgU2VsTmV4dCA9IGUuTmV4dEluU0VMO1xuXHRcdGlmIChTZWxQcmV2ID09PSBudWxsICYmIFNlbE5leHQgPT09IG51bGwgJiYgKGUgIT09IHRoaXMubV9Tb3J0ZWRFZGdlcykpXG5cdFx0XHRyZXR1cm47XG5cdFx0Ly9hbHJlYWR5IGRlbGV0ZWRcblx0XHRpZiAoU2VsUHJldiAhPT0gbnVsbClcblx0XHRcdFNlbFByZXYuTmV4dEluU0VMID0gU2VsTmV4dDtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBTZWxOZXh0O1xuXHRcdGlmIChTZWxOZXh0ICE9PSBudWxsKVxuXHRcdFx0U2VsTmV4dC5QcmV2SW5TRUwgPSBTZWxQcmV2O1xuXHRcdGUuTmV4dEluU0VMID0gbnVsbDtcblx0XHRlLlByZXZJblNFTCA9IG51bGw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSG9yaXpvbnRhbHMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGhvcnpFZGdlID0ge307IC8vbV9Tb3J0ZWRFZGdlcztcblx0XHR3aGlsZSAodGhpcy5Qb3BFZGdlRnJvbVNFTChob3J6RWRnZSkpXG5cdFx0e1xuXHRcdFx0dGhpcy5Qcm9jZXNzSG9yaXpvbnRhbChob3J6RWRnZS52KTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRIb3J6RGlyZWN0aW9uID0gZnVuY3Rpb24gKEhvcnpFZGdlLCAkdmFyKVxuXHR7XG5cdFx0aWYgKEhvcnpFZGdlLkJvdC5YIDwgSG9yekVkZ2UuVG9wLlgpXG5cdFx0e1xuXHRcdFx0JHZhci5MZWZ0ID0gSG9yekVkZ2UuQm90Llg7XG5cdFx0XHQkdmFyLlJpZ2h0ID0gSG9yekVkZ2UuVG9wLlg7XG5cdFx0XHQkdmFyLkRpciA9IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdCR2YXIuTGVmdCA9IEhvcnpFZGdlLlRvcC5YO1xuXHRcdFx0JHZhci5SaWdodCA9IEhvcnpFZGdlLkJvdC5YO1xuXHRcdFx0JHZhci5EaXIgPSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kUmlnaHRUb0xlZnQ7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUHJvY2Vzc0hvcml6b250YWwgPSBmdW5jdGlvbiAoaG9yekVkZ2UpXG5cdHtcblx0XHR2YXIgJHZhciA9IHtcblx0XHRcdERpcjogbnVsbCxcblx0XHRcdExlZnQ6IG51bGwsXG5cdFx0XHRSaWdodDogbnVsbFxuXHRcdH07XG5cblx0XHR0aGlzLkdldEhvcnpEaXJlY3Rpb24oaG9yekVkZ2UsICR2YXIpO1xuXHRcdHZhciBkaXIgPSAkdmFyLkRpcjtcblx0XHR2YXIgaG9yekxlZnQgPSAkdmFyLkxlZnQ7XG5cdFx0dmFyIGhvcnpSaWdodCA9ICR2YXIuUmlnaHQ7XG5cblx0XHR2YXIgSXNPcGVuID0gaG9yekVkZ2UuV2luZERlbHRhID09PSAwO1xuXG5cdFx0dmFyIGVMYXN0SG9yeiA9IGhvcnpFZGdlLFxuXHRcdFx0ZU1heFBhaXIgPSBudWxsO1xuXHRcdHdoaWxlIChlTGFzdEhvcnouTmV4dEluTE1MICE9PSBudWxsICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGVMYXN0SG9yei5OZXh0SW5MTUwpKVxuXHRcdFx0ZUxhc3RIb3J6ID0gZUxhc3RIb3J6Lk5leHRJbkxNTDtcblx0XHRpZiAoZUxhc3RIb3J6Lk5leHRJbkxNTCA9PT0gbnVsbClcblx0XHRcdGVNYXhQYWlyID0gdGhpcy5HZXRNYXhpbWFQYWlyKGVMYXN0SG9yeik7XG5cblx0XHR2YXIgY3Vyck1heCA9IHRoaXMubV9NYXhpbWE7XG5cdFx0aWYgKGN1cnJNYXggIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Ly9nZXQgdGhlIGZpcnN0IG1heGltYSBpbiByYW5nZSAoWCkgLi4uXG5cdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlIChjdXJyTWF4ICE9PSBudWxsICYmIGN1cnJNYXguWCA8PSBob3J6RWRnZS5Cb3QuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnJNYXggPSBjdXJyTWF4Lk5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YID49IGVMYXN0SG9yei5Ub3AuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnJNYXggPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHdoaWxlIChjdXJyTWF4Lk5leHQgIT09IG51bGwgJiYgY3Vyck1heC5OZXh0LlggPCBob3J6RWRnZS5Cb3QuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnJNYXggPSBjdXJyTWF4Lk5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGN1cnJNYXguWCA8PSBlTGFzdEhvcnouVG9wLlgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjdXJyTWF4ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgb3AxID0gbnVsbDtcblx0XHRmb3IgKDs7KSAvL2xvb3AgdGhyb3VnaCBjb25zZWMuIGhvcml6b250YWwgZWRnZXNcblx0XHR7XG5cdFx0XHR2YXIgSXNMYXN0SG9yeiA9IChob3J6RWRnZSA9PT0gZUxhc3RIb3J6KTtcblx0XHRcdHZhciBlID0gdGhpcy5HZXROZXh0SW5BRUwoaG9yekVkZ2UsIGRpcik7XG5cdFx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0Ly90aGlzIGNvZGUgYmxvY2sgaW5zZXJ0cyBleHRyYSBjb29yZHMgaW50byBob3Jpem9udGFsIGVkZ2VzIChpbiBvdXRwdXRcblx0XHRcdFx0Ly9wb2x5Z29ucykgd2hlcmVldmVyIG1heGltYSB0b3VjaCB0aGVzZSBob3Jpem9udGFsIGVkZ2VzLiBUaGlzIGhlbHBzXG5cdFx0XHRcdC8vJ3NpbXBsaWZ5aW5nJyBwb2x5Z29ucyAoaWUgaWYgdGhlIFNpbXBsaWZ5IHByb3BlcnR5IGlzIHNldCkuXG5cdFx0XHRcdGlmIChjdXJyTWF4ICE9PSBudWxsKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGRpciA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHdoaWxlIChjdXJyTWF4ICE9PSBudWxsICYmIGN1cnJNYXguWCA8IGUuQ3Vyci5YKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRpZiAoaG9yekVkZ2UuT3V0SWR4ID49IDAgJiYgIUlzT3Blbilcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuQWRkT3V0UHQoaG9yekVkZ2UsIG5ldyBDbGlwcGVyTGliLkZQb2ludDIoY3Vyck1heC5YLCBob3J6RWRnZS5Cb3QuWSkpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGN1cnJNYXggPSBjdXJyTWF4Lk5leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR3aGlsZSAoY3Vyck1heCAhPT0gbnVsbCAmJiBjdXJyTWF4LlggPiBlLkN1cnIuWClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0aWYgKGhvcnpFZGdlLk91dElkeCA+PSAwICYmICFJc09wZW4pXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGhvcnpFZGdlLCBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKGN1cnJNYXguWCwgaG9yekVkZ2UuQm90LlkpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyTWF4ID0gY3Vyck1heC5QcmV2O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQgJiYgZS5DdXJyLlggPiBob3J6UmlnaHQpIHx8IChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdCAmJiBlLkN1cnIuWCA8IGhvcnpMZWZ0KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9BbHNvIGJyZWFrIGlmIHdlJ3ZlIGdvdCB0byB0aGUgZW5kIG9mIGFuIGludGVybWVkaWF0ZSBob3Jpem9udGFsIGVkZ2UgLi4uXG5cdFx0XHRcdC8vbmI6IFNtYWxsZXIgRHgncyBhcmUgdG8gdGhlIHJpZ2h0IG9mIGxhcmdlciBEeCdzIEFCT1ZFIHRoZSBob3Jpem9udGFsLlxuXHRcdFx0XHRpZiAoZS5DdXJyLlggPT09IGhvcnpFZGdlLlRvcC5YICYmIGhvcnpFZGdlLk5leHRJbkxNTCAhPT0gbnVsbCAmJiBlLkR4IDwgaG9yekVkZ2UuTmV4dEluTE1MLkR4KVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKSAvL25vdGU6IG1heSBiZSBkb25lIG11bHRpcGxlIHRpbWVzXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHRcdFx0XHRcdFx0dGhpcy5TZXRaKGUuQ3VyciwgaG9yekVkZ2UsIGUpO1xuXHRcdFx0XHRcdFx0ZWxzZSB0aGlzLlNldFooZS5DdXJyLCBlLCBob3J6RWRnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3AxID0gdGhpcy5BZGRPdXRQdChob3J6RWRnZSwgZS5DdXJyKTtcblx0XHRcdFx0XHR2YXIgZU5leHRIb3J6ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0XHRcdHdoaWxlIChlTmV4dEhvcnogIT09IG51bGwpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGVOZXh0SG9yei5PdXRJZHggPj0gMCAmJiB0aGlzLkhvcnpTZWdtZW50c092ZXJsYXAoaG9yekVkZ2UuQm90LlgsIGhvcnpFZGdlLlRvcC5YLCBlTmV4dEhvcnouQm90LlgsIGVOZXh0SG9yei5Ub3AuWCkpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkdldExhc3RPdXRQdChlTmV4dEhvcnopO1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AyLCBvcDEsIGVOZXh0SG9yei5Ub3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZU5leHRIb3J6ID0gZU5leHRIb3J6Lk5leHRJblNFTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRHaG9zdEpvaW4ob3AxLCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9PSywgc28gZmFyIHdlJ3JlIHN0aWxsIGluIHJhbmdlIG9mIHRoZSBob3Jpem9udGFsIEVkZ2UgIGJ1dCBtYWtlIHN1cmVcblx0XHRcdFx0Ly93ZSdyZSBhdCB0aGUgbGFzdCBvZiBjb25zZWMuIGhvcml6b250YWxzIHdoZW4gbWF0Y2hpbmcgd2l0aCBlTWF4UGFpclxuXHRcdFx0XHRpZiAoZSA9PT0gZU1heFBhaXIgJiYgSXNMYXN0SG9yeilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWF4UG9seShob3J6RWRnZSwgZU1heFBhaXIsIGhvcnpFZGdlLlRvcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChob3J6RWRnZSk7XG5cdFx0XHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGVNYXhQYWlyKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKGUuQ3Vyci5YLCBob3J6RWRnZS5DdXJyLlkpO1xuXHRcdFx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoaG9yekVkZ2UsIGUsIFB0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKGUuQ3Vyci5YLCBob3J6RWRnZS5DdXJyLlkpO1xuXHRcdFx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoZSwgaG9yekVkZ2UsIFB0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgZU5leHQgPSB0aGlzLkdldE5leHRJbkFFTChlLCBkaXIpO1xuXHRcdFx0XHR0aGlzLlN3YXBQb3NpdGlvbnNJbkFFTChob3J6RWRnZSwgZSk7XG5cdFx0XHRcdGUgPSBlTmV4dDtcblx0XHRcdH0gLy9lbmQgd2hpbGUoZSAhPT0gbnVsbClcblxuXHRcdFx0Ly9CcmVhayBvdXQgb2YgbG9vcCBpZiBIb3J6RWRnZS5OZXh0SW5MTUwgaXMgbm90IGFsc28gaG9yaXpvbnRhbCAuLi5cblx0XHRcdGlmIChob3J6RWRnZS5OZXh0SW5MTUwgPT09IG51bGwgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGhvcnpFZGdlLk5leHRJbkxNTCkpXG5cdFx0XHR7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRob3J6RWRnZSA9IHRoaXMuVXBkYXRlRWRnZUludG9BRUwoaG9yekVkZ2UpO1xuXHRcdFx0aWYgKGhvcnpFZGdlLk91dElkeCA+PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkFkZE91dFB0KGhvcnpFZGdlLCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0fVxuXG5cdFx0XHQkdmFyID0ge1xuXHRcdFx0XHREaXI6IGRpcixcblx0XHRcdFx0TGVmdDogaG9yekxlZnQsXG5cdFx0XHRcdFJpZ2h0OiBob3J6UmlnaHRcblx0XHRcdH07XG5cblx0XHRcdHRoaXMuR2V0SG9yekRpcmVjdGlvbihob3J6RWRnZSwgJHZhcik7XG5cdFx0XHRkaXIgPSAkdmFyLkRpcjtcblx0XHRcdGhvcnpMZWZ0ID0gJHZhci5MZWZ0O1xuXHRcdFx0aG9yelJpZ2h0ID0gJHZhci5SaWdodDtcblxuXHRcdH0gLy9lbmQgZm9yICg7OylcblxuXHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiBvcDEgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0b3AxID0gdGhpcy5HZXRMYXN0T3V0UHQoaG9yekVkZ2UpO1xuXHRcdFx0dmFyIGVOZXh0SG9yeiA9IHRoaXMubV9Tb3J0ZWRFZGdlcztcblx0XHRcdHdoaWxlIChlTmV4dEhvcnogIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChlTmV4dEhvcnouT3V0SWR4ID49IDAgJiYgdGhpcy5Ib3J6U2VnbWVudHNPdmVybGFwKGhvcnpFZGdlLkJvdC5YLCBob3J6RWRnZS5Ub3AuWCwgZU5leHRIb3J6LkJvdC5YLCBlTmV4dEhvcnouVG9wLlgpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuR2V0TGFzdE91dFB0KGVOZXh0SG9yeik7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wMiwgb3AxLCBlTmV4dEhvcnouVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlTmV4dEhvcnogPSBlTmV4dEhvcnouTmV4dEluU0VMO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5BZGRHaG9zdEpvaW4ob3AxLCBob3J6RWRnZS5Ub3ApO1xuXHRcdH1cblxuXHRcdGlmIChob3J6RWRnZS5OZXh0SW5MTUwgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKGhvcnpFZGdlLk91dElkeCA+PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDEgPSB0aGlzLkFkZE91dFB0KGhvcnpFZGdlLCBob3J6RWRnZS5Ub3ApO1xuXG5cdFx0XHRcdGhvcnpFZGdlID0gdGhpcy5VcGRhdGVFZGdlSW50b0FFTChob3J6RWRnZSk7XG5cdFx0XHRcdGlmIChob3J6RWRnZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9uYjogSG9yekVkZ2UgaXMgbm8gbG9uZ2VyIGhvcml6b250YWwgaGVyZVxuXHRcdFx0XHR2YXIgZVByZXYgPSBob3J6RWRnZS5QcmV2SW5BRUw7XG5cdFx0XHRcdHZhciBlTmV4dCA9IGhvcnpFZGdlLk5leHRJbkFFTDtcblx0XHRcdFx0aWYgKGVQcmV2ICE9PSBudWxsICYmIGVQcmV2LkN1cnIuWCA9PT0gaG9yekVkZ2UuQm90LlggJiYgZVByZXYuQ3Vyci5ZID09PSBob3J6RWRnZS5Cb3QuWSAmJiBlUHJldi5XaW5kRGVsdGEgPT09IDAgJiYgKGVQcmV2Lk91dElkeCA+PSAwICYmIGVQcmV2LkN1cnIuWSA+IGVQcmV2LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWwzKGhvcnpFZGdlLCBlUHJldikpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuQWRkT3V0UHQoZVByZXYsIGhvcnpFZGdlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wMSwgb3AyLCBob3J6RWRnZS5Ub3ApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKGVOZXh0ICE9PSBudWxsICYmIGVOZXh0LkN1cnIuWCA9PT0gaG9yekVkZ2UuQm90LlggJiYgZU5leHQuQ3Vyci5ZID09PSBob3J6RWRnZS5Cb3QuWSAmJiBlTmV4dC5XaW5kRGVsdGEgIT09IDAgJiYgZU5leHQuT3V0SWR4ID49IDAgJiYgZU5leHQuQ3Vyci5ZID4gZU5leHQuVG9wLlkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDMoaG9yekVkZ2UsIGVOZXh0KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVOZXh0LCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcDEsIG9wMiwgaG9yekVkZ2UuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRob3J6RWRnZSA9IHRoaXMuVXBkYXRlRWRnZUludG9BRUwoaG9yekVkZ2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGhvcnpFZGdlLk91dElkeCA+PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkFkZE91dFB0KGhvcnpFZGdlLCBob3J6RWRnZS5Ub3ApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGhvcnpFZGdlKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXROZXh0SW5BRUwgPSBmdW5jdGlvbiAoZSwgRGlyZWN0aW9uKVxuXHR7XG5cdFx0cmV0dXJuIERpcmVjdGlvbiA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0ID8gZS5OZXh0SW5BRUwgOiBlLlByZXZJbkFFTDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzTWluaW1hID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHRyZXR1cm4gZSAhPT0gbnVsbCAmJiAoZS5QcmV2Lk5leHRJbkxNTCAhPT0gZSkgJiYgKGUuTmV4dC5OZXh0SW5MTUwgIT09IGUpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSXNNYXhpbWEgPSBmdW5jdGlvbiAoZSwgWSlcblx0e1xuXHRcdHJldHVybiAoZSAhPT0gbnVsbCAmJiBlLlRvcC5ZID09PSBZICYmIGUuTmV4dEluTE1MID09PSBudWxsKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzSW50ZXJtZWRpYXRlID0gZnVuY3Rpb24gKGUsIFkpXG5cdHtcblx0XHRyZXR1cm4gKGUuVG9wLlkgPT09IFkgJiYgZS5OZXh0SW5MTUwgIT09IG51bGwpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0TWF4aW1hUGFpciA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0aWYgKChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShlLk5leHQuVG9wLCBlLlRvcCkpICYmIGUuTmV4dC5OZXh0SW5MTUwgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGUuTmV4dDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICgoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkoZS5QcmV2LlRvcCwgZS5Ub3ApKSAmJiBlLlByZXYuTmV4dEluTE1MID09PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gZS5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRNYXhpbWFQYWlyRXggPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdC8vYXMgYWJvdmUgYnV0IHJldHVybnMgbnVsbCBpZiBNYXhQYWlyIGlzbid0IGluIEFFTCAodW5sZXNzIGl0J3MgaG9yaXpvbnRhbClcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5HZXRNYXhpbWFQYWlyKGUpO1xuXHRcdGlmIChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0Lk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwIHx8XG5cdFx0XHQoKHJlc3VsdC5OZXh0SW5BRUwgPT09IHJlc3VsdC5QcmV2SW5BRUwpICYmICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChyZXN1bHQpKSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NJbnRlcnNlY3Rpb25zID0gZnVuY3Rpb24gKHRvcFkpXG5cdHtcblx0XHRpZiAodGhpcy5tX0FjdGl2ZUVkZ2VzID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0dHJ5XG5cdFx0e1xuXHRcdFx0dGhpcy5CdWlsZEludGVyc2VjdExpc3QodG9wWSk7XG5cdFx0XHRpZiAodGhpcy5tX0ludGVyc2VjdExpc3QubGVuZ3RoID09PSAwKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdGlmICh0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPT09IDEgfHwgdGhpcy5GaXh1cEludGVyc2VjdGlvbk9yZGVyKCkpXG5cdFx0XHRcdHRoaXMuUHJvY2Vzc0ludGVyc2VjdExpc3QoKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRjYXRjaCAoJCRlMilcblx0XHR7XG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdFx0dGhpcy5tX0ludGVyc2VjdExpc3QubGVuZ3RoID0gMDtcblx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJQcm9jZXNzSW50ZXJzZWN0aW9ucyBlcnJvclwiKTtcblx0XHR9XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gbnVsbDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkJ1aWxkSW50ZXJzZWN0TGlzdCA9IGZ1bmN0aW9uICh0b3BZKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9BY3RpdmVFZGdlcyA9PT0gbnVsbClcblx0XHRcdHJldHVybjtcblx0XHQvL3ByZXBhcmUgZm9yIHNvcnRpbmcgLi4uXG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cdFx0Ly9jb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShKU09OLmRlY3ljbGUoIGUgKSkpO1xuXHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IGU7XG5cdFx0d2hpbGUgKGUgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0ZS5QcmV2SW5TRUwgPSBlLlByZXZJbkFFTDtcblx0XHRcdGUuTmV4dEluU0VMID0gZS5OZXh0SW5BRUw7XG5cdFx0XHRlLkN1cnIuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHRvcFkpO1xuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdH1cblx0XHQvL2J1YmJsZXNvcnQgLi4uXG5cdFx0dmFyIGlzTW9kaWZpZWQgPSB0cnVlO1xuXHRcdHdoaWxlIChpc01vZGlmaWVkICYmIHRoaXMubV9Tb3J0ZWRFZGdlcyAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRpc01vZGlmaWVkID0gZmFsc2U7XG5cdFx0XHRlID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0d2hpbGUgKGUuTmV4dEluU0VMICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgZU5leHQgPSBlLk5leHRJblNFTDtcblx0XHRcdFx0dmFyIHB0ID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MCgpO1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiZS5DdXJyLlg6IFwiICsgZS5DdXJyLlggKyBcIiBlTmV4dC5DdXJyLlhcIiArIGVOZXh0LkN1cnIuWCk7XG5cdFx0XHRcdGlmIChlLkN1cnIuWCA+IGVOZXh0LkN1cnIuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuSW50ZXJzZWN0UG9pbnQoZSwgZU5leHQsIHB0KTtcblx0XHRcdFx0XHRpZiAocHQuWSA8IHRvcFkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cHQgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHRvcFkpLCB0b3BZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIG5ld05vZGUgPSBuZXcgQ2xpcHBlckxpYi5JbnRlcnNlY3ROb2RlKCk7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMSA9IGU7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMiA9IGVOZXh0O1xuXHRcdFx0XHRcdC8vbmV3Tm9kZS5QdCA9IHB0O1xuXHRcdFx0XHRcdG5ld05vZGUuUHQuWCA9IHB0Llg7XG5cdFx0XHRcdFx0bmV3Tm9kZS5QdC5ZID0gcHQuWTtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBuZXdOb2RlLlB0LlogPSBwdC5aO1xuXHRcdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnB1c2gobmV3Tm9kZSk7XG5cdFx0XHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwoZSwgZU5leHQpO1xuXHRcdFx0XHRcdGlzTW9kaWZpZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlID0gZU5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZS5QcmV2SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGUuUHJldkluU0VMLk5leHRJblNFTCA9IG51bGw7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRWRnZXNBZGphY2VudCA9IGZ1bmN0aW9uIChpbm9kZSlcblx0e1xuXHRcdHJldHVybiAoaW5vZGUuRWRnZTEuTmV4dEluU0VMID09PSBpbm9kZS5FZGdlMikgfHwgKGlub2RlLkVkZ2UxLlByZXZJblNFTCA9PT0gaW5vZGUuRWRnZTIpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5JbnRlcnNlY3ROb2RlU29ydCA9IGZ1bmN0aW9uIChub2RlMSwgbm9kZTIpXG5cdHtcblx0XHQvL3RoZSBmb2xsb3dpbmcgdHlwZWNhc3QgaXMgc2FmZSBiZWNhdXNlIHRoZSBkaWZmZXJlbmNlcyBpbiBQdC5ZIHdpbGxcblx0XHQvL2JlIGxpbWl0ZWQgdG8gdGhlIGhlaWdodCBvZiB0aGUgc2NhbmJlYW0uXG5cdFx0cmV0dXJuIChub2RlMi5QdC5ZIC0gbm9kZTEuUHQuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cEludGVyc2VjdGlvbk9yZGVyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdC8vcHJlLWNvbmRpdGlvbjogaW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGJvdHRvbS1tb3N0IGZpcnN0LlxuXHRcdC8vTm93IGl0J3MgY3J1Y2lhbCB0aGF0IGludGVyc2VjdGlvbnMgYXJlIG1hZGUgb25seSBiZXR3ZWVuIGFkamFjZW50IGVkZ2VzLFxuXHRcdC8vc28gdG8gZW5zdXJlIHRoaXMgdGhlIG9yZGVyIG9mIGludGVyc2VjdGlvbnMgbWF5IG5lZWQgYWRqdXN0aW5nIC4uLlxuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnNvcnQodGhpcy5tX0ludGVyc2VjdE5vZGVDb21wYXJlcik7XG5cdFx0dGhpcy5Db3B5QUVMVG9TRUwoKTtcblx0XHR2YXIgY250ID0gdGhpcy5tX0ludGVyc2VjdExpc3QubGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY250OyBpKyspXG5cdFx0e1xuXHRcdFx0aWYgKCF0aGlzLkVkZ2VzQWRqYWNlbnQodGhpcy5tX0ludGVyc2VjdExpc3RbaV0pKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgaiA9IGkgKyAxO1xuXHRcdFx0XHR3aGlsZSAoaiA8IGNudCAmJiAhdGhpcy5FZGdlc0FkamFjZW50KHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdKSlcblx0XHRcdFx0XHRqKys7XG5cdFx0XHRcdGlmIChqID09PSBjbnQpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR2YXIgdG1wID0gdGhpcy5tX0ludGVyc2VjdExpc3RbaV07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldID0gdGhpcy5tX0ludGVyc2VjdExpc3Rbal07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdID0gdG1wO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwodGhpcy5tX0ludGVyc2VjdExpc3RbaV0uRWRnZTEsIHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldLkVkZ2UyKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSW50ZXJzZWN0TGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMubV9JbnRlcnNlY3RMaXN0Lmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgaU5vZGUgPSB0aGlzLm1fSW50ZXJzZWN0TGlzdFtpXTtcblx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoaU5vZGUuRWRnZTEsIGlOb2RlLkVkZ2UyLCBpTm9kZS5QdCk7XG5cdFx0XHR0aGlzLlN3YXBQb3NpdGlvbnNJbkFFTChpTm9kZS5FZGdlMSwgaU5vZGUuRWRnZTIpO1xuXHRcdH1cblx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYID0gZnVuY3Rpb24gKGVkZ2UsIGN1cnJlbnRZKVxuXHR7XG5cdFx0Ly9pZiAoZWRnZS5Cb3QgPT0gZWRnZS5DdXJyKSBhbGVydCAoXCJlZGdlLkJvdCA9IGVkZ2UuQ3VyclwiKTtcblx0XHQvL2lmIChlZGdlLkJvdCA9PSBlZGdlLlRvcCkgYWxlcnQgKFwiZWRnZS5Cb3QgPSBlZGdlLlRvcFwiKTtcblx0XHRpZiAoY3VycmVudFkgPT09IGVkZ2UuVG9wLlkpXG5cdFx0XHRyZXR1cm4gZWRnZS5Ub3AuWDtcblx0XHRyZXR1cm4gZWRnZS5Cb3QuWCArIGVkZ2UuRHggKiAoY3VycmVudFkgLSBlZGdlLkJvdC5ZKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkludGVyc2VjdFBvaW50ID0gZnVuY3Rpb24gKGVkZ2UxLCBlZGdlMiwgaXApXG5cdHtcblx0XHRpcC5YID0gMDtcblx0XHRpcC5ZID0gMDtcblx0XHR2YXIgYjEsIGIyO1xuXHRcdC8vbmI6IHdpdGggdmVyeSBsYXJnZSBjb29yZGluYXRlIHZhbHVlcywgaXQncyBwb3NzaWJsZSBmb3IgU2xvcGVzRXF1YWwoKSB0b1xuXHRcdC8vcmV0dXJuIGZhbHNlIGJ1dCBmb3IgdGhlIGVkZ2UuRHggdmFsdWUgYmUgZXF1YWwgZHVlIHRvIGRvdWJsZSBwcmVjaXNpb24gcm91bmRpbmcuXG5cdFx0aWYgKGVkZ2UxLkR4ID09PSBlZGdlMi5EeClcblx0XHR7XG5cdFx0XHRpcC5ZID0gZWRnZTEuQ3Vyci5ZO1xuXHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UxLCBpcC5ZKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGVkZ2UxLkRlbHRhLlggPT09IDApXG5cdFx0e1xuXHRcdFx0aXAuWCA9IGVkZ2UxLkJvdC5YO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGVkZ2UyKSlcblx0XHRcdHtcblx0XHRcdFx0aXAuWSA9IGVkZ2UyLkJvdC5ZO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRiMiA9IGVkZ2UyLkJvdC5ZIC0gKGVkZ2UyLkJvdC5YIC8gZWRnZTIuRHgpO1xuXHRcdFx0XHRpcC5ZID0gaXAuWCAvIGVkZ2UyLkR4ICsgYjI7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVkZ2UyLkRlbHRhLlggPT09IDApXG5cdFx0e1xuXHRcdFx0aXAuWCA9IGVkZ2UyLkJvdC5YO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGVkZ2UxKSlcblx0XHRcdHtcblx0XHRcdFx0aXAuWSA9IGVkZ2UxLkJvdC5ZO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRiMSA9IGVkZ2UxLkJvdC5ZIC0gKGVkZ2UxLkJvdC5YIC8gZWRnZTEuRHgpO1xuXHRcdFx0XHRpcC5ZID0gaXAuWCAvIGVkZ2UxLkR4ICsgYjE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRiMSA9IGVkZ2UxLkJvdC5YIC0gZWRnZTEuQm90LlkgKiBlZGdlMS5EeDtcblx0XHRcdGIyID0gZWRnZTIuQm90LlggLSBlZGdlMi5Cb3QuWSAqIGVkZ2UyLkR4O1xuXHRcdFx0dmFyIHEgPSAoYjIgLSBiMSkgLyAoZWRnZTEuRHggLSBlZGdlMi5EeCk7XG5cdFx0XHRpcC5ZID0gcTtcblx0XHRcdGlmIChNYXRoLmFicyhlZGdlMS5EeCkgPCBNYXRoLmFicyhlZGdlMi5EeCkpXG5cdFx0XHRcdGlwLlggPSBlZGdlMS5EeCAqIHEgKyBiMTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWCA9IGVkZ2UyLkR4ICogcSArIGIyO1xuXHRcdH1cblx0XHRpZiAoaXAuWSA8IGVkZ2UxLlRvcC5ZIHx8IGlwLlkgPCBlZGdlMi5Ub3AuWSlcblx0XHR7XG5cdFx0XHRpZiAoZWRnZTEuVG9wLlkgPiBlZGdlMi5Ub3AuWSlcblx0XHRcdHtcblx0XHRcdFx0aXAuWSA9IGVkZ2UxLlRvcC5ZO1xuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGVkZ2UxLlRvcC5ZKTtcblx0XHRcdFx0cmV0dXJuIGlwLlggPCBlZGdlMS5Ub3AuWDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWSA9IGVkZ2UyLlRvcC5ZO1xuXHRcdFx0aWYgKE1hdGguYWJzKGVkZ2UxLkR4KSA8IE1hdGguYWJzKGVkZ2UyLkR4KSlcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UxLCBpcC5ZKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UyLCBpcC5ZKTtcblx0XHR9XG5cdFx0Ly9maW5hbGx5LCBkb24ndCBhbGxvdyAnaXAnIHRvIGJlIEJFTE9XIGN1cnIuWSAoaWUgYm90dG9tIG9mIHNjYW5iZWFtKSAuLi5cblx0XHRpZiAoaXAuWSA+IGVkZ2UxLkN1cnIuWSlcblx0XHR7XG5cdFx0XHRpcC5ZID0gZWRnZTEuQ3Vyci5ZO1xuXHRcdFx0Ly9iZXR0ZXIgdG8gdXNlIHRoZSBtb3JlIHZlcnRpY2FsIGVkZ2UgdG8gZGVyaXZlIFggLi4uXG5cdFx0XHRpZiAoTWF0aC5hYnMoZWRnZTEuRHgpID4gTWF0aC5hYnMoZWRnZTIuRHgpKVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGlwLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTEsIGlwLlkpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NFZGdlc0F0VG9wT2ZTY2FuYmVhbSA9IGZ1bmN0aW9uICh0b3BZKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHQvLzEuIHByb2Nlc3MgbWF4aW1hLCB0cmVhdGluZyB0aGVtIGFzIGlmIHRoZXkncmUgJ2JlbnQnIGhvcml6b250YWwgZWRnZXMsXG5cdFx0XHQvLyAgIGJ1dCBleGNsdWRlIG1heGltYSB3aXRoIGhvcml6b250YWwgZWRnZXMuIG5iOiBlIGNhbid0IGJlIGEgaG9yaXpvbnRhbC5cblx0XHRcdHZhciBJc01heGltYUVkZ2UgPSB0aGlzLklzTWF4aW1hKGUsIHRvcFkpO1xuXHRcdFx0aWYgKElzTWF4aW1hRWRnZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGVNYXhQYWlyID0gdGhpcy5HZXRNYXhpbWFQYWlyRXgoZSk7XG5cdFx0XHRcdElzTWF4aW1hRWRnZSA9IChlTWF4UGFpciA9PT0gbnVsbCB8fCAhQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZU1heFBhaXIpKTtcblx0XHRcdH1cblx0XHRcdGlmIChJc01heGltYUVkZ2UpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICh0aGlzLlN0cmljdGx5U2ltcGxlKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGhpcy5JbnNlcnRNYXhpbWEoZS5Ub3AuWCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGVQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0XHRcdHRoaXMuRG9NYXhpbWEoZSk7XG5cdFx0XHRcdGlmIChlUHJldiA9PT0gbnVsbClcblx0XHRcdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0ZSA9IGVQcmV2Lk5leHRJbkFFTDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly8yLiBwcm9tb3RlIGhvcml6b250YWwgZWRnZXMsIG90aGVyd2lzZSB1cGRhdGUgQ3Vyci5YIGFuZCBDdXJyLlkgLi4uXG5cdFx0XHRcdGlmICh0aGlzLklzSW50ZXJtZWRpYXRlKGUsIHRvcFkpICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGUuTmV4dEluTE1MKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGUgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGUpO1xuXHRcdFx0XHRcdGlmIChlLk91dElkeCA+PSAwKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChlLCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwoZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZS5DdXJyLlggPSBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlLCB0b3BZKTtcblx0XHRcdFx0XHRlLkN1cnIuWSA9IHRvcFk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGUuVG9wLlkgPT09IHRvcFkpIGUuQ3Vyci5aID0gZS5Ub3AuWjtcblx0XHRcdFx0XHRlbHNlIGlmIChlLkJvdC5ZID09PSB0b3BZKSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdFx0ZWxzZSBlLkN1cnIuWiA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1doZW4gU3RyaWN0bHlTaW1wbGUgYW5kICdlJyBpcyBiZWluZyB0b3VjaGVkIGJ5IGFub3RoZXIgZWRnZSwgdGhlblxuXHRcdFx0XHQvL21ha2Ugc3VyZSBib3RoIGVkZ2VzIGhhdmUgYSB2ZXJ0ZXggaGVyZSAuLi5cblx0XHRcdFx0aWYgKHRoaXMuU3RyaWN0bHlTaW1wbGUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZVByZXYgPSBlLlByZXZJbkFFTDtcblx0XHRcdFx0XHRpZiAoKGUuT3V0SWR4ID49IDApICYmIChlLldpbmREZWx0YSAhPT0gMCkgJiYgZVByZXYgIT09IG51bGwgJiZcblx0XHRcdFx0XHRcdChlUHJldi5PdXRJZHggPj0gMCkgJiYgKGVQcmV2LkN1cnIuWCA9PT0gZS5DdXJyLlgpICYmXG5cdFx0XHRcdFx0XHQoZVByZXYuV2luZERlbHRhICE9PSAwKSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgaXAgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQxKGUuQ3Vycik7XG5cblx0XHRcdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRoaXMuU2V0WihpcCwgZVByZXYsIGUpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgb3AgPSB0aGlzLkFkZE91dFB0KGVQcmV2LCBpcCk7XG5cdFx0XHRcdFx0XHR2YXIgb3AyID0gdGhpcy5BZGRPdXRQdChlLCBpcCk7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AsIG9wMiwgaXApOyAvL1N0cmljdGx5U2ltcGxlICh0eXBlLTMpIGpvaW5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLzMuIFByb2Nlc3MgaG9yaXpvbnRhbHMgYXQgdGhlIFRvcCBvZiB0aGUgc2NhbmJlYW0gLi4uXG5cdFx0dGhpcy5Qcm9jZXNzSG9yaXpvbnRhbHMoKTtcblx0XHR0aGlzLm1fTWF4aW1hID0gbnVsbDtcblx0XHQvLzQuIFByb21vdGUgaW50ZXJtZWRpYXRlIHZlcnRpY2VzIC4uLlxuXHRcdGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cdFx0d2hpbGUgKGUgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuSXNJbnRlcm1lZGlhdGUoZSwgdG9wWSkpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBvcCA9IG51bGw7XG5cdFx0XHRcdGlmIChlLk91dElkeCA+PSAwKVxuXHRcdFx0XHRcdG9wID0gdGhpcy5BZGRPdXRQdChlLCBlLlRvcCk7XG5cdFx0XHRcdGUgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGUpO1xuXHRcdFx0XHQvL2lmIG91dHB1dCBwb2x5Z29ucyBzaGFyZSBhbiBlZGdlLCB0aGV5J2xsIG5lZWQgam9pbmluZyBsYXRlciAuLi5cblx0XHRcdFx0dmFyIGVQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0XHRcdHZhciBlTmV4dCA9IGUuTmV4dEluQUVMO1xuXG5cdFx0XHRcdGlmIChlUHJldiAhPT0gbnVsbCAmJiBlUHJldi5DdXJyLlggPT09IGUuQm90LlggJiYgZVByZXYuQ3Vyci5ZID09PSBlLkJvdC5ZICYmIG9wICE9PSBudWxsICYmIGVQcmV2Lk91dElkeCA+PSAwICYmIGVQcmV2LkN1cnIuWSA9PT0gZVByZXYuVG9wLlkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDUoZS5DdXJyLCBlLlRvcCwgZVByZXYuQ3VyciwgZVByZXYuVG9wKSAmJiAoZS5XaW5kRGVsdGEgIT09IDApICYmIChlUHJldi5XaW5kRGVsdGEgIT09IDApKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuQWRkT3V0UHQoZVByZXYyLCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wLCBvcDIsIGUuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChlTmV4dCAhPT0gbnVsbCAmJiBlTmV4dC5DdXJyLlggPT09IGUuQm90LlggJiYgZU5leHQuQ3Vyci5ZID09PSBlLkJvdC5ZICYmIG9wICE9PSBudWxsICYmIGVOZXh0Lk91dElkeCA+PSAwICYmIGVOZXh0LkN1cnIuWSA9PT0gZU5leHQuVG9wLlkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDUoZS5DdXJyLCBlLlRvcCwgZU5leHQuQ3VyciwgZU5leHQuVG9wKSAmJiAoZS5XaW5kRGVsdGEgIT09IDApICYmIChlTmV4dC5XaW5kRGVsdGEgIT09IDApKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuQWRkT3V0UHQoZU5leHQsIGUuQm90KTtcblx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AsIG9wMiwgZS5Ub3ApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRG9NYXhpbWEgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdHZhciBlTWF4UGFpciA9IHRoaXMuR2V0TWF4aW1hUGFpckV4KGUpO1xuXHRcdGlmIChlTWF4UGFpciA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRpZiAoZS5PdXRJZHggPj0gMClcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlLCBlLlRvcCk7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBlTmV4dCA9IGUuTmV4dEluQUVMO1xuXHRcdHdoaWxlIChlTmV4dCAhPT0gbnVsbCAmJiBlTmV4dCAhPT0gZU1heFBhaXIpXG5cdFx0e1xuXHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhlLCBlTmV4dCwgZS5Ub3ApO1xuXHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5BRUwoZSwgZU5leHQpO1xuXHRcdFx0ZU5leHQgPSBlLk5leHRJbkFFTDtcblx0XHR9XG5cdFx0aWYgKGUuT3V0SWR4ID09PSAtMSAmJiBlTWF4UGFpci5PdXRJZHggPT09IC0xKVxuXHRcdHtcblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChlKTtcblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChlTWF4UGFpcik7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGUuT3V0SWR4ID49IDAgJiYgZU1heFBhaXIuT3V0SWR4ID49IDApXG5cdFx0e1xuXHRcdFx0aWYgKGUuT3V0SWR4ID49IDApIHRoaXMuQWRkTG9jYWxNYXhQb2x5KGUsIGVNYXhQYWlyLCBlLlRvcCk7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZSk7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZU1heFBhaXIpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChDbGlwcGVyTGliLnVzZV9saW5lcyAmJiBlLldpbmREZWx0YSA9PT0gMClcblx0XHR7XG5cdFx0XHRpZiAoZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlLCBlLlRvcCk7XG5cdFx0XHRcdGUuT3V0SWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGUpO1xuXHRcdFx0aWYgKGVNYXhQYWlyLk91dElkeCA+PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkFkZE91dFB0KGVNYXhQYWlyLCBlLlRvcCk7XG5cdFx0XHRcdGVNYXhQYWlyLk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZDtcblx0XHRcdH1cblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChlTWF4UGFpcik7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJEb01heGltYSBlcnJvclwiKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUmV2ZXJzZVBhdGhzID0gZnVuY3Rpb24gKHBvbHlzKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IHBvbHlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKVxuXHRcdFx0cG9seXNbaV0ucmV2ZXJzZSgpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5PcmllbnRhdGlvbiA9IGZ1bmN0aW9uIChwb2x5KVxuXHR7XG5cdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5BcmVhKHBvbHkpID49IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qb2ludENvdW50ID0gZnVuY3Rpb24gKHB0cylcblx0e1xuXHRcdGlmIChwdHMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR2YXIgcmVzdWx0ID0gMDtcblx0XHR2YXIgcCA9IHB0cztcblx0XHRkbyB7XG5cdFx0XHRyZXN1bHQrKztcblx0XHRcdHAgPSBwLk5leHQ7XG5cdFx0fVxuXHRcdHdoaWxlIChwICE9PSBwdHMpXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkJ1aWxkUmVzdWx0ID0gZnVuY3Rpb24gKHBvbHlnKVxuXHR7XG5cdFx0Q2xpcHBlckxpYi5DbGVhcihwb2x5Zyk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRpZiAob3V0UmVjLlB0cyA9PT0gbnVsbClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR2YXIgcCA9IG91dFJlYy5QdHMuUHJldjtcblx0XHRcdHZhciBjbnQgPSB0aGlzLlBvaW50Q291bnQocCk7XG5cdFx0XHRpZiAoY250IDwgMilcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR2YXIgcGcgPSBuZXcgQXJyYXkoY250KTtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgY250OyBqKyspXG5cdFx0XHR7XG5cdFx0XHRcdHBnW2pdID0gcC5QdDtcblx0XHRcdFx0cCA9IHAuUHJldjtcblx0XHRcdH1cblx0XHRcdHBvbHlnLnB1c2gocGcpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkJ1aWxkUmVzdWx0MiA9IGZ1bmN0aW9uIChwb2x5dHJlZSlcblx0e1xuXHRcdHBvbHl0cmVlLkNsZWFyKCk7XG5cdFx0Ly9hZGQgZWFjaCBvdXRwdXQgcG9seWdvbi9jb250b3VyIHRvIHBvbHl0cmVlIC4uLlxuXHRcdC8vcG9seXRyZWUubV9BbGxQb2x5cy5zZXRfQ2FwYWNpdHkodGhpcy5tX1BvbHlPdXRzLmxlbmd0aCk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHR2YXIgY250ID0gdGhpcy5Qb2ludENvdW50KG91dFJlYy5QdHMpO1xuXHRcdFx0aWYgKChvdXRSZWMuSXNPcGVuICYmIGNudCA8IDIpIHx8ICghb3V0UmVjLklzT3BlbiAmJiBjbnQgPCAzKSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR0aGlzLkZpeEhvbGVMaW5rYWdlKG91dFJlYyk7XG5cdFx0XHR2YXIgcG4gPSBuZXcgQ2xpcHBlckxpYi5Qb2x5Tm9kZSgpO1xuXHRcdFx0cG9seXRyZWUubV9BbGxQb2x5cy5wdXNoKHBuKTtcblx0XHRcdG91dFJlYy5Qb2x5Tm9kZSA9IHBuO1xuXHRcdFx0cG4ubV9wb2x5Z29uLmxlbmd0aCA9IGNudDtcblx0XHRcdHZhciBvcCA9IG91dFJlYy5QdHMuUHJldjtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgY250OyBqKyspXG5cdFx0XHR7XG5cdFx0XHRcdHBuLm1fcG9seWdvbltqXSA9IG9wLlB0O1xuXHRcdFx0XHRvcCA9IG9wLlByZXY7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vZml4dXAgUG9seU5vZGUgbGlua3MgZXRjIC4uLlxuXHRcdC8vcG9seXRyZWUubV9DaGlsZHMuc2V0X0NhcGFjaXR5KHRoaXMubV9Qb2x5T3V0cy5sZW5ndGgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0aWYgKG91dFJlYy5Qb2x5Tm9kZSA9PT0gbnVsbClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRlbHNlIGlmIChvdXRSZWMuSXNPcGVuKVxuXHRcdFx0e1xuXHRcdFx0XHRvdXRSZWMuUG9seU5vZGUuSXNPcGVuID0gdHJ1ZTtcblx0XHRcdFx0cG9seXRyZWUuQWRkQ2hpbGQob3V0UmVjLlBvbHlOb2RlKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG91dFJlYy5GaXJzdExlZnQgIT09IG51bGwgJiYgb3V0UmVjLkZpcnN0TGVmdC5Qb2x5Tm9kZSAhPT0gbnVsbClcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdC5Qb2x5Tm9kZS5BZGRDaGlsZChvdXRSZWMuUG9seU5vZGUpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRwb2x5dHJlZS5BZGRDaGlsZChvdXRSZWMuUG9seU5vZGUpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwT3V0UG9seWxpbmUgPSBmdW5jdGlvbiAob3V0UmVjKVxuXHR7XG5cdFx0dmFyIHBwID0gb3V0UmVjLlB0cztcblx0XHR2YXIgbGFzdFBQID0gcHAuUHJldjtcblx0XHR3aGlsZSAocHAgIT09IGxhc3RQUClcblx0XHR7XG5cdFx0XHRwcCA9IHBwLk5leHQ7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkocHAuUHQsIHBwLlByZXYuUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocHAgPT09IGxhc3RQUClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhc3RQUCA9IHBwLlByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHRtcFBQID0gcHAuUHJldjtcblx0XHRcdFx0dG1wUFAuTmV4dCA9IHBwLk5leHQ7XG5cdFx0XHRcdHBwLk5leHQuUHJldiA9IHRtcFBQO1xuXHRcdFx0XHRwcCA9IHRtcFBQO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocHAgPT09IHBwLlByZXYpXG5cdFx0e1xuXHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4dXBPdXRQb2x5Z29uID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdC8vRml4dXBPdXRQb2x5Z29uKCkgLSByZW1vdmVzIGR1cGxpY2F0ZSBwb2ludHMgYW5kIHNpbXBsaWZpZXMgY29uc2VjdXRpdmVcblx0XHQvL3BhcmFsbGVsIGVkZ2VzIGJ5IHJlbW92aW5nIHRoZSBtaWRkbGUgdmVydGV4LlxuXHRcdHZhciBsYXN0T0sgPSBudWxsO1xuXHRcdG91dFJlYy5Cb3R0b21QdCA9IG51bGw7XG5cdFx0dmFyIHBwID0gb3V0UmVjLlB0cztcblx0XHR2YXIgcHJlc2VydmVDb2wgPSB0aGlzLlByZXNlcnZlQ29sbGluZWFyIHx8IHRoaXMuU3RyaWN0bHlTaW1wbGU7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHRpZiAocHAuUHJldiA9PT0gcHAgfHwgcHAuUHJldiA9PT0gcHAuTmV4dClcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly90ZXN0IGZvciBkdXBsaWNhdGUgcG9pbnRzIGFuZCBjb2xsaW5lYXIgZWRnZXMgLi4uXG5cdFx0XHRpZiAoKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHBwLlB0LCBwcC5OZXh0LlB0KSkgfHwgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHBwLlB0LCBwcC5QcmV2LlB0KSkgfHwgKENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KHBwLlByZXYuUHQsIHBwLlB0LCBwcC5OZXh0LlB0KSAmJiAoIXByZXNlcnZlQ29sIHx8ICF0aGlzLlB0MklzQmV0d2VlblB0MUFuZFB0MyhwcC5QcmV2LlB0LCBwcC5QdCwgcHAuTmV4dC5QdCkpKSlcblx0XHRcdHtcblx0XHRcdFx0bGFzdE9LID0gbnVsbDtcblx0XHRcdFx0cHAuUHJldi5OZXh0ID0gcHAuTmV4dDtcblx0XHRcdFx0cHAuTmV4dC5QcmV2ID0gcHAuUHJldjtcblx0XHRcdFx0cHAgPSBwcC5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocHAgPT09IGxhc3RPSylcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChsYXN0T0sgPT09IG51bGwpXG5cdFx0XHRcdFx0bGFzdE9LID0gcHA7XG5cdFx0XHRcdHBwID0gcHAuTmV4dDtcblx0XHRcdH1cblx0XHR9XG5cdFx0b3V0UmVjLlB0cyA9IHBwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRHVwT3V0UHQgPSBmdW5jdGlvbiAob3V0UHQsIEluc2VydEFmdGVyKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLk91dFB0KCk7XG5cdFx0Ly9yZXN1bHQuUHQgPSBvdXRQdC5QdDtcblx0XHRyZXN1bHQuUHQuWCA9IG91dFB0LlB0Llg7XG5cdFx0cmVzdWx0LlB0LlkgPSBvdXRQdC5QdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIHJlc3VsdC5QdC5aID0gb3V0UHQuUHQuWjtcblx0XHRyZXN1bHQuSWR4ID0gb3V0UHQuSWR4O1xuXHRcdGlmIChJbnNlcnRBZnRlcilcblx0XHR7XG5cdFx0XHRyZXN1bHQuTmV4dCA9IG91dFB0Lk5leHQ7XG5cdFx0XHRyZXN1bHQuUHJldiA9IG91dFB0O1xuXHRcdFx0b3V0UHQuTmV4dC5QcmV2ID0gcmVzdWx0O1xuXHRcdFx0b3V0UHQuTmV4dCA9IHJlc3VsdDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJlc3VsdC5QcmV2ID0gb3V0UHQuUHJldjtcblx0XHRcdHJlc3VsdC5OZXh0ID0gb3V0UHQ7XG5cdFx0XHRvdXRQdC5QcmV2Lk5leHQgPSByZXN1bHQ7XG5cdFx0XHRvdXRQdC5QcmV2ID0gcmVzdWx0O1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0T3ZlcmxhcCA9IGZ1bmN0aW9uIChhMSwgYTIsIGIxLCBiMiwgJHZhbClcblx0e1xuXHRcdGlmIChhMSA8IGEyKVxuXHRcdHtcblx0XHRcdGlmIChiMSA8IGIyKVxuXHRcdFx0e1xuXHRcdFx0XHQkdmFsLkxlZnQgPSBNYXRoLm1heChhMSwgYjEpO1xuXHRcdFx0XHQkdmFsLlJpZ2h0ID0gTWF0aC5taW4oYTIsIGIyKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0JHZhbC5MZWZ0ID0gTWF0aC5tYXgoYTEsIGIyKTtcblx0XHRcdFx0JHZhbC5SaWdodCA9IE1hdGgubWluKGEyLCBiMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoYjEgPCBiMilcblx0XHRcdHtcblx0XHRcdFx0JHZhbC5MZWZ0ID0gTWF0aC5tYXgoYTIsIGIxKTtcblx0XHRcdFx0JHZhbC5SaWdodCA9IE1hdGgubWluKGExLCBiMik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdCR2YWwuTGVmdCA9IE1hdGgubWF4KGEyLCBiMik7XG5cdFx0XHRcdCR2YWwuUmlnaHQgPSBNYXRoLm1pbihhMSwgYjEpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJHZhbC5MZWZ0IDwgJHZhbC5SaWdodDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkpvaW5Ib3J6ID0gZnVuY3Rpb24gKG9wMSwgb3AxYiwgb3AyLCBvcDJiLCBQdCwgRGlzY2FyZExlZnQpXG5cdHtcblx0XHR2YXIgRGlyMSA9IChvcDEuUHQuWCA+IG9wMWIuUHQuWCA/IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdCA6IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodCk7XG5cdFx0dmFyIERpcjIgPSAob3AyLlB0LlggPiBvcDJiLlB0LlggPyBDbGlwcGVyTGliLkRpcmVjdGlvbi5kUmlnaHRUb0xlZnQgOiBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpO1xuXHRcdGlmIChEaXIxID09PSBEaXIyKVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdC8vV2hlbiBEaXNjYXJkTGVmdCwgd2Ugd2FudCBPcDFiIHRvIGJlIG9uIHRoZSBMZWZ0IG9mIE9wMSwgb3RoZXJ3aXNlIHdlXG5cdFx0Ly93YW50IE9wMWIgdG8gYmUgb24gdGhlIFJpZ2h0LiAoQW5kIGxpa2V3aXNlIHdpdGggT3AyIGFuZCBPcDJiLilcblx0XHQvL1NvLCB0byBmYWNpbGl0YXRlIHRoaXMgd2hpbGUgaW5zZXJ0aW5nIE9wMWIgYW5kIE9wMmIgLi4uXG5cdFx0Ly93aGVuIERpc2NhcmRMZWZ0LCBtYWtlIHN1cmUgd2UncmUgQVQgb3IgUklHSFQgb2YgUHQgYmVmb3JlIGFkZGluZyBPcDFiLFxuXHRcdC8vb3RoZXJ3aXNlIG1ha2Ugc3VyZSB3ZSdyZSBBVCBvciBMRUZUIG9mIFB0LiAoTGlrZXdpc2Ugd2l0aCBPcDJiLilcblx0XHRpZiAoRGlyMSA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KVxuXHRcdHtcblx0XHRcdHdoaWxlIChvcDEuTmV4dC5QdC5YIDw9IFB0LlggJiZcblx0XHRcdFx0b3AxLk5leHQuUHQuWCA+PSBvcDEuUHQuWCAmJiBvcDEuTmV4dC5QdC5ZID09PSBQdC5ZKVxuXHRcdFx0XHRvcDEgPSBvcDEuTmV4dDtcblx0XHRcdGlmIChEaXNjYXJkTGVmdCAmJiAob3AxLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDEgPSBvcDEuTmV4dDtcblx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgIURpc2NhcmRMZWZ0KTtcblx0XHRcdGlmIChDbGlwcGVyTGliLkZQb2ludC5vcF9JbmVxdWFsaXR5KG9wMWIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AxID0gb3AxYjtcblx0XHRcdFx0Ly9vcDEuUHQgPSBQdDtcblx0XHRcdFx0b3AxLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDEuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMS5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCAhRGlzY2FyZExlZnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0d2hpbGUgKG9wMS5OZXh0LlB0LlggPj0gUHQuWCAmJlxuXHRcdFx0XHRvcDEuTmV4dC5QdC5YIDw9IG9wMS5QdC5YICYmIG9wMS5OZXh0LlB0LlkgPT09IFB0LlkpXG5cdFx0XHRcdG9wMSA9IG9wMS5OZXh0O1xuXHRcdFx0aWYgKCFEaXNjYXJkTGVmdCAmJiAob3AxLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDEgPSBvcDEuTmV4dDtcblx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgRGlzY2FyZExlZnQpO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0luZXF1YWxpdHkob3AxYi5QdCwgUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDEgPSBvcDFiO1xuXHRcdFx0XHQvL29wMS5QdCA9IFB0O1xuXHRcdFx0XHRvcDEuUHQuWCA9IFB0Llg7XG5cdFx0XHRcdG9wMS5QdC5ZID0gUHQuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgb3AxLlB0LlogPSBQdC5aO1xuXHRcdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsIERpc2NhcmRMZWZ0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKERpcjIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHR7XG5cdFx0XHR3aGlsZSAob3AyLk5leHQuUHQuWCA8PSBQdC5YICYmXG5cdFx0XHRcdG9wMi5OZXh0LlB0LlggPj0gb3AyLlB0LlggJiYgb3AyLk5leHQuUHQuWSA9PT0gUHQuWSlcblx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRpZiAoRGlzY2FyZExlZnQgJiYgKG9wMi5QdC5YICE9PSBQdC5YKSlcblx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsICFEaXNjYXJkTGVmdCk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5GUG9pbnQub3BfSW5lcXVhbGl0eShvcDJiLlB0LCBQdCkpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMiA9IG9wMmI7XG5cdFx0XHRcdC8vb3AyLlB0ID0gUHQ7XG5cdFx0XHRcdG9wMi5QdC5YID0gUHQuWDtcblx0XHRcdFx0b3AyLlB0LlkgPSBQdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBvcDIuUHQuWiA9IFB0Llo7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgIURpc2NhcmRMZWZ0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHdoaWxlIChvcDIuTmV4dC5QdC5YID49IFB0LlggJiZcblx0XHRcdFx0b3AyLk5leHQuUHQuWCA8PSBvcDIuUHQuWCAmJiBvcDIuTmV4dC5QdC5ZID09PSBQdC5ZKVxuXHRcdFx0XHRvcDIgPSBvcDIuTmV4dDtcblx0XHRcdGlmICghRGlzY2FyZExlZnQgJiYgKG9wMi5QdC5YICE9PSBQdC5YKSlcblx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsIERpc2NhcmRMZWZ0KTtcblx0XHRcdGlmIChDbGlwcGVyTGliLkZQb2ludC5vcF9JbmVxdWFsaXR5KG9wMmIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AyID0gb3AyYjtcblx0XHRcdFx0Ly9vcDIuUHQgPSBQdDtcblx0XHRcdFx0b3AyLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDIuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMi5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBEaXNjYXJkTGVmdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICgoRGlyMSA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KSA9PT0gRGlzY2FyZExlZnQpXG5cdFx0e1xuXHRcdFx0b3AxLlByZXYgPSBvcDI7XG5cdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdG9wMWIuTmV4dCA9IG9wMmI7XG5cdFx0XHRvcDJiLlByZXYgPSBvcDFiO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0b3AxLk5leHQgPSBvcDI7XG5cdFx0XHRvcDIuUHJldiA9IG9wMTtcblx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRvcDJiLk5leHQgPSBvcDFiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkpvaW5Qb2ludHMgPSBmdW5jdGlvbiAoaiwgb3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdHZhciBvcDEgPSBqLk91dFB0MSxcblx0XHRcdG9wMWIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdHZhciBvcDIgPSBqLk91dFB0Mixcblx0XHRcdG9wMmIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdC8vVGhlcmUgYXJlIDMga2luZHMgb2Ygam9pbnMgZm9yIG91dHB1dCBwb2x5Z29ucyAuLi5cblx0XHQvLzEuIEhvcml6b250YWwgam9pbnMgd2hlcmUgSm9pbi5PdXRQdDEgJiBKb2luLk91dFB0MiBhcmUgdmVydGljZXMgYW55d2hlcmVcblx0XHQvL2Fsb25nIChob3Jpem9udGFsKSBjb2xsaW5lYXIgZWRnZXMgKCYgSm9pbi5PZmZQdCBpcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsKS5cblx0XHQvLzIuIE5vbi1ob3Jpem9udGFsIGpvaW5zIHdoZXJlIEpvaW4uT3V0UHQxICYgSm9pbi5PdXRQdDIgYXJlIGF0IHRoZSBzYW1lXG5cdFx0Ly9sb2NhdGlvbiBhdCB0aGUgQm90dG9tIG9mIHRoZSBvdmVybGFwcGluZyBzZWdtZW50ICgmIEpvaW4uT2ZmUHQgaXMgYWJvdmUpLlxuXHRcdC8vMy4gU3RyaWN0bHlTaW1wbGUgam9pbnMgd2hlcmUgZWRnZXMgdG91Y2ggYnV0IGFyZSBub3QgY29sbGluZWFyIGFuZCB3aGVyZVxuXHRcdC8vSm9pbi5PdXRQdDEsIEpvaW4uT3V0UHQyICYgSm9pbi5PZmZQdCBhbGwgc2hhcmUgdGhlIHNhbWUgcG9pbnQuXG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IChqLk91dFB0MS5QdC5ZID09PSBqLk9mZlB0LlkpO1xuXHRcdGlmIChpc0hvcml6b250YWwgJiYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KGouT2ZmUHQsIGouT3V0UHQxLlB0KSkgJiYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KGouT2ZmUHQsIGouT3V0UHQyLlB0KSkpXG5cdFx0e1xuXHRcdFx0Ly9TdHJpY3RseSBTaW1wbGUgam9pbiAuLi5cblx0XHRcdGlmIChvdXRSZWMxICE9PSBvdXRSZWMyKSByZXR1cm4gZmFsc2U7XG5cblx0XHRcdG9wMWIgPSBqLk91dFB0MS5OZXh0O1xuXHRcdFx0d2hpbGUgKG9wMWIgIT09IG9wMSAmJiAoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkob3AxYi5QdCwgai5PZmZQdCkpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIHJldmVyc2UxID0gKG9wMWIuUHQuWSA+IGouT2ZmUHQuWSk7XG5cdFx0XHRvcDJiID0gai5PdXRQdDIuTmV4dDtcblx0XHRcdHdoaWxlIChvcDJiICE9PSBvcDIgJiYgKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KG9wMmIuUHQsIGouT2ZmUHQpKSlcblx0XHRcdFx0b3AyYiA9IG9wMmIuTmV4dDtcblx0XHRcdHZhciByZXZlcnNlMiA9IChvcDJiLlB0LlkgPiBqLk9mZlB0LlkpO1xuXHRcdFx0aWYgKHJldmVyc2UxID09PSByZXZlcnNlMilcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0aWYgKHJldmVyc2UxKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsIGZhbHNlKTtcblx0XHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCB0cnVlKTtcblx0XHRcdFx0b3AxLlByZXYgPSBvcDI7XG5cdFx0XHRcdG9wMi5OZXh0ID0gb3AxO1xuXHRcdFx0XHRvcDFiLk5leHQgPSBvcDJiO1xuXHRcdFx0XHRvcDJiLlByZXYgPSBvcDFiO1xuXHRcdFx0XHRqLk91dFB0MSA9IG9wMTtcblx0XHRcdFx0ai5PdXRQdDIgPSBvcDFiO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCB0cnVlKTtcblx0XHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBmYWxzZSk7XG5cdFx0XHRcdG9wMS5OZXh0ID0gb3AyO1xuXHRcdFx0XHRvcDIuUHJldiA9IG9wMTtcblx0XHRcdFx0b3AxYi5QcmV2ID0gb3AyYjtcblx0XHRcdFx0b3AyYi5OZXh0ID0gb3AxYjtcblx0XHRcdFx0ai5PdXRQdDEgPSBvcDE7XG5cdFx0XHRcdGouT3V0UHQyID0gb3AxYjtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGlzSG9yaXpvbnRhbClcblx0XHR7XG5cdFx0XHQvL3RyZWF0IGhvcml6b250YWwgam9pbnMgZGlmZmVyZW50bHkgdG8gbm9uLWhvcml6b250YWwgam9pbnMgc2luY2Ugd2l0aFxuXHRcdFx0Ly90aGVtIHdlJ3JlIG5vdCB5ZXQgc3VyZSB3aGVyZSB0aGUgb3ZlcmxhcHBpbmcgaXMuIE91dFB0MS5QdCAmIE91dFB0Mi5QdFxuXHRcdFx0Ly9tYXkgYmUgYW55d2hlcmUgYWxvbmcgdGhlIGhvcml6b250YWwgZWRnZS5cblx0XHRcdG9wMWIgPSBvcDE7XG5cdFx0XHR3aGlsZSAob3AxLlByZXYuUHQuWSA9PT0gb3AxLlB0LlkgJiYgb3AxLlByZXYgIT09IG9wMWIgJiYgb3AxLlByZXYgIT09IG9wMilcblx0XHRcdFx0b3AxID0gb3AxLlByZXY7XG5cdFx0XHR3aGlsZSAob3AxYi5OZXh0LlB0LlkgPT09IG9wMWIuUHQuWSAmJiBvcDFiLk5leHQgIT09IG9wMSAmJiBvcDFiLk5leHQgIT09IG9wMilcblx0XHRcdFx0b3AxYiA9IG9wMWIuTmV4dDtcblx0XHRcdGlmIChvcDFiLk5leHQgPT09IG9wMSB8fCBvcDFiLk5leHQgPT09IG9wMilcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0Ly9hIGZsYXQgJ3BvbHlnb24nXG5cdFx0XHRvcDJiID0gb3AyO1xuXHRcdFx0d2hpbGUgKG9wMi5QcmV2LlB0LlkgPT09IG9wMi5QdC5ZICYmIG9wMi5QcmV2ICE9PSBvcDJiICYmIG9wMi5QcmV2ICE9PSBvcDFiKVxuXHRcdFx0XHRvcDIgPSBvcDIuUHJldjtcblx0XHRcdHdoaWxlIChvcDJiLk5leHQuUHQuWSA9PT0gb3AyYi5QdC5ZICYmIG9wMmIuTmV4dCAhPT0gb3AyICYmIG9wMmIuTmV4dCAhPT0gb3AxKVxuXHRcdFx0XHRvcDJiID0gb3AyYi5OZXh0O1xuXHRcdFx0aWYgKG9wMmIuTmV4dCA9PT0gb3AyIHx8IG9wMmIuTmV4dCA9PT0gb3AxKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHQvL2EgZmxhdCAncG9seWdvbidcblx0XHRcdC8vT3AxIC0uIE9wMWIgJiBPcDIgLS4gT3AyYiBhcmUgdGhlIGV4dHJlbWl0ZXMgb2YgdGhlIGhvcml6b250YWwgZWRnZXNcblxuXHRcdFx0dmFyICR2YWwgPSB7XG5cdFx0XHRcdExlZnQ6IG51bGwsXG5cdFx0XHRcdFJpZ2h0OiBudWxsXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoIXRoaXMuR2V0T3ZlcmxhcChvcDEuUHQuWCwgb3AxYi5QdC5YLCBvcDIuUHQuWCwgb3AyYi5QdC5YLCAkdmFsKSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0dmFyIExlZnQgPSAkdmFsLkxlZnQ7XG5cdFx0XHR2YXIgUmlnaHQgPSAkdmFsLlJpZ2h0O1xuXG5cdFx0XHQvL0Rpc2NhcmRMZWZ0U2lkZTogd2hlbiBvdmVybGFwcGluZyBlZGdlcyBhcmUgam9pbmVkLCBhIHNwaWtlIHdpbGwgY3JlYXRlZFxuXHRcdFx0Ly93aGljaCBuZWVkcyB0byBiZSBjbGVhbmVkIHVwLiBIb3dldmVyLCB3ZSBkb24ndCB3YW50IE9wMSBvciBPcDIgY2F1Z2h0IHVwXG5cdFx0XHQvL29uIHRoZSBkaXNjYXJkIFNpZGUgYXMgZWl0aGVyIG1heSBzdGlsbCBiZSBuZWVkZWQgZm9yIG90aGVyIGpvaW5zIC4uLlxuXHRcdFx0dmFyIFB0ID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MCgpO1xuXHRcdFx0dmFyIERpc2NhcmRMZWZ0U2lkZTtcblx0XHRcdGlmIChvcDEuUHQuWCA+PSBMZWZ0ICYmIG9wMS5QdC5YIDw9IFJpZ2h0KVxuXHRcdFx0e1xuXHRcdFx0XHQvL1B0ID0gb3AxLlB0O1xuXHRcdFx0XHRQdC5YID0gb3AxLlB0Llg7XG5cdFx0XHRcdFB0LlkgPSBvcDEuUHQuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgUHQuWiA9IG9wMS5QdC5aO1xuXHRcdFx0XHREaXNjYXJkTGVmdFNpZGUgPSAob3AxLlB0LlggPiBvcDFiLlB0LlgpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAob3AyLlB0LlggPj0gTGVmdCAmJiBvcDIuUHQuWCA8PSBSaWdodClcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMi5QdDtcblx0XHRcdFx0UHQuWCA9IG9wMi5QdC5YO1xuXHRcdFx0XHRQdC5ZID0gb3AyLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDIuUHQuWjtcblx0XHRcdFx0RGlzY2FyZExlZnRTaWRlID0gKG9wMi5QdC5YID4gb3AyYi5QdC5YKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG9wMWIuUHQuWCA+PSBMZWZ0ICYmIG9wMWIuUHQuWCA8PSBSaWdodClcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMWIuUHQ7XG5cdFx0XHRcdFB0LlggPSBvcDFiLlB0Llg7XG5cdFx0XHRcdFB0LlkgPSBvcDFiLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDFiLlB0Llo7XG5cdFx0XHRcdERpc2NhcmRMZWZ0U2lkZSA9IG9wMWIuUHQuWCA+IG9wMS5QdC5YO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL1B0ID0gb3AyYi5QdDtcblx0XHRcdFx0UHQuWCA9IG9wMmIuUHQuWDtcblx0XHRcdFx0UHQuWSA9IG9wMmIuUHQuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgUHQuWiA9IG9wMmIuUHQuWjtcblx0XHRcdFx0RGlzY2FyZExlZnRTaWRlID0gKG9wMmIuUHQuWCA+IG9wMi5QdC5YKTtcblx0XHRcdH1cblx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0ai5PdXRQdDIgPSBvcDI7XG5cdFx0XHRyZXR1cm4gdGhpcy5Kb2luSG9yeihvcDEsIG9wMWIsIG9wMiwgb3AyYiwgUHQsIERpc2NhcmRMZWZ0U2lkZSk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL25iOiBGb3Igbm9uLWhvcml6b250YWwgam9pbnMgLi4uXG5cdFx0XHQvLyAgICAxLiBKci5PdXRQdDEuUHQuWSA9PSBKci5PdXRQdDIuUHQuWVxuXHRcdFx0Ly8gICAgMi4gSnIuT3V0UHQxLlB0ID4gSnIuT2ZmUHQuWVxuXHRcdFx0Ly9tYWtlIHN1cmUgdGhlIHBvbHlnb25zIGFyZSBjb3JyZWN0bHkgb3JpZW50ZWQgLi4uXG5cdFx0XHRvcDFiID0gb3AxLk5leHQ7XG5cdFx0XHR3aGlsZSAoKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KG9wMWIuUHQsIG9wMS5QdCkpICYmIChvcDFiICE9PSBvcDEpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIFJldmVyc2UxID0gKChvcDFiLlB0LlkgPiBvcDEuUHQuWSkgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KG9wMS5QdCwgb3AxYi5QdCwgai5PZmZQdCkpO1xuXHRcdFx0aWYgKFJldmVyc2UxKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gb3AxLlByZXY7XG5cdFx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5GUG9pbnQub3BfRXF1YWxpdHkob3AxYi5QdCwgb3AxLlB0KSkgJiYgKG9wMWIgIT09IG9wMSkpXG5cdFx0XHRcdFx0b3AxYiA9IG9wMWIuUHJldjtcblxuXHRcdFx0XHRpZiAoKG9wMWIuUHQuWSA+IG9wMS5QdC5ZKSB8fCAhQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDQob3AxLlB0LCBvcDFiLlB0LCBqLk9mZlB0KSlcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRvcDJiID0gb3AyLk5leHQ7XG5cdFx0XHR3aGlsZSAoKENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KG9wMmIuUHQsIG9wMi5QdCkpICYmIChvcDJiICE9PSBvcDIpKVxuXHRcdFx0XHRvcDJiID0gb3AyYi5OZXh0O1xuXG5cdFx0XHR2YXIgUmV2ZXJzZTIgPSAoKG9wMmIuUHQuWSA+IG9wMi5QdC5ZKSB8fCAhQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDQob3AyLlB0LCBvcDJiLlB0LCBqLk9mZlB0KSk7XG5cdFx0XHRpZiAoUmV2ZXJzZTIpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMmIgPSBvcDIuUHJldjtcblx0XHRcdFx0d2hpbGUgKChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShvcDJiLlB0LCBvcDIuUHQpKSAmJiAob3AyYiAhPT0gb3AyKSlcblx0XHRcdFx0XHRvcDJiID0gb3AyYi5QcmV2O1xuXG5cdFx0XHRcdGlmICgob3AyYi5QdC5ZID4gb3AyLlB0LlkpIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChvcDIuUHQsIG9wMmIuUHQsIGouT2ZmUHQpKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmICgob3AxYiA9PT0gb3AxKSB8fCAob3AyYiA9PT0gb3AyKSB8fCAob3AxYiA9PT0gb3AyYikgfHxcblx0XHRcdFx0KChvdXRSZWMxID09PSBvdXRSZWMyKSAmJiAoUmV2ZXJzZTEgPT09IFJldmVyc2UyKSkpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGlmIChSZXZlcnNlMSlcblx0XHRcdHtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCBmYWxzZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgdHJ1ZSk7XG5cdFx0XHRcdG9wMS5QcmV2ID0gb3AyO1xuXHRcdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdFx0b3AxYi5OZXh0ID0gb3AyYjtcblx0XHRcdFx0b3AyYi5QcmV2ID0gb3AxYjtcblx0XHRcdFx0ai5PdXRQdDEgPSBvcDE7XG5cdFx0XHRcdGouT3V0UHQyID0gb3AxYjtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgdHJ1ZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgZmFsc2UpO1xuXHRcdFx0XHRvcDEuTmV4dCA9IG9wMjtcblx0XHRcdFx0b3AyLlByZXYgPSBvcDE7XG5cdFx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRcdG9wMmIuTmV4dCA9IG9wMWI7XG5cdFx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0XHRqLk91dFB0MiA9IG9wMWI7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzID0gZnVuY3Rpb24gKHBhdGhzKVxuXHR7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0Y250ID0gcGF0aHMubGVuZ3RoO1xuXHRcdHdoaWxlIChpIDwgY250ICYmIHBhdGhzW2ldLmxlbmd0aCA9PT0gMCkgaSsrO1xuXHRcdGlmIChpID09PSBjbnQpIHJldHVybiBuZXcgQ2xpcHBlckxpYi5GUmVjdCgwLCAwLCAwLCAwKTtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IENsaXBwZXJMaWIuRlJlY3QoKTtcblx0XHRyZXN1bHQubGVmdCA9IHBhdGhzW2ldWzBdLlg7XG5cdFx0cmVzdWx0LnJpZ2h0ID0gcmVzdWx0LmxlZnQ7XG5cdFx0cmVzdWx0LnRvcCA9IHBhdGhzW2ldWzBdLlk7XG5cdFx0cmVzdWx0LmJvdHRvbSA9IHJlc3VsdC50b3A7XG5cdFx0Zm9yICg7IGkgPCBjbnQ7IGkrKylcblx0XHRcdGZvciAodmFyIGogPSAwLCBqbGVuID0gcGF0aHNbaV0ubGVuZ3RoOyBqIDwgamxlbjsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocGF0aHNbaV1bal0uWCA8IHJlc3VsdC5sZWZ0KSByZXN1bHQubGVmdCA9IHBhdGhzW2ldW2pdLlg7XG5cdFx0XHRcdGVsc2UgaWYgKHBhdGhzW2ldW2pdLlggPiByZXN1bHQucmlnaHQpIHJlc3VsdC5yaWdodCA9IHBhdGhzW2ldW2pdLlg7XG5cdFx0XHRcdGlmIChwYXRoc1tpXVtqXS5ZIDwgcmVzdWx0LnRvcCkgcmVzdWx0LnRvcCA9IHBhdGhzW2ldW2pdLlk7XG5cdFx0XHRcdGVsc2UgaWYgKHBhdGhzW2ldW2pdLlkgPiByZXN1bHQuYm90dG9tKSByZXN1bHQuYm90dG9tID0gcGF0aHNbaV1bal0uWTtcblx0XHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0Qm91bmRzMiA9IGZ1bmN0aW9uIChvcHMpXG5cdHtcblx0XHR2YXIgb3BTdGFydCA9IG9wcztcblx0XHR2YXIgcmVzdWx0ID0gbmV3IENsaXBwZXJMaWIuRlJlY3QoKTtcblx0XHRyZXN1bHQubGVmdCA9IG9wcy5QdC5YO1xuXHRcdHJlc3VsdC5yaWdodCA9IG9wcy5QdC5YO1xuXHRcdHJlc3VsdC50b3AgPSBvcHMuUHQuWTtcblx0XHRyZXN1bHQuYm90dG9tID0gb3BzLlB0Llk7XG5cdFx0b3BzID0gb3BzLk5leHQ7XG5cdFx0d2hpbGUgKG9wcyAhPT0gb3BTdGFydClcblx0XHR7XG5cdFx0XHRpZiAob3BzLlB0LlggPCByZXN1bHQubGVmdClcblx0XHRcdFx0cmVzdWx0LmxlZnQgPSBvcHMuUHQuWDtcblx0XHRcdGlmIChvcHMuUHQuWCA+IHJlc3VsdC5yaWdodClcblx0XHRcdFx0cmVzdWx0LnJpZ2h0ID0gb3BzLlB0Llg7XG5cdFx0XHRpZiAob3BzLlB0LlkgPCByZXN1bHQudG9wKVxuXHRcdFx0XHRyZXN1bHQudG9wID0gb3BzLlB0Llk7XG5cdFx0XHRpZiAob3BzLlB0LlkgPiByZXN1bHQuYm90dG9tKVxuXHRcdFx0XHRyZXN1bHQuYm90dG9tID0gb3BzLlB0Llk7XG5cdFx0XHRvcHMgPSBvcHMuTmV4dDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRJblBvbHlnb24gPSBmdW5jdGlvbiAocHQsIHBhdGgpXG5cdHtcblx0XHQvL3JldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgT04gcG9seWdvbiBib3VuZGFyeVxuXHRcdC8vU2VlIFwiVGhlIFBvaW50IGluIFBvbHlnb24gUHJvYmxlbSBmb3IgQXJiaXRyYXJ5IFBvbHlnb25zXCIgYnkgSG9ybWFubiAmIEFnYXRob3Ncblx0XHQvL2h0dHA6Ly9jaXRlc2VlcnguaXN0LnBzdS5lZHUvdmlld2RvYy9kb3dubG9hZD9kb2k9MTAuMS4xLjg4LjU0OTgmcmVwPXJlcDEmdHlwZT1wZGZcblx0XHR2YXIgcmVzdWx0ID0gMCxcblx0XHRcdGNudCA9IHBhdGgubGVuZ3RoO1xuXHRcdGlmIChjbnQgPCAzKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIGlwID0gcGF0aFswXTtcblx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHR2YXIgaXBOZXh0ID0gKGkgPT09IGNudCA/IHBhdGhbMF0gOiBwYXRoW2ldKTtcblx0XHRcdGlmIChpcE5leHQuWSA9PT0gcHQuWSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKChpcE5leHQuWCA9PT0gcHQuWCkgfHwgKGlwLlkgPT09IHB0LlkgJiYgKChpcE5leHQuWCA+IHB0LlgpID09PSAoaXAuWCA8IHB0LlgpKSkpXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChpcC5ZIDwgcHQuWSkgIT09IChpcE5leHQuWSA8IHB0LlkpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXAuWCA+PSBwdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGlwTmV4dC5YID4gcHQuWClcblx0XHRcdFx0XHRcdHJlc3VsdCA9IDEgLSByZXN1bHQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkID0gKGlwLlggLSBwdC5YKSAqIChpcE5leHQuWSAtIHB0LlkpIC0gKGlwTmV4dC5YIC0gcHQuWCkgKiAoaXAuWSAtIHB0LlkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGVsc2UgaWYgKChkID4gMCkgPT09IChpcE5leHQuWSA+IGlwLlkpKVxuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoaXBOZXh0LlggPiBwdC5YKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkID0gKGlwLlggLSBwdC5YKSAqIChpcE5leHQuWSAtIHB0LlkpIC0gKGlwTmV4dC5YIC0gcHQuWCkgKiAoaXAuWSAtIHB0LlkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGVsc2UgaWYgKChkID4gMCkgPT09IChpcE5leHQuWSA+IGlwLlkpKVxuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aXAgPSBpcE5leHQ7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qb2ludEluUG9seWdvbiA9IGZ1bmN0aW9uIChwdCwgb3ApXG5cdHtcblx0XHQvL3JldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgT04gcG9seWdvbiBib3VuZGFyeVxuXHRcdHZhciByZXN1bHQgPSAwO1xuXHRcdHZhciBzdGFydE9wID0gb3A7XG5cdFx0dmFyIHB0eCA9IHB0LlgsXG5cdFx0XHRwdHkgPSBwdC5ZO1xuXHRcdHZhciBwb2x5MHggPSBvcC5QdC5YLFxuXHRcdFx0cG9seTB5ID0gb3AuUHQuWTtcblx0XHRkbyB7XG5cdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0XHR2YXIgcG9seTF4ID0gb3AuUHQuWCxcblx0XHRcdFx0cG9seTF5ID0gb3AuUHQuWTtcblx0XHRcdGlmIChwb2x5MXkgPT09IHB0eSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKChwb2x5MXggPT09IHB0eCkgfHwgKHBvbHkweSA9PT0gcHR5ICYmICgocG9seTF4ID4gcHR4KSA9PT0gKHBvbHkweCA8IHB0eCkpKSlcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHBvbHkweSA8IHB0eSkgIT09IChwb2x5MXkgPCBwdHkpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocG9seTB4ID49IHB0eClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwb2x5MXggPiBwdHgpXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChwb2x5MHggLSBwdHgpICogKHBvbHkxeSAtIHB0eSkgLSAocG9seTF4IC0gcHR4KSAqIChwb2x5MHkgLSBwdHkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGlmICgoZCA+IDApID09PSAocG9seTF5ID4gcG9seTB5KSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKHBvbHkxeCA+IHB0eClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChwb2x5MHggLSBwdHgpICogKHBvbHkxeSAtIHB0eSkgLSAocG9seTF4IC0gcHR4KSAqIChwb2x5MHkgLSBwdHkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGlmICgoZCA+IDApID09PSAocG9seTF5ID4gcG9seTB5KSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHBvbHkweCA9IHBvbHkxeDtcblx0XHRcdHBvbHkweSA9IHBvbHkxeTtcblx0XHR9IHdoaWxlIChzdGFydE9wICE9PSBvcCk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUG9seTJDb250YWluc1BvbHkxID0gZnVuY3Rpb24gKG91dFB0MSwgb3V0UHQyKVxuXHR7XG5cdFx0dmFyIG9wID0gb3V0UHQxO1xuXHRcdGRvIHtcblx0XHRcdC8vbmI6IFBvaW50SW5Qb2x5Z29uIHJldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgb24gcG9seWdvblxuXHRcdFx0dmFyIHJlcyA9IHRoaXMuUG9pbnRJblBvbHlnb24ob3AuUHQsIG91dFB0Mik7XG5cdFx0XHRpZiAocmVzID49IDApXG5cdFx0XHRcdHJldHVybiByZXMgPiAwO1xuXHRcdFx0b3AgPSBvcC5OZXh0O1xuXHRcdH1cblx0XHR3aGlsZSAob3AgIT09IG91dFB0MSlcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwRmlyc3RMZWZ0czEgPSBmdW5jdGlvbiAoT2xkT3V0UmVjLCBOZXdPdXRSZWMpXG5cdHtcblx0XHR2YXIgb3V0UmVjLCBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGZpcnN0TGVmdCA9IENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdChvdXRSZWMuRmlyc3RMZWZ0KTtcblx0XHRcdGlmIChvdXRSZWMuUHRzICE9PSBudWxsICYmIGZpcnN0TGVmdCA9PT0gT2xkT3V0UmVjKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgTmV3T3V0UmVjLlB0cykpXG5cdFx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IE5ld091dFJlYztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwRmlyc3RMZWZ0czIgPSBmdW5jdGlvbiAoaW5uZXJPdXRSZWMsIG91dGVyT3V0UmVjKVxuXHR7XG5cdFx0Ly9BIHBvbHlnb24gaGFzIHNwbGl0IGludG8gdHdvIHN1Y2ggdGhhdCBvbmUgaXMgbm93IHRoZSBpbm5lciBvZiB0aGUgb3RoZXIuXG5cdFx0Ly9JdCdzIHBvc3NpYmxlIHRoYXQgdGhlc2UgcG9seWdvbnMgbm93IHdyYXAgYXJvdW5kIG90aGVyIHBvbHlnb25zLCBzbyBjaGVja1xuXHRcdC8vZXZlcnkgcG9seWdvbiB0aGF0J3MgYWxzbyBjb250YWluZWQgYnkgT3V0ZXJPdXRSZWMncyBGaXJzdExlZnQgY29udGFpbmVyXG5cdFx0Ly8oaW5jbHVkaW5nIG5pbCkgdG8gc2VlIGlmIHRoZXkndmUgYmVjb21lIGlubmVyIHRvIHRoZSBuZXcgaW5uZXIgcG9seWdvbiAuLi5cblx0XHR2YXIgb3JmbCA9IG91dGVyT3V0UmVjLkZpcnN0TGVmdDtcblx0XHR2YXIgb3V0UmVjLCBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGlmIChvdXRSZWMuUHRzID09PSBudWxsIHx8IG91dFJlYyA9PT0gb3V0ZXJPdXRSZWMgfHwgb3V0UmVjID09PSBpbm5lck91dFJlYylcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRmaXJzdExlZnQgPSBDbGlwcGVyTGliLkNsaXBwZXIuUGFyc2VGaXJzdExlZnQob3V0UmVjLkZpcnN0TGVmdCk7XG5cdFx0XHRpZiAoZmlyc3RMZWZ0ICE9PSBvcmZsICYmIGZpcnN0TGVmdCAhPT0gaW5uZXJPdXRSZWMgJiYgZmlyc3RMZWZ0ICE9PSBvdXRlck91dFJlYylcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgaW5uZXJPdXRSZWMuUHRzKSlcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IGlubmVyT3V0UmVjO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgb3V0ZXJPdXRSZWMuUHRzKSlcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IG91dGVyT3V0UmVjO1xuXHRcdFx0ZWxzZSBpZiAob3V0UmVjLkZpcnN0TGVmdCA9PT0gaW5uZXJPdXRSZWMgfHwgb3V0UmVjLkZpcnN0TGVmdCA9PT0gb3V0ZXJPdXRSZWMpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSBvcmZsO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4dXBGaXJzdExlZnRzMyA9IGZ1bmN0aW9uIChPbGRPdXRSZWMsIE5ld091dFJlYylcblx0e1xuXHRcdC8vc2FtZSBhcyBGaXh1cEZpcnN0TGVmdHMxIGJ1dCBkb2Vzbid0IGNhbGwgUG9seTJDb250YWluc1BvbHkxKClcblx0XHR2YXIgb3V0UmVjO1xuXHRcdHZhciBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGZpcnN0TGVmdCA9IENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdChvdXRSZWMuRmlyc3RMZWZ0KTtcblx0XHRcdGlmIChvdXRSZWMuUHRzICE9PSBudWxsICYmIGZpcnN0TGVmdCA9PT0gT2xkT3V0UmVjKVxuXHRcdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gTmV3T3V0UmVjO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdCA9IGZ1bmN0aW9uIChGaXJzdExlZnQpXG5cdHtcblx0XHR3aGlsZSAoRmlyc3RMZWZ0ICE9PSBudWxsICYmIEZpcnN0TGVmdC5QdHMgPT09IG51bGwpXG5cdFx0XHRGaXJzdExlZnQgPSBGaXJzdExlZnQuRmlyc3RMZWZ0O1xuXHRcdHJldHVybiBGaXJzdExlZnQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Kb2luQ29tbW9uRWRnZXMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fSm9pbnMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdHZhciBqb2luID0gdGhpcy5tX0pvaW5zW2ldO1xuXHRcdFx0dmFyIG91dFJlYzEgPSB0aGlzLkdldE91dFJlYyhqb2luLk91dFB0MS5JZHgpO1xuXHRcdFx0dmFyIG91dFJlYzIgPSB0aGlzLkdldE91dFJlYyhqb2luLk91dFB0Mi5JZHgpO1xuXHRcdFx0aWYgKG91dFJlYzEuUHRzID09PSBudWxsIHx8IG91dFJlYzIuUHRzID09PSBudWxsKVxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0aWYgKG91dFJlYzEuSXNPcGVuIHx8IG91dFJlYzIuSXNPcGVuKVxuXHRcdFx0e1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly9nZXQgdGhlIHBvbHlnb24gZnJhZ21lbnQgd2l0aCB0aGUgY29ycmVjdCBob2xlIHN0YXRlIChGaXJzdExlZnQpXG5cdFx0XHQvL2JlZm9yZSBjYWxsaW5nIEpvaW5Qb2ludHMoKSAuLi5cblx0XHRcdHZhciBob2xlU3RhdGVSZWM7XG5cdFx0XHRpZiAob3V0UmVjMSA9PT0gb3V0UmVjMilcblx0XHRcdFx0aG9sZVN0YXRlUmVjID0gb3V0UmVjMTtcblx0XHRcdGVsc2UgaWYgKHRoaXMuT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyKG91dFJlYzEsIG91dFJlYzIpKVxuXHRcdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMyO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy5PdXRSZWMxUmlnaHRPZk91dFJlYzIob3V0UmVjMiwgb3V0UmVjMSkpXG5cdFx0XHRcdGhvbGVTdGF0ZVJlYyA9IG91dFJlYzE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGhvbGVTdGF0ZVJlYyA9IHRoaXMuR2V0TG93ZXJtb3N0UmVjKG91dFJlYzEsIG91dFJlYzIpO1xuXG5cdFx0XHRpZiAoIXRoaXMuSm9pblBvaW50cyhqb2luLCBvdXRSZWMxLCBvdXRSZWMyKSkgY29udGludWU7XG5cblx0XHRcdGlmIChvdXRSZWMxID09PSBvdXRSZWMyKVxuXHRcdFx0e1xuXHRcdFx0XHQvL2luc3RlYWQgb2Ygam9pbmluZyB0d28gcG9seWdvbnMsIHdlJ3ZlIGp1c3QgY3JlYXRlZCBhIG5ldyBvbmUgYnlcblx0XHRcdFx0Ly9zcGxpdHRpbmcgb25lIHBvbHlnb24gaW50byB0d28uXG5cdFx0XHRcdG91dFJlYzEuUHRzID0gam9pbi5PdXRQdDE7XG5cdFx0XHRcdG91dFJlYzEuQm90dG9tUHQgPSBudWxsO1xuXHRcdFx0XHRvdXRSZWMyID0gdGhpcy5DcmVhdGVPdXRSZWMoKTtcblx0XHRcdFx0b3V0UmVjMi5QdHMgPSBqb2luLk91dFB0Mjtcblx0XHRcdFx0Ly91cGRhdGUgYWxsIE91dFJlYzIuUHRzIElkeCdzIC4uLlxuXHRcdFx0XHR0aGlzLlVwZGF0ZU91dFB0SWR4cyhvdXRSZWMyKTtcblxuXHRcdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjMi5QdHMsIG91dFJlYzEuUHRzKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0UmVjMSBjb250YWlucyBvdXRSZWMyIC4uLlxuXHRcdFx0XHRcdG91dFJlYzIuSXNIb2xlID0gIW91dFJlYzEuSXNIb2xlO1xuXHRcdFx0XHRcdG91dFJlYzIuRmlyc3RMZWZ0ID0gb3V0UmVjMTtcblx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpXG5cdFx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0UmVjMiwgb3V0UmVjMSk7XG5cdFx0XHRcdFx0aWYgKChvdXRSZWMyLklzSG9sZSBeIHRoaXMuUmV2ZXJzZVNvbHV0aW9uKSA9PSAodGhpcy5BcmVhJDEob3V0UmVjMikgPiAwKSlcblx0XHRcdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKG91dFJlYzIuUHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmICh0aGlzLlBvbHkyQ29udGFpbnNQb2x5MShvdXRSZWMxLlB0cywgb3V0UmVjMi5QdHMpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly9vdXRSZWMyIGNvbnRhaW5zIG91dFJlYzEgLi4uXG5cdFx0XHRcdFx0b3V0UmVjMi5Jc0hvbGUgPSBvdXRSZWMxLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMxLklzSG9sZSA9ICFvdXRSZWMyLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMyLkZpcnN0TGVmdCA9IG91dFJlYzEuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdG91dFJlYzEuRmlyc3RMZWZ0ID0gb3V0UmVjMjtcblx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpXG5cdFx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0UmVjMSwgb3V0UmVjMik7XG5cblx0XHRcdFx0XHRpZiAoKG91dFJlYzEuSXNIb2xlIF4gdGhpcy5SZXZlcnNlU29sdXRpb24pID09ICh0aGlzLkFyZWEkMShvdXRSZWMxKSA+IDApKVxuXHRcdFx0XHRcdFx0dGhpcy5SZXZlcnNlUG9seVB0TGlua3Mob3V0UmVjMS5QdHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vdGhlIDIgcG9seWdvbnMgYXJlIGNvbXBsZXRlbHkgc2VwYXJhdGUgLi4uXG5cdFx0XHRcdFx0b3V0UmVjMi5Jc0hvbGUgPSBvdXRSZWMxLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMyLkZpcnN0TGVmdCA9IG91dFJlYzEuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdC8vZml4dXAgRmlyc3RMZWZ0IHBvaW50ZXJzIHRoYXQgbWF5IG5lZWQgcmVhc3NpZ25pbmcgdG8gT3V0UmVjMlxuXHRcdFx0XHRcdGlmICh0aGlzLm1fVXNpbmdQb2x5VHJlZSlcblx0XHRcdFx0XHRcdHRoaXMuRml4dXBGaXJzdExlZnRzMShvdXRSZWMxLCBvdXRSZWMyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL2pvaW5lZCAyIHBvbHlnb25zIHRvZ2V0aGVyIC4uLlxuXHRcdFx0XHRvdXRSZWMyLlB0cyA9IG51bGw7XG5cdFx0XHRcdG91dFJlYzIuQm90dG9tUHQgPSBudWxsO1xuXHRcdFx0XHRvdXRSZWMyLklkeCA9IG91dFJlYzEuSWR4O1xuXHRcdFx0XHRvdXRSZWMxLklzSG9sZSA9IGhvbGVTdGF0ZVJlYy5Jc0hvbGU7XG5cdFx0XHRcdGlmIChob2xlU3RhdGVSZWMgPT09IG91dFJlYzIpXG5cdFx0XHRcdFx0b3V0UmVjMS5GaXJzdExlZnQgPSBvdXRSZWMyLkZpcnN0TGVmdDtcblx0XHRcdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxO1xuXHRcdFx0XHQvL2ZpeHVwIEZpcnN0TGVmdCBwb2ludGVycyB0aGF0IG1heSBuZWVkIHJlYXNzaWduaW5nIHRvIE91dFJlYzFcblx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKVxuXHRcdFx0XHRcdHRoaXMuRml4dXBGaXJzdExlZnRzMyhvdXRSZWMyLCBvdXRSZWMxKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5VcGRhdGVPdXRQdElkeHMgPSBmdW5jdGlvbiAob3V0cmVjKVxuXHR7XG5cdFx0dmFyIG9wID0gb3V0cmVjLlB0cztcblx0XHRkbyB7XG5cdFx0XHRvcC5JZHggPSBvdXRyZWMuSWR4O1xuXHRcdFx0b3AgPSBvcC5QcmV2O1xuXHRcdH1cblx0XHR3aGlsZSAob3AgIT09IG91dHJlYy5QdHMpXG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Eb1NpbXBsZVBvbHlnb25zID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciBpID0gMDtcblx0XHR3aGlsZSAoaSA8IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGgpXG5cdFx0e1xuXHRcdFx0dmFyIG91dHJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpKytdO1xuXHRcdFx0dmFyIG9wID0gb3V0cmVjLlB0cztcblx0XHRcdGlmIChvcCA9PT0gbnVsbCB8fCBvdXRyZWMuSXNPcGVuKVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGRvIC8vZm9yIGVhY2ggUHQgaW4gUG9seWdvbiB1bnRpbCBkdXBsaWNhdGUgZm91bmQgZG8gLi4uXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBvcDIgPSBvcC5OZXh0O1xuXHRcdFx0XHR3aGlsZSAob3AyICE9PSBvdXRyZWMuUHRzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKChDbGlwcGVyTGliLkZQb2ludC5vcF9FcXVhbGl0eShvcC5QdCwgb3AyLlB0KSkgJiYgb3AyLk5leHQgIT09IG9wICYmIG9wMi5QcmV2ICE9PSBvcClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHQvL3NwbGl0IHRoZSBwb2x5Z29uIGludG8gdHdvIC4uLlxuXHRcdFx0XHRcdFx0dmFyIG9wMyA9IG9wLlByZXY7XG5cdFx0XHRcdFx0XHR2YXIgb3A0ID0gb3AyLlByZXY7XG5cdFx0XHRcdFx0XHRvcC5QcmV2ID0gb3A0O1xuXHRcdFx0XHRcdFx0b3A0Lk5leHQgPSBvcDtcblx0XHRcdFx0XHRcdG9wMi5QcmV2ID0gb3AzO1xuXHRcdFx0XHRcdFx0b3AzLk5leHQgPSBvcDI7XG5cdFx0XHRcdFx0XHRvdXRyZWMuUHRzID0gb3A7XG5cdFx0XHRcdFx0XHR2YXIgb3V0cmVjMiA9IHRoaXMuQ3JlYXRlT3V0UmVjKCk7XG5cdFx0XHRcdFx0XHRvdXRyZWMyLlB0cyA9IG9wMjtcblx0XHRcdFx0XHRcdHRoaXMuVXBkYXRlT3V0UHRJZHhzKG91dHJlYzIpO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dHJlYzIuUHRzLCBvdXRyZWMuUHRzKSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly9PdXRSZWMyIGlzIGNvbnRhaW5lZCBieSBPdXRSZWMxIC4uLlxuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLklzSG9sZSA9ICFvdXRyZWMuSXNIb2xlO1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLkZpcnN0TGVmdCA9IG91dHJlYztcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKSB0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0cmVjMiwgb3V0cmVjKTtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0cmVjLlB0cywgb3V0cmVjMi5QdHMpKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvL091dFJlYzEgaXMgY29udGFpbmVkIGJ5IE91dFJlYzIgLi4uXG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuSXNIb2xlID0gb3V0cmVjLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjLklzSG9sZSA9ICFvdXRyZWMyLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5GaXJzdExlZnQgPSBvdXRyZWMuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMuRmlyc3RMZWZ0ID0gb3V0cmVjMjtcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKSB0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0cmVjLCBvdXRyZWMyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly90aGUgMiBwb2x5Z29ucyBhcmUgc2VwYXJhdGUgLi4uXG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuSXNIb2xlID0gb3V0cmVjLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5GaXJzdExlZnQgPSBvdXRyZWMuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpIHRoaXMuRml4dXBGaXJzdExlZnRzMShvdXRyZWMsIG91dHJlYzIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0b3AyID0gb3A7XG5cdFx0XHRcdFx0XHQvL2llIGdldCByZWFkeSBmb3IgdGhlIG5leHQgaXRlcmF0aW9uXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG9wMiA9IG9wMi5OZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChvcCAhPT0gb3V0cmVjLlB0cylcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkFyZWEgPSBmdW5jdGlvbiAocG9seSlcblx0e1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShwb2x5KSlcblx0XHRcdHJldHVybiAwO1xuXHRcdHZhciBjbnQgPSBwb2x5Lmxlbmd0aDtcblx0XHRpZiAoY250IDwgMylcblx0XHRcdHJldHVybiAwO1xuXHRcdHZhciBhID0gMDtcblx0XHRmb3IgKHZhciBpID0gMCwgaiA9IGNudCAtIDE7IGkgPCBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHRhICs9IChwb2x5W2pdLlggKyBwb2x5W2ldLlgpICogKHBvbHlbal0uWSAtIHBvbHlbaV0uWSk7XG5cdFx0XHRqID0gaTtcblx0XHR9XG5cdFx0cmV0dXJuIC1hICogMC41O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQXJlYSA9IGZ1bmN0aW9uIChvcClcblx0e1xuXHRcdHZhciBvcEZpcnN0ID0gb3A7XG5cdFx0aWYgKG9wID09PSBudWxsKSByZXR1cm4gMDtcblx0XHR2YXIgYSA9IDA7XG5cdFx0ZG8ge1xuXHRcdFx0YSA9IGEgKyAob3AuUHJldi5QdC5YICsgb3AuUHQuWCkgKiAob3AuUHJldi5QdC5ZIC0gb3AuUHQuWSk7XG5cdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0fSB3aGlsZSAob3AgIT09IG9wRmlyc3QpOyAvLyAmJiB0eXBlb2Ygb3AgIT09ICd1bmRlZmluZWQnKTtcblx0XHRyZXR1cm4gYSAqIDAuNTtcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQXJlYSQxID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdHJldHVybiB0aGlzLkFyZWEob3V0UmVjLlB0cyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlNpbXBsaWZ5UG9seWdvbiA9IGZ1bmN0aW9uIChwb2x5LCBmaWxsVHlwZSlcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcblx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoMCk7XG5cdFx0Yy5TdHJpY3RseVNpbXBsZSA9IHRydWU7XG5cdFx0Yy5BZGRQYXRoKHBvbHksIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRjLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCByZXN1bHQsIGZpbGxUeXBlLCBmaWxsVHlwZSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuU2ltcGxpZnlQb2x5Z29ucyA9IGZ1bmN0aW9uIChwb2x5cywgZmlsbFR5cGUpXG5cdHtcblx0XHRpZiAodHlwZW9mIChmaWxsVHlwZSkgPT09IFwidW5kZWZpbmVkXCIpIGZpbGxUeXBlID0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG5cdFx0dmFyIGMgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdGMuU3RyaWN0bHlTaW1wbGUgPSB0cnVlO1xuXHRcdGMuQWRkUGF0aHMocG9seXMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRjLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCByZXN1bHQsIGZpbGxUeXBlLCBmaWxsVHlwZSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VTcXJkID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIGR4ID0gKHB0MS5YIC0gcHQyLlgpO1xuXHRcdHZhciBkeSA9IChwdDEuWSAtIHB0Mi5ZKTtcblx0XHRyZXR1cm4gKGR4ICogZHggKyBkeSAqIGR5KTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQgPSBmdW5jdGlvbiAocHQsIGxuMSwgbG4yKVxuXHR7XG5cdFx0Ly9UaGUgZXF1YXRpb24gb2YgYSBsaW5lIGluIGdlbmVyYWwgZm9ybSAoQXggKyBCeSArIEMgPSAwKVxuXHRcdC8vZ2l2ZW4gMiBwb2ludHMgKHjCuSx5wrkpICYgKHjCsix5wrIpIGlzIC4uLlxuXHRcdC8vKHnCuSAtIHnCsil4ICsgKHjCsiAtIHjCuSl5ICsgKHnCsiAtIHnCuSl4wrkgLSAoeMKyIC0geMK5KXnCuSA9IDBcblx0XHQvL0EgPSAoecK5IC0gecKyKTsgQiA9ICh4wrIgLSB4wrkpOyBDID0gKHnCsiAtIHnCuSl4wrkgLSAoeMKyIC0geMK5KXnCuVxuXHRcdC8vcGVycGVuZGljdWxhciBkaXN0YW5jZSBvZiBwb2ludCAoeMKzLHnCsykgPSAoQXjCsyArIEJ5wrMgKyBDKS9TcXJ0KEHCsiArIELCsilcblx0XHQvL3NlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcnBlbmRpY3VsYXJfZGlzdGFuY2Vcblx0XHR2YXIgQSA9IGxuMS5ZIC0gbG4yLlk7XG5cdFx0dmFyIEIgPSBsbjIuWCAtIGxuMS5YO1xuXHRcdHZhciBDID0gQSAqIGxuMS5YICsgQiAqIGxuMS5ZO1xuXHRcdEMgPSBBICogcHQuWCArIEIgKiBwdC5ZIC0gQztcblx0XHRyZXR1cm4gKEMgKiBDKSAvIChBICogQSArIEIgKiBCKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuU2xvcGVzTmVhckNvbGxpbmVhciA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBkaXN0U3FyZClcblx0e1xuXHRcdC8vdGhpcyBmdW5jdGlvbiBpcyBtb3JlIGFjY3VyYXRlIHdoZW4gdGhlIHBvaW50IHRoYXQncyBHRU9NRVRSSUNBTExZXG5cdFx0Ly9iZXR3ZWVuIHRoZSBvdGhlciAyIHBvaW50cyBpcyB0aGUgb25lIHRoYXQncyB0ZXN0ZWQgZm9yIGRpc3RhbmNlLlxuXHRcdC8vbmI6IHdpdGggJ3NwaWtlcycsIGVpdGhlciBwdDEgb3IgcHQzIGlzIGdlb21ldHJpY2FsbHkgYmV0d2VlbiB0aGUgb3RoZXIgcHRzXG5cdFx0aWYgKE1hdGguYWJzKHB0MS5YIC0gcHQyLlgpID4gTWF0aC5hYnMocHQxLlkgLSBwdDIuWSkpXG5cdFx0e1xuXHRcdFx0aWYgKChwdDEuWCA+IHB0Mi5YKSA9PT0gKHB0MS5YIDwgcHQzLlgpKVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MSwgcHQyLCBwdDMpIDwgZGlzdFNxcmQ7XG5cdFx0XHRlbHNlIGlmICgocHQyLlggPiBwdDEuWCkgPT09IChwdDIuWCA8IHB0My5YKSlcblx0XHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZUZyb21MaW5lU3FyZChwdDIsIHB0MSwgcHQzKSA8IGRpc3RTcXJkO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MywgcHQxLCBwdDIpIDwgZGlzdFNxcmQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoKHB0MS5ZID4gcHQyLlkpID09PSAocHQxLlkgPCBwdDMuWSkpXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQxLCBwdDIsIHB0MykgPCBkaXN0U3FyZDtcblx0XHRcdGVsc2UgaWYgKChwdDIuWSA+IHB0MS5ZKSA9PT0gKHB0Mi5ZIDwgcHQzLlkpKVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MiwgcHQxLCBwdDMpIDwgZGlzdFNxcmQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQzLCBwdDEsIHB0MikgPCBkaXN0U3FyZDtcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2UgPSBmdW5jdGlvbiAocHQxLCBwdDIsIGRpc3RTcXJkKVxuXHR7XG5cdFx0dmFyIGR4ID0gcHQxLlggLSBwdDIuWDtcblx0XHR2YXIgZHkgPSBwdDEuWSAtIHB0Mi5ZO1xuXHRcdHJldHVybiAoKGR4ICogZHgpICsgKGR5ICogZHkpIDw9IGRpc3RTcXJkKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wID0gZnVuY3Rpb24gKG9wKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG9wLlByZXY7XG5cdFx0cmVzdWx0Lk5leHQgPSBvcC5OZXh0O1xuXHRcdG9wLk5leHQuUHJldiA9IHJlc3VsdDtcblx0XHRyZXN1bHQuSWR4ID0gMDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5DbGVhblBvbHlnb24gPSBmdW5jdGlvbiAocGF0aCwgZGlzdGFuY2UpXG5cdHtcblx0XHRpZiAodHlwZW9mIChkaXN0YW5jZSkgPT09IFwidW5kZWZpbmVkXCIpIGRpc3RhbmNlID0gMS40MTU7XG5cdFx0Ly9kaXN0YW5jZSA9IHByb3hpbWl0eSBpbiB1bml0cy9waXhlbHMgYmVsb3cgd2hpY2ggdmVydGljZXMgd2lsbCBiZSBzdHJpcHBlZC5cblx0XHQvL0RlZmF1bHQgfj0gc3FydCgyKSBzbyB3aGVuIGFkamFjZW50IHZlcnRpY2VzIG9yIHNlbWktYWRqYWNlbnQgdmVydGljZXMgaGF2ZVxuXHRcdC8vYm90aCB4ICYgeSBjb29yZHMgd2l0aGluIDEgdW5pdCwgdGhlbiB0aGUgc2Vjb25kIHZlcnRleCB3aWxsIGJlIHN0cmlwcGVkLlxuXHRcdHZhciBjbnQgPSBwYXRoLmxlbmd0aDtcblx0XHRpZiAoY250ID09PSAwKVxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheSgpO1xuXHRcdHZhciBvdXRQdHMgPSBuZXcgQXJyYXkoY250KTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKVxuXHRcdFx0b3V0UHRzW2ldID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKVxuXHRcdHtcblx0XHRcdG91dFB0c1tpXS5QdCA9IHBhdGhbaV07XG5cdFx0XHRvdXRQdHNbaV0uTmV4dCA9IG91dFB0c1soaSArIDEpICUgY250XTtcblx0XHRcdG91dFB0c1tpXS5OZXh0LlByZXYgPSBvdXRQdHNbaV07XG5cdFx0XHRvdXRQdHNbaV0uSWR4ID0gMDtcblx0XHR9XG5cdFx0dmFyIGRpc3RTcXJkID0gZGlzdGFuY2UgKiBkaXN0YW5jZTtcblx0XHR2YXIgb3AgPSBvdXRQdHNbMF07XG5cdFx0d2hpbGUgKG9wLklkeCA9PT0gMCAmJiBvcC5OZXh0ICE9PSBvcC5QcmV2KVxuXHRcdHtcblx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2Uob3AuUHQsIG9wLlByZXYuUHQsIGRpc3RTcXJkKSlcblx0XHRcdHtcblx0XHRcdFx0b3AgPSBDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wKG9wKTtcblx0XHRcdFx0Y250LS07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2Uob3AuUHJldi5QdCwgb3AuTmV4dC5QdCwgZGlzdFNxcmQpKVxuXHRcdFx0e1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wKG9wLk5leHQpO1xuXHRcdFx0XHRvcCA9IENsaXBwZXJMaWIuQ2xpcHBlci5FeGNsdWRlT3Aob3ApO1xuXHRcdFx0XHRjbnQgLT0gMjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKENsaXBwZXJMaWIuQ2xpcHBlci5TbG9wZXNOZWFyQ29sbGluZWFyKG9wLlByZXYuUHQsIG9wLlB0LCBvcC5OZXh0LlB0LCBkaXN0U3FyZCkpXG5cdFx0XHR7XG5cdFx0XHRcdG9wID0gQ2xpcHBlckxpYi5DbGlwcGVyLkV4Y2x1ZGVPcChvcCk7XG5cdFx0XHRcdGNudC0tO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRvcC5JZHggPSAxO1xuXHRcdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChjbnQgPCAzKVxuXHRcdFx0Y250ID0gMDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGNudCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHRyZXN1bHRbaV0gPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQxKG9wLlB0KTtcblx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHR9XG5cdFx0b3V0UHRzID0gbnVsbDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5DbGVhblBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHlzLCBkaXN0YW5jZSlcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkocG9seXMubGVuZ3RoKTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHBvbHlzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHRcdHJlc3VsdFtpXSA9IENsaXBwZXJMaWIuQ2xpcHBlci5DbGVhblBvbHlnb24ocG9seXNbaV0sIGRpc3RhbmNlKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2kgPSBmdW5jdGlvbiAocGF0dGVybiwgcGF0aCwgSXNTdW0sIElzQ2xvc2VkKVxuXHR7XG5cdFx0dmFyIGRlbHRhID0gKElzQ2xvc2VkID8gMSA6IDApO1xuXHRcdHZhciBwb2x5Q250ID0gcGF0dGVybi5sZW5ndGg7XG5cdFx0dmFyIHBhdGhDbnQgPSBwYXRoLmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG5cdFx0aWYgKElzU3VtKVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQ250OyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwID0gbmV3IEFycmF5KHBvbHlDbnQpO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamxlbiA9IHBhdHRlcm4ubGVuZ3RoLCBpcCA9IHBhdHRlcm5bal07IGogPCBqbGVuOyBqKyssIGlwID0gcGF0dGVybltqXSlcblx0XHRcdFx0XHRwW2pdID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MihwYXRoW2ldLlggKyBpcC5YLCBwYXRoW2ldLlkgKyBpcC5ZKTtcblx0XHRcdFx0cmVzdWx0LnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQ250OyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwID0gbmV3IEFycmF5KHBvbHlDbnQpO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamxlbiA9IHBhdHRlcm4ubGVuZ3RoLCBpcCA9IHBhdHRlcm5bal07IGogPCBqbGVuOyBqKyssIGlwID0gcGF0dGVybltqXSlcblx0XHRcdFx0XHRwW2pdID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MihwYXRoW2ldLlggLSBpcC5YLCBwYXRoW2ldLlkgLSBpcC5ZKTtcblx0XHRcdFx0cmVzdWx0LnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0dmFyIHF1YWRzID0gbmV3IEFycmF5KCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQ250IC0gMSArIGRlbHRhOyBpKyspXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBvbHlDbnQ7IGorKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIHF1YWQgPSBuZXcgQXJyYXkoKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFtpICUgcGF0aENudF1baiAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFsoaSArIDEpICUgcGF0aENudF1baiAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFsoaSArIDEpICUgcGF0aENudF1bKGogKyAxKSAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFtpICUgcGF0aENudF1bKGogKyAxKSAlIHBvbHlDbnRdKTtcblx0XHRcdFx0aWYgKCFDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24ocXVhZCkpXG5cdFx0XHRcdFx0cXVhZC5yZXZlcnNlKCk7XG5cdFx0XHRcdHF1YWRzLnB1c2gocXVhZCk7XG5cdFx0XHR9XG5cdFx0cmV0dXJuIHF1YWRzO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2lTdW0gPSBmdW5jdGlvbiAocGF0dGVybiwgcGF0aF9vcl9wYXRocywgcGF0aElzQ2xvc2VkKVxuXHR7XG5cdFx0aWYgKCEocGF0aF9vcl9wYXRoc1swXSBpbnN0YW5jZW9mIEFycmF5KSlcblx0XHR7XG5cdFx0XHR2YXIgcGF0aCA9IHBhdGhfb3JfcGF0aHM7XG5cdFx0XHR2YXIgcGF0aHMgPSBDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpKHBhdHRlcm4sIHBhdGgsIHRydWUsIHBhdGhJc0Nsb3NlZCk7XG5cdFx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoKTtcblx0XHRcdGMuQWRkUGF0aHMocGF0aHMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHBhdGhzLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblx0XHRcdHJldHVybiBwYXRocztcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHZhciBwYXRocyA9IHBhdGhfb3JfcGF0aHM7XG5cdFx0XHR2YXIgc29sdXRpb24gPSBuZXcgQ2xpcHBlckxpYi5QYXRocygpO1xuXHRcdFx0dmFyIGMgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgKytpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgdG1wID0gQ2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraShwYXR0ZXJuLCBwYXRoc1tpXSwgdHJ1ZSwgcGF0aElzQ2xvc2VkKTtcblx0XHRcdFx0Yy5BZGRQYXRocyh0bXAsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdFx0aWYgKHBhdGhJc0Nsb3NlZClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBwYXRoID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRyYW5zbGF0ZVBhdGgocGF0aHNbaV0sIHBhdHRlcm5bMF0pO1xuXHRcdFx0XHRcdGMuQWRkUGF0aChwYXRoLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0Q2xpcCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLFxuXHRcdFx0XHRDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblx0XHRcdHJldHVybiBzb2x1dGlvbjtcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuVHJhbnNsYXRlUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBkZWx0YSlcblx0e1xuXHRcdHZhciBvdXRQYXRoID0gbmV3IENsaXBwZXJMaWIuUGF0aCgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKylcblx0XHRcdG91dFBhdGgucHVzaChuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHBhdGhbaV0uWCArIGRlbHRhLlgsIHBhdGhbaV0uWSArIGRlbHRhLlkpKTtcblx0XHRyZXR1cm4gb3V0UGF0aDtcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2lEaWZmID0gZnVuY3Rpb24gKHBvbHkxLCBwb2x5Milcblx0e1xuXHRcdHZhciBwYXRocyA9IENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2kocG9seTEsIHBvbHkyLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0dmFyIGMgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKCk7XG5cdFx0Yy5BZGRQYXRocyhwYXRocywgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHBhdGhzLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblx0XHRyZXR1cm4gcGF0aHM7XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUG9seVRyZWVUb1BhdGhzID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBBcnJheSgpO1xuXHRcdC8vcmVzdWx0LnNldF9DYXBhY2l0eShwb2x5dHJlZS5nZXRfVG90YWwoKSk7XG5cdFx0Q2xpcHBlckxpYi5DbGlwcGVyLkFkZFBvbHlOb2RlVG9QYXRocyhwb2x5dHJlZSwgQ2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlLm50QW55LCByZXN1bHQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkFkZFBvbHlOb2RlVG9QYXRocyA9IGZ1bmN0aW9uIChwb2x5bm9kZSwgbnQsIHBhdGhzKVxuXHR7XG5cdFx0dmFyIG1hdGNoID0gdHJ1ZTtcblx0XHRzd2l0Y2ggKG50KVxuXHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlLm50T3Blbjpcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBwZXIuTm9kZVR5cGUubnRDbG9zZWQ6XG5cdFx0XHRcdG1hdGNoID0gIXBvbHlub2RlLklzT3Blbjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0aWYgKHBvbHlub2RlLm1fcG9seWdvbi5sZW5ndGggPiAwICYmIG1hdGNoKVxuXHRcdFx0cGF0aHMucHVzaChwb2x5bm9kZS5tX3BvbHlnb24pO1xuXHRcdGZvciAodmFyICRpMyA9IDAsICR0MyA9IHBvbHlub2RlLkNoaWxkcygpLCAkbDMgPSAkdDMubGVuZ3RoLCBwbiA9ICR0M1skaTNdOyAkaTMgPCAkbDM7ICRpMysrLCBwbiA9ICR0M1skaTNdKVxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyLkFkZFBvbHlOb2RlVG9QYXRocyhwbiwgbnQsIHBhdGhzKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuT3BlblBhdGhzRnJvbVBvbHlUcmVlID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0Ly9yZXN1bHQuc2V0X0NhcGFjaXR5KHBvbHl0cmVlLkNoaWxkQ291bnQoKSk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwb2x5dHJlZS5DaGlsZENvdW50KCk7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRpZiAocG9seXRyZWUuQ2hpbGRzKClbaV0uSXNPcGVuKVxuXHRcdFx0XHRyZXN1bHQucHVzaChwb2x5dHJlZS5DaGlsZHMoKVtpXS5tX3BvbHlnb24pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkNsb3NlZFBhdGhzRnJvbVBvbHlUcmVlID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0Ly9yZXN1bHQuc2V0X0NhcGFjaXR5KHBvbHl0cmVlLlRvdGFsKCkpO1xuXHRcdENsaXBwZXJMaWIuQ2xpcHBlci5BZGRQb2x5Tm9kZVRvUGF0aHMocG9seXRyZWUsIENsaXBwZXJMaWIuQ2xpcHBlci5Ob2RlVHlwZS5udENsb3NlZCwgcmVzdWx0KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdEluaGVyaXQoQ2xpcHBlckxpYi5DbGlwcGVyLCBDbGlwcGVyTGliLkNsaXBwZXJCYXNlKTtcblx0Q2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlID0ge1xuXHRcdG50QW55OiAwLFxuXHRcdG50T3BlbjogMSxcblx0XHRudENsb3NlZDogMlxuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQgPSBmdW5jdGlvbiAobWl0ZXJMaW1pdCwgYXJjVG9sZXJhbmNlKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiAobWl0ZXJMaW1pdCkgPT09IFwidW5kZWZpbmVkXCIpIG1pdGVyTGltaXQgPSAyO1xuXHRcdGlmICh0eXBlb2YgKGFyY1RvbGVyYW5jZSkgPT09IFwidW5kZWZpbmVkXCIpIGFyY1RvbGVyYW5jZSA9IENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZTtcblx0XHR0aGlzLm1fZGVzdFBvbHlzID0gbmV3IENsaXBwZXJMaWIuUGF0aHMoKTtcblx0XHR0aGlzLm1fc3JjUG9seSA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0dGhpcy5tX25vcm1hbHMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fZGVsdGEgPSAwO1xuXHRcdHRoaXMubV9zaW5BID0gMDtcblx0XHR0aGlzLm1fc2luID0gMDtcblx0XHR0aGlzLm1fY29zID0gMDtcblx0XHR0aGlzLm1fbWl0ZXJMaW0gPSAwO1xuXHRcdHRoaXMubV9TdGVwc1BlclJhZCA9IDA7XG5cdFx0dGhpcy5tX2xvd2VzdCA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDAoKTtcblx0XHR0aGlzLm1fcG9seU5vZGVzID0gbmV3IENsaXBwZXJMaWIuUG9seU5vZGUoKTtcblx0XHR0aGlzLk1pdGVyTGltaXQgPSBtaXRlckxpbWl0O1xuXHRcdHRoaXMuQXJjVG9sZXJhbmNlID0gYXJjVG9sZXJhbmNlO1xuXHRcdHRoaXMubV9sb3dlc3QuWCA9IC0xO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC50d29fcGkgPSA2LjI4MzE4NTMwNzE3OTU5O1xuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuZGVmX2FyY190b2xlcmFuY2UgPSAwLjI1O1xuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkNsZWFyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdENsaXBwZXJMaWIuQ2xlYXIodGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKSk7XG5cdFx0dGhpcy5tX2xvd2VzdC5YID0gLTE7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5BZGRQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGpvaW5UeXBlLCBlbmRUeXBlKVxuXHR7XG5cdFx0dmFyIGhpZ2hJID0gcGF0aC5sZW5ndGggLSAxO1xuXHRcdGlmIChoaWdoSSA8IDApXG5cdFx0XHRyZXR1cm47XG5cdFx0dmFyIG5ld05vZGUgPSBuZXcgQ2xpcHBlckxpYi5Qb2x5Tm9kZSgpO1xuXHRcdG5ld05vZGUubV9qb2ludHlwZSA9IGpvaW5UeXBlO1xuXHRcdG5ld05vZGUubV9lbmR0eXBlID0gZW5kVHlwZTtcblx0XHQvL3N0cmlwIGR1cGxpY2F0ZSBwb2ludHMgZnJvbSBwYXRoIGFuZCBhbHNvIGdldCBpbmRleCB0byB0aGUgbG93ZXN0IHBvaW50IC4uLlxuXHRcdGlmIChlbmRUeXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRMaW5lIHx8IGVuZFR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIENsaXBwZXJMaWIuRlBvaW50Lm9wX0VxdWFsaXR5KHBhdGhbMF0sIHBhdGhbaGlnaEldKSlcblx0XHRcdFx0aGlnaEktLTtcblx0XHQvL25ld05vZGUubV9wb2x5Z29uLnNldF9DYXBhY2l0eShoaWdoSSArIDEpO1xuXHRcdG5ld05vZGUubV9wb2x5Z29uLnB1c2gocGF0aFswXSk7XG5cdFx0dmFyIGogPSAwLFxuXHRcdFx0ayA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gaGlnaEk7IGkrKylcblx0XHRcdGlmIChDbGlwcGVyTGliLkZQb2ludC5vcF9JbmVxdWFsaXR5KG5ld05vZGUubV9wb2x5Z29uW2pdLCBwYXRoW2ldKSlcblx0XHRcdHtcblx0XHRcdFx0aisrO1xuXHRcdFx0XHRuZXdOb2RlLm1fcG9seWdvbi5wdXNoKHBhdGhbaV0pO1xuXHRcdFx0XHRpZiAocGF0aFtpXS5ZID4gbmV3Tm9kZS5tX3BvbHlnb25ba10uWSB8fCAocGF0aFtpXS5ZID09PSBuZXdOb2RlLm1fcG9seWdvbltrXS5ZICYmIHBhdGhbaV0uWCA8IG5ld05vZGUubV9wb2x5Z29uW2tdLlgpKVxuXHRcdFx0XHRcdGsgPSBqO1xuXHRcdFx0fVxuXHRcdGlmIChlbmRUeXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uICYmIGogPCAyKSByZXR1cm47XG5cblx0XHR0aGlzLm1fcG9seU5vZGVzLkFkZENoaWxkKG5ld05vZGUpO1xuXHRcdC8vaWYgdGhpcyBwYXRoJ3MgbG93ZXN0IHB0IGlzIGxvd2VyIHRoYW4gYWxsIHRoZSBvdGhlcnMgdGhlbiB1cGRhdGUgbV9sb3dlc3Rcblx0XHRpZiAoZW5kVHlwZSAhPT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkUG9seWdvbilcblx0XHRcdHJldHVybjtcblx0XHRpZiAodGhpcy5tX2xvd2VzdC5YIDwgMClcblx0XHRcdHRoaXMubV9sb3dlc3QgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpIC0gMSwgayk7XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHZhciBpcCA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbdGhpcy5tX2xvd2VzdC5YXS5tX3BvbHlnb25bdGhpcy5tX2xvd2VzdC5ZXTtcblx0XHRcdGlmIChuZXdOb2RlLm1fcG9seWdvbltrXS5ZID4gaXAuWSB8fCAobmV3Tm9kZS5tX3BvbHlnb25ba10uWSA9PT0gaXAuWSAmJiBuZXdOb2RlLm1fcG9seWdvbltrXS5YIDwgaXAuWCkpXG5cdFx0XHRcdHRoaXMubV9sb3dlc3QgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpIC0gMSwgayk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuQWRkUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIGpvaW5UeXBlLCBlbmRUeXBlKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwYXRocy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHR0aGlzLkFkZFBhdGgocGF0aHNbaV0sIGpvaW5UeXBlLCBlbmRUeXBlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkZpeE9yaWVudGF0aW9ucyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHQvL2ZpeHVwIG9yaWVudGF0aW9ucyBvZiBhbGwgY2xvc2VkIHBhdGhzIGlmIHRoZSBvcmllbnRhdGlvbiBvZiB0aGVcblx0XHQvL2Nsb3NlZCBwYXRoIHdpdGggdGhlIGxvd2VybW9zdCB2ZXJ0ZXggaXMgd3JvbmcgLi4uXG5cdFx0aWYgKHRoaXMubV9sb3dlc3QuWCA+PSAwICYmICFDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24odGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKVt0aGlzLm1fbG93ZXN0LlhdLm1fcG9seWdvbikpXG5cdFx0e1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQoKTsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkUG9seWdvbiB8fCAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZExpbmUgJiYgQ2xpcHBlckxpYi5DbGlwcGVyLk9yaWVudGF0aW9uKG5vZGUubV9wb2x5Z29uKSkpXG5cdFx0XHRcdFx0bm9kZS5tX3BvbHlnb24ucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQoKTsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSAmJiAhQ2xpcHBlckxpYi5DbGlwcGVyLk9yaWVudGF0aW9uKG5vZGUubV9wb2x5Z29uKSlcblx0XHRcdFx0XHRub2RlLm1fcG9seWdvbi5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5HZXRVbml0Tm9ybWFsID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIGR4ID0gKHB0Mi5YIC0gcHQxLlgpO1xuXHRcdHZhciBkeSA9IChwdDIuWSAtIHB0MS5ZKTtcblx0XHRpZiAoKGR4ID09PSAwKSAmJiAoZHkgPT09IDApKVxuXHRcdFx0cmV0dXJuIG5ldyBDbGlwcGVyTGliLkZQb2ludDIoMCwgMCk7XG5cdFx0dmFyIGYgPSAxIC8gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblx0XHRkeCAqPSBmO1xuXHRcdGR5ICo9IGY7XG5cdFx0cmV0dXJuIG5ldyBDbGlwcGVyTGliLkZQb2ludDIoZHksIC1keCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5Eb09mZnNldCA9IGZ1bmN0aW9uIChkZWx0YSlcblx0e1xuXHRcdHRoaXMubV9kZXN0UG9seXMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fZGVsdGEgPSBkZWx0YTtcblx0XHQvL2lmIFplcm8gb2Zmc2V0LCBqdXN0IGNvcHkgYW55IENMT1NFRCBwb2x5Z29ucyB0byBtX3AgYW5kIHJldHVybiAuLi5cblx0XHRpZiAoQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5uZWFyX3plcm8oZGVsdGEpKVxuXHRcdHtcblx0XHRcdC8vdGhpcy5tX2Rlc3RQb2x5cy5zZXRfQ2FwYWNpdHkodGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KCk7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpW2ldO1xuXHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKG5vZGUubV9wb2x5Z29uKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly9zZWUgb2Zmc2V0X3RyaWdpbm9tZXRyeTMuc3ZnIGluIHRoZSBkb2N1bWVudGF0aW9uIGZvbGRlciAuLi5cblx0XHRpZiAodGhpcy5NaXRlckxpbWl0ID4gMilcblx0XHRcdHRoaXMubV9taXRlckxpbSA9IDIgLyAodGhpcy5NaXRlckxpbWl0ICogdGhpcy5NaXRlckxpbWl0KTtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLm1fbWl0ZXJMaW0gPSAwLjU7XG5cdFx0dmFyIHk7XG5cdFx0aWYgKHRoaXMuQXJjVG9sZXJhbmNlIDw9IDApXG5cdFx0XHR5ID0gQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlO1xuXHRcdGVsc2UgaWYgKHRoaXMuQXJjVG9sZXJhbmNlID4gTWF0aC5hYnMoZGVsdGEpICogQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlKVxuXHRcdFx0eSA9IE1hdGguYWJzKGRlbHRhKSAqIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZTtcblx0XHRlbHNlXG5cdFx0XHR5ID0gdGhpcy5BcmNUb2xlcmFuY2U7XG5cdFx0Ly9zZWUgb2Zmc2V0X3RyaWdpbm9tZXRyeTIuc3ZnIGluIHRoZSBkb2N1bWVudGF0aW9uIGZvbGRlciAuLi5cblx0XHR2YXIgc3RlcHMgPSAzLjE0MTU5MjY1MzU4OTc5IC8gTWF0aC5hY29zKDEgLSB5IC8gTWF0aC5hYnMoZGVsdGEpKTtcblx0XHR0aGlzLm1fc2luID0gTWF0aC5zaW4oQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnR3b19waSAvIHN0ZXBzKTtcblx0XHR0aGlzLm1fY29zID0gTWF0aC5jb3MoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnR3b19waSAvIHN0ZXBzKTtcblx0XHR0aGlzLm1fU3RlcHNQZXJSYWQgPSBzdGVwcyAvIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC50d29fcGk7XG5cdFx0aWYgKGRlbHRhIDwgMClcblx0XHRcdHRoaXMubV9zaW4gPSAtdGhpcy5tX3Npbjtcblx0XHQvL3RoaXMubV9kZXN0UG9seXMuc2V0X0NhcGFjaXR5KHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCAqIDIpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KCk7IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHR0aGlzLm1fc3JjUG9seSA9IG5vZGUubV9wb2x5Z29uO1xuXHRcdFx0dmFyIGxlbiA9IHRoaXMubV9zcmNQb2x5Lmxlbmd0aDtcblx0XHRcdGlmIChsZW4gPT09IDAgfHwgKGRlbHRhIDw9IDAgJiYgKGxlbiA8IDMgfHwgbm9kZS5tX2VuZHR5cGUgIT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pKSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQXJyYXkoKTtcblx0XHRcdGlmIChsZW4gPT09IDEpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChub2RlLm1fam9pbnR5cGUgPT09IENsaXBwZXJMaWIuSm9pblR5cGUuanRSb3VuZClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBYID0gMSxcblx0XHRcdFx0XHRcdFkgPSAwO1xuXHRcdFx0XHRcdGZvciAodmFyIGogPSAxOyBqIDw9IHN0ZXBzOyBqKyspXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50Mih0aGlzLm1fc3JjUG9seVswXS5YICsgWCAqIGRlbHRhLCB0aGlzLm1fc3JjUG9seVswXS5ZICsgWSAqIGRlbHRhKSk7XG5cdFx0XHRcdFx0XHR2YXIgWDIgPSBYO1xuXHRcdFx0XHRcdFx0WCA9IFggKiB0aGlzLm1fY29zIC0gdGhpcy5tX3NpbiAqIFk7XG5cdFx0XHRcdFx0XHRZID0gWDIgKiB0aGlzLm1fc2luICsgWSAqIHRoaXMubV9jb3M7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBYID0gLTEsXG5cdFx0XHRcdFx0XHRZID0gLTE7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCA0OyArK2opXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50Mih0aGlzLm1fc3JjUG9seVswXS5YICsgWCAqIGRlbHRhLCB0aGlzLm1fc3JjUG9seVswXS5ZICsgWSAqIGRlbHRhKSk7XG5cdFx0XHRcdFx0XHRpZiAoWCA8IDApXG5cdFx0XHRcdFx0XHRcdFggPSAxO1xuXHRcdFx0XHRcdFx0ZWxzZSBpZiAoWSA8IDApXG5cdFx0XHRcdFx0XHRcdFkgPSAxO1xuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRYID0gLTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vYnVpbGQgbV9ub3JtYWxzIC4uLlxuXHRcdFx0dGhpcy5tX25vcm1hbHMubGVuZ3RoID0gMDtcblx0XHRcdC8vdGhpcy5tX25vcm1hbHMuc2V0X0NhcGFjaXR5KGxlbik7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbiAtIDE7IGorKylcblx0XHRcdFx0dGhpcy5tX25vcm1hbHMucHVzaChDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuR2V0VW5pdE5vcm1hbCh0aGlzLm1fc3JjUG9seVtqXSwgdGhpcy5tX3NyY1BvbHlbaiArIDFdKSk7XG5cdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZExpbmUgfHwgbm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzLnB1c2goQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LkdldFVuaXROb3JtYWwodGhpcy5tX3NyY1BvbHlbbGVuIC0gMV0sIHRoaXMubV9zcmNQb2x5WzBdKSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzLnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50MSh0aGlzLm1fbm9ybWFsc1tsZW4gLSAyXSkpO1xuXHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgayA9IGxlbiAtIDE7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKHRoaXMubV9kZXN0UG9seSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGsgPSBsZW4gLSAxO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKVxuXHRcdFx0XHRcdGsgPSB0aGlzLk9mZnNldFBvaW50KGosIGssIG5vZGUubV9qb2ludHlwZSk7XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQXJyYXkoKTtcblx0XHRcdFx0Ly9yZS1idWlsZCBtX25vcm1hbHMgLi4uXG5cdFx0XHRcdHZhciBuID0gdGhpcy5tX25vcm1hbHNbbGVuIC0gMV07XG5cdFx0XHRcdGZvciAodmFyIGogPSBsZW4gLSAxOyBqID4gMDsgai0tKVxuXHRcdFx0XHRcdHRoaXMubV9ub3JtYWxzW2pdID0gbmV3IENsaXBwZXJMaWIuRlBvaW50MigtdGhpcy5tX25vcm1hbHNbaiAtIDFdLlgsIC10aGlzLm1fbm9ybWFsc1tqIC0gMV0uWSk7XG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzWzBdID0gbmV3IENsaXBwZXJMaWIuRlBvaW50Migtbi5YLCAtbi5ZKTtcblx0XHRcdFx0ayA9IDA7XG5cdFx0XHRcdGZvciAodmFyIGogPSBsZW4gLSAxOyBqID49IDA7IGotLSlcblx0XHRcdFx0XHRrID0gdGhpcy5PZmZzZXRQb2ludChqLCBrLCBub2RlLm1fam9pbnR5cGUpO1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHlzLnB1c2godGhpcy5tX2Rlc3RQb2x5KTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIGsgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMTsgaiA8IGxlbiAtIDE7ICsrailcblx0XHRcdFx0XHRrID0gdGhpcy5PZmZzZXRQb2ludChqLCBrLCBub2RlLm1fam9pbnR5cGUpO1xuXHRcdFx0XHR2YXIgcHQxO1xuXHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldE9wZW5CdXR0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGogPSBsZW4gLSAxO1xuXHRcdFx0XHRcdHB0MSA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDIodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlggKiBkZWx0YSwgdGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiBkZWx0YSk7XG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gocHQxKTtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHRoaXMubV9zcmNQb2x5W2pdLlggLSB0aGlzLm1fbm9ybWFsc1tqXS5YICogZGVsdGEsIHRoaXMubV9zcmNQb2x5W2pdLlkgLSB0aGlzLm1fbm9ybWFsc1tqXS5ZICogZGVsdGEpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGogPSBsZW4gLSAxO1xuXHRcdFx0XHRcdGsgPSBsZW4gLSAyO1xuXHRcdFx0XHRcdHRoaXMubV9zaW5BID0gMDtcblx0XHRcdFx0XHR0aGlzLm1fbm9ybWFsc1tqXSA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDIoLXRoaXMubV9ub3JtYWxzW2pdLlgsIC10aGlzLm1fbm9ybWFsc1tqXS5ZKTtcblx0XHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldE9wZW5TcXVhcmUpXG5cdFx0XHRcdFx0XHR0aGlzLkRvU3F1YXJlKGosIGspO1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHRoaXMuRG9Sb3VuZChqLCBrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL3JlLWJ1aWxkIG1fbm9ybWFscyAuLi5cblx0XHRcdFx0Zm9yICh2YXIgaiA9IGxlbiAtIDE7IGogPiAwOyBqLS0pXG5cdFx0XHRcdFx0dGhpcy5tX25vcm1hbHNbal0gPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKC10aGlzLm1fbm9ybWFsc1tqIC0gMV0uWCwgLXRoaXMubV9ub3JtYWxzW2ogLSAxXS5ZKTtcblx0XHRcdFx0dGhpcy5tX25vcm1hbHNbMF0gPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKC10aGlzLm1fbm9ybWFsc1sxXS5YLCAtdGhpcy5tX25vcm1hbHNbMV0uWSk7XG5cdFx0XHRcdGsgPSBsZW4gLSAxO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gayAtIDE7IGogPiAwOyAtLWopXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRPcGVuQnV0dClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHB0MSA9IG5ldyBDbGlwcGVyTGliLkZQb2ludDIodGhpcy5tX3NyY1BvbHlbMF0uWCAtIHRoaXMubV9ub3JtYWxzWzBdLlggKiBkZWx0YSwgdGhpcy5tX3NyY1BvbHlbMF0uWSAtIHRoaXMubV9ub3JtYWxzWzBdLlkgKiBkZWx0YSk7XG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gocHQxKTtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHRoaXMubV9zcmNQb2x5WzBdLlggKyB0aGlzLm1fbm9ybWFsc1swXS5YICogZGVsdGEsIHRoaXMubV9zcmNQb2x5WzBdLlkgKyB0aGlzLm1fbm9ybWFsc1swXS5ZICogZGVsdGEpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ayA9IDE7XG5cdFx0XHRcdFx0dGhpcy5tX3NpbkEgPSAwO1xuXHRcdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0T3BlblNxdWFyZSlcblx0XHRcdFx0XHRcdHRoaXMuRG9TcXVhcmUoMCwgMSk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dGhpcy5Eb1JvdW5kKDAsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkV4ZWN1dGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRpc3BvbHl0cmVlID0gYVswXSBpbnN0YW5jZW9mIENsaXBwZXJMaWIuUG9seVRyZWU7XG5cdFx0aWYgKCFpc3BvbHl0cmVlKSAvLyBmdW5jdGlvbiAoc29sdXRpb24sIGRlbHRhKVxuXHRcdHtcblx0XHRcdHZhciBzb2x1dGlvbiA9IGFbMF0sXG5cdFx0XHRcdGRlbHRhID0gYVsxXTtcblx0XHRcdENsaXBwZXJMaWIuQ2xlYXIoc29sdXRpb24pO1xuXHRcdFx0dGhpcy5GaXhPcmllbnRhdGlvbnMoKTtcblx0XHRcdHRoaXMuRG9PZmZzZXQoZGVsdGEpO1xuXHRcdFx0Ly9ub3cgY2xlYW4gdXAgJ2Nvcm5lcnMnIC4uLlxuXHRcdFx0dmFyIGNscHIgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdFx0Y2xwci5BZGRQYXRocyh0aGlzLm1fZGVzdFBvbHlzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRpZiAoZGVsdGEgPiAwKVxuXHRcdFx0e1xuXHRcdFx0XHRjbHByLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIHIgPSBDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzKHRoaXMubV9kZXN0UG9seXMpO1xuXHRcdFx0XHR2YXIgb3V0ZXIgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50MihyLmxlZnQgLSAxMCwgci5ib3R0b20gKyAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIoci5yaWdodCArIDEwLCByLmJvdHRvbSArIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50MihyLnJpZ2h0ICsgMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHIubGVmdCAtIDEwLCByLnRvcCAtIDEwKSk7XG5cdFx0XHRcdGNscHIuQWRkUGF0aChvdXRlciwgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0XHRjbHByLlJldmVyc2VTb2x1dGlvbiA9IHRydWU7XG5cdFx0XHRcdGNscHIuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmUpO1xuXHRcdFx0XHRpZiAoc29sdXRpb24ubGVuZ3RoID4gMClcblx0XHRcdFx0XHRzb2x1dGlvbi5zcGxpY2UoMCwgMSk7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHNvbHV0aW9uKSk7XG5cdFx0fVxuXHRcdGVsc2UgLy8gZnVuY3Rpb24gKHBvbHl0cmVlLCBkZWx0YSlcblx0XHR7XG5cdFx0XHR2YXIgc29sdXRpb24gPSBhWzBdLFxuXHRcdFx0XHRkZWx0YSA9IGFbMV07XG5cdFx0XHRzb2x1dGlvbi5DbGVhcigpO1xuXHRcdFx0dGhpcy5GaXhPcmllbnRhdGlvbnMoKTtcblx0XHRcdHRoaXMuRG9PZmZzZXQoZGVsdGEpO1xuXHRcdFx0Ly9ub3cgY2xlYW4gdXAgJ2Nvcm5lcnMnIC4uLlxuXHRcdFx0dmFyIGNscHIgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdFx0Y2xwci5BZGRQYXRocyh0aGlzLm1fZGVzdFBvbHlzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRpZiAoZGVsdGEgPiAwKVxuXHRcdFx0e1xuXHRcdFx0XHRjbHByLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIHIgPSBDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzKHRoaXMubV9kZXN0UG9seXMpO1xuXHRcdFx0XHR2YXIgb3V0ZXIgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50MihyLmxlZnQgLSAxMCwgci5ib3R0b20gKyAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIoci5yaWdodCArIDEwLCByLmJvdHRvbSArIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50MihyLnJpZ2h0ICsgMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5GUG9pbnQyKHIubGVmdCAtIDEwLCByLnRvcCAtIDEwKSk7XG5cdFx0XHRcdGNscHIuQWRkUGF0aChvdXRlciwgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0XHRjbHByLlJldmVyc2VTb2x1dGlvbiA9IHRydWU7XG5cdFx0XHRcdGNscHIuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmUpO1xuXHRcdFx0XHQvL3JlbW92ZSB0aGUgb3V0ZXIgUG9seU5vZGUgcmVjdGFuZ2xlIC4uLlxuXHRcdFx0XHRpZiAoc29sdXRpb24uQ2hpbGRDb3VudCgpID09PSAxICYmIHNvbHV0aW9uLkNoaWxkcygpWzBdLkNoaWxkQ291bnQoKSA+IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgb3V0ZXJOb2RlID0gc29sdXRpb24uQ2hpbGRzKClbMF07XG5cdFx0XHRcdFx0Ly9zb2x1dGlvbi5DaGlsZHMuc2V0X0NhcGFjaXR5KG91dGVyTm9kZS5DaGlsZENvdW50KTtcblx0XHRcdFx0XHRzb2x1dGlvbi5DaGlsZHMoKVswXSA9IG91dGVyTm9kZS5DaGlsZHMoKVswXTtcblx0XHRcdFx0XHRzb2x1dGlvbi5DaGlsZHMoKVswXS5tX1BhcmVudCA9IHNvbHV0aW9uO1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAxOyBpIDwgb3V0ZXJOb2RlLkNoaWxkQ291bnQoKTsgaSsrKVxuXHRcdFx0XHRcdFx0c29sdXRpb24uQWRkQ2hpbGQob3V0ZXJOb2RlLkNoaWxkcygpW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0c29sdXRpb24uQ2xlYXIoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5PZmZzZXRQb2ludCA9IGZ1bmN0aW9uIChqLCBrLCBqb2ludHlwZSlcblx0e1xuXHRcdC8vY3Jvc3MgcHJvZHVjdCAuLi5cblx0XHR0aGlzLm1fc2luQSA9ICh0aGlzLm1fbm9ybWFsc1trXS5YICogdGhpcy5tX25vcm1hbHNbal0uWSAtIHRoaXMubV9ub3JtYWxzW2pdLlggKiB0aGlzLm1fbm9ybWFsc1trXS5ZKTtcblxuXHRcdGlmICh0aGlzLm1fc2luQSA9PT0gMClcblx0XHR7XG4gICAgICByZXR1cm4gaztcblx0XHR9XG5cbi8qXG5cdFx0ZWxzZSBpZiAodGhpcy5tX3NpbkEgPCAwLjAwMDA1ICYmIHRoaXMubV9zaW5BID4gLTAuMDAwMDUpXG57XG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzLm1fc2luQSk7XG4gICAgICByZXR1cm4gaztcbn1cbiovXG4vKlxuXHRcdGlmIChNYXRoLmFicyh0aGlzLm1fc2luQSAqIHRoaXMubV9kZWx0YSkgPCAxLjApXG5cdFx0e1xuXHRcdFx0Ly9kb3QgcHJvZHVjdCAuLi5cblx0XHRcdHZhciBjb3NBID0gKHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fbm9ybWFsc1tqXS5YICsgdGhpcy5tX25vcm1hbHNbal0uWSAqIHRoaXMubV9ub3JtYWxzW2tdLlkpO1xuXHRcdFx0aWYgKGNvc0EgPiAwKSAvLyBhbmdsZSA9PT4gMCBkZWdyZWVzXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fZGVsdGEsXG5cdFx0XHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fZGVsdGEpKTtcblx0XHRcdFx0cmV0dXJuIGs7XG5cdFx0XHR9XG5cdFx0XHQvL2Vsc2UgYW5nbGUgPT0+IDE4MCBkZWdyZWVzXG5cdFx0fVxuKi9cblx0XHRlbHNlIGlmICh0aGlzLm1fc2luQSA+IDEpXG5cdFx0XHR0aGlzLm1fc2luQSA9IDEuMDtcblx0XHRlbHNlIGlmICh0aGlzLm1fc2luQSA8IC0xKVxuXHRcdFx0dGhpcy5tX3NpbkEgPSAtMS4wO1xuXHRcdGlmICh0aGlzLm1fc2luQSAqIHRoaXMubV9kZWx0YSA8IDApXG5cdFx0e1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50Mih0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9kZWx0YSxcblx0XHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fZGVsdGEpKTtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDEodGhpcy5tX3NyY1BvbHlbal0pKTtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlggKiB0aGlzLm1fZGVsdGEsXG5cdFx0XHRcdHRoaXMubV9zcmNQb2x5W2pdLlkgKyB0aGlzLm1fbm9ybWFsc1tqXS5ZICogdGhpcy5tX2RlbHRhKSk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHRcdHN3aXRjaCAoam9pbnR5cGUpXG5cdFx0XHR7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuSm9pblR5cGUuanRNaXRlcjpcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciByID0gMSArICh0aGlzLm1fbm9ybWFsc1tqXS5YICogdGhpcy5tX25vcm1hbHNba10uWCArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fbm9ybWFsc1trXS5ZKTtcblx0XHRcdFx0XHRpZiAociA+PSB0aGlzLm1fbWl0ZXJMaW0pXG5cdFx0XHRcdFx0XHR0aGlzLkRvTWl0ZXIoaiwgaywgcik7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dGhpcy5Eb1NxdWFyZShqLCBrKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLkpvaW5UeXBlLmp0U3F1YXJlOlxuXHRcdFx0XHR0aGlzLkRvU3F1YXJlKGosIGspO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Kb2luVHlwZS5qdFJvdW5kOlxuXHRcdFx0XHR0aGlzLkRvUm91bmQoaiwgayk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdGsgPSBqO1xuXHRcdHJldHVybiBrO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9TcXVhcmUgPSBmdW5jdGlvbiAoaiwgaylcblx0e1xuXHRcdHZhciBkeCA9IE1hdGgudGFuKE1hdGguYXRhbjIodGhpcy5tX3NpbkEsXG5cdFx0XHR0aGlzLm1fbm9ybWFsc1trXS5YICogdGhpcy5tX25vcm1hbHNbal0uWCArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fbm9ybWFsc1tqXS5ZKSAvIDQpO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIoXG5cdFx0XHR0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2tdLlggLSB0aGlzLm1fbm9ybWFsc1trXS5ZICogZHgpLFxuXHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9kZWx0YSAqICh0aGlzLm1fbm9ybWFsc1trXS5ZICsgdGhpcy5tX25vcm1hbHNba10uWCAqIGR4KSkpO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIoXG5cdFx0XHR0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5ZICogZHgpLFxuXHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9kZWx0YSAqICh0aGlzLm1fbm9ybWFsc1tqXS5ZIC0gdGhpcy5tX25vcm1hbHNbal0uWCAqIGR4KSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9NaXRlciA9IGZ1bmN0aW9uIChqLCBrLCByKVxuXHR7XG5cdFx0dmFyIHEgPSB0aGlzLm1fZGVsdGEgLyByO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkZQb2ludDIoXG5cdFx0XHR0aGlzLm1fc3JjUG9seVtqXS5YICsgKHRoaXMubV9ub3JtYWxzW2tdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5YKSAqIHEsXG5cdFx0XHR0aGlzLm1fc3JjUG9seVtqXS5ZICsgKHRoaXMubV9ub3JtYWxzW2tdLlkgKyB0aGlzLm1fbm9ybWFsc1tqXS5ZKSAqIHEpKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkRvUm91bmQgPSBmdW5jdGlvbiAoaiwgaylcblx0e1xuXHRcdHZhciBhID0gTWF0aC5hdGFuMih0aGlzLm1fc2luQSxcblx0XHRcdHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fbm9ybWFsc1tqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWSAqIHRoaXMubV9ub3JtYWxzW2pdLlkpO1xuXG5cdFx0dmFyIHN0ZXBzID0gTWF0aC5tYXgoTWF0aC5yb3VuZCh0aGlzLm1fU3RlcHNQZXJSYWQgKiBNYXRoLmFicyhhKSksIDEpO1xuXG5cdFx0dmFyIFggPSB0aGlzLm1fbm9ybWFsc1trXS5YLFxuXHRcdFx0WSA9IHRoaXMubV9ub3JtYWxzW2tdLlksXG5cdFx0XHRYMjtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0ZXBzOyArK2kpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50Mihcblx0XHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWCArIFggKiB0aGlzLm1fZGVsdGEsXG5cdFx0XHRcdHRoaXMubV9zcmNQb2x5W2pdLlkgKyBZICogdGhpcy5tX2RlbHRhKSk7XG5cdFx0XHRYMiA9IFg7XG5cdFx0XHRYID0gWCAqIHRoaXMubV9jb3MgLSB0aGlzLm1fc2luICogWTtcblx0XHRcdFkgPSBYMiAqIHRoaXMubV9zaW4gKyBZICogdGhpcy5tX2Nvcztcblx0XHR9XG5cdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuRlBvaW50Mihcblx0XHRcdHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5YICogdGhpcy5tX2RlbHRhLFxuXHRcdFx0dGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fZGVsdGEpKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpXG5cdHtcblx0XHR0cnlcblx0XHR7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG5cdFx0fVxuXHRcdGNhdGNoIChlcnIpXG5cdFx0e1xuXHRcdFx0YWxlcnQoZXJyLm1lc3NhZ2UpO1xuXHRcdH1cblx0fTtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBKUyBleHRlbnNpb24gYnkgVGltbyAyMDEzXG5cdENsaXBwZXJMaWIuSlMgPSB7fTtcblxuXHRDbGlwcGVyTGliLkpTLkFyZWFPZlBvbHlnb24gPSBmdW5jdGlvbiAocG9seSlcblx0e1xuXHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuQXJlYShwb2x5KTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLkFyZWFPZlBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHkpXG5cdHtcblx0XHR2YXIgYXJlYSA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb2x5Lmxlbmd0aDsgaSsrKVxuXHRcdHtcblx0XHRcdGFyZWEgKz0gQ2xpcHBlckxpYi5DbGlwcGVyLkFyZWEocG9seVtpXSk7XG5cdFx0fVxuXHRcdHJldHVybiBhcmVhO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuQm91bmRzT2ZQYXRoID0gZnVuY3Rpb24gKHBhdGgpXG5cdHtcblx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5Cb3VuZHNPZlBhdGhzKFtwYXRoXSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5Cb3VuZHNPZlBhdGhzID0gZnVuY3Rpb24gKHBhdGhzKVxuXHR7XG5cdFx0dmFyIGJvdW5kcyA9IENsaXBwZXJMaWIuQ2xpcHBlci5HZXRCb3VuZHMocGF0aHMpO1xuXHRcdHJldHVybiBib3VuZHM7XG5cdH07XG5cblx0Ly8gQ2xlYW4oKSBqb2lucyB2ZXJ0aWNlcyB0aGF0IGFyZSB0b28gbmVhciBlYWNoIG90aGVyXG5cdC8vIGFuZCBjYXVzZXMgZGlzdG9ydGlvbiB0byBvZmZzZXR0ZWQgcG9seWdvbnMgd2l0aG91dCBjbGVhbmluZ1xuXHRDbGlwcGVyTGliLkpTLkNsZWFuID0gZnVuY3Rpb24gKHBvbHlnb24sIGRlbHRhKVxuXHR7XG5cdFx0aWYgKCEocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIFtdO1xuXHRcdHZhciBpc1BvbHlnb25zID0gcG9seWdvblswXSBpbnN0YW5jZW9mIEFycmF5O1xuXHRcdHZhciBwb2x5Z29uID0gQ2xpcHBlckxpYi5KUy5DbG9uZShwb2x5Z29uKTtcblx0XHRpZiAodHlwZW9mIGRlbHRhICE9PSBcIm51bWJlclwiIHx8IGRlbHRhID09PSBudWxsKVxuXHRcdHtcblx0XHRcdENsaXBwZXJMaWIuRXJyb3IoXCJEZWx0YSBpcyBub3QgYSBudW1iZXIgaW4gQ2xlYW4oKS5cIik7XG5cdFx0XHRyZXR1cm4gcG9seWdvbjtcblx0XHR9XG5cdFx0aWYgKHBvbHlnb24ubGVuZ3RoID09PSAwIHx8IChwb2x5Z29uLmxlbmd0aCA9PT0gMSAmJiBwb2x5Z29uWzBdLmxlbmd0aCA9PT0gMCkgfHwgZGVsdGEgPCAwKSByZXR1cm4gcG9seWdvbjtcblx0XHRpZiAoIWlzUG9seWdvbnMpIHBvbHlnb24gPSBbcG9seWdvbl07XG5cdFx0dmFyIGtfbGVuZ3RoID0gcG9seWdvbi5sZW5ndGg7XG5cdFx0dmFyIGxlbiwgcG9seSwgcmVzdWx0LCBkLCBwLCBqLCBpO1xuXHRcdHZhciByZXN1bHRzID0gW107XG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBrX2xlbmd0aDsgaysrKVxuXHRcdHtcblx0XHRcdHBvbHkgPSBwb2x5Z29uW2tdO1xuXHRcdFx0bGVuID0gcG9seS5sZW5ndGg7XG5cdFx0XHRpZiAobGVuID09PSAwKSBjb250aW51ZTtcblx0XHRcdGVsc2UgaWYgKGxlbiA8IDMpXG5cdFx0XHR7XG5cdFx0XHRcdHJlc3VsdCA9IHBvbHk7XG5cdFx0XHRcdHJlc3VsdHMucHVzaChyZXN1bHQpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdCA9IHBvbHk7XG5cdFx0XHRkID0gZGVsdGEgKiBkZWx0YTtcblx0XHRcdC8vZCA9IE1hdGguZmxvb3IoY19kZWx0YSAqIGNfZGVsdGEpO1xuXHRcdFx0cCA9IHBvbHlbMF07XG5cdFx0XHRqID0gMTtcblx0XHRcdGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcblx0XHRcdHtcblx0XHRcdFx0aWYgKChwb2x5W2ldLlggLSBwLlgpICogKHBvbHlbaV0uWCAtIHAuWCkgK1xuXHRcdFx0XHRcdChwb2x5W2ldLlkgLSBwLlkpICogKHBvbHlbaV0uWSAtIHAuWSkgPD0gZClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0cmVzdWx0W2pdID0gcG9seVtpXTtcblx0XHRcdFx0cCA9IHBvbHlbaV07XG5cdFx0XHRcdGorKztcblx0XHRcdH1cblx0XHRcdHAgPSBwb2x5W2ogLSAxXTtcblx0XHRcdGlmICgocG9seVswXS5YIC0gcC5YKSAqIChwb2x5WzBdLlggLSBwLlgpICtcblx0XHRcdFx0KHBvbHlbMF0uWSAtIHAuWSkgKiAocG9seVswXS5ZIC0gcC5ZKSA8PSBkKVxuXHRcdFx0XHRqLS07XG5cdFx0XHRpZiAoaiA8IGxlbilcblx0XHRcdFx0cmVzdWx0LnNwbGljZShqLCBsZW4gLSBqKTtcblx0XHRcdGlmIChyZXN1bHQubGVuZ3RoKSByZXN1bHRzLnB1c2gocmVzdWx0KTtcblx0XHR9XG5cdFx0aWYgKCFpc1BvbHlnb25zICYmIHJlc3VsdHMubGVuZ3RoKSByZXN1bHRzID0gcmVzdWx0c1swXTtcblx0XHRlbHNlIGlmICghaXNQb2x5Z29ucyAmJiByZXN1bHRzLmxlbmd0aCA9PT0gMCkgcmVzdWx0cyA9IFtdO1xuXHRcdGVsc2UgaWYgKGlzUG9seWdvbnMgJiYgcmVzdWx0cy5sZW5ndGggPT09IDApIHJlc3VsdHMgPSBbXG5cdFx0XHRbXVxuXHRcdF07XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblx0Ly8gTWFrZSBkZWVwIGNvcHkgb2YgUG9seWdvbnMgb3IgUG9seWdvblxuXHQvLyBzbyB0aGF0IGFsc28gRlBvaW50IG9iamVjdHMgYXJlIGNsb25lZCBhbmQgbm90IG9ubHkgcmVmZXJlbmNlZFxuXHQvLyBUaGlzIHNob3VsZCBiZSB0aGUgZmFzdGVzdCB3YXlcblx0Q2xpcHBlckxpYi5KUy5DbG9uZSA9IGZ1bmN0aW9uIChwb2x5Z29uKVxuXHR7XG5cdFx0aWYgKCEocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIFtdO1xuXHRcdGlmIChwb2x5Z29uLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuXHRcdGVsc2UgaWYgKHBvbHlnb24ubGVuZ3RoID09PSAxICYmIHBvbHlnb25bMF0ubGVuZ3RoID09PSAwKSByZXR1cm4gW1xuXHRcdFx0W11cblx0XHRdO1xuXHRcdHZhciBpc1BvbHlnb25zID0gcG9seWdvblswXSBpbnN0YW5jZW9mIEFycmF5O1xuXHRcdGlmICghaXNQb2x5Z29ucykgcG9seWdvbiA9IFtwb2x5Z29uXTtcblx0XHR2YXIgbGVuID0gcG9seWdvbi5sZW5ndGgsXG5cdFx0XHRwbGVuLCBpLCBqLCByZXN1bHQ7XG5cdFx0dmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuKTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0cGxlbiA9IHBvbHlnb25baV0ubGVuZ3RoO1xuXHRcdFx0cmVzdWx0ID0gbmV3IEFycmF5KHBsZW4pO1xuXHRcdFx0Zm9yIChqID0gMDsgaiA8IHBsZW47IGorKylcblx0XHRcdHtcblx0XHRcdFx0cmVzdWx0W2pdID0ge1xuXHRcdFx0XHRcdFg6IHBvbHlnb25baV1bal0uWCxcblx0XHRcdFx0XHRZOiBwb2x5Z29uW2ldW2pdLllcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXHRcdFx0cmVzdWx0c1tpXSA9IHJlc3VsdDtcblx0XHR9XG5cdFx0aWYgKCFpc1BvbHlnb25zKSByZXN1bHRzID0gcmVzdWx0c1swXTtcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fTtcblxuXHQvLyBSZW1vdmVzIHBvaW50cyB0aGF0IGRvZXNuJ3QgYWZmZWN0IG11Y2ggdG8gdGhlIHZpc3VhbCBhcHBlYXJhbmNlLlxuXHQvLyBJZiBtaWRkbGUgcG9pbnQgaXMgYXQgb3IgdW5kZXIgY2VydGFpbiBkaXN0YW5jZSAodG9sZXJhbmNlKSBvZiB0aGUgbGluZSBzZWdtZW50IGJldHdlZW5cblx0Ly8gc3RhcnQgYW5kIGVuZCBwb2ludCwgdGhlIG1pZGRsZSBwb2ludCBpcyByZW1vdmVkLlxuXHRDbGlwcGVyTGliLkpTLkxpZ2h0ZW4gPSBmdW5jdGlvbiAocG9seWdvbiwgdG9sZXJhbmNlKVxuXHR7XG5cdFx0aWYgKCEocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIFtdO1xuXHRcdGlmICh0eXBlb2YgdG9sZXJhbmNlICE9PSBcIm51bWJlclwiIHx8IHRvbGVyYW5jZSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiVG9sZXJhbmNlIGlzIG5vdCBhIG51bWJlciBpbiBMaWdodGVuKCkuXCIpXG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5DbG9uZShwb2x5Z29uKTtcblx0XHR9XG5cdFx0aWYgKHBvbHlnb24ubGVuZ3RoID09PSAwIHx8IChwb2x5Z29uLmxlbmd0aCA9PT0gMSAmJiBwb2x5Z29uWzBdLmxlbmd0aCA9PT0gMCkgfHwgdG9sZXJhbmNlIDwgMClcblx0XHR7XG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5DbG9uZShwb2x5Z29uKTtcblx0XHR9XG5cdFx0dmFyIGlzUG9seWdvbnMgPSBwb2x5Z29uWzBdIGluc3RhbmNlb2YgQXJyYXk7XG5cdFx0aWYgKCFpc1BvbHlnb25zKSBwb2x5Z29uID0gW3BvbHlnb25dO1xuXHRcdHZhciBpLCBqLCBwb2x5LCBrLCBwb2x5MiwgcGxlbiwgQSwgQiwgUCwgZCwgcmVtLCBhZGRsYXN0O1xuXHRcdHZhciBieGF4LCBieWF5LCBsLCBheCwgYXk7XG5cdFx0dmFyIGxlbiA9IHBvbHlnb24ubGVuZ3RoO1xuXHRcdHZhciB0b2xlcmFuY2VTcSA9IHRvbGVyYW5jZSAqIHRvbGVyYW5jZTtcblx0XHR2YXIgcmVzdWx0cyA9IFtdO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcblx0XHR7XG5cdFx0XHRwb2x5ID0gcG9seWdvbltpXTtcblx0XHRcdHBsZW4gPSBwb2x5Lmxlbmd0aDtcblx0XHRcdGlmIChwbGVuID09PSAwKSBjb250aW51ZTtcblx0XHRcdGZvciAoayA9IDA7IGsgPCAxMDAwMDAwOyBrKyspIC8vIGNvdWxkIGJlIGZvcmV2ZXIgbG9vcCwgYnV0IHdpc2VyIHRvIHJlc3RyaWN0IG1heCByZXBlYXQgY291bnRcblx0XHRcdHtcblx0XHRcdFx0cG9seTIgPSBbXTtcblx0XHRcdFx0cGxlbiA9IHBvbHkubGVuZ3RoO1xuXHRcdFx0XHQvLyB0aGUgZmlyc3QgaGF2ZSB0byBhZGRlZCB0byB0aGUgZW5kLCBpZiBmaXJzdCBhbmQgbGFzdCBhcmUgbm90IHRoZSBzYW1lXG5cdFx0XHRcdC8vIHRoaXMgd2F5IHdlIGVuc3VyZSB0aGF0IGFsc28gdGhlIGFjdHVhbCBsYXN0IHBvaW50IGNhbiBiZSByZW1vdmVkIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAocG9seVtwbGVuIC0gMV0uWCAhPT0gcG9seVswXS5YIHx8IHBvbHlbcGxlbiAtIDFdLlkgIT09IHBvbHlbMF0uWSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFkZGxhc3QgPSAxO1xuXHRcdFx0XHRcdHBvbHkucHVzaChcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRYOiBwb2x5WzBdLlgsXG5cdFx0XHRcdFx0XHRZOiBwb2x5WzBdLllcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRwbGVuID0gcG9seS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBhZGRsYXN0ID0gMDtcblx0XHRcdFx0cmVtID0gW107IC8vIEluZGV4ZXMgb2YgcmVtb3ZlZCBwb2ludHNcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHBsZW4gLSAyOyBqKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRBID0gcG9seVtqXTsgLy8gU3RhcnQgcG9pbnQgb2YgbGluZSBzZWdtZW50XG5cdFx0XHRcdFx0UCA9IHBvbHlbaiArIDFdOyAvLyBNaWRkbGUgcG9pbnQuIFRoaXMgaXMgdGhlIG9uZSB0byBiZSByZW1vdmVkLlxuXHRcdFx0XHRcdEIgPSBwb2x5W2ogKyAyXTsgLy8gRW5kIHBvaW50IG9mIGxpbmUgc2VnbWVudFxuXHRcdFx0XHRcdGF4ID0gQS5YO1xuXHRcdFx0XHRcdGF5ID0gQS5ZO1xuXHRcdFx0XHRcdGJ4YXggPSBCLlggLSBheDtcblx0XHRcdFx0XHRieWF5ID0gQi5ZIC0gYXk7XG5cdFx0XHRcdFx0aWYgKGJ4YXggIT09IDAgfHwgYnlheSAhPT0gMCkgLy8gVG8gYXZvaWQgTmFuLCB3aGVuIEE9PVAgJiYgUD09Qi4gQW5kIHRvIGF2b2lkIHBlYWtzIChBPT1CICYmIEEhPVApLCB3aGljaCBoYXZlIGxlbmdodCwgYnV0IG5vdCBhcmVhLlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGwgPSAoKFAuWCAtIGF4KSAqIGJ4YXggKyAoUC5ZIC0gYXkpICogYnlheSkgLyAoYnhheCAqIGJ4YXggKyBieWF5ICogYnlheSk7XG5cdFx0XHRcdFx0XHRpZiAobCA+IDEpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGF4ID0gQi5YO1xuXHRcdFx0XHRcdFx0XHRheSA9IEIuWTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKGwgPiAwKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRheCArPSBieGF4ICogbDtcblx0XHRcdFx0XHRcdFx0YXkgKz0gYnlheSAqIGw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJ4YXggPSBQLlggLSBheDtcblx0XHRcdFx0XHRieWF5ID0gUC5ZIC0gYXk7XG5cdFx0XHRcdFx0ZCA9IGJ4YXggKiBieGF4ICsgYnlheSAqIGJ5YXk7XG5cdFx0XHRcdFx0aWYgKGQgPD0gdG9sZXJhbmNlU3EpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmVtW2ogKyAxXSA9IDE7XG5cdFx0XHRcdFx0XHRqKys7IC8vIHdoZW4gcmVtb3ZlZCwgdHJhbnNmZXIgdGhlIHBvaW50ZXIgdG8gdGhlIG5leHQgb25lXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGFkZCBhbGwgdW5yZW1vdmVkIHBvaW50cyB0byBwb2x5MlxuXHRcdFx0XHRwb2x5Mi5wdXNoKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0WDogcG9seVswXS5YLFxuXHRcdFx0XHRcdFk6IHBvbHlbMF0uWVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9yIChqID0gMTsgaiA8IHBsZW4gLSAxOyBqKyspXG5cdFx0XHRcdFx0aWYgKCFyZW1bal0pIHBvbHkyLnB1c2goXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0WDogcG9seVtqXS5YLFxuXHRcdFx0XHRcdFx0WTogcG9seVtqXS5ZXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdHBvbHkyLnB1c2goXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRYOiBwb2x5W3BsZW4gLSAxXS5YLFxuXHRcdFx0XHRcdFk6IHBvbHlbcGxlbiAtIDFdLllcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIGlmIHRoZSBmaXJzdCBwb2ludCB3YXMgYWRkZWQgdG8gdGhlIGVuZCwgcmVtb3ZlIGl0XG5cdFx0XHRcdGlmIChhZGRsYXN0KSBwb2x5LnBvcCgpO1xuXHRcdFx0XHQvLyBicmVhaywgaWYgdGhlcmUgd2FzIG5vdCBhbnltb3JlIHJlbW92ZWQgcG9pbnRzXG5cdFx0XHRcdGlmICghcmVtLmxlbmd0aCkgYnJlYWs7XG5cdFx0XHRcdC8vIGVsc2UgY29udGludWUgbG9vcGluZyB1c2luZyBwb2x5MiwgdG8gY2hlY2sgaWYgdGhlcmUgYXJlIHBvaW50cyB0byByZW1vdmVcblx0XHRcdFx0ZWxzZSBwb2x5ID0gcG9seTI7XG5cdFx0XHR9XG5cdFx0XHRwbGVuID0gcG9seTIubGVuZ3RoO1xuXHRcdFx0Ly8gcmVtb3ZlIGR1cGxpY2F0ZSBmcm9tIGVuZCwgaWYgbmVlZGVkXG5cdFx0XHRpZiAocG9seTJbcGxlbiAtIDFdLlggPT09IHBvbHkyWzBdLlggJiYgcG9seTJbcGxlbiAtIDFdLlkgPT09IHBvbHkyWzBdLlkpXG5cdFx0XHR7XG5cdFx0XHRcdHBvbHkyLnBvcCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvbHkyLmxlbmd0aCA+IDIpIC8vIHRvIGF2b2lkIHR3by1wb2ludC1wb2x5Z29uc1xuXHRcdFx0XHRyZXN1bHRzLnB1c2gocG9seTIpO1xuXHRcdH1cblx0XHRpZiAoIWlzUG9seWdvbnMpXG5cdFx0e1xuXHRcdFx0cmVzdWx0cyA9IHJlc3VsdHNbMF07XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgKHJlc3VsdHMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdHtcblx0XHRcdHJlc3VsdHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHRDbGlwcGVyTGliLkpTLlBlcmltZXRlck9mUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBjbG9zZWQpXG5cdHtcblx0XHRpZiAodHlwZW9mIChwYXRoKSA9PT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIDA7XG5cdFx0dmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cdFx0dmFyIHBlcmltZXRlciA9IDAuMDtcblx0XHR2YXIgcDEsIHAyLCBwMXggPSAwLjAsXG5cdFx0XHRwMXkgPSAwLjAsXG5cdFx0XHRwMnggPSAwLjAsXG5cdFx0XHRwMnkgPSAwLjA7XG5cdFx0dmFyIGogPSBwYXRoLmxlbmd0aDtcblx0XHRpZiAoaiA8IDIpIHJldHVybiAwO1xuXHRcdGlmIChjbG9zZWQpXG5cdFx0e1xuXHRcdFx0cGF0aFtqXSA9IHBhdGhbMF07XG5cdFx0XHRqKys7XG5cdFx0fVxuXHRcdHdoaWxlICgtLWopXG5cdFx0e1xuXHRcdFx0cDEgPSBwYXRoW2pdO1xuXHRcdFx0cDF4ID0gcDEuWDtcblx0XHRcdHAxeSA9IHAxLlk7XG5cdFx0XHRwMiA9IHBhdGhbaiAtIDFdO1xuXHRcdFx0cDJ4ID0gcDIuWDtcblx0XHRcdHAyeSA9IHAyLlk7XG5cdFx0XHRwZXJpbWV0ZXIgKz0gc3FydCgocDF4IC0gcDJ4KSAqIChwMXggLSBwMngpICsgKHAxeSAtIHAyeSkgKiAocDF5IC0gcDJ5KSk7XG5cdFx0fVxuXHRcdGlmIChjbG9zZWQpIHBhdGgucG9wKCk7XG5cdFx0cmV0dXJuIHBlcmltZXRlcjtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLlBlcmltZXRlck9mUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIGNsb3NlZClcblx0e1xuXHRcdHZhciBwZXJpbWV0ZXIgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspXG5cdFx0e1xuXHRcdFx0cGVyaW1ldGVyICs9IENsaXBwZXJMaWIuSlMuUGVyaW1ldGVyT2ZQYXRoKHBhdGhzW2ldLCBjbG9zZWQpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGVyaW1ldGVyO1xuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkV4UG9seWdvbnMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkV4UG9seWdvbiA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm91dGVyID0gbnVsbDtcblx0XHR0aGlzLmhvbGVzID0gbnVsbDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLkFkZE91dGVyUG9seU5vZGVUb0V4UG9seWdvbnMgPSBmdW5jdGlvbiAocG9seW5vZGUsIGV4cG9seWdvbnMpXG5cdHtcblx0XHR2YXIgZXAgPSBuZXcgQ2xpcHBlckxpYi5FeFBvbHlnb24oKTtcblx0XHRlcC5vdXRlciA9IHBvbHlub2RlLkNvbnRvdXIoKTtcblx0XHR2YXIgY2hpbGRzID0gcG9seW5vZGUuQ2hpbGRzKCk7XG5cdFx0dmFyIGlsZW4gPSBjaGlsZHMubGVuZ3RoO1xuXHRcdGVwLmhvbGVzID0gbmV3IEFycmF5KGlsZW4pO1xuXHRcdHZhciBub2RlLCBuLCBpLCBqLCBjaGlsZHMyLCBqbGVuO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0bm9kZSA9IGNoaWxkc1tpXTtcblx0XHRcdGVwLmhvbGVzW2ldID0gbm9kZS5Db250b3VyKCk7XG5cdFx0XHQvL0FkZCBvdXRlciBwb2x5Z29ucyBjb250YWluZWQgYnkgKG5lc3RlZCB3aXRoaW4pIGhvbGVzIC4uLlxuXHRcdFx0Zm9yIChqID0gMCwgY2hpbGRzMiA9IG5vZGUuQ2hpbGRzKCksIGpsZW4gPSBjaGlsZHMyLmxlbmd0aDsgaiA8IGpsZW47IGorKylcblx0XHRcdHtcblx0XHRcdFx0biA9IGNoaWxkczJbal07XG5cdFx0XHRcdENsaXBwZXJMaWIuSlMuQWRkT3V0ZXJQb2x5Tm9kZVRvRXhQb2x5Z29ucyhuLCBleHBvbHlnb25zKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZXhwb2x5Z29ucy5wdXNoKGVwKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLkV4UG9seWdvbnNUb1BhdGhzID0gZnVuY3Rpb24gKGV4cG9seWdvbnMpXG5cdHtcblx0XHR2YXIgYSwgaSwgYWxlbiwgaWxlbjtcblx0XHR2YXIgcGF0aHMgPSBuZXcgQ2xpcHBlckxpYi5QYXRocygpO1xuXHRcdGZvciAoYSA9IDAsIGFsZW4gPSBleHBvbHlnb25zLmxlbmd0aDsgYSA8IGFsZW47IGErKylcblx0XHR7XG5cdFx0XHRwYXRocy5wdXNoKGV4cG9seWdvbnNbYV0ub3V0ZXIpO1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGV4cG9seWdvbnNbYV0uaG9sZXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRwYXRocy5wdXNoKGV4cG9seWdvbnNbYV0uaG9sZXNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcGF0aHM7XG5cdH1cblx0Q2xpcHBlckxpYi5KUy5Qb2x5VHJlZVRvRXhQb2x5Z29ucyA9IGZ1bmN0aW9uIChwb2x5dHJlZSlcblx0e1xuXHRcdHZhciBleHBvbHlnb25zID0gbmV3IENsaXBwZXJMaWIuRXhQb2x5Z29ucygpO1xuXHRcdHZhciBub2RlLCBpLCBjaGlsZHMsIGlsZW47XG5cdFx0Zm9yIChpID0gMCwgY2hpbGRzID0gcG9seXRyZWUuQ2hpbGRzKCksIGlsZW4gPSBjaGlsZHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG5vZGUgPSBjaGlsZHNbaV07XG5cdFx0XHRDbGlwcGVyTGliLkpTLkFkZE91dGVyUG9seU5vZGVUb0V4UG9seWdvbnMobm9kZSwgZXhwb2x5Z29ucyk7XG5cdFx0fVxuXHRcdHJldHVybiBleHBvbHlnb25zO1xuXHR9O1xuXG59KSgpO1xuIl0sIm5hbWVzIjpbIkNsaXBwZXJMaWIiLCJ2ZXJzaW9uIiwidXNlX2xpbmVzIiwidXNlX3h5eiIsImlzTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsIndpbmRvdyIsInNlbGYiLCJuYXZpZ2F0b3JfYXBwTmFtZSIsIm5hdiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhcHBOYW1lIiwiYnJvd3NlciIsImluZGV4T2YiLCJjaHJvbWUiLCJjaHJvbWl1bSIsInNhZmFyaSIsImZpcmVmb3giLCJmaXJlZm94MTciLCJmaXJlZm94MTUiLCJmaXJlZm94MyIsIm9wZXJhIiwibXNpZTEwIiwibXNpZTkiLCJtc2llOCIsIm1zaWU3IiwibXNpZSIsIkluaGVyaXQiLCJjZSIsImNlMiIsInAiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvdG90eXBlIiwiJGJhc2VDdG9yIiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJQYXRoIiwicHVzaCIsIkFycmF5IiwiUGF0aHMiLCJQb2x5Tm9kZSIsIm1fUGFyZW50IiwibV9wb2x5Z29uIiwibV9JbmRleCIsIm1fam9pbnR5cGUiLCJtX2VuZHR5cGUiLCJtX0NoaWxkcyIsIklzT3BlbiIsIklzSG9sZU5vZGUiLCJyZXN1bHQiLCJub2RlIiwiQ2hpbGRDb3VudCIsIkNvbnRvdXIiLCJBZGRDaGlsZCIsIkNoaWxkIiwiY250IiwiR2V0TmV4dCIsIkdldE5leHRTaWJsaW5nVXAiLCJDaGlsZHMiLCJQYXJlbnQiLCJJc0hvbGUiLCJQb2x5VHJlZSIsIm1fQWxsUG9seXMiLCJjYWxsIiwiQ2xlYXIiLCJpbGVuIiwiR2V0Rmlyc3QiLCJUb3RhbCIsImEiLCJQSSIsIlBJMiIsIkZQb2ludCIsImFyZ3VtZW50cyIsImFsZW4iLCJYIiwiWSIsIloiLCJkcCIsInB0Iiwib3BfRXF1YWxpdHkiLCJiIiwib3BfSW5lcXVhbGl0eSIsIkZQb2ludDAiLCJGUG9pbnQxIiwiRlBvaW50MWRwIiwiRlBvaW50MiIsIngiLCJ5IiwieiIsIkZSZWN0IiwibGVmdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwiaXIiLCJGUmVjdDAiLCJGUmVjdDEiLCJGUmVjdDQiLCJsIiwidCIsInIiLCJDbGlwVHlwZSIsImN0SW50ZXJzZWN0aW9uIiwiY3RVbmlvbiIsImN0RGlmZmVyZW5jZSIsImN0WG9yIiwiUG9seVR5cGUiLCJwdFN1YmplY3QiLCJwdENsaXAiLCJQb2x5RmlsbFR5cGUiLCJwZnRFdmVuT2RkIiwicGZ0Tm9uWmVybyIsInBmdFBvc2l0aXZlIiwicGZ0TmVnYXRpdmUiLCJKb2luVHlwZSIsImp0U3F1YXJlIiwianRSb3VuZCIsImp0TWl0ZXIiLCJFbmRUeXBlIiwiZXRPcGVuU3F1YXJlIiwiZXRPcGVuUm91bmQiLCJldE9wZW5CdXR0IiwiZXRDbG9zZWRMaW5lIiwiZXRDbG9zZWRQb2x5Z29uIiwiRWRnZVNpZGUiLCJlc0xlZnQiLCJlc1JpZ2h0IiwiRGlyZWN0aW9uIiwiZFJpZ2h0VG9MZWZ0IiwiZExlZnRUb1JpZ2h0IiwiVEVkZ2UiLCJCb3QiLCJDdXJyIiwiVG9wIiwiRGVsdGEiLCJEeCIsIlBvbHlUeXAiLCJTaWRlIiwiV2luZERlbHRhIiwiV2luZENudCIsIldpbmRDbnQyIiwiT3V0SWR4IiwiTmV4dCIsIlByZXYiLCJOZXh0SW5MTUwiLCJOZXh0SW5BRUwiLCJQcmV2SW5BRUwiLCJOZXh0SW5TRUwiLCJQcmV2SW5TRUwiLCJJbnRlcnNlY3ROb2RlIiwiRWRnZTEiLCJFZGdlMiIsIlB0IiwiTXlJbnRlcnNlY3ROb2RlU29ydCIsIkNvbXBhcmUiLCJub2RlMSIsIm5vZGUyIiwiTG9jYWxNaW5pbWEiLCJMZWZ0Qm91bmQiLCJSaWdodEJvdW5kIiwiU2NhbmJlYW0iLCJNYXhpbWEiLCJPdXRSZWMiLCJJZHgiLCJGaXJzdExlZnQiLCJQdHMiLCJCb3R0b21QdCIsIk91dFB0IiwiSm9pbiIsIk91dFB0MSIsIk91dFB0MiIsIk9mZlB0IiwiQ2xpcHBlckJhc2UiLCJtX01pbmltYUxpc3QiLCJtX0N1cnJlbnRMTSIsIm1fZWRnZXMiLCJtX0hhc09wZW5QYXRocyIsIlByZXNlcnZlQ29sbGluZWFyIiwibV9TY2FuYmVhbSIsIm1fUG9seU91dHMiLCJtX0FjdGl2ZUVkZ2VzIiwiaG9yaXpvbnRhbCIsIlNraXAiLCJVbmFzc2lnbmVkIiwidG9sZXJhbmNlIiwibWF4VmFsdWUiLCJNYXRoIiwic3FydCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIm1pblZhbHVlIiwiTUlOX1ZBTFVFIiwibmVhcl96ZXJvIiwidmFsIiwiSXNIb3Jpem9udGFsIiwiZSIsIlBvaW50SXNWZXJ0ZXgiLCJwcCIsInBwMiIsIlBvaW50T25MaW5lU2VnbWVudCIsImxpbmVQdDEiLCJsaW5lUHQyIiwiUG9pbnRPblBvbHlnb24iLCJTbG9wZXNFcXVhbCIsImUxIiwiZTIiLCJwdDEiLCJwdDIiLCJwdDMiLCJwdDQiLCJTbG9wZXNFcXVhbDMiLCJTbG9wZXNFcXVhbDQiLCJTbG9wZXNFcXVhbDUiLCJEaXNwb3NlTG9jYWxNaW5pbWFMaXN0IiwiaiIsImpsZW4iLCJ0bXBMbSIsIlJhbmdlVGVzdCIsIkVycm9yIiwiSW5pdEVkZ2UiLCJlTmV4dCIsImVQcmV2IiwiSW5pdEVkZ2UyIiwicG9seVR5cGUiLCJTZXREeCIsIkZpbmROZXh0TG9jTWluIiwiRSIsIkUyIiwiUHJvY2Vzc0JvdW5kIiwiTGVmdEJvdW5kSXNGb3J3YXJkIiwiRVN0YXJ0IiwiUmVzdWx0IiwiSG9yeiIsImxvY01pbiIsIkluc2VydExvY2FsTWluaW1hIiwiUmV2ZXJzZUhvcml6b250YWwiLCJBZGRQYXRoIiwicGciLCJDbG9zZWQiLCJoaWdoSSIsImVkZ2VzIiwiSXNGbGF0IiwiZVN0YXJ0IiwiZUxvb3BTdG9wIiwiUmVtb3ZlRWRnZSIsIlB0MklzQmV0d2VlblB0MUFuZFB0MyIsImxlZnRCb3VuZElzRm9yd2FyZCIsIkVNaW4iLCJBZGRQYXRocyIsInBwZyIsImNsb3NlZCIsIm5ld0xtIiwiUG9wTG9jYWxNaW5pbWEiLCJjdXJyZW50IiwidiIsInRtcCIsIlJlc2V0IiwibG0iLCJJbnNlcnRTY2FuYmVhbSIsIm5ld1NiIiwic2IyIiwibmV3U2IxIiwiUG9wU2NhbmJlYW0iLCJMb2NhbE1pbmltYVBlbmRpbmciLCJDcmVhdGVPdXRSZWMiLCJEaXNwb3NlT3V0UmVjIiwiaW5kZXgiLCJvdXRSZWMiLCJVcGRhdGVFZGdlSW50b0FFTCIsIkFlbFByZXYiLCJBZWxOZXh0IiwiU3dhcFBvc2l0aW9uc0luQUVMIiwiZWRnZTEiLCJlZGdlMiIsIm5leHQiLCJwcmV2IiwibmV4dDEiLCJwcmV2MSIsIm5leHQyIiwicHJldjIiLCJEZWxldGVGcm9tQUVMIiwiQ2xpcHBlciIsIkluaXRPcHRpb25zIiwibV9DbGlwVHlwZSIsIm1fTWF4aW1hIiwibV9Tb3J0ZWRFZGdlcyIsIm1fSW50ZXJzZWN0TGlzdCIsIm1fSW50ZXJzZWN0Tm9kZUNvbXBhcmVyIiwibV9FeGVjdXRlTG9ja2VkIiwibV9DbGlwRmlsbFR5cGUiLCJtX1N1YmpGaWxsVHlwZSIsIm1fSm9pbnMiLCJtX0dob3N0Sm9pbnMiLCJtX1VzaW5nUG9seVRyZWUiLCJSZXZlcnNlU29sdXRpb24iLCJTdHJpY3RseVNpbXBsZSIsIlpGaWxsRnVuY3Rpb24iLCJpb1JldmVyc2VTb2x1dGlvbiIsImlvU3RyaWN0bHlTaW1wbGUiLCJpb1ByZXNlcnZlQ29sbGluZWFyIiwiRGlzcG9zZUFsbFBvbHlQdHMiLCJJbnNlcnRNYXhpbWEiLCJuZXdNYXgiLCJtIiwiRXhlY3V0ZSIsImlzcG9seXRyZWUiLCJjbGlwVHlwZSIsInNvbHV0aW9uIiwic3ViakZpbGxUeXBlIiwiY2xpcEZpbGxUeXBlIiwic3VjY2VlZGVkIiwiRXhlY3V0ZUludGVybmFsIiwiQnVpbGRSZXN1bHQiLCJwb2x5dHJlZSIsIkJ1aWxkUmVzdWx0MiIsIkZpeEhvbGVMaW5rYWdlIiwib3JmbCIsImJvdFkiLCJ0b3BZIiwiSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMIiwiUHJvY2Vzc0hvcml6b250YWxzIiwiUHJvY2Vzc0ludGVyc2VjdGlvbnMiLCJQcm9jZXNzRWRnZXNBdFRvcE9mU2NhbmJlYW0iLCJBcmVhJDEiLCJSZXZlcnNlUG9seVB0TGlua3MiLCJKb2luQ29tbW9uRWRnZXMiLCJGaXh1cE91dFBvbHlsaW5lIiwiRml4dXBPdXRQb2x5Z29uIiwiRG9TaW1wbGVQb2x5Z29ucyIsIkFkZEpvaW4iLCJPcDEiLCJPcDIiLCJBZGRHaG9zdEpvaW4iLCJPcCIsIlNldFoiLCJsYiIsInJiIiwiSW5zZXJ0RWRnZUludG9BRUwiLCJTZXRXaW5kaW5nQ291bnQiLCJJc0NvbnRyaWJ1dGluZyIsIkFkZE91dFB0IiwiQWRkTG9jYWxNaW5Qb2x5IiwiQWRkRWRnZVRvU0VMIiwiSG9yelNlZ21lbnRzT3ZlcmxhcCIsIkludGVyc2VjdEVkZ2VzIiwiZWRnZSIsInN0YXJ0RWRnZSIsIkUySW5zZXJ0c0JlZm9yZUUxIiwiVG9wWCIsIklzRXZlbk9kZEZpbGxUeXBlIiwiSXNFdmVuT2RkQWx0RmlsbFR5cGUiLCJwZnQiLCJwZnQyIiwiYWJzIiwiSW5zaWRlIiwiUG9wRWRnZUZyb21TRUwiLCJvbGRFIiwiQ29weUFFTFRvU0VMIiwiU3dhcFBvc2l0aW9uc0luU0VMIiwiQWRkTG9jYWxNYXhQb2x5IiwiQXBwZW5kUG9seWdvbiIsInByZXZFIiwieFByZXYiLCJ4RSIsIm91dFB0IiwibmV3T3AiLCJTZXRIb2xlU3RhdGUiLCJvcCIsIlRvRnJvbnQiLCJHZXRMYXN0T3V0UHQiLCJTd2FwUG9pbnRzIiwiVmFsdWUiLCJzZWcxYSIsInNlZzFiIiwic2VnMmEiLCJzZWcyYiIsImVUbXAiLCJHZXREeCIsIkZpcnN0SXNCb3R0b21QdCIsImJ0bVB0MSIsImJ0bVB0MiIsImR4MXAiLCJkeDFuIiwiZHgycCIsImR4Mm4iLCJtYXgiLCJtaW4iLCJBcmVhIiwiR2V0Qm90dG9tUHQiLCJkdXBzIiwiR2V0TG93ZXJtb3N0UmVjIiwib3V0UmVjMSIsIm91dFJlYzIiLCJiUHQxIiwiYlB0MiIsIk91dFJlYzFSaWdodE9mT3V0UmVjMiIsIkdldE91dFJlYyIsImlkeCIsIm91dHJlYyIsImhvbGVTdGF0ZVJlYyIsInAxX2xmdCIsInAxX3J0IiwicDJfbGZ0IiwicDJfcnQiLCJPS0lkeCIsIk9ic29sZXRlSWR4IiwicHAxIiwiU3dhcFNpZGVzIiwic2lkZSIsIlN3YXBQb2x5SW5kZXhlcyIsIm91dElkeCIsImUxQ29udHJpYnV0aW5nIiwiZTJDb250cmlidXRpbmciLCJvbGRFMVdpbmRDbnQiLCJlMUZpbGxUeXBlIiwiZTJGaWxsVHlwZSIsImUxRmlsbFR5cGUyIiwiZTJGaWxsVHlwZTIiLCJlMVdjIiwiZTJXYyIsImUxV2MyIiwiZTJXYzIiLCJEZWxldGVGcm9tU0VMIiwiU2VsUHJldiIsIlNlbE5leHQiLCJob3J6RWRnZSIsIlByb2Nlc3NIb3Jpem9udGFsIiwiR2V0SG9yekRpcmVjdGlvbiIsIkhvcnpFZGdlIiwiJHZhciIsIkxlZnQiLCJSaWdodCIsIkRpciIsImRpciIsImhvcnpMZWZ0IiwiaG9yelJpZ2h0IiwiZUxhc3RIb3J6IiwiZU1heFBhaXIiLCJHZXRNYXhpbWFQYWlyIiwiY3Vyck1heCIsIm9wMSIsIklzTGFzdEhvcnoiLCJHZXROZXh0SW5BRUwiLCJlTmV4dEhvcnoiLCJvcDIiLCJJc01pbmltYSIsIklzTWF4aW1hIiwiSXNJbnRlcm1lZGlhdGUiLCJHZXRNYXhpbWFQYWlyRXgiLCJCdWlsZEludGVyc2VjdExpc3QiLCJGaXh1cEludGVyc2VjdGlvbk9yZGVyIiwiUHJvY2Vzc0ludGVyc2VjdExpc3QiLCIkJGUyIiwiaXNNb2RpZmllZCIsIkludGVyc2VjdFBvaW50IiwibmV3Tm9kZSIsIkVkZ2VzQWRqYWNlbnQiLCJpbm9kZSIsIkludGVyc2VjdE5vZGVTb3J0Iiwic29ydCIsImlOb2RlIiwiY3VycmVudFkiLCJpcCIsImIxIiwiYjIiLCJxIiwiSXNNYXhpbWFFZGdlIiwiRG9NYXhpbWEiLCJlUHJldjIiLCJSZXZlcnNlUGF0aHMiLCJwb2x5cyIsImxlbiIsInJldmVyc2UiLCJPcmllbnRhdGlvbiIsInBvbHkiLCJQb2ludENvdW50IiwicHRzIiwicG9seWciLCJwbiIsImxhc3RQUCIsInRtcFBQIiwibGFzdE9LIiwicHJlc2VydmVDb2wiLCJEdXBPdXRQdCIsIkluc2VydEFmdGVyIiwiR2V0T3ZlcmxhcCIsImExIiwiYTIiLCIkdmFsIiwiSm9pbkhvcnoiLCJvcDFiIiwib3AyYiIsIkRpc2NhcmRMZWZ0IiwiRGlyMSIsIkRpcjIiLCJKb2luUG9pbnRzIiwiaXNIb3Jpem9udGFsIiwicmV2ZXJzZTEiLCJyZXZlcnNlMiIsIkRpc2NhcmRMZWZ0U2lkZSIsIlJldmVyc2UxIiwiUmV2ZXJzZTIiLCJHZXRCb3VuZHMiLCJwYXRocyIsIkdldEJvdW5kczIiLCJvcHMiLCJvcFN0YXJ0IiwiUG9pbnRJblBvbHlnb24iLCJwYXRoIiwiaXBOZXh0IiwiZCIsInN0YXJ0T3AiLCJwdHgiLCJwdHkiLCJwb2x5MHgiLCJwb2x5MHkiLCJwb2x5MXgiLCJwb2x5MXkiLCJQb2x5MkNvbnRhaW5zUG9seTEiLCJvdXRQdDEiLCJvdXRQdDIiLCJyZXMiLCJGaXh1cEZpcnN0TGVmdHMxIiwiT2xkT3V0UmVjIiwiTmV3T3V0UmVjIiwiZmlyc3RMZWZ0IiwiUGFyc2VGaXJzdExlZnQiLCJGaXh1cEZpcnN0TGVmdHMyIiwiaW5uZXJPdXRSZWMiLCJvdXRlck91dFJlYyIsIkZpeHVwRmlyc3RMZWZ0czMiLCJqb2luIiwiVXBkYXRlT3V0UHRJZHhzIiwib3AzIiwib3A0Iiwib3V0cmVjMiIsImlzQXJyYXkiLCJvcEZpcnN0IiwiU2ltcGxpZnlQb2x5Z29uIiwiZmlsbFR5cGUiLCJjIiwiU2ltcGxpZnlQb2x5Z29ucyIsIkRpc3RhbmNlU3FyZCIsImR4IiwiZHkiLCJEaXN0YW5jZUZyb21MaW5lU3FyZCIsImxuMSIsImxuMiIsIkEiLCJCIiwiQyIsIlNsb3Blc05lYXJDb2xsaW5lYXIiLCJkaXN0U3FyZCIsIlBvaW50c0FyZUNsb3NlIiwiRXhjbHVkZU9wIiwiQ2xlYW5Qb2x5Z29uIiwiZGlzdGFuY2UiLCJvdXRQdHMiLCJDbGVhblBvbHlnb25zIiwiTWlua293c2tpIiwicGF0dGVybiIsIklzU3VtIiwiSXNDbG9zZWQiLCJkZWx0YSIsInBvbHlDbnQiLCJwYXRoQ250IiwicXVhZHMiLCJxdWFkIiwiTWlua293c2tpU3VtIiwicGF0aF9vcl9wYXRocyIsInBhdGhJc0Nsb3NlZCIsIlRyYW5zbGF0ZVBhdGgiLCJvdXRQYXRoIiwiTWlua293c2tpRGlmZiIsInBvbHkxIiwicG9seTIiLCJQb2x5VHJlZVRvUGF0aHMiLCJBZGRQb2x5Tm9kZVRvUGF0aHMiLCJOb2RlVHlwZSIsIm50QW55IiwicG9seW5vZGUiLCJudCIsIm1hdGNoIiwibnRPcGVuIiwibnRDbG9zZWQiLCIkaTMiLCIkdDMiLCIkbDMiLCJPcGVuUGF0aHNGcm9tUG9seVRyZWUiLCJDbG9zZWRQYXRoc0Zyb21Qb2x5VHJlZSIsIkNsaXBwZXJPZmZzZXQiLCJtaXRlckxpbWl0IiwiYXJjVG9sZXJhbmNlIiwiZGVmX2FyY190b2xlcmFuY2UiLCJtX2Rlc3RQb2x5cyIsIm1fc3JjUG9seSIsIm1fZGVzdFBvbHkiLCJtX25vcm1hbHMiLCJtX2RlbHRhIiwibV9zaW5BIiwibV9zaW4iLCJtX2NvcyIsIm1fbWl0ZXJMaW0iLCJtX1N0ZXBzUGVyUmFkIiwibV9sb3dlc3QiLCJtX3BvbHlOb2RlcyIsIk1pdGVyTGltaXQiLCJBcmNUb2xlcmFuY2UiLCJ0d29fcGkiLCJqb2luVHlwZSIsImVuZFR5cGUiLCJrIiwiRml4T3JpZW50YXRpb25zIiwiR2V0VW5pdE5vcm1hbCIsImYiLCJEb09mZnNldCIsInN0ZXBzIiwiYWNvcyIsInNpbiIsImNvcyIsIlgyIiwiT2Zmc2V0UG9pbnQiLCJuIiwiRG9TcXVhcmUiLCJEb1JvdW5kIiwiY2xwciIsIm91dGVyIiwic3BsaWNlIiwib3V0ZXJOb2RlIiwiam9pbnR5cGUiLCJEb01pdGVyIiwidGFuIiwiYXRhbjIiLCJyb3VuZCIsIm1lc3NhZ2UiLCJlcnIiLCJhbGVydCIsIkpTIiwiQXJlYU9mUG9seWdvbiIsIkFyZWFPZlBvbHlnb25zIiwiYXJlYSIsIkJvdW5kc09mUGF0aCIsIkJvdW5kc09mUGF0aHMiLCJib3VuZHMiLCJDbGVhbiIsInBvbHlnb24iLCJpc1BvbHlnb25zIiwiQ2xvbmUiLCJrX2xlbmd0aCIsInJlc3VsdHMiLCJwbGVuIiwiTGlnaHRlbiIsIlAiLCJyZW0iLCJhZGRsYXN0IiwiYnhheCIsImJ5YXkiLCJheCIsImF5IiwidG9sZXJhbmNlU3EiLCJwb3AiLCJQZXJpbWV0ZXJPZlBhdGgiLCJwZXJpbWV0ZXIiLCJwMSIsInAyIiwicDF4IiwicDF5IiwicDJ4IiwicDJ5IiwiUGVyaW1ldGVyT2ZQYXRocyIsIkV4UG9seWdvbnMiLCJFeFBvbHlnb24iLCJob2xlcyIsIkFkZE91dGVyUG9seU5vZGVUb0V4UG9seWdvbnMiLCJleHBvbHlnb25zIiwiZXAiLCJjaGlsZHMiLCJjaGlsZHMyIiwiRXhQb2x5Z29uc1RvUGF0aHMiLCJQb2x5VHJlZVRvRXhQb2x5Z29ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/clipper-lib-fpoint/clipper.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/earcut/src/earcut.js":
/*!***************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/earcut/src/earcut.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = earcut;\nmodule.exports[\"default\"] = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n  dim = dim || 2;\n\n  var hasHoles = holeIndices && holeIndices.length,\n    outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n    outerNode = linkedList(data, 0, outerLen, dim, true),\n    triangles = [];\n\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n  var minX, minY, maxX, maxY, x, y, invSize;\n\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 1 / invSize : 0;\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n  return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n  } else {\n    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n\n  var p = start,\n    again;\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return;\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n  var stop = ear,\n    prev,next;\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim);\n      triangles.push(ear.i / dim);\n      triangles.push(next.i / dim);\n\n      removeNode(ear);\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next;\n      stop = next.next;\n\n      continue;\n    }\n\n    ear = next;\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n\n      break;\n    }\n  }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n  var a = ear.prev,\n    b = ear,\n    c = ear.next;\n\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  var p = ear.next.next;\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n    area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n  var a = ear.prev,\n    b = ear,\n    c = ear.next;\n\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  // triangle bbox; min & max are calculated like this for speed\n  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n    minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n    maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n    maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;\n\n  // z-order range for the current triangle bbox;\n  var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n    maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n  var p = ear.prevZ,\n    n = ear.nextZ;\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next &&\n    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n    area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n\n    if (n !== ear.prev && n !== ear.next &&\n    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n    area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next &&\n    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n    area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (n !== ear.prev && n !== ear.next &&\n    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n    area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n  do {\n    var a = p.prev,\n      b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n      triangles.push(a.i / dim);\n      triangles.push(p.i / dim);\n      triangles.push(b.i / dim);\n\n      // remove two nodes involved\n      removeNode(p);\n      removeNode(p.next);\n\n      p = start = b;\n    }\n    p = p.next;\n  } while (p !== start);\n\n  return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n  do {\n    var b = a.next.next;\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b);\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next);\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize);\n        earcutLinked(c, triangles, dim, minX, minY, invSize);\n        return;\n      }\n      b = b.next;\n    }\n    a = a.next;\n  } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n    i,len,start,end,list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX);\n\n  // process holes from left to right\n  for (i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode);\n    outerNode = filterPoints(outerNode, outerNode.next);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n  var bridge = findHoleBridge(hole, outerNode);\n  if (!bridge) {\n    return outerNode;\n  }\n\n  var bridgeReverse = splitPolygon(bridge, hole);\n\n  // filter collinear points around the cuts\n  var filteredBridge = filterPoints(bridge, bridge.next);\n  filterPoints(bridgeReverse, bridgeReverse.next);\n\n  // Check if input node was removed by the filtering\n  return outerNode === bridge ? filteredBridge : outerNode;\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n    hx = hole.x,\n    hy = hole.y,\n    qx = -Infinity,\n    m;\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n      if (x <= hx && x > qx) {\n        qx = x;\n        if (x === hx) {\n          if (hy === p.y) return p;\n          if (hy === p.next.y) return p.next;\n        }\n        m = p.x < p.next.x ? p : p.next;\n      }\n    }\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null;\n\n  if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n    mx = m.x,\n    my = m.y,\n    tanMin = Infinity,\n    tan;\n\n  p = m;\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x &&\n    pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (\n      tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  } while (p !== stop);\n\n  return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n  var p = start;\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n\n  sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n  var i,p,q,e,tail,numMerges,pSize,qSize,\n    inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else\n        list = e;\n\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n\n  } while (numMerges > 1);\n\n  return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) * invSize;\n  y = 32767 * (y - minY) * invSize;\n\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n\n  return x | y << 1;\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n  var p = start,\n    leftmost = start;\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n  (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n  (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n  var o1 = sign(area(p1, q1, p2));\n  var o2 = sign(area(p1, q1, q2));\n  var o3 = sign(area(p2, q2, p1));\n  var o4 = sign(area(p2, q2, q1));\n\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n  var p = a;\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n    intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ?\n  area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n  area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n  var p = a,\n    inside = false,\n    px = (a.x + b.x) / 2,\n    py = (a.y + b.y) / 2;\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y &&\n    px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)\n    inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n    b2 = new Node(b.i, b.x, b.y),\n    an = a.next,\n    bp = b.prev;\n\n  a.next = b;\n  b.prev = a;\n\n  a2.next = an;\n  an.prev = a2;\n\n  b2.next = a2;\n  a2.prev = b2;\n\n  bp.next = b2;\n  b2.prev = bp;\n\n  return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertex index in coordinates array\n  this.i = i;\n\n  // vertex coordinates\n  this.x = x;\n  this.y = y;\n\n  // previous and next vertex nodes in a polygon ring\n  this.prev = null;\n  this.next = null;\n\n  // z-order curve value\n  this.z = null;\n\n  // previous and next nodes in z-order\n  this.prevZ = null;\n  this.nextZ = null;\n\n  // indicates whether this is a steiner point\n  this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs(\n      (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n      (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 :\n  Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n  return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n  var dim = data[0][0].length,\n    result = { vertices: [], holes: [], dimensions: dim },\n    holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/earcut/src/earcut.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/advancingfront.js":
/*!*************************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/advancingfront.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:11 */\n\n\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\n\n// -------------------------------------------------------------------------Node\n\n/**\n * Advancing front node\n * @constructor\n * @private\n * @struct\n * @param {!XY} p - Point\n * @param {Triangle=} t triangle (optional)\n */\nvar Node = function (p, t) {\n  /** @type {XY} */\n  this.point = p;\n\n  /** @type {Triangle|null} */\n  this.triangle = t || null;\n\n  /** @type {Node|null} */\n  this.next = null;\n  /** @type {Node|null} */\n  this.prev = null;\n\n  /** @type {number} */\n  this.value = p.x;\n};\n\n// ---------------------------------------------------------------AdvancingFront\n/**\n * @constructor\n * @private\n * @struct\n * @param {Node} head\n * @param {Node} tail\n */\nvar AdvancingFront = function (head, tail) {\n  /** @type {Node} */\n  this.head_ = head;\n  /** @type {Node} */\n  this.tail_ = tail;\n  /** @type {Node} */\n  this.search_node_ = head;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.head = function () {\n  return this.head_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setHead = function (node) {\n  this.head_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.tail = function () {\n  return this.tail_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setTail = function (node) {\n  this.tail_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.search = function () {\n  return this.search_node_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setSearch = function (node) {\n  this.search_node_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.findSearchNode = function /*x*/ () {\n  // TODO: implement BST index\n  return this.search_node_;\n};\n\n/**\n * @param {number} x value\n * @return {Node}\n */\nAdvancingFront.prototype.locateNode = function (x) {\n  var node = this.search_node_;\n\n  /* jshint boss:true */\n  if (x < node.value) {\n    while (node = node.prev) {\n      if (x >= node.value) {\n        this.search_node_ = node;\n        return node;\n      }\n    }\n  } else {\n    while (node = node.next) {\n      if (x < node.value) {\n        this.search_node_ = node.prev;\n        return node.prev;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * @param {!XY} point - Point\n * @return {Node}\n */\nAdvancingFront.prototype.locatePoint = function (point) {\n  var px = point.x;\n  var node = this.findSearchNode(px);\n  var nx = node.point.x;\n\n  if (px === nx) {\n    // Here we are comparing point references, not values\n    if (point !== node.point) {\n      // We might have two nodes with same x value for a short time\n      if (point === node.prev.point) {\n        node = node.prev;\n      } else if (point === node.next.point) {\n        node = node.next;\n      } else {\n        throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');\n      }\n    }\n  } else if (px < nx) {\n    /* jshint boss:true */\n    while (node = node.prev) {\n      if (point === node.point) {\n        break;\n      }\n    }\n  } else {\n    while (node = node.next) {\n      if (point === node.point) {\n        break;\n      }\n    }\n  }\n\n  if (node) {\n    this.search_node_ = node;\n  }\n  return node;\n};\n\n\n// ----------------------------------------------------------------------Exports\n\nmodule.exports = AdvancingFront;\nmodule.exports.Node = Node;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvYWR2YW5jaW5nZnJvbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFYTs7O0FBR2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxJQUFJLEdBQUcsU0FBQUEsQ0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDdEI7RUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR0YsQ0FBQzs7RUFFZDtFQUNBLElBQUksQ0FBQ0csUUFBUSxHQUFHRixDQUFDLElBQUksSUFBSTs7RUFFekI7RUFDQSxJQUFJLENBQUNHLElBQUksR0FBRyxJQUFJO0VBQ2hCO0VBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSTs7RUFFaEI7RUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR04sQ0FBQyxDQUFDTyxDQUFDO0FBQ3BCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLGNBQWMsR0FBRyxTQUFBQSxDQUFTQyxJQUFJLEVBQUVDLElBQUksRUFBRTtFQUN0QztFQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFHRixJQUFJO0VBQ2pCO0VBQ0EsSUFBSSxDQUFDRyxLQUFLLEdBQUdGLElBQUk7RUFDakI7RUFDQSxJQUFJLENBQUNHLFlBQVksR0FBR0osSUFBSTtBQUM1QixDQUFDOztBQUVEO0FBQ0FELGNBQWMsQ0FBQ00sU0FBUyxDQUFDTCxJQUFJLEdBQUcsWUFBVztFQUN2QyxPQUFPLElBQUksQ0FBQ0UsS0FBSztBQUNyQixDQUFDOztBQUVEO0FBQ0FILGNBQWMsQ0FBQ00sU0FBUyxDQUFDQyxPQUFPLEdBQUcsVUFBU0MsSUFBSSxFQUFFO0VBQzlD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LENBQUNaLElBQUksRUFBRTtNQUNyQixJQUFJRixLQUFLLEtBQUtjLElBQUksQ0FBQ2QsS0FBSyxFQUFFO1FBQ3RCO01BQ0o7SUFDSjtFQUNKOztFQUVBLElBQUljLElBQUksRUFBRTtJQUNOLElBQUksQ0FBQ0gsWUFBWSxHQUFHRyxJQUFJO0VBQzVCO0VBQ0EsT0FBT0EsSUFBSTtBQUNmLENBQUM7OztBQUdEOztBQUVBVSxNQUFNLENBQUNDLE9BQU8sR0FBR25CLGNBQWM7QUFDL0JrQixtQkFBbUIsR0FBRzNCLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9Db21wR2VvbS9ub2RlX21vZHVsZXMvcG9seTJ0cmkvc3JjL2FkdmFuY2luZ2Zyb250LmpzPzQ0MDkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFBvbHkyVHJpIENvcHlyaWdodCAoYykgMjAwOS0yMDE0LCBQb2x5MlRyaSBDb250cmlidXRvcnNcbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9wb2x5MnRyaS9cbiAqIFxuICogcG9seTJ0cmkuanMgKEphdmFTY3JpcHQgcG9ydCkgKGMpIDIwMDktMjAxNCwgUG9seTJUcmkgQ29udHJpYnV0b3JzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcjNtaS9wb2x5MnRyaS5qc1xuICogXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgMy1jbGF1c2UgQlNEIExpY2Vuc2UsIHNlZSBMSUNFTlNFLnR4dFxuICovXG5cbi8qIGpzaGludCBtYXhjb21wbGV4aXR5OjExICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qXG4gKiBOb3RlXG4gKiA9PT09XG4gKiB0aGUgc3RydWN0dXJlIG9mIHRoaXMgSmF2YVNjcmlwdCB2ZXJzaW9uIG9mIHBvbHkydHJpIGludGVudGlvbmFsbHkgZm9sbG93c1xuICogYXMgY2xvc2VseSBhcyBwb3NzaWJsZSB0aGUgc3RydWN0dXJlIG9mIHRoZSByZWZlcmVuY2UgQysrIHZlcnNpb24sIHRvIG1ha2UgaXQgXG4gKiBlYXNpZXIgdG8ga2VlcCB0aGUgMiB2ZXJzaW9ucyBpbiBzeW5jLlxuICovXG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU5vZGVcblxuLyoqXG4gKiBBZHZhbmNpbmcgZnJvbnQgbm9kZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICogQHN0cnVjdFxuICogQHBhcmFtIHshWFl9IHAgLSBQb2ludFxuICogQHBhcmFtIHtUcmlhbmdsZT19IHQgdHJpYW5nbGUgKG9wdGlvbmFsKVxuICovXG52YXIgTm9kZSA9IGZ1bmN0aW9uKHAsIHQpIHtcbiAgICAvKiogQHR5cGUge1hZfSAqL1xuICAgIHRoaXMucG9pbnQgPSBwO1xuXG4gICAgLyoqIEB0eXBlIHtUcmlhbmdsZXxudWxsfSAqL1xuICAgIHRoaXMudHJpYW5nbGUgPSB0IHx8IG51bGw7XG5cbiAgICAvKiogQHR5cGUge05vZGV8bnVsbH0gKi9cbiAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7Tm9kZXxudWxsfSAqL1xuICAgIHRoaXMucHJldiA9IG51bGw7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICB0aGlzLnZhbHVlID0gcC54O1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQWR2YW5jaW5nRnJvbnRcbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICogQHN0cnVjdFxuICogQHBhcmFtIHtOb2RlfSBoZWFkXG4gKiBAcGFyYW0ge05vZGV9IHRhaWxcbiAqL1xudmFyIEFkdmFuY2luZ0Zyb250ID0gZnVuY3Rpb24oaGVhZCwgdGFpbCkge1xuICAgIC8qKiBAdHlwZSB7Tm9kZX0gKi9cbiAgICB0aGlzLmhlYWRfID0gaGVhZDtcbiAgICAvKiogQHR5cGUge05vZGV9ICovXG4gICAgdGhpcy50YWlsXyA9IHRhaWw7XG4gICAgLyoqIEB0eXBlIHtOb2RlfSAqL1xuICAgIHRoaXMuc2VhcmNoX25vZGVfID0gaGVhZDtcbn07XG5cbi8qKiBAcmV0dXJuIHtOb2RlfSAqL1xuQWR2YW5jaW5nRnJvbnQucHJvdG90eXBlLmhlYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5oZWFkXztcbn07XG5cbi8qKiBAcGFyYW0ge05vZGV9IG5vZGUgKi9cbkFkdmFuY2luZ0Zyb250LnByb3RvdHlwZS5zZXRIZWFkID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRoaXMuaGVhZF8gPSBub2RlO1xufTtcblxuLyoqIEByZXR1cm4ge05vZGV9ICovXG5BZHZhbmNpbmdGcm9udC5wcm90b3R5cGUudGFpbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRhaWxfO1xufTtcblxuLyoqIEBwYXJhbSB7Tm9kZX0gbm9kZSAqL1xuQWR2YW5jaW5nRnJvbnQucHJvdG90eXBlLnNldFRhaWwgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgdGhpcy50YWlsXyA9IG5vZGU7XG59O1xuXG4vKiogQHJldHVybiB7Tm9kZX0gKi9cbkFkdmFuY2luZ0Zyb250LnByb3RvdHlwZS5zZWFyY2ggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hfbm9kZV87XG59O1xuXG4vKiogQHBhcmFtIHtOb2RlfSBub2RlICovXG5BZHZhbmNpbmdGcm9udC5wcm90b3R5cGUuc2V0U2VhcmNoID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHRoaXMuc2VhcmNoX25vZGVfID0gbm9kZTtcbn07XG5cbi8qKiBAcmV0dXJuIHtOb2RlfSAqL1xuQWR2YW5jaW5nRnJvbnQucHJvdG90eXBlLmZpbmRTZWFyY2hOb2RlID0gZnVuY3Rpb24oLyp4Ki8pIHtcbiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgQlNUIGluZGV4XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoX25vZGVfO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0geCB2YWx1ZVxuICogQHJldHVybiB7Tm9kZX1cbiAqL1xuQWR2YW5jaW5nRnJvbnQucHJvdG90eXBlLmxvY2F0ZU5vZGUgPSBmdW5jdGlvbih4KSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnNlYXJjaF9ub2RlXztcblxuICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICBpZiAoeCA8IG5vZGUudmFsdWUpIHtcbiAgICAgICAgd2hpbGUgKG5vZGUgPSBub2RlLnByZXYpIHtcbiAgICAgICAgICAgIGlmICh4ID49IG5vZGUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaF9ub2RlXyA9IG5vZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAobm9kZSA9IG5vZGUubmV4dCkge1xuICAgICAgICAgICAgaWYgKHggPCBub2RlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hfbm9kZV8gPSBub2RlLnByZXY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUucHJldjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHshWFl9IHBvaW50IC0gUG9pbnRcbiAqIEByZXR1cm4ge05vZGV9XG4gKi9cbkFkdmFuY2luZ0Zyb250LnByb3RvdHlwZS5sb2NhdGVQb2ludCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgdmFyIHB4ID0gcG9pbnQueDtcbiAgICB2YXIgbm9kZSA9IHRoaXMuZmluZFNlYXJjaE5vZGUocHgpO1xuICAgIHZhciBueCA9IG5vZGUucG9pbnQueDtcblxuICAgIGlmIChweCA9PT0gbngpIHtcbiAgICAgICAgLy8gSGVyZSB3ZSBhcmUgY29tcGFyaW5nIHBvaW50IHJlZmVyZW5jZXMsIG5vdCB2YWx1ZXNcbiAgICAgICAgaWYgKHBvaW50ICE9PSBub2RlLnBvaW50KSB7XG4gICAgICAgICAgICAvLyBXZSBtaWdodCBoYXZlIHR3byBub2RlcyB3aXRoIHNhbWUgeCB2YWx1ZSBmb3IgYSBzaG9ydCB0aW1lXG4gICAgICAgICAgICBpZiAocG9pbnQgPT09IG5vZGUucHJldi5wb2ludCkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnByZXY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50ID09PSBub2RlLm5leHQucG9pbnQpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHkydHJpIEludmFsaWQgQWR2YW5jaW5nRnJvbnQubG9jYXRlUG9pbnQoKSBjYWxsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHB4IDwgbngpIHtcbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgICAgICB3aGlsZSAobm9kZSA9IG5vZGUucHJldikge1xuICAgICAgICAgICAgaWYgKHBvaW50ID09PSBub2RlLnBvaW50KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAobm9kZSA9IG5vZGUubmV4dCkge1xuICAgICAgICAgICAgaWYgKHBvaW50ID09PSBub2RlLnBvaW50KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgICB0aGlzLnNlYXJjaF9ub2RlXyA9IG5vZGU7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufTtcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tRXhwb3J0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkdmFuY2luZ0Zyb250O1xubW9kdWxlLmV4cG9ydHMuTm9kZSA9IE5vZGU7XG5cbiJdLCJuYW1lcyI6WyJOb2RlIiwicCIsInQiLCJwb2ludCIsInRyaWFuZ2xlIiwibmV4dCIsInByZXYiLCJ2YWx1ZSIsIngiLCJBZHZhbmNpbmdGcm9udCIsImhlYWQiLCJ0YWlsIiwiaGVhZF8iLCJ0YWlsXyIsInNlYXJjaF9ub2RlXyIsInByb3RvdHlwZSIsInNldEhlYWQiLCJub2RlIiwic2V0VGFpbCIsInNlYXJjaCIsInNldFNlYXJjaCIsImZpbmRTZWFyY2hOb2RlIiwibG9jYXRlTm9kZSIsImxvY2F0ZVBvaW50IiwicHgiLCJueCIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/advancingfront.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/assert.js":
/*!*****************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/assert.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n *\n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n *\n * All rights reserved.\n *\n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\n\n/*\n * Function added in the JavaScript version (was not present in the c++ version)\n */\n\n/**\n * assert and throw an exception.\n *\n * @private\n * @param {boolean} condition   the condition which is asserted\n * @param {string} message      the message which is display is condition is falsy\n */\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assert Failed\");\n  }\n}\nmodule.exports = assert;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsTUFBTUEsQ0FBQ0MsU0FBUyxFQUFFQyxPQUFPLEVBQUU7RUFDaEMsSUFBSSxDQUFDRCxTQUFTLEVBQUU7SUFDWixNQUFNLElBQUlFLEtBQUssQ0FBQ0QsT0FBTyxJQUFJLGVBQWUsQ0FBQztFQUMvQztBQUNKO0FBQ0FFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTCxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvQ29tcEdlb20vbm9kZV9tb2R1bGVzL3BvbHkydHJpL3NyYy9hc3NlcnQuanM/MThjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUG9seTJUcmkgQ29weXJpZ2h0IChjKSAyMDA5LTIwMTQsIFBvbHkyVHJpIENvbnRyaWJ1dG9yc1xuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3BvbHkydHJpL1xuICpcbiAqIHBvbHkydHJpLmpzIChKYXZhU2NyaXB0IHBvcnQpIChjKSAyMDA5LTIwMTQsIFBvbHkyVHJpIENvbnRyaWJ1dG9yc1xuICogaHR0cHM6Ly9naXRodWIuY29tL3IzbWkvcG9seTJ0cmkuanNcbiAqXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSAzLWNsYXVzZSBCU0QgTGljZW5zZSwgc2VlIExJQ0VOU0UudHh0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gKiBGdW5jdGlvbiBhZGRlZCBpbiB0aGUgSmF2YVNjcmlwdCB2ZXJzaW9uICh3YXMgbm90IHByZXNlbnQgaW4gdGhlIGMrKyB2ZXJzaW9uKVxuICovXG5cbi8qKlxuICogYXNzZXJ0IGFuZCB0aHJvdyBhbiBleGNlcHRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29uZGl0aW9uICAgdGhlIGNvbmRpdGlvbiB3aGljaCBpcyBhc3NlcnRlZFxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgICAgICB0aGUgbWVzc2FnZSB3aGljaCBpcyBkaXNwbGF5IGlzIGNvbmRpdGlvbiBpcyBmYWxzeVxuICovXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgXCJBc3NlcnQgRmFpbGVkXCIpO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gYXNzZXJ0O1xuXG5cbiJdLCJuYW1lcyI6WyJhc3NlcnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/assert.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/point.js":
/*!****************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/point.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar xy = __webpack_require__(/*! ./xy */ \"./extensions/CompGeom/node_modules/poly2tri/src/xy.js\");\n\n// ------------------------------------------------------------------------Point\n/**\n * Construct a point\n * @example\n *      var point = new poly2tri.Point(150, 150);\n * @public\n * @constructor\n * @struct\n * @param {number=} x    coordinate (0 if undefined)\n * @param {number=} y    coordinate (0 if undefined)\n */\nvar Point = function (x, y) {\n  /**\n   * @type {number}\n   * @expose\n   */\n  this.x = +x || 0;\n  /**\n   * @type {number}\n   * @expose\n   */\n  this.y = +y || 0;\n\n  // All extra fields added to Point are prefixed with _p2t_\n  // to avoid collisions if custom Point class is used.\n\n  /**\n   * The edges this point constitutes an upper ending point\n   * @private\n   * @type {Array.<Edge>}\n   */\n  this._p2t_edge_list = null;\n};\n\n/**\n * For pretty printing\n * @example\n *      \"p=\" + new poly2tri.Point(5,42)\n *      // → \"p=(5;42)\"\n * @returns {string} <code>\"(x;y)\"</code>\n */\nPoint.prototype.toString = function () {\n  return xy.toStringBase(this);\n};\n\n/**\n * JSON output, only coordinates\n * @example\n *      JSON.stringify(new poly2tri.Point(1,2))\n *      // → '{\"x\":1,\"y\":2}'\n */\nPoint.prototype.toJSON = function () {\n  return { x: this.x, y: this.y };\n};\n\n/**\n * Creates a copy of this Point object.\n * @return {Point} new cloned point\n */\nPoint.prototype.clone = function () {\n  return new Point(this.x, this.y);\n};\n\n/**\n * Set this Point instance to the origo. <code>(0; 0)</code>\n * @return {Point} this (for chaining)\n */\nPoint.prototype.set_zero = function () {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this; // for chaining\n};\n\n/**\n * Set the coordinates of this instance.\n * @param {number} x   coordinate\n * @param {number} y   coordinate\n * @return {Point} this (for chaining)\n */\nPoint.prototype.set = function (x, y) {\n  this.x = +x || 0;\n  this.y = +y || 0;\n  return this; // for chaining\n};\n\n/**\n * Negate this Point instance. (component-wise)\n * @return {Point} this (for chaining)\n */\nPoint.prototype.negate = function () {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this; // for chaining\n};\n\n/**\n * Add another Point object to this instance. (component-wise)\n * @param {!Point} n - Point object.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.add = function (n) {\n  this.x += n.x;\n  this.y += n.y;\n  return this; // for chaining\n};\n\n/**\n * Subtract this Point instance with another point given. (component-wise)\n * @param {!Point} n - Point object.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.sub = function (n) {\n  this.x -= n.x;\n  this.y -= n.y;\n  return this; // for chaining\n};\n\n/**\n * Multiply this Point instance by a scalar. (component-wise)\n * @param {number} s   scalar.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.mul = function (s) {\n  this.x *= s;\n  this.y *= s;\n  return this; // for chaining\n};\n\n/**\n * Return the distance of this Point instance from the origo.\n * @return {number} distance\n */\nPoint.prototype.length = function () {\n  return Math.sqrt(this.x * this.x + this.y * this.y);\n};\n\n/**\n * Normalize this Point instance (as a vector).\n * @return {number} The original distance of this instance from the origo.\n */\nPoint.prototype.normalize = function () {\n  var len = this.length();\n  this.x /= len;\n  this.y /= len;\n  return len;\n};\n\n/**\n * Test this Point object with another for equality.\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.\n */\nPoint.prototype.equals = function (p) {\n  return this.x === p.x && this.y === p.y;\n};\n\n\n// -----------------------------------------------------Point (\"static\" methods)\n\n/**\n * Negate a point component-wise and return the result as a new Point object.\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.negate = function (p) {\n  return new Point(-p.x, -p.y);\n};\n\n/**\n * Add two points component-wise and return the result as a new Point object.\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.add = function (a, b) {\n  return new Point(a.x + b.x, a.y + b.y);\n};\n\n/**\n * Subtract two points component-wise and return the result as a new Point object.\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.sub = function (a, b) {\n  return new Point(a.x - b.x, a.y - b.y);\n};\n\n/**\n * Multiply a point by a scalar and return the result as a new Point object.\n * @param {number} s - the scalar\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.mul = function (s, p) {\n  return new Point(s * p.x, s * p.y);\n};\n\n/**\n * Perform the cross product on either two points (this produces a scalar)\n * or a point and a scalar (this produces a point).\n * This function requires two parameters, either may be a Point object or a\n * number.\n * @param  {XY|number} a - Point object or scalar.\n * @param  {XY|number} b - Point object or scalar.\n * @return {Point|number} a Point object or a number, depending on the parameters.\n */\nPoint.cross = function (a, b) {\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      return a * b;\n    } else {\n      return new Point(-a * b.y, a * b.x);\n    }\n  } else {\n    if (typeof b === 'number') {\n      return new Point(b * a.y, -b * a.x);\n    } else {\n      return a.x * b.y - a.y * b.x;\n    }\n  }\n};\n\n\n// -----------------------------------------------------------------\"Point-Like\"\n/*\n * The following functions operate on \"Point\" or any \"Point like\" object \n * with {x,y} (duck typing).\n */\n\nPoint.toString = xy.toString;\nPoint.compare = xy.compare;\nPoint.cmp = xy.compare; // backward compatibility\nPoint.equals = xy.equals;\n\n/**\n * Peform the dot product on two vectors.\n * @public\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {number} The dot product\n */\nPoint.dot = function (a, b) {\n  return a.x * b.x + a.y * b.y;\n};\n\n\n// ---------------------------------------------------------Exports (public API)\n\nmodule.exports = Point;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/point.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js":
/*!*********************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\n\n/*\n * Class added in the JavaScript version (was not present in the c++ version)\n */\n\nvar xy = __webpack_require__(/*! ./xy */ \"./extensions/CompGeom/node_modules/poly2tri/src/xy.js\");\n\n/**\n * Custom exception class to indicate invalid Point values\n * @constructor\n * @public\n * @extends Error\n * @struct\n * @param {string=} message - error message\n * @param {Array.<XY>=} points - invalid points\n */\nvar PointError = function (message, points) {\n  this.name = \"PointError\";\n  /**\n   * Invalid points\n   * @public\n   * @type {Array.<XY>}\n   */\n  this.points = points = points || [];\n  /**\n   * Error message\n   * @public\n   * @type {string}\n   */\n  this.message = message || \"Invalid Points!\";\n  for (var i = 0; i < points.length; i++) {\n    this.message += \" \" + xy.toString(points[i]);\n  }\n};\nPointError.prototype = new Error();\nPointError.prototype.constructor = PointError;\n\n\nmodule.exports = PointError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvcG9pbnRlcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsbUVBQU0sQ0FBQzs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLFNBQUFBLENBQVNDLE9BQU8sRUFBRUMsTUFBTSxFQUFFO0VBQ3ZDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLFlBQVk7RUFDeEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFFO0VBQ25DO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNELE9BQU8sR0FBR0EsT0FBTyxJQUFJLGlCQUFpQjtFQUMzQyxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3BDLElBQUksQ0FBQ0gsT0FBTyxJQUFJLEdBQUcsR0FBR0gsRUFBRSxDQUFDUSxRQUFRLENBQUNKLE1BQU0sQ0FBQ0UsQ0FBQyxDQUFDLENBQUM7RUFDaEQ7QUFDSixDQUFDO0FBQ0RKLFVBQVUsQ0FBQ08sU0FBUyxHQUFHLElBQUlDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDUixVQUFVLENBQUNPLFNBQVMsQ0FBQ0UsV0FBVyxHQUFHVCxVQUFVOzs7QUFHN0NVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHWCxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvQ29tcEdlb20vbm9kZV9tb2R1bGVzL3BvbHkydHJpL3NyYy9wb2ludGVycm9yLmpzP2MzZjIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFBvbHkyVHJpIENvcHlyaWdodCAoYykgMjAwOS0yMDE0LCBQb2x5MlRyaSBDb250cmlidXRvcnNcbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9wb2x5MnRyaS9cbiAqIFxuICogcG9seTJ0cmkuanMgKEphdmFTY3JpcHQgcG9ydCkgKGMpIDIwMDktMjAxNCwgUG9seTJUcmkgQ29udHJpYnV0b3JzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcjNtaS9wb2x5MnRyaS5qc1xuICogXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgMy1jbGF1c2UgQlNEIExpY2Vuc2UsIHNlZSBMSUNFTlNFLnR4dFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKlxuICogQ2xhc3MgYWRkZWQgaW4gdGhlIEphdmFTY3JpcHQgdmVyc2lvbiAod2FzIG5vdCBwcmVzZW50IGluIHRoZSBjKysgdmVyc2lvbilcbiAqL1xuXG52YXIgeHkgPSByZXF1aXJlKCcuL3h5Jyk7XG5cbi8qKlxuICogQ3VzdG9tIGV4Y2VwdGlvbiBjbGFzcyB0byBpbmRpY2F0ZSBpbnZhbGlkIFBvaW50IHZhbHVlc1xuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQHN0cnVjdFxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIC0gZXJyb3IgbWVzc2FnZVxuICogQHBhcmFtIHtBcnJheS48WFk+PX0gcG9pbnRzIC0gaW52YWxpZCBwb2ludHNcbiAqL1xudmFyIFBvaW50RXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlLCBwb2ludHMpIHtcbiAgICB0aGlzLm5hbWUgPSBcIlBvaW50RXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBJbnZhbGlkIHBvaW50c1xuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdHlwZSB7QXJyYXkuPFhZPn1cbiAgICAgKi9cbiAgICB0aGlzLnBvaW50cyA9IHBvaW50cyA9IHBvaW50cyB8fCBbXTtcbiAgICAvKipcbiAgICAgKiBFcnJvciBtZXNzYWdlXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCBcIkludmFsaWQgUG9pbnRzIVwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSArPSBcIiBcIiArIHh5LnRvU3RyaW5nKHBvaW50c1tpXSk7XG4gICAgfVxufTtcblBvaW50RXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5Qb2ludEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50RXJyb3I7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQb2ludEVycm9yO1xuIl0sIm5hbWVzIjpbInh5IiwicmVxdWlyZSIsIlBvaW50RXJyb3IiLCJtZXNzYWdlIiwicG9pbnRzIiwibmFtZSIsImkiLCJsZW5ndGgiLCJ0b1N0cmluZyIsInByb3RvdHlwZSIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/poly2tri.js":
/*!*******************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/poly2tri.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice,\n *   this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n *   this list of conditions and the following disclaimer in the documentation\n *   and/or other materials provided with the distribution.\n * * Neither the name of Poly2Tri nor the names of its contributors may be\n *   used to endorse or promote products derived from this software without specific\n *   prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n\n/**\n * Public API for poly2tri.js\n * @module poly2tri\n */\n\n\n/**\n * If you are not using a module system (e.g. CommonJS, RequireJS), you can access this library\n * as a global variable <code>poly2tri</code> i.e. <code>window.poly2tri</code> in a browser.\n * @name poly2tri\n * @global\n * @public\n * @type {module:poly2tri}\n */\nvar previousPoly2tri = __webpack_require__.g.poly2tri;\n/**\n * For Browser + &lt;script&gt; :\n * reverts the {@linkcode poly2tri} global object to its previous value,\n * and returns a reference to the instance called.\n *\n * @example\n *              var p = poly2tri.noConflict();\n * @public\n * @return {module:poly2tri} instance called\n */\n// (this feature is not automatically provided by browserify).\nexports.noConflict = function () {\n  __webpack_require__.g.poly2tri = previousPoly2tri;\n  return exports;\n};\n\n/**\n * poly2tri library version\n * @public\n * @const {string}\n */\nexports.VERSION = __webpack_require__(/*! ../dist/version.json */ \"./extensions/CompGeom/node_modules/poly2tri/dist/version.json\").version;\n\n/**\n * Exports the {@linkcode PointError} class.\n * @public\n * @typedef {PointError} module:poly2tri.PointError\n * @function\n */\nexports.PointError = __webpack_require__(/*! ./pointerror */ \"./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js\");\n/**\n * Exports the {@linkcode Point} class.\n * @public\n * @typedef {Point} module:poly2tri.Point\n * @function\n */\nexports.Point = __webpack_require__(/*! ./point */ \"./extensions/CompGeom/node_modules/poly2tri/src/point.js\");\n/**\n * Exports the {@linkcode Triangle} class.\n * @public\n * @typedef {Triangle} module:poly2tri.Triangle\n * @function\n */\nexports.Triangle = __webpack_require__(/*! ./triangle */ \"./extensions/CompGeom/node_modules/poly2tri/src/triangle.js\");\n/**\n * Exports the {@linkcode SweepContext} class.\n * @public\n * @typedef {SweepContext} module:poly2tri.SweepContext\n * @function\n */\nexports.SweepContext = __webpack_require__(/*! ./sweepcontext */ \"./extensions/CompGeom/node_modules/poly2tri/src/sweepcontext.js\");\n\n\n// Backward compatibility\nvar sweep = __webpack_require__(/*! ./sweep */ \"./extensions/CompGeom/node_modules/poly2tri/src/sweep.js\");\n/**\n * @function\n * @deprecated use {@linkcode SweepContext#triangulate} instead\n */\nexports.triangulate = sweep.triangulate;\n/**\n * @deprecated use {@linkcode SweepContext#triangulate} instead\n * @property {function} Triangulate - use {@linkcode SweepContext#triangulate} instead\n */\nexports.sweep = { Triangulate: sweep.triangulate };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvcG9seTJ0cmkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsZ0JBQWdCLEdBQUdDLHFCQUFNLENBQUNDLFFBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxrQkFBa0IsR0FBRyxZQUFXO0VBQzVCRixxQkFBTSxDQUFDQyxRQUFRLEdBQUdGLGdCQUFnQjtFQUNsQyxPQUFPRyxPQUFPO0FBQ2xCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSwwSUFBeUQ7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSw2SEFBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLDhHQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsdUhBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxtSUFBZ0Q7OztBQUdoRDtBQUNBLElBQUlTLEtBQUssR0FBR04sbUJBQU8sQ0FBQyx5RUFBUyxDQUFDO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0FILG1CQUFtQixHQUFHUyxLQUFLLENBQUNDLFdBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQVYsYUFBYSxHQUFHLEVBQUNXLFdBQVcsRUFBRUYsS0FBSyxDQUFDQyxXQUFXLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9Db21wR2VvbS9ub2RlX21vZHVsZXMvcG9seTJ0cmkvc3JjL3BvbHkydHJpLmpzP2ZjYTYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFBvbHkyVHJpIENvcHlyaWdodCAoYykgMjAwOS0yMDE0LCBQb2x5MlRyaSBDb250cmlidXRvcnNcbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9wb2x5MnRyaS9cbiAqIFxuICogcG9seTJ0cmkuanMgKEphdmFTY3JpcHQgcG9ydCkgKGMpIDIwMDktMjAxNCwgUG9seTJUcmkgQ29udHJpYnV0b3JzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcjNtaS9wb2x5MnRyaS5qc1xuICpcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbixcbiAqIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiAqICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogICB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG4gKiAgIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogKiBOZWl0aGVyIHRoZSBuYW1lIG9mIFBvbHkyVHJpIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmVcbiAqICAgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xuICogICBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUlxuICogQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsXG4gKiBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXG4gKiBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAqIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXG4gKiBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIHBvbHkydHJpLmpzXG4gKiBAbW9kdWxlIHBvbHkydHJpXG4gKi9cblxuXG4vKipcbiAqIElmIHlvdSBhcmUgbm90IHVzaW5nIGEgbW9kdWxlIHN5c3RlbSAoZS5nLiBDb21tb25KUywgUmVxdWlyZUpTKSwgeW91IGNhbiBhY2Nlc3MgdGhpcyBsaWJyYXJ5XG4gKiBhcyBhIGdsb2JhbCB2YXJpYWJsZSA8Y29kZT5wb2x5MnRyaTwvY29kZT4gaS5lLiA8Y29kZT53aW5kb3cucG9seTJ0cmk8L2NvZGU+IGluIGEgYnJvd3Nlci5cbiAqIEBuYW1lIHBvbHkydHJpXG4gKiBAZ2xvYmFsXG4gKiBAcHVibGljXG4gKiBAdHlwZSB7bW9kdWxlOnBvbHkydHJpfVxuICovXG52YXIgcHJldmlvdXNQb2x5MnRyaSA9IGdsb2JhbC5wb2x5MnRyaTtcbi8qKlxuICogRm9yIEJyb3dzZXIgKyAmbHQ7c2NyaXB0Jmd0OyA6XG4gKiByZXZlcnRzIHRoZSB7QGxpbmtjb2RlIHBvbHkydHJpfSBnbG9iYWwgb2JqZWN0IHRvIGl0cyBwcmV2aW91cyB2YWx1ZSxcbiAqIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnN0YW5jZSBjYWxsZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICAgICAgICAgICB2YXIgcCA9IHBvbHkydHJpLm5vQ29uZmxpY3QoKTtcbiAqIEBwdWJsaWNcbiAqIEByZXR1cm4ge21vZHVsZTpwb2x5MnRyaX0gaW5zdGFuY2UgY2FsbGVkXG4gKi9cbi8vICh0aGlzIGZlYXR1cmUgaXMgbm90IGF1dG9tYXRpY2FsbHkgcHJvdmlkZWQgYnkgYnJvd3NlcmlmeSkuXG5leHBvcnRzLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICBnbG9iYWwucG9seTJ0cmkgPSBwcmV2aW91c1BvbHkydHJpO1xuICAgIHJldHVybiBleHBvcnRzO1xufTtcblxuLyoqXG4gKiBwb2x5MnRyaSBsaWJyYXJ5IHZlcnNpb25cbiAqIEBwdWJsaWNcbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG5leHBvcnRzLlZFUlNJT04gPSByZXF1aXJlKCcuLi9kaXN0L3ZlcnNpb24uanNvbicpLnZlcnNpb247XG5cbi8qKlxuICogRXhwb3J0cyB0aGUge0BsaW5rY29kZSBQb2ludEVycm9yfSBjbGFzcy5cbiAqIEBwdWJsaWNcbiAqIEB0eXBlZGVmIHtQb2ludEVycm9yfSBtb2R1bGU6cG9seTJ0cmkuUG9pbnRFcnJvclxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydHMuUG9pbnRFcnJvciA9IHJlcXVpcmUoJy4vcG9pbnRlcnJvcicpO1xuLyoqXG4gKiBFeHBvcnRzIHRoZSB7QGxpbmtjb2RlIFBvaW50fSBjbGFzcy5cbiAqIEBwdWJsaWNcbiAqIEB0eXBlZGVmIHtQb2ludH0gbW9kdWxlOnBvbHkydHJpLlBvaW50XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0cy5Qb2ludCA9IHJlcXVpcmUoJy4vcG9pbnQnKTtcbi8qKlxuICogRXhwb3J0cyB0aGUge0BsaW5rY29kZSBUcmlhbmdsZX0gY2xhc3MuXG4gKiBAcHVibGljXG4gKiBAdHlwZWRlZiB7VHJpYW5nbGV9IG1vZHVsZTpwb2x5MnRyaS5UcmlhbmdsZVxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydHMuVHJpYW5nbGUgPSByZXF1aXJlKCcuL3RyaWFuZ2xlJyk7XG4vKipcbiAqIEV4cG9ydHMgdGhlIHtAbGlua2NvZGUgU3dlZXBDb250ZXh0fSBjbGFzcy5cbiAqIEBwdWJsaWNcbiAqIEB0eXBlZGVmIHtTd2VlcENvbnRleHR9IG1vZHVsZTpwb2x5MnRyaS5Td2VlcENvbnRleHRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnRzLlN3ZWVwQ29udGV4dCA9IHJlcXVpcmUoJy4vc3dlZXBjb250ZXh0Jyk7XG5cblxuLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eVxudmFyIHN3ZWVwID0gcmVxdWlyZSgnLi9zd2VlcCcpO1xuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmtjb2RlIFN3ZWVwQ29udGV4dCN0cmlhbmd1bGF0ZX0gaW5zdGVhZFxuICovXG5leHBvcnRzLnRyaWFuZ3VsYXRlID0gc3dlZXAudHJpYW5ndWxhdGU7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmtjb2RlIFN3ZWVwQ29udGV4dCN0cmlhbmd1bGF0ZX0gaW5zdGVhZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gVHJpYW5ndWxhdGUgLSB1c2Uge0BsaW5rY29kZSBTd2VlcENvbnRleHQjdHJpYW5ndWxhdGV9IGluc3RlYWRcbiAqL1xuZXhwb3J0cy5zd2VlcCA9IHtUcmlhbmd1bGF0ZTogc3dlZXAudHJpYW5ndWxhdGV9O1xuIl0sIm5hbWVzIjpbInByZXZpb3VzUG9seTJ0cmkiLCJnbG9iYWwiLCJwb2x5MnRyaSIsImV4cG9ydHMiLCJub0NvbmZsaWN0IiwiVkVSU0lPTiIsInJlcXVpcmUiLCJ2ZXJzaW9uIiwiUG9pbnRFcnJvciIsIlBvaW50IiwiVHJpYW5nbGUiLCJTd2VlcENvbnRleHQiLCJzd2VlcCIsInRyaWFuZ3VsYXRlIiwiVHJpYW5ndWxhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/poly2tri.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/sweep.js":
/*!****************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/sweep.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint latedef:nofunc, maxcomplexity:9 */\n\n\n\n/**\n * This 'Sweep' module is present in order to keep this JavaScript version\n * as close as possible to the reference C++ version, even though almost all\n * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.\n * @module\n * @private\n */\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar assert = __webpack_require__(/*! ./assert */ \"./extensions/CompGeom/node_modules/poly2tri/src/assert.js\");\nvar PointError = __webpack_require__(/*! ./pointerror */ \"./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js\");\nvar Triangle = __webpack_require__(/*! ./triangle */ \"./extensions/CompGeom/node_modules/poly2tri/src/triangle.js\");\nvar Node = (__webpack_require__(/*! ./advancingfront */ \"./extensions/CompGeom/node_modules/poly2tri/src/advancingfront.js\").Node);\n\n\n// ------------------------------------------------------------------------utils\n\nvar utils = __webpack_require__(/*! ./utils */ \"./extensions/CompGeom/node_modules/poly2tri/src/utils.js\");\n\n/** @const */\nvar EPSILON = utils.EPSILON;\n\n/** @const */\nvar Orientation = utils.Orientation;\n/** @const */\nvar orient2d = utils.orient2d;\n/** @const */\nvar inScanArea = utils.inScanArea;\n/** @const */\nvar isAngleObtuse = utils.isAngleObtuse;\n\n\n// ------------------------------------------------------------------------Sweep\n\n/**\n * Triangulate the polygon with holes and Steiner points.\n * Do this AFTER you've added the polyline, holes, and Steiner points\n * @private\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction triangulate(tcx) {\n  tcx.initTriangulation();\n  tcx.createAdvancingFront();\n  // Sweep points; build mesh\n  sweepPoints(tcx);\n  // Clean up\n  finalizationPolygon(tcx);\n}\n\n/**\n * Start sweeping the Y-sorted point set from bottom to top\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction sweepPoints(tcx) {\n  var i,len = tcx.pointCount();\n  for (i = 1; i < len; ++i) {\n    var point = tcx.getPoint(i);\n    var node = pointEvent(tcx, point);\n    var edges = point._p2t_edge_list;\n    for (var j = 0; edges && j < edges.length; ++j) {\n      edgeEventByEdge(tcx, edges[j], node);\n    }\n  }\n}\n\n/**\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction finalizationPolygon(tcx) {\n  // Get an Internal triangle to start with\n  var t = tcx.front().head().next.triangle;\n  var p = tcx.front().head().next.point;\n  while (!t.getConstrainedEdgeCW(p)) {\n    t = t.neighborCCW(p);\n  }\n\n  // Collect interior triangles constrained by edges\n  tcx.meshClean(t);\n}\n\n/**\n * Find closes node to the left of the new point and\n * create a new triangle. If needed new holes and basins\n * will be filled to.\n * @param {!SweepContext} tcx - SweepContext object\n * @param {!XY} point   Point\n */\nfunction pointEvent(tcx, point) {\n  var node = tcx.locateNode(point);\n  var new_node = newFrontTriangle(tcx, point, node);\n\n  // Only need to check +epsilon since point never have smaller\n  // x value than node due to how we fetch nodes from the front\n  if (point.x <= node.point.x + EPSILON) {\n    fill(tcx, node);\n  }\n\n  //tcx.AddNode(new_node);\n\n  fillAdvancingFront(tcx, new_node);\n  return new_node;\n}\n\nfunction edgeEventByEdge(tcx, edge, node) {\n  tcx.edge_event.constrained_edge = edge;\n  tcx.edge_event.right = edge.p.x > edge.q.x;\n\n  if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {\n    return;\n  }\n\n  // For now we will do all needed filling\n  // TODO: integrate with flip process might give some better performance\n  //       but for now this avoid the issue with cases that needs both flips and fills\n  fillEdgeEvent(tcx, edge, node);\n  edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);\n}\n\nfunction edgeEventByPoints(tcx, ep, eq, triangle, point) {\n  if (isEdgeSideOfTriangle(triangle, ep, eq)) {\n    return;\n  }\n\n  var p1 = triangle.pointCCW(point);\n  var o1 = orient2d(eq, p1, ep);\n  if (o1 === Orientation.COLLINEAR) {\n    // TODO integrate here changes from C++ version\n    // (C++ repo revision 09880a869095 dated March 8, 2011)\n    throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);\n  }\n\n  var p2 = triangle.pointCW(point);\n  var o2 = orient2d(eq, p2, ep);\n  if (o2 === Orientation.COLLINEAR) {\n    // TODO integrate here changes from C++ version\n    // (C++ repo revision 09880a869095 dated March 8, 2011)\n    throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);\n  }\n\n  if (o1 === o2) {\n    // Need to decide if we are rotating CW or CCW to get to a triangle\n    // that will cross edge\n    if (o1 === Orientation.CW) {\n      triangle = triangle.neighborCCW(point);\n    } else {\n      triangle = triangle.neighborCW(point);\n    }\n    edgeEventByPoints(tcx, ep, eq, triangle, point);\n  } else {\n    // This triangle crosses constraint so lets flippin start!\n    flipEdgeEvent(tcx, ep, eq, triangle, point);\n  }\n}\n\nfunction isEdgeSideOfTriangle(triangle, ep, eq) {\n  var index = triangle.edgeIndex(ep, eq);\n  if (index !== -1) {\n    triangle.markConstrainedEdgeByIndex(index);\n    var t = triangle.getNeighbor(index);\n    if (t) {\n      t.markConstrainedEdgeByPoints(ep, eq);\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Creates a new front triangle and legalize it\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction newFrontTriangle(tcx, point, node) {\n  var triangle = new Triangle(point, node.point, node.next.point);\n\n  triangle.markNeighbor(node.triangle);\n  tcx.addToMap(triangle);\n\n  var new_node = new Node(point);\n  new_node.next = node.next;\n  new_node.prev = node;\n  node.next.prev = new_node;\n  node.next = new_node;\n\n  if (!legalize(tcx, triangle)) {\n    tcx.mapTriangleToNodes(triangle);\n  }\n\n  return new_node;\n}\n\n/**\n * Adds a triangle to the advancing front to fill a hole.\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - middle node, that is the bottom of the hole\n */\nfunction fill(tcx, node) {\n  var triangle = new Triangle(node.prev.point, node.point, node.next.point);\n\n  // TODO: should copy the constrained_edge value from neighbor triangles\n  //       for now constrained_edge values are copied during the legalize\n  triangle.markNeighbor(node.prev.triangle);\n  triangle.markNeighbor(node.triangle);\n\n  tcx.addToMap(triangle);\n\n  // Update the advancing front\n  node.prev.next = node.next;\n  node.next.prev = node.prev;\n\n\n  // If it was legalized the triangle has already been mapped\n  if (!legalize(tcx, triangle)) {\n    tcx.mapTriangleToNodes(triangle);\n  }\n\n  //tcx.removeNode(node);\n}\n\n/**\n * Fills holes in the Advancing Front\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction fillAdvancingFront(tcx, n) {\n  // Fill right holes\n  var node = n.next;\n  while (node.next) {\n    // TODO integrate here changes from C++ version\n    // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n    if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n      break;\n    }\n    fill(tcx, node);\n    node = node.next;\n  }\n\n  // Fill left holes\n  node = n.prev;\n  while (node.prev) {\n    // TODO integrate here changes from C++ version\n    // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n    if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n      break;\n    }\n    fill(tcx, node);\n    node = node.prev;\n  }\n\n  // Fill right basins\n  if (n.next && n.next.next) {\n    if (isBasinAngleRight(n)) {\n      fillBasin(tcx, n);\n    }\n  }\n}\n\n/**\n * The basin angle is decided against the horizontal line [1,0].\n * @param {Node} node\n * @return {boolean} true if angle < 3*π/4\n */\nfunction isBasinAngleRight(node) {\n  var ax = node.point.x - node.next.next.point.x;\n  var ay = node.point.y - node.next.next.point.y;\n  assert(ay >= 0, \"unordered y\");\n  return ax >= 0 || Math.abs(ax) < ay;\n}\n\n/**\n * Returns true if triangle was legalized\n * @param {!SweepContext} tcx - SweepContext object\n * @return {boolean}\n */\nfunction legalize(tcx, t) {\n  // To legalize a triangle we start by finding if any of the three edges\n  // violate the Delaunay condition\n  for (var i = 0; i < 3; ++i) {\n    if (t.delaunay_edge[i]) {\n      continue;\n    }\n    var ot = t.getNeighbor(i);\n    if (ot) {\n      var p = t.getPoint(i);\n      var op = ot.oppositePoint(t, p);\n      var oi = ot.index(op);\n\n      // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)\n      // then we should not try to legalize\n      if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {\n        t.constrained_edge[i] = ot.constrained_edge[oi];\n        continue;\n      }\n\n      var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);\n      if (inside) {\n        // Lets mark this shared edge as Delaunay\n        t.delaunay_edge[i] = true;\n        ot.delaunay_edge[oi] = true;\n\n        // Lets rotate shared edge one vertex CW to legalize it\n        rotateTrianglePair(t, p, ot, op);\n\n        // We now got one valid Delaunay Edge shared by two triangles\n        // This gives us 4 new edges to check for Delaunay\n\n        // Make sure that triangle to node mapping is done only one time for a specific triangle\n        var not_legalized = !legalize(tcx, t);\n        if (not_legalized) {\n          tcx.mapTriangleToNodes(t);\n        }\n\n        not_legalized = !legalize(tcx, ot);\n        if (not_legalized) {\n          tcx.mapTriangleToNodes(ot);\n        }\n        // Reset the Delaunay edges, since they only are valid Delaunay edges\n        // until we add a new triangle or point.\n        // XXX: need to think about this. Can these edges be tried after we\n        //      return to previous recursive level?\n        t.delaunay_edge[i] = false;\n        ot.delaunay_edge[oi] = false;\n\n        // If triangle have been legalized no need to check the other edges since\n        // the recursive legalization will handles those so we can end here.\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * <b>Requirement</b>:<br>\n * 1. a,b and c form a triangle.<br>\n * 2. a and d is know to be on opposite side of bc<br>\n * <pre>\n *                a\n *                +\n *               / \\\n *              /   \\\n *            b/     \\c\n *            +-------+\n *           /    d    \\\n *          /           \\\n * </pre>\n * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by\n *  a,b and c<br>\n *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>\n *  This preknowledge gives us a way to optimize the incircle test\n * @param pa - triangle point, opposite d\n * @param pb - triangle point\n * @param pc - triangle point\n * @param pd - point opposite a\n * @return {boolean} true if d is inside circle, false if on circle edge\n */\nfunction inCircle(pa, pb, pc, pd) {\n  var adx = pa.x - pd.x;\n  var ady = pa.y - pd.y;\n  var bdx = pb.x - pd.x;\n  var bdy = pb.y - pd.y;\n\n  var adxbdy = adx * bdy;\n  var bdxady = bdx * ady;\n  var oabd = adxbdy - bdxady;\n  if (oabd <= 0) {\n    return false;\n  }\n\n  var cdx = pc.x - pd.x;\n  var cdy = pc.y - pd.y;\n\n  var cdxady = cdx * ady;\n  var adxcdy = adx * cdy;\n  var ocad = cdxady - adxcdy;\n  if (ocad <= 0) {\n    return false;\n  }\n\n  var bdxcdy = bdx * cdy;\n  var cdxbdy = cdx * bdy;\n\n  var alift = adx * adx + ady * ady;\n  var blift = bdx * bdx + bdy * bdy;\n  var clift = cdx * cdx + cdy * cdy;\n\n  var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;\n  return det > 0;\n}\n\n/**\n * Rotates a triangle pair one vertex CW\n *<pre>\n *       n2                    n2\n *  P +-----+             P +-----+\n *    | t  /|               |\\  t |\n *    |   / |               | \\   |\n *  n1|  /  |n3           n1|  \\  |n3\n *    | /   |    after CW   |   \\ |\n *    |/ oT |               | oT \\|\n *    +-----+ oP            +-----+\n *       n4                    n4\n * </pre>\n */\nfunction rotateTrianglePair(t, p, ot, op) {\n  var n1, n2, n3, n4;\n  n1 = t.neighborCCW(p);\n  n2 = t.neighborCW(p);\n  n3 = ot.neighborCCW(op);\n  n4 = ot.neighborCW(op);\n\n  var ce1, ce2, ce3, ce4;\n  ce1 = t.getConstrainedEdgeCCW(p);\n  ce2 = t.getConstrainedEdgeCW(p);\n  ce3 = ot.getConstrainedEdgeCCW(op);\n  ce4 = ot.getConstrainedEdgeCW(op);\n\n  var de1, de2, de3, de4;\n  de1 = t.getDelaunayEdgeCCW(p);\n  de2 = t.getDelaunayEdgeCW(p);\n  de3 = ot.getDelaunayEdgeCCW(op);\n  de4 = ot.getDelaunayEdgeCW(op);\n\n  t.legalize(p, op);\n  ot.legalize(op, p);\n\n  // Remap delaunay_edge\n  ot.setDelaunayEdgeCCW(p, de1);\n  t.setDelaunayEdgeCW(p, de2);\n  t.setDelaunayEdgeCCW(op, de3);\n  ot.setDelaunayEdgeCW(op, de4);\n\n  // Remap constrained_edge\n  ot.setConstrainedEdgeCCW(p, ce1);\n  t.setConstrainedEdgeCW(p, ce2);\n  t.setConstrainedEdgeCCW(op, ce3);\n  ot.setConstrainedEdgeCW(op, ce4);\n\n  // Remap neighbors\n  // XXX: might optimize the markNeighbor by keeping track of\n  //      what side should be assigned to what neighbor after the\n  //      rotation. Now mark neighbor does lots of testing to find\n  //      the right side.\n  t.clearNeighbors();\n  ot.clearNeighbors();\n  if (n1) {\n    ot.markNeighbor(n1);\n  }\n  if (n2) {\n    t.markNeighbor(n2);\n  }\n  if (n3) {\n    t.markNeighbor(n3);\n  }\n  if (n4) {\n    ot.markNeighbor(n4);\n  }\n  t.markNeighbor(ot);\n}\n\n/**\n * Fills a basin that has formed on the Advancing Front to the right\n * of given node.<br>\n * First we decide a left,bottom and right node that forms the\n * boundaries of the basin. Then we do a reqursive fill.\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - starting node, this or next node will be left node\n */\nfunction fillBasin(tcx, node) {\n  if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n    tcx.basin.left_node = node.next.next;\n  } else {\n    tcx.basin.left_node = node.next;\n  }\n\n  // Find the bottom and right node\n  tcx.basin.bottom_node = tcx.basin.left_node;\n  while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {\n    tcx.basin.bottom_node = tcx.basin.bottom_node.next;\n  }\n  if (tcx.basin.bottom_node === tcx.basin.left_node) {\n    // No valid basin\n    return;\n  }\n\n  tcx.basin.right_node = tcx.basin.bottom_node;\n  while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {\n    tcx.basin.right_node = tcx.basin.right_node.next;\n  }\n  if (tcx.basin.right_node === tcx.basin.bottom_node) {\n    // No valid basins\n    return;\n  }\n\n  tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;\n  tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;\n\n  fillBasinReq(tcx, tcx.basin.bottom_node);\n}\n\n/**\n * Recursive algorithm to fill a Basin with triangles\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - bottom_node\n */\nfunction fillBasinReq(tcx, node) {\n  // if shallow stop filling\n  if (isShallow(tcx, node)) {\n    return;\n  }\n\n  fill(tcx, node);\n\n  var o;\n  if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {\n    return;\n  } else if (node.prev === tcx.basin.left_node) {\n    o = orient2d(node.point, node.next.point, node.next.next.point);\n    if (o === Orientation.CW) {\n      return;\n    }\n    node = node.next;\n  } else if (node.next === tcx.basin.right_node) {\n    o = orient2d(node.point, node.prev.point, node.prev.prev.point);\n    if (o === Orientation.CCW) {\n      return;\n    }\n    node = node.prev;\n  } else {\n    // Continue with the neighbor node with lowest Y value\n    if (node.prev.point.y < node.next.point.y) {\n      node = node.prev;\n    } else {\n      node = node.next;\n    }\n  }\n\n  fillBasinReq(tcx, node);\n}\n\nfunction isShallow(tcx, node) {\n  var height;\n  if (tcx.basin.left_highest) {\n    height = tcx.basin.left_node.point.y - node.point.y;\n  } else {\n    height = tcx.basin.right_node.point.y - node.point.y;\n  }\n\n  // if shallow stop filling\n  if (tcx.basin.width > height) {\n    return true;\n  }\n  return false;\n}\n\nfunction fillEdgeEvent(tcx, edge, node) {\n  if (tcx.edge_event.right) {\n    fillRightAboveEdgeEvent(tcx, edge, node);\n  } else {\n    fillLeftAboveEdgeEvent(tcx, edge, node);\n  }\n}\n\nfunction fillRightAboveEdgeEvent(tcx, edge, node) {\n  while (node.next.point.x < edge.p.x) {\n    // Check if next node is below the edge\n    if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n      fillRightBelowEdgeEvent(tcx, edge, node);\n    } else {\n      node = node.next;\n    }\n  }\n}\n\nfunction fillRightBelowEdgeEvent(tcx, edge, node) {\n  if (node.point.x < edge.p.x) {\n    if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n      // Concave\n      fillRightConcaveEdgeEvent(tcx, edge, node);\n    } else {\n      // Convex\n      fillRightConvexEdgeEvent(tcx, edge, node);\n      // Retry this one\n      fillRightBelowEdgeEvent(tcx, edge, node);\n    }\n  }\n}\n\nfunction fillRightConcaveEdgeEvent(tcx, edge, node) {\n  fill(tcx, node.next);\n  if (node.next.point !== edge.p) {\n    // Next above or below edge?\n    if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n      // Below\n      if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n        // Next is concave\n        fillRightConcaveEdgeEvent(tcx, edge, node);\n      } else {\n\n\n        // Next is convex\n        /* jshint noempty:false */}}\n  }\n}\n\nfunction fillRightConvexEdgeEvent(tcx, edge, node) {\n  // Next concave or convex?\n  if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {\n    // Concave\n    fillRightConcaveEdgeEvent(tcx, edge, node.next);\n  } else {\n    // Convex\n    // Next above or below edge?\n    if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {\n      // Below\n      fillRightConvexEdgeEvent(tcx, edge, node.next);\n    } else {\n\n\n      // Above\n      /* jshint noempty:false */}}\n}\n\nfunction fillLeftAboveEdgeEvent(tcx, edge, node) {\n  while (node.prev.point.x > edge.p.x) {\n    // Check if next node is below the edge\n    if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n      fillLeftBelowEdgeEvent(tcx, edge, node);\n    } else {\n      node = node.prev;\n    }\n  }\n}\n\nfunction fillLeftBelowEdgeEvent(tcx, edge, node) {\n  if (node.point.x > edge.p.x) {\n    if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n      // Concave\n      fillLeftConcaveEdgeEvent(tcx, edge, node);\n    } else {\n      // Convex\n      fillLeftConvexEdgeEvent(tcx, edge, node);\n      // Retry this one\n      fillLeftBelowEdgeEvent(tcx, edge, node);\n    }\n  }\n}\n\nfunction fillLeftConvexEdgeEvent(tcx, edge, node) {\n  // Next concave or convex?\n  if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {\n    // Concave\n    fillLeftConcaveEdgeEvent(tcx, edge, node.prev);\n  } else {\n    // Convex\n    // Next above or below edge?\n    if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {\n      // Below\n      fillLeftConvexEdgeEvent(tcx, edge, node.prev);\n    } else {\n\n\n      // Above\n      /* jshint noempty:false */}}\n}\n\nfunction fillLeftConcaveEdgeEvent(tcx, edge, node) {\n  fill(tcx, node.prev);\n  if (node.prev.point !== edge.p) {\n    // Next above or below edge?\n    if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n      // Below\n      if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n        // Next is concave\n        fillLeftConcaveEdgeEvent(tcx, edge, node);\n      } else {\n\n\n        // Next is convex\n        /* jshint noempty:false */}}\n  }\n}\n\nfunction flipEdgeEvent(tcx, ep, eq, t, p) {\n  var ot = t.neighborAcross(p);\n  assert(ot, \"FLIP failed due to missing triangle!\");\n\n  var op = ot.oppositePoint(t, p);\n\n  // Additional check from Java version (see issue #88)\n  if (t.getConstrainedEdgeAcross(p)) {\n    var index = t.index(p);\n    throw new PointError(\"poly2tri Intersecting Constraints\",\n    [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);\n  }\n\n  if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {\n    // Lets rotate shared edge one vertex CW\n    rotateTrianglePair(t, p, ot, op);\n    tcx.mapTriangleToNodes(t);\n    tcx.mapTriangleToNodes(ot);\n\n    // XXX: in the original C++ code for the next 2 lines, we are\n    // comparing point values (and not pointers). In this JavaScript\n    // code, we are comparing point references (pointers). This works\n    // because we can't have 2 different points with the same values.\n    // But to be really equivalent, we should use \"Point.equals\" here.\n    if (p === eq && op === ep) {\n      if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {\n        t.markConstrainedEdgeByPoints(ep, eq);\n        ot.markConstrainedEdgeByPoints(ep, eq);\n        legalize(tcx, t);\n        legalize(tcx, ot);\n      } else {\n\n\n        // XXX: I think one of the triangles should be legalized here?\n        /* jshint noempty:false */}} else {\n      var o = orient2d(eq, op, ep);\n      t = nextFlipTriangle(tcx, o, t, ot, p, op);\n      flipEdgeEvent(tcx, ep, eq, t, p);\n    }\n  } else {\n    var newP = nextFlipPoint(ep, eq, ot, op);\n    flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);\n    edgeEventByPoints(tcx, ep, eq, t, p);\n  }\n}\n\n/**\n * After a flip we have two triangles and know that only one will still be\n * intersecting the edge. So decide which to contiune with and legalize the other\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param o - should be the result of an orient2d( eq, op, ep )\n * @param t - triangle 1\n * @param ot - triangle 2\n * @param p - a point shared by both triangles\n * @param op - another point shared by both triangles\n * @return returns the triangle still intersecting the edge\n */\nfunction nextFlipTriangle(tcx, o, t, ot, p, op) {\n  var edge_index;\n  if (o === Orientation.CCW) {\n    // ot is not crossing edge after flip\n    edge_index = ot.edgeIndex(p, op);\n    ot.delaunay_edge[edge_index] = true;\n    legalize(tcx, ot);\n    ot.clearDelaunayEdges();\n    return t;\n  }\n\n  // t is not crossing edge after flip\n  edge_index = t.edgeIndex(p, op);\n\n  t.delaunay_edge[edge_index] = true;\n  legalize(tcx, t);\n  t.clearDelaunayEdges();\n  return ot;\n}\n\n/**\n * When we need to traverse from one triangle to the next we need\n * the point in current triangle that is the opposite point to the next\n * triangle.\n */\nfunction nextFlipPoint(ep, eq, ot, op) {\n  var o2d = orient2d(eq, op, ep);\n  if (o2d === Orientation.CW) {\n    // Right\n    return ot.pointCCW(op);\n  } else if (o2d === Orientation.CCW) {\n    // Left\n    return ot.pointCW(op);\n  } else {\n    throw new PointError(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\", [eq, op, ep]);\n  }\n}\n\n/**\n * Scan part of the FlipScan algorithm<br>\n * When a triangle pair isn't flippable we will scan for the next\n * point that is inside the flip triangle scan area. When found\n * we generate a new flipEdgeEvent\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param ep - last point on the edge we are traversing\n * @param eq - first point on the edge we are traversing\n * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge\n * @param t\n * @param p\n */\nfunction flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {\n  var ot = t.neighborAcross(p);\n  assert(ot, \"FLIP failed due to missing triangle\");\n\n  var op = ot.oppositePoint(t, p);\n\n  if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {\n    // flip with new edge op.eq\n    flipEdgeEvent(tcx, eq, op, ot, op);\n  } else {\n    var newP = nextFlipPoint(ep, eq, ot, op);\n    flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);\n  }\n}\n\n\n// ----------------------------------------------------------------------Exports\n\nexports.triangulate = triangulate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/sweep.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/sweepcontext.js":
/*!***********************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/sweepcontext.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:6 */\n\n\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar PointError = __webpack_require__(/*! ./pointerror */ \"./extensions/CompGeom/node_modules/poly2tri/src/pointerror.js\");\nvar Point = __webpack_require__(/*! ./point */ \"./extensions/CompGeom/node_modules/poly2tri/src/point.js\");\nvar Triangle = __webpack_require__(/*! ./triangle */ \"./extensions/CompGeom/node_modules/poly2tri/src/triangle.js\");\nvar sweep = __webpack_require__(/*! ./sweep */ \"./extensions/CompGeom/node_modules/poly2tri/src/sweep.js\");\nvar AdvancingFront = __webpack_require__(/*! ./advancingfront */ \"./extensions/CompGeom/node_modules/poly2tri/src/advancingfront.js\");\nvar Node = AdvancingFront.Node;\n\n\n// ------------------------------------------------------------------------utils\n\n/**\n * Initial triangle factor, seed triangle will extend 30% of\n * PointSet width to both left and right.\n * @private\n * @const\n */\nvar kAlpha = 0.3;\n\n\n// -------------------------------------------------------------------------Edge\n/**\n * Represents a simple polygon's edge\n * @constructor\n * @struct\n * @private\n * @param {Point} p1\n * @param {Point} p2\n * @throw {PointError} if p1 is same as p2\n */\nvar Edge = function (p1, p2) {\n  this.p = p1;\n  this.q = p2;\n\n  if (p1.y > p2.y) {\n    this.q = p1;\n    this.p = p2;\n  } else if (p1.y === p2.y) {\n    if (p1.x > p2.x) {\n      this.q = p1;\n      this.p = p2;\n    } else if (p1.x === p2.x) {\n      throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);\n    }\n  }\n\n  if (!this.q._p2t_edge_list) {\n    this.q._p2t_edge_list = [];\n  }\n  this.q._p2t_edge_list.push(this);\n};\n\n\n// ------------------------------------------------------------------------Basin\n/**\n * @constructor\n * @struct\n * @private\n */\nvar Basin = function () {\n  /** @type {Node} */\n  this.left_node = null;\n  /** @type {Node} */\n  this.bottom_node = null;\n  /** @type {Node} */\n  this.right_node = null;\n  /** @type {number} */\n  this.width = 0.0;\n  /** @type {boolean} */\n  this.left_highest = false;\n};\n\nBasin.prototype.clear = function () {\n  this.left_node = null;\n  this.bottom_node = null;\n  this.right_node = null;\n  this.width = 0.0;\n  this.left_highest = false;\n};\n\n// --------------------------------------------------------------------EdgeEvent\n/**\n * @constructor\n * @struct\n * @private\n */\nvar EdgeEvent = function () {\n  /** @type {Edge} */\n  this.constrained_edge = null;\n  /** @type {boolean} */\n  this.right = false;\n};\n\n// ----------------------------------------------------SweepContext (public API)\n/**\n * SweepContext constructor option\n * @typedef {Object} SweepContextOptions\n * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters\n *                  (contour, holes). Points inside arrays are never copied.\n *                  Default is <code>false</code> : keep a reference to the array arguments,\n *                  who will be modified in place.\n */\n/**\n * Constructor for the triangulation context.\n * It accepts a simple polyline (with non repeating points), \n * which defines the constrained edges.\n *\n * @example\n *          var contour = [\n *              new poly2tri.Point(100, 100),\n *              new poly2tri.Point(100, 300),\n *              new poly2tri.Point(300, 300),\n *              new poly2tri.Point(300, 100)\n *          ];\n *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n * @example\n *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n * @constructor\n * @public\n * @struct\n * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,\n *          or any \"Point like\" custom class with <code>{x, y}</code> attributes.\n * @param {SweepContextOptions=} options - constructor options\n */\nvar SweepContext = function (contour, options) {\n  options = options || {};\n  this.triangles_ = [];\n  this.map_ = [];\n  this.points_ = options.cloneArrays ? contour.slice(0) : contour;\n  this.edge_list = [];\n\n  // Bounding box of all points. Computed at the start of the triangulation, \n  // it is stored in case it is needed by the caller.\n  this.pmin_ = this.pmax_ = null;\n\n  /**\n   * Advancing front\n   * @private\n   * @type {AdvancingFront}\n   */\n  this.front_ = null;\n\n  /**\n   * head point used with advancing front\n   * @private\n   * @type {Point}\n   */\n  this.head_ = null;\n\n  /**\n   * tail point used with advancing front\n   * @private\n   * @type {Point}\n   */\n  this.tail_ = null;\n\n  /**\n   * @private\n   * @type {Node}\n   */\n  this.af_head_ = null;\n  /**\n   * @private\n   * @type {Node}\n   */\n  this.af_middle_ = null;\n  /**\n   * @private\n   * @type {Node}\n   */\n  this.af_tail_ = null;\n\n  this.basin = new Basin();\n  this.edge_event = new EdgeEvent();\n\n  this.initEdges(this.points_);\n};\n\n\n/**\n * Add a hole to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var hole = [\n *          new poly2tri.Point(200, 200),\n *          new poly2tri.Point(200, 250),\n *          new poly2tri.Point(250, 250)\n *      ];\n *      swctx.addHole(hole);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);\n * @public\n * @param {Array.<XY>} polyline - array of \"Point like\" objects with {x,y}\n */\nSweepContext.prototype.addHole = function (polyline) {\n  this.initEdges(polyline);\n  var i,len = polyline.length;\n  for (i = 0; i < len; i++) {\n    this.points_.push(polyline[i]);\n  }\n  return this; // for chaining\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#addHole} instead\n */\nSweepContext.prototype.AddHole = SweepContext.prototype.addHole;\n\n\n/**\n * Add several holes to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var holes = [\n *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],\n *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]\n *      ];\n *      swctx.addHoles(holes);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var holes = [\n *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],\n *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]\n *      ];\n *      swctx.addHoles(holes);\n * @public\n * @param {Array.<Array.<XY>>} holes - array of array of \"Point like\" objects with {x,y}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.addHoles = function (holes) {\n  var i,len = holes.length;\n  for (i = 0; i < len; i++) {\n    this.initEdges(holes[i]);\n  }\n  this.points_ = this.points_.concat.apply(this.points_, holes);\n  return this; // for chaining\n};\n\n\n/**\n * Add a Steiner point to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var point = new poly2tri.Point(150, 150);\n *      swctx.addPoint(point);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addPoint({x:150, y:150});\n * @public\n * @param {XY} point - any \"Point like\" object with {x,y}\n */\nSweepContext.prototype.addPoint = function (point) {\n  this.points_.push(point);\n  return this; // for chaining\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#addPoint} instead\n */\nSweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;\n\n\n/**\n * Add several Steiner points to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var points = [\n *          new poly2tri.Point(150, 150),\n *          new poly2tri.Point(200, 250),\n *          new poly2tri.Point(250, 250)\n *      ];\n *      swctx.addPoints(points);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);\n * @public\n * @param {Array.<XY>} points - array of \"Point like\" object with {x,y}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.addPoints = function (points) {\n  this.points_ = this.points_.concat(points);\n  return this; // for chaining\n};\n\n\n/**\n * Triangulate the polygon with holes and Steiner points.\n * Do this AFTER you've added the polyline, holes, and Steiner points\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n * @public\n */\n// Shortcut method for sweep.triangulate(SweepContext).\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.triangulate = function () {\n  sweep.triangulate(this);\n  return this; // for chaining\n};\n\n\n/**\n * Get the bounding box of the provided constraints (contour, holes and \n * Steinter points). Warning : these values are not available if the triangulation \n * has not been done yet.\n * @public\n * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.getBoundingBox = function () {\n  return { min: this.pmin_, max: this.pmax_ };\n};\n\n/**\n * Get result of triangulation.\n * The output triangles have vertices which are references\n * to the initial input points (not copies): any custom fields in the\n * initial points can be retrieved in the output triangles.\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n * @example\n *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n *      typeof triangles[0].getPoint(0).id\n *      // → \"number\"\n * @public\n * @returns {array<Triangle>}   array of triangles\n */\nSweepContext.prototype.getTriangles = function () {\n  return this.triangles_;\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#getTriangles} instead\n */\nSweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;\n\n\n// ---------------------------------------------------SweepContext (private API)\n\n/** @private */\nSweepContext.prototype.front = function () {\n  return this.front_;\n};\n\n/** @private */\nSweepContext.prototype.pointCount = function () {\n  return this.points_.length;\n};\n\n/** @private */\nSweepContext.prototype.head = function () {\n  return this.head_;\n};\n\n/** @private */\nSweepContext.prototype.setHead = function (p1) {\n  this.head_ = p1;\n};\n\n/** @private */\nSweepContext.prototype.tail = function () {\n  return this.tail_;\n};\n\n/** @private */\nSweepContext.prototype.setTail = function (p1) {\n  this.tail_ = p1;\n};\n\n/** @private */\nSweepContext.prototype.getMap = function () {\n  return this.map_;\n};\n\n/** @private */\nSweepContext.prototype.initTriangulation = function () {\n  var xmax = this.points_[0].x;\n  var xmin = this.points_[0].x;\n  var ymax = this.points_[0].y;\n  var ymin = this.points_[0].y;\n\n  // Calculate bounds\n  var i,len = this.points_.length;\n  for (i = 1; i < len; i++) {\n    var p = this.points_[i];\n    /* jshint expr:true */\n    p.x > xmax && (xmax = p.x);\n    p.x < xmin && (xmin = p.x);\n    p.y > ymax && (ymax = p.y);\n    p.y < ymin && (ymin = p.y);\n  }\n  this.pmin_ = new Point(xmin, ymin);\n  this.pmax_ = new Point(xmax, ymax);\n\n  var dx = kAlpha * (xmax - xmin);\n  var dy = kAlpha * (ymax - ymin);\n  this.head_ = new Point(xmax + dx, ymin - dy);\n  this.tail_ = new Point(xmin - dx, ymin - dy);\n\n  // Sort points along y-axis\n  this.points_.sort(Point.compare);\n};\n\n/** @private */\nSweepContext.prototype.initEdges = function (polyline) {\n  var i,len = polyline.length;\n  for (i = 0; i < len; ++i) {\n    this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\n  }\n};\n\n/** @private */\nSweepContext.prototype.getPoint = function (index) {\n  return this.points_[index];\n};\n\n/** @private */\nSweepContext.prototype.addToMap = function (triangle) {\n  this.map_.push(triangle);\n};\n\n/** @private */\nSweepContext.prototype.locateNode = function (point) {\n  return this.front_.locateNode(point.x);\n};\n\n/** @private */\nSweepContext.prototype.createAdvancingFront = function () {\n  var head;\n  var middle;\n  var tail;\n  // Initial triangle\n  var triangle = new Triangle(this.points_[0], this.tail_, this.head_);\n\n  this.map_.push(triangle);\n\n  head = new Node(triangle.getPoint(1), triangle);\n  middle = new Node(triangle.getPoint(0), triangle);\n  tail = new Node(triangle.getPoint(2));\n\n  this.front_ = new AdvancingFront(head, tail);\n\n  head.next = middle;\n  middle.next = tail;\n  middle.prev = head;\n  tail.prev = middle;\n};\n\n/** @private */\nSweepContext.prototype.removeNode = function (node) {\n\n\n  // do nothing\n  /* jshint unused:false */};\n/** @private */\nSweepContext.prototype.mapTriangleToNodes = function (t) {\n  for (var i = 0; i < 3; ++i) {\n    if (!t.getNeighbor(i)) {\n      var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));\n      if (n) {\n        n.triangle = t;\n      }\n    }\n  }\n};\n\n/** @private */\nSweepContext.prototype.removeFromMap = function (triangle) {\n  var i,map = this.map_,len = map.length;\n  for (i = 0; i < len; i++) {\n    if (map[i] === triangle) {\n      map.splice(i, 1);\n      break;\n    }\n  }\n};\n\n/**\n * Do a depth first traversal to collect triangles\n * @private\n * @param {Triangle} triangle start\n */\nSweepContext.prototype.meshClean = function (triangle) {\n  // New implementation avoids recursive calls and use a loop instead.\n  // Cf. issues # 57, 65 and 69.\n  var triangles = [triangle],t,i;\n  /* jshint boss:true */\n  while (t = triangles.pop()) {\n    if (!t.isInterior()) {\n      t.setInterior(true);\n      this.triangles_.push(t);\n      for (i = 0; i < 3; i++) {\n        if (!t.constrained_edge[i]) {\n          triangles.push(t.getNeighbor(i));\n        }\n      }\n    }\n  }\n};\n\n// ----------------------------------------------------------------------Exports\n\nmodule.exports = SweepContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/sweepcontext.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/triangle.js":
/*!*******************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/triangle.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n *\n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:10 */\n\n\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar xy = __webpack_require__(/*! ./xy */ \"./extensions/CompGeom/node_modules/poly2tri/src/xy.js\");\n\n\n// ---------------------------------------------------------------------Triangle\n/**\n * Triangle class.<br>\n * Triangle-based data structures are known to have better performance than\n * quad-edge structures.\n * See: J. Shewchuk, \"Triangle: Engineering a 2D Quality Mesh Generator and\n * Delaunay Triangulator\", \"Triangulations in CGAL\"\n *\n * @constructor\n * @struct\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n */\nvar Triangle = function (a, b, c) {\n  /**\n   * Triangle points\n   * @private\n   * @type {Array.<XY>}\n   */\n  this.points_ = [a, b, c];\n\n  /**\n   * Neighbor list\n   * @private\n   * @type {Array.<Triangle>}\n   */\n  this.neighbors_ = [null, null, null];\n\n  /**\n   * Has this triangle been marked as an interior triangle?\n   * @private\n   * @type {boolean}\n   */\n  this.interior_ = false;\n\n  /**\n   * Flags to determine if an edge is a Constrained edge\n   * @private\n   * @type {Array.<boolean>}\n   */\n  this.constrained_edge = [false, false, false];\n\n  /**\n   * Flags to determine if an edge is a Delauney edge\n   * @private\n   * @type {Array.<boolean>}\n   */\n  this.delaunay_edge = [false, false, false];\n};\n\nvar p2s = xy.toString;\n/**\n * For pretty printing ex. <code>\"[(5;42)(10;20)(21;30)]\"</code>.\n * @public\n * @return {string}\n */\nTriangle.prototype.toString = function () {\n  return \"[\" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + \"]\";\n};\n\n/**\n * Get one vertice of the triangle.\n * The output triangles of a triangulation have vertices which are references\n * to the initial input points (not copies): any custom fields in the\n * initial points can be retrieved in the output triangles.\n * @example\n *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n *      typeof triangles[0].getPoint(0).id\n *      // → \"number\"\n * @param {number} index - vertice index: 0, 1 or 2\n * @public\n * @returns {XY}\n */\nTriangle.prototype.getPoint = function (index) {\n  return this.points_[index];\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode Triangle#getPoint} instead\n */\nTriangle.prototype.GetPoint = Triangle.prototype.getPoint;\n\n/**\n * Get all 3 vertices of the triangle as an array\n * @public\n * @return {Array.<XY>}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nTriangle.prototype.getPoints = function () {\n  return this.points_;\n};\n\n/**\n * @private\n * @param {number} index\n * @returns {?Triangle}\n */\nTriangle.prototype.getNeighbor = function (index) {\n  return this.neighbors_[index];\n};\n\n/**\n * Test if this Triangle contains the Point object given as parameter as one of its vertices.\n * Only point references are compared, not values.\n * @public\n * @param {XY} point - point object with {x,y}\n * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,\n *         <code>false</code> otherwise.\n */\nTriangle.prototype.containsPoint = function (point) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  return point === points[0] || point === points[1] || point === points[2];\n};\n\n/**\n * Test if this Triangle contains the Edge object given as parameter as its\n * bounding edges. Only point references are compared, not values.\n * @private\n * @param {Edge} edge\n * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding\n *         edges, <code>false</code> otherwise.\n */\nTriangle.prototype.containsEdge = function (edge) {\n  return this.containsPoint(edge.p) && this.containsPoint(edge.q);\n};\n\n/**\n * Test if this Triangle contains the two Point objects given as parameters among its vertices.\n * Only point references are compared, not values.\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @return {boolean}\n */\nTriangle.prototype.containsPoints = function (p1, p2) {\n  return this.containsPoint(p1) && this.containsPoint(p2);\n};\n\n/**\n * Has this triangle been marked as an interior triangle?\n * @returns {boolean}\n */\nTriangle.prototype.isInterior = function () {\n  return this.interior_;\n};\n\n/**\n * Mark this triangle as an interior triangle\n * @private\n * @param {boolean} interior\n * @returns {Triangle} this\n */\nTriangle.prototype.setInterior = function (interior) {\n  this.interior_ = interior;\n  return this;\n};\n\n/**\n * Update neighbor pointers.\n * @private\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @param {Triangle} t Triangle object.\n * @throws {Error} if can't find objects\n */\nTriangle.prototype.markNeighborPointers = function (p1, p2, t) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (p1 === points[2] && p2 === points[1] || p1 === points[1] && p2 === points[2]) {\n    this.neighbors_[0] = t;\n  } else if (p1 === points[0] && p2 === points[2] || p1 === points[2] && p2 === points[0]) {\n    this.neighbors_[1] = t;\n  } else if (p1 === points[0] && p2 === points[1] || p1 === points[1] && p2 === points[0]) {\n    this.neighbors_[2] = t;\n  } else {\n    throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');\n  }\n};\n\n/**\n * Exhaustive search to update neighbor pointers\n * @private\n * @param {!Triangle} t\n */\nTriangle.prototype.markNeighbor = function (t) {\n  var points = this.points_;\n  if (t.containsPoints(points[1], points[2])) {\n    this.neighbors_[0] = t;\n    t.markNeighborPointers(points[1], points[2], this);\n  } else if (t.containsPoints(points[0], points[2])) {\n    this.neighbors_[1] = t;\n    t.markNeighborPointers(points[0], points[2], this);\n  } else if (t.containsPoints(points[0], points[1])) {\n    this.neighbors_[2] = t;\n    t.markNeighborPointers(points[0], points[1], this);\n  }\n};\n\n\nTriangle.prototype.clearNeighbors = function () {\n  this.neighbors_[0] = null;\n  this.neighbors_[1] = null;\n  this.neighbors_[2] = null;\n};\n\nTriangle.prototype.clearDelaunayEdges = function () {\n  this.delaunay_edge[0] = false;\n  this.delaunay_edge[1] = false;\n  this.delaunay_edge[2] = false;\n};\n\n/**\n * Returns the point clockwise to the given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.pointCW = function (p) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (p === points[0]) {\n    return points[2];\n  } else if (p === points[1]) {\n    return points[0];\n  } else if (p === points[2]) {\n    return points[1];\n  } else {\n    return null;\n  }\n};\n\n/**\n * Returns the point counter-clockwise to the given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.pointCCW = function (p) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (p === points[0]) {\n    return points[1];\n  } else if (p === points[1]) {\n    return points[2];\n  } else if (p === points[2]) {\n    return points[0];\n  } else {\n    return null;\n  }\n};\n\n/**\n * Returns the neighbor clockwise to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.neighborCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.neighbors_[1];\n  } else if (p === this.points_[1]) {\n    return this.neighbors_[2];\n  } else {\n    return this.neighbors_[0];\n  }\n};\n\n/**\n * Returns the neighbor counter-clockwise to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.neighborCCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.neighbors_[2];\n  } else if (p === this.points_[1]) {\n    return this.neighbors_[0];\n  } else {\n    return this.neighbors_[1];\n  }\n};\n\nTriangle.prototype.getConstrainedEdgeCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.constrained_edge[1];\n  } else if (p === this.points_[1]) {\n    return this.constrained_edge[2];\n  } else {\n    return this.constrained_edge[0];\n  }\n};\n\nTriangle.prototype.getConstrainedEdgeCCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.constrained_edge[2];\n  } else if (p === this.points_[1]) {\n    return this.constrained_edge[0];\n  } else {\n    return this.constrained_edge[1];\n  }\n};\n\n// Additional check from Java version (see issue #88)\nTriangle.prototype.getConstrainedEdgeAcross = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.constrained_edge[0];\n  } else if (p === this.points_[1]) {\n    return this.constrained_edge[1];\n  } else {\n    return this.constrained_edge[2];\n  }\n};\n\nTriangle.prototype.setConstrainedEdgeCW = function (p, ce) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    this.constrained_edge[1] = ce;\n  } else if (p === this.points_[1]) {\n    this.constrained_edge[2] = ce;\n  } else {\n    this.constrained_edge[0] = ce;\n  }\n};\n\nTriangle.prototype.setConstrainedEdgeCCW = function (p, ce) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    this.constrained_edge[2] = ce;\n  } else if (p === this.points_[1]) {\n    this.constrained_edge[0] = ce;\n  } else {\n    this.constrained_edge[1] = ce;\n  }\n};\n\nTriangle.prototype.getDelaunayEdgeCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.delaunay_edge[1];\n  } else if (p === this.points_[1]) {\n    return this.delaunay_edge[2];\n  } else {\n    return this.delaunay_edge[0];\n  }\n};\n\nTriangle.prototype.getDelaunayEdgeCCW = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.delaunay_edge[2];\n  } else if (p === this.points_[1]) {\n    return this.delaunay_edge[0];\n  } else {\n    return this.delaunay_edge[1];\n  }\n};\n\nTriangle.prototype.setDelaunayEdgeCW = function (p, e) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    this.delaunay_edge[1] = e;\n  } else if (p === this.points_[1]) {\n    this.delaunay_edge[2] = e;\n  } else {\n    this.delaunay_edge[0] = e;\n  }\n};\n\nTriangle.prototype.setDelaunayEdgeCCW = function (p, e) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    this.delaunay_edge[2] = e;\n  } else if (p === this.points_[1]) {\n    this.delaunay_edge[0] = e;\n  } else {\n    this.delaunay_edge[1] = e;\n  }\n};\n\n/**\n * The neighbor across to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n * @returns {Triangle}\n */\nTriangle.prototype.neighborAcross = function (p) {\n  // Here we are comparing point references, not values\n  if (p === this.points_[0]) {\n    return this.neighbors_[0];\n  } else if (p === this.points_[1]) {\n    return this.neighbors_[1];\n  } else {\n    return this.neighbors_[2];\n  }\n};\n\n/**\n * @private\n * @param {!Triangle} t Triangle object.\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.oppositePoint = function (t, p) {\n  var cw = t.pointCW(p);\n  return this.pointCW(cw);\n};\n\n/**\n * Legalize triangle by rotating clockwise around oPoint\n * @private\n * @param {XY} opoint - point object with {x,y}\n * @param {XY} npoint - point object with {x,y}\n * @throws {Error} if oPoint can not be found\n */\nTriangle.prototype.legalize = function (opoint, npoint) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (opoint === points[0]) {\n    points[1] = points[0];\n    points[0] = points[2];\n    points[2] = npoint;\n  } else if (opoint === points[1]) {\n    points[2] = points[1];\n    points[1] = points[0];\n    points[0] = npoint;\n  } else if (opoint === points[2]) {\n    points[0] = points[2];\n    points[2] = points[1];\n    points[1] = npoint;\n  } else {\n    throw new Error('poly2tri Invalid Triangle.legalize() call');\n  }\n};\n\n/**\n * Returns the index of a point in the triangle. \n * The point *must* be a reference to one of the triangle's vertices.\n * @private\n * @param {XY} p - point object with {x,y}\n * @returns {number} index 0, 1 or 2\n * @throws {Error} if p can not be found\n */\nTriangle.prototype.index = function (p) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (p === points[0]) {\n    return 0;\n  } else if (p === points[1]) {\n    return 1;\n  } else if (p === points[2]) {\n    return 2;\n  } else {\n    throw new Error('poly2tri Invalid Triangle.index() call');\n  }\n};\n\n/**\n * @private\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @return {number} index 0, 1 or 2, or -1 if errror\n */\nTriangle.prototype.edgeIndex = function (p1, p2) {\n  var points = this.points_;\n  // Here we are comparing point references, not values\n  if (p1 === points[0]) {\n    if (p2 === points[1]) {\n      return 2;\n    } else if (p2 === points[2]) {\n      return 1;\n    }\n  } else if (p1 === points[1]) {\n    if (p2 === points[2]) {\n      return 0;\n    } else if (p2 === points[0]) {\n      return 2;\n    }\n  } else if (p1 === points[2]) {\n    if (p2 === points[0]) {\n      return 1;\n    } else if (p2 === points[1]) {\n      return 0;\n    }\n  }\n  return -1;\n};\n\n/**\n * Mark an edge of this triangle as constrained.\n * @private\n * @param {number} index - edge index\n */\nTriangle.prototype.markConstrainedEdgeByIndex = function (index) {\n  this.constrained_edge[index] = true;\n};\n/**\n * Mark an edge of this triangle as constrained.\n * @private\n * @param {Edge} edge instance\n */\nTriangle.prototype.markConstrainedEdgeByEdge = function (edge) {\n  this.markConstrainedEdgeByPoints(edge.p, edge.q);\n};\n/**\n * Mark an edge of this triangle as constrained.\n * This method takes two Point instances defining the edge of the triangle.\n * @private\n * @param {XY} p - point object with {x,y}\n * @param {XY} q - point object with {x,y}\n */\nTriangle.prototype.markConstrainedEdgeByPoints = function (p, q) {\n  var points = this.points_;\n  // Here we are comparing point references, not values        \n  if (q === points[0] && p === points[1] || q === points[1] && p === points[0]) {\n    this.constrained_edge[2] = true;\n  } else if (q === points[0] && p === points[2] || q === points[2] && p === points[0]) {\n    this.constrained_edge[1] = true;\n  } else if (q === points[1] && p === points[2] || q === points[2] && p === points[1]) {\n    this.constrained_edge[0] = true;\n  }\n};\n\n\n// ---------------------------------------------------------Exports (public API)\n\nmodule.exports = Triangle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/triangle.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/utils.js":
/*!****************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\n\n/**\n * Precision to detect repeated or collinear points\n * @private\n * @const {number}\n * @default\n */\nvar EPSILON = 1e-12;\nexports.EPSILON = EPSILON;\n\n/**\n * @private\n * @enum {number}\n * @readonly\n */\nvar Orientation = {\n  \"CW\": 1,\n  \"CCW\": -1,\n  \"COLLINEAR\": 0\n};\nexports.Orientation = Orientation;\n\n\n/**\n * Formula to calculate signed area<br>\n * Positive if CCW<br>\n * Negative if CW<br>\n * 0 if collinear<br>\n * <pre>\n * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)\n *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)\n * </pre>\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @return {Orientation}\n */\nfunction orient2d(pa, pb, pc) {\n  var detleft = (pa.x - pc.x) * (pb.y - pc.y);\n  var detright = (pa.y - pc.y) * (pb.x - pc.x);\n  var val = detleft - detright;\n  if (val > -EPSILON && val < EPSILON) {\n    return Orientation.COLLINEAR;\n  } else if (val > 0) {\n    return Orientation.CCW;\n  } else {\n    return Orientation.CW;\n  }\n}\nexports.orient2d = orient2d;\n\n\n/**\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @param {!XY} pd  point object with {x,y}\n * @return {boolean}\n */\nfunction inScanArea(pa, pb, pc, pd) {\n  var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);\n  if (oadb >= -EPSILON) {\n    return false;\n  }\n\n  var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);\n  if (oadc <= EPSILON) {\n    return false;\n  }\n  return true;\n}\nexports.inScanArea = inScanArea;\n\n\n/**\n * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > π/2 || angle < -π/2)\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @return {boolean} true if angle is obtuse\n */\nfunction isAngleObtuse(pa, pb, pc) {\n  var ax = pb.x - pa.x;\n  var ay = pb.y - pa.y;\n  var bx = pc.x - pa.x;\n  var by = pc.y - pa.y;\n  return ax * bx + ay * by < 0;\n}\nexports.isAngleObtuse = isAngleObtuse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxPQUFPLEdBQUcsS0FBSztBQUNuQkMsZUFBZSxHQUFHRCxPQUFPOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUUsV0FBVyxHQUFHO0VBQ2QsSUFBSSxFQUFFLENBQUM7RUFDUCxLQUFLLEVBQUUsQ0FBQyxDQUFDO0VBQ1QsV0FBVyxFQUFFO0FBQ2pCLENBQUM7QUFDREQsbUJBQW1CLEdBQUdDLFdBQVc7OztBQUdqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFFBQVFBLENBQUNDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFDMUIsSUFBSUMsT0FBTyxHQUFHLENBQUNILEVBQUUsQ0FBQ0ksQ0FBQyxHQUFHRixFQUFFLENBQUNFLENBQUMsS0FBS0gsRUFBRSxDQUFDSSxDQUFDLEdBQUdILEVBQUUsQ0FBQ0csQ0FBQyxDQUFDO0VBQzNDLElBQUlDLFFBQVEsR0FBRyxDQUFDTixFQUFFLENBQUNLLENBQUMsR0FBR0gsRUFBRSxDQUFDRyxDQUFDLEtBQUtKLEVBQUUsQ0FBQ0csQ0FBQyxHQUFHRixFQUFFLENBQUNFLENBQUMsQ0FBQztFQUM1QyxJQUFJRyxHQUFHLEdBQUdKLE9BQU8sR0FBR0csUUFBUTtFQUM1QixJQUFJQyxHQUFHLEdBQUcsQ0FBRVgsT0FBUSxJQUFJVyxHQUFHLEdBQUlYLE9BQVEsRUFBRTtJQUNyQyxPQUFPRSxXQUFXLENBQUNVLFNBQVM7RUFDaEMsQ0FBQyxNQUFNLElBQUlELEdBQUcsR0FBRyxDQUFDLEVBQUU7SUFDaEIsT0FBT1QsV0FBVyxDQUFDVyxHQUFHO0VBQzFCLENBQUMsTUFBTTtJQUNILE9BQU9YLFdBQVcsQ0FBQ1ksRUFBRTtFQUN6QjtBQUNKO0FBQ0FiLGdCQUFnQixHQUFHRSxRQUFROzs7QUFHM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU1ksVUFBVUEsQ0FBQ1gsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRVUsRUFBRSxFQUFFO0VBQ2hDLElBQUlDLElBQUksR0FBRyxDQUFDYixFQUFFLENBQUNJLENBQUMsR0FBR0gsRUFBRSxDQUFDRyxDQUFDLEtBQUtRLEVBQUUsQ0FBQ1AsQ0FBQyxHQUFHSixFQUFFLENBQUNJLENBQUMsQ0FBQyxHQUFHLENBQUNPLEVBQUUsQ0FBQ1IsQ0FBQyxHQUFHSCxFQUFFLENBQUNHLENBQUMsS0FBS0osRUFBRSxDQUFDSyxDQUFDLEdBQUdKLEVBQUUsQ0FBQ0ksQ0FBQyxDQUFDO0VBQ3hFLElBQUlRLElBQUksSUFBSSxDQUFDakIsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sS0FBSztFQUNoQjs7RUFFQSxJQUFJa0IsSUFBSSxHQUFHLENBQUNkLEVBQUUsQ0FBQ0ksQ0FBQyxHQUFHRixFQUFFLENBQUNFLENBQUMsS0FBS1EsRUFBRSxDQUFDUCxDQUFDLEdBQUdILEVBQUUsQ0FBQ0csQ0FBQyxDQUFDLEdBQUcsQ0FBQ08sRUFBRSxDQUFDUixDQUFDLEdBQUdGLEVBQUUsQ0FBQ0UsQ0FBQyxLQUFLSixFQUFFLENBQUNLLENBQUMsR0FBR0gsRUFBRSxDQUFDRyxDQUFDLENBQUM7RUFDeEUsSUFBSVMsSUFBSSxJQUFJbEIsT0FBTyxFQUFFO0lBQ2pCLE9BQU8sS0FBSztFQUNoQjtFQUNBLE9BQU8sSUFBSTtBQUNmO0FBQ0FDLGtCQUFrQixHQUFHYyxVQUFVOzs7QUFHL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksYUFBYUEsQ0FBQ2YsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUUsRUFBRTtFQUMvQixJQUFJYyxFQUFFLEdBQUdmLEVBQUUsQ0FBQ0csQ0FBQyxHQUFHSixFQUFFLENBQUNJLENBQUM7RUFDcEIsSUFBSWEsRUFBRSxHQUFHaEIsRUFBRSxDQUFDSSxDQUFDLEdBQUdMLEVBQUUsQ0FBQ0ssQ0FBQztFQUNwQixJQUFJYSxFQUFFLEdBQUdoQixFQUFFLENBQUNFLENBQUMsR0FBR0osRUFBRSxDQUFDSSxDQUFDO0VBQ3BCLElBQUllLEVBQUUsR0FBR2pCLEVBQUUsQ0FBQ0csQ0FBQyxHQUFHTCxFQUFFLENBQUNLLENBQUM7RUFDcEIsT0FBUVcsRUFBRSxHQUFHRSxFQUFFLEdBQUdELEVBQUUsR0FBR0UsRUFBRSxHQUFJLENBQUM7QUFDbEM7QUFDQXRCLHFCQUFxQixHQUFHa0IsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMvdXRpbHMuanM/Y2E5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUG9seTJUcmkgQ29weXJpZ2h0IChjKSAyMDA5LTIwMTQsIFBvbHkyVHJpIENvbnRyaWJ1dG9yc1xuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3BvbHkydHJpL1xuICogXG4gKiBwb2x5MnRyaS5qcyAoSmF2YVNjcmlwdCBwb3J0KSAoYykgMjAwOS0yMDE0LCBQb2x5MlRyaSBDb250cmlidXRvcnNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yM21pL3BvbHkydHJpLmpzXG4gKiBcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSAzLWNsYXVzZSBCU0QgTGljZW5zZSwgc2VlIExJQ0VOU0UudHh0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogUHJlY2lzaW9uIHRvIGRldGVjdCByZXBlYXRlZCBvciBjb2xsaW5lYXIgcG9pbnRzXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0IHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG52YXIgRVBTSUxPTiA9IDFlLTEyO1xuZXhwb3J0cy5FUFNJTE9OID0gRVBTSUxPTjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQGVudW0ge251bWJlcn1cbiAqIEByZWFkb25seVxuICovXG52YXIgT3JpZW50YXRpb24gPSB7XG4gICAgXCJDV1wiOiAxLFxuICAgIFwiQ0NXXCI6IC0xLFxuICAgIFwiQ09MTElORUFSXCI6IDBcbn07XG5leHBvcnRzLk9yaWVudGF0aW9uID0gT3JpZW50YXRpb247XG5cblxuLyoqXG4gKiBGb3JtdWxhIHRvIGNhbGN1bGF0ZSBzaWduZWQgYXJlYTxicj5cbiAqIFBvc2l0aXZlIGlmIENDVzxicj5cbiAqIE5lZ2F0aXZlIGlmIENXPGJyPlxuICogMCBpZiBjb2xsaW5lYXI8YnI+XG4gKiA8cHJlPlxuICogQVtQMSxQMixQM10gID0gICh4MSp5MiAtIHkxKngyKSArICh4Mip5MyAtIHkyKngzKSArICh4Myp5MSAtIHkzKngxKVxuICogICAgICAgICAgICAgID0gICh4MS14MykqKHkyLXkzKSAtICh5MS15MykqKHgyLXgzKVxuICogPC9wcmU+XG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IVhZfSBwYSAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYiAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYyAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEByZXR1cm4ge09yaWVudGF0aW9ufVxuICovXG5mdW5jdGlvbiBvcmllbnQyZChwYSwgcGIsIHBjKSB7XG4gICAgdmFyIGRldGxlZnQgPSAocGEueCAtIHBjLngpICogKHBiLnkgLSBwYy55KTtcbiAgICB2YXIgZGV0cmlnaHQgPSAocGEueSAtIHBjLnkpICogKHBiLnggLSBwYy54KTtcbiAgICB2YXIgdmFsID0gZGV0bGVmdCAtIGRldHJpZ2h0O1xuICAgIGlmICh2YWwgPiAtKEVQU0lMT04pICYmIHZhbCA8IChFUFNJTE9OKSkge1xuICAgICAgICByZXR1cm4gT3JpZW50YXRpb24uQ09MTElORUFSO1xuICAgIH0gZWxzZSBpZiAodmFsID4gMCkge1xuICAgICAgICByZXR1cm4gT3JpZW50YXRpb24uQ0NXO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBPcmllbnRhdGlvbi5DVztcbiAgICB9XG59XG5leHBvcnRzLm9yaWVudDJkID0gb3JpZW50MmQ7XG5cblxuLyoqXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IVhZfSBwYSAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYiAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYyAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwZCAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGluU2NhbkFyZWEocGEsIHBiLCBwYywgcGQpIHtcbiAgICB2YXIgb2FkYiA9IChwYS54IC0gcGIueCkgKiAocGQueSAtIHBiLnkpIC0gKHBkLnggLSBwYi54KSAqIChwYS55IC0gcGIueSk7XG4gICAgaWYgKG9hZGIgPj0gLUVQU0lMT04pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBvYWRjID0gKHBhLnggLSBwYy54KSAqIChwZC55IC0gcGMueSkgLSAocGQueCAtIHBjLngpICogKHBhLnkgLSBwYy55KTtcbiAgICBpZiAob2FkYyA8PSBFUFNJTE9OKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmluU2NhbkFyZWEgPSBpblNjYW5BcmVhO1xuXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGFuZ2xlIGJldHdlZW4gKHBhLHBiKSBhbmQgKHBhLHBjKSBpcyBvYnR1c2UgaS5lLiAoYW5nbGUgPiDPgC8yIHx8IGFuZ2xlIDwgLc+ALzIpXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7IVhZfSBwYSAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYiAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBwYyAgcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYW5nbGUgaXMgb2J0dXNlXG4gKi9cbmZ1bmN0aW9uIGlzQW5nbGVPYnR1c2UocGEsIHBiLCBwYykge1xuICAgIHZhciBheCA9IHBiLnggLSBwYS54O1xuICAgIHZhciBheSA9IHBiLnkgLSBwYS55O1xuICAgIHZhciBieCA9IHBjLnggLSBwYS54O1xuICAgIHZhciBieSA9IHBjLnkgLSBwYS55O1xuICAgIHJldHVybiAoYXggKiBieCArIGF5ICogYnkpIDwgMDtcbn1cbmV4cG9ydHMuaXNBbmdsZU9idHVzZSA9IGlzQW5nbGVPYnR1c2U7XG5cbiJdLCJuYW1lcyI6WyJFUFNJTE9OIiwiZXhwb3J0cyIsIk9yaWVudGF0aW9uIiwib3JpZW50MmQiLCJwYSIsInBiIiwicGMiLCJkZXRsZWZ0IiwieCIsInkiLCJkZXRyaWdodCIsInZhbCIsIkNPTExJTkVBUiIsIkNDVyIsIkNXIiwiaW5TY2FuQXJlYSIsInBkIiwib2FkYiIsIm9hZGMiLCJpc0FuZ2xlT2J0dXNlIiwiYXgiLCJheSIsImJ4IiwiYnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/utils.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/src/xy.js":
/*!*************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/src/xy.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\n\n/**\n * The following functions operate on \"Point\" or any \"Point like\" object with {x,y},\n * as defined by the {@link XY} type\n * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n * @module\n * @private\n */\n\n/**\n * poly2tri.js supports using custom point class instead of {@linkcode Point}.\n * Any \"Point like\" object with <code>{x, y}</code> attributes is supported\n * to initialize the SweepContext polylines and points\n * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n *\n * poly2tri.js might add extra fields to the point objects when computing the\n * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions\n * with fields in the custom class.\n *\n * @example\n *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *\n * @typedef {Object} XY\n * @property {number} x - x coordinate\n * @property {number} y - y coordinate\n */\n\n\n/**\n * Point pretty printing : prints x and y coordinates.\n * @example\n *      xy.toStringBase({x:5, y:42})\n *      // → \"(5;42)\"\n * @protected\n * @param {!XY} p - point object with {x,y}\n * @returns {string} <code>\"(x;y)\"</code>\n */\nfunction toStringBase(p) {\n  return \"(\" + p.x + \";\" + p.y + \")\";\n}\n\n/**\n * Point pretty printing. Delegates to the point's custom \"toString()\" method if exists,\n * else simply prints x and y coordinates.\n * @example\n *      xy.toString({x:5, y:42})\n *      // → \"(5;42)\"\n * @example\n *      xy.toString({x:5,y:42,toString:function() {return this.x+\":\"+this.y;}})\n *      // → \"5:42\"\n * @param {!XY} p - point object with {x,y}\n * @returns {string} <code>\"(x;y)\"</code>\n */\nfunction toString(p) {\n  // Try a custom toString first, and fallback to own implementation if none\n  var s = p.toString();\n  return s === '[object Object]' ? toStringBase(p) : s;\n}\n\n\n/**\n * Compare two points component-wise. Ordered by y axis first, then x axis.\n * @param {!XY} a - point object with {x,y}\n * @param {!XY} b - point object with {x,y}\n * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,\n *         <code>&gt; 0</code> if <code>a &gt; b</code>, \n *         <code>0</code> otherwise.\n */\nfunction compare(a, b) {\n  if (a.y === b.y) {\n    return a.x - b.x;\n  } else {\n    return a.y - b.y;\n  }\n}\n\n/**\n * Test two Point objects for equality.\n * @param {!XY} a - point object with {x,y}\n * @param {!XY} b - point object with {x,y}\n * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.\n */\nfunction equals(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\n\n\nmodule.exports = {\n  toString: toString,\n  toStringBase: toStringBase,\n  compare: compare,\n  equals: equals\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMveHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFlBQVlBLENBQUNDLENBQUMsRUFBRTtFQUNyQixPQUFRLEdBQUcsR0FBR0EsQ0FBQyxDQUFDQyxDQUFDLEdBQUcsR0FBRyxHQUFHRCxDQUFDLENBQUNFLENBQUMsR0FBRyxHQUFHO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFFBQVFBLENBQUNILENBQUMsRUFBRTtFQUNqQjtFQUNBLElBQUlJLENBQUMsR0FBR0osQ0FBQyxDQUFDRyxRQUFRLENBQUMsQ0FBQztFQUNwQixPQUFRQyxDQUFDLEtBQUssaUJBQWlCLEdBQUdMLFlBQVksQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdJLENBQUM7QUFDekQ7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxPQUFPQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNuQixJQUFJRCxDQUFDLENBQUNKLENBQUMsS0FBS0ssQ0FBQyxDQUFDTCxDQUFDLEVBQUU7SUFDYixPQUFPSSxDQUFDLENBQUNMLENBQUMsR0FBR00sQ0FBQyxDQUFDTixDQUFDO0VBQ3BCLENBQUMsTUFBTTtJQUNILE9BQU9LLENBQUMsQ0FBQ0osQ0FBQyxHQUFHSyxDQUFDLENBQUNMLENBQUM7RUFDcEI7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTSxNQUFNQSxDQUFDRixDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUNsQixPQUFPRCxDQUFDLENBQUNMLENBQUMsS0FBS00sQ0FBQyxDQUFDTixDQUFDLElBQUlLLENBQUMsQ0FBQ0osQ0FBQyxLQUFLSyxDQUFDLENBQUNMLENBQUM7QUFDckM7OztBQUdBTyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNiUCxRQUFRLEVBQUVBLFFBQVE7RUFDbEJKLFlBQVksRUFBRUEsWUFBWTtFQUMxQk0sT0FBTyxFQUFFQSxPQUFPO0VBQ2hCRyxNQUFNLEVBQUVBO0FBQ1osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL25vZGVfbW9kdWxlcy9wb2x5MnRyaS9zcmMveHkuanM/OGFjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogUG9seTJUcmkgQ29weXJpZ2h0IChjKSAyMDA5LTIwMTQsIFBvbHkyVHJpIENvbnRyaWJ1dG9yc1xuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3BvbHkydHJpL1xuICogXG4gKiBwb2x5MnRyaS5qcyAoSmF2YVNjcmlwdCBwb3J0KSAoYykgMjAwOS0yMDE0LCBQb2x5MlRyaSBDb250cmlidXRvcnNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yM21pL3BvbHkydHJpLmpzXG4gKiBcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSAzLWNsYXVzZSBCU0QgTGljZW5zZSwgc2VlIExJQ0VOU0UudHh0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgb3BlcmF0ZSBvbiBcIlBvaW50XCIgb3IgYW55IFwiUG9pbnQgbGlrZVwiIG9iamVjdCB3aXRoIHt4LHl9LFxuICogYXMgZGVmaW5lZCBieSB0aGUge0BsaW5rIFhZfSB0eXBlXG4gKiAoW2R1Y2sgdHlwaW5nXXtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0R1Y2tfdHlwaW5nfSkuXG4gKiBAbW9kdWxlXG4gKiBAcHJpdmF0ZVxuICovXG5cbi8qKlxuICogcG9seTJ0cmkuanMgc3VwcG9ydHMgdXNpbmcgY3VzdG9tIHBvaW50IGNsYXNzIGluc3RlYWQgb2Yge0BsaW5rY29kZSBQb2ludH0uXG4gKiBBbnkgXCJQb2ludCBsaWtlXCIgb2JqZWN0IHdpdGggPGNvZGU+e3gsIHl9PC9jb2RlPiBhdHRyaWJ1dGVzIGlzIHN1cHBvcnRlZFxuICogdG8gaW5pdGlhbGl6ZSB0aGUgU3dlZXBDb250ZXh0IHBvbHlsaW5lcyBhbmQgcG9pbnRzXG4gKiAoW2R1Y2sgdHlwaW5nXXtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0R1Y2tfdHlwaW5nfSkuXG4gKlxuICogcG9seTJ0cmkuanMgbWlnaHQgYWRkIGV4dHJhIGZpZWxkcyB0byB0aGUgcG9pbnQgb2JqZWN0cyB3aGVuIGNvbXB1dGluZyB0aGVcbiAqIHRyaWFuZ3VsYXRpb24gOiB0aGV5IGFyZSBwcmVmaXhlZCB3aXRoIDxjb2RlPl9wMnRfPC9jb2RlPiB0byBhdm9pZCBjb2xsaXNpb25zXG4gKiB3aXRoIGZpZWxkcyBpbiB0aGUgY3VzdG9tIGNsYXNzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAgICAgIHZhciBjb250b3VyID0gW3t4OjEwMCwgeToxMDB9LCB7eDoxMDAsIHk6MzAwfSwge3g6MzAwLCB5OjMwMH0sIHt4OjMwMCwgeToxMDB9XTtcbiAqICAgICAgdmFyIHN3Y3R4ID0gbmV3IHBvbHkydHJpLlN3ZWVwQ29udGV4dChjb250b3VyKTtcbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBYWVxuICogQHByb3BlcnR5IHtudW1iZXJ9IHggLSB4IGNvb3JkaW5hdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB5IC0geSBjb29yZGluYXRlXG4gKi9cblxuXG4vKipcbiAqIFBvaW50IHByZXR0eSBwcmludGluZyA6IHByaW50cyB4IGFuZCB5IGNvb3JkaW5hdGVzLlxuICogQGV4YW1wbGVcbiAqICAgICAgeHkudG9TdHJpbmdCYXNlKHt4OjUsIHk6NDJ9KVxuICogICAgICAvLyDihpIgXCIoNTs0MilcIlxuICogQHByb3RlY3RlZFxuICogQHBhcmFtIHshWFl9IHAgLSBwb2ludCBvYmplY3Qgd2l0aCB7eCx5fVxuICogQHJldHVybnMge3N0cmluZ30gPGNvZGU+XCIoeDt5KVwiPC9jb2RlPlxuICovXG5mdW5jdGlvbiB0b1N0cmluZ0Jhc2UocCkge1xuICAgIHJldHVybiAoXCIoXCIgKyBwLnggKyBcIjtcIiArIHAueSArIFwiKVwiKTtcbn1cblxuLyoqXG4gKiBQb2ludCBwcmV0dHkgcHJpbnRpbmcuIERlbGVnYXRlcyB0byB0aGUgcG9pbnQncyBjdXN0b20gXCJ0b1N0cmluZygpXCIgbWV0aG9kIGlmIGV4aXN0cyxcbiAqIGVsc2Ugc2ltcGx5IHByaW50cyB4IGFuZCB5IGNvb3JkaW5hdGVzLlxuICogQGV4YW1wbGVcbiAqICAgICAgeHkudG9TdHJpbmcoe3g6NSwgeTo0Mn0pXG4gKiAgICAgIC8vIOKGkiBcIig1OzQyKVwiXG4gKiBAZXhhbXBsZVxuICogICAgICB4eS50b1N0cmluZyh7eDo1LHk6NDIsdG9TdHJpbmc6ZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMueCtcIjpcIit0aGlzLnk7fX0pXG4gKiAgICAgIC8vIOKGkiBcIjU6NDJcIlxuICogQHBhcmFtIHshWFl9IHAgLSBwb2ludCBvYmplY3Qgd2l0aCB7eCx5fVxuICogQHJldHVybnMge3N0cmluZ30gPGNvZGU+XCIoeDt5KVwiPC9jb2RlPlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyhwKSB7XG4gICAgLy8gVHJ5IGEgY3VzdG9tIHRvU3RyaW5nIGZpcnN0LCBhbmQgZmFsbGJhY2sgdG8gb3duIGltcGxlbWVudGF0aW9uIGlmIG5vbmVcbiAgICB2YXIgcyA9IHAudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gKHMgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gdG9TdHJpbmdCYXNlKHApIDogcyk7XG59XG5cblxuLyoqXG4gKiBDb21wYXJlIHR3byBwb2ludHMgY29tcG9uZW50LXdpc2UuIE9yZGVyZWQgYnkgeSBheGlzIGZpcnN0LCB0aGVuIHggYXhpcy5cbiAqIEBwYXJhbSB7IVhZfSBhIC0gcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBiIC0gcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEByZXR1cm4ge251bWJlcn0gPGNvZGU+Jmx0OyAwPC9jb2RlPiBpZiA8Y29kZT5hICZsdDsgYjwvY29kZT4sXG4gKiAgICAgICAgIDxjb2RlPiZndDsgMDwvY29kZT4gaWYgPGNvZGU+YSAmZ3Q7IGI8L2NvZGU+LCBcbiAqICAgICAgICAgPGNvZGU+MDwvY29kZT4gb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICBpZiAoYS55ID09PSBiLnkpIHtcbiAgICAgICAgcmV0dXJuIGEueCAtIGIueDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS55IC0gYi55O1xuICAgIH1cbn1cblxuLyoqXG4gKiBUZXN0IHR3byBQb2ludCBvYmplY3RzIGZvciBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7IVhZfSBhIC0gcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEBwYXJhbSB7IVhZfSBiIC0gcG9pbnQgb2JqZWN0IHdpdGgge3gseX1cbiAqIEByZXR1cm4ge2Jvb2xlYW59IDxjb2RlPlRydWU8L2NvZGU+IGlmIDxjb2RlPmEgPT0gYjwvY29kZT4sIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gICAgcmV0dXJuIGEueCA9PT0gYi54ICYmIGEueSA9PT0gYi55O1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHRvU3RyaW5nOiB0b1N0cmluZyxcbiAgICB0b1N0cmluZ0Jhc2U6IHRvU3RyaW5nQmFzZSxcbiAgICBjb21wYXJlOiBjb21wYXJlLFxuICAgIGVxdWFsczogZXF1YWxzXG59O1xuIl0sIm5hbWVzIjpbInRvU3RyaW5nQmFzZSIsInAiLCJ4IiwieSIsInRvU3RyaW5nIiwicyIsImNvbXBhcmUiLCJhIiwiYiIsImVxdWFscyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/CompGeom/node_modules/poly2tri/src/xy.js\n");

/***/ }),

/***/ "./extensions/CompGeom/path2d.js":
/*!***************************************!*\
  !*** ./extensions/CompGeom/path2d.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Path2D: () => (/* binding */ Path2D)\n/* harmony export */ });\n/* harmony import */ var clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clipper-lib-fpoint */ \"./extensions/CompGeom/node_modules/clipper-lib-fpoint/clipper.js\");\n/* harmony import */ var clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! earcut */ \"./extensions/CompGeom/node_modules/earcut/src/earcut.js\");\n/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(earcut__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bezier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bezier */ \"./extensions/CompGeom/bezier.js\");\n\n\n\n\n//Helper for converting complex HTML Canvas paths to simple polylines / polygons\n\n\nconst MOVETO = 0,\n  LINETO = 1,\n  ARC = 2,\n  ARCTO = 3,\n  QUADTO = 4,\n  CUBICTO = 5,\n  ELLIPSE = 6,\n  CLOSE = 7;\n\n\nlet _v2 = new THREE.Vector2();\nlet _tmpSize = new THREE.Vector2();\nlet _tmpBox = new THREE.Box2();\n\n// Tmp objct for Ellipse Arcs. We need delayed initialization,\n// because Autodesk.Extensions.CompGeom might not be available yet at compile time.\nlet _tmpArc = null;\nlet getTmpArc = () => {\n  _tmpArc = _tmpArc || new Autodesk.Extensions.CompGeom.EllipseArc();\n  return _tmpArc;\n};\n\nfunction Path2D(precisionTolerance) {\n  this.segTypes = [];\n  this.segData = [];\n  this.hasCurves = false;\n  this.bbox = new THREE.Box2();\n  this.precisionTolerance = precisionTolerance;\n}\n\n/** @static @property {boolean} */\nPath2D.FORCE_MITER_LINES_FOR_TESTING = false;\n\n// Optional: Use custom tesselation params for bezier arcs. Undefined sets to default.\nPath2D.prototype.setTessParams = function (tessParams) {\n  this.tessParams = tessParams;\n};\n\nPath2D.prototype.isClosedPath = function () {\n  return this.segTypes.length && this.segTypes[this.segTypes.length - 1] === CLOSE;\n};\n\nPath2D.prototype.isPoint = function () {\n  return this.segTypes.length == 2 && this.segTypes[0] === MOVETO && this.segTypes[1] === LINETO &&\n  this.segData[0] == this.segData[2] && this.segData[1] == this.segData[3];\n};\n\n\n\nPath2D.prototype.closePath = function () {\n  if (this.isClosedPath())\n  return;\n  this.segTypes.push(CLOSE);\n};\n\n\nPath2D.prototype.moveTo = function (x, y) {\n  this.segTypes.push(MOVETO);\n  this.segData.push(x, y);\n\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.lineTo = function (x, y) {\n  this.segTypes.push(LINETO);\n  this.segData.push(x, y);\n\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n  this.hasCurves = true;\n  this.segTypes.push(ARC);\n  this.segData.push(x, y, radius, startAngle, endAngle, anticlockwise);\n\n  this.bbox.expandByPoint(_v2.set(x, y)); //TODO: all corners\n};\n\nPath2D.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n  this.hasCurves = true;\n  this.segTypes.push(ARCTO);\n  this.segData.push(x1, y1, x2, y2, radius);\n\n  this.bbox.expandByPoint(_v2.set(x1, y1));\n  this.bbox.expandByPoint(_v2.set(x2, y2));\n};\n\nPath2D.prototype.quadraticCurveTo = function (cp1x, cp1y, x, y) {\n  this.hasCurves = true;\n  this.segTypes.push(QUADTO);\n  this.segData.push(cp1x, cp1y, x, y);\n\n  this.bbox.expandByPoint(_v2.set(cp1x, cp1y));\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n  this.hasCurves = true;\n  this.segTypes.push(CUBICTO);\n  this.segData.push(cp1x, cp1y, cp2x, cp2y, x, y);\n  this.bbox.expandByPoint(_v2.set(cp1x, cp1y));\n  this.bbox.expandByPoint(_v2.set(cp2x, cp2y));\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\n// for params, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse\nPath2D.prototype.ellipse = function (cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n\n  this.hasCurves = true;\n  this.segTypes.push(ELLIPSE);\n  this.segData.push(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n\n  // consider arc in bbox\n  const arcBox = getTmpArc().set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw).computeBBox(_tmpBox);\n  this.bbox.union(arcBox);\n};\n\nPath2D.prototype.flatten = function (forceCloseContours) {\n\n  var ret = new Path2D(this.precisionTolerance);\n\n  var dataOffset = 0;\n  var lastX = 0;\n  var lastY = 0;\n  var contourStartX = lastX;\n  var contourStartY = lastY;\n\n  var segTypes = this.segTypes;\n  var segData = this.segData;\n\n  let sz = this.bbox.getSize(_tmpSize).length();\n\n  for (var i = 0; i < segTypes.length; i++) {\n\n    var st = segTypes[i];\n\n    switch (st) {\n\n      case MOVETO:{\n          if (forceCloseContours) {\n            if (lastX !== contourStartX || lastY !== contourStartY) {\n              ret.closePath();\n            }\n          }\n\n          lastX = segData[dataOffset++];\n          lastY = segData[dataOffset++];\n          contourStartX = lastX;\n          contourStartY = lastY;\n          ret.moveTo(lastX, lastY);\n        }\n        break;\n      case CLOSE:\n        ret.closePath();\n        break;\n      case LINETO:{\n          var x = segData[dataOffset++];\n          var y = segData[dataOffset++];\n\n          if (x !== lastX || y !== lastY) {\n            ret.lineTo(x, y);\n\n            lastX = x;\n            lastY = y;\n          }\n        }\n        break;\n      case QUADTO:{\n          const cp1x = segData[dataOffset++],cp1y = segData[dataOffset++],\n            x = segData[dataOffset++],y = segData[dataOffset++];\n          (0,_bezier__WEBPACK_IMPORTED_MODULE_2__.TesselateQuad)(ret, lastX, lastY, cp1x, cp1y, x, y, sz, this.tessParams, !!this.isFontChar);\n\n          lastX = x;\n          lastY = y;\n        }\n        break;\n      case CUBICTO:{\n          const cp1x = segData[dataOffset++],cp1y = segData[dataOffset++],\n            cp2x = segData[dataOffset++],cp2y = segData[dataOffset++],\n            x = segData[dataOffset++],y = segData[dataOffset++];\n          (0,_bezier__WEBPACK_IMPORTED_MODULE_2__.TesselateCubic)(ret, lastX, lastY, cp1x, cp1y, cp2x, cp2y, x, y, sz, this.tessParams, !!this.isFontChar);\n          lastX = x;\n          lastY = y;\n        }\n        break;\n      case ARC:\n        console.warn(\"not implemented: arc\");\n        dataOffset += 6;\n        break;\n      case ARCTO:\n        console.warn(\"not implemented: arcto\");\n        dataOffset += 4;\n        break;\n      case ELLIPSE:{\n          // read ellipse params\n          var cx = segData[dataOffset++];\n          var cy = segData[dataOffset++];\n          var rx = segData[dataOffset++];\n          var ry = segData[dataOffset++];\n          var rotation = segData[dataOffset++];\n          var startAngle = segData[dataOffset++];\n          var endAngle = segData[dataOffset++];\n          var ccw = segData[dataOffset++];\n\n          // determine tesselation params\n          const tessParams = this.tessParams || _bezier__WEBPACK_IMPORTED_MODULE_2__.DefaultTessParams;\n          const maxSegments = tessParams.numIterations;\n          const minSegmentLength = tessParams.minSegLenFraction * sz;\n\n          // tesselate arc\n          const arc = getTmpArc().set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n          arc.tesselate(ret, maxSegments, minSegmentLength);\n\n          // Update lastX/lastY\n          // The last lineTo() appends x and y of the end position to ret.segData.\n          // So, we can always extract it from there.\n          lastX = ret.segData[ret.segData.length - 2];\n          lastY = ret.segData[ret.segData.length - 1];\n        }\n        break;\n    }\n  }\n\n  if (forceCloseContours) {\n    if (lastX !== contourStartX || lastY !== contourStartY) {\n      ret.closePath();\n    }\n  }\n\n  return ret;\n};\n\nPath2D.prototype.applyTransform = function (loader, xform) {\n\n  for (let i = 0; i < this.segData.length; i += 2) {\n\n    let x = this.segData[i];\n    let y = this.segData[i + 1];\n\n    this.segData[i] = loader.tx(x, y, xform);\n    this.segData[i + 1] = loader.ty(x, y, xform);\n  }\n};\n\nPath2D.prototype.stroke = function (loader, lineWidth, color, dbId, layerId, clipPathIn, applyTransform, lineStyle, lineCap) {\n  var needClipping = clipPathIn != null;\n  let subjFlatted = this;\n  if (applyTransform || this.hasCurves) {\n    subjFlatted = this.flatten(false);\n  }\n\n  var self = this;\n  // check whether we can do simple path\n  if (needClipping) {\n    var subPaths = [];\n    var subPath;\n    var segIndex = 0;\n    for (var i = 0; i < subjFlatted.segTypes.length; i++) {\n      if (subjFlatted.segTypes[i] == MOVETO) {\n        subPath = new Path2D(this.precisionTolerance);\n        subPaths.push(subPath);\n        subPath.moveTo(subjFlatted.segData[segIndex++], subjFlatted.segData[segIndex++]);\n      } else if (subjFlatted.segTypes[i] == LINETO) {var _subPath;\n        (_subPath = subPath) === null || _subPath === void 0 || _subPath.lineTo(subjFlatted.segData[segIndex++], subjFlatted.segData[segIndex++]);\n      } else if (subjFlatted.segTypes[i] == CLOSE) {var _subPath2;\n        (_subPath2 = subPath) === null || _subPath2 === void 0 || _subPath2.closePath();\n      }\n    }\n\n    // workaround for endless loops in ClipperLib.Clipper.AddPath()\n    // Some input paths with start==end that are marked as open will run into an endless loop when setting up internal data structures.\n    // This is a known issue without a fix. The workaround will simply make the end points non-identical.\n    // BLMV-8304, BLMV-8326: some degenerate input will cause ClipperLib to add points from the clip poly for no apparent reason.\n    //   Fix by ensuring there are no duplicate points. For simplicity, I slightly shift all coordinates by a tiny amount.\n    //   This might lead self-intersections. Not sure if this is a problem.\n    const fixInput = function (path) {\n      // coordinates here are given in inches, Math.pow(2, -32) is a small enough value to not have any visible impact\n      const tinyShift = Math.pow(2, -32);\n      for (let i = 1; i < path.length; i++) {\n        // perturb each coordinate by moving it towards the previous coordinate\n        // this should reduce the chance of self-intersections\n        const dx = path[i].X - path[i - 1].X;\n        const dy = path[i].Y - path[i - 1].Y;\n        if (Math.abs(dx) > Math.abs(dy)) {\n          if (dx > 0) {\n            path[i].X -= i * tinyShift;\n          } else {\n            path[i].X += i * tinyShift;\n          }\n        } else {\n          if (dy > 0) {\n            path[i].Y -= i * tinyShift;\n          } else {\n            path[i].Y += i * tinyShift;\n          }\n        }\n      }\n    };\n\n    var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n    var clips = clipFlatted.toClipperPath(loader, false);\n    subPaths.map((subPath) => {\n      // still need to do a check for each subPath\n      var subPreResult = self.preCheckForClipping(loader, clipFlatted, subPath, applyTransform, true);\n      if (subPreResult.needCancel) {\n        return;\n      } else if (subPreResult.needClipping && !subPath.isPoint()) {// points (i.e., lines of length 0) are not handled well by Clipper -> check separately\n        var myPath = subPath.toClipperPath(loader, applyTransform)[0];\n        if (!myPath) {\n          return;\n        }\n\n        if (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper.Orientation(myPath)) {\n          // LMV-5983\n          // turn closed paths to clockwise orientation\n          // to workaround a problem where anticlockwise self-intersecting paths ended up with\n          // a different order of vertices after clipping\n          myPath.reverse();\n        }\n\n        var solution = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyTree)();\n        var cpr = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper)();\n        // always treat myPath as open in order to get correct stroke clipping. Prevent endless loop in AddPath.\n        fixInput(myPath);\n        cpr.AddPath(myPath, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptSubject, false);\n        cpr.AddPaths(clips, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptClip, true);\n\n        cpr.Execute((clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().ClipType).ctIntersection, solution, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd);\n        strokeClipperSolution(solution);\n      } else if (!subPreResult.needClipping ||\n      clips.length == 1 && clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper.PointInPolygon({ X: subPath.segData[0], Y: subPath.segData[1] }, clips[0])) // if needClipping is true, subPath must be a point. So check if it's inside the clip polygon.\n        {\n          this.strokeFlattedPath(loader, subPath, lineWidth, color, dbId, layerId, applyTransform, lineStyle, lineCap);\n        }\n    });\n  } else {\n    // just draw all the segments\n    this.strokeFlattedPath(loader, subjFlatted, lineWidth, color, dbId, layerId, applyTransform, lineStyle, lineCap);\n  }\n\n  function strokeClipperSolution(solution) {\n    var node = solution.GetFirst();\n    while (node) {\n      self.strokeClipperContour(loader, node.Contour(), node.IsOpen, color, lineWidth, dbId, layerId, loader.currentVpId, lineStyle, false, lineCap);\n      node = node.GetNext();\n    }\n  }\n};\n\nPath2D.prototype.strokeFlattedPath = function (loader, flatted, lineWidth, color, dbId, layerId, applyTransform, lineStyle, lineCap) {\n  let segData = flatted.segData;\n  let segTypes = flatted.segTypes;\n\n  let xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n\n  // our shader only supports \"butt\" and \"round\" as line ends. Use round for \"square\" as well.\n  const lineEndButtCap = lineCap === \"butt\";\n\n  var dataOffset = 0;\n  var lastLastX = 0;\n  var lastLastY = 0;\n  var lastX = 0;\n  var lastY = 0;\n  var contourStartX = 0;\n  var contourStartY = 0;\n\n  for (var i = 0; i < segTypes.length; i++) {\n\n    var st = segTypes[i];\n\n    switch (st) {\n\n      case MOVETO:{\n          let tmpx = segData[dataOffset++];\n          let tmpy = segData[dataOffset++];\n\n          if (applyTransform) {\n            contourStartX = loader.tx(tmpx, tmpy, xform);\n            contourStartY = loader.ty(tmpx, tmpy, xform);\n          } else {\n            contourStartX = tmpx;\n            contourStartY = tmpy;\n          }\n\n          lastX = lastLastX = contourStartX;\n          lastY = lastLastY = contourStartY;\n        }\n        break;\n      case CLOSE:\n      case LINETO:{\n          let x, y;\n          if (st === CLOSE) {\n            x = contourStartX;\n            y = contourStartY;\n          } else {\n            let tmpx = segData[dataOffset++];\n            let tmpy = segData[dataOffset++];\n\n            if (applyTransform) {\n              x = loader.tx(tmpx, tmpy, xform);\n              y = loader.ty(tmpx, tmpy, xform);\n            } else {\n              x = tmpx;\n              y = tmpy;\n            }\n          }\n\n          // LMV-5336 - Paths that contain a moveTo and a lineTo at the same X, Y positions were not being drawn.\n          // Add the segment when the previous operation was moveTo.\n          const isPrevMoveTo = i > 0 && segTypes[i - 1] === MOVETO;\n          if (x !== lastX || y !== lastY || isPrevMoveTo) {\n\n            // lineCap only applies to real ends, i.e., if a line segment starts with a MOVETO, is the last segment and ends with a LINETO, or is followed by a MOVETO\n            const buttCapStart = lineEndButtCap && isPrevMoveTo;\n            const hasNext = i < segTypes.length - 1;\n            const buttCapEnd = lineEndButtCap && (!hasNext && st === LINETO || hasNext && segTypes[i + 1] === MOVETO);\n\n            //Use centerpoint for the initial inside check for better numeric stability,\n            //in case the start point is exactly on the clip polygon's edge, in which case the inside\n            //check would return a random result\n\n            //Segment is either completely inside or completely outside (does not intersect the clip path at all)\n            loader.flushBuffer(4);\n\n            if (this.isMiterLine || Path2D.FORCE_MITER_LINES_FOR_TESTING) {\n              let nextX = x;\n              let nextY = y;\n\n              const nextIsValid = hasNext && (segTypes[i + 1] === LINETO || segTypes[i + 1] === CLOSE);\n              if (st !== CLOSE && nextIsValid) {\n                let tmpx = segData[dataOffset + 0];\n                let tmpy = segData[dataOffset + 1];\n\n                if (applyTransform) {\n                  nextX = loader.tx(tmpx, tmpy, xform);\n                  nextY = loader.ty(tmpx, tmpy, xform);\n                } else {\n                  nextX = tmpx;\n                  nextY = tmpy;\n                }\n              }\n\n              loader.currentVbb.addMiterSegment(lastLastX, lastLastY, lastX, lastY, x, y, nextX, nextY,\n              /*totalDistance*/0, lineWidth, color, dbId, layerId, loader.currentVpId || 0, lineStyle, buttCapStart, buttCapEnd\n              );\n            } else {\n              loader.currentVbb.addSegment(lastX, lastY, x, y,\n              /*totalDistance*/0, lineWidth, color, dbId, layerId, loader.currentVpId || 0, lineStyle, buttCapStart, buttCapEnd\n              );\n            }\n\n            lastLastX = lastX;\n            lastLastY = lastY;\n            lastX = x;\n            lastY = y;\n          }\n        }\n        break;\n      default:{\n          console.error(\"Path must be flattened before rendering\");\n        }\n    }\n  }\n};\n\nPath2D.prototype.strokeClipperContour = function (loader, contour, isOpen, color, lineWidth, dbId, layerId, vpId, lineStyle, applyTransform, lineCap) {\n  let l = contour.length;\n  let lastIndex = isOpen ? 0 : l - 1;\n  let startIndex = isOpen ? 1 : 0;\n  let xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n\n  // our shader only supports \"butt\" and \"round\" as line ends. Use round for \"square\" as well.\n  const lineEndCap = lineCap === \"butt\";\n\n  let lastx = applyTransform ? loader.tx(contour[lastIndex].X, contour[lastIndex].Y, xform) : contour[lastIndex].X;\n  let lasty = applyTransform ? loader.ty(contour[lastIndex].X, contour[lastIndex].Y, xform) : contour[lastIndex].Y;\n  for (var i = startIndex; i < l; i++) {\n    let x = applyTransform ? loader.tx(contour[i].X, contour[i].Y, xform) : contour[i].X;\n    let y = applyTransform ? loader.ty(contour[i].X, contour[i].Y, xform) : contour[i].Y;\n\n    // lineEndCap only applies to real line ends, i.e., the beginning or end of an open contour\n    const capStart = lineEndCap && i === 0; // no need to test for isOpen, since i==0 cannot happen for open contours\n    const capEnd = lineEndCap && i === l - 1 && isOpen;\n\n    loader.flushBuffer(4);\n    loader.currentVbb.addSegment(lastx, lasty, x, y, 0, lineWidth, color, dbId, layerId, vpId, lineStyle, capStart, capEnd);\n    lastx = x, lasty = y;\n  }\n};\n\n//Checks if the path is a simple AABB.\n//Used to speed up polygon clipping operations.\nPath2D.prototype.isAABB = function () {\n\n  const EPS = 1e-10;\n  const ANGLE_EPS = 1e-3;\n\n  let st = this.segTypes;\n\n  if (st.length !== 6 && st.length !== 5)\n  return false;\n\n  if (st[0] !== MOVETO)\n  return false;\n\n  if (st.length === 6 && st[5] !== CLOSE)\n  return false;else\n  if (st.length === 5 && st[4] !== CLOSE && st[4] !== LINETO)\n  return false;\n\n  for (let i = 1; i < st.length - 1; i++)\n  if (st[i] !== LINETO)\n  return false;\n\n\n  let seg = this.segData;\n\n  //check segments 1 and 3 for parallel and same length\n  let dxA = seg[2] - seg[0];\n  let dyA = seg[3] - seg[1];\n  let dxC = seg[6] - seg[4];\n  let dyC = seg[7] - seg[5];\n  let lenA = Math.sqrt(dxA * dxA + dyA * dyA);\n  let lenC = Math.sqrt(dxC * dxC + dyC * dyC);\n\n  if (Math.abs(lenA - lenC) > EPS)\n  return false;\n\n  dxA /= lenA;dyA /= lenA;\n  dxC /= lenC;dyC /= lenC;\n  let dot = dxA * dxC + dyA * dyC;\n\n  if (Math.abs(1 + dot) > ANGLE_EPS)\n  return false;\n\n  //check segments 2 and 4 for parallel and same length\n  let dxB = seg[4] - seg[2];\n  let dyB = seg[5] - seg[3];\n  let dxD = seg[8] - seg[6];\n  let dyD = seg[9] - seg[7];\n  let lenB = Math.sqrt(dxB * dxB + dyB * dyB);\n  let lenD = Math.sqrt(dxD * dxD + dyD * dyD);\n\n  if (Math.abs(lenB - lenD) > EPS)\n  return false;\n\n  dxB /= lenB;dyB /= lenB;\n  dxD /= lenD;dyD /= lenD;\n  dot = dxB * dxD + dyB * dyD;\n\n  if (Math.abs(1 + dot) > ANGLE_EPS)\n  return false;\n\n  //make sure there is a right angle\n  dot = dxA * dxB + dyA * dyB;\n\n  if (Math.abs(dot) > ANGLE_EPS)\n  return false;\n\n  //make sure segments are vertical/horizontal\n  if (Math.abs(dxA) > EPS && Math.abs(dyA))\n  return false;\n\n  return true;\n};\n\nconst INSIDE = 1;\nconst OUTSIDE = 2;\nconst UNKNOWN = 4;\n\nfunction bboxOverlap(clipBox, pathBox, precisionTolerance) {\n\n  if (clipBox.containsBox(pathBox))\n  return INSIDE;\n\n  //The above AABB containment check is exact\n  //and sometimes misses cases where the bboxes are\n  //almost exactly equal, with very slight numeric noise in the values\n  //(which happens quite often with Revit PDFs)\n\n  //So now do another check if our bbox contains the input bbox within a tolerance\n  let EPS = precisionTolerance;\n\n  if (EPS === undefined) {\n    EPS = 1e-3 / clipBox.size().length();\n  }\n\n  if (pathBox.min.x - clipBox.max.x > EPS)\n  return OUTSIDE;\n  if (pathBox.min.y - clipBox.min.y > EPS)\n  return OUTSIDE;\n\n  if (pathBox.max.x - clipBox.max.x < -EPS)\n  return OUTSIDE;\n  if (pathBox.max.y - clipBox.max.y < -EPS)\n  return OUTSIDE;\n\n  if (pathBox.min.x - clipBox.min.x < -EPS)\n  return UNKNOWN;\n  if (pathBox.min.y - clipBox.min.y < -EPS)\n  return UNKNOWN;\n\n  if (pathBox.max.x - clipBox.max.x > EPS)\n  return UNKNOWN;\n  if (pathBox.max.y - clipBox.max.y > EPS)\n  return UNKNOWN;\n\n  return INSIDE;\n}\n\nPath2D.prototype.isAABBContain = function (bbox) {\n\n  if (!this.isAABB())\n  return UNKNOWN;\n\n  return bboxOverlap(this.bbox, bbox, this.precisionTolerance);\n};\n\n\nPath2D.prototype.clip = function (clipPathIn, mode) {\n  var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n  var subjFlatted = this.flattened || this.flatten(true);\n\n  var preResult = this.preCheckForClipping(null, clipFlatted, subjFlatted, false, false);\n  if (preResult.needCancel) {\n    console.warn(\"No overlap between nested clip regions.\");\n    return new Path2D();\n  } else if (preResult.needClipping == false) {\n    if (preResult.needSwapSubject) {\n      return clipPathIn;\n    } else {\n      return this;\n    }\n  } else {\n    // do the clipping here\n    var clips = clipFlatted.toClipperPath(null, false);\n    var myPath = subjFlatted.toClipperPath(null, false);\n\n    var solution = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyTree)();\n    var cpr = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper)();\n    cpr.AddPaths(myPath, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptSubject, true);\n    cpr.AddPaths(clips, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptClip, true);\n\n    cpr.Execute((clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().ClipType).ctIntersection, solution, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd);\n\n    // need to rebuild a path from the solution, no need to do the tesselation\n    let res = new Path2D(this.precisionTolerance);\n    var node = solution.GetFirst();\n    while (node) {\n      var contour = node.Contour();\n      for (var i = 0; i < contour.length; i++) {\n        if (i == 0) {\n          res.moveTo(contour[i].X, contour[i].Y);\n        } else {\n          res.lineTo(contour[i].X, contour[i].Y);\n        }\n      }\n\n      if (contour[contour.length - 1].X != contour[0].X || contour[contour.length - 1].Y != contour[0].Y) {\n        res.lineTo(contour[0].X, contour[0].Y);\n      }\n      node = node.GetNext();\n    }\n    return res;\n  }\n};\n\n/**\n * If segments type is 0, 1, 0, 1 pattern, we should avoid to do fill to it\n * Most of the time, it wants to be line segments, but from 2D, you can always pass a fill/stroke command to it.\n * Eatch MoveTo should start with a segment.\n */\nPath2D.prototype.isFillable = function () {\n  //Skip some easily detectable degenerate polygons that result in no fill\n  let p = this.flattened || this.flatten(true);\n  if (p.segTypes.length < 3) {\n    return false;\n  } else if (p.segTypes.length === 3) {\n    const isClosedLine = p.segTypes[2] === CLOSE && p.segTypes[1] === LINETO && p.segTypes[0] === MOVETO;\n    return !isClosedLine;\n  } else {\n    var isFillable = false;\n\n    for (var i = 0; i < p.segTypes.length; i += 2) {\n      if (!(p.segTypes[i] == MOVETO && p.segTypes[i + 1] == LINETO)) {\n        isFillable = true;\n        break;\n      }\n    }\n    return isFillable;\n  }\n};\n\nPath2D.prototype.fill = function (loader, color, dbId, layerId, clipPathIn, applyTransform, isFillStrokeCombo, fillRule) {\n  if (!this.isFillable()) {\n    return;\n  }\n\n  const clipperFillRule = fillRule === 'nonzero' ? (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftNonZero : (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd;\n\n  let subjFlatted = this.flattened || this.flatten(true);\n  var self = this;\n\n  function clipProcess() {\n    var needClipping = clipPathIn != null;\n    var needSwapSubject = false;\n    // check weather we can do simple path\n    if (needClipping) {\n      var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n\n      var preResult = self.preCheckForClipping(loader, clipFlatted, subjFlatted, applyTransform, false);\n      if (preResult.needCancel) {\n        return;\n      }\n\n      needClipping = preResult.needClipping;\n      needSwapSubject = preResult.needSwapSubject;\n    }\n\n    if (needClipping) {\n      const clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n      var clips = clipFlatted.toClipperPath(loader, false);\n      var myPath = subjFlatted.toClipperPath(loader, applyTransform);\n\n      var solution = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyTree)();\n      var cpr = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper)();\n      cpr.AddPaths(myPath, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptSubject, true);\n      cpr.AddPaths(clips, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptClip, true);\n\n      cpr.Execute((clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().ClipType).ctIntersection, solution, clipperFillRule, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd);\n\n      var polygons = self.getPolygonFromClipperSolution(solution);\n      return {\n        polygons,\n        appliedTransform: applyTransform,\n        needClipping\n      };\n    } else {\n      // if we use clip path directly as subject, we can not cache it, and should not apply transform to it\n      subjFlatted = !needSwapSubject ? subjFlatted : clipFlatted;\n      if (self.cached) {\n        return {\n          polygons: self.cached,\n          appliedTransform: false,\n          needClipping,\n          subjFlatted\n        };\n      } else {\n        const myPath = subjFlatted.toClipperPath(loader, false);\n\n        const solution = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyTree)();\n        const cpr = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper)();\n        cpr.AddPaths(myPath, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptSubject, true);\n        cpr.Execute((clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().ClipType).ctUnion, solution, clipperFillRule, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd);\n        const polygons = self.getPolygonFromClipperSolution(solution);\n        if (!needSwapSubject) {\n          self.cached = polygons;\n        }\n        return {\n          polygons,\n          appliedTransform: needSwapSubject, // clipPath has already applied transform\n          needClipping,\n          subjFlatted\n        };\n      }\n    }\n  }\n\n  function fillPolygon(polygon, needApplytransform, needClipping) {\n    var vertices = polygon.vertices;\n\n    if (needApplytransform) {\n      var xform = loader.getCurrentTransform();\n      var vertices1 = [];\n      for (var i = 0; i < vertices.length; i += 2) {\n        let x = loader.tx(vertices[i], vertices[i + 1], xform);\n        let y = loader.ty(vertices[i], vertices[i + 1], xform);\n        vertices1.push(x, y);\n      }\n      vertices = vertices1;\n    }\n    loader.addPolyTriangle(vertices, polygon.indices, color, dbId, layerId, false);\n\n    // do the antialias stroke here\n    if (!isFillStrokeCombo) {\n      if (needClipping || !self.isFontChar) {\n        for (var c in polygon.contours) {\n          self.strokeClipperContour(loader, polygon.contours[c], true, color, -0.5, dbId, layerId, loader.currentVpId, 0, needApplytransform);\n        }\n      } else {\n        // stroke the line with the original flatted path\n        self.strokeFlattedPath(loader, result.subjFlatted, -0.5, color, dbId, layerId, needApplytransform, 0);\n      }\n    }\n  }\n\n  var result = clipProcess();\n  if (result) {\n    result.polygons.map((polygon) => {\n      var needApplytransform = applyTransform && !result.appliedTransform;\n      fillPolygon(polygon, needApplytransform, result.needClipping);\n    });\n  }\n};\n\n\nPath2D.prototype.toClipperPath = function (loader, applyTransform) {\n  var paths = [];\n  var path = [];\n  var segTypes = this.segTypes;\n  var segData = this.segData;\n  var segIndex = 0;\n  var xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n\n  function addPoint(path, point) {\n    if (applyTransform) {\n      let x = loader.tx(point.X, point.Y, xform);\n      let y = loader.ty(point.X, point.Y, xform);\n      point.X = x;\n      point.Y = y;\n    }\n\n    if (path.length > 0 && (path[path.length - 1].X != point.X || path[path.length - 1].Y != point.Y) || path.length == 0) {\n      path.push(point);\n    }\n  }\n\n  for (var i = 0; i < segTypes.length; i++) {\n    if (segTypes[i] == MOVETO) {\n      if (path && path.length > 1) {\n        paths.push(path);\n      }\n      path = [];\n      addPoint(path, { X: segData[segIndex++], Y: segData[segIndex++] });\n    } else if (segTypes[i] == LINETO) {\n      addPoint(path, { X: segData[segIndex++], Y: segData[segIndex++] });\n    } else if (segTypes[i] == CLOSE) {\n      path.push({ X: path[0].X, Y: path[0].Y });\n      paths.push(path);\n      path = [];\n    }\n  }\n\n  if (path && path.length > 1) {\n    paths.push(path);\n  }\n\n  return paths;\n};\n\nPath2D.prototype.hasIntersection = function (box1, box2, tolerance) {\n  return !(box1.max.x - box2.min.x <= -tolerance || // left\n  box1.max.y - box2.min.y <= -tolerance || // bottom\n  box1.min.x - box2.max.x >= tolerance || // right\n  box1.min.y - box2.max.y >= tolerance); // top\n};\n\nPath2D.prototype.preCheckForClipping = function (loader, clipFlatted, subjFlatted, applyTransform, strokeOnly) {\n  var clipBound = clipFlatted.bbox;\n  var subjBound = subjFlatted.bbox;\n\n  if (applyTransform) {\n    let xform = loader.getCurrentTransform();\n    // we need to apply transform to the subject bounds\n    subjBound = loader.transformBox(subjBound, xform, _tmpBox);\n  }\n\n  // do a simple check if two bounds has no overlap, set need cancel to true\n  if (!this.hasIntersection(clipBound, subjBound, this.precisionTolerance)) {\n    return {\n      needCancel: true\n    };\n  } else if (clipFlatted.isAABB() && clipBound.containsBox(subjBound)) {\n    return {\n      needClipping: false\n    };\n  } else\n  if (subjFlatted.isAABB() && subjBound.containsBox(clipBound)) {\n    // there is nothing to stroke\n    if (strokeOnly) {\n      return {\n        needCancel: true\n      };\n    } else {\n      return {\n        needClipping: false,\n        needSwapSubject: true\n      };\n    }\n  } else\n  {\n    return {\n      needClipping: true\n    };\n  }\n};\n\nPath2D.prototype.getPolygonFromClipperSolution = function (solution) {\n  function addContour(contours, vertices, contour) {\n    for (var i = 0; i < contour.length; i++) {\n      vertices.push(contour[i].X, contour[i].Y);\n    }\n    contours.push(contour);\n  }\n\n  var exPolygons = clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().JS.PolyTreeToExPolygons(solution);\n  var polygons = exPolygons.map((item) => {\n    var vertices = [];\n    var holeIndices = [];\n    var contours = [];\n\n    // clipper library has some defect when we use 4 thickline to construct a rectangle with border\n    // It flipped the hole and outer\n    // Add this logic to flip it back to the correct value\n    if (item.holes.length == 1 && Math.abs(clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().JS.AreaOfPolygons(item.holes)) > Math.abs(clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().JS.AreaOfPolygon(item.outer))) {\n      let temp = item.holes[0];\n      item.holes[0] = item.outer;\n      item.outer = temp;\n    }\n    addContour(contours, vertices, item.outer);\n\n    item.holes.map((hole) => {\n      holeIndices.push(vertices.length / 2);\n      addContour(contours, vertices, hole);\n    });\n\n    var indices = earcut__WEBPACK_IMPORTED_MODULE_1___default()(vertices, holeIndices);\n    return {\n      vertices,\n      indices,\n      holeIndices,\n      contours\n    };\n  });\n\n  return polygons;\n};\n\n\nPath2D.prototype.msdfClipping = function (clipFlatted) {\n  var subjFlatted = this.flattened || this.flatten(true);\n  var myPath = subjFlatted.toClipperPath(null, false);\n  var clips = clipFlatted.toClipperPath(null, false);\n\n  var solution = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyTree)();\n  var cpr = new (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().Clipper)();\n  cpr.AddPaths(myPath, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptSubject, true);\n  cpr.AddPaths(clips, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyType).ptClip, true);\n\n  cpr.Execute((clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().ClipType).ctIntersection, solution, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd, (clipper_lib_fpoint__WEBPACK_IMPORTED_MODULE_0___default().PolyFillType).pftEvenOdd);\n\n  return this.getPolygonFromClipperSolution(solution);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/path2d.js\n");

/***/ }),

/***/ "./extensions/CompGeom/point-list.js":
/*!*******************************************!*\
  !*** ./extensions/CompGeom/point-list.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniquePointList: () => (/* binding */ UniquePointList)\n/* harmony export */ });\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n/* harmony import */ var _quad_tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quad-tree */ \"./extensions/CompGeom/quad-tree.js\");\n/* harmony import */ var _ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ThirdParty/lmv_poly2tri */ \"./extensions/CompGeom/ThirdParty/lmv_poly2tri.js\");\n/* harmony import */ var _ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _src_wgs_scene_LmvVector3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/wgs/scene/LmvVector3 */ \"./src/wgs/scene/LmvVector3.js\");\n\n\n\n\n\n\nconst tmpVec3 = new _src_wgs_scene_LmvVector3__WEBPACK_IMPORTED_MODULE_3__.LmvVector3();\nclass UniquePointList {\n\n  constructor(bbox, precisionTolerance, VertexConstructor, useQuadTree) {\n\n    this.bbox = bbox;\n    this.boxSize = this.bbox.getSize(tmpVec3).length();\n\n    if (typeof precisionTolerance === \"number\") {\n      //Input is in model units, e.g. if model is in feet,\n      //precision tolerance has to be in feet\n      this.precisionTolerance = precisionTolerance;\n      this.scale = 1.0 / this.precisionTolerance;\n    } else {\n      this.precisionTolerance = _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL * this.boxSize;\n      this.scale = 1.0 / this.precisionTolerance;\n    }\n\n    this.precisionToleranceSq = this.precisionTolerance * this.precisionTolerance;\n\n    this.snapBaseX = this.bbox.min.x; ///- 0.5 * this.precisionTolerance;\n    this.snapBaseY = this.bbox.min.y; //- 0.5 * this.precisionTolerance;\n\n\n    this.pts = [];\n    this.xymap = new Map();\n\n    if (useQuadTree)\n    this.quadTreeVerts = new _quad_tree__WEBPACK_IMPORTED_MODULE_1__.QuadTree(bbox.min.x, bbox.min.y, bbox.max.x, bbox.max.y, precisionTolerance);\n\n    this.vertexConstructor = VertexConstructor;\n  }\n\n  findOrAddPoint(px, py, dbIds) {\n\n    //Snap the vertex to our desired granularity\n    let x = 0 | ( /*Math.round*/(px - this.snapBaseX) * this.scale);\n    let y = 0 | ( /*Math.round*/(py - this.snapBaseY) * this.scale);\n\n    //Find the nearest snapped vertex or create new\n    let v;\n    let minDist = Infinity;\n    //Look in the 9 square area surrounding the vertex\n    for (let i = x - 1; i <= x + 1; i++) {\n      let mx = this.xymap.get(i);\n      if (!mx)\n      continue;\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        let tmp = mx.get(j);\n        if (!tmp)\n        continue;\n\n        let dist = (tmp.x - px) * (tmp.x - px) + (tmp.y - py) * (tmp.y - py);\n\n        if (dist < minDist) {\n          v = tmp;\n          minDist = dist;\n        }\n      }\n    }\n\n    if (minDist > this.precisionToleranceSq)\n    v = undefined;\n\n    if (v === undefined) {\n      let mx = this.xymap.get(x);\n\n      if (!mx) {\n        mx = new Map();\n        this.xymap.set(x, mx);\n      }\n\n      v = this.vertexConstructor ? new this.vertexConstructor(px, py) : new (_ThirdParty_lmv_poly2tri__WEBPACK_IMPORTED_MODULE_2___default().Point)(px, py);\n      mx.set(y, v);\n      v.id = this.pts.length;\n      this.pts.push(v);\n\n      if (this.quadTreeVerts)\n      this.quadTreeVerts.addItem(v);\n    }\n\n    //Remember the source object that's adding this vertex\n    if (typeof dbIds !== \"undefined\") {\n      if (typeof dbIds === \"number\") {\n        if (v.dbIds.indexOf(dbIds) === -1)\n        v.dbIds.push(dbIds);\n      } else if (dbIds) {\n        for (let i = 0; i < dbIds.length; i++) {\n          let dbId = dbIds[i];\n          if (v.dbIds.indexOf(dbId) === -1)\n          v.dbIds.push(dbId);\n        }\n      }\n      v.dbIdsChanged = true;\n    }\n\n    return v;\n  }\n\n\n  forEach(f) {\n    this.pts.forEach(f);\n  }\n\n  delete(v) {\n    this.pts[v.id] = undefined;\n\n    if (this.quadTreeVerts)\n    this.quadTreeVerts.deleteItem(v);\n  }\n\n  //filters out null entries from the point list\n  compact() {\n\n    let pts = [];\n\n    for (let i = 0, len = this.pts.length; i < len; i++) {\n      let v = this.pts[i];\n      if (!v)\n      continue;\n\n      v.oldid = v.id;\n      v.id = pts.length;\n      pts.push(v);\n    }\n\n    this.pts = pts;\n\n  }\n\n  enumInBox(minx, miny, maxx, maxy, f) {\n    this.quadTreeVerts.enumInBox(minx, miny, maxx, maxy, f);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/point-list.js\n");

/***/ }),

/***/ "./extensions/CompGeom/quad-tree.js":
/*!******************************************!*\
  !*** ./extensions/CompGeom/quad-tree.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuadTree: () => (/* binding */ QuadTree)\n/* harmony export */ });\n/* harmony import */ var _x_line_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./x-line-box */ \"./extensions/CompGeom/x-line-box.js\");\n/* harmony import */ var _x_box_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./x-box-box */ \"./extensions/CompGeom/x-box-box.js\");\n\n\n\n//Spatial index data structure for fast lookup of line segments or points.\n//\n// It can also be used for other kinds of items. For this, you can specify an itemHandler, which tells the quadtree\n// how to work with the items. It must provide two functions:\n//\n// itemHandler = {\n//    // Check wheter the (bbox of) this item intersects with the given one\n//    insersectsBox: function(item, xmin, ymin, xmax, ymax) {...},\n//\n//    // Set 'outPoint' to a point on or close to the item, e.g. bbox center. outPoint is a {x, y} pair.\n//    getPoint: function(item, outPoint) {...}\n//  }\n\n\n\nconst ITEMS_PER_NODE = 16;\nconst EPS = 1e-20;\n\nlet logger;\n\nconst tmpPoint = { x: 0, y: 0 };\n\nclass QuadTree {\n\n  constructor(minx, miny, maxx, maxy, extraDistance, itemHandler) {\n\n    this.items = [];\n    this.children = null;\n    this.itemCount = 0;\n\n    this.extraDistance = extraDistance;\n\n    this.minx = minx;\n    this.miny = miny;\n    this.maxx = maxx;\n    this.maxy = maxy;\n\n    this.itemHandler = itemHandler;\n\n    logger = Autodesk.Viewing.Private.logger;\n  }\n\n\n  addItem(e) {\n\n    //TODO: must check if item fits inside our total bbox\n    //before adding. In such case we may have to expand the\n    //tree somehow\n\n    this.itemCount++;\n\n    if (this.children) {\n      let overlapCount = 0;\n      let whichChild = null;\n\n      for (let i = 0; i < 4; i++) {\n        if (this.children[i].intersectsItem(e)) {\n          whichChild = this.children[i];\n          overlapCount++;\n        }\n      }\n\n      if (overlapCount === 1) {\n        whichChild.addItem(e);\n      } else if (overlapCount !== 0) {\n        this.items.push(e);\n      }\n\n    } else {\n      this.items.push(e);\n\n      if (this.items.length > ITEMS_PER_NODE)\n      this.subdivide();\n    }\n\n    return this.itemCount;\n  }\n\n  deleteItem(e) {\n\n    if (!this.intersectsItem(e))\n    return 0;\n\n    if (this.items) {\n      let idx = this.items.indexOf(e);\n      if (idx >= 0) {\n        this.items.splice(idx, 1);\n        this.itemCount--;\n        return 1;\n      }\n    }\n\n    if (this.children) {\n      let deleteCount = 0;\n      let remainingItemsCount = 0;\n      for (let i = 0; i < 4; i++) {\n        deleteCount += this.children[i].deleteItem(e);\n        remainingItemsCount += this.children[i].itemCount;\n      }\n\n      if (remainingItemsCount < ITEMS_PER_NODE) {\n\n        //TODO: un-split the node here\n      }\n      if (deleteCount === 1) {\n        this.itemCount--;\n        return 1;\n      } else {\n        logger.warn(\"Did not find item to delete. Something is wrong.\", deleteCount);\n        return 0;\n      }\n    }\n\n    return 0;\n  }\n\n  intersectsBox(minx, miny, maxx, maxy) {\n\n    let d = this.extraDistance;\n\n    return (0,_x_box_box__WEBPACK_IMPORTED_MODULE_1__.xBoxBox)(minx, miny, maxx, maxy,\n    this.minx - d, this.miny - d, this.maxx + d, this.maxy + d);\n  }\n\n  intersectsItem(e) {\n\n    if (this.itemHandler) {\n      return this.itemHandler.intersectsBox(e,\n      this.minx - this.extraDistance, this.miny - this.extraDistance,\n      this.maxx + this.extraDistance, this.maxy + this.extraDistance\n      );\n    } else if (e.v1) {\n      //Edge\n      return (0,_x_line_box__WEBPACK_IMPORTED_MODULE_0__.xLineBox)(e.v1.x, e.v1.y, e.v2.x, e.v2.y,\n      this.minx - this.extraDistance, this.miny - this.extraDistance,\n      this.maxx + this.extraDistance, this.maxy + this.extraDistance);\n    } else {\n      //Vertex\n      return this.intersectsBox(e.x, e.y, e.x, e.y);\n    }\n  }\n\n  findSplitPoint() {\n    //determine split location -- we split along the\n    //midpoint of actual data inside the node\n    let xs = [];\n    let ys = [];\n\n    if (this.itemHandler) {\n      for (let i = 0; i < this.items.length; i++) {\n        this.itemHandler.getPoint(this.items[i], tmpPoint);\n        xs.push(tmpPoint.x);\n        ys.push(tmpPoint.y);\n      }\n    } else if (this.items[0].v1) {\n      for (let i = 0; i < this.items.length; i++) {\n        xs.push(this.items[i].v1.x);\n        ys.push(this.items[i].v1.y);\n      }\n    } else {\n      for (let i = 0; i < this.items.length; i++) {\n        xs.push(this.items[i].x);\n        ys.push(this.items[i].y);\n      }\n    }\n\n    xs.sort((a, b) => {return a - b;});\n    ys.sort((a, b) => {return a - b;});\n\n    //Split slightly to the left of the median min point for all edge items\n    let midx = xs[0 | (xs.length + 1) / 2] - this.extraDistance - EPS;\n    let midy = ys[0 | (ys.length + 1) / 2] - this.extraDistance - EPS;\n\n    if (midx <= this.minx || midx >= this.maxx || midy <= this.miny || midy >= this.maxy) {\n      //logger.warn(\"Failed to split quad tree node. Something is wrong with the split choice.\");\n      return null;\n    }\n\n    return { midx, midy };\n  }\n\n\n  subdivide() {\n\n    if (this.children) {\n      logger.error(\"Attempt to subdivide already split node\");\n      return;\n    }\n\n    if (!this.items.length) {\n      logger.error(\"Attempt to subdivide empty node\");\n      return;\n    }\n\n    let minx = this.minx;\n    let miny = this.miny;\n    let maxx = this.maxx;\n    let maxy = this.maxy;\n\n    //determine split location -- we split along the\n    //midpoint of actual data inside the node\n    let split = this.findSplitPoint();\n\n    if (!split) {\n      //logger.warn(\"Failed to split node\");\n      return;\n    }\n\n    let { midx, midy } = split;\n\n    this.children = new Array(4);\n    this.children[0] = new QuadTree(minx, miny, midx, midy, this.extraDistance, this.itemHandler);\n    this.children[1] = new QuadTree(midx, miny, maxx, midy, this.extraDistance, this.itemHandler);\n    this.children[2] = new QuadTree(midx, midy, maxx, maxy, this.extraDistance, this.itemHandler);\n    this.children[3] = new QuadTree(minx, midy, midx, maxy, this.extraDistance, this.itemHandler);\n\n    let keepItems = [];\n\n    for (let i = 0, iEnd = this.items.length; i < iEnd; i++) {\n\n      let overlapCount = 0;\n      let whichChild = null;\n\n      for (let j = 0; j < 4; j++) {\n        if (this.children[j].intersectsItem(this.items[i])) {\n          whichChild = this.children[j];\n          overlapCount++;\n        }\n      }\n\n      if (overlapCount === 0) {\n        logger.error(\"Expected at least one overlap\");\n      } else if (overlapCount === 1) {\n        whichChild.addItem(this.items[i]);\n      } else {\n        keepItems.push(this.items[i]);\n      }\n    }\n\n    this.items = keepItems;\n  }\n\n  enumNearItems(e, cb) {\n\n    if (!this.intersectsItem(e))\n    return;\n\n    if (this.items) {\n      for (let i = 0; i < this.items.length; i++) {\n        cb(this.items[i]);\n      }\n    }\n\n    if (this.children) {\n      for (let i = 0; i < 4; i++) {\n        this.children[i].enumNearItems(e, cb);\n      }\n    }\n\n  }\n\n  enumInBox(minx, miny, maxx, maxy, cb) {\n\n    if (!this.intersectsBox(minx, miny, maxx, maxy))\n    return;\n\n    if (this.items) {\n      for (let i = 0; i < this.items.length; i++) {\n        let e = this.items[i];\n\n        if (this.itemHandler) {\n          if (this.itemHandler.intersectsBox(e, minx, miny, maxx, maxy)) {\n            cb(e);\n          }\n        } else if (e.v1) {\n          if ((0,_x_line_box__WEBPACK_IMPORTED_MODULE_0__.xLineBox)(e.v1.x, e.v1.y, e.v2.x, e.v2.y, minx, miny, maxx, maxy))\n          cb(e);\n        } else {\n          if ((0,_x_box_box__WEBPACK_IMPORTED_MODULE_1__.xBoxBox)(e.x, e.y, e.x, e.y, minx, miny, maxx, maxy))\n          cb(e);\n        }\n      }\n    }\n\n    if (this.children) {\n      for (let i = 0; i < 4; i++) {\n        this.children[i].enumInBox(minx, miny, maxx, maxy, cb);\n      }\n    }\n\n  }\n\n\n  pointInPolygonRec(e, x, y) {\n\n    // get the last point in the polygon\n    var vtx0X = e.v1.x;\n    var vtx0Y = e.v1.y;\n\n    // get test bit for above/below X axis\n    var yflag0 = vtx0Y >= y;\n\n    var vtx1X = e.v2.x;\n    var vtx1Y = e.v2.y;\n\n    var yflag1 = vtx1Y >= y;\n\n    // Check if endpoints straddle (are on opposite sides) of X axis\n    // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n    // The old test also checked whether the endpoints are both to the\n    // right or to the left of the test point.  However, given the faster\n    // intersection point computation used below, this test was found to\n    // be a break-even proposition for most polygons and a loser for\n    // triangles (where 50% or more of the edges which survive this test\n    // will cross quadrants and so have to have the X intersection computed\n    // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n    // the \"both left or both right\" part of my code.\n    if (yflag0 != yflag1)\n    {\n      // Check intersection of pgon segment with +X ray.\n      // Note if >= point's X; if so, the ray hits it.\n      // The division operation is avoided for the \">=\" test by checking\n      // the sign of the first vertex wrto the test point; idea inspired\n      // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n      // polygon inclusion tests.\n      if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n      (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n      {\n        this.pipResult = !this.pipResult;\n      }\n    }\n\n  }\n\n  pointInPolygon(x, y) {\n\n    this.pipResult = false;\n\n    this.enumInBox(-Infinity, y, Infinity, y, (item) => {\n\n      this.pointInPolygonRec(item, x, y);\n\n    });\n\n    return this.pipResult;\n\n  }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/quad-tree.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-box-box.js":
/*!******************************************!*\
  !*** ./extensions/CompGeom/x-box-box.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xBoxBox: () => (/* binding */ xBoxBox)\n/* harmony export */ });\n\nfunction xBoxBox(minx1, miny1, maxx1, maxy1,\nminx2, miny2, maxx2, maxy2) {\n\n  return minx1 <= maxx2 &&\n  miny1 <= maxy2 &&\n  maxx1 >= minx2 &&\n  maxy1 >= miny2;\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL3gtYm94LWJveC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUNPLFNBQVNBLE9BQU9BLENBQUNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUs7QUFDakNDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTs7RUFFekMsT0FBU1AsS0FBSyxJQUFJTSxLQUFLO0VBQ2ZMLEtBQUssSUFBSU0sS0FBTTtFQUNmTCxLQUFLLElBQUlFLEtBQU07RUFDZkQsS0FBSyxJQUFJRSxLQUFNOztBQUUzQiIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL3gtYm94LWJveC5qcz9hOWY2Il0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGZ1bmN0aW9uIHhCb3hCb3gobWlueDEsIG1pbnkxLCBtYXh4MSwgbWF4eTEsXG4gICAgICAgICAgICAgICAgIG1pbngyLCBtaW55MiwgbWF4eDIsIG1heHkyKSB7XG5cbiAgICByZXR1cm4gKChtaW54MSA8PSBtYXh4MilcbiAgICAgICAgJiYgKG1pbnkxIDw9IG1heHkyKVxuICAgICAgICAmJiAobWF4eDEgPj0gbWlueDIpXG4gICAgICAgICYmIChtYXh5MSA+PSBtaW55MikpO1xuXG59XG4iXSwibmFtZXMiOlsieEJveEJveCIsIm1pbngxIiwibWlueTEiLCJtYXh4MSIsIm1heHkxIiwibWlueDIiLCJtaW55MiIsIm1heHgyIiwibWF4eTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-box-box.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-box-plane.js":
/*!********************************************!*\
  !*** ./extensions/CompGeom/x-box-plane.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xBoxPlane: () => (/* binding */ xBoxPlane)\n/* harmony export */ });\n\nvar point = new THREE.Vector3();\n\nfunction xBoxPlane(plane, box) {\n\n  point.set(box.min.x, box.min.y, box.min.z); // 000\n  var d = plane.distanceToPoint(point);\n  var s = Math.sign(d);\n\n  point.set(box.min.x, box.min.y, box.max.z); // 001\n  var d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.min.x, box.max.y, box.min.z); // 010\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.min.x, box.max.y, box.max.z); // 011\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.min.y, box.min.z); // 100\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.min.y, box.max.z); // 101\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.max.y, box.min.z); // 110\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.max.y, box.max.z); // 111\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  return false;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1AsQ0FBQyxFQUFFSixHQUFHLENBQUNFLEdBQUcsQ0FBQ0csQ0FBRSxDQUFDLENBQUMsQ0FBQztFQUM5Q08sRUFBRSxHQUFHYixLQUFLLENBQUNRLGVBQWUsQ0FBQ1osS0FBSyxDQUFDO0VBQ2pDLElBQUljLElBQUksQ0FBQ0MsSUFBSSxDQUFDRSxFQUFFLENBQUMsS0FBS0osQ0FBQztFQUNuQixPQUFPLElBQUk7O0VBRWZiLEtBQUssQ0FBQ00sR0FBRyxDQUFFRCxHQUFHLENBQUNXLEdBQUcsQ0FBQ1IsQ0FBQyxFQUFFSCxHQUFHLENBQUNXLEdBQUcsQ0FBQ1AsQ0FBQyxFQUFFSixHQUFHLENBQUNXLEdBQUcsQ0FBQ04sQ0FBRSxDQUFDLENBQUMsQ0FBQztFQUM5Q08sRUFBRSxHQUFHYixLQUFLLENBQUNRLGVBQWUsQ0FBQ1osS0FBSyxDQUFDO0VBQ2pDLElBQUljLElBQUksQ0FBQ0MsSUFBSSxDQUFDRSxFQUFFLENBQUMsS0FBS0osQ0FBQztFQUNuQixPQUFPLElBQUk7O0VBRWYsT0FBTyxLQUFLO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvQ29tcEdlb20veC1ib3gtcGxhbmUuanM/NzY2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBwb2ludCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB4Qm94UGxhbmUocGxhbmUsIGJveCkge1xuXG4gICAgcG9pbnQuc2V0KCBib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1pbi56ICk7IC8vIDAwMFxuICAgIHZhciBkID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KHBvaW50KTtcbiAgICB2YXIgcyA9IE1hdGguc2lnbihkKTtcblxuICAgIHBvaW50LnNldCggYm94Lm1pbi54LCBib3gubWluLnksIGJveC5tYXgueiApOyAvLyAwMDFcbiAgICB2YXIgZDIgPSBwbGFuZS5kaXN0YW5jZVRvUG9pbnQocG9pbnQpO1xuICAgIGlmIChNYXRoLnNpZ24oZDIpICE9PSBzKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIHBvaW50LnNldCggYm94Lm1pbi54LCBib3gubWF4LnksIGJveC5taW4ueiApOyAvLyAwMTBcbiAgICBkMiA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludChwb2ludCk7XG4gICAgaWYgKE1hdGguc2lnbihkMikgIT09IHMpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcG9pbnQuc2V0KCBib3gubWluLngsIGJveC5tYXgueSwgYm94Lm1heC56ICk7IC8vIDAxMVxuICAgIGQyID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KHBvaW50KTtcbiAgICBpZiAoTWF0aC5zaWduKGQyKSAhPT0gcylcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBwb2ludC5zZXQoIGJveC5tYXgueCwgYm94Lm1pbi55LCBib3gubWluLnogKTsgLy8gMTAwXG4gICAgZDIgPSBwbGFuZS5kaXN0YW5jZVRvUG9pbnQocG9pbnQpO1xuICAgIGlmIChNYXRoLnNpZ24oZDIpICE9PSBzKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIHBvaW50LnNldCggYm94Lm1heC54LCBib3gubWluLnksIGJveC5tYXgueiApOyAvLyAxMDFcbiAgICBkMiA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludChwb2ludCk7XG4gICAgaWYgKE1hdGguc2lnbihkMikgIT09IHMpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcG9pbnQuc2V0KCBib3gubWF4LngsIGJveC5tYXgueSwgYm94Lm1pbi56ICk7IC8vIDExMFxuICAgIGQyID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KHBvaW50KTtcbiAgICBpZiAoTWF0aC5zaWduKGQyKSAhPT0gcylcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBwb2ludC5zZXQoIGJveC5tYXgueCwgYm94Lm1heC55LCBib3gubWF4LnogKTsgLy8gMTExXG4gICAgZDIgPSBwbGFuZS5kaXN0YW5jZVRvUG9pbnQocG9pbnQpO1xuICAgIGlmIChNYXRoLnNpZ24oZDIpICE9PSBzKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6WyJwb2ludCIsIlRIUkVFIiwiVmVjdG9yMyIsInhCb3hQbGFuZSIsInBsYW5lIiwiYm94Iiwic2V0IiwibWluIiwieCIsInkiLCJ6IiwiZCIsImRpc3RhbmNlVG9Qb2ludCIsInMiLCJNYXRoIiwic2lnbiIsIm1heCIsImQyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-box-plane.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-line-box.js":
/*!*******************************************!*\
  !*** ./extensions/CompGeom/x-line-box.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xLineBox: () => (/* binding */ xLineBox)\n/* harmony export */ });\n\nconst INSIDE = 0; // 0000\nconst LEFT = 1; // 0001\nconst RIGHT = 2; // 0010\nconst BOTTOM = 4; // 0100\nconst TOP = 8; // 1000\n\n// Compute the bit code for a point (x, y) using the clip rectangle\n// bounded diagonally by (xmin, ymin), and (xmax, ymax)\n\nfunction ComputeOutCode(x, y, xmin, ymin, xmax, ymax)\n{\n  let code;\n\n  code = INSIDE; // initialised as being inside of [[clip window]]\n\n  if (x < xmin) // to the left of clip window\n    code |= LEFT;else\n  if (x > xmax) // to the right of clip window\n    code |= RIGHT;\n  if (y < ymin) // below the clip window\n    code |= BOTTOM;else\n  if (y > ymax) // above the clip window\n    code |= TOP;\n\n  return code;\n}\n\n// Cohen–Sutherland clipping algorithm clips a line from\n// P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with\n// diagonal from (xmin, ymin) to (xmax, ymax).\nfunction xLineBox(x0, y0, x1, y1, xmin, ymin, xmax, ymax)\n{\n  // compute outcodes for P0, P1, and whatever point lies outside the clip rectangle\n  let outcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n  let outcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n  let accept = false;\n\n  while (true) {\n    if (!(outcode0 | outcode1)) {\n      // bitwise OR is 0: both points inside window; trivially accept and exit loop\n      accept = true;\n      break;\n    } else if (outcode0 & outcode1) {\n      // bitwise AND is not 0: both points share an outside zone (LEFT, RIGHT, TOP,\n      // or BOTTOM), so both must be outside window; exit loop (accept is false)\n      break;\n    } else {\n      // failed both tests, so calculate the line segment to clip\n      // from an outside point to an intersection with clip edge\n      let x, y;\n\n      // At least one endpoint is outside the clip rectangle; pick it.\n      let outcodeOut = outcode0 ? outcode0 : outcode1;\n\n      // Now find the intersection point;\n      // use formulas:\n      //   slope = (y1 - y0) / (x1 - x0)\n      //   x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax\n      //   y = y0 + slope * (xm - x0), where xm is xmin or xmax\n      // No need to worry about divide-by-zero because, in each case, the\n      // outcode bit being tested guarantees the denominator is non-zero\n      if (outcodeOut & TOP) {// point is above the clip window\n        x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);\n        y = ymax;\n      } else if (outcodeOut & BOTTOM) {// point is below the clip window\n        x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);\n        y = ymin;\n      } else if (outcodeOut & RIGHT) {// point is to the right of clip window\n        y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);\n        x = xmax;\n      } else if (outcodeOut & LEFT) {// point is to the left of clip window\n        y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);\n        x = xmin;\n      }\n\n      // Now we move outside point to intersection point to clip\n      // and get ready for next pass.\n      if (outcodeOut === outcode0) {\n        x0 = x;\n        y0 = y;\n        outcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n      } else {\n        x1 = x;\n        y1 = y;\n        outcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n      }\n    }\n  }\n\n  return accept;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-line-box.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-line-line.js":
/*!********************************************!*\
  !*** ./extensions/CompGeom/x-line-line.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ONE_INTERSECTION: () => (/* binding */ ONE_INTERSECTION),\n/* harmony export */   OVERLAP: () => (/* binding */ OVERLAP),\n/* harmony export */   pointOnLine: () => (/* binding */ pointOnLine),\n/* harmony export */   segmentsIntersect: () => (/* binding */ segmentsIntersect)\n/* harmony export */ });\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n\n\n\nfunction ABS(x) {\n  return Math.abs(x);\n}\n\nconst EPS = _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL;\n\nconst ONE_INTERSECTION = 4;\nconst OVERLAP = 5;\n\n\n//Returns true if the given point lies on and inside the given line segment\nfunction pointOnLine(x, y, e, checkInsideSegment, precisionDistance, outPt) {\n\n  if (e.length < EPS) {\n    return false;\n  }\n\n  let dot = (x - e.v1.x) * e.dx + (y - e.v1.y) * e.dy;\n\n  if (!precisionDistance)\n  precisionDistance = EPS * e.length;\n\n  let u = dot / e.length2;\n\n  if (checkInsideSegment) {\n    if (u * e.length < -precisionDistance || u * e.length > e.length + precisionDistance)\n    return false;\n  }\n\n  let lx = e.v1.x + u * e.dx;\n  let ly = e.v1.y + u * e.dy;\n\n  let len2 = (lx - x) * (lx - x) + (ly - y) * (ly - y);\n\n  if (outPt) {\n    outPt.x = lx;\n    outPt.y = ly;\n    outPt.d = Math.sqrt(len2);\n    outPt.u = u;\n  }\n\n  if (len2 < precisionDistance * precisionDistance)\n  return true;\n\n  return false;\n}\n\n\nfunction parallelLinesOverlap(e1, e2, precisionDistance) {\n\n  //Check of the segments are parallel but not on the same infinite line\n  if (!pointOnLine(e2.v1.x, e2.v1.y, e1, false, precisionDistance)) {\n    return null;\n  }\n\n  let res = {\n    status: OVERLAP,\n    e1: [],\n    e2: []\n  };\n\n  //They are on the same line. Find overlap points.\n  //TODO: There is probably a more efficient way to do this\n  let p3_seg1 = pointOnLine(e2.v1.x, e2.v1.y, e1, true, precisionDistance);\n  let p4_seg1 = pointOnLine(e2.v2.x, e2.v2.y, e1, true, precisionDistance);\n\n  //If both points of the second segment are inside the first\n  //then the reverse cannot be true...\n  if (p3_seg1 && p4_seg1) {\n    res.e1.push(e2.v1.x, e2.v1.y, e2.v2.x, e2.v2.y);\n    return res;\n  }\n\n  let p1_seg2 = pointOnLine(e1.v1.x, e1.v1.y, e2, true, precisionDistance);\n  let p2_seg2 = pointOnLine(e1.v2.x, e1.v2.y, e2, true, precisionDistance);\n\n  if (p3_seg1)\n  res.e1.push(e2.v1.x, e2.v1.y);\n  if (p4_seg1)\n  res.e1.push(e2.v2.x, e2.v2.y);\n  if (p1_seg2)\n  res.e2.push(e1.v1.x, e1.v1.y);\n  if (p2_seg2)\n  res.e2.push(e1.v2.x, e1.v2.y);\n\n  return res;\n}\n\n\n/*\n   Determine the intersection point of two line segments\n   Modified source from here:\n   http://www.paulbourke.net/geometry/pointlineplane/\n*/\nfunction segmentsIntersect(e1, e2, precisionDistance)\n{\n  let denom = e2.dy * e1.dx - e2.dx * e1.dy;\n  let numera = e2.dx * (e1.v1.y - e2.v1.y) - e2.dy * (e1.v1.x - e2.v1.x);\n  let numerb = e1.dx * (e1.v1.y - e2.v1.y) - e1.dy * (e1.v1.x - e2.v1.x);\n\n  /* Are the lines coincident? */\n  if (ABS(numera) < EPS && ABS(numerb) < EPS && ABS(denom) < EPS) {\n    return null;\n  }\n\n  /* Are the lines parallel */\n  if (ABS(denom) < EPS) {\n    /* check for overlap */\n    return parallelLinesOverlap(e1, e2, precisionDistance);\n  }\n\n  /* Is the intersection along the segments */\n  let mua = numera / denom;\n  let da = mua * e1.length;\n  if (da < -precisionDistance || da > e1.length + precisionDistance) {\n    return null;\n  }\n\n  let mub = numerb / denom;\n  let db = mub * e2.length;\n  if (db < -precisionDistance || db > e2.length + precisionDistance) {\n    return null;\n  }\n\n  let x = e1.v1.x + mua * e1.dx;\n  let y = e1.v1.y + mua * e1.dy;\n\n  return {\n    status: ONE_INTERSECTION,\n    e1: [x, y],\n    e2: [x, y]\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-line-line.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-mesh-plane.js":
/*!*********************************************!*\
  !*** ./extensions/CompGeom/x-mesh-plane.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToPlaneCoords: () => (/* binding */ convertToPlaneCoords),\n/* harmony export */   makePlaneBasis: () => (/* binding */ makePlaneBasis),\n/* harmony export */   xMeshPlane: () => (/* binding */ xMeshPlane)\n/* harmony export */ });\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n/* harmony import */ var _x_triangle_plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./x-triangle-plane */ \"./extensions/CompGeom/x-triangle-plane.js\");\n\n\n\n//const THREE = THREE;\nconst avp = Autodesk.Viewing.Private;\nconst VertexEnumerator = avp.VertexEnumerator;\n\n\n\n\n\nvar mi = new THREE.Matrix4();\nvar pi = new THREE.Plane();\n\nfunction xMeshPlane(plane, _ref, intersects) {let { geometry, matrixWorld, fragId } = _ref;\n\n  if (!geometry)\n  return;\n\n  let baseIndex = intersects.length;\n\n  mi.copy(matrixWorld).invert();\n  pi.copy(plane).applyMatrix4(mi);\n\n  VertexEnumerator.enumMeshTriangles(geometry, function (vA, vB, vC, a, b, c) {\n\n    (0,_x_triangle_plane__WEBPACK_IMPORTED_MODULE_1__.xTrianglePlane)(pi, vA, vB, vC, a, b, c, intersects, fragId);\n\n  });\n\n  //Put the points into world space. It should actually be possible to do\n  //the entire math in object space -- but we have to check if all fragments\n  //that belong to the same dbId have the same world transform.\n  for (let i = baseIndex, iEnd = intersects.length; i < iEnd; i++) {\n    intersects[i].v1.applyMatrix4(matrixWorld);\n    intersects[i].v2.applyMatrix4(matrixWorld);\n  }\n\n}\n\n\nfunction makeRotationAxis(axis, cosa, m) {\n\n  // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n  let c = cosa;\n  let s = Math.sqrt(1.0 - c * c);\n  let t = 1 - c;\n  let x = axis.x,y = axis.y,z = axis.z;\n  let tx = t * x,ty = t * y;\n\n  m.set(\n\n    tx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    tx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    0, 0, 0, 1\n\n  );\n\n}\n\n\nfunction makePlaneBasis(plane) {\n\n  //var origin = plane.coplanarPoint();\n\n  let sceneUp = new THREE.Vector3(0, 0, 1);\n  let cross = plane.normal.clone().cross(sceneUp);\n  cross = cross.normalize();\n  let dot = sceneUp.dot(plane.normal);\n\n  //We are ignoring the translation here, since\n  //we will drop the Z coord for the 2D processing steps anyway.\n  let planeBasis = new THREE.Matrix4();\n\n  if (!((0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.isZero)(cross.x) && (0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.isZero)(cross.y) && (0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.isZero)(cross.z))) {\n    makeRotationAxis(cross, dot, planeBasis);\n    planeBasis.elements[14] = plane.constant;\n  } else {\n    planeBasis.elements[14] = dot * plane.constant;\n  }\n\n  return planeBasis;\n}\n\n\nfunction convertToPlaneCoords(planeBasis, edges3d, bbox) {\n\n  for (let i = 0; i < edges3d.length; i++) {\n    let e = edges3d[i];\n\n    e.v1.applyMatrix4(planeBasis);\n    e.v2.applyMatrix4(planeBasis);\n\n    bbox.expandByPoint(e.v1);\n    bbox.expandByPoint(e.v2);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-mesh-plane.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-plane-segment.js":
/*!************************************************!*\
  !*** ./extensions/CompGeom/x-plane-segment.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xPlaneSegment: () => (/* binding */ xPlaneSegment)\n/* harmony export */ });\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n\n\n\nlet v1 = new THREE.Vector3();\n\nfunction xPlaneSegment(plane, pt0, pt1, res1, res2) {\n\n  let direction = v1.subVectors(pt1, pt0);\n\n  let denominator = plane.normal.dot(direction);\n\n  if ((0,_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.isZero)(denominator)) {\n\n    res1.copy(pt0);\n    res2.copy(pt1);\n\n    // line is coplanar\n    return 2;\n  }\n\n  denominator = 1.0 / denominator;\n\n  let t = -(pt0.dot(plane.normal) * denominator + plane.constant * denominator);\n\n  if (t < -_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL || t > 1 + _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL) {\n\n    return 0;\n\n  }\n\n  let pt = direction.multiplyScalar(t).add(pt0);\n\n  res1.copy(pt);\n\n  return 1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0NvbXBHZW9tL3gtcGxhbmUtc2VnbWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDMkM7O0FBRTNDLElBQUlFLEVBQUUsR0FBRyxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQyxDQUFDOztBQUVyQixTQUFTQyxhQUFhQSxDQUFDQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTs7RUFFdkQsSUFBSUMsU0FBUyxHQUFHVCxFQUFFLENBQUNVLFVBQVUsQ0FBQ0osR0FBRyxFQUFFRCxHQUFHLENBQUM7O0VBRXZDLElBQUlNLFdBQVcsR0FBR1AsS0FBSyxDQUFDUSxNQUFNLENBQUNDLEdBQUcsQ0FBRUosU0FBVSxDQUFDOztFQUUvQyxJQUFLWCxtREFBTSxDQUFDYSxXQUFXLENBQUMsRUFBRzs7SUFFdkJKLElBQUksQ0FBQ08sSUFBSSxDQUFDVCxHQUFHLENBQUM7SUFDZEcsSUFBSSxDQUFDTSxJQUFJLENBQUNSLEdBQUcsQ0FBQzs7SUFFZDtJQUNBLE9BQU8sQ0FBQztFQUNaOztFQUVBSyxXQUFXLEdBQUcsR0FBRyxHQUFHQSxXQUFXOztFQUUvQixJQUFJSSxDQUFDLEdBQUcsRUFBSVYsR0FBRyxDQUFDUSxHQUFHLENBQUVULEtBQUssQ0FBQ1EsTUFBTyxDQUFDLEdBQUdELFdBQVcsR0FBR1AsS0FBSyxDQUFDWSxRQUFRLEdBQUdMLFdBQVcsQ0FBQzs7RUFFakYsSUFBS0ksQ0FBQyxHQUFHLENBQUNoQiw0Q0FBRyxJQUFJZ0IsQ0FBQyxHQUFHLENBQUMsR0FBR2hCLDRDQUFHLEVBQUc7O0lBRTNCLE9BQU8sQ0FBQzs7RUFFWjs7RUFFQSxJQUFJa0IsRUFBRSxHQUFHUixTQUFTLENBQUNTLGNBQWMsQ0FBRUgsQ0FBRSxDQUFDLENBQUNJLEdBQUcsQ0FBRWQsR0FBSSxDQUFDOztFQUVqREUsSUFBSSxDQUFDTyxJQUFJLENBQUNHLEVBQUUsQ0FBQzs7RUFFYixPQUFPLENBQUM7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0NvbXBHZW9tL3gtcGxhbmUtc2VnbWVudC5qcz9kZjM1Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgaXNaZXJvLCBUT0wgfSBmcm9tIFwiLi9mdXp6eS1tYXRoXCI7XG5cbmxldCB2MSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB4UGxhbmVTZWdtZW50KHBsYW5lLCBwdDAsIHB0MSwgcmVzMSwgcmVzMikge1xuXG4gICAgbGV0IGRpcmVjdGlvbiA9IHYxLnN1YlZlY3RvcnMocHQxLCBwdDApO1xuXG4gICAgbGV0IGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggZGlyZWN0aW9uICk7XG5cbiAgICBpZiAoIGlzWmVybyhkZW5vbWluYXRvcikgKSB7XG5cbiAgICAgICAgcmVzMS5jb3B5KHB0MCk7XG4gICAgICAgIHJlczIuY29weShwdDEpO1xuXG4gICAgICAgIC8vIGxpbmUgaXMgY29wbGFuYXJcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuXG4gICAgZGVub21pbmF0b3IgPSAxLjAgLyBkZW5vbWluYXRvcjtcblxuICAgIGxldCB0ID0gLSAoIHB0MC5kb3QoIHBsYW5lLm5vcm1hbCApICogZGVub21pbmF0b3IgKyBwbGFuZS5jb25zdGFudCAqIGRlbm9taW5hdG9yKTtcblxuICAgIGlmICggdCA8IC1UT0wgfHwgdCA+IDEgKyBUT0wgKSB7XG5cbiAgICAgICAgcmV0dXJuIDA7XG5cbiAgICB9XG5cbiAgICBsZXQgcHQgPSBkaXJlY3Rpb24ubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHB0MCApO1xuXG4gICAgcmVzMS5jb3B5KHB0KTtcblxuICAgIHJldHVybiAxO1xufVxuIl0sIm5hbWVzIjpbImlzWmVybyIsIlRPTCIsInYxIiwiVEhSRUUiLCJWZWN0b3IzIiwieFBsYW5lU2VnbWVudCIsInBsYW5lIiwicHQwIiwicHQxIiwicmVzMSIsInJlczIiLCJkaXJlY3Rpb24iLCJzdWJWZWN0b3JzIiwiZGVub21pbmF0b3IiLCJub3JtYWwiLCJkb3QiLCJjb3B5IiwidCIsImNvbnN0YW50IiwicHQiLCJtdWx0aXBseVNjYWxhciIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-plane-segment.js\n");

/***/ }),

/***/ "./extensions/CompGeom/x-triangle-plane.js":
/*!*************************************************!*\
  !*** ./extensions/CompGeom/x-triangle-plane.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xTrianglePlane: () => (/* binding */ xTrianglePlane)\n/* harmony export */ });\n/* harmony import */ var _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fuzzy-math */ \"./extensions/CompGeom/fuzzy-math.js\");\n/* harmony import */ var _x_plane_segment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./x-plane-segment */ \"./extensions/CompGeom/x-plane-segment.js\");\n\n\n\nconst avp = Autodesk.Viewing.Private;\nconst logger = avp.logger;\n\nfunction Edge(pt1, pt2, id1From, id1To, id2From, id2To, meshId) {\n\n  this.v1 = pt1.clone();\n  this.v2 = pt2.clone();\n\n}\n\n\n\nlet res1 = new THREE.Vector3();\nlet res2 = new THREE.Vector3();\n\n// res is array containing result segments.\n// returns number of intersection point on the plane (0, 1, or 2) with the values of the points stored in the res array\nfunction xTrianglePlane(plane, pt0, pt1, pt2, i0, i1, i2, res, meshId) {\n\n  let d0 = plane.distanceToPoint(pt0);\n  let d1 = plane.distanceToPoint(pt1);\n  let d2 = plane.distanceToPoint(pt2);\n\n  // Check if all points are to one side of the plane\n  if (d0 < -_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL && d1 < -_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL && d2 < -_fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL) {\n    return null;\n  }\n  if (d0 > _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL && d1 > _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL && d2 > _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL) {\n    return null;\n  }\n\n  let s0 = Math.sign(d0);\n  let s1 = Math.sign(d1);\n  let s2 = Math.sign(d2);\n\n  // Skip coplanar triangles (leave it to the neighbouring triangles to contribute their edges)\n  if (s0 === 0 && s1 === 0 && s2 === 0) {\n    return null;\n  }\n\n  let tmp1, tmp2;\n  let i1From, i1To, i2From, i2To;\n\n  //There is intersection, compute it\n  if (s0 !== s1) {\n    let numInts = (0,_x_plane_segment__WEBPACK_IMPORTED_MODULE_1__.xPlaneSegment)(plane, pt0, pt1, res1, res2);\n    if (numInts === 2) {\n      res.push(new Edge(pt0, pt1, i0, i0, i1, i1, meshId));\n      return;\n    } else if (numInts === 1) {\n      i1From = i0;\n      i1To = i1;\n      tmp1 = res1.clone();\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n  if (s1 !== s2) {\n    let numInts = (0,_x_plane_segment__WEBPACK_IMPORTED_MODULE_1__.xPlaneSegment)(plane, pt1, pt2, res1, res2);\n    if (numInts === 2) {\n      res.push(new Edge(pt1, pt2, i1, i1, i2, i2, meshId));\n      return;\n    } else if (numInts === 1) {\n      if (tmp1) {\n        // Avoid the singular scenario where the signs are 0, -1 and +1\n        if (res1.distanceTo(tmp1) > _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL) {\n          i2From = i1;\n          i2To = i2;\n          tmp2 = res1.clone();\n        }\n      } else\n      {\n        i1From = i1;\n        i1To = i2;\n        tmp1 = res1.clone();\n      }\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n  if (s2 !== s0) {\n    let numInts = (0,_x_plane_segment__WEBPACK_IMPORTED_MODULE_1__.xPlaneSegment)(plane, pt2, pt0, res1, res2);\n    if (numInts === 2) {\n      res.push(new Edge(pt2, pt0, i2, i2, i0, i0, meshId));\n      return;\n    } else if (numInts === 1) {\n      if (tmp1) {\n        // Avoid the singular scenario where the signs are 0, -1 and +1\n        if (res1.distanceTo(tmp1) > _fuzzy_math__WEBPACK_IMPORTED_MODULE_0__.TOL) {\n          i2From = i2;\n          i2To = i0;\n          tmp2 = res1.clone();\n        }\n      } else {\n        logger.warn(\"Unexpected single intersection point\");\n      }\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n\n  if (tmp1 && tmp2) {\n    res.push(new Edge(tmp1, tmp2, i1From, i1To, i2From, i2To, meshId));\n  } else {\n\n    //logger.warn(\"Unexpected one intersection where two were expected\");\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/CompGeom/x-triangle-plane.js\n");

/***/ }),

/***/ "./src/compat.js":
/*!***********************!*\
  !*** ./src/compat.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ObjectAssign: () => (/* binding */ ObjectAssign),\n/* harmony export */   disableDocumentTouchSafari: () => (/* binding */ disableDocumentTouchSafari),\n/* harmony export */   enableDocumentTouchSafari: () => (/* binding */ enableDocumentTouchSafari),\n/* harmony export */   exitFullscreen: () => (/* binding */ exitFullscreen),\n/* harmony export */   fullscreenElement: () => (/* binding */ fullscreenElement),\n/* harmony export */   getAndroidVersion: () => (/* binding */ getAndroidVersion),\n/* harmony export */   getGlobal: () => (/* reexport safe */ _global__WEBPACK_IMPORTED_MODULE_0__.getGlobal),\n/* harmony export */   getIOSVersion: () => (/* binding */ getIOSVersion),\n/* harmony export */   inFullscreen: () => (/* binding */ inFullscreen),\n/* harmony export */   isAndroidDevice: () => (/* binding */ isAndroidDevice),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isChrome: () => (/* binding */ isChrome),\n/* harmony export */   isFirefox: () => (/* binding */ isFirefox),\n/* harmony export */   isFullscreenAvailable: () => (/* binding */ isFullscreenAvailable),\n/* harmony export */   isFullscreenEnabled: () => (/* binding */ isFullscreenEnabled),\n/* harmony export */   isIE11: () => (/* binding */ isIE11),\n/* harmony export */   isIE11Only: () => (/* binding */ isIE11Only),\n/* harmony export */   isIOSDevice: () => (/* binding */ isIOSDevice),\n/* harmony export */   isMac: () => (/* binding */ isMac),\n/* harmony export */   isMobileDevice: () => (/* binding */ isMobileDevice),\n/* harmony export */   isNodeJS: () => (/* binding */ isNodeJS),\n/* harmony export */   isPhoneFormFactor: () => (/* binding */ isPhoneFormFactor),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isTouchDevice: () => (/* binding */ isTouchDevice),\n/* harmony export */   isWindows: () => (/* binding */ isWindows),\n/* harmony export */   launchFullscreen: () => (/* binding */ launchFullscreen),\n/* harmony export */   touchStartToClick: () => (/* binding */ touchStartToClick)\n/* harmony export */ });\n/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global */ \"./src/global.js\");\nvar _navigator$platform;\n\n\nconst _window = (0,_global__WEBPACK_IMPORTED_MODULE_0__.getGlobal)();\nconst _document = _window && _window.document;\n\n\n\nconst isBrowser = typeof navigator !== \"undefined\";\n\nconst isNodeJS = function () {\n  return !isBrowser;\n};\n\nlet isIE11 = isBrowser && !!navigator.userAgent.match(/Edge|Trident\\/7\\./);\n\n// Although the naming is misleading, isIE11 contains Edge too for some legacy reason.\n// For backward compatibility, instead of renaming `isIE11` to `isIEOrEdge`, I just added `isIE11Only`.\nlet isIE11Only = isBrowser && !!navigator.userAgent.match(/Trident\\/7\\./);\n\n// Launch full screen on the given element with the available method\nfunction launchFullscreen(element, options) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen(options);\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen(options);\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen(options);\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen(options);\n  }\n};\n\n// Exit full screen with the available method\nfunction exitFullscreen(_document) {\n  if (!inFullscreen(_document)) {\n    return;\n  }\n  if (_document.exitFullscreen) {\n    _document.exitFullscreen();\n  } else if (_document.mozCancelFullScreen) {\n    _document.mozCancelFullScreen();\n  } else if (_document.webkitExitFullscreen) {\n    _document.webkitExitFullscreen();\n  } else if (_document.msExitFullscreen) {\n    _document.msExitFullscreen();\n  }\n};\n\n// Determines if the browser is in full screen\nfunction inFullscreen(_document) {\n\n  // Special case for Ms-Edge that has webkitIsFullScreen with correct value\n  // and fullscreenEnabled with wrong value (thanks MS)\n\n  if (\"webkitIsFullScreen\" in _document) return !!_document.webkitIsFullScreen;\n  if (\"fullscreenElement\" in _document) return !!_document.fullscreenElement;\n  if (\"mozFullScreenElement\" in _document) return !!_document.mozFullScreenElement;\n  if (\"msFullscreenElement\" in _document) return !!_document.msFullscreenElement;\n\n  return !!_document.querySelector(\".viewer-fill-browser\"); // Fallback for iPad\n};\n\nfunction fullscreenElement(_document) {\n  return _document.fullscreenElement || _document.mozFullScreenElement || _document.webkitFullscreenElement || _document.msFullscreenElement;\n};\n\nfunction isFullscreenAvailable(element) {\n  return element.requestFullscreen || element.mozRequestFullScreen || element.webkitRequestFullscreen || element.msRequestFullscreen;\n};\n\n/**\n * Returns true if full screen mode is enabled.\n * @param {Document} _document\n * @return {Boolean} - true if full screen mode is enabled false otherwise.\n */\nfunction isFullscreenEnabled(_document) {\n  return (\n    _document.fullscreenEnabled ||\n    _document.webkitFullscreenEnabled ||\n    _document.mozFullScreenEnabled ||\n    _document.msFullscreenEnabled);\n\n}\n\n// Get the IOS version through user agent.\n// Return the version string of IOS, e.g. 14.1.1, 15.4 ... or empty string if version couldn't be detected\n// User agents can be changed and thus might be inaccurate or incompatible at some point, but this pattern\n// has been stable at least since IOS 5\nfunction getIOSVersion(ua) {\n  ua = ua || navigator.userAgent;\n  var match = ua.match(/OS ((\\d+)_(\\d+)(_(\\d+))?) like Mac OS X/);\n  if (!match && isIOSDevice()) {\n    // On IPadOS Safari requests the desktop version by default with a MacOS user.\n    // The major version seems to be reliable, but the minor version might be incorrect.\n    match = ua.match(/\\/((\\d+)\\.(\\d+)(\\.\\d)?) Safari\\//);\n  }\n\n  return match ? match[1].replace('_', '.') : \"\";\n};\n\n// Get the version of the android device through user agent.\n// Return the version string of android device, e.g. 4.4, 5.0...\nfunction getAndroidVersion(ua) {\n  ua = ua || navigator.userAgent;\n  var match = ua.match(/Android\\s([0-9\\.]*)/);\n  return match ? match[1] : false;\n};\n\n// Determine if this is a touch or notouch device.\nfunction isTouchDevice() {\n  return typeof window !== 'undefined' && ('ontouchstart' in window || navigator.maxTouchPoints > 0);\n};\n\n// Since iOS 13, the iPad identifies itself as a desktop, so the only way to reliably detect is to search for multitouch capabilities\n// (insofar as no other Apple device implements it)\n// It also returns different values in a worker so we need to look in the platform as well to distinguish from a regular Mac\nconst _isIOSDevice = isBrowser && (/ip(ad|hone|od)/.test(navigator.userAgent.toLowerCase()) ||\nnavigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 ||\n/^ip(ad|hone|od)$/.test((_navigator$platform = navigator.platform) === null || _navigator$platform === void 0 ? void 0 : _navigator$platform.toLowerCase()));\nfunction isIOSDevice() {\n  return _isIOSDevice;\n}\n\nconst _isAndroidDevice = isBrowser && navigator.userAgent.toLowerCase().indexOf('android') !== -1;\nfunction isAndroidDevice() {\n  return _isAndroidDevice;\n}\n\nfunction isMobileDevice() {\n  if (!isBrowser) return false;\n  return isIOSDevice() || isAndroidDevice();\n};\n\nfunction isPhoneFormFactor() {\n  return (\n    isMobileDevice() && (\n    _window.matchMedia('(max-width: 750px)').matches || _window.matchMedia('(max-height: 750px)').matches));\n\n}\n\nfunction isSafari() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"safari\") !== -1 && _ua.indexOf(\"chrome\") === -1;\n};\n\nfunction isFirefox() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"firefox\") !== -1;\n};\n\nfunction isChrome() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"chrome\") !== -1;\n};\n\nfunction isMac() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"mac os\") !== -1 && !isIOSDevice();\n};\n\nfunction isWindows() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"win32\") !== -1 || _ua.indexOf(\"windows\") !== -1;\n};\n\nfunction ObjectAssign(des, src) {\n  for (var key in src) {\n    if (src.hasOwnProperty(key))\n    des[key] = src[key];\n  }\n  return des;\n};\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\nfunction disableTouchSafari(event) {\n  var xOff = _window.hasOwnProperty(\"pageXOffset\") ? _window.pageXOffset : _document.documentElement.scrollLeft;\n  var yOff = _window.hasOwnProperty(\"pageYOffset\") ? _window.pageYOffset : _document.documentElement.scrollTop;\n\n  // event.pageX and event.pageY returned undefined through Chrome console device mode\n  var pageX = typeof event.pageX === \"undefined\" ? event.changedTouches[0].pageX : event.pageX;\n  var pageY = typeof event.pageY === \"undefined\" ? event.changedTouches[0].pageY : event.pageY;\n\n  // If we aren't inside the canvas, then allow default propagation of the event\n  var element = _document.elementFromPoint(pageX - xOff, pageY - yOff);\n  if (!element || element.nodeName !== 'CANVAS')\n  return true;\n  // If it's a CANVAS, check that it's owned by us\n  if (element.getAttribute('data-viewer-canvas') !== 'true')\n  return true;\n  // Inside the canvas, prevent the event from propagating to Safari'safely\n  // standard handlers, which will pan and zoom the page.\n  event.preventDefault();\n  return false;\n}\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\nfunction disableDocumentTouchSafari() {\n  if (isMobileDevice() && isSafari()) {\n    // Safari mobile disable default touch handling inside viewer canvas\n    // Use capture to make sure Safari doesn't capture the touches and prevent\n    // us from disabling them.\n    _document.documentElement.addEventListener('touchstart', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchmove', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchcanceled', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchend', disableTouchSafari, true);\n  }\n};\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\n// This method is not being invoked explicitly.\nfunction enableDocumentTouchSafari() {\n  if (isMobileDevice() && isSafari()) {\n    // Safari mobile disable default touch handling inside viewer canvas\n    // Use capture to make sure Safari doesn't capture the touches and prevent\n    // us from disabling them.\n    _document.documentElement.removeEventListener('touchstart', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchmove', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchcanceled', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchend', disableTouchSafari, true);\n  }\n};\n\n\n// Convert touchstart event to click to remove the delay between the touch and\n// the click event which is sent after touchstart with about 300ms deley.\n// Should be used in UI elements on touch devices.\nfunction touchStartToClick(e) {\n  // Buttons that activate fullscreen are a special case. The HTML5 fullscreen spec\n  // requires the original user gesture signal to avoid a security issue.  See LMV-2396 and LMV-2326\n  if (e.target.className && (e.target.className.indexOf(\"fullscreen\") > -1 ||\n  e.target.className.indexOf(\"webvr\") > -1))\n  return;\n  e.preventDefault(); // Stops the firing of delayed click event.\n  e.stopPropagation();\n  e.target.click(); // Maps to immediate click.\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/compat.js\n");

/***/ }),

/***/ "./src/global.js":
/*!***********************!*\
  !*** ./src/global.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal)\n/* harmony export */ });\n/**\n * Functions on the global scope need to be called with the global scope as their 'this' context.\n * Therefore, we can't simply return function properties from the global scope proxy like other properties.\n * We create another (temporary) proxy instead, which implements the 'apply' hook.\n * Invoking a function through this hook will ensure the correct 'this' context inside of the function.\n *\n * @param {Object} globalScope The global scope that the function is a property of (e.g. window).\n * @param {Function} func The function property that is accessed through the global scope proxy.\n * @returns {Proxy} A new proxy that forwards function invocations so that the 'this' context of the invoked function\n *   is set up properly.\n */\nfunction createFunctionProxy(globalScope, func) {\n  return new Proxy(func, {\n    get(obj, prop) {\n      return obj[prop];\n    },\n    apply(target, thisArg, argumentsList) {\n      return target.call(globalScope || thisArg, ...argumentsList);\n    }\n  });\n}\n\n// A helper method to get an app-specific namespace under the global scope, or create it if it's not present yet.\nfunction getAppNamespace(globalScope) {\n  return globalScope[globalScope.LMV_APP_NAMESPACE] = globalScope[globalScope.LMV_APP_NAMESPACE] || {};\n}\n\n/**\n * Returns the global object of the current environment (e.g. window in a browser).\n * If `USE_LMV_APP_NAMESPACES` is set to `true` on the global scope, the returned value will be a proxy that intercepts\n * set operations on non-existing properties and writes the value to an app-specific namespace instead. The actual\n * property on the window object is a placeholder that forwards read and write operations to the app-specific version.\n *\n * Example:\n * Given that window.LMV_APP_NAMESPACE is 'myApp' and window.Autodesk does not exist yet\n *\n * getGlobal().Autodesk = {}\n *\n * will be rewritten as\n *\n * window.myApp.Autodesk = {};\n * window.Autodesk = Placeholder that forwards to window[window.LMV_APP_NAMESPACE].Autodesk\n *\n * Changing window.LMV_APP_NAMESPACE to 'myOtherApp' will then rewrite\n *\n * window.Autodesk to window.myOtherApp.Autodesk\n *\n * @returns {Object} The global scope of the environment.\n */\nfunction getGlobal() {\n  // Determine the global scope of the environment\n  const globalScope = typeof window !== \"undefined\" && window !== null ?\n  window :\n  typeof self !== \"undefined\" && self !== null ?\n  self :\n  __webpack_require__.g;\n\n  // If app namespaces are used, create and return a proxy instead of the actual global scope object.\n  if (globalScope.USE_LMV_APP_NAMESPACES) {\n    if (!globalScope.globalProxy) {\n      // The proxy is a singleton that will only be created once, even across multiple viewer bundles.\n      globalScope.globalProxy = new Proxy({}, {\n        // Get requests are simply forwarded to the global scope.\n        // Functions get some special treatment, because they need to invoked with the global scope as their\n        // 'this' context.\n        get(obj, prop) {\n          let value = globalScope[prop];\n          if (typeof value === 'function') {\n            return createFunctionProxy(globalScope, value);\n          }\n          return value;\n        },\n        // Set requests are intercepted to create properties in app-specific namespaces.\n        set(obj, prop, value) {\n          if (Object.prototype.hasOwnProperty.call(globalScope, prop)) {\n            // Don't proxy existing properties\n            if (globalScope[prop] !== value)\n            globalScope[prop] = value;\n          } else {\n            // Create the property under the app's namespace and inject a proxy object in the global\n            // scope that forwards to the namespaced property.\n            getAppNamespace(globalScope)[prop] = value;\n            Object.defineProperty(globalScope, prop, {\n              get: () => {return getAppNamespace(globalScope)[prop];},\n              set: (value) => {getAppNamespace(globalScope)[prop] = value;}\n            });\n          }\n          return true; // Proxy setters must return true\n        }\n      });\n    }\n\n    return globalScope.globalProxy;\n  } else {\n    return globalScope;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/global.js\n");

/***/ }),

/***/ "./src/wgs/scene/LmvVector3.js":
/*!*************************************!*\
  !*** ./src/wgs/scene/LmvVector3.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LmvVector3: () => (/* binding */ LmvVector3)\n/* harmony export */ });\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n/* Pruned version of THREE.Vector3, for use in the LMV web worker */\n\nlet LmvVector3 = function (x, y, z) {\n\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n\n};\n\nLmvVector3.prototype = {\n\n  constructor: LmvVector3,\n\n  set: function (x, y, z) {\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n\n    return this;\n\n  },\n\n  setX: function (x) {\n\n    this.x = x;\n\n    return this;\n\n  },\n\n  setY: function (y) {\n\n    this.y = y;\n\n    return this;\n\n  },\n\n  setZ: function (z) {\n\n    this.z = z;\n\n    return this;\n\n  },\n\n  setComponent: function (index, value) {\n\n    switch (index) {\n\n      case 0:this.x = value;break;\n      case 1:this.y = value;break;\n      case 2:this.z = value;break;\n      default:throw new Error('index is out of range: ' + index);\n\n    }\n\n  },\n\n  getComponent: function (index) {\n\n    switch (index) {\n\n      case 0:return this.x;\n      case 1:return this.y;\n      case 2:return this.z;\n      default:throw new Error('index is out of range: ' + index);\n\n    }\n\n  },\n\n  clone: function () {\n\n    return new this.constructor(this.x, this.y, this.z);\n\n  },\n\n  copy: function (v) {\n\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n\n    return this;\n\n  },\n\n  add: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n\n    return this;\n\n  },\n\n  addScalar: function (s) {\n\n    this.x += s;\n    this.y += s;\n    this.z += s;\n\n    return this;\n\n  },\n\n  addVectors: function (a, b) {\n\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n\n    return this;\n\n  },\n\n  addScaledVector: function (v, s) {\n\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n\n    return this;\n\n  },\n\n  sub: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n\n    return this;\n\n  },\n\n  subScalar: function (s) {\n\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n\n    return this;\n\n  },\n\n  subVectors: function (a, b) {\n\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n\n    return this;\n\n  },\n\n  multiply: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n      return this.multiplyVectors(v, w);\n\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n\n    return this;\n\n  },\n\n  multiplyScalar: function (scalar) {\n\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n\n    return this;\n\n  },\n\n  multiplyVectors: function (a, b) {\n\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n\n    return this;\n\n  },\n\n  applyMatrix3: function (m) {\n\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n\n    return this;\n\n  },\n\n  applyMatrix4: function (m) {\n\n    // input: THREE.Matrix4 affine matrix\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12];\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13];\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n    return this;\n\n  },\n\n  applyProjection: function (m) {\n\n    // input: THREE.Matrix4 projection matrix\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n    var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide\n\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;\n\n    return this;\n\n  },\n\n  applyQuaternion: function (q) {\n\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w;\n\n    // calculate quat * vector\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return this;\n\n  },\n\n  transformDirection: function (m) {\n\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n\n    this.normalize();\n\n    return this;\n\n  },\n\n  divide: function (v) {\n\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n\n    return this;\n\n  },\n\n  divideScalar: function (scalar) {\n\n    if (scalar !== 0) {\n\n      var invScalar = 1 / scalar;\n\n      this.x *= invScalar;\n      this.y *= invScalar;\n      this.z *= invScalar;\n\n    } else {\n\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n\n    }\n\n    return this;\n\n  },\n\n  min: function (v) {\n\n    if (this.x > v.x) {\n\n      this.x = v.x;\n\n    }\n\n    if (this.y > v.y) {\n\n      this.y = v.y;\n\n    }\n\n    if (this.z > v.z) {\n\n      this.z = v.z;\n\n    }\n\n    return this;\n\n  },\n\n  max: function (v) {\n\n    if (this.x < v.x) {\n\n      this.x = v.x;\n\n    }\n\n    if (this.y < v.y) {\n\n      this.y = v.y;\n\n    }\n\n    if (this.z < v.z) {\n\n      this.z = v.z;\n\n    }\n\n    return this;\n\n  },\n\n  clamp: function (min, max) {\n\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    if (this.x < min.x) {\n\n      this.x = min.x;\n\n    } else if (this.x > max.x) {\n\n      this.x = max.x;\n\n    }\n\n    if (this.y < min.y) {\n\n      this.y = min.y;\n\n    } else if (this.y > max.y) {\n\n      this.y = max.y;\n\n    }\n\n    if (this.z < min.z) {\n\n      this.z = min.z;\n\n    } else if (this.z > max.z) {\n\n      this.z = max.z;\n\n    }\n\n    return this;\n\n  },\n\n  clampScalar: function () {\n\n    var min, max;\n\n    return function clampScalar(minVal, maxVal) {\n\n      if (min === undefined) {\n\n        min = new LmvVector3();\n        max = new LmvVector3();\n\n      }\n\n      min.set(minVal, minVal, minVal);\n      max.set(maxVal, maxVal, maxVal);\n\n      return this.clamp(min, max);\n\n    };\n\n  }(),\n\n  floor: function () {\n\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n\n    return this;\n\n  },\n\n  ceil: function () {\n\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n\n    return this;\n\n  },\n\n  round: function () {\n\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n\n    return this;\n\n  },\n\n  roundToZero: function () {\n\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\n    return this;\n\n  },\n\n  negate: function () {\n\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n\n    return this;\n\n  },\n\n  dot: function (v) {\n\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n\n  },\n\n  lengthSq: function () {\n\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n\n  },\n\n  length: function () {\n\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\n  },\n\n  lengthManhattan: function () {\n\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\n  },\n\n  normalize: function () {\n\n    return this.divideScalar(this.length());\n\n  },\n\n  setLength: function (l) {\n\n    var oldLength = this.length();\n\n    if (oldLength !== 0 && l !== oldLength) {\n\n      this.multiplyScalar(l / oldLength);\n\n    }\n\n    return this;\n\n  },\n\n  lerp: function (v, alpha) {\n\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n\n    return this;\n\n  },\n\n  lerpVectors: function (v1, v2, alpha) {\n\n    this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n\n    return this;\n\n  },\n\n  cross: function (v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n      return this.crossVectors(v, w);\n\n    }\n\n    var x = this.x,y = this.y,z = this.z;\n\n    this.x = y * v.z - z * v.y;\n    this.y = z * v.x - x * v.z;\n    this.z = x * v.y - y * v.x;\n\n    return this;\n\n  },\n\n  crossVectors: function (a, b) {\n\n    var ax = a.x,ay = a.y,az = a.z;\n    var bx = b.x,by = b.y,bz = b.z;\n\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n\n    return this;\n\n  },\n\n  projectOnVector: function () {\n\n    var v1, dot;\n\n    return function projectOnVector(vector) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      v1.copy(vector).normalize();\n\n      dot = this.dot(v1);\n\n      return this.copy(v1).multiplyScalar(dot);\n\n    };\n\n  }(),\n\n  projectOnPlane: function () {\n\n    var v1;\n\n    return function projectOnPlane(planeNormal) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      v1.copy(this).projectOnVector(planeNormal);\n\n      return this.sub(v1);\n\n    };\n\n  }(),\n\n  reflect: function () {\n\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n\n    var v1;\n\n    return function reflect(normal) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\n    };\n\n  }(),\n\n  distanceTo: function (v) {\n\n    return Math.sqrt(this.distanceToSquared(v));\n\n  },\n\n  distanceToSquared: function (v) {\n\n    var dx = this.x - v.x;\n    var dy = this.y - v.y;\n    var dz = this.z - v.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  },\n\n  setEulerFromRotationMatrix: function (m, order) {\n\n    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\n  },\n\n  setEulerFromQuaternion: function (q, order) {\n\n    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\n  },\n\n  getPositionFromMatrix: function (m) {\n\n    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\n    return this.setFromMatrixPosition(m);\n\n  },\n\n  getScaleFromMatrix: function (m) {\n\n    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\n    return this.setFromMatrixScale(m);\n\n  },\n\n  getColumnFromMatrix: function (index, matrix) {\n\n    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\n    return this.setFromMatrixColumn(index, matrix);\n\n  },\n\n  setFromMatrixPosition: function (m) {\n\n    this.x = m.elements[12];\n    this.y = m.elements[13];\n    this.z = m.elements[14];\n\n    return this;\n\n  },\n\n  setFromMatrixScale: function (m) {\n\n    var sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();\n    var sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();\n    var sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();\n\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n\n    return this;\n\n  },\n\n  setFromMatrixColumn: function (index, matrix) {\n\n    var offset = index * 4;\n\n    var me = matrix.elements;\n\n    this.x = me[offset];\n    this.y = me[offset + 1];\n    this.z = me[offset + 2];\n\n    return this;\n\n  },\n\n  equals: function (v) {\n\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n\n  },\n\n  fromArray: function (array, offset) {\n\n    if (offset === undefined) offset = 0;\n\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n\n    return this;\n\n  },\n\n  toArray: function (array, offset) {\n\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n\n    return array;\n\n  },\n\n  fromAttribute: function (attribute, index, offset) {\n\n    if (offset === undefined) offset = 0;\n\n    index = index * attribute.itemSize + offset;\n\n    this.x = attribute.array[index];\n    this.y = attribute.array[index + 1];\n    this.z = attribute.array[index + 2];\n\n    return this;\n\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/wgs/scene/LmvVector3.js\n");

/***/ }),

/***/ "./extensions/CompGeom/node_modules/poly2tri/dist/version.json":
/*!*********************************************************************!*\
  !*** ./extensions/CompGeom/node_modules/poly2tri/dist/version.json ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = {"version":"1.5.0"};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./extensions/CompGeom/index.js");
/******/ 	Autodesk.Extensions.CompGeom = __webpack_exports__;
/******/ 	
/******/ })()
;