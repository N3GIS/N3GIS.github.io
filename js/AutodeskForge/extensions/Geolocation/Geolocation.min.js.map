{"version":3,"file":"Geolocation/Geolocation.min.js","mappings":"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","sources":["webpack://Autodesk.Extensions/webpack/bootstrap","webpack://Autodesk.Extensions/webpack/runtime/define property getters","webpack://Autodesk.Extensions/webpack/runtime/hasOwnProperty shorthand","webpack://Autodesk.Extensions/webpack/runtime/make namespace object","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/tool.js","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/point_template.html","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/panel.js","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/geo_template.html","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/canvasPoint.js","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/canvas.js","webpack://Autodesk.Extensions/./extensions/Geolocation/ui/uiController.js","webpack://Autodesk.Extensions/./extensions/Geolocation/Ellipsoid.js","webpack://Autodesk.Extensions/./extensions/Geolocation/GlobeMath.js","webpack://Autodesk.Extensions/./extensions/Geolocation/LocalCS.js","webpack://Autodesk.Extensions/./extensions/Geolocation/index.js","webpack://Autodesk.Extensions/./extensions/Geolocation/Maps.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nconst av = Autodesk.Viewing;\n\nexport function PointTool(extension) {\n\n    av.ToolInterface.call(this);\n    this.names = ['pointTool'];\n    this.extension = extension;\n    this.viewer = extension.viewer;\n\n    this.handleSingleClick = function(event, button) {\n\n        // Process only primary button\n        if (button !== 0)\n            return false;\n\n        var canvasX = event.canvasX;\n        var canvasY = event.canvasY;\n        var res = this.viewer.clientToWorld(canvasX, canvasY);\n\n        if (!res)\n            return false;\n\n        this.extension.pushPoint(res);\n        return true;\n    };\n\n    this.activate = function(name, viewerApi) {\n        this.viewer.impl.pauseHighlight(true);\n        this.viewer.clearSelection();\n    };\n\n    this.deactivate = function() {\n        this.viewer.impl.pauseHighlight(false);\n    };\n\n    this.destroy = function() {\n        this.viewer = null;\n    };\n\n}","export default \"<label style=\\\"font-size:22px;\\\">id</label>\\n<div style=\\\"float:right; margin-top:6px; \\\">\\n    <button user-data=\\\"map\\\" style=\\\"margin-right:10px;\\\">Map</button>\\n    <button user-data=\\\"close\\\" style=\\\"margin-right:10px;\\\">X</button>\\n</div>\\n<table style=\\\"width:100%;\\\">\\n    <tr user-data=\\\"lmv\\\" title=\\\"Coordinates in LMV space, obtained via viewer.clientToWorld(mouseX, mouseY);\\\">\\n        <td style=\\\"border: 1px solid black;\\\">LMV</td>\\n        <td style=\\\"border: 1px solid #F44336;\\\">x</td>\\n        <td style=\\\"border: 1px solid #4CAF50;\\\">y</td>\\n        <td style=\\\"border: 1px solid #2196F3;\\\">z</td>\\n    </tr>\\n    <tr user-data=\\\"wgs84\\\" title=\\\"Longitude, Latitude, and Height in WGS84.\\\">\\n        <td style=\\\"border: 1px solid black;\\\">LonLat</td>\\n        <td style=\\\"border: 1px solid #F44336;\\\">lon</td>\\n        <td style=\\\"border: 1px solid #4CAF50;\\\">lat</td>\\n        <td style=\\\"border: 1px solid #2196F3;\\\">height</td>\\n    </tr>\\n</table>\";","import POINT_HTML from './point_template.html';\nimport GEO_HTML from './geo_template.html';\n\nconst avu = Autodesk.Viewing.UI;\nconst HEIGHT_ADJUSTMENT = 80;\n\n/**\n * The panel is meant to be used during debugging only.\n */\nexport class Panel extends avu.DockingPanel {\n\n    constructor(extension) {\n        super(extension.viewer.container, 'lmv-points-extension', 'Points', {});\n        this.setGlobalManager(extension.globalManager);\n\n        this.title.classList.add(\"docking-panel-delimiter-shadow\");\n        this.container.classList.add('property-panel');\n        this.extension = extension;\n        this.viewer = extension.viewer;\n        this.nonScrollingContentHeight = 0;\n    }\n\n    destroy() {\n        if (this.myTree) {\n            this.myTree.destroy();\n            this.myTree = null;\n        }\n        if (this.container) {\n            this.container.parentElement.removeChild(this.container);\n            this.container = null;\n        }\n        this.extension = null;\n        this.viewer = null;\n    }\n\n    /**\n     *\n     * @param {Object} pointData - Containing a 3D position along with additional data\n     * @param {Autodesk.Viewing.Model} pointData.model - The model that has been intersected\n     * @param {number} pointData.dbId - The model's database id of the object intersected\n     * @param {number} pointData.fragId - The fragment id within the object\n     * @param {Object} pointData.point - Position { x, y, z } number values, which include globalOffset.\n     * @param {number} pointData.__id - identifier\n     * @param {Object} pointData.__viewerState - viewport state when the point was added.\n     */\n    pushPoint(pointData) {\n        var parent = this.myTree.myRootContainer;\n        this.myTree.createElement_(pointData, parent);\n    }\n\n    removePoint(pointData) {\n        var elem = this.myTree.getElementForNode(pointData);\n        this.myTree.myRootContainer.removeChild(elem);\n    }\n\n    setVisible(show) {\n        super.setVisible(show);\n        show && this._create();\n    }\n\n    /**\n     * Invoked by resizeToContent()\n     */\n    getContentSize() {\n        return {\n            height: this.scrollContainer.scrollHeight + HEIGHT_ADJUSTMENT + this.nonScrollingContentHeight,\n            width: this.scrollContainer.scrollWidth\n        };\n    }\n\n    _create() {\n        if (this.myTree) return;\n\n        this.container.style.top = '20px';\n        this.container.style.width = '420px';\n        this.container.style.height = '480px';\n\n        const _document = this.getDocument();\n        // Present geolocation metadata\n        let geoDiv = _document.createElement('div');\n        geoDiv.className = 'docking-panel-container-solid-color-a';\n        geoDiv.style['font-size'] = '12px';\n        geoDiv.style['padding'] = '0px 6px';\n        geoDiv.style['border'] = 'solid 5px green';\n        geoDiv.innerHTML = GEO_HTML;\n        this.container.appendChild(geoDiv);\n\n\n        this._setGeolocationMetadata(geoDiv, this.viewer.model);\n\n        // Scrolling panel\n        this.nonScrollingContentHeight = geoDiv.clientHeight;\n        const extraHeight = HEIGHT_ADJUSTMENT + this.nonScrollingContentHeight;\n        this.createScrollContainer({left: false, heightAdjustment: extraHeight, marginTop: 0});\n\n        // which contains a tree view\n        var delegate = this._createDelegate(); var options = {};\n        this.myTree = new Autodesk.Viewing.UI.Tree(delegate, null, this.scrollContainer, options);\n\n        // Bring footer forward\n        this.container.removeChild(this.footer);\n        this.container.appendChild(this.footer);\n\n        this.resizeToContent();\n    }\n\n    _createDelegate() {\n        var delegate = new Autodesk.Viewing.UI.TreeDelegate();\n        delegate.setGlobalManager(this.globalManager);\n        delegate.extension = this.extension;\n        delegate.viewer = this.viewer;\n        delegate.getTreeNodeId = function(node) {\n            return node.__id;\n        };\n        delegate.getTreeNodeLabel = function(node) {\n            return node.__id;\n        };\n        delegate.getTreeNodeClass = function(node) {\n            return null;\n        };\n        delegate.isTreeNodeGroup = function(node) {\n            return false;\n        };\n        delegate.shouldCreateTreeNode = function (node){\n            return true;\n        };\n        // Adds additional HTML and styling to the created entry\n        delegate.createTreeNode = function(node, header, options, type, depth) {\n\n            header.innerHTML = POINT_HTML;\n\n            // Label for point identification\n            header.querySelector('label').textContent = node.__id;\n\n            // LMV { x, y, z } values\n            var row = header.querySelector('tr[user-data=\"lmv\"]');\n            var xyz = row.querySelectorAll('td');\n            setTextContent(xyz[1], node.point.x); // skip first cell\n            setTextContent(xyz[2], node.point.y);\n            setTextContent(xyz[3], node.point.z);\n\n            // LonLat/WGS84 values\n            row = header.querySelector('tr[user-data=\"wgs84\"]');\n            if (this.extension.hasGeolocationData()) {\n                var lonLat = this.extension.lmvToLonLat(node.point);\n                xyz = row.querySelectorAll('td');\n                setTextContent(xyz[1], lonLat.x); // skip first cell\n                setTextContent(xyz[2], lonLat.y);\n                setTextContent(xyz[3], lonLat.z);\n            } else {\n                // Hide\n                row.style.display = 'none';\n            }\n\n\n            // Hide \"Map\" button when there's no geolocation data for the model\n            if (!this.extension.hasGeolocationData()) {\n                header.querySelector('[user-data=map]').style.display = 'none';\n            }\n        };\n        delegate.onTreeNodeClick = (tree, node, event) => {\n\n            if (event.target.tagName === 'BUTTON') {\n\n                let action = event.target.getAttribute('user-data');\n                const _window = this.getWindow();\n                switch (action) {\n                    case 'close': {\n                        this.extension.removePoint(node);\n                        return;\n                    }\n\n                    case 'map': {\n                        var lonLat = this.extension.lmvToLonLat(node.point);\n                        let mapsUrl = this.extension.getGoogleMapsUrl(lonLat);\n                        console.log(mapsUrl);\n                        _window.open(mapsUrl);\n                        return;\n                    }\n                }\n\n                return;\n            }\n\n            // Restore camera position\n            this.viewer.restoreState(node.__viewerState);\n            //console.log(node.point);\n        };\n\n        return delegate;\n    }\n\n    /**\n     * @private\n     * Renders model's geolocation data onto an HTML div\n     *\n     * @param {HtmlDiv} geoDiv\n     * @param {Object} model\n     */\n    _setGeolocationMetadata(geoDiv, model) {\n        // Refer to geo_template.html\n        let row;\n        const metadata = model.getData().metadata || {};\n        const geoRef = metadata.georeference || {};\n        const otherVals = metadata['custom values'] || {};\n        const globalOffset = model.getData().globalOffset || {x: 0, y: 0, z: 0};\n        const distanceUnit = model.getDisplayUnit();\n\n        // globalOffset\n        row = geoDiv.querySelector('[user-data=row-globalOffset]');\n        setTextContent(row.children[1], globalOffset.x);\n        setTextContent(row.children[2], globalOffset.y);\n        setTextContent(row.children[3], globalOffset.z);\n\n        // positionLL84\n        row = geoDiv.querySelector('[user-data=row-positionLL84]');\n        setTextContent(row.children[1], Array.isArray(geoRef.positionLL84) ? geoRef.positionLL84[0] : 'N/A');\n        setTextContent(row.children[2], Array.isArray(geoRef.positionLL84) ? geoRef.positionLL84[1] : 'N/A');\n        setTextContent(row.children[3], Array.isArray(geoRef.positionLL84) ? geoRef.positionLL84[2] : 'N/A');\n\n        // refPointLMV\n        row = geoDiv.querySelector('[user-data=row-refPointLMV]');\n        setTextContent(row.children[1], Array.isArray(geoRef.refPointLMV) ? geoRef.refPointLMV[0] : 'N/A');\n        setTextContent(row.children[2], Array.isArray(geoRef.refPointLMV) ? geoRef.refPointLMV[1] : 'N/A');\n        setTextContent(row.children[3], Array.isArray(geoRef.refPointLMV) ? geoRef.refPointLMV[2] : 'N/A');\n\n        // angleToTrueNorth\n        row = geoDiv.querySelector('[user-data=row-angleToTrueNorth]');\n        setTextContent(row.children[1], otherVals.angleToTrueNorth !== undefined ? otherVals.angleToTrueNorth : 'N/A');\n\n        // scaleFactor\n        row = geoDiv.querySelector('[user-data=row-scaleFactor]');\n        setTextContent(row.children[1], otherVals.scaleFactor !== undefined ? otherVals.scaleFactor : 'N/A');\n\n        // refPointTransform\n        row = geoDiv.querySelector('[user-data=row-refPointTransform]');\n        setTextContent(row.children[1], Array.isArray(otherVals.refPointTransform) ? 'Available' : 'N/A');\n\n        // distanceUnit\n        row = geoDiv.querySelector('[user-data=row-distanceUnit]');\n        setTextContent(row.children[1], distanceUnit || 'N/A');\n\n    }\n}\n\nfunction setTextContent(div, value, decimals) {\n    decimals = decimals || 6;\n    div.textContent = typeof value === 'number' ? value.toFixed(decimals) : value;\n    div.setAttribute('title', value);\n}\n","export default \"\\n<table style=\\\"width:100%;\\\">\\n    <tr user-data=\\\"row-positionLL84\\\" style=\\\"color: #2cd86a;\\\">\\n        <td>GPS (positionLL84)</td>\\n        <td style=\\\"border: 1px solid black\\\">_latitude_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_longitude_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_height_meters_</td>\\n    </tr>\\n    <tr user-data=\\\"row-refPointLMV\\\">\\n        <td>Viewer (refPointLMV)</td>\\n        <td style=\\\"border: 1px solid black\\\">_x_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_y_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_z_</td>\\n    </tr>\\n    <tr user-data=\\\"row-angleToTrueNorth\\\">\\n        <td>angleToTrueNorth</td>\\n        <td style=\\\"border: 1px solid black\\\" colspan=\\\"3\\\">_angle_deg_</td>\\n    </tr>\\n    <tr user-data=\\\"row-scaleFactor\\\">\\n        <td>scaleFactor</td>\\n        <td style=\\\"border: 1px solid black\\\" colspan=\\\"3\\\">_scale_num_</td>\\n    </tr>\\n    <tr user-data=\\\"row-refPointTransform\\\">\\n        <td>refPointTransform</td>\\n        <td style=\\\"border: 1px solid black\\\" colspan=\\\"3\\\">_yes_or_no_</td>\\n    </tr>\\n    <tr user-data=\\\"row-distanceUnit\\\">\\n        <td>distanceUnit</td>\\n        <td style=\\\"border: 1px solid black\\\" colspan=\\\"3\\\">_meters_or_inches_or_etc_</td>\\n    </tr>\\n    <tr user-data=\\\"row-globalOffset\\\">\\n        <td>globalOffset</td>\\n        <td style=\\\"border: 1px solid black\\\">_x_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_y_</td>\\n        <td style=\\\"border: 1px solid black;\\\">_z_</td>\\n    </tr>\\n\\n</table>\\n\";","\nconst av = Autodesk.Viewing;\n\nexport class CanvasPoint {\n\n    constructor(viewer, data, parentDiv) {\n        this.viewer = viewer;\n        this.setGlobalManager(this.viewer.globalManager);\n        this.data = data;\n\n        const _document = this.getDocument();\n        this.div = _document.createElement('div');\n        this.div.style.position = 'absolute';\n        this.div.style.background = 'rgb(14, 14, 14)';\n        this.div.textContent = data.__id;\n        this.onCameraChange();\n\n        parentDiv.appendChild(this.div);\n    }\n\n    hasData(data) {\n        return this.data === data;\n    }\n\n    onCameraChange() {\n        var clientPos = this.viewer.worldToClient(this.data.point);\n        this.div.style.left = clientPos.x + \"px\";\n        this.div.style.top = clientPos.y + \"px\";\n    }\n\n    destroy() {\n        if (this.div) {\n            this.div.parentElement.removeChild(this.div);\n            this.div = null;\n        }\n        this.viewer = null;\n        this.data = null;\n    }\n\n\n}\n\nav.GlobalManagerMixin.call(CanvasPoint.prototype);","import { CanvasPoint } from './canvasPoint';\n\nconst av = Autodesk.Viewing;\n\n/**\n * Maintains a list of 3D points on screen.\n */\nexport class CanvasPoints {\n\n    constructor(extension) {\n        this.extension = extension;\n        this.viewer = extension.viewer;\n        this.setGlobalManager(this.viewer.globalManager);\n        this._points = [];\n\n        this.onCameraChange = this.onCameraChange.bind(this);\n    }\n\n    pushPoint(pointData) {\n\n        if (!this.divContainer) {\n            const _document = this.getDocument();\n            this.divContainer = _document.createElement('div');\n            this.divContainer.style.position = 'absolute';\n            this.divContainer.style.top = \"0\";\n            this.divContainer.style.left = \"0\";\n            this.divContainer.style.width = \"100%\";\n            this.divContainer.style.height = \"100%\";\n            this.divContainer.style['pointer-events'] = \"none\";\n            this.viewer.container.appendChild(this.divContainer);\n\n            this.viewer.addEventListener(av.CAMERA_CHANGE_EVENT, this.onCameraChange);\n        }\n\n        var canvasPoint = new CanvasPoint(this.viewer, pointData, this.divContainer);\n        this._points.push( canvasPoint );\n    }\n\n    removePoint(pointData) {\n        var index = -1;\n        for (var i=0; i<this._points.length; ++i) {\n            if (this._points[i].hasData(pointData)) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1)\n            return;\n        var canvasPoint = this._points[index];\n        canvasPoint.destroy();\n        this._points.splice(index, 1);\n    }\n\n    destroy() {\n        if (this._points) {\n            this._points.forEach((canvasPoint) => {\n                canvasPoint.destroy();\n            });\n            this._points = null;\n        }\n        if (this.divContainer) {\n            this.divContainer.parentElement.removeChild(this.divContainer);\n            this.divContainer = null;\n        }\n\n        this.extension = null;\n\n        this.viewer.removeEventListener(av.CAMERA_CHANGE_EVENT, this.onCameraChange);\n        this.viewer = null;\n    }\n\n    onCameraChange(event) {\n        this._points.forEach((canvasPoint) => {\n            canvasPoint.onCameraChange(event);\n        });\n    }\n}\n\nav.GlobalManagerMixin.call(CanvasPoints.prototype);","import { Panel } from './panel';\nimport { CanvasPoints } from './canvas';\n\nexport class UiController {\n\n    constructor(extension) {\n\n        this.extension = extension;\n        this.panel = new Panel(extension);\n        this.canvas = new CanvasPoints(extension);\n    }\n\n    pushPoint(pointData) {\n\n        if (!pointData)\n            return;\n\n        // Make sure the panel is visible\n        this.panel.setVisible(true);\n        this.panel.pushPoint(pointData);\n\n        this.canvas.pushPoint(pointData);\n    }\n\n    removePoint(pointData) {\n\n        if (!pointData)\n            return;\n\n        this.panel.removePoint(pointData);\n        this.canvas.removePoint(pointData);\n    }\n\n    activate() {\n        this.panel.setVisible(true);\n    }\n\n    deactivate() {\n        this.panel.setVisible(false);\n    }\n\n    destroy() {\n        this.extension = null;\n        if (this.panel) {\n            this.panel.destroy();\n            this.panel = null;\n        }\n        if (this.canvas) {\n            this.canvas.destroy();\n            this.canvas = null;\n        }\n    }\n}","\n\n// from InfraWorks' Ellipsoid.h\nconst _a = 6378137.0; // meters\nconst _f = 298.257223563;\nconst _f_inv = 1.0 / _f;\nconst _b = _a * (1.0 - _f_inv);\nconst _e2 = (2.0 - _f_inv) * _f_inv;\n\n/**\n * Ellipsoid values for WGS84\n */\nexport class Ellipsoid {\n\n    static a() { return _a; }\n    static MajorRadius() { return _a; }\n\n    static f() { return _f_inv; }\n    static InverseFlattening() { return _f_inv; }\n\n    static b() { return _b; }\n    static MinorRadius() { return _b; }\n\n    static e2() { return _e2; }\n    static EccentricitySquared() { return _e2; }\n}","import { Ellipsoid } from './Ellipsoid';\n\n\nconst _pi = Math.PI; // 3.14159265358979; // Same as Revit\nconst _degToRadFactor = _pi / 180;\nconst _radToDegFactor = 180 / _pi;\n\nconst avp = Autodesk.Viewing.Private;\n\nexport function degToRad(degrees) {\n    return degrees * _degToRadFactor;\n}\n\nexport function radToDeg(radians) {\n    return radians * _radToDegFactor;\n}\n\n/**\n * Converts a WGS84-coordinate (longitude, latitude, height)\n * into a 3D-coordinate in geocentric ECEF format.\n *\n * @param {LmvVector3} wgsCoord\n * @param {number} wgsCoord.x - in as Longitude\n * @param {number} wgsCoord.y - in as Latitude\n * @param {number} wgsCoord.z - in as Height in meters\n *\n * @returns {lmvVector3} coordinate in ECEF, meters.\n */\nexport function ll2Geocentric(wgsCoord) {\n\n    const lambda = degToRad(wgsCoord.x); // longitude\n    const phi    = degToRad(wgsCoord.y); // latitude\n    const h      = wgsCoord.z;\n\n    const sinPhi = Math.sin(phi);\n    const cosPhi = Math.cos(phi);\n    const sinL = Math.sin(lambda);\n    const cosL = Math.cos(lambda);\n\n    const v = Ellipsoid.a() / Math.sqrt(1.0 - Ellipsoid.e2() * (sinPhi * sinPhi));\n    const tmp = (v + h) * cosPhi;\n\n    let x = tmp * cosL;\n    let y = tmp * sinL;\n    let z = ((1.0 - Ellipsoid.e2()) * v + h) * sinPhi;\n    return new avp.LmvVector3(x, y, z);\n}\n\n/**\n * Converts a 3D-coordinate in geocentric ECEF format\n * into a WGS84-coordinate (longitude, latitude, height)\n *\n * @param {LmvVector3} geoPoint - ECEF position in meters.\n * @returns {lmvVector3} WGS84-coordinate (longitude, latitude, height).\n */\nexport function geocentric2LL(geoPoint) {\n\n    const x = geoPoint.x;\n    const y = geoPoint.y;\n    const z = geoPoint.z;\n\n    const b = Ellipsoid.b();\n    const epsilon = Ellipsoid.e2() / (1.0 - Ellipsoid.e2());\n\n    const p = Math.sqrt(x*x + y*y);\n    const q = Math.atan2((z * Ellipsoid.a()),(p*b));\n\n    // sin^3(q) and cos^3(q)\n    let sin3q = Math.sin(q);\n    let cos3q = Math.cos(q);\n    sin3q = sin3q * sin3q * sin3q;\n    cos3q = cos3q * cos3q * cos3q;\n\n    const phi    = Math.atan2( (z + epsilon * b * sin3q) , (p - Ellipsoid.e2() * Ellipsoid.a() * cos3q) );\n    const lambda = Math.atan2( y , x );\n\n    let sin2phi = Math.sin(phi);\n    sin2phi = sin2phi * sin2phi;\n\n    const v = Ellipsoid.a() / Math.sqrt(1.0 - Ellipsoid.e2() * sin2phi);\n    const h = p / Math.cos(phi) - v;\n\n    let xx = radToDeg(lambda); // longitude\n    let yy = radToDeg(phi);    // latitude\n    let zz = h;                // height(m)\n    return new avp.LmvVector3(xx, yy, zz);\n}\n","import { degToRad, ll2Geocentric, geocentric2LL } from './GlobeMath';\n\nconst avp = Autodesk.Viewing.Private;\n\n// from InfraWorks' LocalCS.h\nexport class LocalCS {\n\n    /**\n     * Initializes a transformation context that can convert from LMV space to Latitude Longitude,\n     * based on georeference attributes of a specific SVF model.\n     * @param {LmvVector3} originLL84 - WGS84 world position expressed in { x: longitude, y: latutude, z: 0 }\n     */\n    constructor(originLL84, geoRefTransform, unitToMeter, modelToLmv) {\n\n        this.m_originLL84 = originLL84.clone();\n\n        let worldOrigin = ll2Geocentric(originLL84);\n\n        //Converts model coordinates to meters\n        var unitScale = new avp.LmvMatrix4(true);\n        unitScale.elements[0] = unitScale.elements[5] = unitScale.elements[10] = (unitToMeter || 1.0);\n\n        //Adds geocentric origin offset of the local ENU origin\n        var translation = new avp.LmvMatrix4(true);\n        translation.elements[12] = worldOrigin.x;\n        translation.elements[13] = worldOrigin.y;\n        translation.elements[14] = worldOrigin.z;\n\n        //Rotates from ENU to geocentric basis\n        var enu2ecefOrientation = LocalCS.createEnu2Ecef({ x:originLL84.x, y:originLL84.y });\n\n        if (!geoRefTransform)\n            geoRefTransform = new avp.LmvMatrix4(true);\n\n        if (!modelToLmv)\n            modelToLmv = new avp.LmvMatrix4(true);\n\n        let lmvToModel = new avp.LmvMatrix4(true);\n        lmvToModel.copy(modelToLmv).invert();\n\n        this.m_model2ecef = translation //add geocentric origin\n                            .multiply(enu2ecefOrientation)   //geocentric orientation\n                            .multiply(unitScale) //scale refpoint space to meters\n                            .multiply(geoRefTransform) //from model local to refPoint (ENU) space\n                            .multiply(lmvToModel); //from LMV scene to model local\n\n        this.m_ecef2model = new avp.LmvMatrix4(true);\n        this.m_ecef2model.copy(this.m_model2ecef).invert();\n    }\n\n    getLL84() {\n        return this.m_originLL84;\n    }\n\n    /**\n     * Conversion from global geocentric coords to ENU coords (= local)\n     * @param {LmvVector3} point - in global geocentric coords\n     * @returns {LmvVector3} - point in ENU coords\n     */\n    LL842LmvPoint(point) {\n        var localPoint = ll2Geocentric(point);\n        localPoint = this.m_ecef2model.transformPoint(localPoint);\n        return localPoint;\n    }\n\n    /**\n     * Conversion from ENU coords (= local) to global geocentric coords\n     * @param {LmvVector3} point - in ENU coords\n     * @returns {LmvVector3} - point in global geocentric coords\n     */\n    lmv2LL84Point(point) {\n        var worldPoint = this.m_model2ecef.transformPoint(point.clone());\n        return geocentric2LL(worldPoint);\n    }\n\n    /**\n     * Computes the orientation matrix M for a local ENU system.\n     * A point p in geocentric space can be converted to the ENU system point p'\n     * by p' = M*(p-anchor), where anchor is the origin in geocentric space.\n     *\n     * ECEF = Earth-Centered, Earth-Fixed\n     * ENU = East/North/Up\n     *\n     * @param {LmvVector3} originLL84\n     * @returns {LmvMatrix4}\n     */\n    static createEnu2Ecef(originLL84) {\n\n        const lambda = degToRad(originLL84.x);\n        const phi = degToRad(originLL84.y);\n\n        const sinLambda = Math.sin(lambda);\n        const cosLambda = Math.cos(lambda);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n\n        var ret = new avp.LmvMatrix4(true);\n        ret.set(\n            -sinLambda, -sinPhi * cosLambda, cosPhi*cosLambda, 0,\n            cosLambda,  -sinPhi * sinLambda, cosPhi*sinLambda, 0,\n            0,           cosPhi,             sinPhi,           0,\n            0, 0, 0, 1\n        );\n        return ret;\n    }\n\n    static createFromModel(model) {\n\n        const metadata = model.getData().metadata || {};\n        const geoRef = metadata.georeference || {};\n        if (!Array.isArray(geoRef.positionLL84)) {\n            return null;\n        }\n\n        //NOTE: [TS] The elevation of the LL84 point comes in as 0. However,\n        //I suspect that the LMV reference point is not always given at sea level,\n        //so we need to use a more appropriate elevation for the LL84 point. Otherwise\n        //the elevation values will be incorrect (by some fixed but unknown offset).\n        const ll84 = geoRef.positionLL84;\n        const originLL84 = new avp.LmvVector3(ll84[0], ll84[1], ll84[2]);\n\n        var localCS = new LocalCS(originLL84, model.getData().refPointTransform, model.getUnitScale(), model.getData().placementWithOffset);\n\n        return localCS;\n    }\n\n}\n","\nimport { PointTool } from './ui/tool';\nimport { UiController } from './ui/uiController';\nimport { LocalCS } from './LocalCS';\nimport { getGoogleMapsUrl } from './Maps';\nimport * as GlobeMath from './GlobeMath';\n\nconst av = Autodesk.Viewing;\nconst avp = Autodesk.Viewing.Private;\n\nexport * from './LocalCS';\n\n/**\n * Provides functions for converting GPS coordinates in WGS-84 format { x: Longitude, y: Latitude, z: Height(m) } into\n * Viewer scene coordinates, and back. Supports a single model loaded into the scene.\n *\n * The extension id is: `Autodesk.Geolocation`\n *\n * @example\n *   viewer.loadExtension('Autodesk.Geolocation')\n *\n * @memberof Autodesk.Viewing.Extensions\n * @alias Autodesk.Viewing.Extensions.GeolocationExtension\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n */\nexport class GeolocationExtension extends av.Extension {\n\n    /**\n     * @param {Autodesk.Viewing.Viewer3D} viewer - The Viewer instance\n     * @param {object} [options] - Not used\n     */\n    constructor(viewer, options) {\n        super(viewer, options);\n        this.nextPointId = 0;\n    }\n\n    static getGlobeMath() {\n        return GlobeMath;\n    }\n\n    load() {\n\n        this.ui = new UiController(this),\n        this.tool = new PointTool(this);\n        this.viewer.toolController.registerTool(this.tool);\n\n        return true;\n    }\n\n    unload() {\n\n        this.deactivate();\n\n        if (this.tool) {\n            this.viewer.toolController.deregisterTool(this.tool);\n            this.tool.destroy();\n            this.tool = null;\n        }\n\n        if (this.ui) {\n            this.ui.destroy();\n            this.ui = null;\n        }\n\n        this.viewer = null;\n\n        return true;\n    }\n\n    /**\n     * When active, the extension will detect clicks on the model and will\n     * place a marker on the model. A panel will be displayed containing vertices clicked\n     * on the model. Each point-entry will also contain GPS its associated GPS position.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#activate\n     */\n    activate() {\n        if (!this.viewer.model)\n            return false;\n        if (this.isActive())\n            return true;\n        this.ui.activate();\n        this.viewer.toolController.activateTool(this.tool.getName());\n        if (this.viewer.model.is3d()) {\n            this.viewer.getExtension('Autodesk.ViewCubeUi', function(ext) {\n                ext.showTriad(true);\n            });\n        }\n        return true;\n    }\n\n    /**\n     * Stops detecting click events on the canvas and closes the Panel.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#deactivate\n     */\n    deactivate() {\n        if (!this.isActive())\n            return true;\n        this.ui.deactivate();\n        this.viewer.toolController.deactivateTool(this.tool.getName());\n        if (this.viewer.model && this.viewer.model.is3d()) {\n            this.viewer.getExtension('Autodesk.ViewCubeUi', function(ext) {\n                ext.showTriad(false);\n            });\n        }\n        return true;\n    }\n\n    /**\n     * Whether the extension is active.\n     * When the extension is active, click events will be processed and added\n     * into a Panel.\n     *\n     * @returns {boolean} True if the extension is active.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#isActive\n     */\n    isActive() {\n        var toolActive = this.viewer.toolController.isToolActivated(this.tool.getName());\n        return toolActive;\n    }\n\n    /**\n     * User has clicked on the canvas and a new point is to be added.\n     *\n     * @param {object} pointData\n     * @private\n     */\n    pushPoint(pointData) {\n        pointData.__id = this.nextPointId++;\n        pointData.__viewerState = this.viewer.getState({viewport: true});\n        this.ui.pushPoint(pointData);\n    }\n\n    /**\n     * Invoked by Panel UI; removes a point from the canvas.\n     *\n     * @param pointData\n     * @private\n     */\n    removePoint(pointData) {\n        this.ui.removePoint(pointData);\n    }\n\n    /**\n     * @private\n     */\n    getLocalCS() {\n        if (!this._localCS) {\n            this._localCS = LocalCS.createFromModel(this.viewer.model);\n        }\n        return this._localCS;\n    }\n\n    /**\n     * @returns {boolean} true when the model contains geolocation data.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#hasGeolocationData\n     */\n    hasGeolocationData() {\n        var localCs = this.getLocalCS();\n        return !!localCs;\n    }\n\n    /**\n     * Converts viewer coordinates (obtained with something like `viewer.clientToWorld()`)\n     * into { x: Longitude, y: Latitude, z: Height (meters) } in WGS-84 format.\n     *\n     * @param {THREE.Vector3} lmvPoint - 3D point in the scene\n     * @returns {THREE.Vector3} GPS coordinate in WGS-84 format: { x: Longitude, y: Latitude, z: Height }\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#lmvToLonLat\n     */\n    lmvToLonLat(lmvPoint) {\n        var thePoint = new avp.LmvVector3(lmvPoint.x, lmvPoint.y, lmvPoint.z);\n        let localCS = this.getLocalCS();\n        let lonLat = localCS.lmv2LL84Point(thePoint);\n        return lonLat;\n    }\n\n    /**\n     * Converts coordinates from { x: Longitude, y: Latitude, z: Height (meters) } in WGS-84 format\n     * into viewer scene coordinates.\n     *\n     * @param {THREE.Vector3} lonLat - GPS coordinate in WGS-84 format: { x: Longitude, y: Latitude, z: Height }\n     * @returns {THREE.Vector3} 3D point in the scene\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#lonLatToLmv\n     */\n    lonLatToLmv(lonLat) {\n        var lonLatPoint = new avp.LmvVector3(lonLat.x, lonLat.y, lonLat.z || 0);\n        let localCS = this.getLocalCS();\n        let lmvPoint = localCS.LL842LmvPoint(lonLatPoint);\n        return lmvPoint;\n    }\n\n    /**\n     * Returns a Google Maps URL with a PIN on the specified GPS location.\n     * When no argument is provided, the URL will use the Model's geolocation if available.\n     *\n     * @param {THREE.Vector3} [pointLL84] - GPS location in WGS-84 format: { x: Longitude, y: Latitude }. Height is ignored.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#openGoogleMaps\n     */\n    getGoogleMapsUrl(pointLL84) {\n\n        var localCS = this.getLocalCS();\n        if (!pointLL84 && !localCS) {\n            console.warn(\"Model doesn't contain geolocation data.\");\n            return;\n        }\n\n        const wgs84 = pointLL84 || localCS.getLL84();\n        return getGoogleMapsUrl(wgs84);\n    }\n\n    /**\n     * Returns a Promise that resolves with a position in Viewer-space coordinates based on the\n     * device's real world GPS position.\n     *\n     * @returns {Promise} that resolves with a THREE.Vector3 containing Viewer-space coordinates. It rejects if device's real world GPS position is not available.\n     *\n     * @alias Autodesk.Viewing.Extensions.GeolocationExtension#getCurrentPositionLmv\n     */\n    getCurrentPositionLmv() {\n\n        if (!this.hasGeolocationData()) {\n            return Promise.reject(\"Model doesn't contain geolocation data.\");\n        }\n\n        return new Promise((resolve, reject) => {\n            if (\"geolocation\" in navigator) {\n                navigator.geolocation.getCurrentPosition((position) => {\n                    var lmvPos = this.lonLatToLmv({x: position.coords.longitude, y: position.coords.latitude, z:0});\n                    resolve(lmvPos);\n                });\n            } else {\n                reject('geolocation API not available on this device.');\n            }\n        });\n    }\n\n\n}\n\nav.theExtensionManager.registerExtension('Autodesk.Geolocation', GeolocationExtension);\n","\n\nexport function getGoogleMapsUrl(pointLL84) {\n\n    if (!pointLL84)\n        return null;\n\n    const longitude = pointLL84.x;\n    const latitude = pointLL84.y;\n\n    let URL = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n    return URL;\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","av","Autodesk","Viewing","PointTool","extension","ToolInterface","this","names","viewer","handleSingleClick","event","button","canvasX","canvasY","res","clientToWorld","pushPoint","activate","name","viewerApi","impl","pauseHighlight","clearSelection","deactivate","destroy","avu","UI","Panel","DockingPanel","constructor","super","container","setGlobalManager","globalManager","title","classList","add","nonScrollingContentHeight","myTree","parentElement","removeChild","pointData","parent","myRootContainer","createElement_","removePoint","elem","getElementForNode","setVisible","show","_create","getContentSize","height","scrollContainer","scrollHeight","width","scrollWidth","style","top","geoDiv","getDocument","createElement","className","innerHTML","appendChild","_setGeolocationMetadata","model","clientHeight","extraHeight","createScrollContainer","left","heightAdjustment","marginTop","delegate","_createDelegate","Tree","footer","resizeToContent","TreeDelegate","getTreeNodeId","node","__id","getTreeNodeLabel","getTreeNodeClass","isTreeNodeGroup","shouldCreateTreeNode","createTreeNode","header","options","type","depth","querySelector","textContent","row","xyz","querySelectorAll","setTextContent","point","x","y","z","hasGeolocationData","lonLat","lmvToLonLat","display","onTreeNodeClick","tree","target","tagName","restoreState","__viewerState","action","getAttribute","_window","getWindow","mapsUrl","getGoogleMapsUrl","console","log","open","metadata","getData","geoRef","georeference","otherVals","globalOffset","distanceUnit","getDisplayUnit","children","Array","isArray","positionLL84","refPointLMV","undefined","angleToTrueNorth","scaleFactor","refPointTransform","div","decimals","toFixed","setAttribute","CanvasPoint","data","parentDiv","_document","position","background","onCameraChange","hasData","clientPos","worldToClient","GlobalManagerMixin","CanvasPoints","_points","bind","divContainer","addEventListener","CAMERA_CHANGE_EVENT","canvasPoint","push","index","i","length","splice","forEach","removeEventListener","UiController","panel","canvas","_a","_f_inv","_b","_e2","Ellipsoid","a","MajorRadius","f","InverseFlattening","b","MinorRadius","e2","EccentricitySquared","_pi","Math","PI","_degToRadFactor","_radToDegFactor","avp","Private","degToRad","degrees","radToDeg","radians","ll2Geocentric","wgsCoord","lambda","phi","h","sinPhi","sin","cosPhi","cos","sinL","cosL","v","sqrt","tmp","LmvVector3","geocentric2LL","geoPoint","epsilon","p","q","atan2","sin3q","cos3q","sin2phi","xx","yy","zz","LocalCS","originLL84","geoRefTransform","unitToMeter","modelToLmv","m_originLL84","clone","worldOrigin","unitScale","LmvMatrix4","elements","translation","enu2ecefOrientation","createEnu2Ecef","lmvToModel","copy","invert","m_model2ecef","multiply","m_ecef2model","getLL84","LL842LmvPoint","localPoint","transformPoint","lmv2LL84Point","sinLambda","cosLambda","ret","set","createFromModel","ll84","getUnitScale","placementWithOffset","GeolocationExtension","Extension","nextPointId","getGlobeMath","GlobeMath","load","ui","tool","toolController","registerTool","unload","deregisterTool","isActive","activateTool","getName","is3d","getExtension","ext","showTriad","deactivateTool","isToolActivated","getState","viewport","getLocalCS","_localCS","lmvPoint","thePoint","lonLatToLmv","lonLatPoint","pointLL84","localCS","warn","longitude","getCurrentPositionLmv","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","lmvPos","coords","latitude","theExtensionManager","registerExtension"],"sourceRoot":""}