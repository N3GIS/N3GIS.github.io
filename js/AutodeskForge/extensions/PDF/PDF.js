/*!
 * LMV v7.105.0
 *
 * Copyright 2025 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@adsk/pdfjs-dist/legacy/build/pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/@adsk/pdfjs-dist/legacy/build/pdf.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"addLinkAttributes\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.addLinkAttributes;\n  }\n}));\nObject.defineProperty(exports, \"getFilenameFromUrl\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.getFilenameFromUrl;\n  }\n}));\nObject.defineProperty(exports, \"LinkTarget\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.LinkTarget;\n  }\n}));\nObject.defineProperty(exports, \"loadScript\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.loadScript;\n  }\n}));\nObject.defineProperty(exports, \"PDFDateString\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.PDFDateString;\n  }\n}));\nObject.defineProperty(exports, \"RenderingCancelledException\", ({\n  enumerable: true,\n  get: function get() {\n    return _display_utils.RenderingCancelledException;\n  }\n}));\nObject.defineProperty(exports, \"build\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.build;\n  }\n}));\nObject.defineProperty(exports, \"getDocument\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.getDocument;\n  }\n}));\nObject.defineProperty(exports, \"LoopbackPort\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.LoopbackPort;\n  }\n}));\nObject.defineProperty(exports, \"PDFDataRangeTransport\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.PDFDataRangeTransport;\n  }\n}));\nObject.defineProperty(exports, \"PDFWorker\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.PDFWorker;\n  }\n}));\nObject.defineProperty(exports, \"putBinaryImageData\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.putBinaryImageData;\n  }\n}));\nObject.defineProperty(exports, \"version\", ({\n  enumerable: true,\n  get: function get() {\n    return _api.version;\n  }\n}));\nObject.defineProperty(exports, \"CMapCompressionType\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.CMapCompressionType;\n  }\n}));\nObject.defineProperty(exports, \"createObjectURL\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.createObjectURL;\n  }\n}));\nObject.defineProperty(exports, \"createPromiseCapability\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.createPromiseCapability;\n  }\n}));\nObject.defineProperty(exports, \"createValidAbsoluteUrl\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.createValidAbsoluteUrl;\n  }\n}));\nObject.defineProperty(exports, \"InvalidPDFException\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.InvalidPDFException;\n  }\n}));\nObject.defineProperty(exports, \"MissingPDFException\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.MissingPDFException;\n  }\n}));\nObject.defineProperty(exports, \"OPS\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.OPS;\n  }\n}));\nObject.defineProperty(exports, \"PasswordResponses\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.PasswordResponses;\n  }\n}));\nObject.defineProperty(exports, \"PermissionFlag\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.PermissionFlag;\n  }\n}));\nObject.defineProperty(exports, \"removeNullCharacters\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.removeNullCharacters;\n  }\n}));\nObject.defineProperty(exports, \"shadow\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.shadow;\n  }\n}));\nObject.defineProperty(exports, \"UnexpectedResponseException\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.UnexpectedResponseException;\n  }\n}));\nObject.defineProperty(exports, \"UNSUPPORTED_FEATURES\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.UNSUPPORTED_FEATURES;\n  }\n}));\nObject.defineProperty(exports, \"Util\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.Util;\n  }\n}));\nObject.defineProperty(exports, \"VerbosityLevel\", ({\n  enumerable: true,\n  get: function get() {\n    return _util.VerbosityLevel;\n  }\n}));\nObject.defineProperty(exports, \"AnnotationLayer\", ({\n  enumerable: true,\n  get: function get() {\n    return _annotation_layer.AnnotationLayer;\n  }\n}));\nObject.defineProperty(exports, \"apiCompatibilityParams\", ({\n  enumerable: true,\n  get: function get() {\n    return _api_compatibility.apiCompatibilityParams;\n  }\n}));\nObject.defineProperty(exports, \"GlobalWorkerOptions\", ({\n  enumerable: true,\n  get: function get() {\n    return _worker_options.GlobalWorkerOptions;\n  }\n}));\nObject.defineProperty(exports, \"renderTextLayer\", ({\n  enumerable: true,\n  get: function get() {\n    return _text_layer.renderTextLayer;\n  }\n}));\nObject.defineProperty(exports, \"SVGGraphics\", ({\n  enumerable: true,\n  get: function get() {\n    return _svg.SVGGraphics;\n  }\n}));\n\nvar _display_utils = __w_pdfjs_require__(1);\n\nvar _api = __w_pdfjs_require__(135);\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _annotation_layer = __w_pdfjs_require__(149);\n\nvar _api_compatibility = __w_pdfjs_require__(139);\n\nvar _worker_options = __w_pdfjs_require__(142);\n\nvar _text_layer = __w_pdfjs_require__(151);\n\nvar _svg = __w_pdfjs_require__(152);\n\nvar pdfjsVersion = '2.8.173';\nvar pdfjsBuild = 'bc834d510';\n{\n  var _require = __w_pdfjs_require__(6),\n      isNodeJS = _require.isNodeJS;\n\n  if (isNodeJS) {\n    var PDFNodeStream = __w_pdfjs_require__(153).PDFNodeStream;\n\n    (0, _api.setPDFNetworkStreamFactory)(function (params) {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    var PDFNetworkStream = __w_pdfjs_require__(156).PDFNetworkStream;\n\n    var PDFFetchStream;\n\n    if ((0, _display_utils.isFetchSupported)()) {\n      PDFFetchStream = __w_pdfjs_require__(157).PDFFetchStream;\n    }\n\n    (0, _api.setPDFNetworkStreamFactory)(function (params) {\n      if (PDFFetchStream && (0, _display_utils.isValidFetchUrl)(params.url)) {\n        return new PDFFetchStream(params);\n      }\n\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\n/***/ }),\n/* 1 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.addLinkAttributes = addLinkAttributes;\nexports.deprecated = deprecated;\nexports.getFilenameFromUrl = getFilenameFromUrl;\nexports.isFetchSupported = isFetchSupported;\nexports.isValidFetchUrl = isValidFetchUrl;\nexports.loadScript = loadScript;\nexports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nexports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\nvar SVG_NS = \"http://www.w3.org/2000/svg\";\n\nvar BaseCanvasFactory = /*#__PURE__*/function () {\n  function BaseCanvasFactory() {\n    _classCallCheck(this, BaseCanvasFactory);\n\n    if (this.constructor === BaseCanvasFactory) {\n      (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  _createClass(BaseCanvasFactory, [{\n    key: \"create\",\n    value: function create(width, height) {\n      (0, _util.unreachable)(\"Abstract method `create` called.\");\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(canvasAndContext, width, height) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      canvasAndContext.canvas.width = width;\n      canvasAndContext.canvas.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(canvasAndContext) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n\n      canvasAndContext.canvas.width = 0;\n      canvasAndContext.canvas.height = 0;\n      canvasAndContext.canvas = null;\n      canvasAndContext.context = null;\n    }\n  }]);\n\n  return BaseCanvasFactory;\n}();\n\nexports.BaseCanvasFactory = BaseCanvasFactory;\n\nvar DOMCanvasFactory = /*#__PURE__*/function (_BaseCanvasFactory) {\n  _inherits(DOMCanvasFactory, _BaseCanvasFactory);\n\n  var _super = _createSuper(DOMCanvasFactory);\n\n  function DOMCanvasFactory() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$ownerDocument = _ref.ownerDocument,\n        ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument;\n\n    _classCallCheck(this, DOMCanvasFactory);\n\n    _this = _super.call(this);\n    _this._document = ownerDocument;\n    return _this;\n  }\n\n  _createClass(DOMCanvasFactory, [{\n    key: \"create\",\n    value: function create(width, height) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n\n      var canvas = this._document.createElement(\"canvas\");\n\n      var context = canvas.getContext(\"2d\");\n      canvas.width = width;\n      canvas.height = height;\n      return {\n        canvas: canvas,\n        context: context\n      };\n    }\n  }]);\n\n  return DOMCanvasFactory;\n}(BaseCanvasFactory);\n\nexports.DOMCanvasFactory = DOMCanvasFactory;\n\nvar BaseCMapReaderFactory = /*#__PURE__*/function () {\n  function BaseCMapReaderFactory(_ref2) {\n    var _ref2$baseUrl = _ref2.baseUrl,\n        baseUrl = _ref2$baseUrl === void 0 ? null : _ref2$baseUrl,\n        _ref2$isCompressed = _ref2.isCompressed,\n        isCompressed = _ref2$isCompressed === void 0 ? false : _ref2$isCompressed;\n\n    _classCallCheck(this, BaseCMapReaderFactory);\n\n    if (this.constructor === BaseCMapReaderFactory) {\n      (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  _createClass(BaseCMapReaderFactory, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref3) {\n        var _this2 = this;\n\n        var name, url, compressionType;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                name = _ref3.name;\n\n                if (this.baseUrl) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n\n              case 3:\n                if (name) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"CMap name must be specified.\");\n\n              case 5:\n                url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n                compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n                return _context.abrupt(\"return\", this._fetchData(url, compressionType)[\"catch\"](function (reason) {\n                  throw new Error(\"Unable to load \".concat(_this2.isCompressed ? \"binary \" : \"\", \"CMap at: \").concat(url));\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"_fetchData\",\n    value: function _fetchData(url, compressionType) {\n      (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n    }\n  }]);\n\n  return BaseCMapReaderFactory;\n}();\n\nexports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\nvar DOMCMapReaderFactory = /*#__PURE__*/function (_BaseCMapReaderFactor) {\n  _inherits(DOMCMapReaderFactory, _BaseCMapReaderFactor);\n\n  var _super2 = _createSuper(DOMCMapReaderFactory);\n\n  function DOMCMapReaderFactory() {\n    _classCallCheck(this, DOMCMapReaderFactory);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(DOMCMapReaderFactory, [{\n    key: \"_fetchData\",\n    value: function _fetchData(url, compressionType) {\n      var _this3 = this;\n\n      if (isFetchSupported() && isValidFetchUrl(url, document.baseURI)) {\n        return fetch(url).then( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(response) {\n            var cMapData;\n            return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (response.ok) {\n                      _context2.next = 2;\n                      break;\n                    }\n\n                    throw new Error(response.statusText);\n\n                  case 2:\n                    if (!_this3.isCompressed) {\n                      _context2.next = 10;\n                      break;\n                    }\n\n                    _context2.t0 = Uint8Array;\n                    _context2.next = 6;\n                    return response.arrayBuffer();\n\n                  case 6:\n                    _context2.t1 = _context2.sent;\n                    cMapData = new _context2.t0(_context2.t1);\n                    _context2.next = 15;\n                    break;\n\n                  case 10:\n                    _context2.t2 = _util.stringToBytes;\n                    _context2.next = 13;\n                    return response.text();\n\n                  case 13:\n                    _context2.t3 = _context2.sent;\n                    cMapData = (0, _context2.t2)(_context2.t3);\n\n                  case 15:\n                    return _context2.abrupt(\"return\", {\n                      cMapData: cMapData,\n                      compressionType: compressionType\n                    });\n\n                  case 16:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function (_x2) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      }\n\n      return new Promise(function (resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n\n        if (_this3.isCompressed) {\n          request.responseType = \"arraybuffer\";\n        }\n\n        request.onreadystatechange = function () {\n          if (request.readyState !== XMLHttpRequest.DONE) {\n            return;\n          }\n\n          if (request.status === 200 || request.status === 0) {\n            var cMapData;\n\n            if (_this3.isCompressed && request.response) {\n              cMapData = new Uint8Array(request.response);\n            } else if (!_this3.isCompressed && request.responseText) {\n              cMapData = (0, _util.stringToBytes)(request.responseText);\n            }\n\n            if (cMapData) {\n              resolve({\n                cMapData: cMapData,\n                compressionType: compressionType\n              });\n              return;\n            }\n          }\n\n          reject(new Error(request.statusText));\n        };\n\n        request.send(null);\n      });\n    }\n  }]);\n\n  return DOMCMapReaderFactory;\n}(BaseCMapReaderFactory);\n\nexports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\nvar DOMSVGFactory = /*#__PURE__*/function () {\n  function DOMSVGFactory() {\n    _classCallCheck(this, DOMSVGFactory);\n  }\n\n  _createClass(DOMSVGFactory, [{\n    key: \"create\",\n    value: function create(width, height) {\n      (0, _util.assert)(width > 0 && height > 0, \"Invalid SVG dimensions\");\n      var svg = document.createElementNS(SVG_NS, \"svg:svg\");\n      svg.setAttribute(\"version\", \"1.1\");\n      svg.setAttribute(\"width\", width + \"px\");\n      svg.setAttribute(\"height\", height + \"px\");\n      svg.setAttribute(\"preserveAspectRatio\", \"none\");\n      svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n      return svg;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement(type) {\n      (0, _util.assert)(typeof type === \"string\", \"Invalid SVG element type\");\n      return document.createElementNS(SVG_NS, type);\n    }\n  }]);\n\n  return DOMSVGFactory;\n}();\n\nexports.DOMSVGFactory = DOMSVGFactory;\n\nvar PageViewport = /*#__PURE__*/function () {\n  function PageViewport(_ref5) {\n    var viewBox = _ref5.viewBox,\n        scale = _ref5.scale,\n        rotation = _ref5.rotation,\n        _ref5$offsetX = _ref5.offsetX,\n        offsetX = _ref5$offsetX === void 0 ? 0 : _ref5$offsetX,\n        _ref5$offsetY = _ref5.offsetY,\n        offsetY = _ref5$offsetY === void 0 ? 0 : _ref5$offsetY,\n        _ref5$dontFlip = _ref5.dontFlip,\n        dontFlip = _ref5$dontFlip === void 0 ? false : _ref5$dontFlip;\n\n    _classCallCheck(this, PageViewport);\n\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    var centerX = (viewBox[2] + viewBox[0]) / 2;\n    var centerY = (viewBox[3] + viewBox[1]) / 2;\n    var rotateA, rotateB, rotateC, rotateD;\n    rotation = rotation % 360;\n    rotation = rotation < 0 ? rotation + 360 : rotation;\n\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n\n      default:\n        throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    var offsetCanvasX, offsetCanvasY;\n    var width, height;\n\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n\n    this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(PageViewport, [{\n    key: \"clone\",\n    value: function clone() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$scale = _ref6.scale,\n          scale = _ref6$scale === void 0 ? this.scale : _ref6$scale,\n          _ref6$rotation = _ref6.rotation,\n          rotation = _ref6$rotation === void 0 ? this.rotation : _ref6$rotation,\n          _ref6$offsetX = _ref6.offsetX,\n          offsetX = _ref6$offsetX === void 0 ? this.offsetX : _ref6$offsetX,\n          _ref6$offsetY = _ref6.offsetY,\n          offsetY = _ref6$offsetY === void 0 ? this.offsetY : _ref6$offsetY,\n          _ref6$dontFlip = _ref6.dontFlip,\n          dontFlip = _ref6$dontFlip === void 0 ? false : _ref6$dontFlip;\n\n      return new PageViewport({\n        viewBox: this.viewBox.slice(),\n        scale: scale,\n        rotation: rotation,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        dontFlip: dontFlip\n      });\n    }\n  }, {\n    key: \"convertToViewportPoint\",\n    value: function convertToViewportPoint(x, y) {\n      return _util.Util.applyTransform([x, y], this.transform);\n    }\n  }, {\n    key: \"convertToViewportRectangle\",\n    value: function convertToViewportRectangle(rect) {\n      var topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n      var bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n      return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n    }\n  }, {\n    key: \"convertToPdfPoint\",\n    value: function convertToPdfPoint(x, y) {\n      return _util.Util.applyInverseTransform([x, y], this.transform);\n    }\n  }]);\n\n  return PageViewport;\n}();\n\nexports.PageViewport = PageViewport;\n\nvar RenderingCancelledException = /*#__PURE__*/function (_BaseException) {\n  _inherits(RenderingCancelledException, _BaseException);\n\n  var _super3 = _createSuper(RenderingCancelledException);\n\n  function RenderingCancelledException(msg, type) {\n    var _this4;\n\n    _classCallCheck(this, RenderingCancelledException);\n\n    _this4 = _super3.call(this, msg);\n    _this4.type = type;\n    return _this4;\n  }\n\n  return RenderingCancelledException;\n}(_util.BaseException);\n\nexports.RenderingCancelledException = RenderingCancelledException;\nvar LinkTarget = {\n  NONE: 0,\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4\n};\nexports.LinkTarget = LinkTarget;\n\nfunction addLinkAttributes(link) {\n  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      url = _ref7.url,\n      target = _ref7.target,\n      rel = _ref7.rel,\n      _ref7$enabled = _ref7.enabled,\n      enabled = _ref7$enabled === void 0 ? true : _ref7$enabled;\n\n  (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n  var urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = \"Disabled: \".concat(urlNullRemoved);\n\n    link.onclick = function () {\n      return false;\n    };\n  }\n\n  var targetStr = \"\";\n\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n\n  link.target = targetStr;\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction getFilenameFromUrl(url) {\n  var anchor = url.indexOf(\"#\");\n  var query = url.indexOf(\"?\");\n  var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\nvar StatTimer = /*#__PURE__*/function () {\n  function StatTimer() {\n    _classCallCheck(this, StatTimer);\n\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  _createClass(StatTimer, [{\n    key: \"time\",\n    value: function time(name) {\n      if (name in this.started) {\n        (0, _util.warn)(\"Timer is already running for \".concat(name));\n      }\n\n      this.started[name] = Date.now();\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd(name) {\n      if (!(name in this.started)) {\n        (0, _util.warn)(\"Timer has not been started for \".concat(name));\n      }\n\n      this.times.push({\n        name: name,\n        start: this.started[name],\n        end: Date.now()\n      });\n      delete this.started[name];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var outBuf = [];\n      var longest = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.times),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var time = _step.value;\n          var name = time.name;\n\n          if (name.length > longest) {\n            longest = name.length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.times),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _time = _step2.value;\n          var duration = _time.end - _time.start;\n          outBuf.push(\"\".concat(_time.name.padEnd(longest), \" \").concat(duration, \"ms\\n\"));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return outBuf.join(\"\");\n    }\n  }]);\n\n  return StatTimer;\n}();\n\nexports.StatTimer = StatTimer;\n\nfunction isFetchSupported() {\n  return typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype && typeof ReadableStream !== \"undefined\";\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    var _ref8 = baseUrl ? new URL(url, baseUrl) : new URL(url),\n        protocol = _ref8.protocol;\n\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false;\n  }\n}\n\nfunction loadScript(src) {\n  var removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n\n      resolve(evt);\n    };\n\n    script.onerror = function () {\n      reject(new Error(\"Cannot load script at: \".concat(script.src)));\n    };\n\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nvar pdfDateStringRegex;\n\nvar PDFDateString = /*#__PURE__*/function () {\n  function PDFDateString() {\n    _classCallCheck(this, PDFDateString);\n  }\n\n  _createClass(PDFDateString, null, [{\n    key: \"toDateObject\",\n    value: function toDateObject(input) {\n      if (!input || !(0, _util.isString)(input)) {\n        return null;\n      }\n\n      if (!pdfDateStringRegex) {\n        pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n      }\n\n      var matches = pdfDateStringRegex.exec(input);\n\n      if (!matches) {\n        return null;\n      }\n\n      var year = parseInt(matches[1], 10);\n      var month = parseInt(matches[2], 10);\n      month = month >= 1 && month <= 12 ? month - 1 : 0;\n      var day = parseInt(matches[3], 10);\n      day = day >= 1 && day <= 31 ? day : 1;\n      var hour = parseInt(matches[4], 10);\n      hour = hour >= 0 && hour <= 23 ? hour : 0;\n      var minute = parseInt(matches[5], 10);\n      minute = minute >= 0 && minute <= 59 ? minute : 0;\n      var second = parseInt(matches[6], 10);\n      second = second >= 0 && second <= 59 ? second : 0;\n      var universalTimeRelation = matches[7] || \"Z\";\n      var offsetHour = parseInt(matches[8], 10);\n      offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n      var offsetMinute = parseInt(matches[9], 10) || 0;\n      offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n      if (universalTimeRelation === \"-\") {\n        hour += offsetHour;\n        minute += offsetMinute;\n      } else if (universalTimeRelation === \"+\") {\n        hour -= offsetHour;\n        minute -= offsetMinute;\n      }\n\n      return new Date(Date.UTC(year, month, day, hour, minute, second));\n    }\n  }]);\n\n  return PDFDateString;\n}();\n\nexports.PDFDateString = PDFDateString;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nmodule.exports = __w_pdfjs_require__(3);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n/* module decorator */ module = __w_pdfjs_require__.nmd(module);\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined;\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap;\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && _typeof(value) === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    }\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator;\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator[\"return\"]) {\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      context[delegate.resultName] = info.value;\n      context.next = delegate.nextLoc;\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      return info;\n    }\n\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse();\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n  return exports;\n}((  false ? 0 : _typeof(module)) === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n\n/***/ }),\n/* 4 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.arrayByteLength = arrayByteLength;\nexports.arraysToBytes = arraysToBytes;\nexports.assert = assert;\nexports.bytesToString = bytesToString;\nexports.createPromiseCapability = createPromiseCapability;\nexports.createValidAbsoluteUrl = createValidAbsoluteUrl;\nexports.encodeToXmlString = encodeToXmlString;\nexports.escapeString = escapeString;\nexports.getModificationDate = getModificationDate;\nexports.getVerbosityLevel = getVerbosityLevel;\nexports.info = info;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isArrayEqual = isArrayEqual;\nexports.isAscii = isAscii;\nexports.isBool = isBool;\nexports.isNum = isNum;\nexports.isSameOrigin = isSameOrigin;\nexports.isString = isString;\nexports.objectFromEntries = objectFromEntries;\nexports.objectSize = objectSize;\nexports.removeNullCharacters = removeNullCharacters;\nexports.setVerbosityLevel = setVerbosityLevel;\nexports.shadow = shadow;\nexports.string32 = string32;\nexports.stringToBytes = stringToBytes;\nexports.stringToPDFString = stringToPDFString;\nexports.stringToUTF16BEString = stringToUTF16BEString;\nexports.stringToUTF8String = stringToUTF8String;\nexports.unreachable = unreachable;\nexports.utf8StringToString = utf8StringToString;\nexports.warn = warn;\nexports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.createObjectURL = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n__w_pdfjs_require__(5);\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nexports.IDENTITY_MATRIX = IDENTITY_MATRIX;\nvar FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nexports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\nvar PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nexports.PermissionFlag = PermissionFlag;\nvar TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nexports.TextRenderingMode = TextRenderingMode;\nvar ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nexports.ImageKind = ImageKind;\nvar AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nexports.AnnotationType = AnnotationType;\nvar AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\"\n};\nexports.AnnotationStateModelType = AnnotationStateModelType;\nvar AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\"\n};\nexports.AnnotationMarkedState = AnnotationMarkedState;\nvar AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\"\n};\nexports.AnnotationReviewState = AnnotationReviewState;\nvar AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\"\n};\nexports.AnnotationReplyType = AnnotationReplyType;\nvar AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nexports.AnnotationFlag = AnnotationFlag;\nvar AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nexports.AnnotationFieldFlag = AnnotationFieldFlag;\nvar AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nexports.AnnotationBorderStyleType = AnnotationBorderStyleType;\nvar AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\"\n};\nexports.AnnotationActionEventType = AnnotationActionEventType;\nvar DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\"\n};\nexports.DocumentActionEventType = DocumentActionEventType;\nvar PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\"\n};\nexports.PageActionEventType = PageActionEventType;\nvar StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\"\n};\nexports.StreamType = StreamType;\nvar FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\"\n};\nexports.FontType = FontType;\nvar VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nexports.VerbosityLevel = VerbosityLevel;\nvar CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2\n};\nexports.CMapCompressionType = CMapCompressionType;\nvar OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\nexports.OPS = OPS;\nvar UNSUPPORTED_FEATURES = {\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\"\n};\nexports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\nvar PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexports.PasswordResponses = PasswordResponses;\nvar verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(\"Info: \".concat(msg));\n  }\n}\n\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(\"Warning: \".concat(msg));\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\nfunction isSameOrigin(baseUrl, otherUrl) {\n  var base;\n\n  try {\n    base = new URL(baseUrl);\n\n    if (!base.origin || base.origin === \"null\") {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  var other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {}\n\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value: value,\n    enumerable: true,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\n\nvar BaseException = function BaseExceptionClosure() {\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\n\nexports.BaseException = BaseException;\n\nvar PasswordException = /*#__PURE__*/function (_BaseException) {\n  _inherits(PasswordException, _BaseException);\n\n  var _super = _createSuper(PasswordException);\n\n  function PasswordException(msg, code) {\n    var _this;\n\n    _classCallCheck(this, PasswordException);\n\n    _this = _super.call(this, msg);\n    _this.code = code;\n    return _this;\n  }\n\n  return PasswordException;\n}(BaseException);\n\nexports.PasswordException = PasswordException;\n\nvar UnknownErrorException = /*#__PURE__*/function (_BaseException2) {\n  _inherits(UnknownErrorException, _BaseException2);\n\n  var _super2 = _createSuper(UnknownErrorException);\n\n  function UnknownErrorException(msg, details) {\n    var _this2;\n\n    _classCallCheck(this, UnknownErrorException);\n\n    _this2 = _super2.call(this, msg);\n    _this2.details = details;\n    return _this2;\n  }\n\n  return UnknownErrorException;\n}(BaseException);\n\nexports.UnknownErrorException = UnknownErrorException;\n\nvar InvalidPDFException = /*#__PURE__*/function (_BaseException3) {\n  _inherits(InvalidPDFException, _BaseException3);\n\n  var _super3 = _createSuper(InvalidPDFException);\n\n  function InvalidPDFException() {\n    _classCallCheck(this, InvalidPDFException);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return InvalidPDFException;\n}(BaseException);\n\nexports.InvalidPDFException = InvalidPDFException;\n\nvar MissingPDFException = /*#__PURE__*/function (_BaseException4) {\n  _inherits(MissingPDFException, _BaseException4);\n\n  var _super4 = _createSuper(MissingPDFException);\n\n  function MissingPDFException() {\n    _classCallCheck(this, MissingPDFException);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MissingPDFException;\n}(BaseException);\n\nexports.MissingPDFException = MissingPDFException;\n\nvar UnexpectedResponseException = /*#__PURE__*/function (_BaseException5) {\n  _inherits(UnexpectedResponseException, _BaseException5);\n\n  var _super5 = _createSuper(UnexpectedResponseException);\n\n  function UnexpectedResponseException(msg, status) {\n    var _this3;\n\n    _classCallCheck(this, UnexpectedResponseException);\n\n    _this3 = _super5.call(this, msg);\n    _this3.status = status;\n    return _this3;\n  }\n\n  return UnexpectedResponseException;\n}(BaseException);\n\nexports.UnexpectedResponseException = UnexpectedResponseException;\n\nvar FormatError = /*#__PURE__*/function (_BaseException6) {\n  _inherits(FormatError, _BaseException6);\n\n  var _super6 = _createSuper(FormatError);\n\n  function FormatError() {\n    _classCallCheck(this, FormatError);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return FormatError;\n}(BaseException);\n\nexports.FormatError = FormatError;\n\nvar AbortException = /*#__PURE__*/function (_BaseException7) {\n  _inherits(AbortException, _BaseException7);\n\n  var _super7 = _createSuper(AbortException);\n\n  function AbortException() {\n    _classCallCheck(this, AbortException);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return AbortException;\n}(BaseException);\n\nexports.AbortException = AbortException;\nvar NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && _typeof(bytes) === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n  var length = bytes.length;\n  var MAX_ARGUMENT_COUNT = 8192;\n\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  var strBuf = [];\n\n  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    var chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  var length = str.length;\n  var bytes = new Uint8Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return bytes;\n}\n\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\nfunction arraysToBytes(arr) {\n  var length = arr.length;\n\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n\n  var resultLength = 0;\n\n  for (var i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n\n  var pos = 0;\n  var data = new Uint8Array(resultLength);\n\n  for (var _i = 0; _i < length; _i++) {\n    var item = arr[_i];\n\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n\n    var itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\nfunction objectFromEntries(iterable) {\n  return Object.assign(Object.create(null), Object.fromEntries(iterable));\n}\n\nfunction isLittleEndian() {\n  var buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  var view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\nvar IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  }\n\n};\nexports.IsLittleEndianCached = IsLittleEndianCached;\n\nfunction isEvalSupported() {\n  try {\n    new Function(\"\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  }\n\n};\nexports.IsEvalSupportedCached = IsEvalSupportedCached;\n\nvar hexNumbers = _toConsumableArray(Array(256).keys()).map(function (n) {\n  return n.toString(16).padStart(2, \"0\");\n});\n\nvar Util = /*#__PURE__*/function () {\n  function Util() {\n    _classCallCheck(this, Util);\n  }\n\n  _createClass(Util, null, [{\n    key: \"makeHexColor\",\n    value: function makeHexColor(r, g, b) {\n      return \"#\".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(m1, m2) {\n      return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n    }\n  }, {\n    key: \"applyTransform\",\n    value: function applyTransform(p, m) {\n      var xt = p[0] * m[0] + p[1] * m[2] + m[4];\n      var yt = p[0] * m[1] + p[1] * m[3] + m[5];\n      return [xt, yt];\n    }\n  }, {\n    key: \"applyInverseTransform\",\n    value: function applyInverseTransform(p, m) {\n      var d = m[0] * m[3] - m[1] * m[2];\n      var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n      var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n      return [xt, yt];\n    }\n  }, {\n    key: \"getAxialAlignedBoundingBox\",\n    value: function getAxialAlignedBoundingBox(r, m) {\n      var p1 = Util.applyTransform(r, m);\n      var p2 = Util.applyTransform(r.slice(2, 4), m);\n      var p3 = Util.applyTransform([r[0], r[3]], m);\n      var p4 = Util.applyTransform([r[2], r[1]], m);\n      return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n    }\n  }, {\n    key: \"inverseTransform\",\n    value: function inverseTransform(m) {\n      var d = m[0] * m[3] - m[1] * m[2];\n      return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n    }\n  }, {\n    key: \"apply3dTransform\",\n    value: function apply3dTransform(m, v) {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n    }\n  }, {\n    key: \"singularValueDecompose2dScale\",\n    value: function singularValueDecompose2dScale(m) {\n      var transpose = [m[0], m[2], m[1], m[3]];\n      var a = m[0] * transpose[0] + m[1] * transpose[2];\n      var b = m[0] * transpose[1] + m[1] * transpose[3];\n      var c = m[2] * transpose[0] + m[3] * transpose[2];\n      var d = m[2] * transpose[1] + m[3] * transpose[3];\n      var first = (a + d) / 2;\n      var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;\n      var sx = first + second || 1;\n      var sy = first - second || 1;\n      return [Math.sqrt(sx), Math.sqrt(sy)];\n    }\n  }, {\n    key: \"normalizeRect\",\n    value: function normalizeRect(rect) {\n      var r = rect.slice(0);\n\n      if (rect[0] > rect[2]) {\n        r[0] = rect[2];\n        r[2] = rect[0];\n      }\n\n      if (rect[1] > rect[3]) {\n        r[1] = rect[3];\n        r[3] = rect[1];\n      }\n\n      return r;\n    }\n  }, {\n    key: \"intersect\",\n    value: function intersect(rect1, rect2) {\n      function compare(a, b) {\n        return a - b;\n      }\n\n      var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n      var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n      var result = [];\n      rect1 = Util.normalizeRect(rect1);\n      rect2 = Util.normalizeRect(rect2);\n\n      if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n        result[0] = orderedX[1];\n        result[2] = orderedX[2];\n      } else {\n        return null;\n      }\n\n      if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n        result[1] = orderedY[1];\n        result[3] = orderedY[2];\n      } else {\n        return null;\n      }\n\n      return result;\n    }\n  }]);\n\n  return Util;\n}();\n\nexports.Util = Util;\nvar PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\nfunction stringToPDFString(str) {\n  var length = str.length,\n      strBuf = [];\n\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    for (var i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    for (var _i2 = 2; _i2 < length; _i2 += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(_i2 + 1) << 8 | str.charCodeAt(_i2)));\n    }\n  } else {\n    for (var _i3 = 0; _i3 < length; ++_i3) {\n      var code = PDFStringTranslateTable[str.charCodeAt(_i3)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i3));\n    }\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  return str.replace(/([()\\\\\\n\\r])/g, function (match) {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n\n    return \"\\\\\".concat(match);\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  var buf = [\"\\xFE\\xFF\"];\n\n  for (var i = 0, ii = str.length; i < ii; i++) {\n    var _char = str.charCodeAt(i);\n\n    buf.push(String.fromCharCode(_char >> 8 & 0xff));\n    buf.push(String.fromCharCode(_char & 0xff));\n  }\n\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return _typeof(v) === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\nfunction getModificationDate() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n  return buffer.join(\"\");\n}\n\nfunction createPromiseCapability() {\n  var capability = Object.create(null);\n  var isSettled = false;\n  Object.defineProperty(capability, \"settled\", {\n    get: function get() {\n      return isSettled;\n    }\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nvar createObjectURL = function createObjectURLClosure() {\n  var digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return function createObjectURL(data, contentType) {\n    var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!forceDataSchema && URL.createObjectURL) {\n      var blob = new Blob([data], {\n        type: contentType\n      });\n      return URL.createObjectURL(blob);\n    }\n\n    var buffer = \"data:\".concat(contentType, \";base64,\");\n\n    for (var i = 0, ii = data.length; i < ii; i += 3) {\n      var b1 = data[i] & 0xff;\n      var b2 = data[i + 1] & 0xff;\n      var b3 = data[i + 2] & 0xff;\n      var d1 = b1 >> 2,\n          d2 = (b1 & 3) << 4 | b2 >> 4;\n      var d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n      var d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n\n    return buffer;\n  };\n}();\n\nexports.createObjectURL = createObjectURL;\nvar XMLEntities = {\n  0x3c: \"&lt;\",\n  0x3e: \"&gt;\",\n  0x26: \"&amp;\",\n  0x22: \"&quot;\",\n  0x27: \"&apos;\"\n};\n\nfunction encodeToXmlString(str) {\n  var buffer = [];\n  var start = 0;\n\n  for (var i = 0, ii = str.length; i < ii; i++) {\n    var _char2 = str.codePointAt(i);\n\n    if (0x20 <= _char2 && _char2 <= 0x7e) {\n      var entity = XMLEntities[_char2];\n\n      if (entity) {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n\n        buffer.push(entity);\n        start = i + 1;\n      }\n    } else {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n\n      buffer.push(\"&#x\".concat(_char2.toString(16).toUpperCase(), \";\"));\n\n      if (_char2 > 0xd7ff && (_char2 < 0xe000 || _char2 > 0xfffd)) {\n        i++;\n      }\n\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join(\"\");\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nvar _is_node = __w_pdfjs_require__(6);\n\nif (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked) {\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    globalThis = __w_pdfjs_require__(7);\n  }\n\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !_is_node.isNodeJS) {\n      return;\n    }\n\n    globalThis.btoa = function (chars) {\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  (function checkNodeAtob() {\n    if (globalThis.atob || !_is_node.isNodeJS) {\n      return;\n    }\n\n    globalThis.atob = function (input) {\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n\n    __w_pdfjs_require__(52);\n  })();\n\n  (function checkPromise() {\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n\n    globalThis.Promise = __w_pdfjs_require__(82);\n  })();\n\n  (function checkURL() {\n    globalThis.URL = __w_pdfjs_require__(111);\n  })();\n\n  (function checkReadableStream() {\n    var isReadableStreamSupported = false;\n\n    if (typeof ReadableStream !== \"undefined\") {\n      try {\n        new ReadableStream({\n          start: function start(controller) {\n            controller.close();\n          }\n        });\n        isReadableStreamSupported = true;\n      } catch (e) {}\n    }\n\n    if (isReadableStreamSupported) {\n      return;\n    }\n\n    globalThis.ReadableStream = __w_pdfjs_require__(121).ReadableStream;\n  })();\n\n  (function checkStringPadStart() {\n    if (String.prototype.padStart) {\n      return;\n    }\n\n    __w_pdfjs_require__(122);\n  })();\n\n  (function checkStringPadEnd() {\n    if (String.prototype.padEnd) {\n      return;\n    }\n\n    __w_pdfjs_require__(128);\n  })();\n\n  (function checkObjectValues() {\n    if (Object.values) {\n      return;\n    }\n\n    Object.values = __w_pdfjs_require__(130);\n  })();\n\n  (function checkObjectEntries() {\n    if (Object.entries) {\n      return;\n    }\n\n    Object.entries = __w_pdfjs_require__(133);\n  })();\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isNodeJS = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isNodeJS = (typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\nexports.isNodeJS = isNodeJS;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(8);\nmodule.exports = __w_pdfjs_require__(10);\n\n/***/ }),\n/* 8 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar $ = __w_pdfjs_require__(9);\nvar global = __w_pdfjs_require__(10);\n$({ global: true }, { globalThis: global });\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar getOwnPropertyDescriptor = __w_pdfjs_require__(11).f;\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar redefine = __w_pdfjs_require__(28);\nvar setGlobal = __w_pdfjs_require__(29);\nvar copyConstructorProperties = __w_pdfjs_require__(39);\nvar isForced = __w_pdfjs_require__(51);\nmodule.exports = function (options, source) {\n var TARGET = options.target;\n var GLOBAL = options.global;\n var STATIC = options.stat;\n var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n if (GLOBAL) {\n  target = global;\n } else if (STATIC) {\n  target = global[TARGET] || setGlobal(TARGET, {});\n } else {\n  target = (global[TARGET] || {}).prototype;\n }\n if (target)\n  for (key in source) {\n   sourceProperty = source[key];\n   if (options.noTargetGet) {\n    descriptor = getOwnPropertyDescriptor(target, key);\n    targetProperty = descriptor && descriptor.value;\n   } else\n    targetProperty = target[key];\n   FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n   if (!FORCED && targetProperty !== undefined) {\n    if (typeof sourceProperty === typeof targetProperty)\n     continue;\n    copyConstructorProperties(sourceProperty, targetProperty);\n   }\n   if (options.sham || targetProperty && targetProperty.sham) {\n    createNonEnumerableProperty(sourceProperty, 'sham', true);\n   }\n   redefine(target, key, sourceProperty, options);\n  }\n};\n\n/***/ }),\n/* 10 */\n/***/ (function(module) {\n\nvar check = function (it) {\n return it && it.Math == Math && it;\n};\nmodule.exports = check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) || function () {\n return this;\n}() || Function('return this')();\n\n/***/ }),\n/* 11 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar propertyIsEnumerableModule = __w_pdfjs_require__(14);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nvar toIndexedObject = __w_pdfjs_require__(16);\nvar toPrimitive = __w_pdfjs_require__(20);\nvar has = __w_pdfjs_require__(22);\nvar IE8_DOM_DEFINE = __w_pdfjs_require__(23);\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n O = toIndexedObject(O);\n P = toPrimitive(P, true);\n if (IE8_DOM_DEFINE)\n  try {\n   return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (error) {\n  }\n if (has(O, P))\n  return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nmodule.exports = !fails(function () {\n return Object.defineProperty({}, 1, {\n  get: function () {\n   return 7;\n  }\n })[1] != 7;\n});\n\n/***/ }),\n/* 13 */\n/***/ (function(module) {\n\nmodule.exports = function (exec) {\n try {\n  return !!exec();\n } catch (error) {\n  return true;\n }\n};\n\n/***/ }),\n/* 14 */\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n var descriptor = getOwnPropertyDescriptor(this, V);\n return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n\n/***/ }),\n/* 15 */\n/***/ (function(module) {\n\nmodule.exports = function (bitmap, value) {\n return {\n  enumerable: !(bitmap & 1),\n  configurable: !(bitmap & 2),\n  writable: !(bitmap & 4),\n  value: value\n };\n};\n\n/***/ }),\n/* 16 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar IndexedObject = __w_pdfjs_require__(17);\nvar requireObjectCoercible = __w_pdfjs_require__(19);\nmodule.exports = function (it) {\n return IndexedObject(requireObjectCoercible(it));\n};\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nvar classof = __w_pdfjs_require__(18);\nvar split = ''.split;\nmodule.exports = fails(function () {\n return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n\n/***/ }),\n/* 18 */\n/***/ (function(module) {\n\nvar toString = {}.toString;\nmodule.exports = function (it) {\n return toString.call(it).slice(8, -1);\n};\n\n/***/ }),\n/* 19 */\n/***/ (function(module) {\n\nmodule.exports = function (it) {\n if (it == undefined)\n  throw TypeError(\"Can't call method on \" + it);\n return it;\n};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar isObject = __w_pdfjs_require__(21);\nmodule.exports = function (input, PREFERRED_STRING) {\n if (!isObject(input))\n  return input;\n var fn, val;\n if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input)))\n  return val;\n if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input)))\n  return val;\n if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input)))\n  return val;\n throw TypeError(\"Can't convert object to primitive value\");\n};\n\n/***/ }),\n/* 21 */\n/***/ (function(module) {\n\nmodule.exports = function (it) {\n return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n/***/ }),\n/* 22 */\n/***/ (function(module) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n return hasOwnProperty.call(it, key);\n};\n\n/***/ }),\n/* 23 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar fails = __w_pdfjs_require__(13);\nvar createElement = __w_pdfjs_require__(24);\nmodule.exports = !DESCRIPTORS && !fails(function () {\n return Object.defineProperty(createElement('div'), 'a', {\n  get: function () {\n   return 7;\n  }\n }).a != 7;\n});\n\n/***/ }),\n/* 24 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar isObject = __w_pdfjs_require__(21);\nvar document = global.document;\nvar EXISTS = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n return EXISTS ? document.createElement(it) : {};\n};\n\n/***/ }),\n/* 25 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar definePropertyModule = __w_pdfjs_require__(26);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n object[key] = value;\n return object;\n};\n\n/***/ }),\n/* 26 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar IE8_DOM_DEFINE = __w_pdfjs_require__(23);\nvar anObject = __w_pdfjs_require__(27);\nvar toPrimitive = __w_pdfjs_require__(20);\nvar nativeDefineProperty = Object.defineProperty;\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n anObject(O);\n P = toPrimitive(P, true);\n anObject(Attributes);\n if (IE8_DOM_DEFINE)\n  try {\n   return nativeDefineProperty(O, P, Attributes);\n  } catch (error) {\n  }\n if ('get' in Attributes || 'set' in Attributes)\n  throw TypeError('Accessors not supported');\n if ('value' in Attributes)\n  O[P] = Attributes.value;\n return O;\n};\n\n/***/ }),\n/* 27 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar isObject = __w_pdfjs_require__(21);\nmodule.exports = function (it) {\n if (!isObject(it)) {\n  throw TypeError(String(it) + ' is not an object');\n }\n return it;\n};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar has = __w_pdfjs_require__(22);\nvar setGlobal = __w_pdfjs_require__(29);\nvar inspectSource = __w_pdfjs_require__(30);\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n(module.exports = function (O, key, value, options) {\n var unsafe = options ? !!options.unsafe : false;\n var simple = options ? !!options.enumerable : false;\n var noTargetGet = options ? !!options.noTargetGet : false;\n var state;\n if (typeof value == 'function') {\n  if (typeof key == 'string' && !has(value, 'name')) {\n   createNonEnumerableProperty(value, 'name', key);\n  }\n  state = enforceInternalState(value);\n  if (!state.source) {\n   state.source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n }\n if (O === global) {\n  if (simple)\n   O[key] = value;\n  else\n   setGlobal(key, value);\n  return;\n } else if (!unsafe) {\n  delete O[key];\n } else if (!noTargetGet && O[key]) {\n  simple = true;\n }\n if (simple)\n  O[key] = value;\n else\n  createNonEnumerableProperty(O, key, value);\n})(Function.prototype, 'toString', function toString() {\n return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n});\n\n/***/ }),\n/* 29 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nmodule.exports = function (key, value) {\n try {\n  createNonEnumerableProperty(global, key, value);\n } catch (error) {\n  global[key] = value;\n }\n return value;\n};\n\n/***/ }),\n/* 30 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar store = __w_pdfjs_require__(31);\nvar functionToString = Function.toString;\nif (typeof store.inspectSource != 'function') {\n store.inspectSource = function (it) {\n  return functionToString.call(it);\n };\n}\nmodule.exports = store.inspectSource;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar setGlobal = __w_pdfjs_require__(29);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\nmodule.exports = store;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar NATIVE_WEAK_MAP = __w_pdfjs_require__(33);\nvar global = __w_pdfjs_require__(10);\nvar isObject = __w_pdfjs_require__(21);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar objectHas = __w_pdfjs_require__(22);\nvar shared = __w_pdfjs_require__(31);\nvar sharedKey = __w_pdfjs_require__(34);\nvar hiddenKeys = __w_pdfjs_require__(38);\nvar WeakMap = global.WeakMap;\nvar set, get, has;\nvar enforce = function (it) {\n return has(it) ? get(it) : set(it, {});\n};\nvar getterFor = function (TYPE) {\n return function (it) {\n  var state;\n  if (!isObject(it) || (state = get(it)).type !== TYPE) {\n   throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n  }\n  return state;\n };\n};\nif (NATIVE_WEAK_MAP) {\n var store = shared.state || (shared.state = new WeakMap());\n var wmget = store.get;\n var wmhas = store.has;\n var wmset = store.set;\n set = function (it, metadata) {\n  metadata.facade = it;\n  wmset.call(store, it, metadata);\n  return metadata;\n };\n get = function (it) {\n  return wmget.call(store, it) || {};\n };\n has = function (it) {\n  return wmhas.call(store, it);\n };\n} else {\n var STATE = sharedKey('state');\n hiddenKeys[STATE] = true;\n set = function (it, metadata) {\n  metadata.facade = it;\n  createNonEnumerableProperty(it, STATE, metadata);\n  return metadata;\n };\n get = function (it) {\n  return objectHas(it, STATE) ? it[STATE] : {};\n };\n has = function (it) {\n  return objectHas(it, STATE);\n };\n}\nmodule.exports = {\n set: set,\n get: get,\n has: has,\n enforce: enforce,\n getterFor: getterFor\n};\n\n/***/ }),\n/* 33 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar inspectSource = __w_pdfjs_require__(30);\nvar WeakMap = global.WeakMap;\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n\n/***/ }),\n/* 34 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar shared = __w_pdfjs_require__(35);\nvar uid = __w_pdfjs_require__(37);\nvar keys = shared('keys');\nmodule.exports = function (key) {\n return keys[key] || (keys[key] = uid(key));\n};\n\n/***/ }),\n/* 35 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar IS_PURE = __w_pdfjs_require__(36);\nvar store = __w_pdfjs_require__(31);\n(module.exports = function (key, value) {\n return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n version: '3.8.3',\n mode: IS_PURE ? 'pure' : 'global',\n copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\n});\n\n/***/ }),\n/* 36 */\n/***/ (function(module) {\n\nmodule.exports = false;\n\n/***/ }),\n/* 37 */\n/***/ (function(module) {\n\nvar id = 0;\nvar postfix = Math.random();\nmodule.exports = function (key) {\n return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n};\n\n/***/ }),\n/* 38 */\n/***/ (function(module) {\n\nmodule.exports = {};\n\n/***/ }),\n/* 39 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar has = __w_pdfjs_require__(22);\nvar ownKeys = __w_pdfjs_require__(40);\nvar getOwnPropertyDescriptorModule = __w_pdfjs_require__(11);\nvar definePropertyModule = __w_pdfjs_require__(26);\nmodule.exports = function (target, source) {\n var keys = ownKeys(source);\n var defineProperty = definePropertyModule.f;\n var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n for (var i = 0; i < keys.length; i++) {\n  var key = keys[i];\n  if (!has(target, key))\n   defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n }\n};\n\n/***/ }),\n/* 40 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar getOwnPropertyNamesModule = __w_pdfjs_require__(43);\nvar getOwnPropertySymbolsModule = __w_pdfjs_require__(50);\nvar anObject = __w_pdfjs_require__(27);\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n var keys = getOwnPropertyNamesModule.f(anObject(it));\n var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n\n/***/ }),\n/* 41 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar path = __w_pdfjs_require__(42);\nvar global = __w_pdfjs_require__(10);\nvar aFunction = function (variable) {\n return typeof variable == 'function' ? variable : undefined;\n};\nmodule.exports = function (namespace, method) {\n return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n};\n\n/***/ }),\n/* 42 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nmodule.exports = global;\n\n/***/ }),\n/* 43 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\nvar internalObjectKeys = __w_pdfjs_require__(44);\nvar enumBugKeys = __w_pdfjs_require__(49);\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n return internalObjectKeys(O, hiddenKeys);\n};\n\n/***/ }),\n/* 44 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar has = __w_pdfjs_require__(22);\nvar toIndexedObject = __w_pdfjs_require__(16);\nvar indexOf = __w_pdfjs_require__(45).indexOf;\nvar hiddenKeys = __w_pdfjs_require__(38);\nmodule.exports = function (object, names) {\n var O = toIndexedObject(object);\n var i = 0;\n var result = [];\n var key;\n for (key in O)\n  !has(hiddenKeys, key) && has(O, key) && result.push(key);\n while (names.length > i)\n  if (has(O, key = names[i++])) {\n   ~indexOf(result, key) || result.push(key);\n  }\n return result;\n};\n\n/***/ }),\n/* 45 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar toIndexedObject = __w_pdfjs_require__(16);\nvar toLength = __w_pdfjs_require__(46);\nvar toAbsoluteIndex = __w_pdfjs_require__(48);\nvar createMethod = function (IS_INCLUDES) {\n return function ($this, el, fromIndex) {\n  var O = toIndexedObject($this);\n  var length = toLength(O.length);\n  var index = toAbsoluteIndex(fromIndex, length);\n  var value;\n  if (IS_INCLUDES && el != el)\n   while (length > index) {\n    value = O[index++];\n    if (value != value)\n     return true;\n   }\n  else\n   for (; length > index; index++) {\n    if ((IS_INCLUDES || index in O) && O[index] === el)\n     return IS_INCLUDES || index || 0;\n   }\n  return !IS_INCLUDES && -1;\n };\n};\nmodule.exports = {\n includes: createMethod(true),\n indexOf: createMethod(false)\n};\n\n/***/ }),\n/* 46 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar toInteger = __w_pdfjs_require__(47);\nvar min = Math.min;\nmodule.exports = function (argument) {\n return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0;\n};\n\n/***/ }),\n/* 47 */\n/***/ (function(module) {\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (argument) {\n return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n\n/***/ }),\n/* 48 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar toInteger = __w_pdfjs_require__(47);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n var integer = toInteger(index);\n return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n\n/***/ }),\n/* 49 */\n/***/ (function(module) {\n\nmodule.exports = [\n 'constructor',\n 'hasOwnProperty',\n 'isPrototypeOf',\n 'propertyIsEnumerable',\n 'toLocaleString',\n 'toString',\n 'valueOf'\n];\n\n/***/ }),\n/* 50 */\n/***/ (function(__unused_webpack_module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n/***/ }),\n/* 51 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nvar replacement = /#|\\.prototype\\./;\nvar isForced = function (feature, detection) {\n var value = data[normalize(feature)];\n return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;\n};\nvar normalize = isForced.normalize = function (string) {\n return String(string).replace(replacement, '.').toLowerCase();\n};\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\nmodule.exports = isForced;\n\n/***/ }),\n/* 52 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(53);\n__w_pdfjs_require__(72);\nvar path = __w_pdfjs_require__(42);\nmodule.exports = path.Object.fromEntries;\n\n/***/ }),\n/* 53 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar toIndexedObject = __w_pdfjs_require__(16);\nvar addToUnscopables = __w_pdfjs_require__(54);\nvar Iterators = __w_pdfjs_require__(62);\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar defineIterator = __w_pdfjs_require__(63);\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n setInternalState(this, {\n  type: ARRAY_ITERATOR,\n  target: toIndexedObject(iterated),\n  index: 0,\n  kind: kind\n });\n}, function () {\n var state = getInternalState(this);\n var target = state.target;\n var kind = state.kind;\n var index = state.index++;\n if (!target || index >= target.length) {\n  state.target = undefined;\n  return {\n   value: undefined,\n   done: true\n  };\n }\n if (kind == 'keys')\n  return {\n   value: index,\n   done: false\n  };\n if (kind == 'values')\n  return {\n   value: target[index],\n   done: false\n  };\n return {\n  value: [\n   index,\n   target[index]\n  ],\n  done: false\n };\n}, 'values');\nIterators.Arguments = Iterators.Array;\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n/***/ }),\n/* 54 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar create = __w_pdfjs_require__(58);\nvar definePropertyModule = __w_pdfjs_require__(26);\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n  configurable: true,\n  value: create(null)\n });\n}\nmodule.exports = function (key) {\n ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\n/***/ }),\n/* 55 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar shared = __w_pdfjs_require__(35);\nvar has = __w_pdfjs_require__(22);\nvar uid = __w_pdfjs_require__(37);\nvar NATIVE_SYMBOL = __w_pdfjs_require__(56);\nvar USE_SYMBOL_AS_UID = __w_pdfjs_require__(57);\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\nmodule.exports = function (name) {\n if (!has(WellKnownSymbolsStore, name)) {\n  if (NATIVE_SYMBOL && has(Symbol, name))\n   WellKnownSymbolsStore[name] = Symbol[name];\n  else\n   WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n }\n return WellKnownSymbolsStore[name];\n};\n\n/***/ }),\n/* 56 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n return !String(Symbol());\n});\n\n/***/ }),\n/* 57 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar NATIVE_SYMBOL = __w_pdfjs_require__(56);\nmodule.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';\n\n/***/ }),\n/* 58 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar defineProperties = __w_pdfjs_require__(59);\nvar enumBugKeys = __w_pdfjs_require__(49);\nvar hiddenKeys = __w_pdfjs_require__(38);\nvar html = __w_pdfjs_require__(61);\nvar documentCreateElement = __w_pdfjs_require__(24);\nvar sharedKey = __w_pdfjs_require__(34);\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar EmptyConstructor = function () {\n};\nvar scriptTag = function (content) {\n return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n activeXDocument.write(scriptTag(''));\n activeXDocument.close();\n var temp = activeXDocument.parentWindow.Object;\n activeXDocument = null;\n return temp;\n};\nvar NullProtoObjectViaIFrame = function () {\n var iframe = documentCreateElement('iframe');\n var JS = 'java' + SCRIPT + ':';\n var iframeDocument;\n iframe.style.display = 'none';\n html.appendChild(iframe);\n iframe.src = String(JS);\n iframeDocument = iframe.contentWindow.document;\n iframeDocument.open();\n iframeDocument.write(scriptTag('document.F=Object'));\n iframeDocument.close();\n return iframeDocument.F;\n};\nvar activeXDocument;\nvar NullProtoObject = function () {\n try {\n  activeXDocument = document.domain && new ActiveXObject('htmlfile');\n } catch (error) {\n }\n NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n var length = enumBugKeys.length;\n while (length--)\n  delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n return NullProtoObject();\n};\nhiddenKeys[IE_PROTO] = true;\nmodule.exports = Object.create || function create(O, Properties) {\n var result;\n if (O !== null) {\n  EmptyConstructor[PROTOTYPE] = anObject(O);\n  result = new EmptyConstructor();\n  EmptyConstructor[PROTOTYPE] = null;\n  result[IE_PROTO] = O;\n } else\n  result = NullProtoObject();\n return Properties === undefined ? result : defineProperties(result, Properties);\n};\n\n/***/ }),\n/* 59 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar definePropertyModule = __w_pdfjs_require__(26);\nvar anObject = __w_pdfjs_require__(27);\nvar objectKeys = __w_pdfjs_require__(60);\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n anObject(O);\n var keys = objectKeys(Properties);\n var length = keys.length;\n var index = 0;\n var key;\n while (length > index)\n  definePropertyModule.f(O, key = keys[index++], Properties[key]);\n return O;\n};\n\n/***/ }),\n/* 60 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar internalObjectKeys = __w_pdfjs_require__(44);\nvar enumBugKeys = __w_pdfjs_require__(49);\nmodule.exports = Object.keys || function keys(O) {\n return internalObjectKeys(O, enumBugKeys);\n};\n\n/***/ }),\n/* 61 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar getBuiltIn = __w_pdfjs_require__(41);\nmodule.exports = getBuiltIn('document', 'documentElement');\n\n/***/ }),\n/* 62 */\n/***/ (function(module) {\n\nmodule.exports = {};\n\n/***/ }),\n/* 63 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar createIteratorConstructor = __w_pdfjs_require__(64);\nvar getPrototypeOf = __w_pdfjs_require__(66);\nvar setPrototypeOf = __w_pdfjs_require__(70);\nvar setToStringTag = __w_pdfjs_require__(69);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar redefine = __w_pdfjs_require__(28);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar IS_PURE = __w_pdfjs_require__(36);\nvar Iterators = __w_pdfjs_require__(62);\nvar IteratorsCore = __w_pdfjs_require__(65);\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\nvar returnThis = function () {\n return this;\n};\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n createIteratorConstructor(IteratorConstructor, NAME, next);\n var getIterationMethod = function (KIND) {\n  if (KIND === DEFAULT && defaultIterator)\n   return defaultIterator;\n  if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)\n   return IterablePrototype[KIND];\n  switch (KIND) {\n  case KEYS:\n   return function keys() {\n    return new IteratorConstructor(this, KIND);\n   };\n  case VALUES:\n   return function values() {\n    return new IteratorConstructor(this, KIND);\n   };\n  case ENTRIES:\n   return function entries() {\n    return new IteratorConstructor(this, KIND);\n   };\n  }\n  return function () {\n   return new IteratorConstructor(this);\n  };\n };\n var TO_STRING_TAG = NAME + ' Iterator';\n var INCORRECT_VALUES_NAME = false;\n var IterablePrototype = Iterable.prototype;\n var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];\n var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n var CurrentIteratorPrototype, methods, KEY;\n if (anyNativeIterator) {\n  CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n  if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n   if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n    if (setPrototypeOf) {\n     setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n    } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n     createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n    }\n   }\n   setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n   if (IS_PURE)\n    Iterators[TO_STRING_TAG] = returnThis;\n  }\n }\n if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n  INCORRECT_VALUES_NAME = true;\n  defaultIterator = function values() {\n   return nativeIterator.call(this);\n  };\n }\n if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n  createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n }\n Iterators[NAME] = defaultIterator;\n if (DEFAULT) {\n  methods = {\n   values: getIterationMethod(VALUES),\n   keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n   entries: getIterationMethod(ENTRIES)\n  };\n  if (FORCED)\n   for (KEY in methods) {\n    if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n     redefine(IterablePrototype, KEY, methods[KEY]);\n    }\n   }\n  else\n   $({\n    target: NAME,\n    proto: true,\n    forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME\n   }, methods);\n }\n return methods;\n};\n\n/***/ }),\n/* 64 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar IteratorPrototype = __w_pdfjs_require__(65).IteratorPrototype;\nvar create = __w_pdfjs_require__(58);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nvar setToStringTag = __w_pdfjs_require__(69);\nvar Iterators = __w_pdfjs_require__(62);\nvar returnThis = function () {\n return this;\n};\nmodule.exports = function (IteratorConstructor, NAME, next) {\n var TO_STRING_TAG = NAME + ' Iterator';\n IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n Iterators[TO_STRING_TAG] = returnThis;\n return IteratorConstructor;\n};\n\n/***/ }),\n/* 65 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar fails = __w_pdfjs_require__(13);\nvar getPrototypeOf = __w_pdfjs_require__(66);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar has = __w_pdfjs_require__(22);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar IS_PURE = __w_pdfjs_require__(36);\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\nvar returnThis = function () {\n return this;\n};\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\nif ([].keys) {\n arrayIterator = [].keys();\n if (!('next' in arrayIterator))\n  BUGGY_SAFARI_ITERATORS = true;\n else {\n  PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n  if (PrototypeOfArrayIteratorPrototype !== Object.prototype)\n   IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n }\n}\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {\n var test = {};\n return IteratorPrototype[ITERATOR].call(test) !== test;\n});\nif (NEW_ITERATOR_PROTOTYPE)\n IteratorPrototype = {};\nif ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {\n createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n}\nmodule.exports = {\n IteratorPrototype: IteratorPrototype,\n BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n\n/***/ }),\n/* 66 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar has = __w_pdfjs_require__(22);\nvar toObject = __w_pdfjs_require__(67);\nvar sharedKey = __w_pdfjs_require__(34);\nvar CORRECT_PROTOTYPE_GETTER = __w_pdfjs_require__(68);\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar ObjectPrototype = Object.prototype;\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n O = toObject(O);\n if (has(O, IE_PROTO))\n  return O[IE_PROTO];\n if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n  return O.constructor.prototype;\n }\n return O instanceof Object ? ObjectPrototype : null;\n};\n\n/***/ }),\n/* 67 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar requireObjectCoercible = __w_pdfjs_require__(19);\nmodule.exports = function (argument) {\n return Object(requireObjectCoercible(argument));\n};\n\n/***/ }),\n/* 68 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nmodule.exports = !fails(function () {\n function F() {\n }\n F.prototype.constructor = null;\n return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\n/***/ }),\n/* 69 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar defineProperty = __w_pdfjs_require__(26).f;\nvar has = __w_pdfjs_require__(22);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nmodule.exports = function (it, TAG, STATIC) {\n if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n  defineProperty(it, TO_STRING_TAG, {\n   configurable: true,\n   value: TAG\n  });\n }\n};\n\n/***/ }),\n/* 70 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar aPossiblePrototype = __w_pdfjs_require__(71);\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n var CORRECT_SETTER = false;\n var test = {};\n var setter;\n try {\n  setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n  setter.call(test, []);\n  CORRECT_SETTER = test instanceof Array;\n } catch (error) {\n }\n return function setPrototypeOf(O, proto) {\n  anObject(O);\n  aPossiblePrototype(proto);\n  if (CORRECT_SETTER)\n   setter.call(O, proto);\n  else\n   O.__proto__ = proto;\n  return O;\n };\n}() : undefined);\n\n/***/ }),\n/* 71 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar isObject = __w_pdfjs_require__(21);\nmodule.exports = function (it) {\n if (!isObject(it) && it !== null) {\n  throw TypeError(\"Can't set \" + String(it) + ' as a prototype');\n }\n return it;\n};\n\n/***/ }),\n/* 72 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar $ = __w_pdfjs_require__(9);\nvar iterate = __w_pdfjs_require__(73);\nvar createProperty = __w_pdfjs_require__(81);\n$({\n target: 'Object',\n stat: true\n}, {\n fromEntries: function fromEntries(iterable) {\n  var obj = {};\n  iterate(iterable, function (k, v) {\n   createProperty(obj, k, v);\n  }, { AS_ENTRIES: true });\n  return obj;\n }\n});\n\n/***/ }),\n/* 73 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar isArrayIteratorMethod = __w_pdfjs_require__(74);\nvar toLength = __w_pdfjs_require__(46);\nvar bind = __w_pdfjs_require__(75);\nvar getIteratorMethod = __w_pdfjs_require__(77);\nvar iteratorClose = __w_pdfjs_require__(80);\nvar Result = function (stopped, result) {\n this.stopped = stopped;\n this.result = result;\n};\nmodule.exports = function (iterable, unboundFunction, options) {\n var that = options && options.that;\n var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n var INTERRUPTED = !!(options && options.INTERRUPTED);\n var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);\n var iterator, iterFn, index, length, result, next, step;\n var stop = function (condition) {\n  if (iterator)\n   iteratorClose(iterator);\n  return new Result(true, condition);\n };\n var callFn = function (value) {\n  if (AS_ENTRIES) {\n   anObject(value);\n   return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n  }\n  return INTERRUPTED ? fn(value, stop) : fn(value);\n };\n if (IS_ITERATOR) {\n  iterator = iterable;\n } else {\n  iterFn = getIteratorMethod(iterable);\n  if (typeof iterFn != 'function')\n   throw TypeError('Target is not iterable');\n  if (isArrayIteratorMethod(iterFn)) {\n   for (index = 0, length = toLength(iterable.length); length > index; index++) {\n    result = callFn(iterable[index]);\n    if (result && result instanceof Result)\n     return result;\n   }\n   return new Result(false);\n  }\n  iterator = iterFn.call(iterable);\n }\n next = iterator.next;\n while (!(step = next.call(iterator)).done) {\n  try {\n   result = callFn(step.value);\n  } catch (error) {\n   iteratorClose(iterator);\n   throw error;\n  }\n  if (typeof result == 'object' && result && result instanceof Result)\n   return result;\n }\n return new Result(false);\n};\n\n/***/ }),\n/* 74 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar Iterators = __w_pdfjs_require__(62);\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\nmodule.exports = function (it) {\n return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n\n/***/ }),\n/* 75 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar aFunction = __w_pdfjs_require__(76);\nmodule.exports = function (fn, that, length) {\n aFunction(fn);\n if (that === undefined)\n  return fn;\n switch (length) {\n case 0:\n  return function () {\n   return fn.call(that);\n  };\n case 1:\n  return function (a) {\n   return fn.call(that, a);\n  };\n case 2:\n  return function (a, b) {\n   return fn.call(that, a, b);\n  };\n case 3:\n  return function (a, b, c) {\n   return fn.call(that, a, b, c);\n  };\n }\n return function () {\n  return fn.apply(that, arguments);\n };\n};\n\n/***/ }),\n/* 76 */\n/***/ (function(module) {\n\nmodule.exports = function (it) {\n if (typeof it != 'function') {\n  throw TypeError(String(it) + ' is not a function');\n }\n return it;\n};\n\n/***/ }),\n/* 77 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar classof = __w_pdfjs_require__(78);\nvar Iterators = __w_pdfjs_require__(62);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar ITERATOR = wellKnownSymbol('iterator');\nmodule.exports = function (it) {\n if (it != undefined)\n  return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];\n};\n\n/***/ }),\n/* 78 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar TO_STRING_TAG_SUPPORT = __w_pdfjs_require__(79);\nvar classofRaw = __w_pdfjs_require__(18);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar CORRECT_ARGUMENTS = classofRaw(function () {\n return arguments;\n}()) == 'Arguments';\nvar tryGet = function (it, key) {\n try {\n  return it[key];\n } catch (error) {\n }\n};\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n var O, tag, result;\n return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n\n/***/ }),\n/* 79 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\ntest[TO_STRING_TAG] = 'z';\nmodule.exports = String(test) === '[object z]';\n\n/***/ }),\n/* 80 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nmodule.exports = function (iterator) {\n var returnMethod = iterator['return'];\n if (returnMethod !== undefined) {\n  return anObject(returnMethod.call(iterator)).value;\n }\n};\n\n/***/ }),\n/* 81 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar toPrimitive = __w_pdfjs_require__(20);\nvar definePropertyModule = __w_pdfjs_require__(26);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nmodule.exports = function (object, key, value) {\n var propertyKey = toPrimitive(key);\n if (propertyKey in object)\n  definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n else\n  object[propertyKey] = value;\n};\n\n/***/ }),\n/* 82 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(83);\n__w_pdfjs_require__(84);\n__w_pdfjs_require__(86);\n__w_pdfjs_require__(104);\n__w_pdfjs_require__(105);\n__w_pdfjs_require__(106);\n__w_pdfjs_require__(107);\n__w_pdfjs_require__(109);\nvar path = __w_pdfjs_require__(42);\nmodule.exports = path.Promise;\n\n/***/ }),\n/* 83 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar getPrototypeOf = __w_pdfjs_require__(66);\nvar setPrototypeOf = __w_pdfjs_require__(70);\nvar create = __w_pdfjs_require__(58);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nvar iterate = __w_pdfjs_require__(73);\nvar $AggregateError = function AggregateError(errors, message) {\n var that = this;\n if (!(that instanceof $AggregateError))\n  return new $AggregateError(errors, message);\n if (setPrototypeOf) {\n  that = setPrototypeOf(new Error(undefined), getPrototypeOf(that));\n }\n if (message !== undefined)\n  createNonEnumerableProperty(that, 'message', String(message));\n var errorsArray = [];\n iterate(errors, errorsArray.push, { that: errorsArray });\n createNonEnumerableProperty(that, 'errors', errorsArray);\n return that;\n};\n$AggregateError.prototype = create(Error.prototype, {\n constructor: createPropertyDescriptor(5, $AggregateError),\n message: createPropertyDescriptor(5, ''),\n name: createPropertyDescriptor(5, 'AggregateError')\n});\n$({ global: true }, { AggregateError: $AggregateError });\n\n/***/ }),\n/* 84 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar TO_STRING_TAG_SUPPORT = __w_pdfjs_require__(79);\nvar redefine = __w_pdfjs_require__(28);\nvar toString = __w_pdfjs_require__(85);\nif (!TO_STRING_TAG_SUPPORT) {\n redefine(Object.prototype, 'toString', toString, { unsafe: true });\n}\n\n/***/ }),\n/* 85 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar TO_STRING_TAG_SUPPORT = __w_pdfjs_require__(79);\nvar classof = __w_pdfjs_require__(78);\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n return '[object ' + classof(this) + ']';\n};\n\n/***/ }),\n/* 86 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar IS_PURE = __w_pdfjs_require__(36);\nvar global = __w_pdfjs_require__(10);\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar NativePromise = __w_pdfjs_require__(87);\nvar redefine = __w_pdfjs_require__(28);\nvar redefineAll = __w_pdfjs_require__(88);\nvar setToStringTag = __w_pdfjs_require__(69);\nvar setSpecies = __w_pdfjs_require__(89);\nvar isObject = __w_pdfjs_require__(21);\nvar aFunction = __w_pdfjs_require__(76);\nvar anInstance = __w_pdfjs_require__(90);\nvar inspectSource = __w_pdfjs_require__(30);\nvar iterate = __w_pdfjs_require__(73);\nvar checkCorrectnessOfIteration = __w_pdfjs_require__(91);\nvar speciesConstructor = __w_pdfjs_require__(92);\nvar task = __w_pdfjs_require__(93).set;\nvar microtask = __w_pdfjs_require__(97);\nvar promiseResolve = __w_pdfjs_require__(99);\nvar hostReportErrors = __w_pdfjs_require__(101);\nvar newPromiseCapabilityModule = __w_pdfjs_require__(100);\nvar perform = __w_pdfjs_require__(102);\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar isForced = __w_pdfjs_require__(51);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar IS_NODE = __w_pdfjs_require__(96);\nvar V8_VERSION = __w_pdfjs_require__(103);\nvar SPECIES = wellKnownSymbol('species');\nvar PROMISE = 'Promise';\nvar getInternalState = InternalStateModule.get;\nvar setInternalState = InternalStateModule.set;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar PromiseConstructor = NativePromise;\nvar TypeError = global.TypeError;\nvar document = global.document;\nvar process = global.process;\nvar $fetch = getBuiltIn('fetch');\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\nvar DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);\nvar NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\nvar FORCED = isForced(PROMISE, function () {\n var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);\n if (!GLOBAL_CORE_JS_PROMISE) {\n  if (V8_VERSION === 66)\n   return true;\n  if (!IS_NODE && !NATIVE_REJECTION_EVENT)\n   return true;\n }\n if (IS_PURE && !PromiseConstructor.prototype['finally'])\n  return true;\n if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor))\n  return false;\n var promise = PromiseConstructor.resolve(1);\n var FakePromise = function (exec) {\n  exec(function () {\n  }, function () {\n  });\n };\n var constructor = promise.constructor = {};\n constructor[SPECIES] = FakePromise;\n return !(promise.then(function () {\n }) instanceof FakePromise);\n});\nvar INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {\n PromiseConstructor.all(iterable)['catch'](function () {\n });\n});\nvar isThenable = function (it) {\n var then;\n return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (state, isReject) {\n if (state.notified)\n  return;\n state.notified = true;\n var chain = state.reactions;\n microtask(function () {\n  var value = state.value;\n  var ok = state.state == FULFILLED;\n  var index = 0;\n  while (chain.length > index) {\n   var reaction = chain[index++];\n   var handler = ok ? reaction.ok : reaction.fail;\n   var resolve = reaction.resolve;\n   var reject = reaction.reject;\n   var domain = reaction.domain;\n   var result, then, exited;\n   try {\n    if (handler) {\n     if (!ok) {\n      if (state.rejection === UNHANDLED)\n       onHandleUnhandled(state);\n      state.rejection = HANDLED;\n     }\n     if (handler === true)\n      result = value;\n     else {\n      if (domain)\n       domain.enter();\n      result = handler(value);\n      if (domain) {\n       domain.exit();\n       exited = true;\n      }\n     }\n     if (result === reaction.promise) {\n      reject(TypeError('Promise-chain cycle'));\n     } else if (then = isThenable(result)) {\n      then.call(result, resolve, reject);\n     } else\n      resolve(result);\n    } else\n     reject(value);\n   } catch (error) {\n    if (domain && !exited)\n     domain.exit();\n    reject(error);\n   }\n  }\n  state.reactions = [];\n  state.notified = false;\n  if (isReject && !state.rejection)\n   onUnhandled(state);\n });\n};\nvar dispatchEvent = function (name, promise, reason) {\n var event, handler;\n if (DISPATCH_EVENT) {\n  event = document.createEvent('Event');\n  event.promise = promise;\n  event.reason = reason;\n  event.initEvent(name, false, true);\n  global.dispatchEvent(event);\n } else\n  event = {\n   promise: promise,\n   reason: reason\n  };\n if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name]))\n  handler(event);\n else if (name === UNHANDLED_REJECTION)\n  hostReportErrors('Unhandled promise rejection', reason);\n};\nvar onUnhandled = function (state) {\n task.call(global, function () {\n  var promise = state.facade;\n  var value = state.value;\n  var IS_UNHANDLED = isUnhandled(state);\n  var result;\n  if (IS_UNHANDLED) {\n   result = perform(function () {\n    if (IS_NODE) {\n     process.emit('unhandledRejection', value, promise);\n    } else\n     dispatchEvent(UNHANDLED_REJECTION, promise, value);\n   });\n   state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n   if (result.error)\n    throw result.value;\n  }\n });\n};\nvar isUnhandled = function (state) {\n return state.rejection !== HANDLED && !state.parent;\n};\nvar onHandleUnhandled = function (state) {\n task.call(global, function () {\n  var promise = state.facade;\n  if (IS_NODE) {\n   process.emit('rejectionHandled', promise);\n  } else\n   dispatchEvent(REJECTION_HANDLED, promise, state.value);\n });\n};\nvar bind = function (fn, state, unwrap) {\n return function (value) {\n  fn(state, value, unwrap);\n };\n};\nvar internalReject = function (state, value, unwrap) {\n if (state.done)\n  return;\n state.done = true;\n if (unwrap)\n  state = unwrap;\n state.value = value;\n state.state = REJECTED;\n notify(state, true);\n};\nvar internalResolve = function (state, value, unwrap) {\n if (state.done)\n  return;\n state.done = true;\n if (unwrap)\n  state = unwrap;\n try {\n  if (state.facade === value)\n   throw TypeError(\"Promise can't be resolved itself\");\n  var then = isThenable(value);\n  if (then) {\n   microtask(function () {\n    var wrapper = { done: false };\n    try {\n     then.call(value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));\n    } catch (error) {\n     internalReject(wrapper, error, state);\n    }\n   });\n  } else {\n   state.value = value;\n   state.state = FULFILLED;\n   notify(state, false);\n  }\n } catch (error) {\n  internalReject({ done: false }, error, state);\n }\n};\nif (FORCED) {\n PromiseConstructor = function Promise(executor) {\n  anInstance(this, PromiseConstructor, PROMISE);\n  aFunction(executor);\n  Internal.call(this);\n  var state = getInternalState(this);\n  try {\n   executor(bind(internalResolve, state), bind(internalReject, state));\n  } catch (error) {\n   internalReject(state, error);\n  }\n };\n Internal = function Promise(executor) {\n  setInternalState(this, {\n   type: PROMISE,\n   done: false,\n   notified: false,\n   parent: false,\n   reactions: [],\n   rejection: false,\n   state: PENDING,\n   value: undefined\n  });\n };\n Internal.prototype = redefineAll(PromiseConstructor.prototype, {\n  then: function then(onFulfilled, onRejected) {\n   var state = getInternalPromiseState(this);\n   var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n   reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n   reaction.fail = typeof onRejected == 'function' && onRejected;\n   reaction.domain = IS_NODE ? process.domain : undefined;\n   state.parent = true;\n   state.reactions.push(reaction);\n   if (state.state != PENDING)\n    notify(state, false);\n   return reaction.promise;\n  },\n  'catch': function (onRejected) {\n   return this.then(undefined, onRejected);\n  }\n });\n OwnPromiseCapability = function () {\n  var promise = new Internal();\n  var state = getInternalState(promise);\n  this.promise = promise;\n  this.resolve = bind(internalResolve, state);\n  this.reject = bind(internalReject, state);\n };\n newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n  return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);\n };\n if (!IS_PURE && typeof NativePromise == 'function') {\n  nativeThen = NativePromise.prototype.then;\n  redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {\n   var that = this;\n   return new PromiseConstructor(function (resolve, reject) {\n    nativeThen.call(that, resolve, reject);\n   }).then(onFulfilled, onRejected);\n  }, { unsafe: true });\n  if (typeof $fetch == 'function')\n   $({\n    global: true,\n    enumerable: true,\n    forced: true\n   }, {\n    fetch: function fetch(input) {\n     return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));\n    }\n   });\n }\n}\n$({\n global: true,\n wrap: true,\n forced: FORCED\n}, { Promise: PromiseConstructor });\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\nPromiseWrapper = getBuiltIn(PROMISE);\n$({\n target: PROMISE,\n stat: true,\n forced: FORCED\n}, {\n reject: function reject(r) {\n  var capability = newPromiseCapability(this);\n  capability.reject.call(undefined, r);\n  return capability.promise;\n }\n});\n$({\n target: PROMISE,\n stat: true,\n forced: IS_PURE || FORCED\n}, {\n resolve: function resolve(x) {\n  return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);\n }\n});\n$({\n target: PROMISE,\n stat: true,\n forced: INCORRECT_ITERATION\n}, {\n all: function all(iterable) {\n  var C = this;\n  var capability = newPromiseCapability(C);\n  var resolve = capability.resolve;\n  var reject = capability.reject;\n  var result = perform(function () {\n   var $promiseResolve = aFunction(C.resolve);\n   var values = [];\n   var counter = 0;\n   var remaining = 1;\n   iterate(iterable, function (promise) {\n    var index = counter++;\n    var alreadyCalled = false;\n    values.push(undefined);\n    remaining++;\n    $promiseResolve.call(C, promise).then(function (value) {\n     if (alreadyCalled)\n      return;\n     alreadyCalled = true;\n     values[index] = value;\n     --remaining || resolve(values);\n    }, reject);\n   });\n   --remaining || resolve(values);\n  });\n  if (result.error)\n   reject(result.value);\n  return capability.promise;\n },\n race: function race(iterable) {\n  var C = this;\n  var capability = newPromiseCapability(C);\n  var reject = capability.reject;\n  var result = perform(function () {\n   var $promiseResolve = aFunction(C.resolve);\n   iterate(iterable, function (promise) {\n    $promiseResolve.call(C, promise).then(capability.resolve, reject);\n   });\n  });\n  if (result.error)\n   reject(result.value);\n  return capability.promise;\n }\n});\n\n/***/ }),\n/* 87 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nmodule.exports = global.Promise;\n\n/***/ }),\n/* 88 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar redefine = __w_pdfjs_require__(28);\nmodule.exports = function (target, src, options) {\n for (var key in src)\n  redefine(target, key, src[key], options);\n return target;\n};\n\n/***/ }),\n/* 89 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar definePropertyModule = __w_pdfjs_require__(26);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar SPECIES = wellKnownSymbol('species');\nmodule.exports = function (CONSTRUCTOR_NAME) {\n var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n var defineProperty = definePropertyModule.f;\n if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n  defineProperty(Constructor, SPECIES, {\n   configurable: true,\n   get: function () {\n    return this;\n   }\n  });\n }\n};\n\n/***/ }),\n/* 90 */\n/***/ (function(module) {\n\nmodule.exports = function (it, Constructor, name) {\n if (!(it instanceof Constructor)) {\n  throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n }\n return it;\n};\n\n/***/ }),\n/* 91 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\ntry {\n var called = 0;\n var iteratorWithReturn = {\n  next: function () {\n   return { done: !!called++ };\n  },\n  'return': function () {\n   SAFE_CLOSING = true;\n  }\n };\n iteratorWithReturn[ITERATOR] = function () {\n  return this;\n };\n Array.from(iteratorWithReturn, function () {\n  throw 2;\n });\n} catch (error) {\n}\nmodule.exports = function (exec, SKIP_CLOSING) {\n if (!SKIP_CLOSING && !SAFE_CLOSING)\n  return false;\n var ITERATION_SUPPORT = false;\n try {\n  var object = {};\n  object[ITERATOR] = function () {\n   return {\n    next: function () {\n     return { done: ITERATION_SUPPORT = true };\n    }\n   };\n  };\n  exec(object);\n } catch (error) {\n }\n return ITERATION_SUPPORT;\n};\n\n/***/ }),\n/* 92 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar aFunction = __w_pdfjs_require__(76);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar SPECIES = wellKnownSymbol('species');\nmodule.exports = function (O, defaultConstructor) {\n var C = anObject(O).constructor;\n var S;\n return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n};\n\n/***/ }),\n/* 93 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar fails = __w_pdfjs_require__(13);\nvar bind = __w_pdfjs_require__(75);\nvar html = __w_pdfjs_require__(61);\nvar createElement = __w_pdfjs_require__(24);\nvar IS_IOS = __w_pdfjs_require__(94);\nvar IS_NODE = __w_pdfjs_require__(96);\nvar location = global.location;\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function (id) {\n if (queue.hasOwnProperty(id)) {\n  var fn = queue[id];\n  delete queue[id];\n  fn();\n }\n};\nvar runner = function (id) {\n return function () {\n  run(id);\n };\n};\nvar listener = function (event) {\n run(event.data);\n};\nvar post = function (id) {\n global.postMessage(id + '', location.protocol + '//' + location.host);\n};\nif (!set || !clear) {\n set = function setImmediate(fn) {\n  var args = [];\n  var i = 1;\n  while (arguments.length > i)\n   args.push(arguments[i++]);\n  queue[++counter] = function () {\n   (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);\n  };\n  defer(counter);\n  return counter;\n };\n clear = function clearImmediate(id) {\n  delete queue[id];\n };\n if (IS_NODE) {\n  defer = function (id) {\n   process.nextTick(runner(id));\n  };\n } else if (Dispatch && Dispatch.now) {\n  defer = function (id) {\n   Dispatch.now(runner(id));\n  };\n } else if (MessageChannel && !IS_IOS) {\n  channel = new MessageChannel();\n  port = channel.port2;\n  channel.port1.onmessage = listener;\n  defer = bind(port.postMessage, port, 1);\n } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && location && location.protocol !== 'file:' && !fails(post)) {\n  defer = post;\n  global.addEventListener('message', listener, false);\n } else if (ONREADYSTATECHANGE in createElement('script')) {\n  defer = function (id) {\n   html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n    html.removeChild(this);\n    run(id);\n   };\n  };\n } else {\n  defer = function (id) {\n   setTimeout(runner(id), 0);\n  };\n }\n}\nmodule.exports = {\n set: set,\n clear: clear\n};\n\n/***/ }),\n/* 94 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar userAgent = __w_pdfjs_require__(95);\nmodule.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);\n\n/***/ }),\n/* 95 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar getBuiltIn = __w_pdfjs_require__(41);\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n\n/***/ }),\n/* 96 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar classof = __w_pdfjs_require__(18);\nvar global = __w_pdfjs_require__(10);\nmodule.exports = classof(global.process) == 'process';\n\n/***/ }),\n/* 97 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar getOwnPropertyDescriptor = __w_pdfjs_require__(11).f;\nvar macrotask = __w_pdfjs_require__(93).set;\nvar IS_IOS = __w_pdfjs_require__(94);\nvar IS_WEBOS_WEBKIT = __w_pdfjs_require__(98);\nvar IS_NODE = __w_pdfjs_require__(96);\nvar MutationObserver = global.MutationObserver || global.WebKitMutationObserver;\nvar document = global.document;\nvar process = global.process;\nvar Promise = global.Promise;\nvar queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');\nvar queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;\nvar flush, head, last, notify, toggle, node, promise, then;\nif (!queueMicrotask) {\n flush = function () {\n  var parent, fn;\n  if (IS_NODE && (parent = process.domain))\n   parent.exit();\n  while (head) {\n   fn = head.fn;\n   head = head.next;\n   try {\n    fn();\n   } catch (error) {\n    if (head)\n     notify();\n    else\n     last = undefined;\n    throw error;\n   }\n  }\n  last = undefined;\n  if (parent)\n   parent.enter();\n };\n if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {\n  toggle = true;\n  node = document.createTextNode('');\n  new MutationObserver(flush).observe(node, { characterData: true });\n  notify = function () {\n   node.data = toggle = !toggle;\n  };\n } else if (Promise && Promise.resolve) {\n  promise = Promise.resolve(undefined);\n  then = promise.then;\n  notify = function () {\n   then.call(promise, flush);\n  };\n } else if (IS_NODE) {\n  notify = function () {\n   process.nextTick(flush);\n  };\n } else {\n  notify = function () {\n   macrotask.call(global, flush);\n  };\n }\n}\nmodule.exports = queueMicrotask || function (fn) {\n var task = {\n  fn: fn,\n  next: undefined\n };\n if (last)\n  last.next = task;\n if (!head) {\n  head = task;\n  notify();\n }\n last = task;\n};\n\n/***/ }),\n/* 98 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar userAgent = __w_pdfjs_require__(95);\nmodule.exports = /web0s(?!.*chrome)/i.test(userAgent);\n\n/***/ }),\n/* 99 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar isObject = __w_pdfjs_require__(21);\nvar newPromiseCapability = __w_pdfjs_require__(100);\nmodule.exports = function (C, x) {\n anObject(C);\n if (isObject(x) && x.constructor === C)\n  return x;\n var promiseCapability = newPromiseCapability.f(C);\n var resolve = promiseCapability.resolve;\n resolve(x);\n return promiseCapability.promise;\n};\n\n/***/ }),\n/* 100 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar aFunction = __w_pdfjs_require__(76);\nvar PromiseCapability = function (C) {\n var resolve, reject;\n this.promise = new C(function ($$resolve, $$reject) {\n  if (resolve !== undefined || reject !== undefined)\n   throw TypeError('Bad Promise constructor');\n  resolve = $$resolve;\n  reject = $$reject;\n });\n this.resolve = aFunction(resolve);\n this.reject = aFunction(reject);\n};\nmodule.exports.f = function (C) {\n return new PromiseCapability(C);\n};\n\n/***/ }),\n/* 101 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nmodule.exports = function (a, b) {\n var console = global.console;\n if (console && console.error) {\n  arguments.length === 1 ? console.error(a) : console.error(a, b);\n }\n};\n\n/***/ }),\n/* 102 */\n/***/ (function(module) {\n\nmodule.exports = function (exec) {\n try {\n  return {\n   error: false,\n   value: exec()\n  };\n } catch (error) {\n  return {\n   error: true,\n   value: error\n  };\n }\n};\n\n/***/ }),\n/* 103 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar userAgent = __w_pdfjs_require__(95);\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8;\nvar match, version;\nif (v8) {\n match = v8.split('.');\n version = match[0] + match[1];\n} else if (userAgent) {\n match = userAgent.match(/Edge\\/(\\d+)/);\n if (!match || match[1] >= 74) {\n  match = userAgent.match(/Chrome\\/(\\d+)/);\n  if (match)\n   version = match[1];\n }\n}\nmodule.exports = version && +version;\n\n/***/ }),\n/* 104 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar aFunction = __w_pdfjs_require__(76);\nvar newPromiseCapabilityModule = __w_pdfjs_require__(100);\nvar perform = __w_pdfjs_require__(102);\nvar iterate = __w_pdfjs_require__(73);\n$({\n target: 'Promise',\n stat: true\n}, {\n allSettled: function allSettled(iterable) {\n  var C = this;\n  var capability = newPromiseCapabilityModule.f(C);\n  var resolve = capability.resolve;\n  var reject = capability.reject;\n  var result = perform(function () {\n   var promiseResolve = aFunction(C.resolve);\n   var values = [];\n   var counter = 0;\n   var remaining = 1;\n   iterate(iterable, function (promise) {\n    var index = counter++;\n    var alreadyCalled = false;\n    values.push(undefined);\n    remaining++;\n    promiseResolve.call(C, promise).then(function (value) {\n     if (alreadyCalled)\n      return;\n     alreadyCalled = true;\n     values[index] = {\n      status: 'fulfilled',\n      value: value\n     };\n     --remaining || resolve(values);\n    }, function (error) {\n     if (alreadyCalled)\n      return;\n     alreadyCalled = true;\n     values[index] = {\n      status: 'rejected',\n      reason: error\n     };\n     --remaining || resolve(values);\n    });\n   });\n   --remaining || resolve(values);\n  });\n  if (result.error)\n   reject(result.value);\n  return capability.promise;\n }\n});\n\n/***/ }),\n/* 105 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar aFunction = __w_pdfjs_require__(76);\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar newPromiseCapabilityModule = __w_pdfjs_require__(100);\nvar perform = __w_pdfjs_require__(102);\nvar iterate = __w_pdfjs_require__(73);\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n$({\n target: 'Promise',\n stat: true\n}, {\n any: function any(iterable) {\n  var C = this;\n  var capability = newPromiseCapabilityModule.f(C);\n  var resolve = capability.resolve;\n  var reject = capability.reject;\n  var result = perform(function () {\n   var promiseResolve = aFunction(C.resolve);\n   var errors = [];\n   var counter = 0;\n   var remaining = 1;\n   var alreadyResolved = false;\n   iterate(iterable, function (promise) {\n    var index = counter++;\n    var alreadyRejected = false;\n    errors.push(undefined);\n    remaining++;\n    promiseResolve.call(C, promise).then(function (value) {\n     if (alreadyRejected || alreadyResolved)\n      return;\n     alreadyResolved = true;\n     resolve(value);\n    }, function (error) {\n     if (alreadyRejected || alreadyResolved)\n      return;\n     alreadyRejected = true;\n     errors[index] = error;\n     --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n    });\n   });\n   --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));\n  });\n  if (result.error)\n   reject(result.value);\n  return capability.promise;\n }\n});\n\n/***/ }),\n/* 106 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar IS_PURE = __w_pdfjs_require__(36);\nvar NativePromise = __w_pdfjs_require__(87);\nvar fails = __w_pdfjs_require__(13);\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar speciesConstructor = __w_pdfjs_require__(92);\nvar promiseResolve = __w_pdfjs_require__(99);\nvar redefine = __w_pdfjs_require__(28);\nvar NON_GENERIC = !!NativePromise && fails(function () {\n NativePromise.prototype['finally'].call({\n  then: function () {\n  }\n }, function () {\n });\n});\n$({\n target: 'Promise',\n proto: true,\n real: true,\n forced: NON_GENERIC\n}, {\n 'finally': function (onFinally) {\n  var C = speciesConstructor(this, getBuiltIn('Promise'));\n  var isFunction = typeof onFinally == 'function';\n  return this.then(isFunction ? function (x) {\n   return promiseResolve(C, onFinally()).then(function () {\n    return x;\n   });\n  } : onFinally, isFunction ? function (e) {\n   return promiseResolve(C, onFinally()).then(function () {\n    throw e;\n   });\n  } : onFinally);\n }\n});\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n\n/***/ }),\n/* 107 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar charAt = __w_pdfjs_require__(108).charAt;\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar defineIterator = __w_pdfjs_require__(63);\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\ndefineIterator(String, 'String', function (iterated) {\n setInternalState(this, {\n  type: STRING_ITERATOR,\n  string: String(iterated),\n  index: 0\n });\n}, function next() {\n var state = getInternalState(this);\n var string = state.string;\n var index = state.index;\n var point;\n if (index >= string.length)\n  return {\n   value: undefined,\n   done: true\n  };\n point = charAt(string, index);\n state.index += point.length;\n return {\n  value: point,\n  done: false\n };\n});\n\n/***/ }),\n/* 108 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar toInteger = __w_pdfjs_require__(47);\nvar requireObjectCoercible = __w_pdfjs_require__(19);\nvar createMethod = function (CONVERT_TO_STRING) {\n return function ($this, pos) {\n  var S = String(requireObjectCoercible($this));\n  var position = toInteger(pos);\n  var size = S.length;\n  var first, second;\n  if (position < 0 || position >= size)\n   return CONVERT_TO_STRING ? '' : undefined;\n  first = S.charCodeAt(position);\n  return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n };\n};\nmodule.exports = {\n codeAt: createMethod(false),\n charAt: createMethod(true)\n};\n\n/***/ }),\n/* 109 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar DOMIterables = __w_pdfjs_require__(110);\nvar ArrayIteratorMethods = __w_pdfjs_require__(53);\nvar createNonEnumerableProperty = __w_pdfjs_require__(25);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\nfor (var COLLECTION_NAME in DOMIterables) {\n var Collection = global[COLLECTION_NAME];\n var CollectionPrototype = Collection && Collection.prototype;\n if (CollectionPrototype) {\n  if (CollectionPrototype[ITERATOR] !== ArrayValues)\n   try {\n    createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n   } catch (error) {\n    CollectionPrototype[ITERATOR] = ArrayValues;\n   }\n  if (!CollectionPrototype[TO_STRING_TAG]) {\n   createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n  }\n  if (DOMIterables[COLLECTION_NAME])\n   for (var METHOD_NAME in ArrayIteratorMethods) {\n    if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])\n     try {\n      createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n     } catch (error) {\n      CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n     }\n   }\n }\n}\n\n/***/ }),\n/* 110 */\n/***/ (function(module) {\n\nmodule.exports = {\n CSSRuleList: 0,\n CSSStyleDeclaration: 0,\n CSSValueList: 0,\n ClientRectList: 0,\n DOMRectList: 0,\n DOMStringList: 0,\n DOMTokenList: 1,\n DataTransferItemList: 0,\n FileList: 0,\n HTMLAllCollection: 0,\n HTMLCollection: 0,\n HTMLFormElement: 0,\n HTMLSelectElement: 0,\n MediaList: 0,\n MimeTypeArray: 0,\n NamedNodeMap: 0,\n NodeList: 1,\n PaintRequestList: 0,\n Plugin: 0,\n PluginArray: 0,\n SVGLengthList: 0,\n SVGNumberList: 0,\n SVGPathSegList: 0,\n SVGPointList: 0,\n SVGStringList: 0,\n SVGTransformList: 0,\n SourceBufferList: 0,\n StyleSheetList: 0,\n TextTrackCueList: 0,\n TextTrackList: 0,\n TouchList: 0\n};\n\n/***/ }),\n/* 111 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(112);\n__w_pdfjs_require__(120);\n__w_pdfjs_require__(118);\nvar path = __w_pdfjs_require__(42);\nmodule.exports = path.URL;\n\n/***/ }),\n/* 112 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n__w_pdfjs_require__(107);\nvar $ = __w_pdfjs_require__(9);\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar USE_NATIVE_URL = __w_pdfjs_require__(113);\nvar global = __w_pdfjs_require__(10);\nvar defineProperties = __w_pdfjs_require__(59);\nvar redefine = __w_pdfjs_require__(28);\nvar anInstance = __w_pdfjs_require__(90);\nvar has = __w_pdfjs_require__(22);\nvar assign = __w_pdfjs_require__(114);\nvar arrayFrom = __w_pdfjs_require__(115);\nvar codeAt = __w_pdfjs_require__(108).codeAt;\nvar toASCII = __w_pdfjs_require__(117);\nvar setToStringTag = __w_pdfjs_require__(69);\nvar URLSearchParamsModule = __w_pdfjs_require__(118);\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar NativeURL = global.URL;\nvar URLSearchParams = URLSearchParamsModule.URLSearchParams;\nvar getInternalSearchParamsState = URLSearchParamsModule.getState;\nvar setInternalState = InternalStateModule.set;\nvar getInternalURLState = InternalStateModule.getterFor('URL');\nvar floor = Math.floor;\nvar pow = Math.pow;\nvar INVALID_AUTHORITY = 'Invalid authority';\nvar INVALID_SCHEME = 'Invalid scheme';\nvar INVALID_HOST = 'Invalid host';\nvar INVALID_PORT = 'Invalid port';\nvar ALPHA = /[A-Za-z]/;\nvar ALPHANUMERIC = /[\\d+-.A-Za-z]/;\nvar DIGIT = /\\d/;\nvar HEX_START = /^(0x|0X)/;\nvar OCT = /^[0-7]+$/;\nvar DEC = /^\\d+$/;\nvar HEX = /^[\\dA-Fa-f]+$/;\nvar FORBIDDEN_HOST_CODE_POINT = /[\\u0000\\u0009\\u000A\\u000D #%/:?@[\\\\]]/;\nvar FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\\u0000\\u0009\\u000A\\u000D #/:?@[\\\\]]/;\nvar LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\\u0000-\\u001F ]+|[\\u0000-\\u001F ]+$/g;\nvar TAB_AND_NEW_LINE = /[\\u0009\\u000A\\u000D]/g;\nvar EOF;\nvar parseHost = function (url, input) {\n var result, codePoints, index;\n if (input.charAt(0) == '[') {\n  if (input.charAt(input.length - 1) != ']')\n   return INVALID_HOST;\n  result = parseIPv6(input.slice(1, -1));\n  if (!result)\n   return INVALID_HOST;\n  url.host = result;\n } else if (!isSpecial(url)) {\n  if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input))\n   return INVALID_HOST;\n  result = '';\n  codePoints = arrayFrom(input);\n  for (index = 0; index < codePoints.length; index++) {\n   result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);\n  }\n  url.host = result;\n } else {\n  input = toASCII(input);\n  if (FORBIDDEN_HOST_CODE_POINT.test(input))\n   return INVALID_HOST;\n  result = parseIPv4(input);\n  if (result === null)\n   return INVALID_HOST;\n  url.host = result;\n }\n};\nvar parseIPv4 = function (input) {\n var parts = input.split('.');\n var partsLength, numbers, index, part, radix, number, ipv4;\n if (parts.length && parts[parts.length - 1] == '') {\n  parts.pop();\n }\n partsLength = parts.length;\n if (partsLength > 4)\n  return input;\n numbers = [];\n for (index = 0; index < partsLength; index++) {\n  part = parts[index];\n  if (part == '')\n   return input;\n  radix = 10;\n  if (part.length > 1 && part.charAt(0) == '0') {\n   radix = HEX_START.test(part) ? 16 : 8;\n   part = part.slice(radix == 8 ? 1 : 2);\n  }\n  if (part === '') {\n   number = 0;\n  } else {\n   if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part))\n    return input;\n   number = parseInt(part, radix);\n  }\n  numbers.push(number);\n }\n for (index = 0; index < partsLength; index++) {\n  number = numbers[index];\n  if (index == partsLength - 1) {\n   if (number >= pow(256, 5 - partsLength))\n    return null;\n  } else if (number > 255)\n   return null;\n }\n ipv4 = numbers.pop();\n for (index = 0; index < numbers.length; index++) {\n  ipv4 += numbers[index] * pow(256, 3 - index);\n }\n return ipv4;\n};\nvar parseIPv6 = function (input) {\n var address = [\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n ];\n var pieceIndex = 0;\n var compress = null;\n var pointer = 0;\n var value, length, numbersSeen, ipv4Piece, number, swaps, swap;\n var char = function () {\n  return input.charAt(pointer);\n };\n if (char() == ':') {\n  if (input.charAt(1) != ':')\n   return;\n  pointer += 2;\n  pieceIndex++;\n  compress = pieceIndex;\n }\n while (char()) {\n  if (pieceIndex == 8)\n   return;\n  if (char() == ':') {\n   if (compress !== null)\n    return;\n   pointer++;\n   pieceIndex++;\n   compress = pieceIndex;\n   continue;\n  }\n  value = length = 0;\n  while (length < 4 && HEX.test(char())) {\n   value = value * 16 + parseInt(char(), 16);\n   pointer++;\n   length++;\n  }\n  if (char() == '.') {\n   if (length == 0)\n    return;\n   pointer -= length;\n   if (pieceIndex > 6)\n    return;\n   numbersSeen = 0;\n   while (char()) {\n    ipv4Piece = null;\n    if (numbersSeen > 0) {\n     if (char() == '.' && numbersSeen < 4)\n      pointer++;\n     else\n      return;\n    }\n    if (!DIGIT.test(char()))\n     return;\n    while (DIGIT.test(char())) {\n     number = parseInt(char(), 10);\n     if (ipv4Piece === null)\n      ipv4Piece = number;\n     else if (ipv4Piece == 0)\n      return;\n     else\n      ipv4Piece = ipv4Piece * 10 + number;\n     if (ipv4Piece > 255)\n      return;\n     pointer++;\n    }\n    address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;\n    numbersSeen++;\n    if (numbersSeen == 2 || numbersSeen == 4)\n     pieceIndex++;\n   }\n   if (numbersSeen != 4)\n    return;\n   break;\n  } else if (char() == ':') {\n   pointer++;\n   if (!char())\n    return;\n  } else if (char())\n   return;\n  address[pieceIndex++] = value;\n }\n if (compress !== null) {\n  swaps = pieceIndex - compress;\n  pieceIndex = 7;\n  while (pieceIndex != 0 && swaps > 0) {\n   swap = address[pieceIndex];\n   address[pieceIndex--] = address[compress + swaps - 1];\n   address[compress + --swaps] = swap;\n  }\n } else if (pieceIndex != 8)\n  return;\n return address;\n};\nvar findLongestZeroSequence = function (ipv6) {\n var maxIndex = null;\n var maxLength = 1;\n var currStart = null;\n var currLength = 0;\n var index = 0;\n for (; index < 8; index++) {\n  if (ipv6[index] !== 0) {\n   if (currLength > maxLength) {\n    maxIndex = currStart;\n    maxLength = currLength;\n   }\n   currStart = null;\n   currLength = 0;\n  } else {\n   if (currStart === null)\n    currStart = index;\n   ++currLength;\n  }\n }\n if (currLength > maxLength) {\n  maxIndex = currStart;\n  maxLength = currLength;\n }\n return maxIndex;\n};\nvar serializeHost = function (host) {\n var result, index, compress, ignore0;\n if (typeof host == 'number') {\n  result = [];\n  for (index = 0; index < 4; index++) {\n   result.unshift(host % 256);\n   host = floor(host / 256);\n  }\n  return result.join('.');\n } else if (typeof host == 'object') {\n  result = '';\n  compress = findLongestZeroSequence(host);\n  for (index = 0; index < 8; index++) {\n   if (ignore0 && host[index] === 0)\n    continue;\n   if (ignore0)\n    ignore0 = false;\n   if (compress === index) {\n    result += index ? ':' : '::';\n    ignore0 = true;\n   } else {\n    result += host[index].toString(16);\n    if (index < 7)\n     result += ':';\n   }\n  }\n  return '[' + result + ']';\n }\n return host;\n};\nvar C0ControlPercentEncodeSet = {};\nvar fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {\n ' ': 1,\n '\"': 1,\n '<': 1,\n '>': 1,\n '`': 1\n});\nvar pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {\n '#': 1,\n '?': 1,\n '{': 1,\n '}': 1\n});\nvar userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {\n '/': 1,\n ':': 1,\n ';': 1,\n '=': 1,\n '@': 1,\n '[': 1,\n '\\\\': 1,\n ']': 1,\n '^': 1,\n '|': 1\n});\nvar percentEncode = function (char, set) {\n var code = codeAt(char, 0);\n return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);\n};\nvar specialSchemes = {\n ftp: 21,\n file: null,\n http: 80,\n https: 443,\n ws: 80,\n wss: 443\n};\nvar isSpecial = function (url) {\n return has(specialSchemes, url.scheme);\n};\nvar includesCredentials = function (url) {\n return url.username != '' || url.password != '';\n};\nvar cannotHaveUsernamePasswordPort = function (url) {\n return !url.host || url.cannotBeABaseURL || url.scheme == 'file';\n};\nvar isWindowsDriveLetter = function (string, normalized) {\n var second;\n return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ':' || !normalized && second == '|');\n};\nvar startsWithWindowsDriveLetter = function (string) {\n var third;\n return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || ((third = string.charAt(2)) === '/' || third === '\\\\' || third === '?' || third === '#'));\n};\nvar shortenURLsPath = function (url) {\n var path = url.path;\n var pathSize = path.length;\n if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {\n  path.pop();\n }\n};\nvar isSingleDot = function (segment) {\n return segment === '.' || segment.toLowerCase() === '%2e';\n};\nvar isDoubleDot = function (segment) {\n segment = segment.toLowerCase();\n return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';\n};\nvar SCHEME_START = {};\nvar SCHEME = {};\nvar NO_SCHEME = {};\nvar SPECIAL_RELATIVE_OR_AUTHORITY = {};\nvar PATH_OR_AUTHORITY = {};\nvar RELATIVE = {};\nvar RELATIVE_SLASH = {};\nvar SPECIAL_AUTHORITY_SLASHES = {};\nvar SPECIAL_AUTHORITY_IGNORE_SLASHES = {};\nvar AUTHORITY = {};\nvar HOST = {};\nvar HOSTNAME = {};\nvar PORT = {};\nvar FILE = {};\nvar FILE_SLASH = {};\nvar FILE_HOST = {};\nvar PATH_START = {};\nvar PATH = {};\nvar CANNOT_BE_A_BASE_URL_PATH = {};\nvar QUERY = {};\nvar FRAGMENT = {};\nvar parseURL = function (url, input, stateOverride, base) {\n var state = stateOverride || SCHEME_START;\n var pointer = 0;\n var buffer = '';\n var seenAt = false;\n var seenBracket = false;\n var seenPasswordToken = false;\n var codePoints, char, bufferCodePoints, failure;\n if (!stateOverride) {\n  url.scheme = '';\n  url.username = '';\n  url.password = '';\n  url.host = null;\n  url.port = null;\n  url.path = [];\n  url.query = null;\n  url.fragment = null;\n  url.cannotBeABaseURL = false;\n  input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');\n }\n input = input.replace(TAB_AND_NEW_LINE, '');\n codePoints = arrayFrom(input);\n while (pointer <= codePoints.length) {\n  char = codePoints[pointer];\n  switch (state) {\n  case SCHEME_START:\n   if (char && ALPHA.test(char)) {\n    buffer += char.toLowerCase();\n    state = SCHEME;\n   } else if (!stateOverride) {\n    state = NO_SCHEME;\n    continue;\n   } else\n    return INVALID_SCHEME;\n   break;\n  case SCHEME:\n   if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {\n    buffer += char.toLowerCase();\n   } else if (char == ':') {\n    if (stateOverride && (isSpecial(url) != has(specialSchemes, buffer) || buffer == 'file' && (includesCredentials(url) || url.port !== null) || url.scheme == 'file' && !url.host))\n     return;\n    url.scheme = buffer;\n    if (stateOverride) {\n     if (isSpecial(url) && specialSchemes[url.scheme] == url.port)\n      url.port = null;\n     return;\n    }\n    buffer = '';\n    if (url.scheme == 'file') {\n     state = FILE;\n    } else if (isSpecial(url) && base && base.scheme == url.scheme) {\n     state = SPECIAL_RELATIVE_OR_AUTHORITY;\n    } else if (isSpecial(url)) {\n     state = SPECIAL_AUTHORITY_SLASHES;\n    } else if (codePoints[pointer + 1] == '/') {\n     state = PATH_OR_AUTHORITY;\n     pointer++;\n    } else {\n     url.cannotBeABaseURL = true;\n     url.path.push('');\n     state = CANNOT_BE_A_BASE_URL_PATH;\n    }\n   } else if (!stateOverride) {\n    buffer = '';\n    state = NO_SCHEME;\n    pointer = 0;\n    continue;\n   } else\n    return INVALID_SCHEME;\n   break;\n  case NO_SCHEME:\n   if (!base || base.cannotBeABaseURL && char != '#')\n    return INVALID_SCHEME;\n   if (base.cannotBeABaseURL && char == '#') {\n    url.scheme = base.scheme;\n    url.path = base.path.slice();\n    url.query = base.query;\n    url.fragment = '';\n    url.cannotBeABaseURL = true;\n    state = FRAGMENT;\n    break;\n   }\n   state = base.scheme == 'file' ? FILE : RELATIVE;\n   continue;\n  case SPECIAL_RELATIVE_OR_AUTHORITY:\n   if (char == '/' && codePoints[pointer + 1] == '/') {\n    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n    pointer++;\n   } else {\n    state = RELATIVE;\n    continue;\n   }\n   break;\n  case PATH_OR_AUTHORITY:\n   if (char == '/') {\n    state = AUTHORITY;\n    break;\n   } else {\n    state = PATH;\n    continue;\n   }\n  case RELATIVE:\n   url.scheme = base.scheme;\n   if (char == EOF) {\n    url.username = base.username;\n    url.password = base.password;\n    url.host = base.host;\n    url.port = base.port;\n    url.path = base.path.slice();\n    url.query = base.query;\n   } else if (char == '/' || char == '\\\\' && isSpecial(url)) {\n    state = RELATIVE_SLASH;\n   } else if (char == '?') {\n    url.username = base.username;\n    url.password = base.password;\n    url.host = base.host;\n    url.port = base.port;\n    url.path = base.path.slice();\n    url.query = '';\n    state = QUERY;\n   } else if (char == '#') {\n    url.username = base.username;\n    url.password = base.password;\n    url.host = base.host;\n    url.port = base.port;\n    url.path = base.path.slice();\n    url.query = base.query;\n    url.fragment = '';\n    state = FRAGMENT;\n   } else {\n    url.username = base.username;\n    url.password = base.password;\n    url.host = base.host;\n    url.port = base.port;\n    url.path = base.path.slice();\n    url.path.pop();\n    state = PATH;\n    continue;\n   }\n   break;\n  case RELATIVE_SLASH:\n   if (isSpecial(url) && (char == '/' || char == '\\\\')) {\n    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n   } else if (char == '/') {\n    state = AUTHORITY;\n   } else {\n    url.username = base.username;\n    url.password = base.password;\n    url.host = base.host;\n    url.port = base.port;\n    state = PATH;\n    continue;\n   }\n   break;\n  case SPECIAL_AUTHORITY_SLASHES:\n   state = SPECIAL_AUTHORITY_IGNORE_SLASHES;\n   if (char != '/' || buffer.charAt(pointer + 1) != '/')\n    continue;\n   pointer++;\n   break;\n  case SPECIAL_AUTHORITY_IGNORE_SLASHES:\n   if (char != '/' && char != '\\\\') {\n    state = AUTHORITY;\n    continue;\n   }\n   break;\n  case AUTHORITY:\n   if (char == '@') {\n    if (seenAt)\n     buffer = '%40' + buffer;\n    seenAt = true;\n    bufferCodePoints = arrayFrom(buffer);\n    for (var i = 0; i < bufferCodePoints.length; i++) {\n     var codePoint = bufferCodePoints[i];\n     if (codePoint == ':' && !seenPasswordToken) {\n      seenPasswordToken = true;\n      continue;\n     }\n     var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);\n     if (seenPasswordToken)\n      url.password += encodedCodePoints;\n     else\n      url.username += encodedCodePoints;\n    }\n    buffer = '';\n   } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\\\' && isSpecial(url)) {\n    if (seenAt && buffer == '')\n     return INVALID_AUTHORITY;\n    pointer -= arrayFrom(buffer).length + 1;\n    buffer = '';\n    state = HOST;\n   } else\n    buffer += char;\n   break;\n  case HOST:\n  case HOSTNAME:\n   if (stateOverride && url.scheme == 'file') {\n    state = FILE_HOST;\n    continue;\n   } else if (char == ':' && !seenBracket) {\n    if (buffer == '')\n     return INVALID_HOST;\n    failure = parseHost(url, buffer);\n    if (failure)\n     return failure;\n    buffer = '';\n    state = PORT;\n    if (stateOverride == HOSTNAME)\n     return;\n   } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\\\' && isSpecial(url)) {\n    if (isSpecial(url) && buffer == '')\n     return INVALID_HOST;\n    if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null))\n     return;\n    failure = parseHost(url, buffer);\n    if (failure)\n     return failure;\n    buffer = '';\n    state = PATH_START;\n    if (stateOverride)\n     return;\n    continue;\n   } else {\n    if (char == '[')\n     seenBracket = true;\n    else if (char == ']')\n     seenBracket = false;\n    buffer += char;\n   }\n   break;\n  case PORT:\n   if (DIGIT.test(char)) {\n    buffer += char;\n   } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\\\' && isSpecial(url) || stateOverride) {\n    if (buffer != '') {\n     var port = parseInt(buffer, 10);\n     if (port > 0xFFFF)\n      return INVALID_PORT;\n     url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;\n     buffer = '';\n    }\n    if (stateOverride)\n     return;\n    state = PATH_START;\n    continue;\n   } else\n    return INVALID_PORT;\n   break;\n  case FILE:\n   url.scheme = 'file';\n   if (char == '/' || char == '\\\\')\n    state = FILE_SLASH;\n   else if (base && base.scheme == 'file') {\n    if (char == EOF) {\n     url.host = base.host;\n     url.path = base.path.slice();\n     url.query = base.query;\n    } else if (char == '?') {\n     url.host = base.host;\n     url.path = base.path.slice();\n     url.query = '';\n     state = QUERY;\n    } else if (char == '#') {\n     url.host = base.host;\n     url.path = base.path.slice();\n     url.query = base.query;\n     url.fragment = '';\n     state = FRAGMENT;\n    } else {\n     if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\n      url.host = base.host;\n      url.path = base.path.slice();\n      shortenURLsPath(url);\n     }\n     state = PATH;\n     continue;\n    }\n   } else {\n    state = PATH;\n    continue;\n   }\n   break;\n  case FILE_SLASH:\n   if (char == '/' || char == '\\\\') {\n    state = FILE_HOST;\n    break;\n   }\n   if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {\n    if (isWindowsDriveLetter(base.path[0], true))\n     url.path.push(base.path[0]);\n    else\n     url.host = base.host;\n   }\n   state = PATH;\n   continue;\n  case FILE_HOST:\n   if (char == EOF || char == '/' || char == '\\\\' || char == '?' || char == '#') {\n    if (!stateOverride && isWindowsDriveLetter(buffer)) {\n     state = PATH;\n    } else if (buffer == '') {\n     url.host = '';\n     if (stateOverride)\n      return;\n     state = PATH_START;\n    } else {\n     failure = parseHost(url, buffer);\n     if (failure)\n      return failure;\n     if (url.host == 'localhost')\n      url.host = '';\n     if (stateOverride)\n      return;\n     buffer = '';\n     state = PATH_START;\n    }\n    continue;\n   } else\n    buffer += char;\n   break;\n  case PATH_START:\n   if (isSpecial(url)) {\n    state = PATH;\n    if (char != '/' && char != '\\\\')\n     continue;\n   } else if (!stateOverride && char == '?') {\n    url.query = '';\n    state = QUERY;\n   } else if (!stateOverride && char == '#') {\n    url.fragment = '';\n    state = FRAGMENT;\n   } else if (char != EOF) {\n    state = PATH;\n    if (char != '/')\n     continue;\n   }\n   break;\n  case PATH:\n   if (char == EOF || char == '/' || char == '\\\\' && isSpecial(url) || !stateOverride && (char == '?' || char == '#')) {\n    if (isDoubleDot(buffer)) {\n     shortenURLsPath(url);\n     if (char != '/' && !(char == '\\\\' && isSpecial(url))) {\n      url.path.push('');\n     }\n    } else if (isSingleDot(buffer)) {\n     if (char != '/' && !(char == '\\\\' && isSpecial(url))) {\n      url.path.push('');\n     }\n    } else {\n     if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {\n      if (url.host)\n       url.host = '';\n      buffer = buffer.charAt(0) + ':';\n     }\n     url.path.push(buffer);\n    }\n    buffer = '';\n    if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {\n     while (url.path.length > 1 && url.path[0] === '') {\n      url.path.shift();\n     }\n    }\n    if (char == '?') {\n     url.query = '';\n     state = QUERY;\n    } else if (char == '#') {\n     url.fragment = '';\n     state = FRAGMENT;\n    }\n   } else {\n    buffer += percentEncode(char, pathPercentEncodeSet);\n   }\n   break;\n  case CANNOT_BE_A_BASE_URL_PATH:\n   if (char == '?') {\n    url.query = '';\n    state = QUERY;\n   } else if (char == '#') {\n    url.fragment = '';\n    state = FRAGMENT;\n   } else if (char != EOF) {\n    url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);\n   }\n   break;\n  case QUERY:\n   if (!stateOverride && char == '#') {\n    url.fragment = '';\n    state = FRAGMENT;\n   } else if (char != EOF) {\n    if (char == \"'\" && isSpecial(url))\n     url.query += '%27';\n    else if (char == '#')\n     url.query += '%23';\n    else\n     url.query += percentEncode(char, C0ControlPercentEncodeSet);\n   }\n   break;\n  case FRAGMENT:\n   if (char != EOF)\n    url.fragment += percentEncode(char, fragmentPercentEncodeSet);\n   break;\n  }\n  pointer++;\n }\n};\nvar URLConstructor = function URL(url) {\n var that = anInstance(this, URLConstructor, 'URL');\n var base = arguments.length > 1 ? arguments[1] : undefined;\n var urlString = String(url);\n var state = setInternalState(that, { type: 'URL' });\n var baseState, failure;\n if (base !== undefined) {\n  if (base instanceof URLConstructor)\n   baseState = getInternalURLState(base);\n  else {\n   failure = parseURL(baseState = {}, String(base));\n   if (failure)\n    throw TypeError(failure);\n  }\n }\n failure = parseURL(state, urlString, null, baseState);\n if (failure)\n  throw TypeError(failure);\n var searchParams = state.searchParams = new URLSearchParams();\n var searchParamsState = getInternalSearchParamsState(searchParams);\n searchParamsState.updateSearchParams(state.query);\n searchParamsState.updateURL = function () {\n  state.query = String(searchParams) || null;\n };\n if (!DESCRIPTORS) {\n  that.href = serializeURL.call(that);\n  that.origin = getOrigin.call(that);\n  that.protocol = getProtocol.call(that);\n  that.username = getUsername.call(that);\n  that.password = getPassword.call(that);\n  that.host = getHost.call(that);\n  that.hostname = getHostname.call(that);\n  that.port = getPort.call(that);\n  that.pathname = getPathname.call(that);\n  that.search = getSearch.call(that);\n  that.searchParams = getSearchParams.call(that);\n  that.hash = getHash.call(that);\n }\n};\nvar URLPrototype = URLConstructor.prototype;\nvar serializeURL = function () {\n var url = getInternalURLState(this);\n var scheme = url.scheme;\n var username = url.username;\n var password = url.password;\n var host = url.host;\n var port = url.port;\n var path = url.path;\n var query = url.query;\n var fragment = url.fragment;\n var output = scheme + ':';\n if (host !== null) {\n  output += '//';\n  if (includesCredentials(url)) {\n   output += username + (password ? ':' + password : '') + '@';\n  }\n  output += serializeHost(host);\n  if (port !== null)\n   output += ':' + port;\n } else if (scheme == 'file')\n  output += '//';\n output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\n if (query !== null)\n  output += '?' + query;\n if (fragment !== null)\n  output += '#' + fragment;\n return output;\n};\nvar getOrigin = function () {\n var url = getInternalURLState(this);\n var scheme = url.scheme;\n var port = url.port;\n if (scheme == 'blob')\n  try {\n   return new URL(scheme.path[0]).origin;\n  } catch (error) {\n   return 'null';\n  }\n if (scheme == 'file' || !isSpecial(url))\n  return 'null';\n return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');\n};\nvar getProtocol = function () {\n return getInternalURLState(this).scheme + ':';\n};\nvar getUsername = function () {\n return getInternalURLState(this).username;\n};\nvar getPassword = function () {\n return getInternalURLState(this).password;\n};\nvar getHost = function () {\n var url = getInternalURLState(this);\n var host = url.host;\n var port = url.port;\n return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;\n};\nvar getHostname = function () {\n var host = getInternalURLState(this).host;\n return host === null ? '' : serializeHost(host);\n};\nvar getPort = function () {\n var port = getInternalURLState(this).port;\n return port === null ? '' : String(port);\n};\nvar getPathname = function () {\n var url = getInternalURLState(this);\n var path = url.path;\n return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';\n};\nvar getSearch = function () {\n var query = getInternalURLState(this).query;\n return query ? '?' + query : '';\n};\nvar getSearchParams = function () {\n return getInternalURLState(this).searchParams;\n};\nvar getHash = function () {\n var fragment = getInternalURLState(this).fragment;\n return fragment ? '#' + fragment : '';\n};\nvar accessorDescriptor = function (getter, setter) {\n return {\n  get: getter,\n  set: setter,\n  configurable: true,\n  enumerable: true\n };\n};\nif (DESCRIPTORS) {\n defineProperties(URLPrototype, {\n  href: accessorDescriptor(serializeURL, function (href) {\n   var url = getInternalURLState(this);\n   var urlString = String(href);\n   var failure = parseURL(url, urlString);\n   if (failure)\n    throw TypeError(failure);\n   getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\n  }),\n  origin: accessorDescriptor(getOrigin),\n  protocol: accessorDescriptor(getProtocol, function (protocol) {\n   var url = getInternalURLState(this);\n   parseURL(url, String(protocol) + ':', SCHEME_START);\n  }),\n  username: accessorDescriptor(getUsername, function (username) {\n   var url = getInternalURLState(this);\n   var codePoints = arrayFrom(String(username));\n   if (cannotHaveUsernamePasswordPort(url))\n    return;\n   url.username = '';\n   for (var i = 0; i < codePoints.length; i++) {\n    url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);\n   }\n  }),\n  password: accessorDescriptor(getPassword, function (password) {\n   var url = getInternalURLState(this);\n   var codePoints = arrayFrom(String(password));\n   if (cannotHaveUsernamePasswordPort(url))\n    return;\n   url.password = '';\n   for (var i = 0; i < codePoints.length; i++) {\n    url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);\n   }\n  }),\n  host: accessorDescriptor(getHost, function (host) {\n   var url = getInternalURLState(this);\n   if (url.cannotBeABaseURL)\n    return;\n   parseURL(url, String(host), HOST);\n  }),\n  hostname: accessorDescriptor(getHostname, function (hostname) {\n   var url = getInternalURLState(this);\n   if (url.cannotBeABaseURL)\n    return;\n   parseURL(url, String(hostname), HOSTNAME);\n  }),\n  port: accessorDescriptor(getPort, function (port) {\n   var url = getInternalURLState(this);\n   if (cannotHaveUsernamePasswordPort(url))\n    return;\n   port = String(port);\n   if (port == '')\n    url.port = null;\n   else\n    parseURL(url, port, PORT);\n  }),\n  pathname: accessorDescriptor(getPathname, function (pathname) {\n   var url = getInternalURLState(this);\n   if (url.cannotBeABaseURL)\n    return;\n   url.path = [];\n   parseURL(url, pathname + '', PATH_START);\n  }),\n  search: accessorDescriptor(getSearch, function (search) {\n   var url = getInternalURLState(this);\n   search = String(search);\n   if (search == '') {\n    url.query = null;\n   } else {\n    if ('?' == search.charAt(0))\n     search = search.slice(1);\n    url.query = '';\n    parseURL(url, search, QUERY);\n   }\n   getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);\n  }),\n  searchParams: accessorDescriptor(getSearchParams),\n  hash: accessorDescriptor(getHash, function (hash) {\n   var url = getInternalURLState(this);\n   hash = String(hash);\n   if (hash == '') {\n    url.fragment = null;\n    return;\n   }\n   if ('#' == hash.charAt(0))\n    hash = hash.slice(1);\n   url.fragment = '';\n   parseURL(url, hash, FRAGMENT);\n  })\n });\n}\nredefine(URLPrototype, 'toJSON', function toJSON() {\n return serializeURL.call(this);\n}, { enumerable: true });\nredefine(URLPrototype, 'toString', function toString() {\n return serializeURL.call(this);\n}, { enumerable: true });\nif (NativeURL) {\n var nativeCreateObjectURL = NativeURL.createObjectURL;\n var nativeRevokeObjectURL = NativeURL.revokeObjectURL;\n if (nativeCreateObjectURL)\n  redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {\n   return nativeCreateObjectURL.apply(NativeURL, arguments);\n  });\n if (nativeRevokeObjectURL)\n  redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {\n   return nativeRevokeObjectURL.apply(NativeURL, arguments);\n  });\n}\nsetToStringTag(URLConstructor, 'URL');\n$({\n global: true,\n forced: !USE_NATIVE_URL,\n sham: !DESCRIPTORS\n}, { URL: URLConstructor });\n\n/***/ }),\n/* 113 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar fails = __w_pdfjs_require__(13);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar IS_PURE = __w_pdfjs_require__(36);\nvar ITERATOR = wellKnownSymbol('iterator');\nmodule.exports = !fails(function () {\n var url = new URL('b?a=1&b=2&c=3', 'http://a');\n var searchParams = url.searchParams;\n var result = '';\n url.pathname = 'c%20d';\n searchParams.forEach(function (value, key) {\n  searchParams['delete']('b');\n  result += key + value;\n });\n return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR] || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' || new URL('http://тест').host !== 'xn--e1aybc' || new URL('http://a#б').hash !== '#%D0%B1' || result !== 'a1c3' || new URL('http://x', undefined).host !== 'x';\n});\n\n/***/ }),\n/* 114 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar fails = __w_pdfjs_require__(13);\nvar objectKeys = __w_pdfjs_require__(60);\nvar getOwnPropertySymbolsModule = __w_pdfjs_require__(50);\nvar propertyIsEnumerableModule = __w_pdfjs_require__(14);\nvar toObject = __w_pdfjs_require__(67);\nvar IndexedObject = __w_pdfjs_require__(17);\nvar nativeAssign = Object.assign;\nvar defineProperty = Object.defineProperty;\nmodule.exports = !nativeAssign || fails(function () {\n if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {\n   enumerable: true,\n   get: function () {\n    defineProperty(this, 'b', {\n     value: 3,\n     enumerable: false\n    });\n   }\n  }), { b: 2 })).b !== 1)\n  return true;\n var A = {};\n var B = {};\n var symbol = Symbol();\n var alphabet = 'abcdefghijklmnopqrst';\n A[symbol] = 7;\n alphabet.split('').forEach(function (chr) {\n  B[chr] = chr;\n });\n return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) {\n var T = toObject(target);\n var argumentsLength = arguments.length;\n var index = 1;\n var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n var propertyIsEnumerable = propertyIsEnumerableModule.f;\n while (argumentsLength > index) {\n  var S = IndexedObject(arguments[index++]);\n  var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n  var length = keys.length;\n  var j = 0;\n  var key;\n  while (length > j) {\n   key = keys[j++];\n   if (!DESCRIPTORS || propertyIsEnumerable.call(S, key))\n    T[key] = S[key];\n  }\n }\n return T;\n} : nativeAssign;\n\n/***/ }),\n/* 115 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar bind = __w_pdfjs_require__(75);\nvar toObject = __w_pdfjs_require__(67);\nvar callWithSafeIterationClosing = __w_pdfjs_require__(116);\nvar isArrayIteratorMethod = __w_pdfjs_require__(74);\nvar toLength = __w_pdfjs_require__(46);\nvar createProperty = __w_pdfjs_require__(81);\nvar getIteratorMethod = __w_pdfjs_require__(77);\nmodule.exports = function from(arrayLike) {\n var O = toObject(arrayLike);\n var C = typeof this == 'function' ? this : Array;\n var argumentsLength = arguments.length;\n var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n var mapping = mapfn !== undefined;\n var iteratorMethod = getIteratorMethod(O);\n var index = 0;\n var length, result, step, iterator, next, value;\n if (mapping)\n  mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n  iterator = iteratorMethod.call(O);\n  next = iterator.next;\n  result = new C();\n  for (; !(step = next.call(iterator)).done; index++) {\n   value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [\n    step.value,\n    index\n   ], true) : step.value;\n   createProperty(result, index, value);\n  }\n } else {\n  length = toLength(O.length);\n  result = new C(length);\n  for (; length > index; index++) {\n   value = mapping ? mapfn(O[index], index) : O[index];\n   createProperty(result, index, value);\n  }\n }\n result.length = index;\n return result;\n};\n\n/***/ }),\n/* 116 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar iteratorClose = __w_pdfjs_require__(80);\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n try {\n  return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n } catch (error) {\n  iteratorClose(iterator);\n  throw error;\n }\n};\n\n/***/ }),\n/* 117 */\n/***/ (function(module) {\n\n\"use strict\";\n\nvar maxInt = 2147483647;\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128;\nvar delimiter = '-';\nvar regexNonASCII = /[^\\0-\\u007E]/;\nvar regexSeparators = /[.\\u3002\\uFF0E\\uFF61]/g;\nvar OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\nvar ucs2decode = function (string) {\n var output = [];\n var counter = 0;\n var length = string.length;\n while (counter < length) {\n  var value = string.charCodeAt(counter++);\n  if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n   var extra = string.charCodeAt(counter++);\n   if ((extra & 0xFC00) == 0xDC00) {\n    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n   } else {\n    output.push(value);\n    counter--;\n   }\n  } else {\n   output.push(value);\n  }\n }\n return output;\n};\nvar digitToBasic = function (digit) {\n return digit + 22 + 75 * (digit < 26);\n};\nvar adapt = function (delta, numPoints, firstTime) {\n var k = 0;\n delta = firstTime ? floor(delta / damp) : delta >> 1;\n delta += floor(delta / numPoints);\n for (; delta > baseMinusTMin * tMax >> 1; k += base) {\n  delta = floor(delta / baseMinusTMin);\n }\n return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\nvar encode = function (input) {\n var output = [];\n input = ucs2decode(input);\n var inputLength = input.length;\n var n = initialN;\n var delta = 0;\n var bias = initialBias;\n var i, currentValue;\n for (i = 0; i < input.length; i++) {\n  currentValue = input[i];\n  if (currentValue < 0x80) {\n   output.push(stringFromCharCode(currentValue));\n  }\n }\n var basicLength = output.length;\n var handledCPCount = basicLength;\n if (basicLength) {\n  output.push(delimiter);\n }\n while (handledCPCount < inputLength) {\n  var m = maxInt;\n  for (i = 0; i < input.length; i++) {\n   currentValue = input[i];\n   if (currentValue >= n && currentValue < m) {\n    m = currentValue;\n   }\n  }\n  var handledCPCountPlusOne = handledCPCount + 1;\n  if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n   throw RangeError(OVERFLOW_ERROR);\n  }\n  delta += (m - n) * handledCPCountPlusOne;\n  n = m;\n  for (i = 0; i < input.length; i++) {\n   currentValue = input[i];\n   if (currentValue < n && ++delta > maxInt) {\n    throw RangeError(OVERFLOW_ERROR);\n   }\n   if (currentValue == n) {\n    var q = delta;\n    for (var k = base;; k += base) {\n     var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n     if (q < t)\n      break;\n     var qMinusT = q - t;\n     var baseMinusT = base - t;\n     output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));\n     q = floor(qMinusT / baseMinusT);\n    }\n    output.push(stringFromCharCode(digitToBasic(q)));\n    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n    delta = 0;\n    ++handledCPCount;\n   }\n  }\n  ++delta;\n  ++n;\n }\n return output.join('');\n};\nmodule.exports = function (input) {\n var encoded = [];\n var labels = input.toLowerCase().replace(regexSeparators, '\\u002E').split('.');\n var i, label;\n for (i = 0; i < labels.length; i++) {\n  label = labels[i];\n  encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);\n }\n return encoded.join('.');\n};\n\n/***/ }),\n/* 118 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n__w_pdfjs_require__(53);\nvar $ = __w_pdfjs_require__(9);\nvar getBuiltIn = __w_pdfjs_require__(41);\nvar USE_NATIVE_URL = __w_pdfjs_require__(113);\nvar redefine = __w_pdfjs_require__(28);\nvar redefineAll = __w_pdfjs_require__(88);\nvar setToStringTag = __w_pdfjs_require__(69);\nvar createIteratorConstructor = __w_pdfjs_require__(64);\nvar InternalStateModule = __w_pdfjs_require__(32);\nvar anInstance = __w_pdfjs_require__(90);\nvar hasOwn = __w_pdfjs_require__(22);\nvar bind = __w_pdfjs_require__(75);\nvar classof = __w_pdfjs_require__(78);\nvar anObject = __w_pdfjs_require__(27);\nvar isObject = __w_pdfjs_require__(21);\nvar create = __w_pdfjs_require__(58);\nvar createPropertyDescriptor = __w_pdfjs_require__(15);\nvar getIterator = __w_pdfjs_require__(119);\nvar getIteratorMethod = __w_pdfjs_require__(77);\nvar wellKnownSymbol = __w_pdfjs_require__(55);\nvar $fetch = getBuiltIn('fetch');\nvar Headers = getBuiltIn('Headers');\nvar ITERATOR = wellKnownSymbol('iterator');\nvar URL_SEARCH_PARAMS = 'URLSearchParams';\nvar URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);\nvar getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);\nvar plus = /\\+/g;\nvar sequences = Array(4);\nvar percentSequence = function (bytes) {\n return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\\\da-f]{2}){' + bytes + '})', 'gi'));\n};\nvar percentDecode = function (sequence) {\n try {\n  return decodeURIComponent(sequence);\n } catch (error) {\n  return sequence;\n }\n};\nvar deserialize = function (it) {\n var result = it.replace(plus, ' ');\n var bytes = 4;\n try {\n  return decodeURIComponent(result);\n } catch (error) {\n  while (bytes) {\n   result = result.replace(percentSequence(bytes--), percentDecode);\n  }\n  return result;\n }\n};\nvar find = /[!'()~]|%20/g;\nvar replace = {\n '!': '%21',\n \"'\": '%27',\n '(': '%28',\n ')': '%29',\n '~': '%7E',\n '%20': '+'\n};\nvar replacer = function (match) {\n return replace[match];\n};\nvar serialize = function (it) {\n return encodeURIComponent(it).replace(find, replacer);\n};\nvar parseSearchParams = function (result, query) {\n if (query) {\n  var attributes = query.split('&');\n  var index = 0;\n  var attribute, entry;\n  while (index < attributes.length) {\n   attribute = attributes[index++];\n   if (attribute.length) {\n    entry = attribute.split('=');\n    result.push({\n     key: deserialize(entry.shift()),\n     value: deserialize(entry.join('='))\n    });\n   }\n  }\n }\n};\nvar updateSearchParams = function (query) {\n this.entries.length = 0;\n parseSearchParams(this.entries, query);\n};\nvar validateArgumentsLength = function (passed, required) {\n if (passed < required)\n  throw TypeError('Not enough arguments');\n};\nvar URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {\n setInternalState(this, {\n  type: URL_SEARCH_PARAMS_ITERATOR,\n  iterator: getIterator(getInternalParamsState(params).entries),\n  kind: kind\n });\n}, 'Iterator', function next() {\n var state = getInternalIteratorState(this);\n var kind = state.kind;\n var step = state.iterator.next();\n var entry = step.value;\n if (!step.done) {\n  step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [\n   entry.key,\n   entry.value\n  ];\n }\n return step;\n});\nvar URLSearchParamsConstructor = function URLSearchParams() {\n anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);\n var init = arguments.length > 0 ? arguments[0] : undefined;\n var that = this;\n var entries = [];\n var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;\n setInternalState(that, {\n  type: URL_SEARCH_PARAMS,\n  entries: entries,\n  updateURL: function () {\n  },\n  updateSearchParams: updateSearchParams\n });\n if (init !== undefined) {\n  if (isObject(init)) {\n   iteratorMethod = getIteratorMethod(init);\n   if (typeof iteratorMethod === 'function') {\n    iterator = iteratorMethod.call(init);\n    next = iterator.next;\n    while (!(step = next.call(iterator)).done) {\n     entryIterator = getIterator(anObject(step.value));\n     entryNext = entryIterator.next;\n     if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done)\n      throw TypeError('Expected sequence with length 2');\n     entries.push({\n      key: first.value + '',\n      value: second.value + ''\n     });\n    }\n   } else\n    for (key in init)\n     if (hasOwn(init, key))\n      entries.push({\n       key: key,\n       value: init[key] + ''\n      });\n  } else {\n   parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');\n  }\n }\n};\nvar URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;\nredefineAll(URLSearchParamsPrototype, {\n append: function append(name, value) {\n  validateArgumentsLength(arguments.length, 2);\n  var state = getInternalParamsState(this);\n  state.entries.push({\n   key: name + '',\n   value: value + ''\n  });\n  state.updateURL();\n },\n 'delete': function (name) {\n  validateArgumentsLength(arguments.length, 1);\n  var state = getInternalParamsState(this);\n  var entries = state.entries;\n  var key = name + '';\n  var index = 0;\n  while (index < entries.length) {\n   if (entries[index].key === key)\n    entries.splice(index, 1);\n   else\n    index++;\n  }\n  state.updateURL();\n },\n get: function get(name) {\n  validateArgumentsLength(arguments.length, 1);\n  var entries = getInternalParamsState(this).entries;\n  var key = name + '';\n  var index = 0;\n  for (; index < entries.length; index++) {\n   if (entries[index].key === key)\n    return entries[index].value;\n  }\n  return null;\n },\n getAll: function getAll(name) {\n  validateArgumentsLength(arguments.length, 1);\n  var entries = getInternalParamsState(this).entries;\n  var key = name + '';\n  var result = [];\n  var index = 0;\n  for (; index < entries.length; index++) {\n   if (entries[index].key === key)\n    result.push(entries[index].value);\n  }\n  return result;\n },\n has: function has(name) {\n  validateArgumentsLength(arguments.length, 1);\n  var entries = getInternalParamsState(this).entries;\n  var key = name + '';\n  var index = 0;\n  while (index < entries.length) {\n   if (entries[index++].key === key)\n    return true;\n  }\n  return false;\n },\n set: function set(name, value) {\n  validateArgumentsLength(arguments.length, 1);\n  var state = getInternalParamsState(this);\n  var entries = state.entries;\n  var found = false;\n  var key = name + '';\n  var val = value + '';\n  var index = 0;\n  var entry;\n  for (; index < entries.length; index++) {\n   entry = entries[index];\n   if (entry.key === key) {\n    if (found)\n     entries.splice(index--, 1);\n    else {\n     found = true;\n     entry.value = val;\n    }\n   }\n  }\n  if (!found)\n   entries.push({\n    key: key,\n    value: val\n   });\n  state.updateURL();\n },\n sort: function sort() {\n  var state = getInternalParamsState(this);\n  var entries = state.entries;\n  var slice = entries.slice();\n  var entry, entriesIndex, sliceIndex;\n  entries.length = 0;\n  for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {\n   entry = slice[sliceIndex];\n   for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {\n    if (entries[entriesIndex].key > entry.key) {\n     entries.splice(entriesIndex, 0, entry);\n     break;\n    }\n   }\n   if (entriesIndex === sliceIndex)\n    entries.push(entry);\n  }\n  state.updateURL();\n },\n forEach: function forEach(callback) {\n  var entries = getInternalParamsState(this).entries;\n  var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);\n  var index = 0;\n  var entry;\n  while (index < entries.length) {\n   entry = entries[index++];\n   boundFunction(entry.value, entry.key, this);\n  }\n },\n keys: function keys() {\n  return new URLSearchParamsIterator(this, 'keys');\n },\n values: function values() {\n  return new URLSearchParamsIterator(this, 'values');\n },\n entries: function entries() {\n  return new URLSearchParamsIterator(this, 'entries');\n }\n}, { enumerable: true });\nredefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);\nredefine(URLSearchParamsPrototype, 'toString', function toString() {\n var entries = getInternalParamsState(this).entries;\n var result = [];\n var index = 0;\n var entry;\n while (index < entries.length) {\n  entry = entries[index++];\n  result.push(serialize(entry.key) + '=' + serialize(entry.value));\n }\n return result.join('&');\n}, { enumerable: true });\nsetToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);\n$({\n global: true,\n forced: !USE_NATIVE_URL\n}, { URLSearchParams: URLSearchParamsConstructor });\nif (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {\n $({\n  global: true,\n  enumerable: true,\n  forced: true\n }, {\n  fetch: function fetch(input) {\n   var args = [input];\n   var init, body, headers;\n   if (arguments.length > 1) {\n    init = arguments[1];\n    if (isObject(init)) {\n     body = init.body;\n     if (classof(body) === URL_SEARCH_PARAMS) {\n      headers = init.headers ? new Headers(init.headers) : new Headers();\n      if (!headers.has('content-type')) {\n       headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n      }\n      init = create(init, {\n       body: createPropertyDescriptor(0, String(body)),\n       headers: createPropertyDescriptor(0, headers)\n      });\n     }\n    }\n    args.push(init);\n   }\n   return $fetch.apply(this, args);\n  }\n });\n}\nmodule.exports = {\n URLSearchParams: URLSearchParamsConstructor,\n getState: getInternalParamsState\n};\n\n/***/ }),\n/* 119 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar anObject = __w_pdfjs_require__(27);\nvar getIteratorMethod = __w_pdfjs_require__(77);\nmodule.exports = function (it) {\n var iteratorMethod = getIteratorMethod(it);\n if (typeof iteratorMethod != 'function') {\n  throw TypeError(String(it) + ' is not iterable');\n }\n return anObject(iteratorMethod.call(it));\n};\n\n/***/ }),\n/* 120 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\n$({\n target: 'URL',\n proto: true,\n enumerable: true\n}, {\n toJSON: function toJSON() {\n  return URL.prototype.toString.call(this);\n }\n});\n\n/***/ }),\n/* 121 */\n/***/ (function(__unused_webpack_module, exports) {\n\n(function (global, factory) {\n   true ? factory(exports) : 0;\n}(this, function (exports) {\n 'use strict';\n var SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol : function (description) {\n  return \"Symbol(\" + description + \")\";\n };\n function noop() {\n }\n function getGlobals() {\n  if (typeof self !== 'undefined') {\n   return self;\n  } else if (typeof window !== 'undefined') {\n   return window;\n  } else if (typeof __webpack_require__.g !== 'undefined') {\n   return __webpack_require__.g;\n  }\n  return undefined;\n }\n var globals = getGlobals();\n function typeIsObject(x) {\n  return typeof x === 'object' && x !== null || typeof x === 'function';\n }\n var rethrowAssertionErrorRejection = noop;\n var originalPromise = Promise;\n var originalPromiseThen = Promise.prototype.then;\n var originalPromiseResolve = Promise.resolve.bind(originalPromise);\n var originalPromiseReject = Promise.reject.bind(originalPromise);\n function newPromise(executor) {\n  return new originalPromise(executor);\n }\n function promiseResolvedWith(value) {\n  return originalPromiseResolve(value);\n }\n function promiseRejectedWith(reason) {\n  return originalPromiseReject(reason);\n }\n function PerformPromiseThen(promise, onFulfilled, onRejected) {\n  return originalPromiseThen.call(promise, onFulfilled, onRejected);\n }\n function uponPromise(promise, onFulfilled, onRejected) {\n  PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n }\n function uponFulfillment(promise, onFulfilled) {\n  uponPromise(promise, onFulfilled);\n }\n function uponRejection(promise, onRejected) {\n  uponPromise(promise, undefined, onRejected);\n }\n function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n  return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n }\n function setPromiseIsHandledToTrue(promise) {\n  PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n }\n var queueMicrotask = function () {\n  var globalQueueMicrotask = globals && globals.queueMicrotask;\n  if (typeof globalQueueMicrotask === 'function') {\n   return globalQueueMicrotask;\n  }\n  var resolvedPromise = promiseResolvedWith(undefined);\n  return function (fn) {\n   return PerformPromiseThen(resolvedPromise, fn);\n  };\n }();\n function reflectCall(F, V, args) {\n  if (typeof F !== 'function') {\n   throw new TypeError('Argument is not a function');\n  }\n  return Function.prototype.apply.call(F, V, args);\n }\n function promiseCall(F, V, args) {\n  try {\n   return promiseResolvedWith(reflectCall(F, V, args));\n  } catch (value) {\n   return promiseRejectedWith(value);\n  }\n }\n var QUEUE_MAX_ARRAY_SIZE = 16384;\n var SimpleQueue = function () {\n  function SimpleQueue() {\n   this._cursor = 0;\n   this._size = 0;\n   this._front = {\n    _elements: [],\n    _next: undefined\n   };\n   this._back = this._front;\n   this._cursor = 0;\n   this._size = 0;\n  }\n  Object.defineProperty(SimpleQueue.prototype, \"length\", {\n   get: function () {\n    return this._size;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  SimpleQueue.prototype.push = function (element) {\n   var oldBack = this._back;\n   var newBack = oldBack;\n   if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n    newBack = {\n     _elements: [],\n     _next: undefined\n    };\n   }\n   oldBack._elements.push(element);\n   if (newBack !== oldBack) {\n    this._back = newBack;\n    oldBack._next = newBack;\n   }\n   ++this._size;\n  };\n  SimpleQueue.prototype.shift = function () {\n   var oldFront = this._front;\n   var newFront = oldFront;\n   var oldCursor = this._cursor;\n   var newCursor = oldCursor + 1;\n   var elements = oldFront._elements;\n   var element = elements[oldCursor];\n   if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n    newFront = oldFront._next;\n    newCursor = 0;\n   }\n   --this._size;\n   this._cursor = newCursor;\n   if (oldFront !== newFront) {\n    this._front = newFront;\n   }\n   elements[oldCursor] = undefined;\n   return element;\n  };\n  SimpleQueue.prototype.forEach = function (callback) {\n   var i = this._cursor;\n   var node = this._front;\n   var elements = node._elements;\n   while (i !== elements.length || node._next !== undefined) {\n    if (i === elements.length) {\n     node = node._next;\n     elements = node._elements;\n     i = 0;\n     if (elements.length === 0) {\n      break;\n     }\n    }\n    callback(elements[i]);\n    ++i;\n   }\n  };\n  SimpleQueue.prototype.peek = function () {\n   var front = this._front;\n   var cursor = this._cursor;\n   return front._elements[cursor];\n  };\n  return SimpleQueue;\n }();\n function ReadableStreamReaderGenericInitialize(reader, stream) {\n  reader._ownerReadableStream = stream;\n  stream._reader = reader;\n  if (stream._state === 'readable') {\n   defaultReaderClosedPromiseInitialize(reader);\n  } else if (stream._state === 'closed') {\n   defaultReaderClosedPromiseInitializeAsResolved(reader);\n  } else {\n   defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n  }\n }\n function ReadableStreamReaderGenericCancel(reader, reason) {\n  var stream = reader._ownerReadableStream;\n  return ReadableStreamCancel(stream, reason);\n }\n function ReadableStreamReaderGenericRelease(reader) {\n  if (reader._ownerReadableStream._state === 'readable') {\n   defaultReaderClosedPromiseReject(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n  } else {\n   defaultReaderClosedPromiseResetToRejected(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n  }\n  reader._ownerReadableStream._reader = undefined;\n  reader._ownerReadableStream = undefined;\n }\n function readerLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released reader');\n }\n function defaultReaderClosedPromiseInitialize(reader) {\n  reader._closedPromise = newPromise(function (resolve, reject) {\n   reader._closedPromise_resolve = resolve;\n   reader._closedPromise_reject = reject;\n  });\n }\n function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseReject(reader, reason);\n }\n function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n  defaultReaderClosedPromiseInitialize(reader);\n  defaultReaderClosedPromiseResolve(reader);\n }\n function defaultReaderClosedPromiseReject(reader, reason) {\n  if (reader._closedPromise_reject === undefined) {\n   return;\n  }\n  setPromiseIsHandledToTrue(reader._closedPromise);\n  reader._closedPromise_reject(reason);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n }\n function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n  defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n }\n function defaultReaderClosedPromiseResolve(reader) {\n  if (reader._closedPromise_resolve === undefined) {\n   return;\n  }\n  reader._closedPromise_resolve(undefined);\n  reader._closedPromise_resolve = undefined;\n  reader._closedPromise_reject = undefined;\n }\n var AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n var ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n var CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n var PullSteps = SymbolPolyfill('[[PullSteps]]');\n var NumberIsFinite = Number.isFinite || function (x) {\n  return typeof x === 'number' && isFinite(x);\n };\n var MathTrunc = Math.trunc || function (v) {\n  return v < 0 ? Math.ceil(v) : Math.floor(v);\n };\n function isDictionary(x) {\n  return typeof x === 'object' || typeof x === 'function';\n }\n function assertDictionary(obj, context) {\n  if (obj !== undefined && !isDictionary(obj)) {\n   throw new TypeError(context + \" is not an object.\");\n  }\n }\n function assertFunction(x, context) {\n  if (typeof x !== 'function') {\n   throw new TypeError(context + \" is not a function.\");\n  }\n }\n function isObject(x) {\n  return typeof x === 'object' && x !== null || typeof x === 'function';\n }\n function assertObject(x, context) {\n  if (!isObject(x)) {\n   throw new TypeError(context + \" is not an object.\");\n  }\n }\n function assertRequiredArgument(x, position, context) {\n  if (x === undefined) {\n   throw new TypeError(\"Parameter \" + position + \" is required in '\" + context + \"'.\");\n  }\n }\n function assertRequiredField(x, field, context) {\n  if (x === undefined) {\n   throw new TypeError(field + \" is required in '\" + context + \"'.\");\n  }\n }\n function convertUnrestrictedDouble(value) {\n  return Number(value);\n }\n function censorNegativeZero(x) {\n  return x === 0 ? 0 : x;\n }\n function integerPart(x) {\n  return censorNegativeZero(MathTrunc(x));\n }\n function convertUnsignedLongLongWithEnforceRange(value, context) {\n  var lowerBound = 0;\n  var upperBound = Number.MAX_SAFE_INTEGER;\n  var x = Number(value);\n  x = censorNegativeZero(x);\n  if (!NumberIsFinite(x)) {\n   throw new TypeError(context + \" is not a finite number\");\n  }\n  x = integerPart(x);\n  if (x < lowerBound || x > upperBound) {\n   throw new TypeError(context + \" is outside the accepted range of \" + lowerBound + \" to \" + upperBound + \", inclusive\");\n  }\n  if (!NumberIsFinite(x) || x === 0) {\n   return 0;\n  }\n  return x;\n }\n function assertReadableStream(x, context) {\n  if (!IsReadableStream(x)) {\n   throw new TypeError(context + \" is not a ReadableStream.\");\n  }\n }\n function AcquireReadableStreamDefaultReader(stream) {\n  return new ReadableStreamDefaultReader(stream);\n }\n function ReadableStreamAddReadRequest(stream, readRequest) {\n  stream._reader._readRequests.push(readRequest);\n }\n function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n  var reader = stream._reader;\n  var readRequest = reader._readRequests.shift();\n  if (done) {\n   readRequest._closeSteps();\n  } else {\n   readRequest._chunkSteps(chunk);\n  }\n }\n function ReadableStreamGetNumReadRequests(stream) {\n  return stream._reader._readRequests.length;\n }\n function ReadableStreamHasDefaultReader(stream) {\n  var reader = stream._reader;\n  if (reader === undefined) {\n   return false;\n  }\n  if (!IsReadableStreamDefaultReader(reader)) {\n   return false;\n  }\n  return true;\n }\n var ReadableStreamDefaultReader = function () {\n  function ReadableStreamDefaultReader(stream) {\n   assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n   assertReadableStream(stream, 'First parameter');\n   if (IsReadableStreamLocked(stream)) {\n    throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n   }\n   ReadableStreamReaderGenericInitialize(this, stream);\n   this._readRequests = new SimpleQueue();\n  }\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, \"closed\", {\n   get: function () {\n    if (!IsReadableStreamDefaultReader(this)) {\n     return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n    }\n    return this._closedPromise;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableStreamDefaultReader.prototype.cancel = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsReadableStreamDefaultReader(this)) {\n    return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n   }\n   if (this._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('cancel'));\n   }\n   return ReadableStreamReaderGenericCancel(this, reason);\n  };\n  ReadableStreamDefaultReader.prototype.read = function () {\n   if (!IsReadableStreamDefaultReader(this)) {\n    return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n   }\n   if (this._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('read from'));\n   }\n   var resolvePromise;\n   var rejectPromise;\n   var promise = newPromise(function (resolve, reject) {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n   });\n   var readRequest = {\n    _chunkSteps: function (chunk) {\n     return resolvePromise({\n      value: chunk,\n      done: false\n     });\n    },\n    _closeSteps: function () {\n     return resolvePromise({\n      value: undefined,\n      done: true\n     });\n    },\n    _errorSteps: function (e) {\n     return rejectPromise(e);\n    }\n   };\n   ReadableStreamDefaultReaderRead(this, readRequest);\n   return promise;\n  };\n  ReadableStreamDefaultReader.prototype.releaseLock = function () {\n   if (!IsReadableStreamDefaultReader(this)) {\n    throw defaultReaderBrandCheckException('releaseLock');\n   }\n   if (this._ownerReadableStream === undefined) {\n    return;\n   }\n   if (this._readRequests.length > 0) {\n    throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n   }\n   ReadableStreamReaderGenericRelease(this);\n  };\n  return ReadableStreamDefaultReader;\n }();\n Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableStreamDefaultReader',\n   configurable: true\n  });\n }\n function IsReadableStreamDefaultReader(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n   return false;\n  }\n  return true;\n }\n function ReadableStreamDefaultReaderRead(reader, readRequest) {\n  var stream = reader._ownerReadableStream;\n  stream._disturbed = true;\n  if (stream._state === 'closed') {\n   readRequest._closeSteps();\n  } else if (stream._state === 'errored') {\n   readRequest._errorSteps(stream._storedError);\n  } else {\n   stream._readableStreamController[PullSteps](readRequest);\n  }\n }\n function defaultReaderBrandCheckException(name) {\n  return new TypeError(\"ReadableStreamDefaultReader.prototype.\" + name + \" can only be used on a ReadableStreamDefaultReader\");\n }\n var _a;\n var AsyncIteratorPrototype;\n if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n  AsyncIteratorPrototype = (_a = {}, _a[SymbolPolyfill.asyncIterator] = function () {\n   return this;\n  }, _a);\n  Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, { enumerable: false });\n }\n var ReadableStreamAsyncIteratorImpl = function () {\n  function ReadableStreamAsyncIteratorImpl(reader, preventCancel) {\n   this._ongoingPromise = undefined;\n   this._isFinished = false;\n   this._reader = reader;\n   this._preventCancel = preventCancel;\n  }\n  ReadableStreamAsyncIteratorImpl.prototype.next = function () {\n   var _this = this;\n   var nextSteps = function () {\n    return _this._nextSteps();\n   };\n   this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n   return this._ongoingPromise;\n  };\n  ReadableStreamAsyncIteratorImpl.prototype.return = function (value) {\n   var _this = this;\n   var returnSteps = function () {\n    return _this._returnSteps(value);\n   };\n   return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n  };\n  ReadableStreamAsyncIteratorImpl.prototype._nextSteps = function () {\n   var _this = this;\n   if (this._isFinished) {\n    return Promise.resolve({\n     value: undefined,\n     done: true\n    });\n   }\n   var reader = this._reader;\n   if (reader._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('iterate'));\n   }\n   var resolvePromise;\n   var rejectPromise;\n   var promise = newPromise(function (resolve, reject) {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n   });\n   var readRequest = {\n    _chunkSteps: function (chunk) {\n     _this._ongoingPromise = undefined;\n     queueMicrotask(function () {\n      return resolvePromise({\n       value: chunk,\n       done: false\n      });\n     });\n    },\n    _closeSteps: function () {\n     _this._ongoingPromise = undefined;\n     _this._isFinished = true;\n     ReadableStreamReaderGenericRelease(reader);\n     resolvePromise({\n      value: undefined,\n      done: true\n     });\n    },\n    _errorSteps: function (reason) {\n     _this._ongoingPromise = undefined;\n     _this._isFinished = true;\n     ReadableStreamReaderGenericRelease(reader);\n     rejectPromise(reason);\n    }\n   };\n   ReadableStreamDefaultReaderRead(reader, readRequest);\n   return promise;\n  };\n  ReadableStreamAsyncIteratorImpl.prototype._returnSteps = function (value) {\n   if (this._isFinished) {\n    return Promise.resolve({\n     value: value,\n     done: true\n    });\n   }\n   this._isFinished = true;\n   var reader = this._reader;\n   if (reader._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('finish iterating'));\n   }\n   if (!this._preventCancel) {\n    var result = ReadableStreamReaderGenericCancel(reader, value);\n    ReadableStreamReaderGenericRelease(reader);\n    return transformPromiseWith(result, function () {\n     return {\n      value: value,\n      done: true\n     };\n    });\n   }\n   ReadableStreamReaderGenericRelease(reader);\n   return promiseResolvedWith({\n    value: value,\n    done: true\n   });\n  };\n  return ReadableStreamAsyncIteratorImpl;\n }();\n var ReadableStreamAsyncIteratorPrototype = {\n  next: function () {\n   if (!IsReadableStreamAsyncIterator(this)) {\n    return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n   }\n   return this._asyncIteratorImpl.next();\n  },\n  return: function (value) {\n   if (!IsReadableStreamAsyncIterator(this)) {\n    return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n   }\n   return this._asyncIteratorImpl.return(value);\n  }\n };\n if (AsyncIteratorPrototype !== undefined) {\n  Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n }\n function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n  var reader = AcquireReadableStreamDefaultReader(stream);\n  var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n  iterator._asyncIteratorImpl = impl;\n  return iterator;\n }\n function IsReadableStreamAsyncIterator(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n   return false;\n  }\n  return true;\n }\n function streamAsyncIteratorBrandCheckException(name) {\n  return new TypeError(\"ReadableStreamAsyncIterator.\" + name + \" can only be used on a ReadableSteamAsyncIterator\");\n }\n var NumberIsNaN = Number.isNaN || function (x) {\n  return x !== x;\n };\n function IsFiniteNonNegativeNumber(v) {\n  if (!IsNonNegativeNumber(v)) {\n   return false;\n  }\n  if (v === Infinity) {\n   return false;\n  }\n  return true;\n }\n function IsNonNegativeNumber(v) {\n  if (typeof v !== 'number') {\n   return false;\n  }\n  if (NumberIsNaN(v)) {\n   return false;\n  }\n  if (v < 0) {\n   return false;\n  }\n  return true;\n }\n function DequeueValue(container) {\n  var pair = container._queue.shift();\n  container._queueTotalSize -= pair.size;\n  if (container._queueTotalSize < 0) {\n   container._queueTotalSize = 0;\n  }\n  return pair.value;\n }\n function EnqueueValueWithSize(container, value, size) {\n  size = Number(size);\n  if (!IsFiniteNonNegativeNumber(size)) {\n   throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n  }\n  container._queue.push({\n   value: value,\n   size: size\n  });\n  container._queueTotalSize += size;\n }\n function PeekQueueValue(container) {\n  var pair = container._queue.peek();\n  return pair.value;\n }\n function ResetQueue(container) {\n  container._queue = new SimpleQueue();\n  container._queueTotalSize = 0;\n }\n function CreateArrayFromList(elements) {\n  return elements.slice();\n }\n function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n  new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n }\n function TransferArrayBuffer(O) {\n  return O;\n }\n function IsDetachedBuffer(O) {\n  return false;\n }\n var ReadableStreamBYOBRequest = function () {\n  function ReadableStreamBYOBRequest() {\n   throw new TypeError('Illegal constructor');\n  }\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, \"view\", {\n   get: function () {\n    if (!IsReadableStreamBYOBRequest(this)) {\n     throw byobRequestBrandCheckException('view');\n    }\n    return this._view;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableStreamBYOBRequest.prototype.respond = function (bytesWritten) {\n   if (!IsReadableStreamBYOBRequest(this)) {\n    throw byobRequestBrandCheckException('respond');\n   }\n   assertRequiredArgument(bytesWritten, 1, 'respond');\n   bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n   if (this._associatedReadableByteStreamController === undefined) {\n    throw new TypeError('This BYOB request has been invalidated');\n   }\n   if (IsDetachedBuffer(this._view.buffer));\n   ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n  };\n  ReadableStreamBYOBRequest.prototype.respondWithNewView = function (view) {\n   if (!IsReadableStreamBYOBRequest(this)) {\n    throw byobRequestBrandCheckException('respondWithNewView');\n   }\n   assertRequiredArgument(view, 1, 'respondWithNewView');\n   if (!ArrayBuffer.isView(view)) {\n    throw new TypeError('You can only respond with array buffer views');\n   }\n   if (view.byteLength === 0) {\n    throw new TypeError('chunk must have non-zero byteLength');\n   }\n   if (view.buffer.byteLength === 0) {\n    throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n   }\n   if (this._associatedReadableByteStreamController === undefined) {\n    throw new TypeError('This BYOB request has been invalidated');\n   }\n   ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n  };\n  return ReadableStreamBYOBRequest;\n }();\n Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n  respond: { enumerable: true },\n  respondWithNewView: { enumerable: true },\n  view: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableStreamBYOBRequest',\n   configurable: true\n  });\n }\n var ReadableByteStreamController = function () {\n  function ReadableByteStreamController() {\n   throw new TypeError('Illegal constructor');\n  }\n  Object.defineProperty(ReadableByteStreamController.prototype, \"byobRequest\", {\n   get: function () {\n    if (!IsReadableByteStreamController(this)) {\n     throw byteStreamControllerBrandCheckException('byobRequest');\n    }\n    if (this._byobRequest === null && this._pendingPullIntos.length > 0) {\n     var firstDescriptor = this._pendingPullIntos.peek();\n     var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n     var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n     SetUpReadableStreamBYOBRequest(byobRequest, this, view);\n     this._byobRequest = byobRequest;\n    }\n    return this._byobRequest;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(ReadableByteStreamController.prototype, \"desiredSize\", {\n   get: function () {\n    if (!IsReadableByteStreamController(this)) {\n     throw byteStreamControllerBrandCheckException('desiredSize');\n    }\n    return ReadableByteStreamControllerGetDesiredSize(this);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableByteStreamController.prototype.close = function () {\n   if (!IsReadableByteStreamController(this)) {\n    throw byteStreamControllerBrandCheckException('close');\n   }\n   if (this._closeRequested) {\n    throw new TypeError('The stream has already been closed; do not close it again!');\n   }\n   var state = this._controlledReadableByteStream._state;\n   if (state !== 'readable') {\n    throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be closed\");\n   }\n   ReadableByteStreamControllerClose(this);\n  };\n  ReadableByteStreamController.prototype.enqueue = function (chunk) {\n   if (!IsReadableByteStreamController(this)) {\n    throw byteStreamControllerBrandCheckException('enqueue');\n   }\n   assertRequiredArgument(chunk, 1, 'enqueue');\n   if (!ArrayBuffer.isView(chunk)) {\n    throw new TypeError('chunk must be an array buffer view');\n   }\n   if (chunk.byteLength === 0) {\n    throw new TypeError('chunk must have non-zero byteLength');\n   }\n   if (chunk.buffer.byteLength === 0) {\n    throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n   }\n   if (this._closeRequested) {\n    throw new TypeError('stream is closed or draining');\n   }\n   var state = this._controlledReadableByteStream._state;\n   if (state !== 'readable') {\n    throw new TypeError(\"The stream (in \" + state + \" state) is not in the readable state and cannot be enqueued to\");\n   }\n   ReadableByteStreamControllerEnqueue(this, chunk);\n  };\n  ReadableByteStreamController.prototype.error = function (e) {\n   if (e === void 0) {\n    e = undefined;\n   }\n   if (!IsReadableByteStreamController(this)) {\n    throw byteStreamControllerBrandCheckException('error');\n   }\n   ReadableByteStreamControllerError(this, e);\n  };\n  ReadableByteStreamController.prototype[CancelSteps] = function (reason) {\n   if (this._pendingPullIntos.length > 0) {\n    var firstDescriptor = this._pendingPullIntos.peek();\n    firstDescriptor.bytesFilled = 0;\n   }\n   ResetQueue(this);\n   var result = this._cancelAlgorithm(reason);\n   ReadableByteStreamControllerClearAlgorithms(this);\n   return result;\n  };\n  ReadableByteStreamController.prototype[PullSteps] = function (readRequest) {\n   var stream = this._controlledReadableByteStream;\n   if (this._queueTotalSize > 0) {\n    var entry = this._queue.shift();\n    this._queueTotalSize -= entry.byteLength;\n    ReadableByteStreamControllerHandleQueueDrain(this);\n    var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n    readRequest._chunkSteps(view);\n    return;\n   }\n   var autoAllocateChunkSize = this._autoAllocateChunkSize;\n   if (autoAllocateChunkSize !== undefined) {\n    var buffer = void 0;\n    try {\n     buffer = new ArrayBuffer(autoAllocateChunkSize);\n    } catch (bufferE) {\n     readRequest._errorSteps(bufferE);\n     return;\n    }\n    var pullIntoDescriptor = {\n     buffer: buffer,\n     byteOffset: 0,\n     byteLength: autoAllocateChunkSize,\n     bytesFilled: 0,\n     elementSize: 1,\n     viewConstructor: Uint8Array,\n     readerType: 'default'\n    };\n    this._pendingPullIntos.push(pullIntoDescriptor);\n   }\n   ReadableStreamAddReadRequest(stream, readRequest);\n   ReadableByteStreamControllerCallPullIfNeeded(this);\n  };\n  return ReadableByteStreamController;\n }();\n Object.defineProperties(ReadableByteStreamController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  byobRequest: { enumerable: true },\n  desiredSize: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableByteStreamController',\n   configurable: true\n  });\n }\n function IsReadableByteStreamController(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n   return false;\n  }\n  return true;\n }\n function IsReadableStreamBYOBRequest(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n   return false;\n  }\n  return true;\n }\n function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n  var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n  if (!shouldPull) {\n   return;\n  }\n  if (controller._pulling) {\n   controller._pullAgain = true;\n   return;\n  }\n  controller._pulling = true;\n  var pullPromise = controller._pullAlgorithm();\n  uponPromise(pullPromise, function () {\n   controller._pulling = false;\n   if (controller._pullAgain) {\n    controller._pullAgain = false;\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n   }\n  }, function (e) {\n   ReadableByteStreamControllerError(controller, e);\n  });\n }\n function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  controller._pendingPullIntos = new SimpleQueue();\n }\n function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n  var done = false;\n  if (stream._state === 'closed') {\n   done = true;\n  }\n  var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n  if (pullIntoDescriptor.readerType === 'default') {\n   ReadableStreamFulfillReadRequest(stream, filledView, done);\n  } else {\n   ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n  }\n }\n function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n  var bytesFilled = pullIntoDescriptor.bytesFilled;\n  var elementSize = pullIntoDescriptor.elementSize;\n  return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n }\n function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n  controller._queue.push({\n   buffer: buffer,\n   byteOffset: byteOffset,\n   byteLength: byteLength\n  });\n  controller._queueTotalSize += byteLength;\n }\n function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n  var elementSize = pullIntoDescriptor.elementSize;\n  var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n  var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n  var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n  var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n  var totalBytesToCopyRemaining = maxBytesToCopy;\n  var ready = false;\n  if (maxAlignedBytes > currentAlignedBytes) {\n   totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n   ready = true;\n  }\n  var queue = controller._queue;\n  while (totalBytesToCopyRemaining > 0) {\n   var headOfQueue = queue.peek();\n   var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n   var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n   CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n   if (headOfQueue.byteLength === bytesToCopy) {\n    queue.shift();\n   } else {\n    headOfQueue.byteOffset += bytesToCopy;\n    headOfQueue.byteLength -= bytesToCopy;\n   }\n   controller._queueTotalSize -= bytesToCopy;\n   ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n   totalBytesToCopyRemaining -= bytesToCopy;\n  }\n  return ready;\n }\n function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  pullIntoDescriptor.bytesFilled += size;\n }\n function ReadableByteStreamControllerHandleQueueDrain(controller) {\n  if (controller._queueTotalSize === 0 && controller._closeRequested) {\n   ReadableByteStreamControllerClearAlgorithms(controller);\n   ReadableStreamClose(controller._controlledReadableByteStream);\n  } else {\n   ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n }\n function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n  if (controller._byobRequest === null) {\n   return;\n  }\n  controller._byobRequest._associatedReadableByteStreamController = undefined;\n  controller._byobRequest._view = null;\n  controller._byobRequest = null;\n }\n function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n  while (controller._pendingPullIntos.length > 0) {\n   if (controller._queueTotalSize === 0) {\n    return;\n   }\n   var pullIntoDescriptor = controller._pendingPullIntos.peek();\n   if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n   }\n  }\n }\n function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n  var stream = controller._controlledReadableByteStream;\n  var elementSize = 1;\n  if (view.constructor !== DataView) {\n   elementSize = view.constructor.BYTES_PER_ELEMENT;\n  }\n  var ctor = view.constructor;\n  var buffer = TransferArrayBuffer(view.buffer);\n  var pullIntoDescriptor = {\n   buffer: buffer,\n   byteOffset: view.byteOffset,\n   byteLength: view.byteLength,\n   bytesFilled: 0,\n   elementSize: elementSize,\n   viewConstructor: ctor,\n   readerType: 'byob'\n  };\n  if (controller._pendingPullIntos.length > 0) {\n   controller._pendingPullIntos.push(pullIntoDescriptor);\n   ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n   return;\n  }\n  if (stream._state === 'closed') {\n   var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n   readIntoRequest._closeSteps(emptyView);\n   return;\n  }\n  if (controller._queueTotalSize > 0) {\n   if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n    ReadableByteStreamControllerHandleQueueDrain(controller);\n    readIntoRequest._chunkSteps(filledView);\n    return;\n   }\n   if (controller._closeRequested) {\n    var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n    ReadableByteStreamControllerError(controller, e);\n    readIntoRequest._errorSteps(e);\n    return;\n   }\n  }\n  controller._pendingPullIntos.push(pullIntoDescriptor);\n  ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n }\n function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n  firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n  var stream = controller._controlledReadableByteStream;\n  if (ReadableStreamHasBYOBReader(stream)) {\n   while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n    var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n    ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n   }\n  }\n }\n function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n  if (pullIntoDescriptor.bytesFilled + bytesWritten > pullIntoDescriptor.byteLength) {\n   throw new RangeError('bytesWritten out of range');\n  }\n  ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n  if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n   return;\n  }\n  ReadableByteStreamControllerShiftPendingPullInto(controller);\n  var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n  if (remainderSize > 0) {\n   var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n   var remainder = pullIntoDescriptor.buffer.slice(end - remainderSize, end);\n   ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n  }\n  pullIntoDescriptor.buffer = TransferArrayBuffer(pullIntoDescriptor.buffer);\n  pullIntoDescriptor.bytesFilled -= remainderSize;\n  ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n  ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n }\n function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n  var firstDescriptor = controller._pendingPullIntos.peek();\n  var state = controller._controlledReadableByteStream._state;\n  if (state === 'closed') {\n   if (bytesWritten !== 0) {\n    throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n   }\n   ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\n  } else {\n   ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n  }\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n }\n function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n  var descriptor = controller._pendingPullIntos.shift();\n  ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n  return descriptor;\n }\n function ReadableByteStreamControllerShouldCallPull(controller) {\n  var stream = controller._controlledReadableByteStream;\n  if (stream._state !== 'readable') {\n   return false;\n  }\n  if (controller._closeRequested) {\n   return false;\n  }\n  if (!controller._started) {\n   return false;\n  }\n  if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n   return true;\n  }\n  if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n   return true;\n  }\n  var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n  if (desiredSize > 0) {\n   return true;\n  }\n  return false;\n }\n function ReadableByteStreamControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n }\n function ReadableByteStreamControllerClose(controller) {\n  var stream = controller._controlledReadableByteStream;\n  if (controller._closeRequested || stream._state !== 'readable') {\n   return;\n  }\n  if (controller._queueTotalSize > 0) {\n   controller._closeRequested = true;\n   return;\n  }\n  if (controller._pendingPullIntos.length > 0) {\n   var firstPendingPullInto = controller._pendingPullIntos.peek();\n   if (firstPendingPullInto.bytesFilled > 0) {\n    var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n    ReadableByteStreamControllerError(controller, e);\n    throw e;\n   }\n  }\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamClose(stream);\n }\n function ReadableByteStreamControllerEnqueue(controller, chunk) {\n  var stream = controller._controlledReadableByteStream;\n  if (controller._closeRequested || stream._state !== 'readable') {\n   return;\n  }\n  var buffer = chunk.buffer;\n  var byteOffset = chunk.byteOffset;\n  var byteLength = chunk.byteLength;\n  var transferredBuffer = TransferArrayBuffer(buffer);\n  if (ReadableStreamHasDefaultReader(stream)) {\n   if (ReadableStreamGetNumReadRequests(stream) === 0) {\n    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n   } else {\n    var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n    ReadableStreamFulfillReadRequest(stream, transferredView, false);\n   }\n  } else if (ReadableStreamHasBYOBReader(stream)) {\n   ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n   ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  } else {\n   ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n  }\n  ReadableByteStreamControllerCallPullIfNeeded(controller);\n }\n function ReadableByteStreamControllerError(controller, e) {\n  var stream = controller._controlledReadableByteStream;\n  if (stream._state !== 'readable') {\n   return;\n  }\n  ReadableByteStreamControllerClearPendingPullIntos(controller);\n  ResetQueue(controller);\n  ReadableByteStreamControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n }\n function ReadableByteStreamControllerGetDesiredSize(controller) {\n  var state = controller._controlledReadableByteStream._state;\n  if (state === 'errored') {\n   return null;\n  }\n  if (state === 'closed') {\n   return 0;\n  }\n  return controller._strategyHWM - controller._queueTotalSize;\n }\n function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n  bytesWritten = Number(bytesWritten);\n  if (!IsFiniteNonNegativeNumber(bytesWritten)) {\n   throw new RangeError('bytesWritten must be a finite');\n  }\n  ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n }\n function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n  var firstDescriptor = controller._pendingPullIntos.peek();\n  if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n   throw new RangeError('The region specified by view does not match byobRequest');\n  }\n  if (firstDescriptor.byteLength !== view.byteLength) {\n   throw new RangeError('The buffer of view has different capacity than byobRequest');\n  }\n  firstDescriptor.buffer = view.buffer;\n  ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n }\n function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n  controller._controlledReadableByteStream = stream;\n  controller._pullAgain = false;\n  controller._pulling = false;\n  controller._byobRequest = null;\n  controller._queue = controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n  controller._closeRequested = false;\n  controller._started = false;\n  controller._strategyHWM = highWaterMark;\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n  controller._autoAllocateChunkSize = autoAllocateChunkSize;\n  controller._pendingPullIntos = new SimpleQueue();\n  stream._readableStreamController = controller;\n  var startResult = startAlgorithm();\n  uponPromise(promiseResolvedWith(startResult), function () {\n   controller._started = true;\n   ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }, function (r) {\n   ReadableByteStreamControllerError(controller, r);\n  });\n }\n function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n  var controller = Object.create(ReadableByteStreamController.prototype);\n  var startAlgorithm = function () {\n   return undefined;\n  };\n  var pullAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  var cancelAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  if (underlyingByteSource.start !== undefined) {\n   startAlgorithm = function () {\n    return underlyingByteSource.start(controller);\n   };\n  }\n  if (underlyingByteSource.pull !== undefined) {\n   pullAlgorithm = function () {\n    return underlyingByteSource.pull(controller);\n   };\n  }\n  if (underlyingByteSource.cancel !== undefined) {\n   cancelAlgorithm = function (reason) {\n    return underlyingByteSource.cancel(reason);\n   };\n  }\n  var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n  if (autoAllocateChunkSize === 0) {\n   throw new TypeError('autoAllocateChunkSize must be greater than 0');\n  }\n  SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n }\n function SetUpReadableStreamBYOBRequest(request, controller, view) {\n  request._associatedReadableByteStreamController = controller;\n  request._view = view;\n }\n function byobRequestBrandCheckException(name) {\n  return new TypeError(\"ReadableStreamBYOBRequest.prototype.\" + name + \" can only be used on a ReadableStreamBYOBRequest\");\n }\n function byteStreamControllerBrandCheckException(name) {\n  return new TypeError(\"ReadableByteStreamController.prototype.\" + name + \" can only be used on a ReadableByteStreamController\");\n }\n function AcquireReadableStreamBYOBReader(stream) {\n  return new ReadableStreamBYOBReader(stream);\n }\n function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n  stream._reader._readIntoRequests.push(readIntoRequest);\n }\n function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n  var reader = stream._reader;\n  var readIntoRequest = reader._readIntoRequests.shift();\n  if (done) {\n   readIntoRequest._closeSteps(chunk);\n  } else {\n   readIntoRequest._chunkSteps(chunk);\n  }\n }\n function ReadableStreamGetNumReadIntoRequests(stream) {\n  return stream._reader._readIntoRequests.length;\n }\n function ReadableStreamHasBYOBReader(stream) {\n  var reader = stream._reader;\n  if (reader === undefined) {\n   return false;\n  }\n  if (!IsReadableStreamBYOBReader(reader)) {\n   return false;\n  }\n  return true;\n }\n var ReadableStreamBYOBReader = function () {\n  function ReadableStreamBYOBReader(stream) {\n   assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n   assertReadableStream(stream, 'First parameter');\n   if (IsReadableStreamLocked(stream)) {\n    throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n   }\n   if (!IsReadableByteStreamController(stream._readableStreamController)) {\n    throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n   }\n   ReadableStreamReaderGenericInitialize(this, stream);\n   this._readIntoRequests = new SimpleQueue();\n  }\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, \"closed\", {\n   get: function () {\n    if (!IsReadableStreamBYOBReader(this)) {\n     return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n    }\n    return this._closedPromise;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableStreamBYOBReader.prototype.cancel = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsReadableStreamBYOBReader(this)) {\n    return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n   }\n   if (this._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('cancel'));\n   }\n   return ReadableStreamReaderGenericCancel(this, reason);\n  };\n  ReadableStreamBYOBReader.prototype.read = function (view) {\n   if (!IsReadableStreamBYOBReader(this)) {\n    return promiseRejectedWith(byobReaderBrandCheckException('read'));\n   }\n   if (!ArrayBuffer.isView(view)) {\n    return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n   }\n   if (view.byteLength === 0) {\n    return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n   }\n   if (view.buffer.byteLength === 0) {\n    return promiseRejectedWith(new TypeError(\"view's buffer must have non-zero byteLength\"));\n   }\n   if (this._ownerReadableStream === undefined) {\n    return promiseRejectedWith(readerLockException('read from'));\n   }\n   var resolvePromise;\n   var rejectPromise;\n   var promise = newPromise(function (resolve, reject) {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n   });\n   var readIntoRequest = {\n    _chunkSteps: function (chunk) {\n     return resolvePromise({\n      value: chunk,\n      done: false\n     });\n    },\n    _closeSteps: function (chunk) {\n     return resolvePromise({\n      value: chunk,\n      done: true\n     });\n    },\n    _errorSteps: function (e) {\n     return rejectPromise(e);\n    }\n   };\n   ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n   return promise;\n  };\n  ReadableStreamBYOBReader.prototype.releaseLock = function () {\n   if (!IsReadableStreamBYOBReader(this)) {\n    throw byobReaderBrandCheckException('releaseLock');\n   }\n   if (this._ownerReadableStream === undefined) {\n    return;\n   }\n   if (this._readIntoRequests.length > 0) {\n    throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n   }\n   ReadableStreamReaderGenericRelease(this);\n  };\n  return ReadableStreamBYOBReader;\n }();\n Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n  cancel: { enumerable: true },\n  read: { enumerable: true },\n  releaseLock: { enumerable: true },\n  closed: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableStreamBYOBReader',\n   configurable: true\n  });\n }\n function IsReadableStreamBYOBReader(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n   return false;\n  }\n  return true;\n }\n function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n  var stream = reader._ownerReadableStream;\n  stream._disturbed = true;\n  if (stream._state === 'errored') {\n   readIntoRequest._errorSteps(stream._storedError);\n  } else {\n   ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n  }\n }\n function byobReaderBrandCheckException(name) {\n  return new TypeError(\"ReadableStreamBYOBReader.prototype.\" + name + \" can only be used on a ReadableStreamBYOBReader\");\n }\n function ExtractHighWaterMark(strategy, defaultHWM) {\n  var highWaterMark = strategy.highWaterMark;\n  if (highWaterMark === undefined) {\n   return defaultHWM;\n  }\n  if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n   throw new RangeError('Invalid highWaterMark');\n  }\n  return highWaterMark;\n }\n function ExtractSizeAlgorithm(strategy) {\n  var size = strategy.size;\n  if (!size) {\n   return function () {\n    return 1;\n   };\n  }\n  return size;\n }\n function convertQueuingStrategy(init, context) {\n  assertDictionary(init, context);\n  var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n  var size = init === null || init === void 0 ? void 0 : init.size;\n  return {\n   highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n   size: size === undefined ? undefined : convertQueuingStrategySize(size, context + \" has member 'size' that\")\n  };\n }\n function convertQueuingStrategySize(fn, context) {\n  assertFunction(fn, context);\n  return function (chunk) {\n   return convertUnrestrictedDouble(fn(chunk));\n  };\n }\n function convertUnderlyingSink(original, context) {\n  assertDictionary(original, context);\n  var abort = original === null || original === void 0 ? void 0 : original.abort;\n  var close = original === null || original === void 0 ? void 0 : original.close;\n  var start = original === null || original === void 0 ? void 0 : original.start;\n  var type = original === null || original === void 0 ? void 0 : original.type;\n  var write = original === null || original === void 0 ? void 0 : original.write;\n  return {\n   abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, context + \" has member 'abort' that\"),\n   close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, context + \" has member 'close' that\"),\n   start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, context + \" has member 'start' that\"),\n   write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, context + \" has member 'write' that\"),\n   type: type\n  };\n }\n function convertUnderlyingSinkAbortCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (reason) {\n   return promiseCall(fn, original, [reason]);\n  };\n }\n function convertUnderlyingSinkCloseCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function () {\n   return promiseCall(fn, original, []);\n  };\n }\n function convertUnderlyingSinkStartCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (controller) {\n   return reflectCall(fn, original, [controller]);\n  };\n }\n function convertUnderlyingSinkWriteCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (chunk, controller) {\n   return promiseCall(fn, original, [\n    chunk,\n    controller\n   ]);\n  };\n }\n function assertWritableStream(x, context) {\n  if (!IsWritableStream(x)) {\n   throw new TypeError(context + \" is not a WritableStream.\");\n  }\n }\n var WritableStream = function () {\n  function WritableStream(rawUnderlyingSink, rawStrategy) {\n   if (rawUnderlyingSink === void 0) {\n    rawUnderlyingSink = {};\n   }\n   if (rawStrategy === void 0) {\n    rawStrategy = {};\n   }\n   if (rawUnderlyingSink === undefined) {\n    rawUnderlyingSink = null;\n   } else {\n    assertObject(rawUnderlyingSink, 'First parameter');\n   }\n   var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n   var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n   InitializeWritableStream(this);\n   var type = underlyingSink.type;\n   if (type !== undefined) {\n    throw new RangeError('Invalid type is specified');\n   }\n   var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n   var highWaterMark = ExtractHighWaterMark(strategy, 1);\n   SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n  }\n  Object.defineProperty(WritableStream.prototype, \"locked\", {\n   get: function () {\n    if (!IsWritableStream(this)) {\n     throw streamBrandCheckException('locked');\n    }\n    return IsWritableStreamLocked(this);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  WritableStream.prototype.abort = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsWritableStream(this)) {\n    return promiseRejectedWith(streamBrandCheckException('abort'));\n   }\n   if (IsWritableStreamLocked(this)) {\n    return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n   }\n   return WritableStreamAbort(this, reason);\n  };\n  WritableStream.prototype.close = function () {\n   if (!IsWritableStream(this)) {\n    return promiseRejectedWith(streamBrandCheckException('close'));\n   }\n   if (IsWritableStreamLocked(this)) {\n    return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n   }\n   if (WritableStreamCloseQueuedOrInFlight(this)) {\n    return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n   }\n   return WritableStreamClose(this);\n  };\n  WritableStream.prototype.getWriter = function () {\n   if (!IsWritableStream(this)) {\n    throw streamBrandCheckException('getWriter');\n   }\n   return AcquireWritableStreamDefaultWriter(this);\n  };\n  return WritableStream;\n }();\n Object.defineProperties(WritableStream.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  getWriter: { enumerable: true },\n  locked: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n   value: 'WritableStream',\n   configurable: true\n  });\n }\n function AcquireWritableStreamDefaultWriter(stream) {\n  return new WritableStreamDefaultWriter(stream);\n }\n function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n  if (highWaterMark === void 0) {\n   highWaterMark = 1;\n  }\n  if (sizeAlgorithm === void 0) {\n   sizeAlgorithm = function () {\n    return 1;\n   };\n  }\n  var stream = Object.create(WritableStream.prototype);\n  InitializeWritableStream(stream);\n  var controller = Object.create(WritableStreamDefaultController.prototype);\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n }\n function InitializeWritableStream(stream) {\n  stream._state = 'writable';\n  stream._storedError = undefined;\n  stream._writer = undefined;\n  stream._writableStreamController = undefined;\n  stream._writeRequests = new SimpleQueue();\n  stream._inFlightWriteRequest = undefined;\n  stream._closeRequest = undefined;\n  stream._inFlightCloseRequest = undefined;\n  stream._pendingAbortRequest = undefined;\n  stream._backpressure = false;\n }\n function IsWritableStream(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n   return false;\n  }\n  return true;\n }\n function IsWritableStreamLocked(stream) {\n  if (stream._writer === undefined) {\n   return false;\n  }\n  return true;\n }\n function WritableStreamAbort(stream, reason) {\n  var state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n   return promiseResolvedWith(undefined);\n  }\n  if (stream._pendingAbortRequest !== undefined) {\n   return stream._pendingAbortRequest._promise;\n  }\n  var wasAlreadyErroring = false;\n  if (state === 'erroring') {\n   wasAlreadyErroring = true;\n   reason = undefined;\n  }\n  var promise = newPromise(function (resolve, reject) {\n   stream._pendingAbortRequest = {\n    _promise: undefined,\n    _resolve: resolve,\n    _reject: reject,\n    _reason: reason,\n    _wasAlreadyErroring: wasAlreadyErroring\n   };\n  });\n  stream._pendingAbortRequest._promise = promise;\n  if (!wasAlreadyErroring) {\n   WritableStreamStartErroring(stream, reason);\n  }\n  return promise;\n }\n function WritableStreamClose(stream) {\n  var state = stream._state;\n  if (state === 'closed' || state === 'errored') {\n   return promiseRejectedWith(new TypeError(\"The stream (in \" + state + \" state) is not in the writable state and cannot be closed\"));\n  }\n  var promise = newPromise(function (resolve, reject) {\n   var closeRequest = {\n    _resolve: resolve,\n    _reject: reject\n   };\n   stream._closeRequest = closeRequest;\n  });\n  var writer = stream._writer;\n  if (writer !== undefined && stream._backpressure && state === 'writable') {\n   defaultWriterReadyPromiseResolve(writer);\n  }\n  WritableStreamDefaultControllerClose(stream._writableStreamController);\n  return promise;\n }\n function WritableStreamAddWriteRequest(stream) {\n  var promise = newPromise(function (resolve, reject) {\n   var writeRequest = {\n    _resolve: resolve,\n    _reject: reject\n   };\n   stream._writeRequests.push(writeRequest);\n  });\n  return promise;\n }\n function WritableStreamDealWithRejection(stream, error) {\n  var state = stream._state;\n  if (state === 'writable') {\n   WritableStreamStartErroring(stream, error);\n   return;\n  }\n  WritableStreamFinishErroring(stream);\n }\n function WritableStreamStartErroring(stream, reason) {\n  var controller = stream._writableStreamController;\n  stream._state = 'erroring';\n  stream._storedError = reason;\n  var writer = stream._writer;\n  if (writer !== undefined) {\n   WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n  }\n  if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n   WritableStreamFinishErroring(stream);\n  }\n }\n function WritableStreamFinishErroring(stream) {\n  stream._state = 'errored';\n  stream._writableStreamController[ErrorSteps]();\n  var storedError = stream._storedError;\n  stream._writeRequests.forEach(function (writeRequest) {\n   writeRequest._reject(storedError);\n  });\n  stream._writeRequests = new SimpleQueue();\n  if (stream._pendingAbortRequest === undefined) {\n   WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n   return;\n  }\n  var abortRequest = stream._pendingAbortRequest;\n  stream._pendingAbortRequest = undefined;\n  if (abortRequest._wasAlreadyErroring) {\n   abortRequest._reject(storedError);\n   WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n   return;\n  }\n  var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n  uponPromise(promise, function () {\n   abortRequest._resolve();\n   WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n  }, function (reason) {\n   abortRequest._reject(reason);\n   WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n  });\n }\n function WritableStreamFinishInFlightWrite(stream) {\n  stream._inFlightWriteRequest._resolve(undefined);\n  stream._inFlightWriteRequest = undefined;\n }\n function WritableStreamFinishInFlightWriteWithError(stream, error) {\n  stream._inFlightWriteRequest._reject(error);\n  stream._inFlightWriteRequest = undefined;\n  WritableStreamDealWithRejection(stream, error);\n }\n function WritableStreamFinishInFlightClose(stream) {\n  stream._inFlightCloseRequest._resolve(undefined);\n  stream._inFlightCloseRequest = undefined;\n  var state = stream._state;\n  if (state === 'erroring') {\n   stream._storedError = undefined;\n   if (stream._pendingAbortRequest !== undefined) {\n    stream._pendingAbortRequest._resolve();\n    stream._pendingAbortRequest = undefined;\n   }\n  }\n  stream._state = 'closed';\n  var writer = stream._writer;\n  if (writer !== undefined) {\n   defaultWriterClosedPromiseResolve(writer);\n  }\n }\n function WritableStreamFinishInFlightCloseWithError(stream, error) {\n  stream._inFlightCloseRequest._reject(error);\n  stream._inFlightCloseRequest = undefined;\n  if (stream._pendingAbortRequest !== undefined) {\n   stream._pendingAbortRequest._reject(error);\n   stream._pendingAbortRequest = undefined;\n  }\n  WritableStreamDealWithRejection(stream, error);\n }\n function WritableStreamCloseQueuedOrInFlight(stream) {\n  if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n   return false;\n  }\n  return true;\n }\n function WritableStreamHasOperationMarkedInFlight(stream) {\n  if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n   return false;\n  }\n  return true;\n }\n function WritableStreamMarkCloseRequestInFlight(stream) {\n  stream._inFlightCloseRequest = stream._closeRequest;\n  stream._closeRequest = undefined;\n }\n function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n  stream._inFlightWriteRequest = stream._writeRequests.shift();\n }\n function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n  if (stream._closeRequest !== undefined) {\n   stream._closeRequest._reject(stream._storedError);\n   stream._closeRequest = undefined;\n  }\n  var writer = stream._writer;\n  if (writer !== undefined) {\n   defaultWriterClosedPromiseReject(writer, stream._storedError);\n  }\n }\n function WritableStreamUpdateBackpressure(stream, backpressure) {\n  var writer = stream._writer;\n  if (writer !== undefined && backpressure !== stream._backpressure) {\n   if (backpressure) {\n    defaultWriterReadyPromiseReset(writer);\n   } else {\n    defaultWriterReadyPromiseResolve(writer);\n   }\n  }\n  stream._backpressure = backpressure;\n }\n var WritableStreamDefaultWriter = function () {\n  function WritableStreamDefaultWriter(stream) {\n   assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n   assertWritableStream(stream, 'First parameter');\n   if (IsWritableStreamLocked(stream)) {\n    throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n   }\n   this._ownerWritableStream = stream;\n   stream._writer = this;\n   var state = stream._state;\n   if (state === 'writable') {\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n     defaultWriterReadyPromiseInitialize(this);\n    } else {\n     defaultWriterReadyPromiseInitializeAsResolved(this);\n    }\n    defaultWriterClosedPromiseInitialize(this);\n   } else if (state === 'erroring') {\n    defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n    defaultWriterClosedPromiseInitialize(this);\n   } else if (state === 'closed') {\n    defaultWriterReadyPromiseInitializeAsResolved(this);\n    defaultWriterClosedPromiseInitializeAsResolved(this);\n   } else {\n    var storedError = stream._storedError;\n    defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n    defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n   }\n  }\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, \"closed\", {\n   get: function () {\n    if (!IsWritableStreamDefaultWriter(this)) {\n     return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n    }\n    return this._closedPromise;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, \"desiredSize\", {\n   get: function () {\n    if (!IsWritableStreamDefaultWriter(this)) {\n     throw defaultWriterBrandCheckException('desiredSize');\n    }\n    if (this._ownerWritableStream === undefined) {\n     throw defaultWriterLockException('desiredSize');\n    }\n    return WritableStreamDefaultWriterGetDesiredSize(this);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, \"ready\", {\n   get: function () {\n    if (!IsWritableStreamDefaultWriter(this)) {\n     return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n    }\n    return this._readyPromise;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  WritableStreamDefaultWriter.prototype.abort = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsWritableStreamDefaultWriter(this)) {\n    return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n   }\n   if (this._ownerWritableStream === undefined) {\n    return promiseRejectedWith(defaultWriterLockException('abort'));\n   }\n   return WritableStreamDefaultWriterAbort(this, reason);\n  };\n  WritableStreamDefaultWriter.prototype.close = function () {\n   if (!IsWritableStreamDefaultWriter(this)) {\n    return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n   }\n   var stream = this._ownerWritableStream;\n   if (stream === undefined) {\n    return promiseRejectedWith(defaultWriterLockException('close'));\n   }\n   if (WritableStreamCloseQueuedOrInFlight(stream)) {\n    return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n   }\n   return WritableStreamDefaultWriterClose(this);\n  };\n  WritableStreamDefaultWriter.prototype.releaseLock = function () {\n   if (!IsWritableStreamDefaultWriter(this)) {\n    throw defaultWriterBrandCheckException('releaseLock');\n   }\n   var stream = this._ownerWritableStream;\n   if (stream === undefined) {\n    return;\n   }\n   WritableStreamDefaultWriterRelease(this);\n  };\n  WritableStreamDefaultWriter.prototype.write = function (chunk) {\n   if (chunk === void 0) {\n    chunk = undefined;\n   }\n   if (!IsWritableStreamDefaultWriter(this)) {\n    return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n   }\n   if (this._ownerWritableStream === undefined) {\n    return promiseRejectedWith(defaultWriterLockException('write to'));\n   }\n   return WritableStreamDefaultWriterWrite(this, chunk);\n  };\n  return WritableStreamDefaultWriter;\n }();\n Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n  abort: { enumerable: true },\n  close: { enumerable: true },\n  releaseLock: { enumerable: true },\n  write: { enumerable: true },\n  closed: { enumerable: true },\n  desiredSize: { enumerable: true },\n  ready: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n   value: 'WritableStreamDefaultWriter',\n   configurable: true\n  });\n }\n function IsWritableStreamDefaultWriter(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n   return false;\n  }\n  return true;\n }\n function WritableStreamDefaultWriterAbort(writer, reason) {\n  var stream = writer._ownerWritableStream;\n  return WritableStreamAbort(stream, reason);\n }\n function WritableStreamDefaultWriterClose(writer) {\n  var stream = writer._ownerWritableStream;\n  return WritableStreamClose(stream);\n }\n function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n  var stream = writer._ownerWritableStream;\n  var state = stream._state;\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n   return promiseResolvedWith(undefined);\n  }\n  if (state === 'errored') {\n   return promiseRejectedWith(stream._storedError);\n  }\n  return WritableStreamDefaultWriterClose(writer);\n }\n function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n  if (writer._closedPromiseState === 'pending') {\n   defaultWriterClosedPromiseReject(writer, error);\n  } else {\n   defaultWriterClosedPromiseResetToRejected(writer, error);\n  }\n }\n function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n  if (writer._readyPromiseState === 'pending') {\n   defaultWriterReadyPromiseReject(writer, error);\n  } else {\n   defaultWriterReadyPromiseResetToRejected(writer, error);\n  }\n }\n function WritableStreamDefaultWriterGetDesiredSize(writer) {\n  var stream = writer._ownerWritableStream;\n  var state = stream._state;\n  if (state === 'errored' || state === 'erroring') {\n   return null;\n  }\n  if (state === 'closed') {\n   return 0;\n  }\n  return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n }\n function WritableStreamDefaultWriterRelease(writer) {\n  var stream = writer._ownerWritableStream;\n  var releasedError = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n  WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n  WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n  stream._writer = undefined;\n  writer._ownerWritableStream = undefined;\n }\n function WritableStreamDefaultWriterWrite(writer, chunk) {\n  var stream = writer._ownerWritableStream;\n  var controller = stream._writableStreamController;\n  var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n  if (stream !== writer._ownerWritableStream) {\n   return promiseRejectedWith(defaultWriterLockException('write to'));\n  }\n  var state = stream._state;\n  if (state === 'errored') {\n   return promiseRejectedWith(stream._storedError);\n  }\n  if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n   return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n  }\n  if (state === 'erroring') {\n   return promiseRejectedWith(stream._storedError);\n  }\n  var promise = WritableStreamAddWriteRequest(stream);\n  WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n  return promise;\n }\n var closeSentinel = {};\n var WritableStreamDefaultController = function () {\n  function WritableStreamDefaultController() {\n   throw new TypeError('Illegal constructor');\n  }\n  WritableStreamDefaultController.prototype.error = function (e) {\n   if (e === void 0) {\n    e = undefined;\n   }\n   if (!IsWritableStreamDefaultController(this)) {\n    throw new TypeError('WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController');\n   }\n   var state = this._controlledWritableStream._state;\n   if (state !== 'writable') {\n    return;\n   }\n   WritableStreamDefaultControllerError(this, e);\n  };\n  WritableStreamDefaultController.prototype[AbortSteps] = function (reason) {\n   var result = this._abortAlgorithm(reason);\n   WritableStreamDefaultControllerClearAlgorithms(this);\n   return result;\n  };\n  WritableStreamDefaultController.prototype[ErrorSteps] = function () {\n   ResetQueue(this);\n  };\n  return WritableStreamDefaultController;\n }();\n Object.defineProperties(WritableStreamDefaultController.prototype, { error: { enumerable: true } });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n   value: 'WritableStreamDefaultController',\n   configurable: true\n  });\n }\n function IsWritableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n   return false;\n  }\n  return true;\n }\n function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n  controller._controlledWritableStream = stream;\n  stream._writableStreamController = controller;\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n  controller._started = false;\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n  controller._writeAlgorithm = writeAlgorithm;\n  controller._closeAlgorithm = closeAlgorithm;\n  controller._abortAlgorithm = abortAlgorithm;\n  var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n  WritableStreamUpdateBackpressure(stream, backpressure);\n  var startResult = startAlgorithm();\n  var startPromise = promiseResolvedWith(startResult);\n  uponPromise(startPromise, function () {\n   controller._started = true;\n   WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }, function (r) {\n   controller._started = true;\n   WritableStreamDealWithRejection(stream, r);\n  });\n }\n function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n  var controller = Object.create(WritableStreamDefaultController.prototype);\n  var startAlgorithm = function () {\n   return undefined;\n  };\n  var writeAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  var closeAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  var abortAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  if (underlyingSink.start !== undefined) {\n   startAlgorithm = function () {\n    return underlyingSink.start(controller);\n   };\n  }\n  if (underlyingSink.write !== undefined) {\n   writeAlgorithm = function (chunk) {\n    return underlyingSink.write(chunk, controller);\n   };\n  }\n  if (underlyingSink.close !== undefined) {\n   closeAlgorithm = function () {\n    return underlyingSink.close();\n   };\n  }\n  if (underlyingSink.abort !== undefined) {\n   abortAlgorithm = function (reason) {\n    return underlyingSink.abort(reason);\n   };\n  }\n  SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n }\n function WritableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._writeAlgorithm = undefined;\n  controller._closeAlgorithm = undefined;\n  controller._abortAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n }\n function WritableStreamDefaultControllerClose(controller) {\n  EnqueueValueWithSize(controller, closeSentinel, 0);\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n }\n function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n  try {\n   return controller._strategySizeAlgorithm(chunk);\n  } catch (chunkSizeE) {\n   WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n   return 1;\n  }\n }\n function WritableStreamDefaultControllerGetDesiredSize(controller) {\n  return controller._strategyHWM - controller._queueTotalSize;\n }\n function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n  try {\n   EnqueueValueWithSize(controller, chunk, chunkSize);\n  } catch (enqueueE) {\n   WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n   return;\n  }\n  var stream = controller._controlledWritableStream;\n  if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n   var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n   WritableStreamUpdateBackpressure(stream, backpressure);\n  }\n  WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n }\n function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n  var stream = controller._controlledWritableStream;\n  if (!controller._started) {\n   return;\n  }\n  if (stream._inFlightWriteRequest !== undefined) {\n   return;\n  }\n  var state = stream._state;\n  if (state === 'erroring') {\n   WritableStreamFinishErroring(stream);\n   return;\n  }\n  if (controller._queue.length === 0) {\n   return;\n  }\n  var value = PeekQueueValue(controller);\n  if (value === closeSentinel) {\n   WritableStreamDefaultControllerProcessClose(controller);\n  } else {\n   WritableStreamDefaultControllerProcessWrite(controller, value);\n  }\n }\n function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n  if (controller._controlledWritableStream._state === 'writable') {\n   WritableStreamDefaultControllerError(controller, error);\n  }\n }\n function WritableStreamDefaultControllerProcessClose(controller) {\n  var stream = controller._controlledWritableStream;\n  WritableStreamMarkCloseRequestInFlight(stream);\n  DequeueValue(controller);\n  var sinkClosePromise = controller._closeAlgorithm();\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  uponPromise(sinkClosePromise, function () {\n   WritableStreamFinishInFlightClose(stream);\n  }, function (reason) {\n   WritableStreamFinishInFlightCloseWithError(stream, reason);\n  });\n }\n function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n  var stream = controller._controlledWritableStream;\n  WritableStreamMarkFirstWriteRequestInFlight(stream);\n  var sinkWritePromise = controller._writeAlgorithm(chunk);\n  uponPromise(sinkWritePromise, function () {\n   WritableStreamFinishInFlightWrite(stream);\n   var state = stream._state;\n   DequeueValue(controller);\n   if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n   }\n   WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }, function (reason) {\n   if (stream._state === 'writable') {\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n   }\n   WritableStreamFinishInFlightWriteWithError(stream, reason);\n  });\n }\n function WritableStreamDefaultControllerGetBackpressure(controller) {\n  var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n  return desiredSize <= 0;\n }\n function WritableStreamDefaultControllerError(controller, error) {\n  var stream = controller._controlledWritableStream;\n  WritableStreamDefaultControllerClearAlgorithms(controller);\n  WritableStreamStartErroring(stream, error);\n }\n function streamBrandCheckException(name) {\n  return new TypeError(\"WritableStream.prototype.\" + name + \" can only be used on a WritableStream\");\n }\n function defaultWriterBrandCheckException(name) {\n  return new TypeError(\"WritableStreamDefaultWriter.prototype.\" + name + \" can only be used on a WritableStreamDefaultWriter\");\n }\n function defaultWriterLockException(name) {\n  return new TypeError('Cannot ' + name + ' a stream using a released writer');\n }\n function defaultWriterClosedPromiseInitialize(writer) {\n  writer._closedPromise = newPromise(function (resolve, reject) {\n   writer._closedPromise_resolve = resolve;\n   writer._closedPromise_reject = reject;\n   writer._closedPromiseState = 'pending';\n  });\n }\n function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseReject(writer, reason);\n }\n function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n  defaultWriterClosedPromiseInitialize(writer);\n  defaultWriterClosedPromiseResolve(writer);\n }\n function defaultWriterClosedPromiseReject(writer, reason) {\n  if (writer._closedPromise_reject === undefined) {\n   return;\n  }\n  setPromiseIsHandledToTrue(writer._closedPromise);\n  writer._closedPromise_reject(reason);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'rejected';\n }\n function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n  defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n }\n function defaultWriterClosedPromiseResolve(writer) {\n  if (writer._closedPromise_resolve === undefined) {\n   return;\n  }\n  writer._closedPromise_resolve(undefined);\n  writer._closedPromise_resolve = undefined;\n  writer._closedPromise_reject = undefined;\n  writer._closedPromiseState = 'resolved';\n }\n function defaultWriterReadyPromiseInitialize(writer) {\n  writer._readyPromise = newPromise(function (resolve, reject) {\n   writer._readyPromise_resolve = resolve;\n   writer._readyPromise_reject = reject;\n  });\n  writer._readyPromiseState = 'pending';\n }\n function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseReject(writer, reason);\n }\n function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n  defaultWriterReadyPromiseInitialize(writer);\n  defaultWriterReadyPromiseResolve(writer);\n }\n function defaultWriterReadyPromiseReject(writer, reason) {\n  if (writer._readyPromise_reject === undefined) {\n   return;\n  }\n  setPromiseIsHandledToTrue(writer._readyPromise);\n  writer._readyPromise_reject(reason);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'rejected';\n }\n function defaultWriterReadyPromiseReset(writer) {\n  defaultWriterReadyPromiseInitialize(writer);\n }\n function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n  defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n }\n function defaultWriterReadyPromiseResolve(writer) {\n  if (writer._readyPromise_resolve === undefined) {\n   return;\n  }\n  writer._readyPromise_resolve(undefined);\n  writer._readyPromise_resolve = undefined;\n  writer._readyPromise_reject = undefined;\n  writer._readyPromiseState = 'fulfilled';\n }\n function isAbortSignal(value) {\n  if (typeof value !== 'object' || value === null) {\n   return false;\n  }\n  try {\n   return typeof value.aborted === 'boolean';\n  } catch (_a) {\n   return false;\n  }\n }\n var NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n function isDOMExceptionConstructor(ctor) {\n  if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n   return false;\n  }\n  try {\n   new ctor();\n   return true;\n  } catch (_a) {\n   return false;\n  }\n }\n function createDOMExceptionPolyfill() {\n  var ctor = function DOMException(message, name) {\n   this.message = message || '';\n   this.name = name || 'Error';\n   if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n   }\n  };\n  ctor.prototype = Object.create(Error.prototype);\n  Object.defineProperty(ctor.prototype, 'constructor', {\n   value: ctor,\n   writable: true,\n   configurable: true\n  });\n  return ctor;\n }\n var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n  var reader = AcquireReadableStreamDefaultReader(source);\n  var writer = AcquireWritableStreamDefaultWriter(dest);\n  source._disturbed = true;\n  var shuttingDown = false;\n  var currentWrite = promiseResolvedWith(undefined);\n  return newPromise(function (resolve, reject) {\n   var abortAlgorithm;\n   if (signal !== undefined) {\n    abortAlgorithm = function () {\n     var error = new DOMException$1('Aborted', 'AbortError');\n     var actions = [];\n     if (!preventAbort) {\n      actions.push(function () {\n       if (dest._state === 'writable') {\n        return WritableStreamAbort(dest, error);\n       }\n       return promiseResolvedWith(undefined);\n      });\n     }\n     if (!preventCancel) {\n      actions.push(function () {\n       if (source._state === 'readable') {\n        return ReadableStreamCancel(source, error);\n       }\n       return promiseResolvedWith(undefined);\n      });\n     }\n     shutdownWithAction(function () {\n      return Promise.all(actions.map(function (action) {\n       return action();\n      }));\n     }, true, error);\n    };\n    if (signal.aborted) {\n     abortAlgorithm();\n     return;\n    }\n    signal.addEventListener('abort', abortAlgorithm);\n   }\n   function pipeLoop() {\n    return newPromise(function (resolveLoop, rejectLoop) {\n     function next(done) {\n      if (done) {\n       resolveLoop();\n      } else {\n       PerformPromiseThen(pipeStep(), next, rejectLoop);\n      }\n     }\n     next(false);\n    });\n   }\n   function pipeStep() {\n    if (shuttingDown) {\n     return promiseResolvedWith(true);\n    }\n    return PerformPromiseThen(writer._readyPromise, function () {\n     return newPromise(function (resolveRead, rejectRead) {\n      ReadableStreamDefaultReaderRead(reader, {\n       _chunkSteps: function (chunk) {\n        currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n        resolveRead(false);\n       },\n       _closeSteps: function () {\n        return resolveRead(true);\n       },\n       _errorSteps: rejectRead\n      });\n     });\n    });\n   }\n   isOrBecomesErrored(source, reader._closedPromise, function (storedError) {\n    if (!preventAbort) {\n     shutdownWithAction(function () {\n      return WritableStreamAbort(dest, storedError);\n     }, true, storedError);\n    } else {\n     shutdown(true, storedError);\n    }\n   });\n   isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {\n    if (!preventCancel) {\n     shutdownWithAction(function () {\n      return ReadableStreamCancel(source, storedError);\n     }, true, storedError);\n    } else {\n     shutdown(true, storedError);\n    }\n   });\n   isOrBecomesClosed(source, reader._closedPromise, function () {\n    if (!preventClose) {\n     shutdownWithAction(function () {\n      return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);\n     });\n    } else {\n     shutdown();\n    }\n   });\n   if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n    var destClosed_1 = new TypeError('the destination writable stream closed before all data could be piped to it');\n    if (!preventCancel) {\n     shutdownWithAction(function () {\n      return ReadableStreamCancel(source, destClosed_1);\n     }, true, destClosed_1);\n    } else {\n     shutdown(true, destClosed_1);\n    }\n   }\n   setPromiseIsHandledToTrue(pipeLoop());\n   function waitForWritesToFinish() {\n    var oldCurrentWrite = currentWrite;\n    return PerformPromiseThen(currentWrite, function () {\n     return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;\n    });\n   }\n   function isOrBecomesErrored(stream, promise, action) {\n    if (stream._state === 'errored') {\n     action(stream._storedError);\n    } else {\n     uponRejection(promise, action);\n    }\n   }\n   function isOrBecomesClosed(stream, promise, action) {\n    if (stream._state === 'closed') {\n     action();\n    } else {\n     uponFulfillment(promise, action);\n    }\n   }\n   function shutdownWithAction(action, originalIsError, originalError) {\n    if (shuttingDown) {\n     return;\n    }\n    shuttingDown = true;\n    if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n     uponFulfillment(waitForWritesToFinish(), doTheRest);\n    } else {\n     doTheRest();\n    }\n    function doTheRest() {\n     uponPromise(action(), function () {\n      return finalize(originalIsError, originalError);\n     }, function (newError) {\n      return finalize(true, newError);\n     });\n    }\n   }\n   function shutdown(isError, error) {\n    if (shuttingDown) {\n     return;\n    }\n    shuttingDown = true;\n    if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n     uponFulfillment(waitForWritesToFinish(), function () {\n      return finalize(isError, error);\n     });\n    } else {\n     finalize(isError, error);\n    }\n   }\n   function finalize(isError, error) {\n    WritableStreamDefaultWriterRelease(writer);\n    ReadableStreamReaderGenericRelease(reader);\n    if (signal !== undefined) {\n     signal.removeEventListener('abort', abortAlgorithm);\n    }\n    if (isError) {\n     reject(error);\n    } else {\n     resolve(undefined);\n    }\n   }\n  });\n }\n var ReadableStreamDefaultController = function () {\n  function ReadableStreamDefaultController() {\n   throw new TypeError('Illegal constructor');\n  }\n  Object.defineProperty(ReadableStreamDefaultController.prototype, \"desiredSize\", {\n   get: function () {\n    if (!IsReadableStreamDefaultController(this)) {\n     throw defaultControllerBrandCheckException('desiredSize');\n    }\n    return ReadableStreamDefaultControllerGetDesiredSize(this);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableStreamDefaultController.prototype.close = function () {\n   if (!IsReadableStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException('close');\n   }\n   if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n    throw new TypeError('The stream is not in a state that permits close');\n   }\n   ReadableStreamDefaultControllerClose(this);\n  };\n  ReadableStreamDefaultController.prototype.enqueue = function (chunk) {\n   if (chunk === void 0) {\n    chunk = undefined;\n   }\n   if (!IsReadableStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException('enqueue');\n   }\n   if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n    throw new TypeError('The stream is not in a state that permits enqueue');\n   }\n   return ReadableStreamDefaultControllerEnqueue(this, chunk);\n  };\n  ReadableStreamDefaultController.prototype.error = function (e) {\n   if (e === void 0) {\n    e = undefined;\n   }\n   if (!IsReadableStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException('error');\n   }\n   ReadableStreamDefaultControllerError(this, e);\n  };\n  ReadableStreamDefaultController.prototype[CancelSteps] = function (reason) {\n   ResetQueue(this);\n   var result = this._cancelAlgorithm(reason);\n   ReadableStreamDefaultControllerClearAlgorithms(this);\n   return result;\n  };\n  ReadableStreamDefaultController.prototype[PullSteps] = function (readRequest) {\n   var stream = this._controlledReadableStream;\n   if (this._queue.length > 0) {\n    var chunk = DequeueValue(this);\n    if (this._closeRequested && this._queue.length === 0) {\n     ReadableStreamDefaultControllerClearAlgorithms(this);\n     ReadableStreamClose(stream);\n    } else {\n     ReadableStreamDefaultControllerCallPullIfNeeded(this);\n    }\n    readRequest._chunkSteps(chunk);\n   } else {\n    ReadableStreamAddReadRequest(stream, readRequest);\n    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n   }\n  };\n  return ReadableStreamDefaultController;\n }();\n Object.defineProperties(ReadableStreamDefaultController.prototype, {\n  close: { enumerable: true },\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  desiredSize: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableStreamDefaultController',\n   configurable: true\n  });\n }\n function IsReadableStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n   return false;\n  }\n  return true;\n }\n function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n  var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n  if (!shouldPull) {\n   return;\n  }\n  if (controller._pulling) {\n   controller._pullAgain = true;\n   return;\n  }\n  controller._pulling = true;\n  var pullPromise = controller._pullAlgorithm();\n  uponPromise(pullPromise, function () {\n   controller._pulling = false;\n   if (controller._pullAgain) {\n    controller._pullAgain = false;\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n   }\n  }, function (e) {\n   ReadableStreamDefaultControllerError(controller, e);\n  });\n }\n function ReadableStreamDefaultControllerShouldCallPull(controller) {\n  var stream = controller._controlledReadableStream;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n   return false;\n  }\n  if (!controller._started) {\n   return false;\n  }\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n   return true;\n  }\n  var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n  if (desiredSize > 0) {\n   return true;\n  }\n  return false;\n }\n function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n  controller._pullAlgorithm = undefined;\n  controller._cancelAlgorithm = undefined;\n  controller._strategySizeAlgorithm = undefined;\n }\n function ReadableStreamDefaultControllerClose(controller) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n   return;\n  }\n  var stream = controller._controlledReadableStream;\n  controller._closeRequested = true;\n  if (controller._queue.length === 0) {\n   ReadableStreamDefaultControllerClearAlgorithms(controller);\n   ReadableStreamClose(stream);\n  }\n }\n function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n   return;\n  }\n  var stream = controller._controlledReadableStream;\n  if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n   ReadableStreamFulfillReadRequest(stream, chunk, false);\n  } else {\n   var chunkSize = void 0;\n   try {\n    chunkSize = controller._strategySizeAlgorithm(chunk);\n   } catch (chunkSizeE) {\n    ReadableStreamDefaultControllerError(controller, chunkSizeE);\n    throw chunkSizeE;\n   }\n   try {\n    EnqueueValueWithSize(controller, chunk, chunkSize);\n   } catch (enqueueE) {\n    ReadableStreamDefaultControllerError(controller, enqueueE);\n    throw enqueueE;\n   }\n  }\n  ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n }\n function ReadableStreamDefaultControllerError(controller, e) {\n  var stream = controller._controlledReadableStream;\n  if (stream._state !== 'readable') {\n   return;\n  }\n  ResetQueue(controller);\n  ReadableStreamDefaultControllerClearAlgorithms(controller);\n  ReadableStreamError(stream, e);\n }\n function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n  var state = controller._controlledReadableStream._state;\n  if (state === 'errored') {\n   return null;\n  }\n  if (state === 'closed') {\n   return 0;\n  }\n  return controller._strategyHWM - controller._queueTotalSize;\n }\n function ReadableStreamDefaultControllerHasBackpressure(controller) {\n  if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n   return false;\n  }\n  return true;\n }\n function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n  var state = controller._controlledReadableStream._state;\n  if (!controller._closeRequested && state === 'readable') {\n   return true;\n  }\n  return false;\n }\n function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n  controller._controlledReadableStream = stream;\n  controller._queue = undefined;\n  controller._queueTotalSize = undefined;\n  ResetQueue(controller);\n  controller._started = false;\n  controller._closeRequested = false;\n  controller._pullAgain = false;\n  controller._pulling = false;\n  controller._strategySizeAlgorithm = sizeAlgorithm;\n  controller._strategyHWM = highWaterMark;\n  controller._pullAlgorithm = pullAlgorithm;\n  controller._cancelAlgorithm = cancelAlgorithm;\n  stream._readableStreamController = controller;\n  var startResult = startAlgorithm();\n  uponPromise(promiseResolvedWith(startResult), function () {\n   controller._started = true;\n   ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }, function (r) {\n   ReadableStreamDefaultControllerError(controller, r);\n  });\n }\n function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n  var controller = Object.create(ReadableStreamDefaultController.prototype);\n  var startAlgorithm = function () {\n   return undefined;\n  };\n  var pullAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  var cancelAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  if (underlyingSource.start !== undefined) {\n   startAlgorithm = function () {\n    return underlyingSource.start(controller);\n   };\n  }\n  if (underlyingSource.pull !== undefined) {\n   pullAlgorithm = function () {\n    return underlyingSource.pull(controller);\n   };\n  }\n  if (underlyingSource.cancel !== undefined) {\n   cancelAlgorithm = function (reason) {\n    return underlyingSource.cancel(reason);\n   };\n  }\n  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n }\n function defaultControllerBrandCheckException(name) {\n  return new TypeError(\"ReadableStreamDefaultController.prototype.\" + name + \" can only be used on a ReadableStreamDefaultController\");\n }\n function ReadableStreamTee(stream, cloneForBranch2) {\n  var reader = AcquireReadableStreamDefaultReader(stream);\n  var reading = false;\n  var canceled1 = false;\n  var canceled2 = false;\n  var reason1;\n  var reason2;\n  var branch1;\n  var branch2;\n  var resolveCancelPromise;\n  var cancelPromise = newPromise(function (resolve) {\n   resolveCancelPromise = resolve;\n  });\n  function pullAlgorithm() {\n   if (reading) {\n    return promiseResolvedWith(undefined);\n   }\n   reading = true;\n   var readRequest = {\n    _chunkSteps: function (value) {\n     queueMicrotask(function () {\n      reading = false;\n      var value1 = value;\n      var value2 = value;\n      if (!canceled1) {\n       ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, value1);\n      }\n      if (!canceled2) {\n       ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, value2);\n      }\n      resolveCancelPromise(undefined);\n     });\n    },\n    _closeSteps: function () {\n     reading = false;\n     if (!canceled1) {\n      ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n     }\n     if (!canceled2) {\n      ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n     }\n    },\n    _errorSteps: function () {\n     reading = false;\n    }\n   };\n   ReadableStreamDefaultReaderRead(reader, readRequest);\n   return promiseResolvedWith(undefined);\n  }\n  function cancel1Algorithm(reason) {\n   canceled1 = true;\n   reason1 = reason;\n   if (canceled2) {\n    var compositeReason = CreateArrayFromList([\n     reason1,\n     reason2\n    ]);\n    var cancelResult = ReadableStreamCancel(stream, compositeReason);\n    resolveCancelPromise(cancelResult);\n   }\n   return cancelPromise;\n  }\n  function cancel2Algorithm(reason) {\n   canceled2 = true;\n   reason2 = reason;\n   if (canceled1) {\n    var compositeReason = CreateArrayFromList([\n     reason1,\n     reason2\n    ]);\n    var cancelResult = ReadableStreamCancel(stream, compositeReason);\n    resolveCancelPromise(cancelResult);\n   }\n   return cancelPromise;\n  }\n  function startAlgorithm() {\n  }\n  branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n  branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n  uponRejection(reader._closedPromise, function (r) {\n   ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n   ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n   resolveCancelPromise(undefined);\n  });\n  return [\n   branch1,\n   branch2\n  ];\n }\n function convertUnderlyingDefaultOrByteSource(source, context) {\n  assertDictionary(source, context);\n  var original = source;\n  var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n  var cancel = original === null || original === void 0 ? void 0 : original.cancel;\n  var pull = original === null || original === void 0 ? void 0 : original.pull;\n  var start = original === null || original === void 0 ? void 0 : original.start;\n  var type = original === null || original === void 0 ? void 0 : original.type;\n  return {\n   autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + \" has member 'autoAllocateChunkSize' that\"),\n   cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, context + \" has member 'cancel' that\"),\n   pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, context + \" has member 'pull' that\"),\n   start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, context + \" has member 'start' that\"),\n   type: type === undefined ? undefined : convertReadableStreamType(type, context + \" has member 'type' that\")\n  };\n }\n function convertUnderlyingSourceCancelCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (reason) {\n   return promiseCall(fn, original, [reason]);\n  };\n }\n function convertUnderlyingSourcePullCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (controller) {\n   return promiseCall(fn, original, [controller]);\n  };\n }\n function convertUnderlyingSourceStartCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (controller) {\n   return reflectCall(fn, original, [controller]);\n  };\n }\n function convertReadableStreamType(type, context) {\n  type = \"\" + type;\n  if (type !== 'bytes') {\n   throw new TypeError(context + \" '\" + type + \"' is not a valid enumeration value for ReadableStreamType\");\n  }\n  return type;\n }\n function convertReaderOptions(options, context) {\n  assertDictionary(options, context);\n  var mode = options === null || options === void 0 ? void 0 : options.mode;\n  return { mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, context + \" has member 'mode' that\") };\n }\n function convertReadableStreamReaderMode(mode, context) {\n  mode = \"\" + mode;\n  if (mode !== 'byob') {\n   throw new TypeError(context + \" '\" + mode + \"' is not a valid enumeration value for ReadableStreamReaderMode\");\n  }\n  return mode;\n }\n function convertIteratorOptions(options, context) {\n  assertDictionary(options, context);\n  var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n  return { preventCancel: Boolean(preventCancel) };\n }\n function convertPipeOptions(options, context) {\n  assertDictionary(options, context);\n  var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n  var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n  var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n  var signal = options === null || options === void 0 ? void 0 : options.signal;\n  if (signal !== undefined) {\n   assertAbortSignal(signal, context + \" has member 'signal' that\");\n  }\n  return {\n   preventAbort: Boolean(preventAbort),\n   preventCancel: Boolean(preventCancel),\n   preventClose: Boolean(preventClose),\n   signal: signal\n  };\n }\n function assertAbortSignal(signal, context) {\n  if (!isAbortSignal(signal)) {\n   throw new TypeError(context + \" is not an AbortSignal.\");\n  }\n }\n function convertReadableWritablePair(pair, context) {\n  assertDictionary(pair, context);\n  var readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n  assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n  assertReadableStream(readable, context + \" has member 'readable' that\");\n  var writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n  assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n  assertWritableStream(writable, context + \" has member 'writable' that\");\n  return {\n   readable: readable,\n   writable: writable\n  };\n }\n var ReadableStream = function () {\n  function ReadableStream(rawUnderlyingSource, rawStrategy) {\n   if (rawUnderlyingSource === void 0) {\n    rawUnderlyingSource = {};\n   }\n   if (rawStrategy === void 0) {\n    rawStrategy = {};\n   }\n   if (rawUnderlyingSource === undefined) {\n    rawUnderlyingSource = null;\n   } else {\n    assertObject(rawUnderlyingSource, 'First parameter');\n   }\n   var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n   var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n   InitializeReadableStream(this);\n   if (underlyingSource.type === 'bytes') {\n    if (strategy.size !== undefined) {\n     throw new RangeError('The strategy for a byte stream cannot have a size function');\n    }\n    var highWaterMark = ExtractHighWaterMark(strategy, 0);\n    SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n   } else {\n    var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n    var highWaterMark = ExtractHighWaterMark(strategy, 1);\n    SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n   }\n  }\n  Object.defineProperty(ReadableStream.prototype, \"locked\", {\n   get: function () {\n    if (!IsReadableStream(this)) {\n     throw streamBrandCheckException$1('locked');\n    }\n    return IsReadableStreamLocked(this);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  ReadableStream.prototype.cancel = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsReadableStream(this)) {\n    return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n   }\n   if (IsReadableStreamLocked(this)) {\n    return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n   }\n   return ReadableStreamCancel(this, reason);\n  };\n  ReadableStream.prototype.getReader = function (rawOptions) {\n   if (rawOptions === void 0) {\n    rawOptions = undefined;\n   }\n   if (!IsReadableStream(this)) {\n    throw streamBrandCheckException$1('getReader');\n   }\n   var options = convertReaderOptions(rawOptions, 'First parameter');\n   if (options.mode === undefined) {\n    return AcquireReadableStreamDefaultReader(this);\n   }\n   return AcquireReadableStreamBYOBReader(this);\n  };\n  ReadableStream.prototype.pipeThrough = function (rawTransform, rawOptions) {\n   if (rawOptions === void 0) {\n    rawOptions = {};\n   }\n   if (!IsReadableStream(this)) {\n    throw streamBrandCheckException$1('pipeThrough');\n   }\n   assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n   var transform = convertReadableWritablePair(rawTransform, 'First parameter');\n   var options = convertPipeOptions(rawOptions, 'Second parameter');\n   if (IsReadableStreamLocked(this)) {\n    throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n   }\n   if (IsWritableStreamLocked(transform.writable)) {\n    throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n   }\n   var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n   setPromiseIsHandledToTrue(promise);\n   return transform.readable;\n  };\n  ReadableStream.prototype.pipeTo = function (destination, rawOptions) {\n   if (rawOptions === void 0) {\n    rawOptions = {};\n   }\n   if (!IsReadableStream(this)) {\n    return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n   }\n   if (destination === undefined) {\n    return promiseRejectedWith(\"Parameter 1 is required in 'pipeTo'.\");\n   }\n   if (!IsWritableStream(destination)) {\n    return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n   }\n   var options;\n   try {\n    options = convertPipeOptions(rawOptions, 'Second parameter');\n   } catch (e) {\n    return promiseRejectedWith(e);\n   }\n   if (IsReadableStreamLocked(this)) {\n    return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n   }\n   if (IsWritableStreamLocked(destination)) {\n    return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n   }\n   return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n  };\n  ReadableStream.prototype.tee = function () {\n   if (!IsReadableStream(this)) {\n    throw streamBrandCheckException$1('tee');\n   }\n   var branches = ReadableStreamTee(this);\n   return CreateArrayFromList(branches);\n  };\n  ReadableStream.prototype.values = function (rawOptions) {\n   if (rawOptions === void 0) {\n    rawOptions = undefined;\n   }\n   if (!IsReadableStream(this)) {\n    throw streamBrandCheckException$1('values');\n   }\n   var options = convertIteratorOptions(rawOptions, 'First parameter');\n   return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n  };\n  return ReadableStream;\n }();\n Object.defineProperties(ReadableStream.prototype, {\n  cancel: { enumerable: true },\n  getReader: { enumerable: true },\n  pipeThrough: { enumerable: true },\n  pipeTo: { enumerable: true },\n  tee: { enumerable: true },\n  values: { enumerable: true },\n  locked: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ReadableStream',\n   configurable: true\n  });\n }\n if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n  Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n   value: ReadableStream.prototype.values,\n   writable: true,\n   configurable: true\n  });\n }\n function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n  if (highWaterMark === void 0) {\n   highWaterMark = 1;\n  }\n  if (sizeAlgorithm === void 0) {\n   sizeAlgorithm = function () {\n    return 1;\n   };\n  }\n  var stream = Object.create(ReadableStream.prototype);\n  InitializeReadableStream(stream);\n  var controller = Object.create(ReadableStreamDefaultController.prototype);\n  SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  return stream;\n }\n function InitializeReadableStream(stream) {\n  stream._state = 'readable';\n  stream._reader = undefined;\n  stream._storedError = undefined;\n  stream._disturbed = false;\n }\n function IsReadableStream(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n   return false;\n  }\n  return true;\n }\n function IsReadableStreamLocked(stream) {\n  if (stream._reader === undefined) {\n   return false;\n  }\n  return true;\n }\n function ReadableStreamCancel(stream, reason) {\n  stream._disturbed = true;\n  if (stream._state === 'closed') {\n   return promiseResolvedWith(undefined);\n  }\n  if (stream._state === 'errored') {\n   return promiseRejectedWith(stream._storedError);\n  }\n  ReadableStreamClose(stream);\n  var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n  return transformPromiseWith(sourceCancelPromise, noop);\n }\n function ReadableStreamClose(stream) {\n  stream._state = 'closed';\n  var reader = stream._reader;\n  if (reader === undefined) {\n   return;\n  }\n  defaultReaderClosedPromiseResolve(reader);\n  if (IsReadableStreamDefaultReader(reader)) {\n   reader._readRequests.forEach(function (readRequest) {\n    readRequest._closeSteps();\n   });\n   reader._readRequests = new SimpleQueue();\n  }\n }\n function ReadableStreamError(stream, e) {\n  stream._state = 'errored';\n  stream._storedError = e;\n  var reader = stream._reader;\n  if (reader === undefined) {\n   return;\n  }\n  defaultReaderClosedPromiseReject(reader, e);\n  if (IsReadableStreamDefaultReader(reader)) {\n   reader._readRequests.forEach(function (readRequest) {\n    readRequest._errorSteps(e);\n   });\n   reader._readRequests = new SimpleQueue();\n  } else {\n   reader._readIntoRequests.forEach(function (readIntoRequest) {\n    readIntoRequest._errorSteps(e);\n   });\n   reader._readIntoRequests = new SimpleQueue();\n  }\n }\n function streamBrandCheckException$1(name) {\n  return new TypeError(\"ReadableStream.prototype.\" + name + \" can only be used on a ReadableStream\");\n }\n function convertQueuingStrategyInit(init, context) {\n  assertDictionary(init, context);\n  var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n  assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n  return { highWaterMark: convertUnrestrictedDouble(highWaterMark) };\n }\n var byteLengthSizeFunction = function size(chunk) {\n  return chunk.byteLength;\n };\n var ByteLengthQueuingStrategy = function () {\n  function ByteLengthQueuingStrategy(options) {\n   assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n   options = convertQueuingStrategyInit(options, 'First parameter');\n   this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"highWaterMark\", {\n   get: function () {\n    if (!IsByteLengthQueuingStrategy(this)) {\n     throw byteLengthBrandCheckException('highWaterMark');\n    }\n    return this._byteLengthQueuingStrategyHighWaterMark;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, \"size\", {\n   get: function () {\n    if (!IsByteLengthQueuingStrategy(this)) {\n     throw byteLengthBrandCheckException('size');\n    }\n    return byteLengthSizeFunction;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  return ByteLengthQueuingStrategy;\n }();\n Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n   value: 'ByteLengthQueuingStrategy',\n   configurable: true\n  });\n }\n function byteLengthBrandCheckException(name) {\n  return new TypeError(\"ByteLengthQueuingStrategy.prototype.\" + name + \" can only be used on a ByteLengthQueuingStrategy\");\n }\n function IsByteLengthQueuingStrategy(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n   return false;\n  }\n  return true;\n }\n var countSizeFunction = function size() {\n  return 1;\n };\n var CountQueuingStrategy = function () {\n  function CountQueuingStrategy(options) {\n   assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n   options = convertQueuingStrategyInit(options, 'First parameter');\n   this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n  }\n  Object.defineProperty(CountQueuingStrategy.prototype, \"highWaterMark\", {\n   get: function () {\n    if (!IsCountQueuingStrategy(this)) {\n     throw countBrandCheckException('highWaterMark');\n    }\n    return this._countQueuingStrategyHighWaterMark;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(CountQueuingStrategy.prototype, \"size\", {\n   get: function () {\n    if (!IsCountQueuingStrategy(this)) {\n     throw countBrandCheckException('size');\n    }\n    return countSizeFunction;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  return CountQueuingStrategy;\n }();\n Object.defineProperties(CountQueuingStrategy.prototype, {\n  highWaterMark: { enumerable: true },\n  size: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n   value: 'CountQueuingStrategy',\n   configurable: true\n  });\n }\n function countBrandCheckException(name) {\n  return new TypeError(\"CountQueuingStrategy.prototype.\" + name + \" can only be used on a CountQueuingStrategy\");\n }\n function IsCountQueuingStrategy(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n   return false;\n  }\n  return true;\n }\n function convertTransformer(original, context) {\n  assertDictionary(original, context);\n  var flush = original === null || original === void 0 ? void 0 : original.flush;\n  var readableType = original === null || original === void 0 ? void 0 : original.readableType;\n  var start = original === null || original === void 0 ? void 0 : original.start;\n  var transform = original === null || original === void 0 ? void 0 : original.transform;\n  var writableType = original === null || original === void 0 ? void 0 : original.writableType;\n  return {\n   flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, context + \" has member 'flush' that\"),\n   readableType: readableType,\n   start: start === undefined ? undefined : convertTransformerStartCallback(start, original, context + \" has member 'start' that\"),\n   transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, context + \" has member 'transform' that\"),\n   writableType: writableType\n  };\n }\n function convertTransformerFlushCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (controller) {\n   return promiseCall(fn, original, [controller]);\n  };\n }\n function convertTransformerStartCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (controller) {\n   return reflectCall(fn, original, [controller]);\n  };\n }\n function convertTransformerTransformCallback(fn, original, context) {\n  assertFunction(fn, context);\n  return function (chunk, controller) {\n   return promiseCall(fn, original, [\n    chunk,\n    controller\n   ]);\n  };\n }\n var TransformStream = function () {\n  function TransformStream(rawTransformer, rawWritableStrategy, rawReadableStrategy) {\n   if (rawTransformer === void 0) {\n    rawTransformer = {};\n   }\n   if (rawWritableStrategy === void 0) {\n    rawWritableStrategy = {};\n   }\n   if (rawReadableStrategy === void 0) {\n    rawReadableStrategy = {};\n   }\n   if (rawTransformer === undefined) {\n    rawTransformer = null;\n   }\n   var writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n   var readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n   var transformer = convertTransformer(rawTransformer, 'First parameter');\n   if (transformer.readableType !== undefined) {\n    throw new RangeError('Invalid readableType specified');\n   }\n   if (transformer.writableType !== undefined) {\n    throw new RangeError('Invalid writableType specified');\n   }\n   var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n   var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n   var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n   var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n   var startPromise_resolve;\n   var startPromise = newPromise(function (resolve) {\n    startPromise_resolve = resolve;\n   });\n   InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n   SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n   if (transformer.start !== undefined) {\n    startPromise_resolve(transformer.start(this._transformStreamController));\n   } else {\n    startPromise_resolve(undefined);\n   }\n  }\n  Object.defineProperty(TransformStream.prototype, \"readable\", {\n   get: function () {\n    if (!IsTransformStream(this)) {\n     throw streamBrandCheckException$2('readable');\n    }\n    return this._readable;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  Object.defineProperty(TransformStream.prototype, \"writable\", {\n   get: function () {\n    if (!IsTransformStream(this)) {\n     throw streamBrandCheckException$2('writable');\n    }\n    return this._writable;\n   },\n   enumerable: false,\n   configurable: true\n  });\n  return TransformStream;\n }();\n Object.defineProperties(TransformStream.prototype, {\n  readable: { enumerable: true },\n  writable: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n   value: 'TransformStream',\n   configurable: true\n  });\n }\n function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n  function startAlgorithm() {\n   return startPromise;\n  }\n  function writeAlgorithm(chunk) {\n   return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n  }\n  function abortAlgorithm(reason) {\n   return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n  }\n  function closeAlgorithm() {\n   return TransformStreamDefaultSinkCloseAlgorithm(stream);\n  }\n  stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n  function pullAlgorithm() {\n   return TransformStreamDefaultSourcePullAlgorithm(stream);\n  }\n  function cancelAlgorithm(reason) {\n   TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n   return promiseResolvedWith(undefined);\n  }\n  stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n  stream._backpressure = undefined;\n  stream._backpressureChangePromise = undefined;\n  stream._backpressureChangePromise_resolve = undefined;\n  TransformStreamSetBackpressure(stream, true);\n  stream._transformStreamController = undefined;\n }\n function IsTransformStream(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n   return false;\n  }\n  return true;\n }\n function TransformStreamError(stream, e) {\n  ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n  TransformStreamErrorWritableAndUnblockWrite(stream, e);\n }\n function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n  TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n  WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n  if (stream._backpressure) {\n   TransformStreamSetBackpressure(stream, false);\n  }\n }\n function TransformStreamSetBackpressure(stream, backpressure) {\n  if (stream._backpressureChangePromise !== undefined) {\n   stream._backpressureChangePromise_resolve();\n  }\n  stream._backpressureChangePromise = newPromise(function (resolve) {\n   stream._backpressureChangePromise_resolve = resolve;\n  });\n  stream._backpressure = backpressure;\n }\n var TransformStreamDefaultController = function () {\n  function TransformStreamDefaultController() {\n   throw new TypeError('Illegal constructor');\n  }\n  Object.defineProperty(TransformStreamDefaultController.prototype, \"desiredSize\", {\n   get: function () {\n    if (!IsTransformStreamDefaultController(this)) {\n     throw defaultControllerBrandCheckException$1('desiredSize');\n    }\n    var readableController = this._controlledTransformStream._readable._readableStreamController;\n    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n   },\n   enumerable: false,\n   configurable: true\n  });\n  TransformStreamDefaultController.prototype.enqueue = function (chunk) {\n   if (chunk === void 0) {\n    chunk = undefined;\n   }\n   if (!IsTransformStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException$1('enqueue');\n   }\n   TransformStreamDefaultControllerEnqueue(this, chunk);\n  };\n  TransformStreamDefaultController.prototype.error = function (reason) {\n   if (reason === void 0) {\n    reason = undefined;\n   }\n   if (!IsTransformStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException$1('error');\n   }\n   TransformStreamDefaultControllerError(this, reason);\n  };\n  TransformStreamDefaultController.prototype.terminate = function () {\n   if (!IsTransformStreamDefaultController(this)) {\n    throw defaultControllerBrandCheckException$1('terminate');\n   }\n   TransformStreamDefaultControllerTerminate(this);\n  };\n  return TransformStreamDefaultController;\n }();\n Object.defineProperties(TransformStreamDefaultController.prototype, {\n  enqueue: { enumerable: true },\n  error: { enumerable: true },\n  terminate: { enumerable: true },\n  desiredSize: { enumerable: true }\n });\n if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n  Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n   value: 'TransformStreamDefaultController',\n   configurable: true\n  });\n }\n function IsTransformStreamDefaultController(x) {\n  if (!typeIsObject(x)) {\n   return false;\n  }\n  if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n   return false;\n  }\n  return true;\n }\n function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n  controller._controlledTransformStream = stream;\n  stream._transformStreamController = controller;\n  controller._transformAlgorithm = transformAlgorithm;\n  controller._flushAlgorithm = flushAlgorithm;\n }\n function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n  var controller = Object.create(TransformStreamDefaultController.prototype);\n  var transformAlgorithm = function (chunk) {\n   try {\n    TransformStreamDefaultControllerEnqueue(controller, chunk);\n    return promiseResolvedWith(undefined);\n   } catch (transformResultE) {\n    return promiseRejectedWith(transformResultE);\n   }\n  };\n  var flushAlgorithm = function () {\n   return promiseResolvedWith(undefined);\n  };\n  if (transformer.transform !== undefined) {\n   transformAlgorithm = function (chunk) {\n    return transformer.transform(chunk, controller);\n   };\n  }\n  if (transformer.flush !== undefined) {\n   flushAlgorithm = function () {\n    return transformer.flush(controller);\n   };\n  }\n  SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n }\n function TransformStreamDefaultControllerClearAlgorithms(controller) {\n  controller._transformAlgorithm = undefined;\n  controller._flushAlgorithm = undefined;\n }\n function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n  var stream = controller._controlledTransformStream;\n  var readableController = stream._readable._readableStreamController;\n  if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n   throw new TypeError('Readable side is not in a state that permits enqueue');\n  }\n  try {\n   ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n  } catch (e) {\n   TransformStreamErrorWritableAndUnblockWrite(stream, e);\n   throw stream._readable._storedError;\n  }\n  var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n  if (backpressure !== stream._backpressure) {\n   TransformStreamSetBackpressure(stream, true);\n  }\n }\n function TransformStreamDefaultControllerError(controller, e) {\n  TransformStreamError(controller._controlledTransformStream, e);\n }\n function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n  var transformPromise = controller._transformAlgorithm(chunk);\n  return transformPromiseWith(transformPromise, undefined, function (r) {\n   TransformStreamError(controller._controlledTransformStream, r);\n   throw r;\n  });\n }\n function TransformStreamDefaultControllerTerminate(controller) {\n  var stream = controller._controlledTransformStream;\n  var readableController = stream._readable._readableStreamController;\n  ReadableStreamDefaultControllerClose(readableController);\n  var error = new TypeError('TransformStream terminated');\n  TransformStreamErrorWritableAndUnblockWrite(stream, error);\n }\n function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n  var controller = stream._transformStreamController;\n  if (stream._backpressure) {\n   var backpressureChangePromise = stream._backpressureChangePromise;\n   return transformPromiseWith(backpressureChangePromise, function () {\n    var writable = stream._writable;\n    var state = writable._state;\n    if (state === 'erroring') {\n     throw writable._storedError;\n    }\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n   });\n  }\n  return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n }\n function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n  TransformStreamError(stream, reason);\n  return promiseResolvedWith(undefined);\n }\n function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n  var readable = stream._readable;\n  var controller = stream._transformStreamController;\n  var flushPromise = controller._flushAlgorithm();\n  TransformStreamDefaultControllerClearAlgorithms(controller);\n  return transformPromiseWith(flushPromise, function () {\n   if (readable._state === 'errored') {\n    throw readable._storedError;\n   }\n   ReadableStreamDefaultControllerClose(readable._readableStreamController);\n  }, function (r) {\n   TransformStreamError(stream, r);\n   throw readable._storedError;\n  });\n }\n function TransformStreamDefaultSourcePullAlgorithm(stream) {\n  TransformStreamSetBackpressure(stream, false);\n  return stream._backpressureChangePromise;\n }\n function defaultControllerBrandCheckException$1(name) {\n  return new TypeError(\"TransformStreamDefaultController.prototype.\" + name + \" can only be used on a TransformStreamDefaultController\");\n }\n function streamBrandCheckException$2(name) {\n  return new TypeError(\"TransformStream.prototype.\" + name + \" can only be used on a TransformStream\");\n }\n exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n exports.CountQueuingStrategy = CountQueuingStrategy;\n exports.ReadableByteStreamController = ReadableByteStreamController;\n exports.ReadableStream = ReadableStream;\n exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n exports.TransformStream = TransformStream;\n exports.TransformStreamDefaultController = TransformStreamDefaultController;\n exports.WritableStream = WritableStream;\n exports.WritableStreamDefaultController = WritableStreamDefaultController;\n exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n Object.defineProperty(exports, '__esModule', { value: true });\n}));\n\n/***/ }),\n/* 122 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(123);\nvar entryUnbind = __w_pdfjs_require__(127);\nmodule.exports = entryUnbind('String', 'padStart');\n\n/***/ }),\n/* 123 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar $padStart = __w_pdfjs_require__(124).start;\nvar WEBKIT_BUG = __w_pdfjs_require__(126);\n$({\n target: 'String',\n proto: true,\n forced: WEBKIT_BUG\n}, {\n padStart: function padStart(maxLength) {\n  return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\n }\n});\n\n/***/ }),\n/* 124 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar toLength = __w_pdfjs_require__(46);\nvar repeat = __w_pdfjs_require__(125);\nvar requireObjectCoercible = __w_pdfjs_require__(19);\nvar ceil = Math.ceil;\nvar createMethod = function (IS_END) {\n return function ($this, maxLength, fillString) {\n  var S = String(requireObjectCoercible($this));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  var fillLen, stringFiller;\n  if (intMaxLength <= stringLength || fillStr == '')\n   return S;\n  fillLen = intMaxLength - stringLength;\n  stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen)\n   stringFiller = stringFiller.slice(0, fillLen);\n  return IS_END ? S + stringFiller : stringFiller + S;\n };\n};\nmodule.exports = {\n start: createMethod(false),\n end: createMethod(true)\n};\n\n/***/ }),\n/* 125 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar toInteger = __w_pdfjs_require__(47);\nvar requireObjectCoercible = __w_pdfjs_require__(19);\nmodule.exports = ''.repeat || function repeat(count) {\n var str = String(requireObjectCoercible(this));\n var result = '';\n var n = toInteger(count);\n if (n < 0 || n == Infinity)\n  throw RangeError('Wrong number of repetitions');\n for (; n > 0; (n >>>= 1) && (str += str))\n  if (n & 1)\n   result += str;\n return result;\n};\n\n/***/ }),\n/* 126 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar userAgent = __w_pdfjs_require__(95);\nmodule.exports = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n/***/ }),\n/* 127 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar global = __w_pdfjs_require__(10);\nvar bind = __w_pdfjs_require__(75);\nvar call = Function.call;\nmodule.exports = function (CONSTRUCTOR, METHOD, length) {\n return bind(call, global[CONSTRUCTOR].prototype[METHOD], length);\n};\n\n/***/ }),\n/* 128 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(129);\nvar entryUnbind = __w_pdfjs_require__(127);\nmodule.exports = entryUnbind('String', 'padEnd');\n\n/***/ }),\n/* 129 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\nvar $ = __w_pdfjs_require__(9);\nvar $padEnd = __w_pdfjs_require__(124).end;\nvar WEBKIT_BUG = __w_pdfjs_require__(126);\n$({\n target: 'String',\n proto: true,\n forced: WEBKIT_BUG\n}, {\n padEnd: function padEnd(maxLength) {\n  return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);\n }\n});\n\n/***/ }),\n/* 130 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(131);\nvar path = __w_pdfjs_require__(42);\nmodule.exports = path.Object.values;\n\n/***/ }),\n/* 131 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar $ = __w_pdfjs_require__(9);\nvar $values = __w_pdfjs_require__(132).values;\n$({\n target: 'Object',\n stat: true\n}, {\n values: function values(O) {\n  return $values(O);\n }\n});\n\n/***/ }),\n/* 132 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar DESCRIPTORS = __w_pdfjs_require__(12);\nvar objectKeys = __w_pdfjs_require__(60);\nvar toIndexedObject = __w_pdfjs_require__(16);\nvar propertyIsEnumerable = __w_pdfjs_require__(14).f;\nvar createMethod = function (TO_ENTRIES) {\n return function (it) {\n  var O = toIndexedObject(it);\n  var keys = objectKeys(O);\n  var length = keys.length;\n  var i = 0;\n  var result = [];\n  var key;\n  while (length > i) {\n   key = keys[i++];\n   if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n    result.push(TO_ENTRIES ? [\n     key,\n     O[key]\n    ] : O[key]);\n   }\n  }\n  return result;\n };\n};\nmodule.exports = {\n entries: createMethod(true),\n values: createMethod(false)\n};\n\n/***/ }),\n/* 133 */\n/***/ (function(module, __unused_webpack_exports, __w_pdfjs_require__) {\n\n__w_pdfjs_require__(134);\nvar path = __w_pdfjs_require__(42);\nmodule.exports = path.Object.entries;\n\n/***/ }),\n/* 134 */\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) {\n\nvar $ = __w_pdfjs_require__(9);\nvar $entries = __w_pdfjs_require__(132).entries;\n$({\n target: 'Object',\n stat: true\n}, {\n entries: function entries(O) {\n  return $entries(O);\n }\n});\n\n/***/ }),\n/* 135 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDocument = getDocument;\nexports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\nexports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.putBinaryImageData = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _display_utils = __w_pdfjs_require__(1);\n\nvar _font_loader = __w_pdfjs_require__(136);\n\nvar _node_utils = __w_pdfjs_require__(137);\n\nvar _annotation_storage = __w_pdfjs_require__(138);\n\nvar _api_compatibility = __w_pdfjs_require__(139);\n\nvar _canvas = __w_pdfjs_require__(140);\n\nvar _worker_options = __w_pdfjs_require__(142);\n\nvar _is_node = __w_pdfjs_require__(6);\n\nvar _message_handler = __w_pdfjs_require__(143);\n\nvar _metadata = __w_pdfjs_require__(144);\n\nvar _optional_content_config = __w_pdfjs_require__(146);\n\nvar _transport_stream = __w_pdfjs_require__(147);\n\nvar _webgl = __w_pdfjs_require__(148);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar DEFAULT_RANGE_CHUNK_SIZE = 65536;\nvar RENDERING_CANCELLED_TIMEOUT = 100;\nvar DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\nexports.DefaultCanvasFactory = DefaultCanvasFactory;\nvar DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\nexports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\nvar createPDFNetworkStream;\n\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\nfunction getDocument(src) {\n  var task = new PDFDocumentLoadingTask();\n  var source;\n\n  if (typeof src === \"string\") {\n    source = {\n      url: src\n    };\n  } else if ((0, _util.isArrayBuffer)(src)) {\n    source = {\n      data: src\n    };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = {\n      range: src\n    };\n  } else {\n    if (_typeof(src) !== \"object\") {\n      throw new Error(\"Invalid parameter in getDocument, \" + \"need either Uint8Array, string or a parameter object\");\n    }\n\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n    }\n\n    source = src;\n  }\n\n  var params = Object.create(null);\n  var rangeTransport = null,\n      worker = null;\n\n  for (var key in source) {\n    if (key === \"url\" && typeof window !== \"undefined\") {\n      params[key] = new URL(source[key], window.location).href;\n      continue;\n    } else if (key === \"range\") {\n      rangeTransport = source[key];\n      continue;\n    } else if (key === \"worker\") {\n      worker = source[key];\n      continue;\n    } else if (key === \"data\" && !(source[key] instanceof Uint8Array)) {\n      var pdfBytes = source[key];\n\n      if (typeof pdfBytes === \"string\") {\n        params[key] = (0, _util.stringToBytes)(pdfBytes);\n      } else if (_typeof(pdfBytes) === \"object\" && pdfBytes !== null && !isNaN(pdfBytes.length)) {\n        params[key] = new Uint8Array(pdfBytes);\n      } else if ((0, _util.isArrayBuffer)(pdfBytes)) {\n        params[key] = new Uint8Array(pdfBytes);\n      } else {\n        throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string or array-like object is expected in the \" + \"data property.\");\n      }\n\n      continue;\n    }\n\n    params[key] = source[key];\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace = _api_compatibility.apiCompatibilityParams.disableFontFace || false;\n  }\n\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  (0, _util.setVerbosityLevel)(params.verbosity);\n\n  if (!worker) {\n    var workerParams = {\n      verbosity: params.verbosity,\n      port: _worker_options.GlobalWorkerOptions.workerPort\n    };\n    worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n\n  var docId = task.docId;\n  worker.promise.then(function () {\n    if (task.destroyed) {\n      throw new Error(\"Loading aborted\");\n    }\n\n    var workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n    var networkStreamPromise = new Promise(function (resolve) {\n      var networkStream;\n\n      if (rangeTransport) {\n        networkStream = new _transport_stream.PDFDataTransportStream({\n          length: params.length,\n          initialData: params.initialData,\n          progressiveDone: params.progressiveDone,\n          disableRange: params.disableRange,\n          disableStream: params.disableStream\n        }, rangeTransport);\n      } else if (!params.data) {\n        networkStream = createPDFNetworkStream({\n          url: params.url,\n          length: params.length,\n          httpHeaders: params.httpHeaders,\n          withCredentials: params.withCredentials,\n          rangeChunkSize: params.rangeChunkSize,\n          disableRange: params.disableRange,\n          disableStream: params.disableStream\n        });\n      }\n\n      resolve(networkStream);\n    });\n    return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          workerId = _ref2[0],\n          networkStream = _ref2[1];\n\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n      messageHandler.postMessageTransfers = worker.postMessageTransfers;\n      var transport = new WorkerTransport(messageHandler, task, networkStream, params);\n      task._transport = transport;\n      messageHandler.send(\"Ready\", null);\n    });\n  })[\"catch\"](task._capability.reject);\n  return task;\n}\n\nfunction _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    return Promise.reject(new Error(\"Worker was destroyed\"));\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n  }\n\n  return worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n    docId: docId,\n    apiVersion: '2.8.173',\n    source: {\n      data: source.data,\n      url: source.url,\n      password: source.password,\n      disableAutoFetch: source.disableAutoFetch,\n      rangeChunkSize: source.rangeChunkSize,\n      length: source.length\n    },\n    maxImageSize: source.maxImageSize,\n    disableFontFace: source.disableFontFace,\n    postMessageTransfers: worker.postMessageTransfers,\n    docBaseUrl: source.docBaseUrl,\n    ignoreErrors: source.ignoreErrors,\n    isEvalSupported: source.isEvalSupported,\n    fontExtraProperties: source.fontExtraProperties\n  }).then(function (workerId) {\n    if (worker.destroyed) {\n      throw new Error(\"Worker was destroyed\");\n    }\n\n    return workerId;\n  });\n}\n\nvar PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n  var nextDocumentId = 0;\n\n  var PDFDocumentLoadingTask = /*#__PURE__*/function () {\n    function PDFDocumentLoadingTask() {\n      _classCallCheck(this, PDFDocumentLoadingTask);\n\n      this._capability = (0, _util.createPromiseCapability)();\n      this._transport = null;\n      this._worker = null;\n      this.docId = \"d\" + nextDocumentId++;\n      this.destroyed = false;\n      this.onPassword = null;\n      this.onProgress = null;\n      this.onUnsupportedFeature = null;\n    }\n\n    _createClass(PDFDocumentLoadingTask, [{\n      key: \"promise\",\n      get: function get() {\n        return this._capability.promise;\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        var _this = this;\n\n        this.destroyed = true;\n        var transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n        return transportDestroyed.then(function () {\n          _this._transport = null;\n\n          if (_this._worker) {\n            _this._worker.destroy();\n\n            _this._worker = null;\n          }\n        });\n      }\n    }]);\n\n    return PDFDocumentLoadingTask;\n  }();\n\n  return PDFDocumentLoadingTask;\n}();\n\nvar PDFDataRangeTransport = /*#__PURE__*/function () {\n  function PDFDataRangeTransport(length, initialData) {\n    var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, PDFDataRangeTransport);\n\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = (0, _util.createPromiseCapability)();\n  }\n\n  _createClass(PDFDataRangeTransport, [{\n    key: \"addRangeListener\",\n    value: function addRangeListener(listener) {\n      this._rangeListeners.push(listener);\n    }\n  }, {\n    key: \"addProgressListener\",\n    value: function addProgressListener(listener) {\n      this._progressListeners.push(listener);\n    }\n  }, {\n    key: \"addProgressiveReadListener\",\n    value: function addProgressiveReadListener(listener) {\n      this._progressiveReadListeners.push(listener);\n    }\n  }, {\n    key: \"addProgressiveDoneListener\",\n    value: function addProgressiveDoneListener(listener) {\n      this._progressiveDoneListeners.push(listener);\n    }\n  }, {\n    key: \"onDataRange\",\n    value: function onDataRange(begin, chunk) {\n      var _iterator = _createForOfIteratorHelper(this._rangeListeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener(begin, chunk);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"onDataProgress\",\n    value: function onDataProgress(loaded, total) {\n      var _this2 = this;\n\n      this._readyCapability.promise.then(function () {\n        var _iterator2 = _createForOfIteratorHelper(_this2._progressListeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener(loaded, total);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      });\n    }\n  }, {\n    key: \"onDataProgressiveRead\",\n    value: function onDataProgressiveRead(chunk) {\n      var _this3 = this;\n\n      this._readyCapability.promise.then(function () {\n        var _iterator3 = _createForOfIteratorHelper(_this3._progressiveReadListeners),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var listener = _step3.value;\n            listener(chunk);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }, {\n    key: \"onDataProgressiveDone\",\n    value: function onDataProgressiveDone() {\n      var _this4 = this;\n\n      this._readyCapability.promise.then(function () {\n        var _iterator4 = _createForOfIteratorHelper(_this4._progressiveDoneListeners),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var listener = _step4.value;\n            listener();\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      });\n    }\n  }, {\n    key: \"transportReady\",\n    value: function transportReady() {\n      this._readyCapability.resolve();\n    }\n  }, {\n    key: \"requestDataRange\",\n    value: function requestDataRange(begin, end) {\n      (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {}\n  }]);\n\n  return PDFDataRangeTransport;\n}();\n\nexports.PDFDataRangeTransport = PDFDataRangeTransport;\n\nvar PDFDocumentProxy = /*#__PURE__*/function () {\n  function PDFDocumentProxy(pdfInfo, transport) {\n    _classCallCheck(this, PDFDocumentProxy);\n\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n  }\n\n  _createClass(PDFDocumentProxy, [{\n    key: \"annotationStorage\",\n    get: function get() {\n      return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n    }\n  }, {\n    key: \"numPages\",\n    get: function get() {\n      return this._pdfInfo.numPages;\n    }\n  }, {\n    key: \"fingerprint\",\n    get: function get() {\n      return this._pdfInfo.fingerprint;\n    }\n  }, {\n    key: \"getPage\",\n    value: function getPage(pageNumber) {\n      return this._transport.getPage(pageNumber);\n    }\n  }, {\n    key: \"getPageIndex\",\n    value: function getPageIndex(ref) {\n      return this._transport.getPageIndex(ref);\n    }\n  }, {\n    key: \"getPageOCGNames\",\n    value: function getPageOCGNames(ref) {\n      return this._transport.getPageOCGNames(ref);\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(ref) {\n      return this._transport.getObject(ref);\n    }\n  }, {\n    key: \"getDestinations\",\n    value: function getDestinations() {\n      return this._transport.getDestinations();\n    }\n  }, {\n    key: \"getDestination\",\n    value: function getDestination(id) {\n      return this._transport.getDestination(id);\n    }\n  }, {\n    key: \"getPageLabels\",\n    value: function getPageLabels() {\n      return this._transport.getPageLabels();\n    }\n  }, {\n    key: \"getPageLayout\",\n    value: function getPageLayout() {\n      return this._transport.getPageLayout();\n    }\n  }, {\n    key: \"getPageMode\",\n    value: function getPageMode() {\n      return this._transport.getPageMode();\n    }\n  }, {\n    key: \"getViewerPreferences\",\n    value: function getViewerPreferences() {\n      return this._transport.getViewerPreferences();\n    }\n  }, {\n    key: \"getOpenAction\",\n    value: function getOpenAction() {\n      return this._transport.getOpenAction();\n    }\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this._transport.getAttachments();\n    }\n  }, {\n    key: \"getJavaScript\",\n    value: function getJavaScript() {\n      return this._transport.getJavaScript();\n    }\n  }, {\n    key: \"getJSActions\",\n    value: function getJSActions() {\n      return this._transport.getDocJSActions();\n    }\n  }, {\n    key: \"getOutline\",\n    value: function getOutline() {\n      return this._transport.getOutline();\n    }\n  }, {\n    key: \"getOptionalContentConfig\",\n    value: function getOptionalContentConfig() {\n      return this._transport.getOptionalContentConfig();\n    }\n  }, {\n    key: \"getPermissions\",\n    value: function getPermissions() {\n      return this._transport.getPermissions();\n    }\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return this._transport.getMetadata();\n    }\n  }, {\n    key: \"getMarkInfo\",\n    value: function getMarkInfo() {\n      return this._transport.getMarkInfo();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._transport.getData();\n    }\n  }, {\n    key: \"getDownloadInfo\",\n    value: function getDownloadInfo() {\n      return this._transport.downloadInfoCapability.promise;\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      return this._transport.getStats();\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      return this._transport.startCleanup();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      return this.loadingTask.destroy();\n    }\n  }, {\n    key: \"loadingParams\",\n    get: function get() {\n      return this._transport.loadingParams;\n    }\n  }, {\n    key: \"loadingTask\",\n    get: function get() {\n      return this._transport.loadingTask;\n    }\n  }, {\n    key: \"saveDocument\",\n    value: function saveDocument(annotationStorage) {\n      return this._transport.saveDocument(annotationStorage);\n    }\n  }, {\n    key: \"getFieldObjects\",\n    value: function getFieldObjects() {\n      return this._transport.getFieldObjects();\n    }\n  }, {\n    key: \"hasJSActions\",\n    value: function hasJSActions() {\n      return this._transport.hasJSActions();\n    }\n  }, {\n    key: \"getCalculationOrderIds\",\n    value: function getCalculationOrderIds() {\n      return this._transport.getCalculationOrderIds();\n    }\n  }]);\n\n  return PDFDocumentProxy;\n}();\n\nexports.PDFDocumentProxy = PDFDocumentProxy;\n\nvar PDFPageProxy = /*#__PURE__*/function () {\n  function PDFPageProxy(pageIndex, pageInfo, transport, ownerDocument) {\n    var pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, PDFPageProxy);\n\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  _createClass(PDFPageProxy, [{\n    key: \"pageNumber\",\n    get: function get() {\n      return this._pageIndex + 1;\n    }\n  }, {\n    key: \"rotate\",\n    get: function get() {\n      return this._pageInfo.rotate;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this._pageInfo.ref;\n    }\n  }, {\n    key: \"userUnit\",\n    get: function get() {\n      return this._pageInfo.userUnit;\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this._pageInfo.view;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          scale = _ref3.scale,\n          _ref3$rotation = _ref3.rotation,\n          rotation = _ref3$rotation === void 0 ? this.rotate : _ref3$rotation,\n          _ref3$offsetX = _ref3.offsetX,\n          offsetX = _ref3$offsetX === void 0 ? 0 : _ref3$offsetX,\n          _ref3$offsetY = _ref3.offsetY,\n          offsetY = _ref3$offsetY === void 0 ? 0 : _ref3$offsetY,\n          _ref3$dontFlip = _ref3.dontFlip,\n          dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;\n\n      return new _display_utils.PageViewport({\n        viewBox: this.view,\n        scale: scale,\n        rotation: rotation,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        dontFlip: dontFlip\n      });\n    }\n  }, {\n    key: \"getAnnotations\",\n    value: function getAnnotations() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$intent = _ref4.intent,\n          intent = _ref4$intent === void 0 ? null : _ref4$intent;\n\n      if (!this.annotationsPromise || this.annotationsIntent !== intent) {\n        this.annotationsPromise = this._transport.getAnnotations(this._pageIndex, intent);\n        this.annotationsIntent = intent;\n      }\n\n      return this.annotationsPromise;\n    }\n  }, {\n    key: \"getJSActions\",\n    value: function getJSActions() {\n      return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));\n    }\n  }, {\n    key: \"render\",\n    value: function render(_ref5) {\n      var _this5 = this;\n\n      var canvasContext = _ref5.canvasContext,\n          viewport = _ref5.viewport,\n          _ref5$intent = _ref5.intent,\n          intent = _ref5$intent === void 0 ? \"display\" : _ref5$intent,\n          _ref5$enableWebGL = _ref5.enableWebGL,\n          enableWebGL = _ref5$enableWebGL === void 0 ? false : _ref5$enableWebGL,\n          _ref5$renderInteracti = _ref5.renderInteractiveForms,\n          renderInteractiveForms = _ref5$renderInteracti === void 0 ? false : _ref5$renderInteracti,\n          _ref5$transform = _ref5.transform,\n          transform = _ref5$transform === void 0 ? null : _ref5$transform,\n          _ref5$imageLayer = _ref5.imageLayer,\n          imageLayer = _ref5$imageLayer === void 0 ? null : _ref5$imageLayer,\n          _ref5$canvasFactory = _ref5.canvasFactory,\n          canvasFactory = _ref5$canvasFactory === void 0 ? null : _ref5$canvasFactory,\n          _ref5$background = _ref5.background,\n          background = _ref5$background === void 0 ? null : _ref5$background,\n          _ref5$annotationStora = _ref5.annotationStorage,\n          annotationStorage = _ref5$annotationStora === void 0 ? null : _ref5$annotationStora,\n          _ref5$optionalContent = _ref5.optionalContentConfigPromise,\n          optionalContentConfigPromise = _ref5$optionalContent === void 0 ? null : _ref5$optionalContent;\n\n      if (this._stats) {\n        this._stats.time(\"Overall\");\n      }\n\n      var renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n      this.pendingCleanup = false;\n\n      if (!optionalContentConfigPromise) {\n        optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n      }\n\n      var intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      if (intentState.streamReaderCancelTimeout) {\n        clearTimeout(intentState.streamReaderCancelTimeout);\n        intentState.streamReaderCancelTimeout = null;\n      }\n\n      var canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n        ownerDocument: this._ownerDocument\n      });\n      var webGLContext = new _webgl.WebGLContext({\n        enable: enableWebGL\n      });\n\n      if (!intentState.displayReadyCapability) {\n        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent,\n          renderInteractiveForms: renderInteractiveForms === true,\n          annotationStorage: (annotationStorage === null || annotationStorage === void 0 ? void 0 : annotationStorage.getAll()) || null\n        });\n      }\n\n      var complete = function complete(error) {\n        var i = intentState.renderTasks.indexOf(internalRenderTask);\n\n        if (i >= 0) {\n          intentState.renderTasks.splice(i, 1);\n        }\n\n        if (_this5.cleanupAfterRender || renderingIntent === \"print\") {\n          _this5.pendingCleanup = true;\n        }\n\n        _this5._tryCleanup();\n\n        if (error) {\n          internalRenderTask.capability.reject(error);\n\n          _this5._abortOperatorList({\n            intentState: intentState,\n            reason: error\n          });\n        } else {\n          internalRenderTask.capability.resolve();\n        }\n\n        if (_this5._stats) {\n          _this5._stats.timeEnd(\"Rendering\");\n\n          _this5._stats.timeEnd(\"Overall\");\n        }\n      };\n\n      var internalRenderTask = new InternalRenderTask({\n        callback: complete,\n        params: {\n          canvasContext: canvasContext,\n          viewport: viewport,\n          transform: transform,\n          imageLayer: imageLayer,\n          background: background\n        },\n        objs: this.objs,\n        commonObjs: this.commonObjs,\n        operatorList: intentState.operatorList,\n        pageIndex: this._pageIndex,\n        canvasFactory: canvasFactoryInstance,\n        webGLContext: webGLContext,\n        useRequestAnimationFrame: renderingIntent !== \"print\",\n        pdfBug: this._pdfBug\n      });\n\n      if (!intentState.renderTasks) {\n        intentState.renderTasks = [];\n      }\n\n      intentState.renderTasks.push(internalRenderTask);\n      var renderTask = internalRenderTask.task;\n      Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            transparency = _ref7[0],\n            optionalContentConfig = _ref7[1];\n\n        if (_this5.pendingCleanup) {\n          complete();\n          return;\n        }\n\n        if (_this5._stats) {\n          _this5._stats.time(\"Rendering\");\n        }\n\n        internalRenderTask.initializeGraphics({\n          transparency: transparency,\n          optionalContentConfig: optionalContentConfig\n        });\n        internalRenderTask.operatorListChanged();\n      })[\"catch\"](complete);\n      return renderTask;\n    }\n  }, {\n    key: \"getOperatorList\",\n    value: function getOperatorList(intent) {\n      function operatorListChanged() {\n        if (intentState.operatorList.lastChunk) {\n          intentState.opListReadCapability.resolve(intentState.operatorList);\n          var i = intentState.renderTasks.indexOf(opListTask);\n\n          if (i >= 0) {\n            intentState.renderTasks.splice(i, 1);\n          }\n        }\n      }\n\n      var renderingIntent = intent || \"oplist\";\n\n      var intentState = this._intentStates.get(renderingIntent);\n\n      if (!intentState) {\n        intentState = Object.create(null);\n\n        this._intentStates.set(renderingIntent, intentState);\n      }\n\n      var opListTask;\n\n      if (!intentState.displayReadyCapability) {\n        intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false\n        };\n\n        if (this._stats) {\n          this._stats.time(\"Page Request\");\n        }\n\n        this._pumpOperatorList({\n          pageIndex: this._pageIndex,\n          intent: renderingIntent\n        });\n      }\n\n      if (!intentState.opListReadCapability) {\n        intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n\n        if (!intentState.renderTasks) {\n          intentState.renderTasks = [];\n        }\n\n        opListTask = Object.create(null);\n        opListTask.operatorListChanged = operatorListChanged;\n        intentState.renderTasks.push(opListTask);\n        operatorListChanged();\n      }\n\n      return intentState.opListReadCapability.promise;\n    }\n  }, {\n    key: \"streamTextContent\",\n    value: function streamTextContent() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref8$normalizeWhites = _ref8.normalizeWhitespace,\n          normalizeWhitespace = _ref8$normalizeWhites === void 0 ? false : _ref8$normalizeWhites,\n          _ref8$disableCombineT = _ref8.disableCombineTextItems,\n          disableCombineTextItems = _ref8$disableCombineT === void 0 ? false : _ref8$disableCombineT;\n\n      var TEXT_CONTENT_CHUNK_SIZE = 100;\n      return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true\n      }, {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size: function size(textContent) {\n          return textContent.items.length;\n        }\n      });\n    }\n  }, {\n    key: \"getTextContent\",\n    value: function getTextContent() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var readableStream = this.streamTextContent(params);\n      return new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function (_ref9) {\n            var _textContent$items;\n\n            var value = _ref9.value,\n                done = _ref9.done;\n\n            if (done) {\n              resolve(textContent);\n              return;\n            }\n\n            Object.assign(textContent.styles, value.styles);\n\n            (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));\n\n            pump();\n          }, reject);\n        }\n\n        var reader = readableStream.getReader();\n        var textContent = {\n          items: [],\n          styles: Object.create(null)\n        };\n        pump();\n      });\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      this.destroyed = true;\n      this._transport.pageCache[this._pageIndex] = null;\n      var waitOn = [];\n\n      var _iterator5 = _createForOfIteratorHelper(this._intentStates),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              intent = _step5$value[0],\n              intentState = _step5$value[1];\n\n          this._abortOperatorList({\n            intentState: intentState,\n            reason: new Error(\"Page was destroyed.\"),\n            force: true\n          });\n\n          if (intent === \"oplist\") {\n            continue;\n          }\n\n          var _iterator6 = _createForOfIteratorHelper(intentState.renderTasks),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var internalRenderTask = _step6.value;\n              waitOn.push(internalRenderTask.completed);\n              internalRenderTask.cancel();\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n      this.pendingCleanup = false;\n      return Promise.all(waitOn);\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.pendingCleanup = true;\n      return this._tryCleanup(resetStats);\n    }\n  }, {\n    key: \"_tryCleanup\",\n    value: function _tryCleanup() {\n      var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this.pendingCleanup) {\n        return false;\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this._intentStates.values()),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _step7.value,\n              renderTasks = _step7$value.renderTasks,\n              operatorList = _step7$value.operatorList;\n\n          if (renderTasks.length !== 0 || !operatorList.lastChunk) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this._intentStates.clear();\n\n      this.objs.clear();\n      this.annotationsPromise = null;\n      this._jsActionsPromise = null;\n\n      if (resetStats && this._stats) {\n        this._stats = new _display_utils.StatTimer();\n      }\n\n      this.pendingCleanup = false;\n      return true;\n    }\n  }, {\n    key: \"_startRenderPage\",\n    value: function _startRenderPage(transparency, intent) {\n      var intentState = this._intentStates.get(intent);\n\n      if (!intentState) {\n        return;\n      }\n\n      if (this._stats) {\n        this._stats.timeEnd(\"Page Request\");\n      }\n\n      if (intentState.displayReadyCapability) {\n        intentState.displayReadyCapability.resolve(transparency);\n      }\n    }\n  }, {\n    key: \"_renderPageChunk\",\n    value: function _renderPageChunk(operatorListChunk, intentState) {\n      for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {\n        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n      }\n\n      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n      for (var _i2 = 0; _i2 < intentState.renderTasks.length; _i2++) {\n        intentState.renderTasks[_i2].operatorListChanged();\n      }\n\n      if (operatorListChunk.lastChunk) {\n        this._tryCleanup();\n      }\n    }\n  }, {\n    key: \"_pumpOperatorList\",\n    value: function _pumpOperatorList(args) {\n      var _this6 = this;\n\n      (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.');\n\n      var readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", args);\n\n      var reader = readableStream.getReader();\n\n      var intentState = this._intentStates.get(args.intent);\n\n      intentState.streamReader = reader;\n\n      var pump = function pump() {\n        reader.read().then(function (_ref10) {\n          var value = _ref10.value,\n              done = _ref10.done;\n\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n\n          if (_this6._transport.destroyed) {\n            return;\n          }\n\n          _this6._renderPageChunk(value, intentState);\n\n          pump();\n        }, function (reason) {\n          intentState.streamReader = null;\n\n          if (_this6._transport.destroyed) {\n            return;\n          }\n\n          if (intentState.operatorList) {\n            intentState.operatorList.lastChunk = true;\n\n            for (var i = 0; i < intentState.renderTasks.length; i++) {\n              intentState.renderTasks[i].operatorListChanged();\n            }\n\n            _this6._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        });\n      };\n\n      pump();\n    }\n  }, {\n    key: \"_abortOperatorList\",\n    value: function _abortOperatorList(_ref11) {\n      var _this7 = this;\n\n      var intentState = _ref11.intentState,\n          reason = _ref11.reason,\n          _ref11$force = _ref11.force,\n          force = _ref11$force === void 0 ? false : _ref11$force;\n      (0, _util.assert)(reason instanceof Error || _typeof(reason) === \"object\" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.');\n\n      if (!intentState.streamReader) {\n        return;\n      }\n\n      if (!force) {\n        if (intentState.renderTasks.length !== 0) {\n          return;\n        }\n\n        if (reason instanceof _display_utils.RenderingCancelledException) {\n          intentState.streamReaderCancelTimeout = setTimeout(function () {\n            _this7._abortOperatorList({\n              intentState: intentState,\n              reason: reason,\n              force: true\n            });\n\n            intentState.streamReaderCancelTimeout = null;\n          }, RENDERING_CANCELLED_TIMEOUT);\n          return;\n        }\n      }\n\n      intentState.streamReader.cancel(new _util.AbortException(reason === null || reason === void 0 ? void 0 : reason.message));\n      intentState.streamReader = null;\n\n      if (this._transport.destroyed) {\n        return;\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this._intentStates),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n              intent = _step8$value[0],\n              curIntentState = _step8$value[1];\n\n          if (curIntentState === intentState) {\n            this._intentStates[\"delete\"](intent);\n\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      this.cleanup();\n    }\n  }, {\n    key: \"stats\",\n    get: function get() {\n      return this._stats;\n    }\n  }]);\n\n  return PDFPageProxy;\n}();\n\nexports.PDFPageProxy = PDFPageProxy;\n\nvar LoopbackPort = /*#__PURE__*/function () {\n  function LoopbackPort() {\n    var defer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    _classCallCheck(this, LoopbackPort);\n\n    this._listeners = [];\n    this._defer = defer;\n    this._deferred = Promise.resolve(undefined);\n  }\n\n  _createClass(LoopbackPort, [{\n    key: \"postMessage\",\n    value: function postMessage(obj, transfers) {\n      var _this8 = this;\n\n      function cloneValue(value) {\n        if (_typeof(value) !== \"object\" || value === null) {\n          return value;\n        }\n\n        if (cloned.has(value)) {\n          return cloned.get(value);\n        }\n\n        var buffer, result;\n\n        if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n          if (transfers !== null && transfers !== void 0 && transfers.includes(buffer)) {\n            result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n          } else {\n            result = new value.constructor(value);\n          }\n\n          cloned.set(value, result);\n          return result;\n        }\n\n        result = Array.isArray(value) ? [] : {};\n        cloned.set(value, result);\n\n        for (var i in value) {\n          var desc = void 0,\n              p = value;\n\n          while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n            p = Object.getPrototypeOf(p);\n          }\n\n          if (typeof desc.value === \"undefined\") {\n            continue;\n          }\n\n          if (typeof desc.value === \"function\") {\n            if (value.hasOwnProperty && value.hasOwnProperty(i)) {\n              throw new Error(\"LoopbackPort.postMessage - cannot clone: \".concat(value[i]));\n            }\n\n            continue;\n          }\n\n          result[i] = cloneValue(desc.value);\n        }\n\n        return result;\n      }\n\n      if (!this._defer) {\n        this._listeners.forEach(function (listener) {\n          listener.call(_this8, {\n            data: obj\n          });\n        });\n\n        return;\n      }\n\n      var cloned = new WeakMap();\n      var e = {\n        data: cloneValue(obj)\n      };\n\n      this._deferred.then(function () {\n        _this8._listeners.forEach(function (listener) {\n          listener.call(_this8, e);\n        });\n      });\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(name, listener) {\n      this._listeners.push(listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(name, listener) {\n      var i = this._listeners.indexOf(listener);\n\n      this._listeners.splice(i, 1);\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      this._listeners.length = 0;\n    }\n  }]);\n\n  return LoopbackPort;\n}();\n\nexports.LoopbackPort = LoopbackPort;\n\nvar PDFWorker = function PDFWorkerClosure() {\n  var pdfWorkerPorts = new WeakMap();\n  var isWorkerDisabled = false;\n  var fallbackWorkerSrc;\n  var nextFakeWorkerId = 0;\n  var fakeWorkerCapability;\n\n  if (_is_node.isNodeJS && \"function\" === \"function\") {\n    isWorkerDisabled = true;\n    fallbackWorkerSrc = \"./pdf.worker.js\";\n  } else if ((typeof document === \"undefined\" ? \"undefined\" : _typeof(document)) === \"object\" && \"currentScript\" in document) {\n    var _document$currentScri;\n\n    var pdfjsFilePath = (_document$currentScri = document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;\n\n    if (pdfjsFilePath) {\n      fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n    }\n  }\n\n  function _getWorkerSrc() {\n    if (_worker_options.GlobalWorkerOptions.workerSrc) {\n      return _worker_options.GlobalWorkerOptions.workerSrc;\n    }\n\n    if (typeof fallbackWorkerSrc !== \"undefined\") {\n      if (!_is_node.isNodeJS) {\n        (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n\n      return fallbackWorkerSrc;\n    }\n\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  function getMainThreadWorkerMessageHandler() {\n    var mainWorkerMessageHandler;\n\n    try {\n      var _globalThis$pdfjsWork;\n\n      mainWorkerMessageHandler = (_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler;\n    } catch (ex) {}\n\n    return mainWorkerMessageHandler || null;\n  }\n\n  function setupFakeWorkerGlobal() {\n    if (fakeWorkerCapability) {\n      return fakeWorkerCapability.promise;\n    }\n\n    fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n    var loader = /*#__PURE__*/function () {\n      var _ref12 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var mainWorkerMessageHandler, worker;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n                if (!mainWorkerMessageHandler) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", mainWorkerMessageHandler);\n\n              case 3:\n                if (!(_is_node.isNodeJS && \"function\" === \"function\")) {\n                  _context.next = 6;\n                  break;\n                }\n\n                worker = eval(\"require\")(_getWorkerSrc());\n                return _context.abrupt(\"return\", worker.WorkerMessageHandler);\n\n              case 6:\n                _context.next = 8;\n                return (0, _display_utils.loadScript)(_getWorkerSrc());\n\n              case 8:\n                return _context.abrupt(\"return\", window.pdfjsWorker.WorkerMessageHandler);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loader() {\n        return _ref12.apply(this, arguments);\n      };\n    }();\n\n    loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n    return fakeWorkerCapability.promise;\n  }\n\n  function createCDNWrapper(url) {\n    var wrapper = \"importScripts('\" + url + \"');\";\n    return URL.createObjectURL(new Blob([wrapper]));\n  }\n\n  var PDFWorker = /*#__PURE__*/function () {\n    function PDFWorker() {\n      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref13$name = _ref13.name,\n          name = _ref13$name === void 0 ? null : _ref13$name,\n          _ref13$port = _ref13.port,\n          port = _ref13$port === void 0 ? null : _ref13$port,\n          _ref13$verbosity = _ref13.verbosity,\n          verbosity = _ref13$verbosity === void 0 ? (0, _util.getVerbosityLevel)() : _ref13$verbosity;\n\n      _classCallCheck(this, PDFWorker);\n\n      if (port && pdfWorkerPorts.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port\");\n      }\n\n      this.name = name;\n      this.destroyed = false;\n      this.postMessageTransfers = true;\n      this.verbosity = verbosity;\n      this._readyCapability = (0, _util.createPromiseCapability)();\n      this._port = null;\n      this._webWorker = null;\n      this._messageHandler = null;\n\n      if (port) {\n        pdfWorkerPorts.set(port, this);\n\n        this._initializeFromPort(port);\n\n        return;\n      }\n\n      this._initialize();\n    }\n\n    _createClass(PDFWorker, [{\n      key: \"promise\",\n      get: function get() {\n        return this._readyCapability.promise;\n      }\n    }, {\n      key: \"port\",\n      get: function get() {\n        return this._port;\n      }\n    }, {\n      key: \"messageHandler\",\n      get: function get() {\n        return this._messageHandler;\n      }\n    }, {\n      key: \"_initializeFromPort\",\n      value: function _initializeFromPort(port) {\n        this._port = port;\n        this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n        this._messageHandler.on(\"ready\", function () {});\n\n        this._readyCapability.resolve();\n      }\n    }, {\n      key: \"_initialize\",\n      value: function _initialize() {\n        var _this9 = this;\n\n        if (typeof Worker !== \"undefined\" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n          var workerSrc = _getWorkerSrc();\n\n          try {\n            if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n              workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n            }\n\n            var worker = new Worker(workerSrc);\n            var messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n            var terminateEarly = function terminateEarly() {\n              worker.removeEventListener(\"error\", onWorkerError);\n              messageHandler.destroy();\n              worker.terminate();\n\n              if (_this9.destroyed) {\n                _this9._readyCapability.reject(new Error(\"Worker was destroyed\"));\n              } else {\n                _this9._setupFakeWorker();\n              }\n            };\n\n            var onWorkerError = function onWorkerError() {\n              if (!_this9._webWorker) {\n                terminateEarly();\n              }\n            };\n\n            worker.addEventListener(\"error\", onWorkerError);\n            messageHandler.on(\"test\", function (data) {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (_this9.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              if (data) {\n                _this9._messageHandler = messageHandler;\n                _this9._port = worker;\n                _this9._webWorker = worker;\n\n                if (!data.supportTransfers) {\n                  _this9.postMessageTransfers = false;\n                }\n\n                _this9._readyCapability.resolve();\n\n                messageHandler.send(\"configure\", {\n                  verbosity: _this9.verbosity\n                });\n              } else {\n                _this9._setupFakeWorker();\n\n                messageHandler.destroy();\n                worker.terminate();\n              }\n            });\n            messageHandler.on(\"ready\", function (data) {\n              worker.removeEventListener(\"error\", onWorkerError);\n\n              if (_this9.destroyed) {\n                terminateEarly();\n                return;\n              }\n\n              try {\n                sendTest();\n              } catch (e) {\n                _this9._setupFakeWorker();\n              }\n            });\n\n            var sendTest = function sendTest() {\n              var testObj = new Uint8Array([_this9.postMessageTransfers ? 255 : 0]);\n\n              try {\n                messageHandler.send(\"test\", testObj, [testObj.buffer]);\n              } catch (ex) {\n                (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                testObj[0] = 0;\n                messageHandler.send(\"test\", testObj);\n              }\n            };\n\n            sendTest();\n            return;\n          } catch (e) {\n            (0, _util.info)(\"The worker has been disabled.\");\n          }\n        }\n\n        this._setupFakeWorker();\n      }\n    }, {\n      key: \"_setupFakeWorker\",\n      value: function _setupFakeWorker() {\n        var _this10 = this;\n\n        if (!isWorkerDisabled) {\n          (0, _util.warn)(\"Setting up fake worker.\");\n          isWorkerDisabled = true;\n        }\n\n        setupFakeWorkerGlobal().then(function (WorkerMessageHandler) {\n          if (_this10.destroyed) {\n            _this10._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n            return;\n          }\n\n          var port = new LoopbackPort();\n          _this10._port = port;\n          var id = \"fake\" + nextFakeWorkerId++;\n          var workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n          WorkerMessageHandler.setup(workerHandler, port);\n          var messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n          _this10._messageHandler = messageHandler;\n\n          _this10._readyCapability.resolve();\n\n          messageHandler.send(\"configure\", {\n            verbosity: _this10.verbosity\n          });\n        })[\"catch\"](function (reason) {\n          _this10._readyCapability.reject(new Error(\"Setting up fake worker failed: \\\"\".concat(reason.message, \"\\\".\")));\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.destroyed = true;\n\n        if (this._webWorker) {\n          this._webWorker.terminate();\n\n          this._webWorker = null;\n        }\n\n        pdfWorkerPorts[\"delete\"](this._port);\n        this._port = null;\n\n        if (this._messageHandler) {\n          this._messageHandler.destroy();\n\n          this._messageHandler = null;\n        }\n      }\n    }], [{\n      key: \"fromPort\",\n      value: function fromPort(params) {\n        if (!params || !params.port) {\n          throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n        }\n\n        if (pdfWorkerPorts.has(params.port)) {\n          return pdfWorkerPorts.get(params.port);\n        }\n\n        return new PDFWorker(params);\n      }\n    }, {\n      key: \"getWorkerSrc\",\n      value: function getWorkerSrc() {\n        return _getWorkerSrc();\n      }\n    }]);\n\n    return PDFWorker;\n  }();\n\n  return PDFWorker;\n}();\n\nexports.PDFWorker = PDFWorker;\n\nvar WorkerTransport = /*#__PURE__*/function () {\n  function WorkerTransport(messageHandler, loadingTask, networkStream, params) {\n    _classCallCheck(this, WorkerTransport);\n\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new _font_loader.FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument\n    });\n    this._params = params;\n    this.CMapReaderFactory = new params.CMapReaderFactory({\n      baseUrl: params.cMapUrl,\n      isCompressed: params.cMapPacked\n    });\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.pageCache = [];\n    this.pagePromises = [];\n    this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n    this.setupMessageHandler();\n  }\n\n  _createClass(WorkerTransport, [{\n    key: \"loadingTaskSettled\",\n    get: function get() {\n      return this.loadingTask._capability.settled;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this11 = this;\n\n      if (this.destroyCapability) {\n        return this.destroyCapability.promise;\n      }\n\n      this.destroyed = true;\n      this.destroyCapability = (0, _util.createPromiseCapability)();\n\n      if (this._passwordCapability) {\n        this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n      }\n\n      var waitOn = [];\n      this.pageCache.forEach(function (page) {\n        if (page) {\n          waitOn.push(page._destroy());\n        }\n      });\n      this.pageCache.length = 0;\n      this.pagePromises.length = 0;\n      var terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n      waitOn.push(terminated);\n\n      if (this.loadingTaskSettled) {\n        var annotationStorageResetModified = this.loadingTask.promise.then(function (pdfDocument) {\n          if (pdfDocument.hasOwnProperty(\"annotationStorage\")) {\n            pdfDocument.annotationStorage.resetModified();\n          }\n        })[\"catch\"](function () {});\n        waitOn.push(annotationStorageResetModified);\n      }\n\n      Promise.all(waitOn).then(function () {\n        _this11.commonObjs.clear();\n\n        _this11.fontLoader.clear();\n\n        _this11._hasJSActionsPromise = null;\n\n        if (_this11._networkStream) {\n          _this11._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n        }\n\n        if (_this11.messageHandler) {\n          _this11.messageHandler.destroy();\n\n          _this11.messageHandler = null;\n        }\n\n        _this11.destroyCapability.resolve();\n      }, this.destroyCapability.reject);\n      return this.destroyCapability.promise;\n    }\n  }, {\n    key: \"setupMessageHandler\",\n    value: function setupMessageHandler() {\n      var _this12 = this;\n\n      var messageHandler = this.messageHandler,\n          loadingTask = this.loadingTask;\n      messageHandler.on(\"GetReader\", function (data, sink) {\n        (0, _util.assert)(_this12._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n        _this12._fullReader = _this12._networkStream.getFullReader();\n\n        _this12._fullReader.onProgress = function (evt) {\n          _this12._lastProgress = {\n            loaded: evt.loaded,\n            total: evt.total\n          };\n        };\n\n        sink.onPull = function () {\n          _this12._fullReader.read().then(function (_ref14) {\n            var value = _ref14.value,\n                done = _ref14.done;\n\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })[\"catch\"](function (reason) {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = function (reason) {\n          _this12._fullReader.cancel(reason);\n\n          sink.ready[\"catch\"](function (readyReason) {\n            if (_this12.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"ReaderHeadersReady\", function (data) {\n        var headersCapability = (0, _util.createPromiseCapability)();\n        var fullReader = _this12._fullReader;\n        fullReader.headersReady.then(function () {\n          if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n            if (_this12._lastProgress && loadingTask.onProgress) {\n              loadingTask.onProgress(_this12._lastProgress);\n            }\n\n            fullReader.onProgress = function (evt) {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            };\n          }\n\n          headersCapability.resolve({\n            isStreamingSupported: fullReader.isStreamingSupported,\n            isRangeSupported: fullReader.isRangeSupported,\n            contentLength: fullReader.contentLength\n          });\n        }, headersCapability.reject);\n        return headersCapability.promise;\n      });\n      messageHandler.on(\"GetRangeReader\", function (data, sink) {\n        (0, _util.assert)(_this12._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n        var rangeReader = _this12._networkStream.getRangeReader(data.begin, data.end);\n\n        if (!rangeReader) {\n          sink.close();\n          return;\n        }\n\n        sink.onPull = function () {\n          rangeReader.read().then(function (_ref15) {\n            var value = _ref15.value,\n                done = _ref15.done;\n\n            if (done) {\n              sink.close();\n              return;\n            }\n\n            (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })[\"catch\"](function (reason) {\n            sink.error(reason);\n          });\n        };\n\n        sink.onCancel = function (reason) {\n          rangeReader.cancel(reason);\n          sink.ready[\"catch\"](function (readyReason) {\n            if (_this12.destroyed) {\n              return;\n            }\n\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"GetDoc\", function (_ref16) {\n        var pdfInfo = _ref16.pdfInfo;\n        _this12._numPages = pdfInfo.numPages;\n\n        loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, _this12));\n      });\n      messageHandler.on(\"DocException\", function (ex) {\n        var reason;\n\n        switch (ex.name) {\n          case \"PasswordException\":\n            reason = new _util.PasswordException(ex.message, ex.code);\n            break;\n\n          case \"InvalidPDFException\":\n            reason = new _util.InvalidPDFException(ex.message);\n            break;\n\n          case \"MissingPDFException\":\n            reason = new _util.MissingPDFException(ex.message);\n            break;\n\n          case \"UnexpectedResponseException\":\n            reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n            break;\n\n          case \"UnknownErrorException\":\n            reason = new _util.UnknownErrorException(ex.message, ex.details);\n            break;\n        }\n\n        if (!(reason instanceof Error)) {\n          var msg = \"DocException - expected a valid Error.\";\n          (0, _util.warn)(msg);\n        }\n\n        loadingTask._capability.reject(reason);\n      });\n      messageHandler.on(\"PasswordRequest\", function (exception) {\n        _this12._passwordCapability = (0, _util.createPromiseCapability)();\n\n        if (loadingTask.onPassword) {\n          var updatePassword = function updatePassword(password) {\n            _this12._passwordCapability.resolve({\n              password: password\n            });\n          };\n\n          try {\n            loadingTask.onPassword(updatePassword, exception.code);\n          } catch (ex) {\n            _this12._passwordCapability.reject(ex);\n          }\n        } else {\n          _this12._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n        }\n\n        return _this12._passwordCapability.promise;\n      });\n      messageHandler.on(\"DataLoaded\", function (data) {\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.length,\n            total: data.length\n          });\n        }\n\n        _this12.downloadInfoCapability.resolve(data);\n      });\n      messageHandler.on(\"StartRenderPage\", function (data) {\n        if (_this12.destroyed) {\n          return;\n        }\n\n        var page = _this12.pageCache[data.pageIndex];\n\n        page._startRenderPage(data.transparency, data.intent);\n      });\n      messageHandler.on(\"commonobj\", function (data) {\n        var _globalThis$FontInspe;\n\n        if (_this12.destroyed) {\n          return;\n        }\n\n        var _data = _slicedToArray(data, 3),\n            id = _data[0],\n            type = _data[1],\n            exportedData = _data[2];\n\n        if (_this12.commonObjs.has(id)) {\n          return;\n        }\n\n        switch (type) {\n          case \"Font\":\n            var params = _this12._params;\n\n            if (\"error\" in exportedData) {\n              var exportedError = exportedData.error;\n              (0, _util.warn)(\"Error during font loading: \".concat(exportedError));\n\n              _this12.commonObjs.resolve(id, exportedError);\n\n              break;\n            }\n\n            var fontRegistry = null;\n\n            if (params.pdfBug && (_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled) {\n              fontRegistry = {\n                registerFont: function registerFont(font, url) {\n                  globalThis.FontInspector.fontAdded(font, url);\n                }\n              };\n            }\n\n            var font = new _font_loader.FontFaceObject(exportedData, {\n              isEvalSupported: params.isEvalSupported,\n              disableFontFace: params.disableFontFace,\n              ignoreErrors: params.ignoreErrors,\n              onUnsupportedFeature: _this12._onUnsupportedFeature.bind(_this12),\n              fontRegistry: fontRegistry\n            });\n\n            _this12.fontLoader.bind(font)[\"catch\"](function (reason) {\n              return messageHandler.sendWithPromise(\"FontFallback\", {\n                id: id\n              });\n            })[\"finally\"](function () {\n              if (!params.fontExtraProperties && font.data) {\n                font.data = null;\n              }\n\n              _this12.commonObjs.resolve(id, font);\n            });\n\n            break;\n\n          case \"FontPath\":\n          case \"Image\":\n            _this12.commonObjs.resolve(id, exportedData);\n\n            break;\n\n          default:\n            throw new Error(\"Got unknown common object type \".concat(type));\n        }\n      });\n      messageHandler.on(\"obj\", function (data) {\n        var _imageData$data;\n\n        if (_this12.destroyed) {\n          return undefined;\n        }\n\n        var _data2 = _slicedToArray(data, 4),\n            id = _data2[0],\n            pageIndex = _data2[1],\n            type = _data2[2],\n            imageData = _data2[3];\n\n        var pageProxy = _this12.pageCache[pageIndex];\n\n        if (pageProxy.objs.has(id)) {\n          return undefined;\n        }\n\n        switch (type) {\n          case \"Image\":\n            pageProxy.objs.resolve(id, imageData);\n            var MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n            if ((imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) > MAX_IMAGE_SIZE_TO_STORE) {\n              pageProxy.cleanupAfterRender = true;\n            }\n\n            break;\n\n          default:\n            throw new Error(\"Got unknown object type \".concat(type));\n        }\n\n        return undefined;\n      });\n      messageHandler.on(\"DocProgress\", function (data) {\n        if (_this12.destroyed) {\n          return;\n        }\n\n        if (loadingTask.onProgress) {\n          loadingTask.onProgress({\n            loaded: data.loaded,\n            total: data.total\n          });\n        }\n      });\n      messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n      messageHandler.on(\"FetchBuiltInCMap\", function (data, sink) {\n        if (_this12.destroyed) {\n          sink.error(new Error(\"Worker was destroyed\"));\n          return;\n        }\n\n        var fetched = false;\n\n        sink.onPull = function () {\n          if (fetched) {\n            sink.close();\n            return;\n          }\n\n          fetched = true;\n\n          _this12.CMapReaderFactory.fetch(data).then(function (builtInCMap) {\n            sink.enqueue(builtInCMap, 1, [builtInCMap.cMapData.buffer]);\n          })[\"catch\"](function (reason) {\n            sink.error(reason);\n          });\n        };\n      });\n    }\n  }, {\n    key: \"_onUnsupportedFeature\",\n    value: function _onUnsupportedFeature(_ref17) {\n      var featureId = _ref17.featureId;\n\n      if (this.destroyed) {\n        return;\n      }\n\n      if (this.loadingTask.onUnsupportedFeature) {\n        this.loadingTask.onUnsupportedFeature(featureId);\n      }\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.messageHandler.sendWithPromise(\"GetData\", null);\n    }\n  }, {\n    key: \"getPage\",\n    value: function getPage(pageNumber) {\n      var _this13 = this;\n\n      if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n        return Promise.reject(new Error(\"Invalid page request\"));\n      }\n\n      var pageIndex = pageNumber - 1;\n\n      if (pageIndex in this.pagePromises) {\n        return this.pagePromises[pageIndex];\n      }\n\n      var promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n        pageIndex: pageIndex\n      }).then(function (pageInfo) {\n        if (_this13.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n\n        var page = new PDFPageProxy(pageIndex, pageInfo, _this13, _this13._params.ownerDocument, _this13._params.pdfBug);\n        _this13.pageCache[pageIndex] = page;\n        return page;\n      });\n      this.pagePromises[pageIndex] = promise;\n      return promise;\n    }\n  }, {\n    key: \"getPageIndex\",\n    value: function getPageIndex(ref) {\n      return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n        ref: ref\n      })[\"catch\"](function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n    }\n  }, {\n    key: \"getPageOCGNames\",\n    value: function getPageOCGNames(ref) {\n      return this.messageHandler.sendWithPromise(\"GetPageOCGNames\", {\n        ref: ref\n      })[\"catch\"](function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(ref) {\n      return this.messageHandler.sendWithPromise(\"GetObject\", {\n        ref: ref\n      })[\"catch\"](function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n    }\n  }, {\n    key: \"getAnnotations\",\n    value: function getAnnotations(pageIndex, intent) {\n      return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n        pageIndex: pageIndex,\n        intent: intent\n      });\n    }\n  }, {\n    key: \"saveDocument\",\n    value: function saveDocument(annotationStorage) {\n      var _this$_fullReader$fil, _this$_fullReader;\n\n      return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n        numPages: this._numPages,\n        annotationStorage: (annotationStorage === null || annotationStorage === void 0 ? void 0 : annotationStorage.getAll()) || null,\n        filename: (_this$_fullReader$fil = (_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) !== null && _this$_fullReader$fil !== void 0 ? _this$_fullReader$fil : null\n      })[\"finally\"](function () {\n        if (annotationStorage) {\n          annotationStorage.resetModified();\n        }\n      });\n    }\n  }, {\n    key: \"getFieldObjects\",\n    value: function getFieldObjects() {\n      return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n    }\n  }, {\n    key: \"hasJSActions\",\n    value: function hasJSActions() {\n      return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise(\"HasJSActions\", null));\n    }\n  }, {\n    key: \"getCalculationOrderIds\",\n    value: function getCalculationOrderIds() {\n      return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n    }\n  }, {\n    key: \"getDestinations\",\n    value: function getDestinations() {\n      return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n    }\n  }, {\n    key: \"getDestination\",\n    value: function getDestination(id) {\n      if (typeof id !== \"string\") {\n        return Promise.reject(new Error(\"Invalid destination request.\"));\n      }\n\n      return this.messageHandler.sendWithPromise(\"GetDestination\", {\n        id: id\n      });\n    }\n  }, {\n    key: \"getPageLabels\",\n    value: function getPageLabels() {\n      return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n    }\n  }, {\n    key: \"getPageLayout\",\n    value: function getPageLayout() {\n      return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n    }\n  }, {\n    key: \"getPageMode\",\n    value: function getPageMode() {\n      return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n    }\n  }, {\n    key: \"getViewerPreferences\",\n    value: function getViewerPreferences() {\n      return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n    }\n  }, {\n    key: \"getOpenAction\",\n    value: function getOpenAction() {\n      return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n    }\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n    }\n  }, {\n    key: \"getJavaScript\",\n    value: function getJavaScript() {\n      return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n    }\n  }, {\n    key: \"getDocJSActions\",\n    value: function getDocJSActions() {\n      return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n    }\n  }, {\n    key: \"getPageJSActions\",\n    value: function getPageJSActions(pageIndex) {\n      return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n        pageIndex: pageIndex\n      });\n    }\n  }, {\n    key: \"getOutline\",\n    value: function getOutline() {\n      return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n    }\n  }, {\n    key: \"getOptionalContentConfig\",\n    value: function getOptionalContentConfig() {\n      return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(function (results) {\n        return new _optional_content_config.OptionalContentConfig(results);\n      });\n    }\n  }, {\n    key: \"getPermissions\",\n    value: function getPermissions() {\n      return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n    }\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      var _this14 = this;\n\n      return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(function (results) {\n        var _this14$_fullReader$f, _this14$_fullReader, _this14$_fullReader$c, _this14$_fullReader2;\n\n        return {\n          info: results[0],\n          metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n          contentDispositionFilename: (_this14$_fullReader$f = (_this14$_fullReader = _this14._fullReader) === null || _this14$_fullReader === void 0 ? void 0 : _this14$_fullReader.filename) !== null && _this14$_fullReader$f !== void 0 ? _this14$_fullReader$f : null,\n          contentLength: (_this14$_fullReader$c = (_this14$_fullReader2 = _this14._fullReader) === null || _this14$_fullReader2 === void 0 ? void 0 : _this14$_fullReader2.contentLength) !== null && _this14$_fullReader$c !== void 0 ? _this14$_fullReader$c : null\n        };\n      });\n    }\n  }, {\n    key: \"getMarkInfo\",\n    value: function getMarkInfo() {\n      return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      return this.messageHandler.sendWithPromise(\"GetStats\", null);\n    }\n  }, {\n    key: \"startCleanup\",\n    value: function startCleanup() {\n      var _this15 = this;\n\n      return this.messageHandler.sendWithPromise(\"Cleanup\", null).then(function () {\n        for (var i = 0, ii = _this15.pageCache.length; i < ii; i++) {\n          var page = _this15.pageCache[i];\n\n          if (page) {\n            var cleanupSuccessful = page.cleanup();\n\n            if (!cleanupSuccessful) {\n              throw new Error(\"startCleanup: Page \".concat(i + 1, \" is currently rendering.\"));\n            }\n          }\n        }\n\n        _this15.commonObjs.clear();\n\n        _this15.fontLoader.clear();\n\n        _this15._hasJSActionsPromise = null;\n      });\n    }\n  }, {\n    key: \"loadingParams\",\n    get: function get() {\n      var params = this._params;\n      return (0, _util.shadow)(this, \"loadingParams\", {\n        disableAutoFetch: params.disableAutoFetch,\n        disableFontFace: params.disableFontFace\n      });\n    }\n  }]);\n\n  return WorkerTransport;\n}();\n\nvar PDFObjects = /*#__PURE__*/function () {\n  function PDFObjects() {\n    _classCallCheck(this, PDFObjects);\n\n    this._objs = Object.create(null);\n  }\n\n  _createClass(PDFObjects, [{\n    key: \"_ensureObj\",\n    value: function _ensureObj(objId) {\n      if (this._objs[objId]) {\n        return this._objs[objId];\n      }\n\n      return this._objs[objId] = {\n        capability: (0, _util.createPromiseCapability)(),\n        data: null,\n        resolved: false\n      };\n    }\n  }, {\n    key: \"get\",\n    value: function get(objId) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (callback) {\n        this._ensureObj(objId).capability.promise.then(callback);\n\n        return null;\n      }\n\n      var obj = this._objs[objId];\n\n      if (!obj || !obj.resolved) {\n        throw new Error(\"Requesting object that isn't resolved yet \".concat(objId, \".\"));\n      }\n\n      return obj.data;\n    }\n  }, {\n    key: \"has\",\n    value: function has(objId) {\n      var obj = this._objs[objId];\n      return (obj === null || obj === void 0 ? void 0 : obj.resolved) || false;\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(objId, data) {\n      var obj = this._ensureObj(objId);\n\n      obj.resolved = true;\n      obj.data = data;\n      obj.capability.resolve(data);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._objs = Object.create(null);\n    }\n  }]);\n\n  return PDFObjects;\n}();\n\nvar RenderTask = /*#__PURE__*/function () {\n  function RenderTask(internalRenderTask) {\n    _classCallCheck(this, RenderTask);\n\n    this._internalRenderTask = internalRenderTask;\n    this.onContinue = null;\n  }\n\n  _createClass(RenderTask, [{\n    key: \"promise\",\n    get: function get() {\n      return this._internalRenderTask.capability.promise;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this._internalRenderTask.cancel();\n    }\n  }]);\n\n  return RenderTask;\n}();\n\nvar InternalRenderTask = function InternalRenderTaskClosure() {\n  var canvasInRendering = new WeakSet();\n\n  var InternalRenderTask = /*#__PURE__*/function () {\n    function InternalRenderTask(_ref18) {\n      var callback = _ref18.callback,\n          params = _ref18.params,\n          objs = _ref18.objs,\n          commonObjs = _ref18.commonObjs,\n          operatorList = _ref18.operatorList,\n          pageIndex = _ref18.pageIndex,\n          canvasFactory = _ref18.canvasFactory,\n          webGLContext = _ref18.webGLContext,\n          _ref18$useRequestAnim = _ref18.useRequestAnimationFrame,\n          useRequestAnimationFrame = _ref18$useRequestAnim === void 0 ? false : _ref18$useRequestAnim,\n          _ref18$pdfBug = _ref18.pdfBug,\n          pdfBug = _ref18$pdfBug === void 0 ? false : _ref18$pdfBug;\n\n      _classCallCheck(this, InternalRenderTask);\n\n      this.callback = callback;\n      this.params = params;\n      this.objs = objs;\n      this.commonObjs = commonObjs;\n      this.operatorListIdx = null;\n      this.operatorList = operatorList;\n      this._pageIndex = pageIndex;\n      this.canvasFactory = canvasFactory;\n      this.webGLContext = webGLContext;\n      this._pdfBug = pdfBug;\n      this.running = false;\n      this.graphicsReadyCallback = null;\n      this.graphicsReady = false;\n      this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n      this.cancelled = false;\n      this.capability = (0, _util.createPromiseCapability)();\n      this.task = new RenderTask(this);\n      this._continueBound = this._continue.bind(this);\n      this._scheduleNextBound = this._scheduleNext.bind(this);\n      this._nextBound = this._next.bind(this);\n      this._canvas = params.canvasContext.canvas;\n    }\n\n    _createClass(InternalRenderTask, [{\n      key: \"completed\",\n      get: function get() {\n        return this.capability.promise[\"catch\"](function () {});\n      }\n    }, {\n      key: \"initializeGraphics\",\n      value: function initializeGraphics(_ref19) {\n        var _globalThis$StepperMa;\n\n        var _ref19$transparency = _ref19.transparency,\n            transparency = _ref19$transparency === void 0 ? false : _ref19$transparency,\n            optionalContentConfig = _ref19.optionalContentConfig;\n\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this._canvas) {\n          if (canvasInRendering.has(this._canvas)) {\n            throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n          }\n\n          canvasInRendering.add(this._canvas);\n        }\n\n        if (this._pdfBug && (_globalThis$StepperMa = globalThis.StepperManager) !== null && _globalThis$StepperMa !== void 0 && _globalThis$StepperMa.enabled) {\n          this.stepper = globalThis.StepperManager.create(this._pageIndex);\n          this.stepper.init(this.operatorList);\n          this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n        }\n\n        var _this$params = this.params,\n            canvasContext = _this$params.canvasContext,\n            viewport = _this$params.viewport,\n            transform = _this$params.transform,\n            imageLayer = _this$params.imageLayer,\n            background = _this$params.background;\n        this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.webGLContext, imageLayer, optionalContentConfig);\n        this.gfx.beginDrawing({\n          transform: transform,\n          viewport: viewport,\n          transparency: transparency,\n          background: background\n        });\n        this.operatorListIdx = 0;\n        this.graphicsReady = true;\n\n        if (this.graphicsReadyCallback) {\n          this.graphicsReadyCallback();\n        }\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.running = false;\n        this.cancelled = true;\n\n        if (this.gfx) {\n          this.gfx.endDrawing();\n        }\n\n        if (this._canvas) {\n          canvasInRendering[\"delete\"](this._canvas);\n        }\n\n        this.callback(error || new _display_utils.RenderingCancelledException(\"Rendering cancelled, page \".concat(this._pageIndex + 1), \"canvas\"));\n      }\n    }, {\n      key: \"operatorListChanged\",\n      value: function operatorListChanged() {\n        if (!this.graphicsReady) {\n          if (!this.graphicsReadyCallback) {\n            this.graphicsReadyCallback = this._continueBound;\n          }\n\n          return;\n        }\n\n        if (this.stepper) {\n          this.stepper.updateOperatorList(this.operatorList);\n        }\n\n        if (this.running) {\n          return;\n        }\n\n        this._continue();\n      }\n    }, {\n      key: \"_continue\",\n      value: function _continue() {\n        this.running = true;\n\n        if (this.cancelled) {\n          return;\n        }\n\n        if (this.task.onContinue) {\n          this.task.onContinue(this._scheduleNextBound);\n        } else {\n          this._scheduleNext();\n        }\n      }\n    }, {\n      key: \"_scheduleNext\",\n      value: function _scheduleNext() {\n        var _this16 = this;\n\n        if (this._useRequestAnimationFrame) {\n          window.requestAnimationFrame(function () {\n            _this16._nextBound()[\"catch\"](_this16.cancel.bind(_this16));\n          });\n        } else {\n          Promise.resolve().then(this._nextBound)[\"catch\"](this.cancel.bind(this));\n        }\n      }\n    }, {\n      key: \"_next\",\n      value: function () {\n        var _next2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n          return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!this.cancelled) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 2:\n                  this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n                  if (this.operatorListIdx === this.operatorList.argsArray.length) {\n                    this.running = false;\n\n                    if (this.operatorList.lastChunk) {\n                      this.gfx.endDrawing();\n\n                      if (this._canvas) {\n                        canvasInRendering[\"delete\"](this._canvas);\n                      }\n\n                      this.callback();\n                    }\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function _next() {\n          return _next2.apply(this, arguments);\n        }\n\n        return _next;\n      }()\n    }]);\n\n    return InternalRenderTask;\n  }();\n\n  return InternalRenderTask;\n}();\n\nvar version = '2.8.173';\nexports.version = version;\nvar build = 'bc834d510';\nexports.build = build;\nvar putBinaryImageData = _canvas.CanvasGraphics.putBinaryImageData;\nexports.putBinaryImageData = putBinaryImageData;\n\n/***/ }),\n/* 136 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FontLoader = exports.FontFaceObject = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar BaseFontLoader = /*#__PURE__*/function () {\n  function BaseFontLoader(_ref) {\n    var docId = _ref.docId,\n        onUnsupportedFeature = _ref.onUnsupportedFeature,\n        _ref$ownerDocument = _ref.ownerDocument,\n        ownerDocument = _ref$ownerDocument === void 0 ? globalThis.document : _ref$ownerDocument;\n\n    _classCallCheck(this, BaseFontLoader);\n\n    if (this.constructor === BaseFontLoader) {\n      (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n    }\n\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n    this.nativeFontFaces = [];\n    this.styleElement = null;\n  }\n\n  _createClass(BaseFontLoader, [{\n    key: \"addNativeFontFace\",\n    value: function addNativeFontFace(nativeFontFace) {\n      this.nativeFontFaces.push(nativeFontFace);\n\n      this._document.fonts.add(nativeFontFace);\n    }\n  }, {\n    key: \"insertRule\",\n    value: function insertRule(rule) {\n      var styleElement = this.styleElement;\n\n      if (!styleElement) {\n        styleElement = this.styleElement = this._document.createElement(\"style\");\n        styleElement.id = \"PDFJS_FONT_STYLE_TAG_\".concat(this.docId);\n\n        this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n      }\n\n      var styleSheet = styleElement.sheet;\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this = this;\n\n      this.nativeFontFaces.forEach(function (nativeFontFace) {\n        _this._document.fonts[\"delete\"](nativeFontFace);\n      });\n      this.nativeFontFaces.length = 0;\n\n      if (this.styleElement) {\n        this.styleElement.remove();\n        this.styleElement = null;\n      }\n    }\n  }, {\n    key: \"bind\",\n    value: function () {\n      var _bind = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(font) {\n        var _this2 = this;\n\n        var nativeFontFace, rule;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(font.attached || font.missingFile)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                font.attached = true;\n\n                if (!this.isFontLoadingAPISupported) {\n                  _context.next = 19;\n                  break;\n                }\n\n                nativeFontFace = font.createNativeFontFace();\n\n                if (!nativeFontFace) {\n                  _context.next = 18;\n                  break;\n                }\n\n                this.addNativeFontFace(nativeFontFace);\n                _context.prev = 7;\n                _context.next = 10;\n                return nativeFontFace.loaded;\n\n              case 10:\n                _context.next = 18;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](7);\n\n                this._onUnsupportedFeature({\n                  featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                });\n\n                (0, _util.warn)(\"Failed to load font '\".concat(nativeFontFace.family, \"': '\").concat(_context.t0, \"'.\"));\n                font.disableFontFace = true;\n                throw _context.t0;\n\n              case 18:\n                return _context.abrupt(\"return\");\n\n              case 19:\n                rule = font.createFontFaceRule();\n\n                if (!rule) {\n                  _context.next = 26;\n                  break;\n                }\n\n                this.insertRule(rule);\n\n                if (!this.isSyncFontLoadingSupported) {\n                  _context.next = 24;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 24:\n                _context.next = 26;\n                return new Promise(function (resolve) {\n                  var request = _this2._queueLoadingCallback(resolve);\n\n                  _this2._prepareFontLoadEvent([rule], [font], request);\n                });\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 12]]);\n      }));\n\n      function bind(_x) {\n        return _bind.apply(this, arguments);\n      }\n\n      return bind;\n    }()\n  }, {\n    key: \"_queueLoadingCallback\",\n    value: function _queueLoadingCallback(callback) {\n      (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n    }\n  }, {\n    key: \"isFontLoadingAPISupported\",\n    get: function get() {\n      var _this$_document;\n\n      return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", !!((_this$_document = this._document) !== null && _this$_document !== void 0 && _this$_document.fonts));\n    }\n  }, {\n    key: \"isSyncFontLoadingSupported\",\n    get: function get() {\n      (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n    }\n  }, {\n    key: \"_loadTestFont\",\n    get: function get() {\n      (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n    }\n  }, {\n    key: \"_prepareFontLoadEvent\",\n    value: function _prepareFontLoadEvent(rules, fontsToLoad, request) {\n      (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n    }\n  }]);\n\n  return BaseFontLoader;\n}();\n\nvar FontLoader;\nexports.FontLoader = FontLoader;\n{\n  exports.FontLoader = FontLoader = /*#__PURE__*/function (_BaseFontLoader) {\n    _inherits(GenericFontLoader, _BaseFontLoader);\n\n    var _super = _createSuper(GenericFontLoader);\n\n    function GenericFontLoader(params) {\n      var _this3;\n\n      _classCallCheck(this, GenericFontLoader);\n\n      _this3 = _super.call(this, params);\n      _this3.loadingContext = {\n        requests: [],\n        nextRequestId: 0\n      };\n      _this3.loadTestFontId = 0;\n      return _this3;\n    }\n\n    _createClass(GenericFontLoader, [{\n      key: \"isSyncFontLoadingSupported\",\n      get: function get() {\n        var supported = false;\n\n        if (typeof navigator === \"undefined\") {\n          supported = true;\n        } else {\n          var m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n          if ((m === null || m === void 0 ? void 0 : m[1]) >= 14) {\n            supported = true;\n          }\n        }\n\n        return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n      }\n    }, {\n      key: \"_queueLoadingCallback\",\n      value: function _queueLoadingCallback(callback) {\n        function completeRequest() {\n          (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n          request.done = true;\n\n          while (context.requests.length > 0 && context.requests[0].done) {\n            var otherRequest = context.requests.shift();\n            setTimeout(otherRequest.callback, 0);\n          }\n        }\n\n        var context = this.loadingContext;\n        var request = {\n          id: \"pdfjs-font-loading-\".concat(context.nextRequestId++),\n          done: false,\n          complete: completeRequest,\n          callback: callback\n        };\n        context.requests.push(request);\n        return request;\n      }\n    }, {\n      key: \"_loadTestFont\",\n      get: function get() {\n        var getLoadTestFont = function getLoadTestFont() {\n          return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n        };\n\n        return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n      }\n    }, {\n      key: \"_prepareFontLoadEvent\",\n      value: function _prepareFontLoadEvent(rules, fonts, request) {\n        var _this4 = this;\n\n        function int32(data, offset) {\n          return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n        }\n\n        function spliceString(s, offset, remove, insert) {\n          var chunk1 = s.substring(0, offset);\n          var chunk2 = s.substring(offset + remove);\n          return chunk1 + insert + chunk2;\n        }\n\n        var i, ii;\n\n        var canvas = this._document.createElement(\"canvas\");\n\n        canvas.width = 1;\n        canvas.height = 1;\n        var ctx = canvas.getContext(\"2d\");\n        var called = 0;\n\n        function isFontReady(name, callback) {\n          called++;\n\n          if (called > 30) {\n            (0, _util.warn)(\"Load test font never loaded.\");\n            callback();\n            return;\n          }\n\n          ctx.font = \"30px \" + name;\n          ctx.fillText(\".\", 0, 20);\n          var imageData = ctx.getImageData(0, 0, 1, 1);\n\n          if (imageData.data[3] > 0) {\n            callback();\n            return;\n          }\n\n          setTimeout(isFontReady.bind(null, name, callback));\n        }\n\n        var loadTestFontId = \"lt\".concat(Date.now()).concat(this.loadTestFontId++);\n        var data = this._loadTestFont;\n        var COMMENT_OFFSET = 976;\n        data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n        var CFF_CHECKSUM_OFFSET = 16;\n        var XXXX_VALUE = 0x58585858;\n        var checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n        for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n        }\n\n        if (i < loadTestFontId.length) {\n          checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n        }\n\n        data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n        var url = \"url(data:font/opentype;base64,\".concat(btoa(data), \");\");\n        var rule = \"@font-face {font-family:\\\"\".concat(loadTestFontId, \"\\\";src:\").concat(url, \"}\");\n        this.insertRule(rule);\n        var names = [];\n\n        for (i = 0, ii = fonts.length; i < ii; i++) {\n          names.push(fonts[i].loadedName);\n        }\n\n        names.push(loadTestFontId);\n\n        var div = this._document.createElement(\"div\");\n\n        div.style.visibility = \"hidden\";\n        div.style.width = div.style.height = \"10px\";\n        div.style.position = \"absolute\";\n        div.style.top = div.style.left = \"0px\";\n\n        for (i = 0, ii = names.length; i < ii; ++i) {\n          var span = this._document.createElement(\"span\");\n\n          span.textContent = \"Hi\";\n          span.style.fontFamily = names[i];\n          div.appendChild(span);\n        }\n\n        this._document.body.appendChild(div);\n\n        isFontReady(loadTestFontId, function () {\n          _this4._document.body.removeChild(div);\n\n          request.complete();\n        });\n      }\n    }]);\n\n    return GenericFontLoader;\n  }(BaseFontLoader);\n}\n\nvar FontFaceObject = /*#__PURE__*/function () {\n  function FontFaceObject(translatedData, _ref2) {\n    var _ref2$isEvalSupported = _ref2.isEvalSupported,\n        isEvalSupported = _ref2$isEvalSupported === void 0 ? true : _ref2$isEvalSupported,\n        _ref2$disableFontFace = _ref2.disableFontFace,\n        disableFontFace = _ref2$disableFontFace === void 0 ? false : _ref2$disableFontFace,\n        _ref2$ignoreErrors = _ref2.ignoreErrors,\n        ignoreErrors = _ref2$ignoreErrors === void 0 ? false : _ref2$ignoreErrors,\n        onUnsupportedFeature = _ref2.onUnsupportedFeature,\n        _ref2$fontRegistry = _ref2.fontRegistry,\n        fontRegistry = _ref2$fontRegistry === void 0 ? null : _ref2$fontRegistry;\n\n    _classCallCheck(this, FontFaceObject);\n\n    this.compiledGlyphs = Object.create(null);\n\n    for (var i in translatedData) {\n      this[i] = translatedData[i];\n    }\n\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  _createClass(FontFaceObject, [{\n    key: \"createNativeFontFace\",\n    value: function createNativeFontFace() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      var nativeFontFace = new FontFace(this.loadedName, this.data, {});\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this);\n      }\n\n      return nativeFontFace;\n    }\n  }, {\n    key: \"createFontFaceRule\",\n    value: function createFontFaceRule() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n\n      var data = (0, _util.bytesToString)(new Uint8Array(this.data));\n      var url = \"url(data:\".concat(this.mimetype, \";base64,\").concat(btoa(data), \");\");\n      var rule = \"@font-face {font-family:\\\"\".concat(this.loadedName, \"\\\";src:\").concat(url, \"}\");\n\n      if (this.fontRegistry) {\n        this.fontRegistry.registerFont(this, url);\n      }\n\n      return rule;\n    }\n  }, {\n    key: \"getPathGenerator\",\n    value: function getPathGenerator(objs, character) {\n      if (this.compiledGlyphs[character] !== undefined) {\n        return this.compiledGlyphs[character];\n      }\n\n      var cmds, current;\n\n      try {\n        cmds = objs.get(this.loadedName + \"_path_\" + character);\n      } catch (ex) {\n        if (!this.ignoreErrors) {\n          throw ex;\n        }\n\n        this._onUnsupportedFeature({\n          featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n        });\n\n        (0, _util.warn)(\"getPathGenerator - ignoring character: \\\"\".concat(ex, \"\\\".\"));\n        return this.compiledGlyphs[character] = null;\n      }\n\n      if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n        var args,\n            js = \"\";\n\n        for (var i = 0, ii = cmds.length; i < ii; i++) {\n          current = cmds[i];\n\n          if (current.args !== undefined) {\n            args = current.args.join(\",\");\n          } else {\n            args = \"\";\n          }\n\n          js += \"c.\" + current.cmd + \"(\" + args + \");\\n\";\n        }\n\n        return this.compiledGlyphs[character] = new Function(\"c\", \"size\", js);\n      }\n\n      return this.compiledGlyphs[character] = function (c, size) {\n        for (var _i = 0, _ii = cmds.length; _i < _ii; _i++) {\n          current = cmds[_i];\n\n          if (current.cmd === \"scale\") {\n            current.args = [size, -size];\n          }\n\n          c[current.cmd].apply(c, current.args);\n        }\n      };\n    }\n  }]);\n\n  return FontFaceObject;\n}();\n\nexports.FontFaceObject = FontFaceObject;\n\n/***/ }),\n/* 137 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\nvar _display_utils = __w_pdfjs_require__(1);\n\nvar _is_node = __w_pdfjs_require__(6);\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NodeCanvasFactory = function NodeCanvasFactory() {\n  _classCallCheck(this, NodeCanvasFactory);\n\n  (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n};\n\nexports.NodeCanvasFactory = NodeCanvasFactory;\n\nvar NodeCMapReaderFactory = function NodeCMapReaderFactory() {\n  _classCallCheck(this, NodeCMapReaderFactory);\n\n  (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n};\n\nexports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\nif (_is_node.isNodeJS) {\n  exports.NodeCanvasFactory = NodeCanvasFactory = /*#__PURE__*/function (_BaseCanvasFactory) {\n    _inherits(NodeCanvasFactory, _BaseCanvasFactory);\n\n    var _super = _createSuper(NodeCanvasFactory);\n\n    function NodeCanvasFactory() {\n      _classCallCheck(this, NodeCanvasFactory);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(NodeCanvasFactory, [{\n      key: \"create\",\n      value: function create(width, height) {\n        if (width <= 0 || height <= 0) {\n          throw new Error(\"Invalid canvas size\");\n        }\n\n        var Canvas = __webpack_require__(/*! canvas */ \"?97a1\");\n\n        var canvas = Canvas.createCanvas(width, height);\n        return {\n          canvas: canvas,\n          context: canvas.getContext(\"2d\")\n        };\n      }\n    }]);\n\n    return NodeCanvasFactory;\n  }(_display_utils.BaseCanvasFactory);\n\n  exports.NodeCMapReaderFactory = NodeCMapReaderFactory = /*#__PURE__*/function (_BaseCMapReaderFactor) {\n    _inherits(NodeCMapReaderFactory, _BaseCMapReaderFactor);\n\n    var _super2 = _createSuper(NodeCMapReaderFactory);\n\n    function NodeCMapReaderFactory() {\n      _classCallCheck(this, NodeCMapReaderFactory);\n\n      return _super2.apply(this, arguments);\n    }\n\n    _createClass(NodeCMapReaderFactory, [{\n      key: \"_fetchData\",\n      value: function _fetchData(url, compressionType) {\n        return new Promise(function (resolve, reject) {\n          var fs = __webpack_require__(/*! fs */ \"?6e49\");\n\n          fs.readFile(url, function (error, data) {\n            if (error || !data) {\n              reject(new Error(error));\n              return;\n            }\n\n            resolve({\n              cMapData: new Uint8Array(data),\n              compressionType: compressionType\n            });\n          });\n        });\n      }\n    }]);\n\n    return NodeCMapReaderFactory;\n  }(_display_utils.BaseCMapReaderFactory);\n}\n\n/***/ }),\n/* 138 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AnnotationStorage = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AnnotationStorage = /*#__PURE__*/function () {\n  function AnnotationStorage() {\n    _classCallCheck(this, AnnotationStorage);\n\n    this._storage = new Map();\n    this._modified = false;\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  _createClass(AnnotationStorage, [{\n    key: \"getOrCreateValue\",\n    value: function getOrCreateValue(key, defaultValue) {\n      if (this._storage.has(key)) {\n        return this._storage.get(key);\n      }\n\n      this._storage.set(key, defaultValue);\n\n      return defaultValue;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      var obj = this._storage.get(key);\n\n      var modified = false;\n\n      if (obj !== undefined) {\n        for (var _i = 0, _Object$entries = Object.entries(value); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              entry = _Object$entries$_i[0],\n              val = _Object$entries$_i[1];\n\n          if (obj[entry] !== val) {\n            modified = true;\n            obj[entry] = val;\n          }\n        }\n      } else {\n        this._storage.set(key, value);\n\n        modified = true;\n      }\n\n      if (modified) {\n        this._setModified();\n      }\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      if (this._storage.size === 0) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._storage);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._storage.size;\n    }\n  }, {\n    key: \"_setModified\",\n    value: function _setModified() {\n      if (!this._modified) {\n        this._modified = true;\n\n        if (typeof this.onSetModified === \"function\") {\n          this.onSetModified();\n        }\n      }\n    }\n  }, {\n    key: \"resetModified\",\n    value: function resetModified() {\n      if (this._modified) {\n        this._modified = false;\n\n        if (typeof this.onResetModified === \"function\") {\n          this.onResetModified();\n        }\n      }\n    }\n  }]);\n\n  return AnnotationStorage;\n}();\n\nexports.AnnotationStorage = AnnotationStorage;\n\n/***/ }),\n/* 139 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.apiCompatibilityParams = void 0;\n\nvar _is_node = __w_pdfjs_require__(6);\n\nvar compatibilityParams = Object.create(null);\n{\n  (function checkFontFace() {\n    if (_is_node.isNodeJS) {\n      compatibilityParams.disableFontFace = true;\n    }\n  })();\n}\nvar apiCompatibilityParams = Object.freeze(compatibilityParams);\nexports.apiCompatibilityParams = apiCompatibilityParams;\n\n/***/ }),\n/* 140 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CanvasGraphics = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _pattern_helper = __w_pdfjs_require__(141);\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar MIN_FONT_SIZE = 16;\nvar MAX_FONT_SIZE = 100;\nvar MAX_GROUP_SIZE = 4096;\nvar COMPILE_TYPE3_GLYPHS = false;\nvar MAX_SIZE_TO_COMPILE = 1000;\nvar FULL_CHUNK_HEIGHT = 16;\n\nfunction addContextCurrentTransform(ctx) {\n  if (!ctx.mozCurrentTransform) {\n    ctx._originalSave = ctx.save;\n    ctx._originalRestore = ctx.restore;\n    ctx._originalRotate = ctx.rotate;\n    ctx._originalScale = ctx.scale;\n    ctx._originalTranslate = ctx.translate;\n    ctx._originalTransform = ctx.transform;\n    ctx._originalSetTransform = ctx.setTransform;\n    ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n    ctx._transformStack = [];\n    Object.defineProperty(ctx, \"mozCurrentTransform\", {\n      get: function getCurrentTransform() {\n        return this._transformMatrix;\n      }\n    });\n    Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n      get: function getCurrentTransformInverse() {\n        var m = this._transformMatrix;\n        var a = m[0],\n            b = m[1],\n            c = m[2],\n            d = m[3],\n            e = m[4],\n            f = m[5];\n        var ad_bc = a * d - b * c;\n        var bc_ad = b * c - a * d;\n        return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n      }\n    });\n\n    ctx.save = function ctxSave() {\n      var old = this._transformMatrix;\n\n      this._transformStack.push(old);\n\n      this._transformMatrix = old.slice(0, 6);\n\n      this._originalSave();\n    };\n\n    ctx.restore = function ctxRestore() {\n      var prev = this._transformStack.pop();\n\n      if (prev) {\n        this._transformMatrix = prev;\n\n        this._originalRestore();\n      }\n    };\n\n    ctx.translate = function ctxTranslate(x, y) {\n      var m = this._transformMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n\n      this._originalTranslate(x, y);\n    };\n\n    ctx.scale = function ctxScale(x, y) {\n      var m = this._transformMatrix;\n      m[0] = m[0] * x;\n      m[1] = m[1] * x;\n      m[2] = m[2] * y;\n      m[3] = m[3] * y;\n\n      this._originalScale(x, y);\n    };\n\n    ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n      var m = this._transformMatrix;\n      this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n      ctx._originalTransform(a, b, c, d, e, f);\n    };\n\n    ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n      this._transformMatrix = [a, b, c, d, e, f];\n\n      ctx._originalSetTransform(a, b, c, d, e, f);\n    };\n\n    ctx.rotate = function ctxRotate(angle) {\n      var cosValue = Math.cos(angle);\n      var sinValue = Math.sin(angle);\n      var m = this._transformMatrix;\n      this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n      this._originalRotate(angle);\n    };\n  }\n}\n\nvar CachedCanvases = function CachedCanvasesClosure() {\n  function CachedCanvases(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  CachedCanvases.prototype = {\n    getCanvas: function CachedCanvases_getCanvas(id, width, height, trackTransform) {\n      var canvasEntry;\n\n      if (this.cache[id] !== undefined) {\n        canvasEntry = this.cache[id];\n        this.canvasFactory.reset(canvasEntry, width, height);\n        canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n      } else {\n        canvasEntry = this.canvasFactory.create(width, height);\n        this.cache[id] = canvasEntry;\n      }\n\n      if (trackTransform) {\n        addContextCurrentTransform(canvasEntry.context);\n      }\n\n      return canvasEntry;\n    },\n    clear: function clear() {\n      for (var id in this.cache) {\n        var canvasEntry = this.cache[id];\n        this.canvasFactory.destroy(canvasEntry);\n        delete this.cache[id];\n      }\n    }\n  };\n  return CachedCanvases;\n}();\n\nfunction compileType3Glyph(imgData) {\n  var POINT_TO_PROCESS_LIMIT = 1000;\n  var width = imgData.width,\n      height = imgData.height,\n      width1 = width + 1;\n  var i, ii, j, j0;\n  var points = new Uint8Array(width1 * (height + 1));\n  var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n  var lineSize = width + 7 & ~7,\n      data0 = imgData.data;\n  var data = new Uint8Array(lineSize * height);\n  var pos = 0;\n\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    var elem = data0[i];\n    var mask = 128;\n\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  var count = 0;\n  pos = 0;\n\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n\n    pos++;\n  }\n\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n\n    var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n    for (j = 1; j < width; j++) {\n      sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n\n      pos++;\n    }\n\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n\n    pos++;\n  }\n\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  var outlines = [];\n\n  for (i = 0; count && i <= height; i++) {\n    var p = i * width1;\n    var end = p + width;\n\n    while (p < end && !points[p]) {\n      p++;\n    }\n\n    if (p === end) {\n      continue;\n    }\n\n    var coords = [p % width1, i];\n    var p0 = p;\n    var type = points[p];\n\n    do {\n      var step = steps[type];\n\n      do {\n        p += step;\n      } while (!points[p]);\n\n      var pp = points[p];\n\n      if (pp !== 5 && pp !== 10) {\n        type = pp;\n        points[p] = 0;\n      } else {\n        type = pp & 0x33 * type >> 4;\n        points[p] &= type >> 2 | type << 2;\n      }\n\n      coords.push(p % width1);\n      coords.push(p / width1 | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n\n    outlines.push(coords);\n    --i;\n  }\n\n  var drawOutline = function drawOutline(c) {\n    c.save();\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n\n    for (var k = 0, kk = outlines.length; k < kk; k++) {\n      var o = outlines[k];\n      c.moveTo(o[0], o[1]);\n\n      for (var l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nvar CanvasExtraState = function CanvasExtraStateClosure() {\n  function CanvasExtraState() {\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = _util.IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    this.x = 0;\n    this.y = 0;\n    this.lineX = 0;\n    this.lineY = 0;\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = _util.TextRenderingMode.FILL;\n    this.textRise = 0;\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.resumeSMaskCtx = null;\n    this.transferMaps = null;\n  }\n\n  CanvasExtraState.prototype = {\n    clone: function CanvasExtraState_clone() {\n      return Object.create(this);\n    },\n    setCurrentPoint: function CanvasExtraState_setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  };\n  return CanvasExtraState;\n}();\n\nvar CanvasGraphics = function CanvasGraphicsClosure() {\n  var EXECUTION_TIME = 15;\n  var EXECUTION_STEPS = 10;\n\n  function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, webGLContext, imageLayer, optionalContentConfig) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState();\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.webGLContext = webGLContext;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n\n    if (canvasCtx) {\n      addContextCurrentTransform(canvasCtx);\n    }\n\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  function putBinaryImageData(ctx, imgData) {\n    var transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n      ctx.putImageData(imgData, 0, 0);\n      return;\n    }\n\n    var height = imgData.height,\n        width = imgData.width;\n    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    var srcPos = 0,\n        destPos;\n    var src = imgData.data;\n    var dest = chunkImgData.data;\n    var i, j, thisChunkHeight, elemsInThisChunk;\n    var transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n    if (transferMaps) {\n      switch (transferMaps.length) {\n        case 1:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[0];\n          transferMapBlue = transferMaps[0];\n          transferMapGray = transferMaps[0];\n          break;\n\n        case 4:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[1];\n          transferMapBlue = transferMaps[2];\n          transferMapGray = transferMaps[3];\n          break;\n      }\n    }\n\n    if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n      var srcLength = src.byteLength;\n      var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n      var dest32DataLength = dest32.length;\n      var fullSrcDiff = width + 7 >> 3;\n      var white = 0xffffffff;\n      var black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n      if (transferMapGray) {\n        if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n          var _ref = [black, white];\n          white = _ref[0];\n          black = _ref[1];\n        }\n      }\n\n      for (i = 0; i < totalChunks; i++) {\n        thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        destPos = 0;\n\n        for (j = 0; j < thisChunkHeight; j++) {\n          var srcDiff = srcLength - srcPos;\n          var k = 0;\n          var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n          var kEndUnrolled = kEnd & ~7;\n          var mask = 0;\n          var srcByte = 0;\n\n          for (; k < kEndUnrolled; k += 8) {\n            srcByte = src[srcPos++];\n            dest32[destPos++] = srcByte & 128 ? white : black;\n            dest32[destPos++] = srcByte & 64 ? white : black;\n            dest32[destPos++] = srcByte & 32 ? white : black;\n            dest32[destPos++] = srcByte & 16 ? white : black;\n            dest32[destPos++] = srcByte & 8 ? white : black;\n            dest32[destPos++] = srcByte & 4 ? white : black;\n            dest32[destPos++] = srcByte & 2 ? white : black;\n            dest32[destPos++] = srcByte & 1 ? white : black;\n          }\n\n          for (; k < kEnd; k++) {\n            if (mask === 0) {\n              srcByte = src[srcPos++];\n              mask = 128;\n            }\n\n            dest32[destPos++] = srcByte & mask ? white : black;\n            mask >>= 1;\n          }\n        }\n\n        while (destPos < dest32DataLength) {\n          dest32[destPos++] = 0;\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n      var hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n      j = 0;\n      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n      for (i = 0; i < fullChunks; i++) {\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n        srcPos += elemsInThisChunk;\n\n        if (hasTransferMaps) {\n          for (var _k = 0; _k < elemsInThisChunk; _k += 4) {\n            if (transferMapRed) {\n              dest[_k + 0] = transferMapRed[dest[_k + 0]];\n            }\n\n            if (transferMapGreen) {\n              dest[_k + 1] = transferMapGreen[dest[_k + 1]];\n            }\n\n            if (transferMapBlue) {\n              dest[_k + 2] = transferMapBlue[dest[_k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n        j += FULL_CHUNK_HEIGHT;\n      }\n\n      if (i < totalChunks) {\n        elemsInThisChunk = width * partialChunkHeight * 4;\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n        if (hasTransferMaps) {\n          for (var _k2 = 0; _k2 < elemsInThisChunk; _k2 += 4) {\n            if (transferMapRed) {\n              dest[_k2 + 0] = transferMapRed[dest[_k2 + 0]];\n            }\n\n            if (transferMapGreen) {\n              dest[_k2 + 1] = transferMapGreen[dest[_k2 + 1]];\n            }\n\n            if (transferMapBlue) {\n              dest[_k2 + 2] = transferMapBlue[dest[_k2 + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n      }\n    } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n      var _hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n\n      thisChunkHeight = FULL_CHUNK_HEIGHT;\n      elemsInThisChunk = width * thisChunkHeight;\n\n      for (i = 0; i < totalChunks; i++) {\n        if (i >= fullChunks) {\n          thisChunkHeight = partialChunkHeight;\n          elemsInThisChunk = width * thisChunkHeight;\n        }\n\n        destPos = 0;\n\n        for (j = elemsInThisChunk; j--;) {\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = 255;\n        }\n\n        if (_hasTransferMaps) {\n          for (var _k3 = 0; _k3 < destPos; _k3 += 4) {\n            if (transferMapRed) {\n              dest[_k3 + 0] = transferMapRed[dest[_k3 + 0]];\n            }\n\n            if (transferMapGreen) {\n              dest[_k3 + 1] = transferMapGreen[dest[_k3 + 1]];\n            }\n\n            if (transferMapBlue) {\n              dest[_k3 + 2] = transferMapBlue[dest[_k3 + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else {\n      throw new Error(\"bad image kind: \".concat(imgData.kind));\n    }\n  }\n\n  CanvasGraphics.putBinaryImageData = putBinaryImageData;\n\n  function putBinaryImageMask(ctx, imgData) {\n    var height = imgData.height,\n        width = imgData.width;\n    var partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n    var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    var srcPos = 0;\n    var src = imgData.data;\n    var dest = chunkImgData.data;\n\n    for (var i = 0; i < totalChunks; i++) {\n      var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      var destPos = 3;\n\n      for (var j = 0; j < thisChunkHeight; j++) {\n        var elem = void 0,\n            mask = 0;\n\n        for (var k = 0; k < width; k++) {\n          if (!mask) {\n            elem = src[srcPos++];\n            mask = 128;\n          }\n\n          dest[destPos] = elem & mask ? 0 : 255;\n          destPos += 4;\n          mask >>= 1;\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  }\n\n  function copyCtxState(sourceCtx, destCtx) {\n    var properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n    for (var i = 0, ii = properties.length; i < ii; i++) {\n      var property = properties[i];\n\n      if (sourceCtx[property] !== undefined) {\n        destCtx[property] = sourceCtx[property];\n      }\n    }\n\n    if (sourceCtx.setLineDash !== undefined) {\n      destCtx.setLineDash(sourceCtx.getLineDash());\n      destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n    }\n  }\n\n  function resetCtxToDefault(ctx) {\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRule = \"nonzero\";\n    ctx.globalAlpha = 1;\n    ctx.lineWidth = 1;\n    ctx.lineCap = \"butt\";\n    ctx.lineJoin = \"miter\";\n    ctx.miterLimit = 10;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.font = \"10px sans-serif\";\n\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash([]);\n      ctx.lineDashOffset = 0;\n    }\n  }\n\n  function composeSMaskBackdrop(bytes, r0, g0, b0) {\n    var length = bytes.length;\n\n    for (var i = 3; i < length; i += 4) {\n      var alpha = bytes[i];\n\n      if (alpha === 0) {\n        bytes[i - 3] = r0;\n        bytes[i - 2] = g0;\n        bytes[i - 1] = b0;\n      } else if (alpha < 255) {\n        var alpha_ = 255 - alpha;\n        bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n        bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n        bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n      }\n    }\n  }\n\n  function composeSMaskAlpha(maskData, layerData, transferMap) {\n    var length = maskData.length;\n    var scale = 1 / 255;\n\n    for (var i = 3; i < length; i += 4) {\n      var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n      layerData[i] = layerData[i] * alpha * scale | 0;\n    }\n  }\n\n  function composeSMaskLuminosity(maskData, layerData, transferMap) {\n    var length = maskData.length;\n\n    for (var i = 3; i < length; i += 4) {\n      var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n      layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n    }\n  }\n\n  function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n    var hasBackdrop = !!backdrop;\n    var r0 = hasBackdrop ? backdrop[0] : 0;\n    var g0 = hasBackdrop ? backdrop[1] : 0;\n    var b0 = hasBackdrop ? backdrop[2] : 0;\n    var composeFn;\n\n    if (subtype === \"Luminosity\") {\n      composeFn = composeSMaskLuminosity;\n    } else {\n      composeFn = composeSMaskAlpha;\n    }\n\n    var PIXELS_TO_PROCESS = 1048576;\n    var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n    for (var row = 0; row < height; row += chunkSize) {\n      var chunkHeight = Math.min(chunkSize, height - row);\n      var maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n      var layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n      if (hasBackdrop) {\n        composeSMaskBackdrop(maskData.data, r0, g0, b0);\n      }\n\n      composeFn(maskData.data, layerData.data, transferMap);\n      maskCtx.putImageData(layerData, 0, row);\n    }\n  }\n\n  function composeSMask(ctx, smask, layerCtx, webGLContext) {\n    var mask = smask.canvas;\n    var maskCtx = smask.context;\n    ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n    var backdrop = smask.backdrop || null;\n\n    if (!smask.transferMap && webGLContext.isEnabled) {\n      var composed = webGLContext.composeSMask({\n        layer: layerCtx.canvas,\n        mask: mask,\n        properties: {\n          subtype: smask.subtype,\n          backdrop: backdrop\n        }\n      });\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(composed, smask.offsetX, smask.offsetY);\n      return;\n    }\n\n    genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, backdrop, smask.transferMap);\n    ctx.drawImage(mask, 0, 0);\n  }\n\n  var LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  var LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n  var NORMAL_CLIP = {};\n  var EO_CLIP = {};\n  CanvasGraphics.prototype = {\n    beginDrawing: function beginDrawing(_ref2) {\n      var transform = _ref2.transform,\n          viewport = _ref2.viewport,\n          _ref2$transparency = _ref2.transparency,\n          transparency = _ref2$transparency === void 0 ? false : _ref2$transparency,\n          _ref2$background = _ref2.background,\n          background = _ref2$background === void 0 ? null : _ref2$background;\n      var width = this.ctx.canvas.width;\n      var height = this.ctx.canvas.height;\n      this.ctx.save();\n      this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n      this.ctx.fillRect(0, 0, width, height);\n      this.ctx.restore();\n\n      if (transparency) {\n        var transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n        this.compositeCtx = this.ctx;\n        this.transparentCanvas = transparentCanvas.canvas;\n        this.ctx = transparentCanvas.context;\n        this.ctx.save();\n        this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n      }\n\n      this.ctx.save();\n      resetCtxToDefault(this.ctx);\n\n      if (transform) {\n        this.ctx.transform.apply(this.ctx, transform);\n      }\n\n      this.ctx.transform.apply(this.ctx, viewport.transform);\n      this.baseTransform = this.ctx.mozCurrentTransform.slice();\n      this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n      if (this.imageLayer) {\n        this.imageLayer.beginLayout();\n      }\n    },\n    executeOperatorList: function CanvasGraphics_executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n      var argsArray = operatorList.argsArray;\n      var fnArray = operatorList.fnArray;\n      var i = executionStartIdx || 0;\n      var argsArrayLen = argsArray.length;\n\n      if (argsArrayLen === i) {\n        return i;\n      }\n\n      var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n      var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n      var steps = 0;\n      var commonObjs = this.commonObjs;\n      var objs = this.objs;\n      var fnId;\n\n      while (true) {\n        if (stepper !== undefined && i === stepper.nextBreakPoint) {\n          stepper.breakIt(i, continueCallback);\n          return i;\n        }\n\n        fnId = fnArray[i];\n\n        if (fnId !== _util.OPS.dependency) {\n          this.setCurrentOperatorIndex(i);\n          this[fnId].apply(this, argsArray[i]);\n        } else {\n          var _iterator = _createForOfIteratorHelper(argsArray[i]),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var depObjId = _step.value;\n              var objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n              if (!objsPool.has(depObjId)) {\n                objsPool.get(depObjId, continueCallback);\n                return i;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        i++;\n\n        if (i === argsArrayLen) {\n          return i;\n        }\n\n        if (chunkOperations && ++steps > EXECUTION_STEPS) {\n          if (Date.now() > endTime) {\n            continueCallback();\n            return i;\n          }\n\n          steps = 0;\n        }\n      }\n    },\n    restoreInitialState: function CanvasGraphics_restoreInitialState() {\n      while (this.stateStack.length || this.current.activeSMask !== null) {\n        this.restore();\n      }\n\n      this.ctx.restore();\n\n      if (this.transparentCanvas) {\n        this.ctx = this.compositeCtx;\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.drawImage(this.transparentCanvas, 0, 0);\n        this.ctx.restore();\n        this.transparentCanvas = null;\n      }\n    },\n    endDrawing: function CanvasGraphics_endDrawing() {\n      this.restoreInitialState();\n      this.cachedCanvases.clear();\n      this.webGLContext.clear();\n\n      if (this.imageLayer) {\n        this.imageLayer.endLayout();\n      }\n    },\n    setLineWidth: function CanvasGraphics_setLineWidth(width) {\n      this.current.lineWidth = width;\n      this.ctx.lineWidth = width;\n    },\n    setLineCap: function CanvasGraphics_setLineCap(style) {\n      this.ctx.lineCap = LINE_CAP_STYLES[style];\n    },\n    setLineJoin: function CanvasGraphics_setLineJoin(style) {\n      this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n    },\n    setMiterLimit: function CanvasGraphics_setMiterLimit(limit) {\n      this.ctx.miterLimit = limit;\n    },\n    setDash: function CanvasGraphics_setDash(dashArray, dashPhase) {\n      var ctx = this.ctx;\n\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash(dashArray);\n        ctx.lineDashOffset = dashPhase;\n      }\n    },\n    setRenderingIntent: function setRenderingIntent(intent) {},\n    setFlatness: function setFlatness(flatness) {},\n    setGState: function CanvasGraphics_setGState(states) {\n      for (var i = 0, ii = states.length; i < ii; i++) {\n        var state = states[i];\n        var key = state[0];\n        var value = state[1];\n\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n\n          case \"Font\":\n            this.setFont(value[0], value[1]);\n            break;\n\n          case \"CA\":\n            this.current.strokeAlpha = state[1];\n            break;\n\n          case \"ca\":\n            this.current.fillAlpha = state[1];\n            this.ctx.globalAlpha = state[1];\n            break;\n\n          case \"BM\":\n            this.ctx.globalCompositeOperation = value;\n            break;\n\n          case \"SMask\":\n            if (this.current.activeSMask) {\n              if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                this.suspendSMaskGroup();\n              } else {\n                this.endSMaskGroup();\n              }\n            }\n\n            this.current.activeSMask = value ? this.tempSMask : null;\n\n            if (this.current.activeSMask) {\n              this.beginSMaskGroup();\n            }\n\n            this.tempSMask = null;\n            break;\n\n          case \"TR\":\n            this.current.transferMaps = value;\n        }\n      }\n    },\n    beginSMaskGroup: function CanvasGraphics_beginSMaskGroup() {\n      var activeSMask = this.current.activeSMask;\n      var drawnWidth = activeSMask.canvas.width;\n      var drawnHeight = activeSMask.canvas.height;\n      var cacheId = \"smaskGroupAt\" + this.groupLevel;\n      var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n      var currentCtx = this.ctx;\n      var currentTransform = currentCtx.mozCurrentTransform;\n      this.ctx.save();\n      var groupCtx = scratchCanvas.context;\n      groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n      groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n      groupCtx.transform.apply(groupCtx, currentTransform);\n      activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    },\n    suspendSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n      var groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n      composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n      this.ctx.restore();\n      this.ctx.save();\n      copyCtxState(groupCtx, this.ctx);\n      this.current.resumeSMaskCtx = groupCtx;\n\n      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n      groupCtx.save();\n      groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n      groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n      groupCtx.restore();\n    },\n    resumeSMaskGroup: function CanvasGraphics_resumeSMaskGroup() {\n      var groupCtx = this.current.resumeSMaskCtx;\n      var currentCtx = this.ctx;\n      this.ctx = groupCtx;\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    },\n    endSMaskGroup: function CanvasGraphics_endSMaskGroup() {\n      var groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n      composeSMask(this.ctx, this.current.activeSMask, groupCtx, this.webGLContext);\n      this.ctx.restore();\n      copyCtxState(groupCtx, this.ctx);\n\n      var deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n    },\n    save: function CanvasGraphics_save() {\n      this.ctx.save();\n      var old = this.current;\n      this.stateStack.push(old);\n      this.current = old.clone();\n      this.current.resumeSMaskCtx = null;\n    },\n    restore: function CanvasGraphics_restore() {\n      if (this.current.resumeSMaskCtx) {\n        this.resumeSMaskGroup();\n      }\n\n      if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n        this.endSMaskGroup();\n      }\n\n      if (this.stateStack.length !== 0) {\n        this.current = this.stateStack.pop();\n        this.ctx.restore();\n        this.pendingClip = null;\n        this._cachedGetSinglePixelWidth = null;\n      } else {\n        this.current.activeSMask = null;\n      }\n    },\n    transform: function CanvasGraphics_transform(a, b, c, d, e, f) {\n      if (typeof this.ctx.needDelegateInlineImageGroup === \"function\" && this.ctx.needDelegateInlineImageGroup()) {\n        return;\n      }\n\n      this.ctx.transform(a, b, c, d, e, f);\n      this._cachedGetSinglePixelWidth = null;\n    },\n    constructPath: function CanvasGraphics_constructPath(ops, args) {\n      var ctx = this.ctx;\n      var current = this.current;\n      var x = current.x,\n          y = current.y;\n\n      for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {\n        switch (ops[i] | 0) {\n          case _util.OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            var width = args[j++];\n            var height = args[j++];\n            var xw = x + width;\n            var yh = y + height;\n            ctx.moveTo(x, y);\n\n            if (width === 0 || height === 0) {\n              ctx.lineTo(xw, yh);\n            } else {\n              ctx.lineTo(xw, y);\n              ctx.lineTo(xw, yh);\n              ctx.lineTo(x, yh);\n            }\n\n            ctx.closePath();\n            break;\n\n          case _util.OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.moveTo(x, y);\n            break;\n\n          case _util.OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.lineTo(x, y);\n            break;\n\n          case _util.OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n            j += 6;\n            break;\n\n          case _util.OPS.curveTo2:\n            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n\n          case _util.OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n            j += 4;\n            break;\n\n          case _util.OPS.closePath:\n            ctx.closePath();\n            break;\n        }\n      }\n\n      current.setCurrentPoint(x, y);\n    },\n    closePath: function CanvasGraphics_closePath() {\n      this.ctx.closePath();\n    },\n    stroke: function CanvasGraphics_stroke(consumePath) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      var ctx = this.ctx;\n      var strokeColor = this.current.strokeColor;\n      ctx.globalAlpha = this.current.strokeAlpha;\n\n      if (this.contentVisible) {\n        if (_typeof(strokeColor) === \"object\" && strokeColor !== null && strokeColor !== void 0 && strokeColor.getPattern) {\n          ctx.save();\n          var transform = ctx.mozCurrentTransform;\n\n          var scale = _util.Util.singularValueDecompose2dScale(transform)[0];\n\n          ctx.strokeStyle = strokeColor.getPattern(ctx, this);\n          var lineWidth = this.getSinglePixelWidth();\n          var scaledLineWidth = this.current.lineWidth * scale;\n\n          if (lineWidth < 0 && -lineWidth >= scaledLineWidth) {\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          } else {\n            ctx.lineWidth = Math.max(lineWidth, scaledLineWidth);\n          }\n\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          var _lineWidth = this.getSinglePixelWidth();\n\n          if (_lineWidth < 0 && -_lineWidth >= this.current.lineWidth) {\n            ctx.save();\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            ctx.lineWidth = Math.max(_lineWidth, this.current.lineWidth);\n            ctx.stroke();\n          }\n        }\n      }\n\n      if (consumePath) {\n        this.consumePath();\n      }\n\n      ctx.globalAlpha = this.current.fillAlpha;\n    },\n    closeStroke: function CanvasGraphics_closeStroke() {\n      this.closePath();\n      this.stroke();\n    },\n    fill: function CanvasGraphics_fill(consumePath, isFillStrokeCombo) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      var ctx = this.ctx;\n      var fillColor = this.current.fillColor;\n      var isPatternFill = this.current.patternFill;\n      var needRestore = false;\n\n      if (isPatternFill) {\n        ctx.save();\n\n        if (this.baseTransform) {\n          ctx.setTransform.apply(ctx, this.baseTransform);\n        }\n\n        ctx.fillStyle = fillColor.getPattern(ctx, this);\n        needRestore = true;\n      }\n\n      if (this.contentVisible) {\n        if (ctx.isLMVCanvasContext && typeof ctx.isLMVCanvasContext === \"function\" && ctx.isLMVCanvasContext()) {\n          if (this.pendingEOFill) {\n            ctx.fill('evenodd', isFillStrokeCombo);\n            this.pendingEOFill = false;\n          } else {\n            ctx.fill(isFillStrokeCombo);\n          }\n        } else {\n          if (this.pendingEOFill) {\n            ctx.fill('evenodd');\n            this.pendingEOFill = false;\n          } else {\n            ctx.fill();\n          }\n        }\n      }\n\n      if (needRestore) {\n        ctx.restore();\n      }\n\n      if (consumePath) {\n        this.consumePath();\n      }\n    },\n    eoFill: function CanvasGraphics_eoFill() {\n      this.pendingEOFill = true;\n      this.fill();\n    },\n    fillStroke: function CanvasGraphics_fillStroke() {\n      this.fill(false, true);\n      this.stroke(false);\n      this.consumePath();\n    },\n    eoFillStroke: function CanvasGraphics_eoFillStroke() {\n      this.pendingEOFill = true;\n      this.fillStroke();\n    },\n    closeFillStroke: function CanvasGraphics_closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    },\n    closeEOFillStroke: function CanvasGraphics_closeEOFillStroke() {\n      this.pendingEOFill = true;\n      this.closePath();\n      this.fillStroke();\n    },\n    endPath: function CanvasGraphics_endPath() {\n      this.consumePath();\n    },\n    clip: function CanvasGraphics_clip() {\n      this.pendingClip = NORMAL_CLIP;\n    },\n    eoClip: function CanvasGraphics_eoClip() {\n      this.pendingClip = EO_CLIP;\n    },\n    beginText: function CanvasGraphics_beginText() {\n      this.current.textMatrix = _util.IDENTITY_MATRIX;\n      this.current.textMatrixScale = 1;\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    },\n    endText: function CanvasGraphics_endText() {\n      var paths = this.pendingTextPaths;\n      var ctx = this.ctx;\n\n      if (paths === undefined) {\n        ctx.beginPath();\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n\n      for (var i = 0; i < paths.length; i++) {\n        var path = paths[i];\n        ctx.setTransform.apply(ctx, path.transform);\n        ctx.translate(path.x, path.y);\n        path.addToPath(ctx, path.fontSize);\n      }\n\n      ctx.restore();\n      ctx.clip();\n      ctx.beginPath();\n      delete this.pendingTextPaths;\n    },\n    setCharSpacing: function CanvasGraphics_setCharSpacing(spacing) {\n      this.current.charSpacing = spacing;\n    },\n    setWordSpacing: function CanvasGraphics_setWordSpacing(spacing) {\n      this.current.wordSpacing = spacing;\n    },\n    setHScale: function CanvasGraphics_setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    },\n    setLeading: function CanvasGraphics_setLeading(leading) {\n      this.current.leading = -leading;\n    },\n    setFont: function CanvasGraphics_setFont(fontRefName, size) {\n      var fontObj = this.commonObjs.get(fontRefName);\n      var current = this.current;\n\n      if (!fontObj) {\n        throw new Error(\"Can't find font for \".concat(fontRefName));\n      }\n\n      current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n        (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n      }\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n\n      this.current.font = fontObj;\n      this.current.fontSize = size;\n\n      if (fontObj.isType3Font) {\n        return;\n      }\n\n      var name = fontObj.loadedName || \"sans-serif\";\n      var bold = \"normal\";\n\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n\n      var italic = fontObj.italic ? \"italic\" : \"normal\";\n      var typeface = \"\\\"\".concat(name, \"\\\", \").concat(fontObj.fallbackName);\n      var browserFontSize = size;\n\n      if (size < MIN_FONT_SIZE) {\n        browserFontSize = MIN_FONT_SIZE;\n      } else if (size > MAX_FONT_SIZE) {\n        browserFontSize = MAX_FONT_SIZE;\n      }\n\n      this.current.fontSizeScale = size / browserFontSize;\n      this.ctx.font = \"\".concat(italic, \" \").concat(bold, \" \").concat(browserFontSize, \"px \").concat(typeface);\n    },\n    setTextRenderingMode: function CanvasGraphics_setTextRenderingMode(mode) {\n      this.current.textRenderingMode = mode;\n    },\n    setTextRise: function CanvasGraphics_setTextRise(rise) {\n      this.current.textRise = rise;\n    },\n    moveText: function CanvasGraphics_moveText(x, y) {\n      this.current.x = this.current.lineX += x;\n      this.current.y = this.current.lineY += y;\n    },\n    setLeadingMoveText: function CanvasGraphics_setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    },\n    setTextMatrix: function CanvasGraphics_setTextMatrix(a, b, c, d, e, f) {\n      this.current.textMatrix = [a, b, c, d, e, f];\n      this.current.textMatrixScale = Math.hypot(a, b);\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    },\n    nextLine: function CanvasGraphics_nextLine() {\n      this.moveText(0, this.current.leading);\n    },\n    paintChar: function paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n      var ctx = this.ctx;\n      var current = this.current;\n      var font = current.font;\n      var textRenderingMode = current.textRenderingMode;\n      var fontSize = current.fontSize / current.fontSizeScale;\n      var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n      var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n      var patternFill = current.patternFill && !font.missingFile;\n      var addToPath;\n\n      if (font.disableFontFace || isAddToPathSet || patternFill) {\n        addToPath = font.getPathGenerator(this.commonObjs, character);\n      }\n\n      if (addToPath && (font.disableFontFace || patternFill)) {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.beginPath(character, x, y, font, fontSize);\n        addToPath(ctx, fontSize);\n\n        if (patternTransform) {\n          ctx.setTransform.apply(ctx, patternTransform);\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          ctx.fill();\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          if (resetLineWidthToOne) {\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          }\n\n          ctx.stroke();\n        }\n\n        ctx.restore();\n      } else {\n        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          ctx.fillText(character, x, y, undefined, font, fontSize);\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          if (resetLineWidthToOne) {\n            ctx.save();\n            ctx.moveTo(x, y);\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.strokeText(character, 0, 0, undefined, font, fontSize);\n            ctx.restore();\n          } else {\n            ctx.strokeText(character, x, y, undefined, font, fontSize);\n          }\n        }\n      }\n\n      if (addToPath && isAddToPathSet) {\n        var paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n        paths.push({\n          transform: ctx.mozCurrentTransform,\n          x: x,\n          y: y,\n          fontSize: fontSize,\n          addToPath: addToPath\n        });\n      }\n    },\n\n    get isFontSubpixelAAEnabled() {\n      var _this$cachedCanvases$ = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10),\n          ctx = _this$cachedCanvases$.context;\n\n      ctx.scale(1.5, 1);\n      ctx.fillText(\"I\", 0, 10);\n      var data = ctx.getImageData(0, 0, 10, 10).data;\n      var enabled = false;\n\n      for (var i = 3; i < data.length; i += 4) {\n        if (data[i] > 0 && data[i] < 255) {\n          enabled = true;\n          break;\n        }\n      }\n\n      return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n    },\n\n    showText: function CanvasGraphics_showText(glyphs) {\n      var current = this.current;\n      var font = current.font;\n\n      if (font.isType3Font) {\n        return this.showType3Text(glyphs);\n      }\n\n      var fontSize = current.fontSize;\n\n      if (fontSize === 0) {\n        return undefined;\n      }\n\n      var ctx = this.ctx;\n      var fontSizeScale = current.fontSizeScale;\n      var charSpacing = current.charSpacing;\n      var wordSpacing = current.wordSpacing;\n      var fontDirection = current.fontDirection;\n      var textHScale = current.textHScale * fontDirection;\n      var glyphsLength = glyphs.length;\n      var vertical = font.vertical;\n      var spacingDir = vertical ? 1 : -1;\n      var defaultVMetrics = font.defaultVMetrics;\n      var widthAdvanceScale = fontSize * current.fontMatrix[0];\n      var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n      ctx.save();\n      var patternTransform;\n\n      if (current.patternFill) {\n        ctx.save();\n        var pattern = current.fillColor.getPattern(ctx, this);\n        patternTransform = ctx.mozCurrentTransform;\n        ctx.restore();\n        ctx.fillStyle = pattern;\n      }\n\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y + current.textRise);\n\n      if (fontDirection > 0) {\n        ctx.scale(textHScale, -1);\n      } else {\n        ctx.scale(textHScale, 1);\n      }\n\n      var lineWidth = current.lineWidth;\n      var resetLineWidthToOne = false;\n      var scale = current.textMatrixScale;\n\n      if (scale === 0 || lineWidth === 0) {\n        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          this._cachedGetSinglePixelWidth = null;\n          lineWidth = this.getSinglePixelWidth();\n          resetLineWidthToOne = lineWidth < 0;\n        }\n      } else {\n        lineWidth /= scale;\n      }\n\n      if (fontSizeScale !== 1.0) {\n        ctx.scale(fontSizeScale, fontSizeScale);\n        lineWidth /= fontSizeScale;\n      }\n\n      ctx.lineWidth = lineWidth;\n      var x = 0,\n          i;\n\n      for (i = 0; i < glyphsLength; ++i) {\n        var glyph = glyphs[i];\n\n        if ((0, _util.isNum)(glyph)) {\n          x += spacingDir * glyph * fontSize / 1000;\n          continue;\n        }\n\n        var restoreNeeded = false;\n        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        var character = glyph.fontChar;\n        var accent = glyph.accent;\n        var scaledX = void 0,\n            scaledY = void 0;\n        var width = glyph.width;\n\n        if (vertical) {\n          var vmetric = glyph.vmetric || defaultVMetrics;\n          var vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n          var vy = vmetric[2] * widthAdvanceScale;\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (font.remeasure && width > 0) {\n          var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n            var characterScaleX = width / measuredWidth;\n            restoreNeeded = true;\n            ctx.save();\n            ctx.scale(characterScaleX, 1);\n            scaledX /= characterScaleX;\n          } else if (width !== measuredWidth) {\n            scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n          }\n        }\n\n        if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n          if (simpleFillText && !accent) {\n            ctx.fillText(character, scaledX, scaledY);\n          } else {\n            this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n            if (accent) {\n              var scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n              var scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n              this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n            }\n          }\n        }\n\n        var charWidth = void 0;\n\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n\n        if (restoreNeeded) {\n          ctx.restore();\n        }\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      ctx.restore();\n    },\n    showType3Text: function CanvasGraphics_showType3Text(glyphs) {\n      var ctx = this.ctx;\n      var current = this.current;\n      var font = current.font;\n      var fontSize = current.fontSize;\n      var fontDirection = current.fontDirection;\n      var spacingDir = font.vertical ? 1 : -1;\n      var charSpacing = current.charSpacing;\n      var wordSpacing = current.wordSpacing;\n      var textHScale = current.textHScale * fontDirection;\n      var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n      var glyphsLength = glyphs.length;\n      var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n      var i, glyph, width, spacingLength;\n\n      if (isTextInvisible || fontSize === 0) {\n        return;\n      }\n\n      this._cachedGetSinglePixelWidth = null;\n      ctx.save();\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y);\n      ctx.scale(textHScale, fontDirection);\n\n      for (i = 0; i < glyphsLength; ++i) {\n        glyph = glyphs[i];\n\n        if ((0, _util.isNum)(glyph)) {\n          spacingLength = spacingDir * glyph * fontSize / 1000;\n          this.ctx.translate(spacingLength, 0);\n          current.x += spacingLength * textHScale;\n          continue;\n        }\n\n        var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        var operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n        if (!operatorList) {\n          (0, _util.warn)(\"Type3 character \\\"\".concat(glyph.operatorListId, \"\\\" is not available.\"));\n          continue;\n        }\n\n        if (this.contentVisible) {\n          this.processingType3 = glyph;\n          this.save();\n          ctx.scale(fontSize, fontSize);\n          ctx.transform.apply(ctx, fontMatrix);\n          this.executeOperatorList(operatorList);\n          this.restore();\n        }\n\n        var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n        width = transformed[0] * fontSize + spacing;\n        ctx.translate(width, 0);\n        current.x += width * textHScale;\n      }\n\n      ctx.restore();\n      this.processingType3 = null;\n    },\n    setCharWidth: function CanvasGraphics_setCharWidth(xWidth, yWidth) {},\n    setCharWidthAndBounds: function CanvasGraphics_setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n      this.ctx.rect(llx, lly, urx - llx, ury - lly);\n      this.clip();\n      this.endPath();\n    },\n    getColorN_Pattern: function CanvasGraphics_getColorN_Pattern(IR) {\n      var _this = this;\n\n      var pattern;\n\n      if (IR[0] === \"TilingPattern\") {\n        var color = IR[1];\n        var baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n        var canvasGraphicsFactory = {\n          createCanvasGraphics: function createCanvasGraphics(ctx) {\n            return new CanvasGraphics(ctx, _this.commonObjs, _this.objs, _this.canvasFactory, _this.webGLContext);\n          }\n        };\n        pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n      } else {\n        pattern = (0, _pattern_helper.getShadingPatternFromIR)(IR);\n      }\n\n      return pattern;\n    },\n    setStrokeColorN: function CanvasGraphics_setStrokeColorN() {\n      this.current.strokeColor = this.getColorN_Pattern(arguments);\n    },\n    setFillColorN: function CanvasGraphics_setFillColorN() {\n      this.current.fillColor = this.getColorN_Pattern(arguments);\n      this.current.patternFill = true;\n    },\n    setStrokeRGBColor: function CanvasGraphics_setStrokeRGBColor(r, g, b) {\n      var color = _util.Util.makeHexColor(r, g, b);\n\n      this.ctx.strokeStyle = color;\n      this.current.strokeColor = color;\n    },\n    setFillRGBColor: function CanvasGraphics_setFillRGBColor(r, g, b) {\n      var color = _util.Util.makeHexColor(r, g, b);\n\n      this.ctx.fillStyle = color;\n      this.current.fillColor = color;\n      this.current.patternFill = false;\n    },\n    shadingFill: function CanvasGraphics_shadingFill(patternIR) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      this.save();\n      var pattern = (0, _pattern_helper.getShadingPatternFromIR)(patternIR);\n      ctx.fillStyle = pattern.getPattern(ctx, this, true);\n      var inv = ctx.mozCurrentTransformInverse;\n\n      if (inv) {\n        var canvas = ctx.canvas;\n        var width = canvas.width;\n        var height = canvas.height;\n\n        var bl = _util.Util.applyTransform([0, 0], inv);\n\n        var br = _util.Util.applyTransform([0, height], inv);\n\n        var ul = _util.Util.applyTransform([width, 0], inv);\n\n        var ur = _util.Util.applyTransform([width, height], inv);\n\n        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n      } else {\n        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n      }\n\n      this.restore();\n    },\n    beginInlineImage: function CanvasGraphics_beginInlineImage() {\n      (0, _util.unreachable)(\"Should not call beginInlineImage\");\n    },\n    beginImageData: function CanvasGraphics_beginImageData() {\n      (0, _util.unreachable)(\"Should not call beginImageData\");\n    },\n    paintFormXObjectBegin: function CanvasGraphics_paintFormXObjectBegin(matrix, bbox) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.save();\n      this.baseTransformStack.push(this.baseTransform);\n\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform.apply(this, matrix);\n      }\n\n      this.baseTransform = this.ctx.mozCurrentTransform;\n\n      if (bbox) {\n        var width = bbox[2] - bbox[0];\n        var height = bbox[3] - bbox[1];\n        this.ctx.rect(bbox[0], bbox[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n    },\n    paintFormXObjectEnd: function CanvasGraphics_paintFormXObjectEnd() {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.restore();\n      this.baseTransform = this.baseTransformStack.pop();\n    },\n    beginGroup: function CanvasGraphics_beginGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.save();\n      var currentCtx = this.ctx;\n\n      if (!group.isolated) {\n        (0, _util.info)(\"TODO: Support non-isolated groups.\");\n      }\n\n      if (group.knockout) {\n        (0, _util.warn)(\"Knockout groups not supported.\");\n      }\n\n      if (!(this.ctx.beginChildGroup && typeof this.ctx.beginChildGroup === \"function\" && this.ctx.beginChildGroup(group))) {\n        var currentTransform = currentCtx.mozCurrentTransform;\n\n        if (group.matrix) {\n          currentCtx.transform.apply(currentCtx, group.matrix);\n        }\n\n        if (!group.bbox) {\n          throw new Error(\"Bounding box is required.\");\n        }\n\n        var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n        var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n        bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n        var offsetX = Math.floor(bounds[0]);\n        var offsetY = Math.floor(bounds[1]);\n        var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n        var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n        var scaleX = 1,\n            scaleY = 1;\n\n        if (drawnWidth > MAX_GROUP_SIZE) {\n          scaleX = drawnWidth / MAX_GROUP_SIZE;\n          drawnWidth = MAX_GROUP_SIZE;\n        }\n\n        if (drawnHeight > MAX_GROUP_SIZE) {\n          scaleY = drawnHeight / MAX_GROUP_SIZE;\n          drawnHeight = MAX_GROUP_SIZE;\n        }\n\n        var cacheId = \"groupAt\" + this.groupLevel;\n\n        if (group.smask) {\n          cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n        }\n\n        var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n        var groupCtx = scratchCanvas.context;\n        groupCtx.scale(1 / scaleX, 1 / scaleY);\n        groupCtx.translate(-offsetX, -offsetY);\n        groupCtx.transform.apply(groupCtx, currentTransform);\n\n        if (group.smask) {\n          this.smaskStack.push({\n            canvas: scratchCanvas.canvas,\n            context: groupCtx,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            scaleX: scaleX,\n            scaleY: scaleY,\n            subtype: group.smask.subtype,\n            backdrop: group.smask.backdrop,\n            transferMap: group.smask.transferMap || null,\n            startTransformInverse: null\n          });\n        } else {\n          currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n          currentCtx.translate(offsetX, offsetY);\n          currentCtx.scale(scaleX, scaleY);\n        }\n\n        copyCtxState(currentCtx, groupCtx);\n        this.ctx = groupCtx;\n      }\n\n      this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n      this.current.activeSMask = null;\n    },\n    endGroup: function CanvasGraphics_endGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.groupLevel--;\n      var groupCtx = this.ctx;\n      this.ctx = this.groupStack.pop();\n\n      if (!(this.ctx.endChildGroup && typeof this.ctx.endChildGroup === \"function\" && this.ctx.endChildGroup(group))) {\n        if (this.ctx.imageSmoothingEnabled !== undefined) {\n          this.ctx.imageSmoothingEnabled = false;\n        } else {\n          this.ctx.mozImageSmoothingEnabled = false;\n        }\n\n        if (group.smask) {\n          this.tempSMask = this.smaskStack.pop();\n        } else {\n          this.ctx.drawImage(groupCtx.canvas, 0, 0);\n        }\n      }\n\n      this.restore();\n    },\n    beginAnnotations: function CanvasGraphics_beginAnnotations() {},\n    endAnnotations: function CanvasGraphics_endAnnotations() {},\n    beginAnnotation: function CanvasGraphics_beginAnnotation(rect, transform, matrix) {\n      this.restoreInitialState();\n      resetCtxToDefault(this.ctx);\n      this.ctx.save();\n      this.save();\n\n      if (this.baseTransform) {\n        this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n      }\n\n      this.ctx.beginPath();\n      this.current = new CanvasExtraState();\n\n      if (Array.isArray(rect) && rect.length === 4) {\n        var width = rect[2] - rect[0];\n        var height = rect[3] - rect[1];\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n\n      this.transform.apply(this, transform);\n      this.transform.apply(this, matrix);\n    },\n    endAnnotation: function CanvasGraphics_endAnnotation() {},\n    paintJpegXObject: function CanvasGraphics_paintJpegXObject(objId, w, h) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var domImage = this.processingType3 ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n      if (!domImage) {\n        (0, _util.warn)(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      this.save();\n      var ctx = this.ctx;\n      ctx.scale(1 / w, -1 / h);\n      ctx.drawImage(domImage, 0, 0, domImage.width, domImage.height, 0, -h, w, h);\n\n      if (this.imageLayer) {\n        var currentTransform = ctx.mozCurrentTransformInverse;\n        var position = this.getCanvasPosition(0, 0);\n        this.imageLayer.appendImage({\n          objId: objId,\n          left: position[0],\n          top: position[1],\n          width: w / currentTransform[0],\n          height: h / currentTransform[3]\n        });\n      }\n\n      this.restore();\n    },\n    paintImageMaskXObject: function CanvasGraphics_paintImageMaskXObject(img) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      var width = img.width,\n          height = img.height;\n      var fillColor = this.current.fillColor;\n      var isPatternFill = this.current.patternFill;\n      var glyph = this.processingType3;\n\n      if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n          glyph.compiled = compileType3Glyph({\n            data: img.data,\n            width: width,\n            height: height\n          });\n        } else {\n          glyph.compiled = null;\n        }\n      }\n\n      if (glyph !== null && glyph !== void 0 && glyph.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n\n      var maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      var maskCtx = maskCanvas.context;\n      maskCtx.save();\n      putBinaryImageMask(maskCtx, img);\n      maskCtx.globalCompositeOperation = \"source-in\";\n      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n      maskCtx.restore();\n      this.paintInlineImageXObject(maskCanvas.canvas);\n    },\n    paintImageMaskXObjectRepeat: function paintImageMaskXObjectRepeat(imgData, scaleX) {\n      var skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var scaleY = arguments.length > 4 ? arguments[4] : undefined;\n      var positions = arguments.length > 5 ? arguments[5] : undefined;\n\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var width = imgData.width;\n      var height = imgData.height;\n      var fillColor = this.current.fillColor;\n      var isPatternFill = this.current.patternFill;\n      var maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      var maskCtx = maskCanvas.context;\n      maskCtx.save();\n      putBinaryImageMask(maskCtx, imgData);\n      maskCtx.globalCompositeOperation = \"source-in\";\n      maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n      maskCtx.restore();\n      var ctx = this.ctx;\n\n      for (var i = 0, ii = positions.length; i < ii; i += 2) {\n        ctx.save();\n        ctx.transform(scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]);\n        ctx.scale(1, -1);\n        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n    },\n    paintImageMaskXObjectGroup: function CanvasGraphics_paintImageMaskXObjectGroup(images) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      var fillColor = this.current.fillColor;\n      var isPatternFill = this.current.patternFill;\n\n      for (var i = 0, ii = images.length; i < ii; i++) {\n        var image = images[i];\n        var width = image.width,\n            height = image.height;\n        var maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        var maskCtx = maskCanvas.context;\n        maskCtx.save();\n        putBinaryImageMask(maskCtx, image);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        ctx.save();\n        ctx.transform.apply(ctx, image.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n    },\n    paintImageXObject: function CanvasGraphics_paintImageXObject(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n      if (!imgData) {\n        (0, _util.warn)(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      this.paintInlineImageXObject(imgData);\n    },\n    paintImageXObjectRepeat: function CanvasGraphics_paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n      if (!imgData) {\n        (0, _util.warn)(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      var width = imgData.width;\n      var height = imgData.height;\n      var map = [];\n\n      for (var i = 0, ii = positions.length; i < ii; i += 2) {\n        map.push({\n          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n          x: 0,\n          y: 0,\n          w: width,\n          h: height\n        });\n      }\n\n      this.paintInlineImageXObjectGroup(imgData, map);\n    },\n    paintInlineImageXObject: function CanvasGraphics_paintInlineImageXObject(imgData) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var width = imgData.width;\n      var height = imgData.height;\n      var ctx = this.ctx;\n      this.save();\n      ctx.scale(1 / width, -1 / height);\n      var currentTransform = ctx.mozCurrentTransformInverse;\n      var widthScale = Math.max(Math.hypot(currentTransform[0], currentTransform[1]), 1);\n      var heightScale = Math.max(Math.hypot(currentTransform[2], currentTransform[3]), 1);\n      var imgToPaint, tmpCanvas, tmpCtx;\n\n      if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n        imgToPaint = imgData;\n      } else {\n        tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n        tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n        imgToPaint = tmpCanvas.canvas;\n      }\n\n      var paintWidth = width,\n          paintHeight = height;\n      var tmpCanvasId = \"prescale1\";\n\n      while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n        var newWidth = paintWidth,\n            newHeight = paintHeight;\n\n        if (widthScale > 2 && paintWidth > 1) {\n          newWidth = Math.ceil(paintWidth / 2);\n          widthScale /= paintWidth / newWidth;\n        }\n\n        if (heightScale > 2 && paintHeight > 1) {\n          newHeight = Math.ceil(paintHeight / 2);\n          heightScale /= paintHeight / newHeight;\n        }\n\n        tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n        tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, newWidth, newHeight);\n        tmpCtx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n        imgToPaint = tmpCanvas.canvas;\n        paintWidth = newWidth;\n        paintHeight = newHeight;\n        tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n      }\n\n      ctx.drawImage(imgToPaint, 0, 0, paintWidth, paintHeight, 0, -height, width, height);\n\n      if (this.imageLayer) {\n        var position = this.getCanvasPosition(0, -height);\n        this.imageLayer.appendImage({\n          imgData: imgData,\n          left: position[0],\n          top: position[1],\n          width: width / currentTransform[0],\n          height: height / currentTransform[3]\n        });\n      }\n\n      this.restore();\n    },\n    paintInlineImageXObjectGroup: function CanvasGraphics_paintInlineImageXObjectGroup(imgData, map) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      var w = imgData.width;\n      var h = imgData.height;\n      var tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      var tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n      for (var i = 0, ii = map.length; i < ii; i++) {\n        var entry = map[i];\n        ctx.save();\n        ctx.transform.apply(ctx, entry.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n        if (this.imageLayer) {\n          var position = this.getCanvasPosition(entry.x, entry.y);\n          this.imageLayer.appendImage({\n            imgData: imgData,\n            left: position[0],\n            top: position[1],\n            width: w,\n            height: h\n          });\n        }\n\n        ctx.restore();\n      }\n    },\n    paintSolidColorImageMask: function CanvasGraphics_paintSolidColorImageMask() {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.ctx.fillRect(0, 0, 1, 1);\n    },\n    markPoint: function CanvasGraphics_markPoint(tag) {},\n    markPointProps: function CanvasGraphics_markPointProps(tag, properties) {},\n    beginMarkedContent: function CanvasGraphics_beginMarkedContent(tag) {\n      this.markedContentStack.push({\n        visible: true\n      });\n\n      if (this.ctx.beginMarkedContent) {\n        this.ctx.beginMarkedContent(tag);\n      }\n    },\n    beginMarkedContentProps: function CanvasGraphics_beginMarkedContentProps(tag, properties) {\n      if (tag === \"OC\") {\n        this.markedContentStack.push({\n          visible: this.optionalContentConfig.isVisible(properties)\n        });\n      } else {\n        this.markedContentStack.push({\n          visible: true\n        });\n      }\n\n      this.contentVisible = true;\n\n      if (this.ctx.beginMarkedContentProps) {\n        this.ctx.beginMarkedContentProps(tag, properties);\n      }\n    },\n    endMarkedContent: function CanvasGraphics_endMarkedContent() {\n      this.markedContentStack.pop();\n      this.contentVisible = true;\n\n      if (this.ctx.endMarkedContent) {\n        this.ctx.endMarkedContent();\n      }\n    },\n    setCurrentOperatorIndex: function CanvasGraphics_setCurrentOperatorIndex(index) {\n      if (this.ctx.setCurrentOperatorIndex) {\n        this.ctx.setCurrentOperatorIndex(index);\n      }\n    },\n    beginCompat: function CanvasGraphics_beginCompat() {},\n    endCompat: function CanvasGraphics_endCompat() {},\n    consumePath: function CanvasGraphics_consumePath() {\n      var ctx = this.ctx;\n\n      if (this.pendingClip) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n\n        this.pendingClip = null;\n      }\n\n      ctx.beginPath();\n    },\n    getSinglePixelWidth: function getSinglePixelWidth() {\n      if (this._cachedGetSinglePixelWidth === null) {\n        this._cachedGetSinglePixelWidth = 1e-10;\n      }\n\n      return this._cachedGetSinglePixelWidth;\n    },\n    getCanvasPosition: function CanvasGraphics_getCanvasPosition(x, y) {\n      var transform = this.ctx.mozCurrentTransform;\n      return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n    },\n    isContentVisible: function CanvasGraphics_isContentVisible() {\n      for (var i = this.markedContentStack.length - 1; i >= 0; i--) {\n        if (!this.markedContentStack[i].visible) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  };\n\n  for (var op in _util.OPS) {\n    CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n  }\n\n  return CanvasGraphics;\n}();\n\nexports.CanvasGraphics = CanvasGraphics;\n\n/***/ }),\n/* 141 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getShadingPatternFromIR = getShadingPatternFromIR;\nexports.TilingPattern = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar ShadingIRs = {};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n\n  var width = bbox[2] - bbox[0];\n  var height = bbox[3] - bbox[1];\n  var region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nShadingIRs.RadialAxial = {\n  fromIR: function RadialAxial_fromIR(raw) {\n    var type = raw[1];\n    var bbox = raw[2];\n    var colorStops = raw[3];\n    var p0 = raw[4];\n    var p1 = raw[5];\n    var r0 = raw[6];\n    var r1 = raw[7];\n    return {\n      getPattern: function RadialAxial_getPattern(ctx) {\n        applyBoundingBox(ctx, bbox);\n        var grad;\n\n        if (type === \"axial\") {\n          grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n        } else if (type === \"radial\") {\n          grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n        }\n\n        if (grad) {\n          grad.rawData = raw;\n        }\n\n        for (var i = 0, ii = colorStops.length; i < ii; ++i) {\n          var c = colorStops[i];\n          grad.addColorStop(c[0], c[1]);\n        }\n\n        return grad;\n      }\n    };\n  }\n};\n\nvar createMeshCanvas = function createMeshCanvasClosure() {\n  function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n    var coords = context.coords,\n        colors = context.colors;\n    var bytes = data.data,\n        rowSize = data.width * 4;\n    var tmp;\n\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n\n    if (coords[p2 + 1] > coords[p3 + 1]) {\n      tmp = p2;\n      p2 = p3;\n      p3 = tmp;\n      tmp = c2;\n      c2 = c3;\n      c3 = tmp;\n    }\n\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n\n    var x1 = (coords[p1] + context.offsetX) * context.scaleX;\n    var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n    var x2 = (coords[p2] + context.offsetX) * context.scaleX;\n    var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n    var x3 = (coords[p3] + context.offsetX) * context.scaleX;\n    var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n    if (y1 >= y3) {\n      return;\n    }\n\n    var c1r = colors[c1],\n        c1g = colors[c1 + 1],\n        c1b = colors[c1 + 2];\n    var c2r = colors[c2],\n        c2g = colors[c2 + 1],\n        c2b = colors[c2 + 2];\n    var c3r = colors[c3],\n        c3g = colors[c3 + 1],\n        c3b = colors[c3 + 2];\n    var minY = Math.round(y1),\n        maxY = Math.round(y3);\n    var xa, car, cag, cab;\n    var xb, cbr, cbg, cbb;\n\n    for (var y = minY; y <= maxY; y++) {\n      if (y < y2) {\n        var _k = void 0;\n\n        if (y < y1) {\n          _k = 0;\n        } else if (y1 === y2) {\n          _k = 1;\n        } else {\n          _k = (y1 - y) / (y1 - y2);\n        }\n\n        xa = x1 - (x1 - x2) * _k;\n        car = c1r - (c1r - c2r) * _k;\n        cag = c1g - (c1g - c2g) * _k;\n        cab = c1b - (c1b - c2b) * _k;\n      } else {\n        var _k2 = void 0;\n\n        if (y > y3) {\n          _k2 = 1;\n        } else if (y2 === y3) {\n          _k2 = 0;\n        } else {\n          _k2 = (y2 - y) / (y2 - y3);\n        }\n\n        xa = x2 - (x2 - x3) * _k2;\n        car = c2r - (c2r - c3r) * _k2;\n        cag = c2g - (c2g - c3g) * _k2;\n        cab = c2b - (c2b - c3b) * _k2;\n      }\n\n      var k = void 0;\n\n      if (y < y1) {\n        k = 0;\n      } else if (y > y3) {\n        k = 1;\n      } else {\n        k = (y1 - y) / (y1 - y3);\n      }\n\n      xb = x1 - (x1 - x3) * k;\n      cbr = c1r - (c1r - c3r) * k;\n      cbg = c1g - (c1g - c3g) * k;\n      cbb = c1b - (c1b - c3b) * k;\n      var x1_ = Math.round(Math.min(xa, xb));\n      var x2_ = Math.round(Math.max(xa, xb));\n      var j = rowSize * y + x1_ * 4;\n\n      for (var x = x1_; x <= x2_; x++) {\n        k = (xa - x) / (xa - xb);\n\n        if (k < 0) {\n          k = 0;\n        } else if (k > 1) {\n          k = 1;\n        }\n\n        bytes[j++] = car - (car - cbr) * k | 0;\n        bytes[j++] = cag - (cag - cbg) * k | 0;\n        bytes[j++] = cab - (cab - cbb) * k | 0;\n        bytes[j++] = 255;\n      }\n    }\n  }\n\n  function drawFigure(data, figure, context) {\n    var ps = figure.coords;\n    var cs = figure.colors;\n    var i, ii;\n\n    switch (figure.type) {\n      case \"lattice\":\n        var verticesPerRow = figure.verticesPerRow;\n        var rows = Math.floor(ps.length / verticesPerRow) - 1;\n        var cols = verticesPerRow - 1;\n\n        for (i = 0; i < rows; i++) {\n          var q = i * verticesPerRow;\n\n          for (var j = 0; j < cols; j++, q++) {\n            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n          }\n        }\n\n        break;\n\n      case \"triangles\":\n        for (i = 0, ii = ps.length; i < ii; i += 3) {\n          drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n        }\n\n        break;\n\n      default:\n        throw new Error(\"illegal figure\");\n    }\n  }\n\n  function createMeshCanvas(bounds, combinesScale, coords, colors, figures, backgroundColor, cachedCanvases, webGLContext) {\n    var EXPECTED_SCALE = 1.1;\n    var MAX_PATTERN_SIZE = 3000;\n    var BORDER_SIZE = 2;\n    var offsetX = Math.floor(bounds[0]);\n    var offsetY = Math.floor(bounds[1]);\n    var boundsWidth = Math.ceil(bounds[2]) - offsetX;\n    var boundsHeight = Math.ceil(bounds[3]) - offsetY;\n    var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinesScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n    var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinesScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n    var scaleX = boundsWidth / width;\n    var scaleY = boundsHeight / height;\n    var context = {\n      coords: coords,\n      colors: colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY\n    };\n    var paddedWidth = width + BORDER_SIZE * 2;\n    var paddedHeight = height + BORDER_SIZE * 2;\n    var canvas, tmpCanvas, i, ii;\n\n    if (webGLContext.isEnabled) {\n      canvas = webGLContext.drawFigures({\n        width: width,\n        height: height,\n        backgroundColor: backgroundColor,\n        figures: figures,\n        context: context\n      });\n      tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n      tmpCanvas.context.drawImage(canvas, BORDER_SIZE, BORDER_SIZE);\n      canvas = tmpCanvas.canvas;\n    } else {\n      tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n      var tmpCtx = tmpCanvas.context;\n      var data = tmpCtx.createImageData(width, height);\n\n      if (backgroundColor) {\n        var bytes = data.data;\n\n        for (i = 0, ii = bytes.length; i < ii; i += 4) {\n          bytes[i] = backgroundColor[0];\n          bytes[i + 1] = backgroundColor[1];\n          bytes[i + 2] = backgroundColor[2];\n          bytes[i + 3] = 255;\n        }\n      }\n\n      for (i = 0; i < figures.length; i++) {\n        drawFigure(data, figures[i], context);\n      }\n\n      tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n      canvas = tmpCanvas.canvas;\n    }\n\n    return {\n      canvas: canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  return createMeshCanvas;\n}();\n\nShadingIRs.Mesh = {\n  fromIR: function Mesh_fromIR(raw) {\n    var coords = raw[2];\n    var colors = raw[3];\n    var figures = raw[4];\n    var bounds = raw[5];\n    var matrix = raw[6];\n    var bbox = raw[7];\n    var background = raw[8];\n    return {\n      getPattern: function Mesh_getPattern(ctx, owner, shadingFill) {\n        applyBoundingBox(ctx, bbox);\n        var scale;\n\n        if (shadingFill) {\n          scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n        } else {\n          scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n          if (matrix) {\n            var matrixScale = _util.Util.singularValueDecompose2dScale(matrix);\n\n            scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n          }\n        }\n\n        var temporaryPatternCanvas = createMeshCanvas(bounds, scale, coords, colors, figures, shadingFill ? null : background, owner.cachedCanvases, owner.webGLContext);\n\n        if (!shadingFill) {\n          ctx.setTransform.apply(ctx, owner.baseTransform);\n\n          if (matrix) {\n            ctx.transform.apply(ctx, matrix);\n          }\n        }\n\n        ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n        ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n        return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n      }\n    };\n  }\n};\nShadingIRs.Dummy = {\n  fromIR: function Dummy_fromIR() {\n    return {\n      getPattern: function Dummy_fromIR_getPattern() {\n        return \"hotpink\";\n      }\n    };\n  }\n};\n\nfunction getShadingPatternFromIR(raw) {\n  var shadingIR = ShadingIRs[raw[0]];\n\n  if (!shadingIR) {\n    throw new Error(\"Unknown IR type: \".concat(raw[0]));\n  }\n\n  return shadingIR.fromIR(raw);\n}\n\nvar TilingPattern = function TilingPatternClosure() {\n  var PaintType = {\n    COLORED: 1,\n    UNCOLORED: 2\n  };\n  var MAX_PATTERN_SIZE = 3000;\n\n  function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n    this.ctx = ctx;\n  }\n\n  TilingPattern.prototype = {\n    createPatternCanvas: function TilinPattern_createPatternCanvas(owner) {\n      var operatorList = this.operatorList;\n      var bbox = this.bbox;\n      var xstep = this.xstep;\n      var ystep = this.ystep;\n      var paintType = this.paintType;\n      var tilingType = this.tilingType;\n      var color = this.color;\n      var canvasGraphicsFactory = this.canvasGraphicsFactory;\n      (0, _util.info)(\"TilingType: \" + tilingType);\n      var x0 = bbox[0],\n          y0 = bbox[1],\n          x1 = bbox[2],\n          y1 = bbox[3];\n\n      var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n      var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n      var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n      var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n      var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n      var tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n      var tmpCtx = tmpCanvas.context;\n      var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n      graphics.groupLevel = owner.groupLevel;\n      this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n      graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n      graphics.transform(1, 0, 0, 1, -x0, -y0);\n      this.clipBbox(graphics, bbox, x0, y0, x1, y1);\n      graphics.executeOperatorList(operatorList);\n      this.ctx.transform(1, 0, 0, 1, x0, y0);\n      this.ctx.scale(1 / dimx.scale, 1 / dimy.scale);\n      return tmpCanvas.canvas;\n    },\n    getSizeAndScale: function TilingPattern_getSizeAndScale(step, realOutputSize, scale) {\n      step = Math.abs(step);\n      var maxSize = Math.max(MAX_PATTERN_SIZE, realOutputSize);\n      var size = Math.ceil(step * scale);\n\n      if (size >= maxSize) {\n        size = maxSize;\n      } else {\n        scale = size / step;\n      }\n\n      return {\n        scale: scale,\n        size: size\n      };\n    },\n    clipBbox: function clipBbox(graphics, bbox, x0, y0, x1, y1) {\n      if (Array.isArray(bbox) && bbox.length === 4) {\n        var bboxWidth = x1 - x0;\n        var bboxHeight = y1 - y0;\n        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n        graphics.clip();\n        graphics.endPath();\n      }\n    },\n    setFillAndStrokeStyleToContext: function setFillAndStrokeStyleToContext(graphics, paintType, color) {\n      var context = graphics.ctx,\n          current = graphics.current;\n\n      switch (paintType) {\n        case PaintType.COLORED:\n          var ctx = this.ctx;\n          context.fillStyle = ctx.fillStyle;\n          context.strokeStyle = ctx.strokeStyle;\n          current.fillColor = ctx.fillStyle;\n          current.strokeColor = ctx.strokeStyle;\n          break;\n\n        case PaintType.UNCOLORED:\n          var cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n          context.fillStyle = cssColor;\n          context.strokeStyle = cssColor;\n          current.fillColor = cssColor;\n          current.strokeColor = cssColor;\n          break;\n\n        default:\n          throw new _util.FormatError(\"Unsupported paint type: \".concat(paintType));\n      }\n    },\n    getPattern: function TilingPattern_getPattern(ctx, owner) {\n      ctx = this.ctx;\n      ctx.setTransform.apply(ctx, this.baseTransform);\n      ctx.transform.apply(ctx, this.matrix);\n      var temporaryPatternCanvas = this.createPatternCanvas(owner);\n      return ctx.createPattern(temporaryPatternCanvas, \"repeat\");\n    }\n  };\n  return TilingPattern;\n}();\n\nexports.TilingPattern = TilingPattern;\n\n/***/ }),\n/* 142 */\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.GlobalWorkerOptions = void 0;\nvar GlobalWorkerOptions = Object.create(null);\nexports.GlobalWorkerOptions = GlobalWorkerOptions;\nGlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\nGlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n\n/***/ }),\n/* 143 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MessageHandler = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2\n};\nvar StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8\n};\n\nfunction wrapReason(reason) {\n  if (_typeof(reason) !== \"object\" || reason === null) {\n    return reason;\n  }\n\n  switch (reason.name) {\n    case \"AbortException\":\n      return new _util.AbortException(reason.message);\n\n    case \"MissingPDFException\":\n      return new _util.MissingPDFException(reason.message);\n\n    case \"UnexpectedResponseException\":\n      return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n    case \"UnknownErrorException\":\n      return new _util.UnknownErrorException(reason.message, reason.details);\n\n    default:\n      return new _util.UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nvar MessageHandler = /*#__PURE__*/function () {\n  function MessageHandler(sourceName, targetName, comObj) {\n    var _this = this;\n\n    _classCallCheck(this, MessageHandler);\n\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = function (event) {\n      var data = event.data;\n\n      if (data.targetName !== _this.sourceName) {\n        return;\n      }\n\n      if (data.stream) {\n        _this._processStreamMessage(data);\n\n        return;\n      }\n\n      if (data.callback) {\n        var callbackId = data.callbackId;\n        var capability = _this.callbackCapabilities[callbackId];\n\n        if (!capability) {\n          throw new Error(\"Cannot resolve callback \".concat(callbackId));\n        }\n\n        delete _this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n\n        return;\n      }\n\n      var action = _this.actionHandler[data.action];\n\n      if (!action) {\n        throw new Error(\"Unknown action from worker: \".concat(data.action));\n      }\n\n      if (data.callbackId) {\n        var cbSourceName = _this.sourceName;\n        var cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(function (result) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.DATA,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName: cbSourceName,\n            targetName: cbTargetName,\n            callback: CallbackKind.ERROR,\n            callbackId: data.callbackId,\n            reason: wrapReason(reason)\n          });\n        });\n        return;\n      }\n\n      if (data.streamId) {\n        _this._createStreamSink(data);\n\n        return;\n      }\n\n      action(data.data);\n    };\n\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  _createClass(MessageHandler, [{\n    key: \"on\",\n    value: function on(actionName, handler) {\n      var ah = this.actionHandler;\n\n      if (ah[actionName]) {\n        throw new Error(\"There is already an actionName called \\\"\".concat(actionName, \"\\\"\"));\n      }\n\n      ah[actionName] = handler;\n    }\n  }, {\n    key: \"send\",\n    value: function send(actionName, data, transfers) {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data: data\n      }, transfers);\n    }\n  }, {\n    key: \"sendWithPromise\",\n    value: function sendWithPromise(actionName, data, transfers) {\n      var callbackId = this.callbackId++;\n      var capability = (0, _util.createPromiseCapability)();\n      this.callbackCapabilities[callbackId] = capability;\n\n      try {\n        this._postMessage({\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId: callbackId,\n          data: data\n        }, transfers);\n      } catch (ex) {\n        capability.reject(ex);\n      }\n\n      return capability.promise;\n    }\n  }, {\n    key: \"sendWithStream\",\n    value: function sendWithStream(actionName, data, queueingStrategy, transfers) {\n      var _this2 = this;\n\n      var streamId = this.streamId++;\n      var sourceName = this.sourceName;\n      var targetName = this.targetName;\n      var comObj = this.comObj;\n      return new ReadableStream({\n        start: function start(controller) {\n          var startCapability = (0, _util.createPromiseCapability)();\n          _this2.streamControllers[streamId] = {\n            controller: controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false\n          };\n\n          _this2._postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            action: actionName,\n            streamId: streamId,\n            data: data,\n            desiredSize: controller.desiredSize\n          }, transfers);\n\n          return startCapability.promise;\n        },\n        pull: function pull(controller) {\n          var pullCapability = (0, _util.createPromiseCapability)();\n          _this2.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            stream: StreamKind.PULL,\n            streamId: streamId,\n            desiredSize: controller.desiredSize\n          });\n          return pullCapability.promise;\n        },\n        cancel: function cancel(reason) {\n          (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n          var cancelCapability = (0, _util.createPromiseCapability)();\n          _this2.streamControllers[streamId].cancelCall = cancelCapability;\n          _this2.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            stream: StreamKind.CANCEL,\n            streamId: streamId,\n            reason: wrapReason(reason)\n          });\n          return cancelCapability.promise;\n        }\n      }, queueingStrategy);\n    }\n  }, {\n    key: \"_createStreamSink\",\n    value: function _createStreamSink(data) {\n      var self = this;\n      var action = this.actionHandler[data.action];\n      var streamId = data.streamId;\n      var sourceName = this.sourceName;\n      var targetName = data.sourceName;\n      var comObj = this.comObj;\n      var streamSink = {\n        enqueue: function enqueue(chunk) {\n          var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n          var transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n          if (this.isCancelled) {\n            return;\n          }\n\n          var lastDesiredSize = this.desiredSize;\n          this.desiredSize -= size;\n\n          if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n            this.sinkCapability = (0, _util.createPromiseCapability)();\n            this.ready = this.sinkCapability.promise;\n          }\n\n          self._postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId: streamId,\n            chunk: chunk\n          }, transfers);\n        },\n        close: function close() {\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            stream: StreamKind.CLOSE,\n            streamId: streamId\n          });\n          delete self.streamSinks[streamId];\n        },\n        error: function error(reason) {\n          (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n          if (this.isCancelled) {\n            return;\n          }\n\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName: sourceName,\n            targetName: targetName,\n            stream: StreamKind.ERROR,\n            streamId: streamId,\n            reason: wrapReason(reason)\n          });\n        },\n        sinkCapability: (0, _util.createPromiseCapability)(),\n        onPull: null,\n        onCancel: null,\n        isCancelled: false,\n        desiredSize: data.desiredSize,\n        ready: null\n      };\n      streamSink.sinkCapability.resolve();\n      streamSink.ready = streamSink.sinkCapability.promise;\n      this.streamSinks[streamId] = streamSink;\n      new Promise(function (resolve) {\n        resolve(action(data.data, streamSink));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName: sourceName,\n          targetName: targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId: streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName: sourceName,\n          targetName: targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId: streamId,\n          reason: wrapReason(reason)\n        });\n      });\n    }\n  }, {\n    key: \"_processStreamMessage\",\n    value: function _processStreamMessage(data) {\n      var streamId = data.streamId;\n      var sourceName = this.sourceName;\n      var targetName = data.sourceName;\n      var comObj = this.comObj;\n\n      switch (data.stream) {\n        case StreamKind.START_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].startCall.resolve();\n          } else {\n            this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].pullCall.resolve();\n          } else {\n            this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n          }\n\n          break;\n\n        case StreamKind.PULL:\n          if (!this.streamSinks[streamId]) {\n            comObj.postMessage({\n              sourceName: sourceName,\n              targetName: targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId: streamId,\n              success: true\n            });\n            break;\n          }\n\n          if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n            this.streamSinks[streamId].sinkCapability.resolve();\n          }\n\n          this.streamSinks[streamId].desiredSize = data.desiredSize;\n          var onPull = this.streamSinks[data.streamId].onPull;\n          new Promise(function (resolve) {\n            resolve(onPull && onPull());\n          }).then(function () {\n            comObj.postMessage({\n              sourceName: sourceName,\n              targetName: targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId: streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName: sourceName,\n              targetName: targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId: streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          break;\n\n        case StreamKind.ENQUEUE:\n          (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].controller.enqueue(data.chunk);\n          break;\n\n        case StreamKind.CLOSE:\n          (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n          if (this.streamControllers[streamId].isClosed) {\n            break;\n          }\n\n          this.streamControllers[streamId].isClosed = true;\n          this.streamControllers[streamId].controller.close();\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.ERROR:\n          (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n          this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL_COMPLETE:\n          if (data.success) {\n            this.streamControllers[streamId].cancelCall.resolve();\n          } else {\n            this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n          }\n\n          this._deleteStreamController(streamId);\n\n          break;\n\n        case StreamKind.CANCEL:\n          if (!this.streamSinks[streamId]) {\n            break;\n          }\n\n          var onCancel = this.streamSinks[data.streamId].onCancel;\n          new Promise(function (resolve) {\n            resolve(onCancel && onCancel(wrapReason(data.reason)));\n          }).then(function () {\n            comObj.postMessage({\n              sourceName: sourceName,\n              targetName: targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId: streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName: sourceName,\n              targetName: targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId: streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n          this.streamSinks[streamId].isCancelled = true;\n          delete this.streamSinks[streamId];\n          break;\n\n        default:\n          throw new Error(\"Unexpected stream case\");\n      }\n    }\n  }, {\n    key: \"_deleteStreamController\",\n    value: function () {\n      var _deleteStreamController2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(streamId) {\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n                  return capability && capability.promise;\n                }));\n\n              case 2:\n                delete this.streamControllers[streamId];\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _deleteStreamController(_x) {\n        return _deleteStreamController2.apply(this, arguments);\n      }\n\n      return _deleteStreamController;\n    }()\n  }, {\n    key: \"_postMessage\",\n    value: function _postMessage(message, transfers) {\n      if (transfers && this.postMessageTransfers) {\n        this.comObj.postMessage(message, transfers);\n      } else {\n        this.comObj.postMessage(message);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n    }\n  }]);\n\n  return MessageHandler;\n}();\n\nexports.MessageHandler = MessageHandler;\n\n/***/ }),\n/* 144 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Metadata = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _xml_parser = __w_pdfjs_require__(145);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(data) {\n    _classCallCheck(this, Metadata);\n\n    (0, _util.assert)(typeof data === \"string\", \"Metadata: input is not a string\");\n    data = this._repair(data);\n    var parser = new _xml_parser.SimpleXMLParser({\n      lowerCaseName: true\n    });\n    var xmlDocument = parser.parseFromString(data);\n    this._metadataMap = new Map();\n\n    if (xmlDocument) {\n      this._parse(xmlDocument);\n    }\n\n    this._data = data;\n  }\n\n  _createClass(Metadata, [{\n    key: \"_repair\",\n    value: function _repair(data) {\n      return data.replace(/^[^<]+/, \"\").replace(/>\\\\376\\\\377([^<]+)/g, function (all, codes) {\n        var bytes = codes.replace(/\\\\([0-3])([0-7])([0-7])/g, function (code, d1, d2, d3) {\n          return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);\n        }).replace(/&(amp|apos|gt|lt|quot);/g, function (str, name) {\n          switch (name) {\n            case \"amp\":\n              return \"&\";\n\n            case \"apos\":\n              return \"'\";\n\n            case \"gt\":\n              return \">\";\n\n            case \"lt\":\n              return \"<\";\n\n            case \"quot\":\n              return '\"';\n          }\n\n          throw new Error(\"_repair: \".concat(name, \" isn't defined.\"));\n        });\n        var chars = \"\";\n\n        for (var i = 0, ii = bytes.length; i < ii; i += 2) {\n          var code = bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);\n\n          if (code >= 32 && code < 127 && code !== 60 && code !== 62 && code !== 38) {\n            chars += String.fromCharCode(code);\n          } else {\n            chars += \"&#x\" + (0x10000 + code).toString(16).substring(1) + \";\";\n          }\n        }\n\n        return \">\" + chars;\n      });\n    }\n  }, {\n    key: \"_getSequence\",\n    value: function _getSequence(entry) {\n      var name = entry.nodeName;\n\n      if (name !== \"rdf:bag\" && name !== \"rdf:seq\" && name !== \"rdf:alt\") {\n        return null;\n      }\n\n      return entry.childNodes.filter(function (node) {\n        return node.nodeName === \"rdf:li\";\n      });\n    }\n  }, {\n    key: \"_getCreators\",\n    value: function _getCreators(entry) {\n      if (entry.nodeName !== \"dc:creator\") {\n        return false;\n      }\n\n      if (!entry.hasChildNodes()) {\n        return true;\n      }\n\n      var seqNode = entry.childNodes[0];\n      var authors = this._getSequence(seqNode) || [];\n\n      this._metadataMap.set(entry.nodeName, authors.map(function (node) {\n        return node.textContent.trim();\n      }));\n\n      return true;\n    }\n  }, {\n    key: \"_parse\",\n    value: function _parse(xmlDocument) {\n      var rdf = xmlDocument.documentElement;\n\n      if (rdf.nodeName !== \"rdf:rdf\") {\n        rdf = rdf.firstChild;\n\n        while (rdf && rdf.nodeName !== \"rdf:rdf\") {\n          rdf = rdf.nextSibling;\n        }\n      }\n\n      if (!rdf || rdf.nodeName !== \"rdf:rdf\" || !rdf.hasChildNodes()) {\n        return;\n      }\n\n      var _iterator = _createForOfIteratorHelper(rdf.childNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var desc = _step.value;\n\n          if (desc.nodeName !== \"rdf:description\") {\n            continue;\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(desc.childNodes),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var entry = _step2.value;\n              var name = entry.nodeName;\n\n              if (name === \"#text\") {\n                continue;\n              }\n\n              if (this._getCreators(entry)) {\n                continue;\n              }\n\n              this._metadataMap.set(name, entry.textContent.trim());\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getRaw\",\n    value: function getRaw() {\n      return this._data;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _this$_metadataMap$ge;\n\n      return (_this$_metadataMap$ge = this._metadataMap.get(name)) !== null && _this$_metadataMap$ge !== void 0 ? _this$_metadataMap$ge : null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return (0, _util.objectFromEntries)(this._metadataMap);\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._metadataMap.has(name);\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexports.Metadata = Metadata;\n\n/***/ }),\n/* 145 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.XMLParserErrorCode = exports.XMLParserBase = exports.SimpleXMLParser = exports.SimpleDOMNode = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar XMLParserErrorCode = {\n  NoError: 0,\n  EndOfDocument: -1,\n  UnterminatedCdat: -2,\n  UnterminatedXmlDeclaration: -3,\n  UnterminatedDoctypeDeclaration: -4,\n  UnterminatedComment: -5,\n  MalformedElement: -6,\n  OutOfMemory: -7,\n  UnterminatedAttributeValue: -8,\n  UnterminatedElement: -9,\n  ElementNeverBegun: -10\n};\nexports.XMLParserErrorCode = XMLParserErrorCode;\n\nfunction isWhitespace(s, index) {\n  var ch = s[index];\n  return ch === \" \" || ch === \"\\n\" || ch === \"\\r\" || ch === \"\\t\";\n}\n\nfunction isWhitespaceString(s) {\n  for (var i = 0, ii = s.length; i < ii; i++) {\n    if (!isWhitespace(s, i)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar XMLParserBase = /*#__PURE__*/function () {\n  function XMLParserBase() {\n    _classCallCheck(this, XMLParserBase);\n  }\n\n  _createClass(XMLParserBase, [{\n    key: \"_resolveEntities\",\n    value: function _resolveEntities(s) {\n      var _this = this;\n\n      return s.replace(/&([^;]+);/g, function (all, entity) {\n        if (entity.substring(0, 2) === \"#x\") {\n          return String.fromCodePoint(parseInt(entity.substring(2), 16));\n        } else if (entity.substring(0, 1) === \"#\") {\n          return String.fromCodePoint(parseInt(entity.substring(1), 10));\n        }\n\n        switch (entity) {\n          case \"lt\":\n            return \"<\";\n\n          case \"gt\":\n            return \">\";\n\n          case \"amp\":\n            return \"&\";\n\n          case \"quot\":\n            return '\"';\n\n          case \"apos\":\n            return \"'\";\n        }\n\n        return _this.onResolveEntity(entity);\n      });\n    }\n  }, {\n    key: \"_parseContent\",\n    value: function _parseContent(s, start) {\n      var attributes = [];\n      var pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      var name = s.substring(start, pos);\n      skipWs();\n\n      while (pos < s.length && s[pos] !== \">\" && s[pos] !== \"/\" && s[pos] !== \"?\") {\n        skipWs();\n        var attrName = \"\",\n            attrValue = \"\";\n\n        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \"=\") {\n          attrName += s[pos];\n          ++pos;\n        }\n\n        skipWs();\n\n        if (s[pos] !== \"=\") {\n          return null;\n        }\n\n        ++pos;\n        skipWs();\n        var attrEndChar = s[pos];\n\n        if (attrEndChar !== '\"' && attrEndChar !== \"'\") {\n          return null;\n        }\n\n        var attrEndIndex = s.indexOf(attrEndChar, ++pos);\n\n        if (attrEndIndex < 0) {\n          return null;\n        }\n\n        attrValue = s.substring(pos, attrEndIndex);\n        attributes.push({\n          name: attrName,\n          value: this._resolveEntities(attrValue)\n        });\n        pos = attrEndIndex + 1;\n        skipWs();\n      }\n\n      return {\n        name: name,\n        attributes: attributes,\n        parsed: pos - start\n      };\n    }\n  }, {\n    key: \"_parseProcessingInstruction\",\n    value: function _parseProcessingInstruction(s, start) {\n      var pos = start;\n\n      function skipWs() {\n        while (pos < s.length && isWhitespace(s, pos)) {\n          ++pos;\n        }\n      }\n\n      while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== \">\" && s[pos] !== \"/\") {\n        ++pos;\n      }\n\n      var name = s.substring(start, pos);\n      skipWs();\n      var attrStart = pos;\n\n      while (pos < s.length && (s[pos] !== \"?\" || s[pos + 1] !== \">\")) {\n        ++pos;\n      }\n\n      var value = s.substring(attrStart, pos);\n      return {\n        name: name,\n        value: value,\n        parsed: pos - start\n      };\n    }\n  }, {\n    key: \"parseXml\",\n    value: function parseXml(s) {\n      var i = 0;\n\n      while (i < s.length) {\n        var ch = s[i];\n        var j = i;\n\n        if (ch === \"<\") {\n          ++j;\n          var ch2 = s[j];\n          var q = void 0;\n\n          switch (ch2) {\n            case \"/\":\n              ++j;\n              q = s.indexOf(\">\", j);\n\n              if (q < 0) {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onEndElement(s.substring(j, q));\n              j = q + 1;\n              break;\n\n            case \"?\":\n              ++j;\n\n              var pi = this._parseProcessingInstruction(s, j);\n\n              if (s.substring(j + pi.parsed, j + pi.parsed + 2) !== \"?>\") {\n                this.onError(XMLParserErrorCode.UnterminatedXmlDeclaration);\n                return;\n              }\n\n              this.onPi(pi.name, pi.value);\n              j += pi.parsed + 2;\n              break;\n\n            case \"!\":\n              if (s.substring(j + 1, j + 3) === \"--\") {\n                q = s.indexOf(\"-->\", j + 3);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedComment);\n                  return;\n                }\n\n                this.onComment(s.substring(j + 3, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"[CDATA[\") {\n                q = s.indexOf(\"]]>\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedCdat);\n                  return;\n                }\n\n                this.onCdata(s.substring(j + 8, q));\n                j = q + 3;\n              } else if (s.substring(j + 1, j + 8) === \"DOCTYPE\") {\n                var q2 = s.indexOf(\"[\", j + 8);\n                var complexDoctype = false;\n                q = s.indexOf(\">\", j + 8);\n\n                if (q < 0) {\n                  this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                  return;\n                }\n\n                if (q2 > 0 && q > q2) {\n                  q = s.indexOf(\"]>\", j + 8);\n\n                  if (q < 0) {\n                    this.onError(XMLParserErrorCode.UnterminatedDoctypeDeclaration);\n                    return;\n                  }\n\n                  complexDoctype = true;\n                }\n\n                var doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));\n                this.onDoctype(doctypeContent);\n                j = q + (complexDoctype ? 2 : 1);\n              } else {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              break;\n\n            default:\n              var content = this._parseContent(s, j);\n\n              if (content === null) {\n                this.onError(XMLParserErrorCode.MalformedElement);\n                return;\n              }\n\n              var isClosed = false;\n\n              if (s.substring(j + content.parsed, j + content.parsed + 2) === \"/>\") {\n                isClosed = true;\n              } else if (s.substring(j + content.parsed, j + content.parsed + 1) !== \">\") {\n                this.onError(XMLParserErrorCode.UnterminatedElement);\n                return;\n              }\n\n              this.onBeginElement(content.name, content.attributes, isClosed);\n              j += content.parsed + (isClosed ? 2 : 1);\n              break;\n          }\n        } else {\n          while (j < s.length && s[j] !== \"<\") {\n            j++;\n          }\n\n          var text = s.substring(i, j);\n          this.onText(this._resolveEntities(text));\n        }\n\n        i = j;\n      }\n    }\n  }, {\n    key: \"onResolveEntity\",\n    value: function onResolveEntity(name) {\n      return \"&\".concat(name, \";\");\n    }\n  }, {\n    key: \"onPi\",\n    value: function onPi(name, value) {}\n  }, {\n    key: \"onComment\",\n    value: function onComment(text) {}\n  }, {\n    key: \"onCdata\",\n    value: function onCdata(text) {}\n  }, {\n    key: \"onDoctype\",\n    value: function onDoctype(doctypeContent) {}\n  }, {\n    key: \"onText\",\n    value: function onText(text) {}\n  }, {\n    key: \"onBeginElement\",\n    value: function onBeginElement(name, attributes, isEmpty) {}\n  }, {\n    key: \"onEndElement\",\n    value: function onEndElement(name) {}\n  }, {\n    key: \"onError\",\n    value: function onError(code) {}\n  }]);\n\n  return XMLParserBase;\n}();\n\nexports.XMLParserBase = XMLParserBase;\n\nvar SimpleDOMNode = /*#__PURE__*/function () {\n  function SimpleDOMNode(nodeName, nodeValue) {\n    _classCallCheck(this, SimpleDOMNode);\n\n    this.nodeName = nodeName;\n    this.nodeValue = nodeValue;\n    Object.defineProperty(this, \"parentNode\", {\n      value: null,\n      writable: true\n    });\n  }\n\n  _createClass(SimpleDOMNode, [{\n    key: \"firstChild\",\n    get: function get() {\n      return this.childNodes && this.childNodes[0];\n    }\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      var childNodes = this.parentNode.childNodes;\n\n      if (!childNodes) {\n        return undefined;\n      }\n\n      var index = childNodes.indexOf(this);\n\n      if (index === -1) {\n        return undefined;\n      }\n\n      return childNodes[index + 1];\n    }\n  }, {\n    key: \"textContent\",\n    get: function get() {\n      if (!this.childNodes) {\n        return this.nodeValue || \"\";\n      }\n\n      return this.childNodes.map(function (child) {\n        return child.textContent;\n      }).join(\"\");\n    }\n  }, {\n    key: \"hasChildNodes\",\n    value: function hasChildNodes() {\n      return this.childNodes && this.childNodes.length > 0;\n    }\n  }, {\n    key: \"searchNode\",\n    value: function searchNode(paths, pos) {\n      if (pos >= paths.length) {\n        return this;\n      }\n\n      var component = paths[pos];\n      var stack = [];\n      var node = this;\n\n      while (true) {\n        if (component.name === node.nodeName) {\n          if (component.pos === 0) {\n            var res = node.searchNode(paths, pos + 1);\n\n            if (res !== null) {\n              return res;\n            }\n          } else if (stack.length === 0) {\n            return null;\n          } else {\n            var _stack$pop = stack.pop(),\n                _stack$pop2 = _slicedToArray(_stack$pop, 1),\n                parent = _stack$pop2[0];\n\n            var siblingPos = 0;\n\n            var _iterator = _createForOfIteratorHelper(parent.childNodes),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var child = _step.value;\n\n                if (component.name === child.nodeName) {\n                  if (siblingPos === component.pos) {\n                    return child.searchNode(paths, pos + 1);\n                  }\n\n                  siblingPos++;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return node.searchNode(paths, pos + 1);\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length !== 0) {\n          stack.push([node, 0]);\n          node = node.childNodes[0];\n        } else if (stack.length === 0) {\n          return null;\n        } else {\n          while (stack.length !== 0) {\n            var _stack$pop3 = stack.pop(),\n                _stack$pop4 = _slicedToArray(_stack$pop3, 2),\n                _parent = _stack$pop4[0],\n                currentPos = _stack$pop4[1];\n\n            var newPos = currentPos + 1;\n\n            if (newPos < _parent.childNodes.length) {\n              stack.push([_parent, newPos]);\n              node = _parent.childNodes[newPos];\n              break;\n            }\n          }\n\n          if (stack.length === 0) {\n            return null;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"dump\",\n    value: function dump(buffer) {\n      if (this.nodeName === \"#text\") {\n        buffer.push((0, _util.encodeToXmlString)(this.nodeValue));\n        return;\n      }\n\n      buffer.push(\"<\".concat(this.nodeName));\n\n      if (this.attributes) {\n        var _iterator2 = _createForOfIteratorHelper(this.attributes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var attribute = _step2.value;\n            buffer.push(\" \".concat(attribute.name, \"=\\\"\").concat((0, _util.encodeToXmlString)(attribute.value), \"\\\"\"));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (this.hasChildNodes()) {\n        buffer.push(\">\");\n\n        var _iterator3 = _createForOfIteratorHelper(this.childNodes),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var child = _step3.value;\n            child.dump(buffer);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        buffer.push(\"</\".concat(this.nodeName, \">\"));\n      } else if (this.nodeValue) {\n        buffer.push(\">\".concat((0, _util.encodeToXmlString)(this.nodeValue), \"</\").concat(this.nodeName, \">\"));\n      } else {\n        buffer.push(\"/>\");\n      }\n    }\n  }]);\n\n  return SimpleDOMNode;\n}();\n\nexports.SimpleDOMNode = SimpleDOMNode;\n\nvar SimpleXMLParser = /*#__PURE__*/function (_XMLParserBase) {\n  _inherits(SimpleXMLParser, _XMLParserBase);\n\n  var _super = _createSuper(SimpleXMLParser);\n\n  function SimpleXMLParser(_ref) {\n    var _this2;\n\n    var _ref$hasAttributes = _ref.hasAttributes,\n        hasAttributes = _ref$hasAttributes === void 0 ? false : _ref$hasAttributes,\n        _ref$lowerCaseName = _ref.lowerCaseName,\n        lowerCaseName = _ref$lowerCaseName === void 0 ? false : _ref$lowerCaseName;\n\n    _classCallCheck(this, SimpleXMLParser);\n\n    _this2 = _super.call(this);\n    _this2._currentFragment = null;\n    _this2._stack = null;\n    _this2._errorCode = XMLParserErrorCode.NoError;\n    _this2._hasAttributes = hasAttributes;\n    _this2._lowerCaseName = lowerCaseName;\n    return _this2;\n  }\n\n  _createClass(SimpleXMLParser, [{\n    key: \"parseFromString\",\n    value: function parseFromString(data) {\n      this._currentFragment = [];\n      this._stack = [];\n      this._errorCode = XMLParserErrorCode.NoError;\n      this.parseXml(data);\n\n      if (this._errorCode !== XMLParserErrorCode.NoError) {\n        return undefined;\n      }\n\n      var _this$_currentFragmen = _slicedToArray(this._currentFragment, 1),\n          documentElement = _this$_currentFragmen[0];\n\n      if (!documentElement) {\n        return undefined;\n      }\n\n      return {\n        documentElement: documentElement\n      };\n    }\n  }, {\n    key: \"onText\",\n    value: function onText(text) {\n      if (isWhitespaceString(text)) {\n        return;\n      }\n\n      var node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n  }, {\n    key: \"onCdata\",\n    value: function onCdata(text) {\n      var node = new SimpleDOMNode(\"#text\", text);\n\n      this._currentFragment.push(node);\n    }\n  }, {\n    key: \"onBeginElement\",\n    value: function onBeginElement(name, attributes, isEmpty) {\n      if (this._lowerCaseName) {\n        name = name.toLowerCase();\n      }\n\n      var node = new SimpleDOMNode(name);\n      node.childNodes = [];\n\n      if (this._hasAttributes) {\n        node.attributes = attributes;\n      }\n\n      this._currentFragment.push(node);\n\n      if (isEmpty) {\n        return;\n      }\n\n      this._stack.push(this._currentFragment);\n\n      this._currentFragment = node.childNodes;\n    }\n  }, {\n    key: \"onEndElement\",\n    value: function onEndElement(name) {\n      this._currentFragment = this._stack.pop() || [];\n      var lastElement = this._currentFragment[this._currentFragment.length - 1];\n\n      if (!lastElement) {\n        return;\n      }\n\n      for (var i = 0, ii = lastElement.childNodes.length; i < ii; i++) {\n        lastElement.childNodes[i].parentNode = lastElement;\n      }\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(code) {\n      this._errorCode = code;\n    }\n  }]);\n\n  return SimpleXMLParser;\n}(XMLParserBase);\n\nexports.SimpleXMLParser = SimpleXMLParser;\n\n/***/ }),\n/* 146 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OptionalContentConfig = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar OptionalContentGroup = function OptionalContentGroup(name, intent) {\n  _classCallCheck(this, OptionalContentGroup);\n\n  this.visible = true;\n  this.name = name;\n  this.intent = intent;\n};\n\nvar OptionalContentConfig = /*#__PURE__*/function () {\n  function OptionalContentConfig(data) {\n    _classCallCheck(this, OptionalContentConfig);\n\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n\n    var _iterator = _createForOfIteratorHelper(data.groups),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _group = _step.value;\n\n        this._groups.set(_group.id, new OptionalContentGroup(_group.name, _group.intent));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (data.baseState === \"OFF\") {\n      var _iterator2 = _createForOfIteratorHelper(this._groups),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var group = _step2.value;\n          group.visible = false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    var _iterator3 = _createForOfIteratorHelper(data.on),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var on = _step3.value;\n        this._groups.get(on).visible = true;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var _iterator4 = _createForOfIteratorHelper(data.off),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var off = _step4.value;\n        this._groups.get(off).visible = false;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  _createClass(OptionalContentConfig, [{\n    key: \"isVisible\",\n    value: function isVisible(group) {\n      if (!group) {\n        (0, _util.warn)(\"Optional content group not defined.\");\n        return true;\n      }\n\n      if (group.type === \"OCG\") {\n        if (!this._groups.has(group.id)) {\n          (0, _util.warn)(\"Optional content group not found: \".concat(group.id));\n          return true;\n        }\n\n        return this._groups.get(group.id).visible;\n      } else if (group.type === \"OCMD\") {\n        if (group.expression) {\n          (0, _util.warn)(\"Visibility expression not supported yet.\");\n        }\n\n        if (!group.policy || group.policy === \"AnyOn\") {\n          var _iterator5 = _createForOfIteratorHelper(group.ids),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var id = _step5.value;\n\n              if (!this._groups.has(id)) {\n                (0, _util.warn)(\"Optional content group not found: \".concat(id));\n                return true;\n              }\n\n              if (this._groups.get(id).visible) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          return false;\n        } else if (group.policy === \"AllOn\") {\n          var _iterator6 = _createForOfIteratorHelper(group.ids),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _id = _step6.value;\n\n              if (!this._groups.has(_id)) {\n                (0, _util.warn)(\"Optional content group not found: \".concat(_id));\n                return true;\n              }\n\n              if (!this._groups.get(_id).visible) {\n                return false;\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          return true;\n        } else if (group.policy === \"AnyOff\") {\n          var _iterator7 = _createForOfIteratorHelper(group.ids),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _id2 = _step7.value;\n\n              if (!this._groups.has(_id2)) {\n                (0, _util.warn)(\"Optional content group not found: \".concat(_id2));\n                return true;\n              }\n\n              if (!this._groups.get(_id2).visible) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          return false;\n        } else if (group.policy === \"AllOff\") {\n          var _iterator8 = _createForOfIteratorHelper(group.ids),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _id3 = _step8.value;\n\n              if (!this._groups.has(_id3)) {\n                (0, _util.warn)(\"Optional content group not found: \".concat(_id3));\n                return true;\n              }\n\n              if (this._groups.get(_id3).visible) {\n                return false;\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          return true;\n        }\n\n        (0, _util.warn)(\"Unknown optional content policy \".concat(group.policy, \".\"));\n        return true;\n      }\n\n      (0, _util.warn)(\"Unknown group type \".concat(group.type, \".\"));\n      return true;\n    }\n  }, {\n    key: \"setVisibility\",\n    value: function setVisibility(id) {\n      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!this._groups.has(id)) {\n        (0, _util.warn)(\"Optional content group not found: \".concat(id));\n        return;\n      }\n\n      this._groups.get(id).visible = !!visible;\n    }\n  }, {\n    key: \"getOrder\",\n    value: function getOrder() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      if (this._order) {\n        return this._order.slice();\n      }\n\n      return Array.from(this._groups.keys());\n    }\n  }, {\n    key: \"getGroups\",\n    value: function getGroups() {\n      if (!this._groups.size) {\n        return null;\n      }\n\n      return (0, _util.objectFromEntries)(this._groups);\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(id) {\n      return this._groups.get(id) || null;\n    }\n  }]);\n\n  return OptionalContentConfig;\n}();\n\nexports.OptionalContentConfig = OptionalContentConfig;\n\n/***/ }),\n/* 147 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFDataTransportStream = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PDFDataTransportStream = /*#__PURE__*/function () {\n  function PDFDataTransportStream(params, pdfDataRangeTransport) {\n    var _this = this;\n\n    _classCallCheck(this, PDFDataTransportStream);\n\n    (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    var initialData = params.initialData;\n\n    if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {\n      var buffer = new Uint8Array(initialData).buffer;\n\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener(function (begin, chunk) {\n      _this._onReceiveData({\n        begin: begin,\n        chunk: chunk\n      });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener(function (loaded, total) {\n      _this._onProgress({\n        loaded: loaded,\n        total: total\n      });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {\n      _this._onReceiveData({\n        chunk: chunk\n      });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(function () {\n      _this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _createClass(PDFDataTransportStream, [{\n    key: \"_onReceiveData\",\n    value: function _onReceiveData(args) {\n      var buffer = new Uint8Array(args.chunk).buffer;\n\n      if (args.begin === undefined) {\n        if (this._fullRequestReader) {\n          this._fullRequestReader._enqueue(buffer);\n        } else {\n          this._queuedChunks.push(buffer);\n        }\n      } else {\n        var found = this._rangeReaders.some(function (rangeReader) {\n          if (rangeReader._begin !== args.begin) {\n            return false;\n          }\n\n          rangeReader._enqueue(buffer);\n\n          return true;\n        });\n\n        (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n      }\n    }\n  }, {\n    key: \"_progressiveDataLength\",\n    get: function get() {\n      var _this$_fullRequestRea, _this$_fullRequestRea2;\n\n      return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;\n    }\n  }, {\n    key: \"_onProgress\",\n    value: function _onProgress(evt) {\n      if (evt.total === undefined) {\n        var firstReader = this._rangeReaders[0];\n\n        if (firstReader !== null && firstReader !== void 0 && firstReader.onProgress) {\n          firstReader.onProgress({\n            loaded: evt.loaded\n          });\n        }\n      } else {\n        var fullReader = this._fullRequestReader;\n\n        if (fullReader !== null && fullReader !== void 0 && fullReader.onProgress) {\n          fullReader.onProgress({\n            loaded: evt.loaded,\n            total: evt.total\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onProgressiveDone\",\n    value: function _onProgressiveDone() {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.progressiveDone();\n      }\n\n      this._progressiveDone = true;\n    }\n  }, {\n    key: \"_removeRangeReader\",\n    value: function _removeRangeReader(reader) {\n      var i = this._rangeReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeReaders.splice(i, 1);\n      }\n    }\n  }, {\n    key: \"getFullReader\",\n    value: function getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n      var queuedChunks = this._queuedChunks;\n      this._queuedChunks = null;\n      return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone);\n    }\n  }, {\n    key: \"getRangeReader\",\n    value: function getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      var reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n      this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n      this._rangeReaders.push(reader);\n\n      return reader;\n    }\n  }, {\n    key: \"cancelAllRequests\",\n    value: function cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      var readers = this._rangeReaders.slice(0);\n\n      readers.forEach(function (rangeReader) {\n        rangeReader.cancel(reason);\n      });\n\n      this._pdfDataRangeTransport.abort();\n    }\n  }]);\n\n  return PDFDataTransportStream;\n}();\n\nexports.PDFDataTransportStream = PDFDataTransportStream;\n\nvar PDFDataTransportStreamReader = /*#__PURE__*/function () {\n  function PDFDataTransportStreamReader(stream, queuedChunks) {\n    var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, PDFDataTransportStreamReader);\n\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n\n    var _iterator = _createForOfIteratorHelper(this._queuedChunks),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var chunk = _step.value;\n        this._loaded += chunk.byteLength;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n    this.onProgress = null;\n  }\n\n  _createClass(PDFDataTransportStreamReader, [{\n    key: \"_enqueue\",\n    value: function _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length > 0) {\n        var requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunks.push(chunk);\n      }\n\n      this._loaded += chunk.byteLength;\n    }\n  }, {\n    key: \"headersReady\",\n    get: function get() {\n      return this._headersReady;\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this._filename;\n    }\n  }, {\n    key: \"isRangeSupported\",\n    get: function get() {\n      return this._stream._isRangeSupported;\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._stream._isStreamingSupported;\n    }\n  }, {\n    key: \"contentLength\",\n    get: function get() {\n      return this._stream._contentLength;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var chunk, requestCapability;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._queuedChunks.length > 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                chunk = this._queuedChunks.shift();\n                return _context.abrupt(\"return\", {\n                  value: chunk,\n                  done: false\n                });\n\n              case 3:\n                if (!this._done) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 5:\n                requestCapability = (0, _util.createPromiseCapability)();\n\n                this._requests.push(requestCapability);\n\n                return _context.abrupt(\"return\", requestCapability.promise);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n  }, {\n    key: \"progressiveDone\",\n    value: function progressiveDone() {\n      if (this._done) {\n        return;\n      }\n\n      this._done = true;\n    }\n  }]);\n\n  return PDFDataTransportStreamReader;\n}();\n\nvar PDFDataTransportStreamRangeReader = /*#__PURE__*/function () {\n  function PDFDataTransportStreamRangeReader(stream, begin, end) {\n    _classCallCheck(this, PDFDataTransportStreamRangeReader);\n\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n    this.onProgress = null;\n  }\n\n  _createClass(PDFDataTransportStreamRangeReader, [{\n    key: \"_enqueue\",\n    value: function _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n\n      if (this._requests.length === 0) {\n        this._queuedChunk = chunk;\n      } else {\n        var requestsCapability = this._requests.shift();\n\n        requestsCapability.resolve({\n          value: chunk,\n          done: false\n        });\n\n        this._requests.forEach(function (requestCapability) {\n          requestCapability.resolve({\n            value: undefined,\n            done: true\n          });\n        });\n\n        this._requests = [];\n      }\n\n      this._done = true;\n\n      this._stream._removeRangeReader(this);\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var chunk, requestCapability;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this._queuedChunk) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                chunk = this._queuedChunk;\n                this._queuedChunk = null;\n                return _context2.abrupt(\"return\", {\n                  value: chunk,\n                  done: false\n                });\n\n              case 4:\n                if (!this._done) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 6:\n                requestCapability = (0, _util.createPromiseCapability)();\n\n                this._requests.push(requestCapability);\n\n                return _context2.abrupt(\"return\", requestCapability.promise);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read() {\n        return _read2.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._stream._removeRangeReader(this);\n    }\n  }]);\n\n  return PDFDataTransportStreamRangeReader;\n}();\n\n/***/ }),\n/* 148 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.WebGLContext = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WebGLContext = /*#__PURE__*/function () {\n  function WebGLContext(_ref) {\n    var _ref$enable = _ref.enable,\n        enable = _ref$enable === void 0 ? false : _ref$enable;\n\n    _classCallCheck(this, WebGLContext);\n\n    this._enabled = enable === true;\n  }\n\n  _createClass(WebGLContext, [{\n    key: \"isEnabled\",\n    get: function get() {\n      var enabled = this._enabled;\n\n      if (enabled) {\n        enabled = WebGLUtils.tryInitGL();\n      }\n\n      return (0, _util.shadow)(this, \"isEnabled\", enabled);\n    }\n  }, {\n    key: \"composeSMask\",\n    value: function composeSMask(_ref2) {\n      var layer = _ref2.layer,\n          mask = _ref2.mask,\n          properties = _ref2.properties;\n      return WebGLUtils.composeSMask(layer, mask, properties);\n    }\n  }, {\n    key: \"drawFigures\",\n    value: function drawFigures(_ref3) {\n      var width = _ref3.width,\n          height = _ref3.height,\n          backgroundColor = _ref3.backgroundColor,\n          figures = _ref3.figures,\n          context = _ref3.context;\n      return WebGLUtils.drawFigures(width, height, backgroundColor, figures, context);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      WebGLUtils.cleanup();\n    }\n  }]);\n\n  return WebGLContext;\n}();\n\nexports.WebGLContext = WebGLContext;\n\nvar WebGLUtils = function WebGLUtilsClosure() {\n  function loadShader(gl, code, shaderType) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, code);\n    gl.compileShader(shader);\n    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!compiled) {\n      var errorMsg = gl.getShaderInfoLog(shader);\n      throw new Error(\"Error during shader compilation: \" + errorMsg);\n    }\n\n    return shader;\n  }\n\n  function createVertexShader(gl, code) {\n    return loadShader(gl, code, gl.VERTEX_SHADER);\n  }\n\n  function createFragmentShader(gl, code) {\n    return loadShader(gl, code, gl.FRAGMENT_SHADER);\n  }\n\n  function createProgram(gl, shaders) {\n    var program = gl.createProgram();\n\n    for (var i = 0, ii = shaders.length; i < ii; ++i) {\n      gl.attachShader(program, shaders[i]);\n    }\n\n    gl.linkProgram(program);\n    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!linked) {\n      var errorMsg = gl.getProgramInfoLog(program);\n      throw new Error(\"Error during program linking: \" + errorMsg);\n    }\n\n    return program;\n  }\n\n  function createTexture(gl, image, textureId) {\n    gl.activeTexture(textureId);\n    var texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n    return texture;\n  }\n\n  var currentGL, currentCanvas;\n\n  function generateGL() {\n    if (currentGL) {\n      return;\n    }\n\n    currentCanvas = document.createElement(\"canvas\");\n    currentGL = currentCanvas.getContext(\"webgl\", {\n      premultipliedalpha: false\n    });\n  }\n\n  var smaskVertexShaderCode = \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec2 a_texCoord;                                    \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;   \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_texCoord = a_texCoord;                                    \\\n  }                                                             \";\n  var smaskFragmentShaderCode = \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  uniform vec4 u_backdrop;                                      \\\n  uniform int u_subtype;                                        \\\n  uniform sampler2D u_image;                                    \\\n  uniform sampler2D u_mask;                                     \\\n                                                                \\\n  varying vec2 v_texCoord;                                      \\\n                                                                \\\n  void main() {                                                 \\\n    vec4 imageColor = texture2D(u_image, v_texCoord);           \\\n    vec4 maskColor = texture2D(u_mask, v_texCoord);             \\\n    if (u_backdrop.a > 0.0) {                                   \\\n      maskColor.rgb = maskColor.rgb * maskColor.a +             \\\n                      u_backdrop.rgb * (1.0 - maskColor.a);     \\\n    }                                                           \\\n    float lum;                                                  \\\n    if (u_subtype == 0) {                                       \\\n      lum = maskColor.a;                                        \\\n    } else {                                                    \\\n      lum = maskColor.r * 0.3 + maskColor.g * 0.59 +            \\\n            maskColor.b * 0.11;                                 \\\n    }                                                           \\\n    imageColor.a *= lum;                                        \\\n    imageColor.rgb *= imageColor.a;                             \\\n    gl_FragColor = imageColor;                                  \\\n  }                                                             \";\n  var smaskCache = null;\n\n  function initSmaskGL() {\n    generateGL();\n    var canvas = currentCanvas;\n    currentCanvas = null;\n    var gl = currentGL;\n    currentGL = null;\n    var vertexShader = createVertexShader(gl, smaskVertexShaderCode);\n    var fragmentShader = createFragmentShader(gl, smaskFragmentShaderCode);\n    var program = createProgram(gl, [vertexShader, fragmentShader]);\n    gl.useProgram(program);\n    var cache = {};\n    cache.gl = gl;\n    cache.canvas = canvas;\n    cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n    cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n    cache.backdropLocation = gl.getUniformLocation(program, \"u_backdrop\");\n    cache.subtypeLocation = gl.getUniformLocation(program, \"u_subtype\");\n    var texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n    var texLayerLocation = gl.getUniformLocation(program, \"u_image\");\n    var texMaskLocation = gl.getUniformLocation(program, \"u_mask\");\n    var texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(texCoordLocation);\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform1i(texLayerLocation, 0);\n    gl.uniform1i(texMaskLocation, 1);\n    smaskCache = cache;\n  }\n\n  function composeSMask(layer, mask, properties) {\n    var width = layer.width,\n        height = layer.height;\n\n    if (!smaskCache) {\n      initSmaskGL();\n    }\n\n    var cache = smaskCache,\n        canvas = cache.canvas,\n        gl = cache.gl;\n    canvas.width = width;\n    canvas.height = height;\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.uniform2f(cache.resolutionLocation, width, height);\n\n    if (properties.backdrop) {\n      gl.uniform4f(cache.resolutionLocation, properties.backdrop[0], properties.backdrop[1], properties.backdrop[2], 1);\n    } else {\n      gl.uniform4f(cache.resolutionLocation, 0, 0, 0, 0);\n    }\n\n    gl.uniform1i(cache.subtypeLocation, properties.subtype === \"Luminosity\" ? 1 : 0);\n    var texture = createTexture(gl, layer, gl.TEXTURE0);\n    var maskTexture = createTexture(gl, mask, gl.TEXTURE1);\n    var buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, width, 0, 0, height, 0, height, width, 0, width, height]), gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.positionLocation);\n    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.flush();\n    gl.deleteTexture(texture);\n    gl.deleteTexture(maskTexture);\n    gl.deleteBuffer(buffer);\n    return canvas;\n  }\n\n  var figuresVertexShaderCode = \"\\\n  attribute vec2 a_position;                                    \\\n  attribute vec3 a_color;                                       \\\n                                                                \\\n  uniform vec2 u_resolution;                                    \\\n  uniform vec2 u_scale;                                         \\\n  uniform vec2 u_offset;                                        \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    vec2 position = (a_position + u_offset) * u_scale;          \\\n    vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;     \\\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);          \\\n                                                                \\\n    v_color = vec4(a_color / 255.0, 1.0);                       \\\n  }                                                             \";\n  var figuresFragmentShaderCode = \"\\\n  precision mediump float;                                      \\\n                                                                \\\n  varying vec4 v_color;                                         \\\n                                                                \\\n  void main() {                                                 \\\n    gl_FragColor = v_color;                                     \\\n  }                                                             \";\n  var figuresCache = null;\n\n  function initFiguresGL() {\n    generateGL();\n    var canvas = currentCanvas;\n    currentCanvas = null;\n    var gl = currentGL;\n    currentGL = null;\n    var vertexShader = createVertexShader(gl, figuresVertexShaderCode);\n    var fragmentShader = createFragmentShader(gl, figuresFragmentShaderCode);\n    var program = createProgram(gl, [vertexShader, fragmentShader]);\n    gl.useProgram(program);\n    var cache = {};\n    cache.gl = gl;\n    cache.canvas = canvas;\n    cache.resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n    cache.scaleLocation = gl.getUniformLocation(program, \"u_scale\");\n    cache.offsetLocation = gl.getUniformLocation(program, \"u_offset\");\n    cache.positionLocation = gl.getAttribLocation(program, \"a_position\");\n    cache.colorLocation = gl.getAttribLocation(program, \"a_color\");\n    figuresCache = cache;\n  }\n\n  function drawFigures(width, height, backgroundColor, figures, context) {\n    if (!figuresCache) {\n      initFiguresGL();\n    }\n\n    var cache = figuresCache,\n        canvas = cache.canvas,\n        gl = cache.gl;\n    canvas.width = width;\n    canvas.height = height;\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.uniform2f(cache.resolutionLocation, width, height);\n    var count = 0;\n\n    for (var i = 0, ii = figures.length; i < ii; i++) {\n      switch (figures[i].type) {\n        case \"lattice\":\n          var rows = figures[i].coords.length / figures[i].verticesPerRow | 0;\n          count += (rows - 1) * (figures[i].verticesPerRow - 1) * 6;\n          break;\n\n        case \"triangles\":\n          count += figures[i].coords.length;\n          break;\n      }\n    }\n\n    var coords = new Float32Array(count * 2);\n    var colors = new Uint8Array(count * 3);\n    var coordsMap = context.coords,\n        colorsMap = context.colors;\n    var pIndex = 0,\n        cIndex = 0;\n\n    for (var _i = 0, _ii = figures.length; _i < _ii; _i++) {\n      var figure = figures[_i],\n          ps = figure.coords,\n          cs = figure.colors;\n\n      switch (figure.type) {\n        case \"lattice\":\n          var cols = figure.verticesPerRow;\n\n          var _rows = ps.length / cols | 0;\n\n          for (var row = 1; row < _rows; row++) {\n            var offset = row * cols + 1;\n\n            for (var col = 1; col < cols; col++, offset++) {\n              coords[pIndex] = coordsMap[ps[offset - cols - 1]];\n              coords[pIndex + 1] = coordsMap[ps[offset - cols - 1] + 1];\n              coords[pIndex + 2] = coordsMap[ps[offset - cols]];\n              coords[pIndex + 3] = coordsMap[ps[offset - cols] + 1];\n              coords[pIndex + 4] = coordsMap[ps[offset - 1]];\n              coords[pIndex + 5] = coordsMap[ps[offset - 1] + 1];\n              colors[cIndex] = colorsMap[cs[offset - cols - 1]];\n              colors[cIndex + 1] = colorsMap[cs[offset - cols - 1] + 1];\n              colors[cIndex + 2] = colorsMap[cs[offset - cols - 1] + 2];\n              colors[cIndex + 3] = colorsMap[cs[offset - cols]];\n              colors[cIndex + 4] = colorsMap[cs[offset - cols] + 1];\n              colors[cIndex + 5] = colorsMap[cs[offset - cols] + 2];\n              colors[cIndex + 6] = colorsMap[cs[offset - 1]];\n              colors[cIndex + 7] = colorsMap[cs[offset - 1] + 1];\n              colors[cIndex + 8] = colorsMap[cs[offset - 1] + 2];\n              coords[pIndex + 6] = coords[pIndex + 2];\n              coords[pIndex + 7] = coords[pIndex + 3];\n              coords[pIndex + 8] = coords[pIndex + 4];\n              coords[pIndex + 9] = coords[pIndex + 5];\n              coords[pIndex + 10] = coordsMap[ps[offset]];\n              coords[pIndex + 11] = coordsMap[ps[offset] + 1];\n              colors[cIndex + 9] = colors[cIndex + 3];\n              colors[cIndex + 10] = colors[cIndex + 4];\n              colors[cIndex + 11] = colors[cIndex + 5];\n              colors[cIndex + 12] = colors[cIndex + 6];\n              colors[cIndex + 13] = colors[cIndex + 7];\n              colors[cIndex + 14] = colors[cIndex + 8];\n              colors[cIndex + 15] = colorsMap[cs[offset]];\n              colors[cIndex + 16] = colorsMap[cs[offset] + 1];\n              colors[cIndex + 17] = colorsMap[cs[offset] + 2];\n              pIndex += 12;\n              cIndex += 18;\n            }\n          }\n\n          break;\n\n        case \"triangles\":\n          for (var j = 0, jj = ps.length; j < jj; j++) {\n            coords[pIndex] = coordsMap[ps[j]];\n            coords[pIndex + 1] = coordsMap[ps[j] + 1];\n            colors[cIndex] = colorsMap[cs[j]];\n            colors[cIndex + 1] = colorsMap[cs[j] + 1];\n            colors[cIndex + 2] = colorsMap[cs[j] + 2];\n            pIndex += 2;\n            cIndex += 3;\n          }\n\n          break;\n      }\n    }\n\n    if (backgroundColor) {\n      gl.clearColor(backgroundColor[0] / 255, backgroundColor[1] / 255, backgroundColor[2] / 255, 1.0);\n    } else {\n      gl.clearColor(0, 0, 0, 0);\n    }\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    var coordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, coordsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, coords, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.positionLocation);\n    gl.vertexAttribPointer(cache.positionLocation, 2, gl.FLOAT, false, 0, 0);\n    var colorsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, colors, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(cache.colorLocation);\n    gl.vertexAttribPointer(cache.colorLocation, 3, gl.UNSIGNED_BYTE, false, 0, 0);\n    gl.uniform2f(cache.scaleLocation, context.scaleX, context.scaleY);\n    gl.uniform2f(cache.offsetLocation, context.offsetX, context.offsetY);\n    gl.drawArrays(gl.TRIANGLES, 0, count);\n    gl.flush();\n    gl.deleteBuffer(coordsBuffer);\n    gl.deleteBuffer(colorsBuffer);\n    return canvas;\n  }\n\n  return {\n    tryInitGL: function tryInitGL() {\n      try {\n        generateGL();\n        return !!currentGL;\n      } catch (ex) {}\n\n      return false;\n    },\n    composeSMask: composeSMask,\n    drawFigures: drawFigures,\n    cleanup: function cleanup() {\n      var _smaskCache, _figuresCache;\n\n      if ((_smaskCache = smaskCache) !== null && _smaskCache !== void 0 && _smaskCache.canvas) {\n        smaskCache.canvas.width = 0;\n        smaskCache.canvas.height = 0;\n      }\n\n      if ((_figuresCache = figuresCache) !== null && _figuresCache !== void 0 && _figuresCache.canvas) {\n        figuresCache.canvas.width = 0;\n        figuresCache.canvas.height = 0;\n      }\n\n      smaskCache = null;\n      figuresCache = null;\n    }\n  };\n}();\n\n/***/ }),\n/* 149 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AnnotationLayer = void 0;\n\nvar _display_utils = __w_pdfjs_require__(1);\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _annotation_storage = __w_pdfjs_require__(138);\n\nvar _scripting_utils = __w_pdfjs_require__(150);\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar AnnotationElementFactory = /*#__PURE__*/function () {\n  function AnnotationElementFactory() {\n    _classCallCheck(this, AnnotationElementFactory);\n  }\n\n  _createClass(AnnotationElementFactory, null, [{\n    key: \"create\",\n    value: function create(parameters) {\n      var subtype = parameters.data.annotationType;\n\n      switch (subtype) {\n        case _util.AnnotationType.LINK:\n          return new LinkAnnotationElement(parameters);\n\n        case _util.AnnotationType.TEXT:\n          return new TextAnnotationElement(parameters);\n\n        case _util.AnnotationType.WIDGET:\n          var fieldType = parameters.data.fieldType;\n\n          switch (fieldType) {\n            case \"Tx\":\n              return new TextWidgetAnnotationElement(parameters);\n\n            case \"Btn\":\n              if (parameters.data.radioButton) {\n                return new RadioButtonWidgetAnnotationElement(parameters);\n              } else if (parameters.data.checkBox) {\n                return new CheckboxWidgetAnnotationElement(parameters);\n              }\n\n              return new PushButtonWidgetAnnotationElement(parameters);\n\n            case \"Ch\":\n              return new ChoiceWidgetAnnotationElement(parameters);\n          }\n\n          return new WidgetAnnotationElement(parameters);\n\n        case _util.AnnotationType.POPUP:\n          return new PopupAnnotationElement(parameters);\n\n        case _util.AnnotationType.FREETEXT:\n          return new FreeTextAnnotationElement(parameters);\n\n        case _util.AnnotationType.LINE:\n          return new LineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUARE:\n          return new SquareAnnotationElement(parameters);\n\n        case _util.AnnotationType.CIRCLE:\n          return new CircleAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYLINE:\n          return new PolylineAnnotationElement(parameters);\n\n        case _util.AnnotationType.CARET:\n          return new CaretAnnotationElement(parameters);\n\n        case _util.AnnotationType.INK:\n          return new InkAnnotationElement(parameters);\n\n        case _util.AnnotationType.POLYGON:\n          return new PolygonAnnotationElement(parameters);\n\n        case _util.AnnotationType.HIGHLIGHT:\n          return new HighlightAnnotationElement(parameters);\n\n        case _util.AnnotationType.UNDERLINE:\n          return new UnderlineAnnotationElement(parameters);\n\n        case _util.AnnotationType.SQUIGGLY:\n          return new SquigglyAnnotationElement(parameters);\n\n        case _util.AnnotationType.STRIKEOUT:\n          return new StrikeOutAnnotationElement(parameters);\n\n        case _util.AnnotationType.STAMP:\n          return new StampAnnotationElement(parameters);\n\n        case _util.AnnotationType.FILEATTACHMENT:\n          return new FileAttachmentAnnotationElement(parameters);\n\n        default:\n          return new AnnotationElement(parameters);\n      }\n    }\n  }]);\n\n  return AnnotationElementFactory;\n}();\n\nvar AnnotationElement = /*#__PURE__*/function () {\n  function AnnotationElement(parameters) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$isRenderable = _ref.isRenderable,\n        isRenderable = _ref$isRenderable === void 0 ? false : _ref$isRenderable,\n        _ref$ignoreBorder = _ref.ignoreBorder,\n        ignoreBorder = _ref$ignoreBorder === void 0 ? false : _ref$ignoreBorder,\n        _ref$createQuadrilate = _ref.createQuadrilaterals,\n        createQuadrilaterals = _ref$createQuadrilate === void 0 ? false : _ref$createQuadrilate;\n\n    _classCallCheck(this, AnnotationElement);\n\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderInteractiveForms = parameters.renderInteractiveForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  _createClass(AnnotationElement, [{\n    key: \"_createContainer\",\n    value: function _createContainer() {\n      var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var data = this.data,\n          page = this.page,\n          viewport = this.viewport;\n      var container = document.createElement(\"section\");\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      container.setAttribute(\"data-annotation-id\", data.id);\n\n      var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n      container.style.transform = \"matrix(\".concat(viewport.transform.join(\",\"), \")\");\n      container.style.transformOrigin = \"\".concat(-rect[0], \"px \").concat(-rect[1], \"px\");\n\n      if (!ignoreBorder && data.borderStyle.width > 0) {\n        container.style.borderWidth = \"\".concat(data.borderStyle.width, \"px\");\n\n        if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n          width = width - 2 * data.borderStyle.width;\n          height = height - 2 * data.borderStyle.width;\n        }\n\n        var horizontalRadius = data.borderStyle.horizontalCornerRadius;\n        var verticalRadius = data.borderStyle.verticalCornerRadius;\n\n        if (horizontalRadius > 0 || verticalRadius > 0) {\n          var radius = \"\".concat(horizontalRadius, \"px / \").concat(verticalRadius, \"px\");\n          container.style.borderRadius = radius;\n        }\n\n        switch (data.borderStyle.style) {\n          case _util.AnnotationBorderStyleType.SOLID:\n            container.style.borderStyle = \"solid\";\n            break;\n\n          case _util.AnnotationBorderStyleType.DASHED:\n            container.style.borderStyle = \"dashed\";\n            break;\n\n          case _util.AnnotationBorderStyleType.BEVELED:\n            (0, _util.warn)(\"Unimplemented border style: beveled\");\n            break;\n\n          case _util.AnnotationBorderStyleType.INSET:\n            (0, _util.warn)(\"Unimplemented border style: inset\");\n            break;\n\n          case _util.AnnotationBorderStyleType.UNDERLINE:\n            container.style.borderBottomStyle = \"solid\";\n            break;\n\n          default:\n            break;\n        }\n\n        if (data.color) {\n          container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n        } else {\n          container.style.borderWidth = 0;\n        }\n      }\n\n      container.style.left = \"\".concat(rect[0], \"px\");\n      container.style.top = \"\".concat(rect[1], \"px\");\n      container.style.width = \"\".concat(width, \"px\");\n      container.style.height = \"\".concat(height, \"px\");\n      return container;\n    }\n  }, {\n    key: \"_createQuadrilaterals\",\n    value: function _createQuadrilaterals() {\n      var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this.data.quadPoints) {\n        return null;\n      }\n\n      var quadrilaterals = [];\n      var savedRect = this.data.rect;\n\n      var _iterator = _createForOfIteratorHelper(this.data.quadPoints),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var quadPoint = _step.value;\n          this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n          quadrilaterals.push(this._createContainer(ignoreBorder));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.data.rect = savedRect;\n      return quadrilaterals;\n    }\n  }, {\n    key: \"_createPopup\",\n    value: function _createPopup(trigger, data) {\n      var container = this.container;\n\n      if (this.quadrilaterals) {\n        trigger = trigger || this.quadrilaterals;\n        container = this.quadrilaterals[0];\n      }\n\n      if (!trigger) {\n        trigger = document.createElement(\"div\");\n        trigger.style.height = container.style.height;\n        trigger.style.width = container.style.width;\n        container.appendChild(trigger);\n      }\n\n      var popupElement = new PopupElement({\n        container: container,\n        trigger: trigger,\n        color: data.color,\n        title: data.title,\n        modificationDate: data.modificationDate,\n        contents: data.contents,\n        hideWrapper: true\n      });\n      var popup = popupElement.render();\n      popup.style.left = container.style.width;\n      container.appendChild(popup);\n    }\n  }, {\n    key: \"_renderQuadrilaterals\",\n    value: function _renderQuadrilaterals(className) {\n      this.quadrilaterals.forEach(function (quadrilateral) {\n        quadrilateral.className = className;\n      });\n      return this.quadrilaterals;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n    }\n  }]);\n\n  return AnnotationElement;\n}();\n\nvar LinkAnnotationElement = /*#__PURE__*/function (_AnnotationElement) {\n  _inherits(LinkAnnotationElement, _AnnotationElement);\n\n  var _super = _createSuper(LinkAnnotationElement);\n\n  function LinkAnnotationElement(parameters) {\n    _classCallCheck(this, LinkAnnotationElement);\n\n    var isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n    return _super.call(this, parameters, {\n      isRenderable: isRenderable,\n      createQuadrilaterals: true\n    });\n  }\n\n  _createClass(LinkAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var data = this.data,\n          linkService = this.linkService;\n      var link = document.createElement(\"a\");\n\n      if (data.url) {\n        (0, _display_utils.addLinkAttributes)(link, {\n          url: data.url,\n          target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n          rel: linkService.externalLinkRel,\n          enabled: linkService.externalLinkEnabled\n        });\n      } else if (data.action) {\n        this._bindNamedAction(link, data.action);\n      } else if (data.dest) {\n        this._bindLink(link, data.dest);\n      } else if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n        this._bindJSAction(link, data);\n      } else {\n        this._bindLink(link, \"\");\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"linkAnnotation\").map(function (quadrilateral, index) {\n          var linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        });\n      }\n\n      this.container.className = \"linkAnnotation\";\n      this.container.appendChild(link);\n      return this.container;\n    }\n  }, {\n    key: \"_bindLink\",\n    value: function _bindLink(link, destination) {\n      var _this = this;\n\n      link.href = this.linkService.getDestinationHash(destination);\n\n      link.onclick = function () {\n        if (destination) {\n          _this.linkService.goToDestination(destination);\n        }\n\n        return false;\n      };\n\n      if (destination || destination === \"\") {\n        link.className = \"internalLink\";\n      }\n    }\n  }, {\n    key: \"_bindNamedAction\",\n    value: function _bindNamedAction(link, action) {\n      var _this2 = this;\n\n      link.href = this.linkService.getAnchorUrl(\"\");\n\n      link.onclick = function () {\n        _this2.linkService.executeNamedAction(action);\n\n        return false;\n      };\n\n      link.className = \"internalLink\";\n    }\n  }, {\n    key: \"_bindJSAction\",\n    value: function _bindJSAction(link, data) {\n      var _this3 = this;\n\n      link.href = this.linkService.getAnchorUrl(\"\");\n      var map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n      var _loop = function _loop() {\n        var name = _Object$keys[_i];\n        var jsName = map.get(name);\n\n        if (!jsName) {\n          return \"continue\";\n        }\n\n        link[jsName] = function () {\n          var _this3$linkService$ev;\n\n          (_this3$linkService$ev = _this3.linkService.eventBus) === null || _this3$linkService$ev === void 0 ? void 0 : _this3$linkService$ev.dispatch(\"dispatcheventinsandbox\", {\n            source: _this3,\n            detail: {\n              id: data.id,\n              name: name\n            }\n          });\n          return false;\n        };\n      };\n\n      for (var _i = 0, _Object$keys = Object.keys(data.actions); _i < _Object$keys.length; _i++) {\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      }\n\n      link.className = \"internalLink\";\n    }\n  }]);\n\n  return LinkAnnotationElement;\n}(AnnotationElement);\n\nvar TextAnnotationElement = /*#__PURE__*/function (_AnnotationElement2) {\n  _inherits(TextAnnotationElement, _AnnotationElement2);\n\n  var _super2 = _createSuper(TextAnnotationElement);\n\n  function TextAnnotationElement(parameters) {\n    _classCallCheck(this, TextAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super2.call(this, parameters, {\n      isRenderable: isRenderable\n    });\n  }\n\n  _createClass(TextAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"textAnnotation\";\n      var image = document.createElement(\"img\");\n      image.style.height = this.container.style.height;\n      image.style.width = this.container.style.width;\n      image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n      image.alt = \"[{{type}} Annotation]\";\n      image.dataset.l10nId = \"text_annotation_type\";\n      image.dataset.l10nArgs = JSON.stringify({\n        type: this.data.name\n      });\n\n      if (!this.data.hasPopup) {\n        this._createPopup(image, this.data);\n      }\n\n      this.container.appendChild(image);\n      return this.container;\n    }\n  }]);\n\n  return TextAnnotationElement;\n}(AnnotationElement);\n\nvar WidgetAnnotationElement = /*#__PURE__*/function (_AnnotationElement3) {\n  _inherits(WidgetAnnotationElement, _AnnotationElement3);\n\n  var _super3 = _createSuper(WidgetAnnotationElement);\n\n  function WidgetAnnotationElement() {\n    _classCallCheck(this, WidgetAnnotationElement);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(WidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      if (this.data.alternativeText) {\n        this.container.title = this.data.alternativeText;\n      }\n\n      return this.container;\n    }\n  }, {\n    key: \"_getKeyModifier\",\n    value: function _getKeyModifier(event) {\n      return navigator.platform.includes(\"Win\") && event.ctrlKey || navigator.platform.includes(\"Mac\") && event.metaKey;\n    }\n  }, {\n    key: \"_setEventListener\",\n    value: function _setEventListener(element, baseName, eventName, valueGetter) {\n      var _this4 = this;\n\n      if (baseName.includes(\"mouse\")) {\n        element.addEventListener(baseName, function (event) {\n          var _this4$linkService$ev;\n\n          (_this4$linkService$ev = _this4.linkService.eventBus) === null || _this4$linkService$ev === void 0 ? void 0 : _this4$linkService$ev.dispatch(\"dispatcheventinsandbox\", {\n            source: _this4,\n            detail: {\n              id: _this4.data.id,\n              name: eventName,\n              value: valueGetter(event),\n              shift: event.shiftKey,\n              modifier: _this4._getKeyModifier(event)\n            }\n          });\n        });\n      } else {\n        element.addEventListener(baseName, function (event) {\n          var _this4$linkService$ev2;\n\n          (_this4$linkService$ev2 = _this4.linkService.eventBus) === null || _this4$linkService$ev2 === void 0 ? void 0 : _this4$linkService$ev2.dispatch(\"dispatcheventinsandbox\", {\n            source: _this4,\n            detail: {\n              id: _this4.data.id,\n              name: eventName,\n              value: event.target.checked\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_setEventListeners\",\n    value: function _setEventListeners(element, names, getter) {\n      var _iterator2 = _createForOfIteratorHelper(names),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _this$data$actions;\n\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              baseName = _step2$value[0],\n              eventName = _step2$value[1];\n\n          if (eventName === \"Action\" || (_this$data$actions = this.data.actions) !== null && _this$data$actions !== void 0 && _this$data$actions[eventName]) {\n            this._setEventListener(element, baseName, eventName, getter);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return WidgetAnnotationElement;\n}(AnnotationElement);\n\nvar TextWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem) {\n  _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);\n\n  var _super4 = _createSuper(TextWidgetAnnotationElement);\n\n  function TextWidgetAnnotationElement(parameters) {\n    _classCallCheck(this, TextWidgetAnnotationElement);\n\n    var isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n    return _super4.call(this, parameters, {\n      isRenderable: isRenderable\n    });\n  }\n\n  _createClass(TextWidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var storage = this.annotationStorage;\n      var id = this.data.id;\n      this.container.className = \"textWidgetAnnotation\";\n      var element = null;\n\n      if (this.renderInteractiveForms) {\n        var textContent = storage.getOrCreateValue(id, {\n          value: this.data.fieldValue\n        }).value;\n        var elementData = {\n          userValue: null,\n          formattedValue: null,\n          beforeInputSelectionRange: null,\n          beforeInputValue: null\n        };\n\n        if (this.data.multiLine) {\n          element = document.createElement(\"textarea\");\n          element.textContent = textContent;\n        } else {\n          element = document.createElement(\"input\");\n          element.type = \"text\";\n          element.setAttribute(\"value\", textContent);\n        }\n\n        elementData.userValue = textContent;\n        element.setAttribute(\"id\", id);\n        element.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: event.target.value\n          });\n        });\n\n        var blurListener = function blurListener(event) {\n          if (elementData.formattedValue) {\n            event.target.value = elementData.formattedValue;\n          }\n\n          event.target.setSelectionRange(0, 0);\n          elementData.beforeInputSelectionRange = null;\n        };\n\n        if (this.enableScripting && this.hasJSActions) {\n          var _this$data$actions2;\n\n          element.addEventListener(\"focus\", function (event) {\n            if (elementData.userValue) {\n              event.target.value = elementData.userValue;\n            }\n          });\n          element.addEventListener(\"updatefromsandbox\", function (event) {\n            var detail = event.detail;\n            var actions = {\n              value: function value() {\n                elementData.userValue = detail.value || \"\";\n                storage.setValue(id, {\n                  value: elementData.userValue.toString()\n                });\n\n                if (!elementData.formattedValue) {\n                  event.target.value = elementData.userValue;\n                }\n              },\n              valueAsString: function valueAsString() {\n                elementData.formattedValue = detail.valueAsString || \"\";\n\n                if (event.target !== document.activeElement) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                storage.setValue(id, {\n                  formattedValue: elementData.formattedValue\n                });\n              },\n              focus: function focus() {\n                setTimeout(function () {\n                  return event.target.focus({\n                    preventScroll: false\n                  });\n                }, 0);\n              },\n              userName: function userName() {\n                event.target.title = detail.userName;\n              },\n              hidden: function hidden() {\n                event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n                storage.setValue(id, {\n                  hidden: detail.hidden\n                });\n              },\n              editable: function editable() {\n                event.target.disabled = !detail.editable;\n              },\n              selRange: function selRange() {\n                var _detail$selRange = _slicedToArray(detail.selRange, 2),\n                    selStart = _detail$selRange[0],\n                    selEnd = _detail$selRange[1];\n\n                if (selStart >= 0 && selEnd < event.target.value.length) {\n                  event.target.setSelectionRange(selStart, selEnd);\n                }\n              },\n              strokeColor: function strokeColor() {\n                var color = detail.strokeColor;\n                event.target.style.color = _scripting_utils.ColorConverters[\"\".concat(color[0], \"_HTML\")](color.slice(1));\n              }\n            };\n            Object.keys(detail).filter(function (name) {\n              return name in actions;\n            }).forEach(function (name) {\n              return actions[name]();\n            });\n          });\n          element.addEventListener(\"keydown\", function (event) {\n            var _this5$linkService$ev;\n\n            elementData.beforeInputValue = event.target.value;\n            var commitKey = -1;\n\n            if (event.key === \"Escape\") {\n              commitKey = 0;\n            } else if (event.key === \"Enter\") {\n              commitKey = 2;\n            } else if (event.key === \"Tab\") {\n              commitKey = 3;\n            }\n\n            if (commitKey === -1) {\n              return;\n            }\n\n            elementData.userValue = event.target.value;\n            (_this5$linkService$ev = _this5.linkService.eventBus) === null || _this5$linkService$ev === void 0 ? void 0 : _this5$linkService$ev.dispatch(\"dispatcheventinsandbox\", {\n              source: _this5,\n              detail: {\n                id: id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd\n              }\n            });\n          });\n          var _blurListener = blurListener;\n          blurListener = null;\n          element.addEventListener(\"blur\", function (event) {\n            if (_this5._mouseState.isDown) {\n              var _this5$linkService$ev2;\n\n              elementData.userValue = event.target.value;\n              (_this5$linkService$ev2 = _this5.linkService.eventBus) === null || _this5$linkService$ev2 === void 0 ? void 0 : _this5$linkService$ev2.dispatch(\"dispatcheventinsandbox\", {\n                source: _this5,\n                detail: {\n                  id: id,\n                  name: \"Keystroke\",\n                  value: event.target.value,\n                  willCommit: true,\n                  commitKey: 1,\n                  selStart: event.target.selectionStart,\n                  selEnd: event.target.selectionEnd\n                }\n              });\n            }\n\n            _blurListener(event);\n          });\n          element.addEventListener(\"mousedown\", function (event) {\n            elementData.beforeInputValue = event.target.value;\n            elementData.beforeInputSelectionRange = null;\n          });\n          element.addEventListener(\"keyup\", function (event) {\n            if (event.target.selectionStart === event.target.selectionEnd) {\n              elementData.beforeInputSelectionRange = null;\n            }\n          });\n          element.addEventListener(\"select\", function (event) {\n            elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n          });\n\n          if ((_this$data$actions2 = this.data.actions) !== null && _this$data$actions2 !== void 0 && _this$data$actions2.Keystroke) {\n            element.addEventListener(\"input\", function (event) {\n              var _this5$linkService$ev3;\n\n              var selStart = -1;\n              var selEnd = -1;\n\n              if (elementData.beforeInputSelectionRange) {\n                var _elementData$beforeIn = _slicedToArray(elementData.beforeInputSelectionRange, 2);\n\n                selStart = _elementData$beforeIn[0];\n                selEnd = _elementData$beforeIn[1];\n              }\n\n              (_this5$linkService$ev3 = _this5.linkService.eventBus) === null || _this5$linkService$ev3 === void 0 ? void 0 : _this5$linkService$ev3.dispatch(\"dispatcheventinsandbox\", {\n                source: _this5,\n                detail: {\n                  id: id,\n                  name: \"Keystroke\",\n                  value: elementData.beforeInputValue,\n                  change: event.data,\n                  willCommit: false,\n                  selStart: selStart,\n                  selEnd: selEnd\n                }\n              });\n            });\n          }\n\n          this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], function (event) {\n            return event.target.value;\n          });\n        }\n\n        if (blurListener) {\n          element.addEventListener(\"blur\", blurListener);\n        }\n\n        element.disabled = this.data.readOnly;\n        element.name = this.data.fieldName;\n\n        if (this.data.maxLen !== null) {\n          element.maxLength = this.data.maxLen;\n        }\n\n        if (this.data.comb) {\n          var fieldWidth = this.data.rect[2] - this.data.rect[0];\n          var combWidth = fieldWidth / this.data.maxLen;\n          element.classList.add(\"comb\");\n          element.style.letterSpacing = \"calc(\".concat(combWidth, \"px - 1ch)\");\n        }\n      } else {\n        element = document.createElement(\"div\");\n        element.textContent = this.data.fieldValue;\n        element.style.verticalAlign = \"middle\";\n        element.style.display = \"table-cell\";\n      }\n\n      this._setTextStyle(element);\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n  }, {\n    key: \"_setTextStyle\",\n    value: function _setTextStyle(element) {\n      var TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n      var _this$data$defaultApp = this.data.defaultAppearanceData,\n          fontSize = _this$data$defaultApp.fontSize,\n          fontColor = _this$data$defaultApp.fontColor;\n      var style = element.style;\n\n      if (fontSize) {\n        style.fontSize = \"\".concat(fontSize, \"px\");\n      }\n\n      style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n      if (this.data.textAlignment !== null) {\n        style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n      }\n    }\n  }]);\n\n  return TextWidgetAnnotationElement;\n}(WidgetAnnotationElement);\n\nvar CheckboxWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem2) {\n  _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem2);\n\n  var _super5 = _createSuper(CheckboxWidgetAnnotationElement);\n\n  function CheckboxWidgetAnnotationElement(parameters) {\n    _classCallCheck(this, CheckboxWidgetAnnotationElement);\n\n    return _super5.call(this, parameters, {\n      isRenderable: parameters.renderInteractiveForms\n    });\n  }\n\n  _createClass(CheckboxWidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var storage = this.annotationStorage;\n      var data = this.data;\n      var id = data.id;\n      var value = storage.getOrCreateValue(id, {\n        value: data.fieldValue && data.fieldValue !== \"Off\"\n      }).value;\n      this.container.className = \"buttonWidgetAnnotation checkBox\";\n      var element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"checkbox\";\n      element.name = this.data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        var name = event.target.name;\n\n        var _iterator3 = _createForOfIteratorHelper(document.getElementsByName(name)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var checkbox = _step3.value;\n\n            if (checkbox !== event.target) {\n              checkbox.checked = false;\n              storage.setValue(checkbox.parentNode.getAttribute(\"data-annotation-id\"), {\n                value: false\n              });\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        storage.setValue(id, {\n          value: event.target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", function (event) {\n          var detail = event.detail;\n          var actions = {\n            value: function value() {\n              event.target.checked = detail.value !== \"Off\";\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            },\n            focus: function focus() {\n              setTimeout(function () {\n                return event.target.focus({\n                  preventScroll: false\n                });\n              }, 0);\n            },\n            hidden: function hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n            editable: function editable() {\n              event.target.disabled = !detail.editable;\n            }\n          };\n          Object.keys(detail).filter(function (name) {\n            return name in actions;\n          }).forEach(function (name) {\n            return actions[name]();\n          });\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], function (event) {\n          return event.target.checked;\n        });\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n  }]);\n\n  return CheckboxWidgetAnnotationElement;\n}(WidgetAnnotationElement);\n\nvar RadioButtonWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem3) {\n  _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem3);\n\n  var _super6 = _createSuper(RadioButtonWidgetAnnotationElement);\n\n  function RadioButtonWidgetAnnotationElement(parameters) {\n    _classCallCheck(this, RadioButtonWidgetAnnotationElement);\n\n    return _super6.call(this, parameters, {\n      isRenderable: parameters.renderInteractiveForms\n    });\n  }\n\n  _createClass(RadioButtonWidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"buttonWidgetAnnotation radioButton\";\n      var storage = this.annotationStorage;\n      var data = this.data;\n      var id = data.id;\n      var value = storage.getOrCreateValue(id, {\n        value: data.fieldValue === data.buttonValue\n      }).value;\n      var element = document.createElement(\"input\");\n      element.disabled = data.readOnly;\n      element.type = \"radio\";\n      element.name = data.fieldName;\n\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n\n      element.setAttribute(\"pdfButtonValue\", data.buttonValue);\n      element.setAttribute(\"id\", id);\n      element.addEventListener(\"change\", function (event) {\n        var target = event.target;\n\n        var _iterator4 = _createForOfIteratorHelper(document.getElementsByName(target.name)),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var radio = _step4.value;\n\n            if (radio !== target) {\n              storage.setValue(radio.getAttribute(\"id\"), {\n                value: false\n              });\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        storage.setValue(id, {\n          value: target.checked\n        });\n      });\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", function (event) {\n          var detail = event.detail;\n          var actions = {\n            value: function value() {\n              var fieldValue = detail.value;\n\n              var _iterator5 = _createForOfIteratorHelper(document.getElementsByName(event.target.name)),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var radio = _step5.value;\n                  var radioId = radio.getAttribute(\"id\");\n\n                  if (fieldValue === radio.getAttribute(\"pdfButtonValue\")) {\n                    radio.setAttribute(\"checked\", true);\n                    storage.setValue(radioId, {\n                      value: true\n                    });\n                  } else {\n                    storage.setValue(radioId, {\n                      value: false\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            },\n            focus: function focus() {\n              setTimeout(function () {\n                return event.target.focus({\n                  preventScroll: false\n                });\n              }, 0);\n            },\n            hidden: function hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n            editable: function editable() {\n              event.target.disabled = !detail.editable;\n            }\n          };\n          Object.keys(detail).filter(function (name) {\n            return name in actions;\n          }).forEach(function (name) {\n            return actions[name]();\n          });\n        });\n\n        this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], function (event) {\n          return event.target.checked;\n        });\n      }\n\n      this.container.appendChild(element);\n      return this.container;\n    }\n  }]);\n\n  return RadioButtonWidgetAnnotationElement;\n}(WidgetAnnotationElement);\n\nvar PushButtonWidgetAnnotationElement = /*#__PURE__*/function (_LinkAnnotationElemen) {\n  _inherits(PushButtonWidgetAnnotationElement, _LinkAnnotationElemen);\n\n  var _super7 = _createSuper(PushButtonWidgetAnnotationElement);\n\n  function PushButtonWidgetAnnotationElement() {\n    _classCallCheck(this, PushButtonWidgetAnnotationElement);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(PushButtonWidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var container = _get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype), \"render\", this).call(this);\n\n      container.className = \"buttonWidgetAnnotation pushButton\";\n\n      if (this.data.alternativeText) {\n        container.title = this.data.alternativeText;\n      }\n\n      return container;\n    }\n  }]);\n\n  return PushButtonWidgetAnnotationElement;\n}(LinkAnnotationElement);\n\nvar ChoiceWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem4) {\n  _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem4);\n\n  var _super8 = _createSuper(ChoiceWidgetAnnotationElement);\n\n  function ChoiceWidgetAnnotationElement(parameters) {\n    _classCallCheck(this, ChoiceWidgetAnnotationElement);\n\n    return _super8.call(this, parameters, {\n      isRenderable: parameters.renderInteractiveForms\n    });\n  }\n\n  _createClass(ChoiceWidgetAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      this.container.className = \"choiceWidgetAnnotation\";\n      var storage = this.annotationStorage;\n      var id = this.data.id;\n      storage.getOrCreateValue(id, {\n        value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n      });\n      var selectElement = document.createElement(\"select\");\n      selectElement.disabled = this.data.readOnly;\n      selectElement.name = this.data.fieldName;\n      selectElement.setAttribute(\"id\", id);\n\n      if (!this.data.combo) {\n        selectElement.size = this.data.options.length;\n\n        if (this.data.multiSelect) {\n          selectElement.multiple = true;\n        }\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(this.data.options),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var option = _step6.value;\n          var optionElement = document.createElement(\"option\");\n          optionElement.textContent = option.displayValue;\n          optionElement.value = option.exportValue;\n\n          if (this.data.fieldValue.includes(option.exportValue)) {\n            optionElement.setAttribute(\"selected\", true);\n          }\n\n          selectElement.appendChild(optionElement);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var getValue = function getValue(event, isExport) {\n        var name = isExport ? \"value\" : \"textContent\";\n        var options = event.target.options;\n\n        if (!event.target.multiple) {\n          return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n        }\n\n        return Array.prototype.filter.call(options, function (option) {\n          return option.selected;\n        }).map(function (option) {\n          return option[name];\n        });\n      };\n\n      var getItems = function getItems(event) {\n        var options = event.target.options;\n        return Array.prototype.map.call(options, function (option) {\n          return {\n            displayValue: option.textContent,\n            exportValue: option.value\n          };\n        });\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        selectElement.addEventListener(\"updatefromsandbox\", function (event) {\n          var detail = event.detail;\n          var actions = {\n            value: function value() {\n              var options = selectElement.options;\n              var value = detail.value;\n              var values = new Set(Array.isArray(value) ? value : [value]);\n              Array.prototype.forEach.call(options, function (option) {\n                option.selected = values.has(option.value);\n              });\n              storage.setValue(id, {\n                value: getValue(event, true)\n              });\n            },\n            multipleSelection: function multipleSelection() {\n              selectElement.multiple = true;\n            },\n            remove: function remove() {\n              var options = selectElement.options;\n              var index = detail.remove;\n              options[index].selected = false;\n              selectElement.remove(index);\n\n              if (options.length > 0) {\n                var i = Array.prototype.findIndex.call(options, function (option) {\n                  return option.selected;\n                });\n\n                if (i === -1) {\n                  options[0].selected = true;\n                }\n              }\n\n              storage.setValue(id, {\n                value: getValue(event, true),\n                items: getItems(event)\n              });\n            },\n            clear: function clear() {\n              while (selectElement.length !== 0) {\n                selectElement.remove(0);\n              }\n\n              storage.setValue(id, {\n                value: null,\n                items: []\n              });\n            },\n            insert: function insert() {\n              var _detail$insert = detail.insert,\n                  index = _detail$insert.index,\n                  displayValue = _detail$insert.displayValue,\n                  exportValue = _detail$insert.exportValue;\n              var optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.insertBefore(optionElement, selectElement.children[index]);\n              storage.setValue(id, {\n                value: getValue(event, true),\n                items: getItems(event)\n              });\n            },\n            items: function items() {\n              var items = detail.items;\n\n              while (selectElement.length !== 0) {\n                selectElement.remove(0);\n              }\n\n              var _iterator7 = _createForOfIteratorHelper(items),\n                  _step7;\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  var item = _step7.value;\n                  var displayValue = item.displayValue,\n                      exportValue = item.exportValue;\n                  var optionElement = document.createElement(\"option\");\n                  optionElement.textContent = displayValue;\n                  optionElement.value = exportValue;\n                  selectElement.appendChild(optionElement);\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n\n              if (selectElement.options.length > 0) {\n                selectElement.options[0].selected = true;\n              }\n\n              storage.setValue(id, {\n                value: getValue(event, true),\n                items: getItems(event)\n              });\n            },\n            indices: function indices() {\n              var indices = new Set(detail.indices);\n              var options = event.target.options;\n              Array.prototype.forEach.call(options, function (option, i) {\n                option.selected = indices.has(i);\n              });\n              storage.setValue(id, {\n                value: getValue(event, true)\n              });\n            },\n            focus: function focus() {\n              setTimeout(function () {\n                return event.target.focus({\n                  preventScroll: false\n                });\n              }, 0);\n            },\n            hidden: function hidden() {\n              event.target.style.visibility = detail.hidden ? \"hidden\" : \"visible\";\n              storage.setValue(id, {\n                hidden: detail.hidden\n              });\n            },\n            editable: function editable() {\n              event.target.disabled = !detail.editable;\n            }\n          };\n          Object.keys(detail).filter(function (name) {\n            return name in actions;\n          }).forEach(function (name) {\n            return actions[name]();\n          });\n        });\n        selectElement.addEventListener(\"input\", function (event) {\n          var _this6$linkService$ev;\n\n          var exportValue = getValue(event, true);\n          var value = getValue(event, false);\n          storage.setValue(id, {\n            value: exportValue\n          });\n          (_this6$linkService$ev = _this6.linkService.eventBus) === null || _this6$linkService$ev === void 0 ? void 0 : _this6$linkService$ev.dispatch(\"dispatcheventinsandbox\", {\n            source: _this6,\n            detail: {\n              id: id,\n              name: \"Keystroke\",\n              value: value,\n              changeEx: exportValue,\n              willCommit: true,\n              commitKey: 1,\n              keyDown: false\n            }\n          });\n        });\n\n        this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], function (event) {\n          return event.target.checked;\n        });\n      } else {\n        selectElement.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: getValue(event)\n          });\n        });\n      }\n\n      this.container.appendChild(selectElement);\n      return this.container;\n    }\n  }]);\n\n  return ChoiceWidgetAnnotationElement;\n}(WidgetAnnotationElement);\n\nvar PopupAnnotationElement = /*#__PURE__*/function (_AnnotationElement4) {\n  _inherits(PopupAnnotationElement, _AnnotationElement4);\n\n  var _super9 = _createSuper(PopupAnnotationElement);\n\n  function PopupAnnotationElement(parameters) {\n    _classCallCheck(this, PopupAnnotationElement);\n\n    var isRenderable = !!(parameters.data.title || parameters.data.contents);\n    return _super9.call(this, parameters, {\n      isRenderable: isRenderable\n    });\n  }\n\n  _createClass(PopupAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      var IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n      this.container.className = \"popupAnnotation\";\n\n      if (IGNORE_TYPES.includes(this.data.parentType)) {\n        return this.container;\n      }\n\n      var selector = \"[data-annotation-id=\\\"\".concat(this.data.parentId, \"\\\"]\");\n      var parentElements = this.layer.querySelectorAll(selector);\n\n      if (parentElements.length === 0) {\n        return this.container;\n      }\n\n      var popup = new PopupElement({\n        container: this.container,\n        trigger: Array.from(parentElements),\n        color: this.data.color,\n        title: this.data.title,\n        modificationDate: this.data.modificationDate,\n        contents: this.data.contents\n      });\n      var page = this.page;\n\n      var rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n      var popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n      var popupTop = rect[1];\n      this.container.style.transformOrigin = \"\".concat(-popupLeft, \"px \").concat(-popupTop, \"px\");\n      this.container.style.left = \"\".concat(popupLeft, \"px\");\n      this.container.style.top = \"\".concat(popupTop, \"px\");\n      this.container.appendChild(popup.render());\n      return this.container;\n    }\n  }]);\n\n  return PopupAnnotationElement;\n}(AnnotationElement);\n\nvar PopupElement = /*#__PURE__*/function () {\n  function PopupElement(parameters) {\n    _classCallCheck(this, PopupElement);\n\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.title = parameters.title;\n    this.modificationDate = parameters.modificationDate;\n    this.contents = parameters.contents;\n    this.hideWrapper = parameters.hideWrapper || false;\n    this.pinned = false;\n  }\n\n  _createClass(PopupElement, [{\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var BACKGROUND_ENLIGHT = 0.7;\n      var wrapper = document.createElement(\"div\");\n      wrapper.className = \"popupWrapper\";\n      this.hideElement = this.hideWrapper ? wrapper : this.container;\n      this.hideElement.hidden = true;\n      var popup = document.createElement(\"div\");\n      popup.className = \"popup\";\n      var color = this.color;\n\n      if (color) {\n        var r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n        var g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n        var b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n        popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n      }\n\n      var title = document.createElement(\"h1\");\n      title.textContent = this.title;\n      popup.appendChild(title);\n\n      var dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n      if (dateObject) {\n        var modificationDate = document.createElement(\"span\");\n        modificationDate.textContent = \"{{date}}, {{time}}\";\n        modificationDate.dataset.l10nId = \"annotation_date_string\";\n        modificationDate.dataset.l10nArgs = JSON.stringify({\n          date: dateObject.toLocaleDateString(),\n          time: dateObject.toLocaleTimeString()\n        });\n        popup.appendChild(modificationDate);\n      }\n\n      var contents = this._formatContents(this.contents);\n\n      popup.appendChild(contents);\n\n      if (!Array.isArray(this.trigger)) {\n        this.trigger = [this.trigger];\n      }\n\n      this.trigger.forEach(function (element) {\n        element.addEventListener(\"click\", _this7._toggle.bind(_this7));\n        element.addEventListener(\"mouseover\", _this7._show.bind(_this7, false));\n        element.addEventListener(\"mouseout\", _this7._hide.bind(_this7, false));\n      });\n      popup.addEventListener(\"click\", this._hide.bind(this, true));\n      wrapper.appendChild(popup);\n      return wrapper;\n    }\n  }, {\n    key: \"_formatContents\",\n    value: function _formatContents(contents) {\n      var p = document.createElement(\"p\");\n      var lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n      for (var i = 0, ii = lines.length; i < ii; ++i) {\n        var line = lines[i];\n        p.appendChild(document.createTextNode(line));\n\n        if (i < ii - 1) {\n          p.appendChild(document.createElement(\"br\"));\n        }\n      }\n\n      return p;\n    }\n  }, {\n    key: \"_toggle\",\n    value: function _toggle() {\n      if (this.pinned) {\n        this._hide(true);\n      } else {\n        this._show(true);\n      }\n    }\n  }, {\n    key: \"_show\",\n    value: function _show() {\n      var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (pin) {\n        this.pinned = true;\n      }\n\n      if (this.hideElement.hidden) {\n        this.hideElement.hidden = false;\n        this.container.style.zIndex += 1;\n      }\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      var unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (unpin) {\n        this.pinned = false;\n      }\n\n      if (!this.hideElement.hidden && !this.pinned) {\n        this.hideElement.hidden = true;\n        this.container.style.zIndex -= 1;\n      }\n    }\n  }]);\n\n  return PopupElement;\n}();\n\nvar FreeTextAnnotationElement = /*#__PURE__*/function (_AnnotationElement5) {\n  _inherits(FreeTextAnnotationElement, _AnnotationElement5);\n\n  var _super10 = _createSuper(FreeTextAnnotationElement);\n\n  function FreeTextAnnotationElement(parameters) {\n    _classCallCheck(this, FreeTextAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super10.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(FreeTextAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"freeTextAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n  }]);\n\n  return FreeTextAnnotationElement;\n}(AnnotationElement);\n\nvar LineAnnotationElement = /*#__PURE__*/function (_AnnotationElement6) {\n  _inherits(LineAnnotationElement, _AnnotationElement6);\n\n  var _super11 = _createSuper(LineAnnotationElement);\n\n  function LineAnnotationElement(parameters) {\n    _classCallCheck(this, LineAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super11.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(LineAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"lineAnnotation\";\n      var data = this.data;\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      var svg = this.svgFactory.create(width, height);\n      var line = this.svgFactory.createElement(\"svg:line\");\n      line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n      line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n      line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n      line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n      line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      line.setAttribute(\"stroke\", \"transparent\");\n      svg.appendChild(line);\n      this.container.append(svg);\n\n      this._createPopup(line, data);\n\n      return this.container;\n    }\n  }]);\n\n  return LineAnnotationElement;\n}(AnnotationElement);\n\nvar SquareAnnotationElement = /*#__PURE__*/function (_AnnotationElement7) {\n  _inherits(SquareAnnotationElement, _AnnotationElement7);\n\n  var _super12 = _createSuper(SquareAnnotationElement);\n\n  function SquareAnnotationElement(parameters) {\n    _classCallCheck(this, SquareAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super12.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(SquareAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"squareAnnotation\";\n      var data = this.data;\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      var svg = this.svgFactory.create(width, height);\n      var borderWidth = data.borderStyle.width;\n      var square = this.svgFactory.createElement(\"svg:rect\");\n      square.setAttribute(\"x\", borderWidth / 2);\n      square.setAttribute(\"y\", borderWidth / 2);\n      square.setAttribute(\"width\", width - borderWidth);\n      square.setAttribute(\"height\", height - borderWidth);\n      square.setAttribute(\"stroke-width\", borderWidth || 1);\n      square.setAttribute(\"stroke\", \"transparent\");\n      square.setAttribute(\"fill\", \"none\");\n      svg.appendChild(square);\n      this.container.append(svg);\n\n      this._createPopup(square, data);\n\n      return this.container;\n    }\n  }]);\n\n  return SquareAnnotationElement;\n}(AnnotationElement);\n\nvar CircleAnnotationElement = /*#__PURE__*/function (_AnnotationElement8) {\n  _inherits(CircleAnnotationElement, _AnnotationElement8);\n\n  var _super13 = _createSuper(CircleAnnotationElement);\n\n  function CircleAnnotationElement(parameters) {\n    _classCallCheck(this, CircleAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super13.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(CircleAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"circleAnnotation\";\n      var data = this.data;\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      var svg = this.svgFactory.create(width, height);\n      var borderWidth = data.borderStyle.width;\n      var circle = this.svgFactory.createElement(\"svg:ellipse\");\n      circle.setAttribute(\"cx\", width / 2);\n      circle.setAttribute(\"cy\", height / 2);\n      circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n      circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n      circle.setAttribute(\"stroke-width\", borderWidth || 1);\n      circle.setAttribute(\"stroke\", \"transparent\");\n      circle.setAttribute(\"fill\", \"none\");\n      svg.appendChild(circle);\n      this.container.append(svg);\n\n      this._createPopup(circle, data);\n\n      return this.container;\n    }\n  }]);\n\n  return CircleAnnotationElement;\n}(AnnotationElement);\n\nvar PolylineAnnotationElement = /*#__PURE__*/function (_AnnotationElement9) {\n  _inherits(PolylineAnnotationElement, _AnnotationElement9);\n\n  var _super14 = _createSuper(PolylineAnnotationElement);\n\n  function PolylineAnnotationElement(parameters) {\n    var _this8;\n\n    _classCallCheck(this, PolylineAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    _this8 = _super14.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n    _this8.containerClassName = \"polylineAnnotation\";\n    _this8.svgElementName = \"svg:polyline\";\n    return _this8;\n  }\n\n  _createClass(PolylineAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = this.containerClassName;\n      var data = this.data;\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      var svg = this.svgFactory.create(width, height);\n      var points = [];\n\n      var _iterator8 = _createForOfIteratorHelper(data.vertices),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var coordinate = _step8.value;\n          var x = coordinate.x - data.rect[0];\n          var y = data.rect[3] - coordinate.y;\n          points.push(x + \",\" + y);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      points = points.join(\" \");\n      var polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n      svg.appendChild(polyline);\n      this.container.append(svg);\n\n      this._createPopup(polyline, data);\n\n      return this.container;\n    }\n  }]);\n\n  return PolylineAnnotationElement;\n}(AnnotationElement);\n\nvar PolygonAnnotationElement = /*#__PURE__*/function (_PolylineAnnotationEl) {\n  _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);\n\n  var _super15 = _createSuper(PolygonAnnotationElement);\n\n  function PolygonAnnotationElement(parameters) {\n    var _this9;\n\n    _classCallCheck(this, PolygonAnnotationElement);\n\n    _this9 = _super15.call(this, parameters);\n    _this9.containerClassName = \"polygonAnnotation\";\n    _this9.svgElementName = \"svg:polygon\";\n    return _this9;\n  }\n\n  return PolygonAnnotationElement;\n}(PolylineAnnotationElement);\n\nvar CaretAnnotationElement = /*#__PURE__*/function (_AnnotationElement10) {\n  _inherits(CaretAnnotationElement, _AnnotationElement10);\n\n  var _super16 = _createSuper(CaretAnnotationElement);\n\n  function CaretAnnotationElement(parameters) {\n    _classCallCheck(this, CaretAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super16.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(CaretAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"caretAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n  }]);\n\n  return CaretAnnotationElement;\n}(AnnotationElement);\n\nvar InkAnnotationElement = /*#__PURE__*/function (_AnnotationElement11) {\n  _inherits(InkAnnotationElement, _AnnotationElement11);\n\n  var _super17 = _createSuper(InkAnnotationElement);\n\n  function InkAnnotationElement(parameters) {\n    var _this10;\n\n    _classCallCheck(this, InkAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    _this10 = _super17.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n    _this10.containerClassName = \"inkAnnotation\";\n    _this10.svgElementName = \"svg:polyline\";\n    return _this10;\n  }\n\n  _createClass(InkAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = this.containerClassName;\n      var data = this.data;\n      var width = data.rect[2] - data.rect[0];\n      var height = data.rect[3] - data.rect[1];\n      var svg = this.svgFactory.create(width, height);\n\n      var _iterator9 = _createForOfIteratorHelper(data.inkLists),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var inkList = _step9.value;\n          var points = [];\n\n          var _iterator10 = _createForOfIteratorHelper(inkList),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var coordinate = _step10.value;\n              var x = coordinate.x - data.rect[0];\n              var y = data.rect[3] - coordinate.y;\n              points.push(\"\".concat(x, \",\").concat(y));\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n\n          points = points.join(\" \");\n          var polyline = this.svgFactory.createElement(this.svgElementName);\n          polyline.setAttribute(\"points\", points);\n          polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n          polyline.setAttribute(\"stroke\", \"transparent\");\n          polyline.setAttribute(\"fill\", \"none\");\n\n          this._createPopup(polyline, data);\n\n          svg.appendChild(polyline);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      this.container.append(svg);\n      return this.container;\n    }\n  }]);\n\n  return InkAnnotationElement;\n}(AnnotationElement);\n\nvar HighlightAnnotationElement = /*#__PURE__*/function (_AnnotationElement12) {\n  _inherits(HighlightAnnotationElement, _AnnotationElement12);\n\n  var _super18 = _createSuper(HighlightAnnotationElement);\n\n  function HighlightAnnotationElement(parameters) {\n    _classCallCheck(this, HighlightAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super18.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n\n  _createClass(HighlightAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"highlightAnnotation\");\n      }\n\n      this.container.className = \"highlightAnnotation\";\n      return this.container;\n    }\n  }]);\n\n  return HighlightAnnotationElement;\n}(AnnotationElement);\n\nvar UnderlineAnnotationElement = /*#__PURE__*/function (_AnnotationElement13) {\n  _inherits(UnderlineAnnotationElement, _AnnotationElement13);\n\n  var _super19 = _createSuper(UnderlineAnnotationElement);\n\n  function UnderlineAnnotationElement(parameters) {\n    _classCallCheck(this, UnderlineAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super19.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n\n  _createClass(UnderlineAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"underlineAnnotation\");\n      }\n\n      this.container.className = \"underlineAnnotation\";\n      return this.container;\n    }\n  }]);\n\n  return UnderlineAnnotationElement;\n}(AnnotationElement);\n\nvar SquigglyAnnotationElement = /*#__PURE__*/function (_AnnotationElement14) {\n  _inherits(SquigglyAnnotationElement, _AnnotationElement14);\n\n  var _super20 = _createSuper(SquigglyAnnotationElement);\n\n  function SquigglyAnnotationElement(parameters) {\n    _classCallCheck(this, SquigglyAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super20.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n\n  _createClass(SquigglyAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"squigglyAnnotation\");\n      }\n\n      this.container.className = \"squigglyAnnotation\";\n      return this.container;\n    }\n  }]);\n\n  return SquigglyAnnotationElement;\n}(AnnotationElement);\n\nvar StrikeOutAnnotationElement = /*#__PURE__*/function (_AnnotationElement15) {\n  _inherits(StrikeOutAnnotationElement, _AnnotationElement15);\n\n  var _super21 = _createSuper(StrikeOutAnnotationElement);\n\n  function StrikeOutAnnotationElement(parameters) {\n    _classCallCheck(this, StrikeOutAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super21.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true\n    });\n  }\n\n  _createClass(StrikeOutAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      if (this.quadrilaterals) {\n        return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n      }\n\n      this.container.className = \"strikeoutAnnotation\";\n      return this.container;\n    }\n  }]);\n\n  return StrikeOutAnnotationElement;\n}(AnnotationElement);\n\nvar StampAnnotationElement = /*#__PURE__*/function (_AnnotationElement16) {\n  _inherits(StampAnnotationElement, _AnnotationElement16);\n\n  var _super22 = _createSuper(StampAnnotationElement);\n\n  function StampAnnotationElement(parameters) {\n    _classCallCheck(this, StampAnnotationElement);\n\n    var isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n    return _super22.call(this, parameters, {\n      isRenderable: isRenderable,\n      ignoreBorder: true\n    });\n  }\n\n  _createClass(StampAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"stampAnnotation\";\n\n      if (!this.data.hasPopup) {\n        this._createPopup(null, this.data);\n      }\n\n      return this.container;\n    }\n  }]);\n\n  return StampAnnotationElement;\n}(AnnotationElement);\n\nvar FileAttachmentAnnotationElement = /*#__PURE__*/function (_AnnotationElement17) {\n  _inherits(FileAttachmentAnnotationElement, _AnnotationElement17);\n\n  var _super23 = _createSuper(FileAttachmentAnnotationElement);\n\n  function FileAttachmentAnnotationElement(parameters) {\n    var _this11$linkService$e;\n\n    var _this11;\n\n    _classCallCheck(this, FileAttachmentAnnotationElement);\n\n    _this11 = _super23.call(this, parameters, {\n      isRenderable: true\n    });\n    var _this11$data$file = _this11.data.file,\n        filename = _this11$data$file.filename,\n        content = _this11$data$file.content;\n    _this11.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n    _this11.content = content;\n    (_this11$linkService$e = _this11.linkService.eventBus) === null || _this11$linkService$e === void 0 ? void 0 : _this11$linkService$e.dispatch(\"fileattachmentannotation\", {\n      source: _assertThisInitialized(_this11),\n      id: (0, _util.stringToPDFString)(filename),\n      filename: filename,\n      content: content\n    });\n    return _this11;\n  }\n\n  _createClass(FileAttachmentAnnotationElement, [{\n    key: \"render\",\n    value: function render() {\n      this.container.className = \"fileAttachmentAnnotation\";\n      var trigger = document.createElement(\"div\");\n      trigger.style.height = this.container.style.height;\n      trigger.style.width = this.container.style.width;\n      trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n      if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n        this._createPopup(trigger, this.data);\n      }\n\n      this.container.appendChild(trigger);\n      return this.container;\n    }\n  }, {\n    key: \"_download\",\n    value: function _download() {\n      if (!this.downloadManager) {\n        (0, _util.warn)(\"Download cannot be started due to unavailable download manager\");\n        return;\n      }\n\n      this.downloadManager.downloadData(this.content, this.filename, \"\");\n    }\n  }]);\n\n  return FileAttachmentAnnotationElement;\n}(AnnotationElement);\n\nvar AnnotationLayer = /*#__PURE__*/function () {\n  function AnnotationLayer() {\n    _classCallCheck(this, AnnotationLayer);\n  }\n\n  _createClass(AnnotationLayer, null, [{\n    key: \"render\",\n    value: function render(parameters) {\n      var sortedAnnotations = [],\n          popupAnnotations = [];\n\n      var _iterator11 = _createForOfIteratorHelper(parameters.annotations),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _data = _step11.value;\n\n          if (!_data) {\n            continue;\n          }\n\n          if (_data.annotationType === _util.AnnotationType.POPUP) {\n            popupAnnotations.push(_data);\n            continue;\n          }\n\n          sortedAnnotations.push(_data);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      if (popupAnnotations.length) {\n        sortedAnnotations.push.apply(sortedAnnotations, popupAnnotations);\n      }\n\n      for (var _i2 = 0, _sortedAnnotations = sortedAnnotations; _i2 < _sortedAnnotations.length; _i2++) {\n        var data = _sortedAnnotations[_i2];\n        var element = AnnotationElementFactory.create({\n          data: data,\n          layer: parameters.div,\n          page: parameters.page,\n          viewport: parameters.viewport,\n          linkService: parameters.linkService,\n          downloadManager: parameters.downloadManager,\n          imageResourcesPath: parameters.imageResourcesPath || \"\",\n          renderInteractiveForms: typeof parameters.renderInteractiveForms === \"boolean\" ? parameters.renderInteractiveForms : true,\n          svgFactory: new _display_utils.DOMSVGFactory(),\n          annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n          enableScripting: parameters.enableScripting,\n          hasJSActions: parameters.hasJSActions,\n          mouseState: parameters.mouseState || {\n            isDown: false\n          }\n        });\n\n        if (element.isRenderable) {\n          var rendered = element.render();\n\n          if (data.hidden) {\n            rendered.style.visibility = \"hidden\";\n          }\n\n          if (Array.isArray(rendered)) {\n            var _iterator12 = _createForOfIteratorHelper(rendered),\n                _step12;\n\n            try {\n              for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                var renderedElement = _step12.value;\n                parameters.div.appendChild(renderedElement);\n              }\n            } catch (err) {\n              _iterator12.e(err);\n            } finally {\n              _iterator12.f();\n            }\n          } else {\n            if (element instanceof PopupAnnotationElement) {\n              parameters.div.prepend(rendered);\n            } else {\n              parameters.div.appendChild(rendered);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(parameters) {\n      var transform = \"matrix(\".concat(parameters.viewport.transform.join(\",\"), \")\");\n\n      var _iterator13 = _createForOfIteratorHelper(parameters.annotations),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var data = _step13.value;\n          var elements = parameters.div.querySelectorAll(\"[data-annotation-id=\\\"\".concat(data.id, \"\\\"]\"));\n\n          if (elements) {\n            elements.forEach(function (element) {\n              element.style.transform = transform;\n            });\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      parameters.div.hidden = false;\n    }\n  }]);\n\n  return AnnotationLayer;\n}();\n\nexports.AnnotationLayer = AnnotationLayer;\n\n/***/ }),\n/* 150 */\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ColorConverters = void 0;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n}\n\nvar ColorConverters = /*#__PURE__*/function () {\n  function ColorConverters() {\n    _classCallCheck(this, ColorConverters);\n  }\n\n  _createClass(ColorConverters, null, [{\n    key: \"CMYK_G\",\n    value: function CMYK_G(_ref) {\n      var _ref2 = _slicedToArray(_ref, 4),\n          c = _ref2[0],\n          y = _ref2[1],\n          m = _ref2[2],\n          k = _ref2[3];\n\n      return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n    }\n  }, {\n    key: \"G_CMYK\",\n    value: function G_CMYK(_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          g = _ref4[0];\n\n      return [\"CMYK\", 0, 0, 0, 1 - g];\n    }\n  }, {\n    key: \"G_RGB\",\n    value: function G_RGB(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          g = _ref6[0];\n\n      return [\"RGB\", g, g, g];\n    }\n  }, {\n    key: \"G_HTML\",\n    value: function G_HTML(_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          g = _ref8[0];\n\n      var G = makeColorComp(g);\n      return \"#\".concat(G).concat(G).concat(G);\n    }\n  }, {\n    key: \"RGB_G\",\n    value: function RGB_G(_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 3),\n          r = _ref10[0],\n          g = _ref10[1],\n          b = _ref10[2];\n\n      return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n    }\n  }, {\n    key: \"RGB_HTML\",\n    value: function RGB_HTML(_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 3),\n          r = _ref12[0],\n          g = _ref12[1],\n          b = _ref12[2];\n\n      var R = makeColorComp(r);\n      var G = makeColorComp(g);\n      var B = makeColorComp(b);\n      return \"#\".concat(R).concat(G).concat(B);\n    }\n  }, {\n    key: \"T_HTML\",\n    value: function T_HTML() {\n      return \"#00000000\";\n    }\n  }, {\n    key: \"CMYK_RGB\",\n    value: function CMYK_RGB(_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 4),\n          c = _ref14[0],\n          y = _ref14[1],\n          m = _ref14[2],\n          k = _ref14[3];\n\n      return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n    }\n  }, {\n    key: \"CMYK_HTML\",\n    value: function CMYK_HTML(components) {\n      return this.RGB_HTML(this.CMYK_RGB(components));\n    }\n  }, {\n    key: \"RGB_CMYK\",\n    value: function RGB_CMYK(_ref15) {\n      var _ref16 = _slicedToArray(_ref15, 3),\n          r = _ref16[0],\n          g = _ref16[1],\n          b = _ref16[2];\n\n      var c = 1 - r;\n      var m = 1 - g;\n      var y = 1 - b;\n      var k = Math.min(c, m, y);\n      return [\"CMYK\", c, m, y, k];\n    }\n  }]);\n\n  return ColorConverters;\n}();\n\nexports.ColorConverters = ColorConverters;\n\n/***/ }),\n/* 151 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.renderTextLayer = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar renderTextLayer = function renderTextLayerClosure() {\n  var MAX_TEXT_DIVS_TO_RENDER = 100000;\n  var NonWhitespaceRegexp = /\\S/;\n\n  function isAllWhitespace(str) {\n    return !NonWhitespaceRegexp.test(str);\n  }\n\n  function appendText(task, geom, styles) {\n    var textDiv = document.createElement(\"div\");\n    var textDivProperties = {\n      angle: 0,\n      canvasWidth: 0,\n      isWhitespace: false,\n      originalTransform: null,\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingRight: 0,\n      paddingTop: 0,\n      scale: 1\n    };\n\n    task._textDivs.push(textDiv);\n\n    if (isAllWhitespace(geom.str)) {\n      textDivProperties.isWhitespace = true;\n\n      task._textDivProperties.set(textDiv, textDivProperties);\n\n      return;\n    }\n\n    var tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n    var angle = Math.atan2(tx[1], tx[0]);\n    var style = styles[geom.fontName];\n\n    if (style.vertical) {\n      angle += Math.PI / 2;\n    }\n\n    var fontHeight = Math.hypot(tx[2], tx[3]);\n    var fontAscent = fontHeight;\n\n    if (style.ascent) {\n      fontAscent = style.ascent * fontAscent;\n    } else if (style.descent) {\n      fontAscent = (1 + style.descent) * fontAscent;\n    }\n\n    var left, top;\n\n    if (angle === 0) {\n      left = tx[4];\n      top = tx[5] - fontAscent;\n    } else {\n      left = tx[4] + fontAscent * Math.sin(angle);\n      top = tx[5] - fontAscent * Math.cos(angle);\n    }\n\n    textDiv.style.left = \"\".concat(left, \"px\");\n    textDiv.style.top = \"\".concat(top, \"px\");\n    textDiv.style.fontSize = \"\".concat(fontHeight, \"px\");\n    textDiv.style.fontFamily = style.fontFamily;\n\n    if (task._container.classList && task._container.classList.contains(\"visible\") && geom.fillColor) {\n      textDiv.style.color = \"rgb(\".concat(geom.fillColor[0], \", \").concat(geom.fillColor[1], \", \").concat(geom.fillColor[2], \");\");\n    }\n\n    textDiv.textContent = geom.str;\n    textDiv.dir = geom.dir;\n\n    if (task._fontInspectorEnabled) {\n      textDiv.dataset.fontName = geom.fontName;\n    }\n\n    if (angle !== 0) {\n      textDivProperties.angle = angle * (180 / Math.PI);\n    }\n\n    var shouldScaleText = false;\n\n    if (geom.str.length > 1) {\n      shouldScaleText = true;\n    } else if (geom.transform[0] !== geom.transform[3]) {\n      var absScaleX = Math.abs(geom.transform[0]),\n          absScaleY = Math.abs(geom.transform[3]);\n\n      if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n        shouldScaleText = true;\n      }\n    }\n\n    if (shouldScaleText) {\n      if (style.vertical) {\n        textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n      } else {\n        textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n      }\n    }\n\n    task._textDivProperties.set(textDiv, textDivProperties);\n\n    if (task._textContentStream) {\n      task._layoutText(textDiv);\n    }\n\n    if (task._enhanceTextSelection) {\n      var angleCos = 1,\n          angleSin = 0;\n\n      if (angle !== 0) {\n        angleCos = Math.cos(angle);\n        angleSin = Math.sin(angle);\n      }\n\n      var divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n      var divHeight = fontHeight;\n      var m, b;\n\n      if (angle !== 0) {\n        m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n        b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n      } else {\n        b = [left, top, left + divWidth, top + divHeight];\n      }\n\n      task._bounds.push({\n        left: b[0],\n        top: b[1],\n        right: b[2],\n        bottom: b[3],\n        div: textDiv,\n        size: [divWidth, divHeight],\n        m: m\n      });\n    }\n  }\n\n  function render(task) {\n    if (task._canceled) {\n      return;\n    }\n\n    var textDivs = task._textDivs;\n    var capability = task._capability;\n    var textDivsLength = textDivs.length;\n\n    if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n      task._renderingDone = true;\n      capability.resolve();\n      return;\n    }\n\n    if (!task._textContentStream) {\n      for (var i = 0; i < textDivsLength; i++) {\n        task._layoutText(textDivs[i]);\n      }\n    }\n\n    task._renderingDone = true;\n    capability.resolve();\n  }\n\n  function findPositiveMin(ts, offset, count) {\n    var result = 0;\n\n    for (var i = 0; i < count; i++) {\n      var t = ts[offset++];\n\n      if (t > 0) {\n        result = result ? Math.min(t, result) : t;\n      }\n    }\n\n    return result;\n  }\n\n  function expand(task) {\n    var bounds = task._bounds;\n    var viewport = task._viewport;\n    var expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n    var _loop = function _loop(i) {\n      var div = bounds[i].div;\n\n      var divProperties = task._textDivProperties.get(div);\n\n      if (divProperties.angle === 0) {\n        divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n        divProperties.paddingTop = bounds[i].top - expanded[i].top;\n        divProperties.paddingRight = expanded[i].right - bounds[i].right;\n        divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n        task._textDivProperties.set(div, divProperties);\n\n        return \"continue\";\n      }\n\n      var e = expanded[i],\n          b = bounds[i];\n      var m = b.m,\n          c = m[0],\n          s = m[1];\n      var points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n      var ts = new Float64Array(64);\n      points.forEach(function (p, j) {\n        var t = _util.Util.applyTransform(p, m);\n\n        ts[j + 0] = c && (e.left - t[0]) / c;\n        ts[j + 4] = s && (e.top - t[1]) / s;\n        ts[j + 8] = c && (e.right - t[0]) / c;\n        ts[j + 12] = s && (e.bottom - t[1]) / s;\n        ts[j + 16] = s && (e.left - t[0]) / -s;\n        ts[j + 20] = c && (e.top - t[1]) / c;\n        ts[j + 24] = s && (e.right - t[0]) / -s;\n        ts[j + 28] = c && (e.bottom - t[1]) / c;\n        ts[j + 32] = c && (e.left - t[0]) / -c;\n        ts[j + 36] = s && (e.top - t[1]) / -s;\n        ts[j + 40] = c && (e.right - t[0]) / -c;\n        ts[j + 44] = s && (e.bottom - t[1]) / -s;\n        ts[j + 48] = s && (e.left - t[0]) / s;\n        ts[j + 52] = c && (e.top - t[1]) / -c;\n        ts[j + 56] = s && (e.right - t[0]) / s;\n        ts[j + 60] = c && (e.bottom - t[1]) / -c;\n      });\n      var boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n      divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n      divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n      divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n      divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n      task._textDivProperties.set(div, divProperties);\n    };\n\n    for (var i = 0; i < expanded.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n  }\n\n  function expandBounds(width, height, boxes) {\n    var bounds = boxes.map(function (box, i) {\n      return {\n        x1: box.left,\n        y1: box.top,\n        x2: box.right,\n        y2: box.bottom,\n        index: i,\n        x1New: undefined,\n        x2New: undefined\n      };\n    });\n    expandBoundsLTR(width, bounds);\n    var expanded = new Array(boxes.length);\n    bounds.forEach(function (b) {\n      var i = b.index;\n      expanded[i] = {\n        left: b.x1New,\n        top: 0,\n        right: b.x2New,\n        bottom: 0\n      };\n    });\n    boxes.map(function (box, i) {\n      var e = expanded[i],\n          b = bounds[i];\n      b.x1 = box.top;\n      b.y1 = width - e.right;\n      b.x2 = box.bottom;\n      b.y2 = width - e.left;\n      b.index = i;\n      b.x1New = undefined;\n      b.x2New = undefined;\n    });\n    expandBoundsLTR(height, bounds);\n    bounds.forEach(function (b) {\n      var i = b.index;\n      expanded[i].top = b.x1New;\n      expanded[i].bottom = b.x2New;\n    });\n    return expanded;\n  }\n\n  function expandBoundsLTR(width, bounds) {\n    bounds.sort(function (a, b) {\n      return a.x1 - b.x1 || a.index - b.index;\n    });\n    var fakeBoundary = {\n      x1: -Infinity,\n      y1: -Infinity,\n      x2: 0,\n      y2: Infinity,\n      index: -1,\n      x1New: 0,\n      x2New: 0\n    };\n    var horizon = [{\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary\n    }];\n    bounds.forEach(function (boundary) {\n      var i = 0;\n\n      while (i < horizon.length && horizon[i].end <= boundary.y1) {\n        i++;\n      }\n\n      var j = horizon.length - 1;\n\n      while (j >= 0 && horizon[j].start >= boundary.y2) {\n        j--;\n      }\n\n      var horizonPart, affectedBoundary;\n      var q,\n          k,\n          maxXNew = -Infinity;\n\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        var xNew = void 0;\n\n        if (affectedBoundary.x2 > boundary.x1) {\n          xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n        } else if (affectedBoundary.x2New === undefined) {\n          xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n        } else {\n          xNew = affectedBoundary.x2New;\n        }\n\n        if (xNew > maxXNew) {\n          maxXNew = xNew;\n        }\n      }\n\n      boundary.x1New = maxXNew;\n\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n\n        if (affectedBoundary.x2New === undefined) {\n          if (affectedBoundary.x2 > boundary.x1) {\n            if (affectedBoundary.index > boundary.index) {\n              affectedBoundary.x2New = affectedBoundary.x2;\n            }\n          } else {\n            affectedBoundary.x2New = maxXNew;\n          }\n        } else if (affectedBoundary.x2New > maxXNew) {\n          affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n        }\n      }\n\n      var changedHorizon = [];\n      var lastBoundary = null;\n\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n        var useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n        if (lastBoundary === useBoundary) {\n          changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n        } else {\n          changedHorizon.push({\n            start: horizonPart.start,\n            end: horizonPart.end,\n            boundary: useBoundary\n          });\n          lastBoundary = useBoundary;\n        }\n      }\n\n      if (horizon[i].start < boundary.y1) {\n        changedHorizon[0].start = boundary.y1;\n        changedHorizon.unshift({\n          start: horizon[i].start,\n          end: boundary.y1,\n          boundary: horizon[i].boundary\n        });\n      }\n\n      if (boundary.y2 < horizon[j].end) {\n        changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n        changedHorizon.push({\n          start: boundary.y2,\n          end: horizon[j].end,\n          boundary: horizon[j].boundary\n        });\n      }\n\n      for (q = i; q <= j; q++) {\n        horizonPart = horizon[q];\n        affectedBoundary = horizonPart.boundary;\n\n        if (affectedBoundary.x2New !== undefined) {\n          continue;\n        }\n\n        var used = false;\n\n        for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n          used = horizon[k].boundary === affectedBoundary;\n        }\n\n        for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n          used = horizon[k].boundary === affectedBoundary;\n        }\n\n        for (k = 0; !used && k < changedHorizon.length; k++) {\n          used = changedHorizon[k].boundary === affectedBoundary;\n        }\n\n        if (!used) {\n          affectedBoundary.x2New = maxXNew;\n        }\n      }\n\n      Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n    });\n    horizon.forEach(function (horizonPart) {\n      var affectedBoundary = horizonPart.boundary;\n\n      if (affectedBoundary.x2New === undefined) {\n        affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n      }\n    });\n  }\n\n  function TextLayerRenderTask(_ref) {\n    var _globalThis$FontInspe,\n        _this = this;\n\n    var textContent = _ref.textContent,\n        textContentStream = _ref.textContentStream,\n        container = _ref.container,\n        viewport = _ref.viewport,\n        textDivs = _ref.textDivs,\n        textContentItemsStr = _ref.textContentItemsStr,\n        enhanceTextSelection = _ref.enhanceTextSelection;\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!((_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled);\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = (0, _util.createPromiseCapability)();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    this._capability.promise[\"finally\"](function () {\n      if (_this._layoutTextCtx) {\n        _this._layoutTextCtx.canvas.width = 0;\n        _this._layoutTextCtx.canvas.height = 0;\n        _this._layoutTextCtx = null;\n      }\n    })[\"catch\"](function () {});\n  }\n\n  TextLayerRenderTask.prototype = {\n    get promise() {\n      return this._capability.promise;\n    },\n\n    cancel: function TextLayer_cancel() {\n      this._canceled = true;\n\n      if (this._reader) {\n        this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"));\n\n        this._reader = null;\n      }\n\n      if (this._renderTimer !== null) {\n        clearTimeout(this._renderTimer);\n        this._renderTimer = null;\n      }\n\n      this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n    },\n    _processItems: function _processItems(items, styleCache) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        this._textContentItemsStr.push(items[i].str);\n\n        appendText(this, items[i], styleCache);\n      }\n    },\n    _layoutText: function _layoutText(textDiv) {\n      var textDivProperties = this._textDivProperties.get(textDiv);\n\n      if (textDivProperties.isWhitespace) {\n        return;\n      }\n\n      var transform = \"\";\n\n      if (textDivProperties.canvasWidth !== 0) {\n        var _textDiv$style = textDiv.style,\n            fontSize = _textDiv$style.fontSize,\n            fontFamily = _textDiv$style.fontFamily;\n\n        if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n          this._layoutTextCtx.font = \"\".concat(fontSize, \" \").concat(fontFamily);\n          this._layoutTextLastFontSize = fontSize;\n          this._layoutTextLastFontFamily = fontFamily;\n        }\n\n        var _this$_layoutTextCtx$ = this._layoutTextCtx.measureText(textDiv.textContent),\n            width = _this$_layoutTextCtx$.width;\n\n        if (width > 0) {\n          textDivProperties.scale = textDivProperties.canvasWidth / width;\n          transform = \"scaleX(\".concat(textDivProperties.scale, \")\");\n        }\n      }\n\n      if (textDivProperties.angle !== 0) {\n        transform = \"rotate(\".concat(textDivProperties.angle, \"deg) \").concat(transform);\n      }\n\n      if (transform.length > 0) {\n        if (this._enhanceTextSelection) {\n          textDivProperties.originalTransform = transform;\n        }\n\n        textDiv.style.transform = transform;\n      }\n\n      this._textDivProperties.set(textDiv, textDivProperties);\n\n      this._container.appendChild(textDiv);\n    },\n    _render: function TextLayer_render(timeout) {\n      var _this2 = this;\n\n      var capability = (0, _util.createPromiseCapability)();\n      var styleCache = Object.create(null);\n\n      var canvas = this._document.createElement(\"canvas\");\n\n      canvas.mozOpaque = true;\n      this._layoutTextCtx = canvas.getContext(\"2d\", {\n        alpha: false\n      });\n\n      if (this._textContent) {\n        var textItems = this._textContent.items;\n        var textStyles = this._textContent.styles;\n\n        this._processItems(textItems, textStyles);\n\n        capability.resolve();\n      } else if (this._textContentStream) {\n        var pump = function pump() {\n          _this2._reader.read().then(function (_ref2) {\n            var value = _ref2.value,\n                done = _ref2.done;\n\n            if (done) {\n              capability.resolve();\n              return;\n            }\n\n            Object.assign(styleCache, value.styles);\n\n            _this2._processItems(value.items, styleCache);\n\n            pump();\n          }, capability.reject);\n        };\n\n        this._reader = this._textContentStream.getReader();\n        pump();\n      } else {\n        throw new Error('Neither \"textContent\" nor \"textContentStream\"' + \" parameters specified.\");\n      }\n\n      capability.promise.then(function () {\n        styleCache = null;\n\n        if (!timeout) {\n          render(_this2);\n        } else {\n          _this2._renderTimer = setTimeout(function () {\n            render(_this2);\n            _this2._renderTimer = null;\n          }, timeout);\n        }\n      }, this._capability.reject);\n    },\n    expandTextDivs: function TextLayer_expandTextDivs(expandDivs) {\n      if (!this._enhanceTextSelection || !this._renderingDone) {\n        return;\n      }\n\n      if (this._bounds !== null) {\n        expand(this);\n        this._bounds = null;\n      }\n\n      var transformBuf = [],\n          paddingBuf = [];\n\n      for (var i = 0, ii = this._textDivs.length; i < ii; i++) {\n        var div = this._textDivs[i];\n\n        var divProps = this._textDivProperties.get(div);\n\n        if (divProps.isWhitespace) {\n          continue;\n        }\n\n        if (expandDivs) {\n          transformBuf.length = 0;\n          paddingBuf.length = 0;\n\n          if (divProps.originalTransform) {\n            transformBuf.push(divProps.originalTransform);\n          }\n\n          if (divProps.paddingTop > 0) {\n            paddingBuf.push(\"\".concat(divProps.paddingTop, \"px\"));\n            transformBuf.push(\"translateY(\".concat(-divProps.paddingTop, \"px)\"));\n          } else {\n            paddingBuf.push(0);\n          }\n\n          if (divProps.paddingRight > 0) {\n            paddingBuf.push(\"\".concat(divProps.paddingRight / divProps.scale, \"px\"));\n          } else {\n            paddingBuf.push(0);\n          }\n\n          if (divProps.paddingBottom > 0) {\n            paddingBuf.push(\"\".concat(divProps.paddingBottom, \"px\"));\n          } else {\n            paddingBuf.push(0);\n          }\n\n          if (divProps.paddingLeft > 0) {\n            paddingBuf.push(\"\".concat(divProps.paddingLeft / divProps.scale, \"px\"));\n            transformBuf.push(\"translateX(\".concat(-divProps.paddingLeft / divProps.scale, \"px)\"));\n          } else {\n            paddingBuf.push(0);\n          }\n\n          div.style.padding = paddingBuf.join(\" \");\n\n          if (transformBuf.length) {\n            div.style.transform = transformBuf.join(\" \");\n          }\n        } else {\n          div.style.padding = null;\n          div.style.transform = divProps.originalTransform;\n        }\n      }\n    }\n  };\n\n  function renderTextLayer(renderParameters) {\n    var task = new TextLayerRenderTask({\n      textContent: renderParameters.textContent,\n      textContentStream: renderParameters.textContentStream,\n      container: renderParameters.container,\n      viewport: renderParameters.viewport,\n      textDivs: renderParameters.textDivs,\n      textContentItemsStr: renderParameters.textContentItemsStr,\n      enhanceTextSelection: renderParameters.enhanceTextSelection\n    });\n\n    task._render(renderParameters.timeout);\n\n    return task;\n  }\n\n  return renderTextLayer;\n}();\n\nexports.renderTextLayer = renderTextLayer;\n\n/***/ }),\n/* 152 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SVGGraphics = void 0;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _display_utils = __w_pdfjs_require__(1);\n\nvar _is_node = __w_pdfjs_require__(6);\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar SVGGraphics = function SVGGraphics() {\n  throw new Error(\"Not implemented: SVGGraphics\");\n};\n\nexports.SVGGraphics = SVGGraphics;\n{\n  var opListToTree = function opListToTree(opList) {\n    var opTree = [];\n    var tmp = [];\n\n    var _iterator = _createForOfIteratorHelper(opList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var opListElement = _step.value;\n\n        if (opListElement.fn === \"save\") {\n          opTree.push({\n            fnId: 92,\n            fn: \"group\",\n            items: []\n          });\n          tmp.push(opTree);\n          opTree = opTree[opTree.length - 1].items;\n          continue;\n        }\n\n        if (opListElement.fn === \"restore\") {\n          opTree = tmp.pop();\n        } else {\n          opTree.push(opListElement);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return opTree;\n  };\n\n  var pf = function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n\n    var s = value.toFixed(10);\n    var i = s.length - 1;\n\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    do {\n      i--;\n    } while (s[i] === \"0\");\n\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  };\n\n  var pm = function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n\n        return \"scale(\".concat(pf(m[0]), \" \").concat(pf(m[3]), \")\");\n      }\n\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        var a = Math.acos(m[0]) * 180 / Math.PI;\n        return \"rotate(\".concat(pf(a), \")\");\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return \"translate(\".concat(pf(m[4]), \" \").concat(pf(m[5]), \")\");\n      }\n    }\n\n    return \"matrix(\".concat(pf(m[0]), \" \").concat(pf(m[1]), \" \").concat(pf(m[2]), \" \").concat(pf(m[3]), \" \").concat(pf(m[4]), \" \") + \"\".concat(pf(m[5]), \")\");\n  };\n\n  var SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\"\n  };\n  var XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  var XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  var LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  var LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  var convertImgDataToPng = function () {\n    var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n    var CHUNK_WRAPPER_SIZE = 12;\n    var crcTable = new Int32Array(256);\n\n    for (var i = 0; i < 256; i++) {\n      var c = i;\n\n      for (var h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n        } else {\n          c = c >> 1 & 0x7fffffff;\n        }\n      }\n\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      var crc = -1;\n\n      for (var _i = start; _i < end; _i++) {\n        var a = (crc ^ data[_i]) & 0xff;\n        var b = crcTable[a];\n        crc = crc >>> 8 ^ b;\n      }\n\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      var p = offset;\n      var len = body.length;\n      data[p] = len >> 24 & 0xff;\n      data[p + 1] = len >> 16 & 0xff;\n      data[p + 2] = len >> 8 & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n      data.set(body, p);\n      p += body.length;\n      var crc = crc32(data, offset + 4, p);\n      data[p] = crc >> 24 & 0xff;\n      data[p + 1] = crc >> 16 & 0xff;\n      data[p + 2] = crc >> 8 & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      var a = 1;\n      var b = 0;\n\n      for (var _i2 = start; _i2 < end; ++_i2) {\n        a = (a + (data[_i2] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n\n      return b << 16 | a;\n    }\n\n    function deflateSync(literals) {\n      if (!_is_node.isNodeJS) {\n        return deflateSyncUncompressed(literals);\n      }\n\n      try {\n        var input;\n\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          input = Buffer.from(literals);\n        }\n\n        var output = (__webpack_require__(/*! zlib */ \"?331b\").deflateSync)(input, {\n          level: 9\n        });\n\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    function deflateSyncUncompressed(literals) {\n      var len = literals.length;\n      var maxBlockLength = 0xffff;\n      var deflateBlocks = Math.ceil(len / maxBlockLength);\n      var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      var pi = 0;\n      idat[pi++] = 0x78;\n      idat[pi++] = 0x9c;\n      var pos = 0;\n\n      while (len > maxBlockLength) {\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = len >> 8 & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n      var adler = adler32(literals, 0, literals.length);\n      idat[pi++] = adler >> 24 & 0xff;\n      idat[pi++] = adler >> 16 & 0xff;\n      idat[pi++] = adler >> 8 & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      var width = imgData.width;\n      var height = imgData.height;\n      var bitDepth, colorType, lineSize;\n      var bytes = imgData.data;\n\n      switch (kind) {\n        case _util.ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = width + 7 >> 3;\n          break;\n\n        case _util.ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n\n        case _util.ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      var literals = new Uint8Array((1 + lineSize) * height);\n      var offsetLiterals = 0,\n          offsetBytes = 0;\n\n      for (var y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0;\n        literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n        offsetLiterals = 0;\n\n        for (var _y = 0; _y < height; _y++) {\n          offsetLiterals++;\n\n          for (var _i3 = 0; _i3 < lineSize; _i3++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n      var idat = deflateSync(literals);\n      var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      var data = new Uint8Array(pngLength);\n      var offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n      return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n    }\n\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  }();\n\n  var SVGExtraState = /*#__PURE__*/function () {\n    function SVGExtraState() {\n      _classCallCheck(this, SVGExtraState);\n\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n      this.textMatrix = _util.IDENTITY_MATRIX;\n      this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = _util.TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n      this.x = 0;\n      this.y = 0;\n      this.lineX = 0;\n      this.lineY = 0;\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n      this.dashArray = [];\n      this.dashPhase = 0;\n      this.dependencies = [];\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n      this.maskId = \"\";\n    }\n\n    _createClass(SVGExtraState, [{\n      key: \"clone\",\n      value: function clone() {\n        return Object.create(this);\n      }\n    }, {\n      key: \"setCurrentPoint\",\n      value: function setCurrentPoint(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n    }]);\n\n    return SVGExtraState;\n  }();\n\n  var clipCount = 0;\n  var maskCount = 0;\n  var shadingCount = 0;\n\n  exports.SVGGraphics = SVGGraphics = /*#__PURE__*/function () {\n    function SVGGraphics(commonObjs, objs) {\n      var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      _classCallCheck(this, SVGGraphics);\n\n      this.svgFactory = new _display_utils.DOMSVGFactory();\n      this.current = new SVGExtraState();\n      this.transformMatrix = _util.IDENTITY_MATRIX;\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n      this._operatorIdMapping = [];\n\n      for (var op in _util.OPS) {\n        this._operatorIdMapping[_util.OPS[op]] = op;\n      }\n    }\n\n    _createClass(SVGGraphics, [{\n      key: \"save\",\n      value: function save() {\n        this.transformStack.push(this.transformMatrix);\n        var old = this.current;\n        this.extraStack.push(old);\n        this.current = old.clone();\n      }\n    }, {\n      key: \"restore\",\n      value: function restore() {\n        this.transformMatrix = this.transformStack.pop();\n        this.current = this.extraStack.pop();\n        this.pendingClip = null;\n        this.tgrp = null;\n      }\n    }, {\n      key: \"group\",\n      value: function group(items) {\n        this.save();\n        this.executeOpTree(items);\n        this.restore();\n      }\n    }, {\n      key: \"loadDependencies\",\n      value: function loadDependencies(operatorList) {\n        var _this = this;\n\n        var fnArray = operatorList.fnArray;\n        var argsArray = operatorList.argsArray;\n\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          if (fnArray[i] !== _util.OPS.dependency) {\n            continue;\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(argsArray[i]),\n              _step2;\n\n          try {\n            var _loop = function _loop() {\n              var obj = _step2.value;\n              var objsPool = obj.startsWith(\"g_\") ? _this.commonObjs : _this.objs;\n              var promise = new Promise(function (resolve) {\n                objsPool.get(obj, resolve);\n              });\n\n              _this.current.dependencies.push(promise);\n            };\n\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        return Promise.all(this.current.dependencies);\n      }\n    }, {\n      key: \"transform\",\n      value: function transform(a, b, c, d, e, f) {\n        var transformMatrix = [a, b, c, d, e, f];\n        this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n        this.tgrp = null;\n      }\n    }, {\n      key: \"getSVG\",\n      value: function getSVG(operatorList, viewport) {\n        var _this2 = this;\n\n        this.viewport = viewport;\n\n        var svgElement = this._initialize(viewport);\n\n        return this.loadDependencies(operatorList).then(function () {\n          _this2.transformMatrix = _util.IDENTITY_MATRIX;\n\n          _this2.executeOpTree(_this2.convertOpList(operatorList));\n\n          return svgElement;\n        });\n      }\n    }, {\n      key: \"convertOpList\",\n      value: function convertOpList(operatorList) {\n        var operatorIdMapping = this._operatorIdMapping;\n        var argsArray = operatorList.argsArray;\n        var fnArray = operatorList.fnArray;\n        var opList = [];\n\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          var fnId = fnArray[i];\n          opList.push({\n            fnId: fnId,\n            fn: operatorIdMapping[fnId],\n            args: argsArray[i]\n          });\n        }\n\n        return opListToTree(opList);\n      }\n    }, {\n      key: \"executeOpTree\",\n      value: function executeOpTree(opTree) {\n        var _iterator3 = _createForOfIteratorHelper(opTree),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var opTreeElement = _step3.value;\n            var fn = opTreeElement.fn;\n            var fnId = opTreeElement.fnId;\n            var args = opTreeElement.args;\n\n            switch (fnId | 0) {\n              case _util.OPS.beginText:\n                this.beginText();\n                break;\n\n              case _util.OPS.dependency:\n                break;\n\n              case _util.OPS.setLeading:\n                this.setLeading(args);\n                break;\n\n              case _util.OPS.setLeadingMoveText:\n                this.setLeadingMoveText(args[0], args[1]);\n                break;\n\n              case _util.OPS.setFont:\n                this.setFont(args);\n                break;\n\n              case _util.OPS.showText:\n                this.showText(args[0]);\n                break;\n\n              case _util.OPS.showSpacedText:\n                this.showText(args[0]);\n                break;\n\n              case _util.OPS.endText:\n                this.endText();\n                break;\n\n              case _util.OPS.moveText:\n                this.moveText(args[0], args[1]);\n                break;\n\n              case _util.OPS.setCharSpacing:\n                this.setCharSpacing(args[0]);\n                break;\n\n              case _util.OPS.setWordSpacing:\n                this.setWordSpacing(args[0]);\n                break;\n\n              case _util.OPS.setHScale:\n                this.setHScale(args[0]);\n                break;\n\n              case _util.OPS.setTextMatrix:\n                this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                break;\n\n              case _util.OPS.setTextRise:\n                this.setTextRise(args[0]);\n                break;\n\n              case _util.OPS.setTextRenderingMode:\n                this.setTextRenderingMode(args[0]);\n                break;\n\n              case _util.OPS.setLineWidth:\n                this.setLineWidth(args[0]);\n                break;\n\n              case _util.OPS.setLineJoin:\n                this.setLineJoin(args[0]);\n                break;\n\n              case _util.OPS.setLineCap:\n                this.setLineCap(args[0]);\n                break;\n\n              case _util.OPS.setMiterLimit:\n                this.setMiterLimit(args[0]);\n                break;\n\n              case _util.OPS.setFillRGBColor:\n                this.setFillRGBColor(args[0], args[1], args[2]);\n                break;\n\n              case _util.OPS.setStrokeRGBColor:\n                this.setStrokeRGBColor(args[0], args[1], args[2]);\n                break;\n\n              case _util.OPS.setStrokeColorN:\n                this.setStrokeColorN(args);\n                break;\n\n              case _util.OPS.setFillColorN:\n                this.setFillColorN(args);\n                break;\n\n              case _util.OPS.shadingFill:\n                this.shadingFill(args[0]);\n                break;\n\n              case _util.OPS.setDash:\n                this.setDash(args[0], args[1]);\n                break;\n\n              case _util.OPS.setRenderingIntent:\n                this.setRenderingIntent(args[0]);\n                break;\n\n              case _util.OPS.setFlatness:\n                this.setFlatness(args[0]);\n                break;\n\n              case _util.OPS.setGState:\n                this.setGState(args[0]);\n                break;\n\n              case _util.OPS.fill:\n                this.fill();\n                break;\n\n              case _util.OPS.eoFill:\n                this.eoFill();\n                break;\n\n              case _util.OPS.stroke:\n                this.stroke();\n                break;\n\n              case _util.OPS.fillStroke:\n                this.fillStroke();\n                break;\n\n              case _util.OPS.eoFillStroke:\n                this.eoFillStroke();\n                break;\n\n              case _util.OPS.clip:\n                this.clip(\"nonzero\");\n                break;\n\n              case _util.OPS.eoClip:\n                this.clip(\"evenodd\");\n                break;\n\n              case _util.OPS.paintSolidColorImageMask:\n                this.paintSolidColorImageMask();\n                break;\n\n              case _util.OPS.paintImageXObject:\n                this.paintImageXObject(args[0]);\n                break;\n\n              case _util.OPS.paintInlineImageXObject:\n                this.paintInlineImageXObject(args[0]);\n                break;\n\n              case _util.OPS.paintImageMaskXObject:\n                this.paintImageMaskXObject(args[0]);\n                break;\n\n              case _util.OPS.paintFormXObjectBegin:\n                this.paintFormXObjectBegin(args[0], args[1]);\n                break;\n\n              case _util.OPS.paintFormXObjectEnd:\n                this.paintFormXObjectEnd();\n                break;\n\n              case _util.OPS.closePath:\n                this.closePath();\n                break;\n\n              case _util.OPS.closeStroke:\n                this.closeStroke();\n                break;\n\n              case _util.OPS.closeFillStroke:\n                this.closeFillStroke();\n                break;\n\n              case _util.OPS.closeEOFillStroke:\n                this.closeEOFillStroke();\n                break;\n\n              case _util.OPS.nextLine:\n                this.nextLine();\n                break;\n\n              case _util.OPS.transform:\n                this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                break;\n\n              case _util.OPS.constructPath:\n                this.constructPath(args[0], args[1]);\n                break;\n\n              case _util.OPS.endPath:\n                this.endPath();\n                break;\n\n              case 92:\n                this.group(opTreeElement.items);\n                break;\n\n              default:\n                (0, _util.warn)(\"Unimplemented operator \".concat(fn));\n                break;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }, {\n      key: \"setWordSpacing\",\n      value: function setWordSpacing(wordSpacing) {\n        this.current.wordSpacing = wordSpacing;\n      }\n    }, {\n      key: \"setCharSpacing\",\n      value: function setCharSpacing(charSpacing) {\n        this.current.charSpacing = charSpacing;\n      }\n    }, {\n      key: \"nextLine\",\n      value: function nextLine() {\n        this.moveText(0, this.current.leading);\n      }\n    }, {\n      key: \"setTextMatrix\",\n      value: function setTextMatrix(a, b, c, d, e, f) {\n        var current = this.current;\n        current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n        current.textMatrixScale = Math.hypot(a, b);\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", \"\".concat(pf(current.fontSize), \"px\"));\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtElement.appendChild(current.tspan);\n      }\n    }, {\n      key: \"beginText\",\n      value: function beginText() {\n        var current = this.current;\n        current.x = current.lineX = 0;\n        current.y = current.lineY = 0;\n        current.textMatrix = _util.IDENTITY_MATRIX;\n        current.lineMatrix = _util.IDENTITY_MATRIX;\n        current.textMatrixScale = 1;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.txtElement = this.svgFactory.createElement(\"svg:text\");\n        current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n    }, {\n      key: \"moveText\",\n      value: function moveText(x, y) {\n        var current = this.current;\n        current.x = current.lineX += x;\n        current.y = current.lineY += y;\n        current.xcoords = [];\n        current.ycoords = [];\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", \"\".concat(pf(current.fontSize), \"px\"));\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n    }, {\n      key: \"showText\",\n      value: function showText(glyphs) {\n        var current = this.current;\n        var font = current.font;\n        var fontSize = current.fontSize;\n\n        if (fontSize === 0) {\n          return;\n        }\n\n        var fontSizeScale = current.fontSizeScale;\n        var charSpacing = current.charSpacing;\n        var wordSpacing = current.wordSpacing;\n        var fontDirection = current.fontDirection;\n        var textHScale = current.textHScale * fontDirection;\n        var vertical = font.vertical;\n        var spacingDir = vertical ? 1 : -1;\n        var defaultVMetrics = font.defaultVMetrics;\n        var widthAdvanceScale = fontSize * current.fontMatrix[0];\n        var x = 0;\n\n        var _iterator4 = _createForOfIteratorHelper(glyphs),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var glyph = _step4.value;\n\n            if (glyph === null) {\n              x += fontDirection * wordSpacing;\n              continue;\n            } else if ((0, _util.isNum)(glyph)) {\n              x += spacingDir * glyph * fontSize / 1000;\n              continue;\n            }\n\n            var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n            var character = glyph.fontChar;\n            var scaledX = void 0,\n                scaledY = void 0;\n            var width = glyph.width;\n\n            if (vertical) {\n              var vx = void 0;\n              var vmetric = glyph.vmetric || defaultVMetrics;\n              vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n              vx = -vx * widthAdvanceScale;\n              var vy = vmetric[2] * widthAdvanceScale;\n              width = vmetric ? -vmetric[0] : width;\n              scaledX = vx / fontSizeScale;\n              scaledY = (x + vy) / fontSizeScale;\n            } else {\n              scaledX = x / fontSizeScale;\n              scaledY = 0;\n            }\n\n            if (glyph.isInFont || font.missingFile) {\n              current.xcoords.push(current.x + scaledX);\n\n              if (vertical) {\n                current.ycoords.push(-current.y + scaledY);\n              }\n\n              current.tspan.textContent += character;\n            } else {}\n\n            var charWidth = void 0;\n\n            if (vertical) {\n              charWidth = width * widthAdvanceScale - spacing * fontDirection;\n            } else {\n              charWidth = width * widthAdvanceScale + spacing * fontDirection;\n            }\n\n            x += charWidth;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n        if (vertical) {\n          current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n        } else {\n          current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        }\n\n        if (vertical) {\n          current.y -= x;\n        } else {\n          current.x += x * textHScale;\n        }\n\n        current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n        current.tspan.setAttributeNS(null, \"font-size\", \"\".concat(pf(current.fontSize), \"px\"));\n\n        if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n          current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n        }\n\n        if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n          current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n        }\n\n        var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n        if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n            current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n          }\n\n          if (current.fillAlpha < 1) {\n            current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          }\n        } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n          current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n        } else {\n          current.tspan.setAttributeNS(null, \"fill\", \"none\");\n        }\n\n        if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n          var lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n          this._setStrokeAttributes(current.tspan, lineWidthScale);\n        }\n\n        var textMatrix = current.textMatrix;\n\n        if (current.textRise !== 0) {\n          textMatrix = textMatrix.slice();\n          textMatrix[5] += current.textRise;\n        }\n\n        current.txtElement.setAttributeNS(null, \"transform\", \"\".concat(pm(textMatrix), \" scale(\").concat(pf(textHScale), \", -1)\"));\n        current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n        current.txtElement.appendChild(current.tspan);\n        current.txtgrp.appendChild(current.txtElement);\n\n        this._ensureTransformGroup().appendChild(current.txtElement);\n      }\n    }, {\n      key: \"setLeadingMoveText\",\n      value: function setLeadingMoveText(x, y) {\n        this.setLeading(-y);\n        this.moveText(x, y);\n      }\n    }, {\n      key: \"addFontStyle\",\n      value: function addFontStyle(fontObj) {\n        if (!fontObj.data) {\n          throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n        }\n\n        if (!this.cssStyle) {\n          this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n          this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n          this.defs.appendChild(this.cssStyle);\n        }\n\n        var url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n        this.cssStyle.textContent += \"@font-face { font-family: \\\"\".concat(fontObj.loadedName, \"\\\";\") + \" src: url(\".concat(url, \"); }\\n\");\n      }\n    }, {\n      key: \"setFont\",\n      value: function setFont(details) {\n        var current = this.current;\n        var fontObj = this.commonObjs.get(details[0]);\n        var size = details[1];\n        current.font = fontObj;\n\n        if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n          this.addFontStyle(fontObj);\n          this.embeddedFonts[fontObj.loadedName] = fontObj;\n        }\n\n        current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        var bold = \"normal\";\n\n        if (fontObj.black) {\n          bold = \"900\";\n        } else if (fontObj.bold) {\n          bold = \"bold\";\n        }\n\n        var italic = fontObj.italic ? \"italic\" : \"normal\";\n\n        if (size < 0) {\n          size = -size;\n          current.fontDirection = -1;\n        } else {\n          current.fontDirection = 1;\n        }\n\n        current.fontSize = size;\n        current.fontFamily = fontObj.loadedName;\n        current.fontWeight = bold;\n        current.fontStyle = italic;\n        current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n        current.xcoords = [];\n        current.ycoords = [];\n      }\n    }, {\n      key: \"endText\",\n      value: function endText() {\n        var _current$txtElement;\n\n        var current = this.current;\n\n        if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && (_current$txtElement = current.txtElement) !== null && _current$txtElement !== void 0 && _current$txtElement.hasChildNodes()) {\n          current.element = current.txtElement;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n    }, {\n      key: \"setLineWidth\",\n      value: function setLineWidth(width) {\n        if (width > 0) {\n          this.current.lineWidth = width;\n        }\n      }\n    }, {\n      key: \"setLineCap\",\n      value: function setLineCap(style) {\n        this.current.lineCap = LINE_CAP_STYLES[style];\n      }\n    }, {\n      key: \"setLineJoin\",\n      value: function setLineJoin(style) {\n        this.current.lineJoin = LINE_JOIN_STYLES[style];\n      }\n    }, {\n      key: \"setMiterLimit\",\n      value: function setMiterLimit(limit) {\n        this.current.miterLimit = limit;\n      }\n    }, {\n      key: \"setStrokeAlpha\",\n      value: function setStrokeAlpha(strokeAlpha) {\n        this.current.strokeAlpha = strokeAlpha;\n      }\n    }, {\n      key: \"setStrokeRGBColor\",\n      value: function setStrokeRGBColor(r, g, b) {\n        this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n      }\n    }, {\n      key: \"setFillAlpha\",\n      value: function setFillAlpha(fillAlpha) {\n        this.current.fillAlpha = fillAlpha;\n      }\n    }, {\n      key: \"setFillRGBColor\",\n      value: function setFillRGBColor(r, g, b) {\n        this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n        this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n        this.current.xcoords = [];\n        this.current.ycoords = [];\n      }\n    }, {\n      key: \"setStrokeColorN\",\n      value: function setStrokeColorN(args) {\n        this.current.strokeColor = this._makeColorN_Pattern(args);\n      }\n    }, {\n      key: \"setFillColorN\",\n      value: function setFillColorN(args) {\n        this.current.fillColor = this._makeColorN_Pattern(args);\n      }\n    }, {\n      key: \"shadingFill\",\n      value: function shadingFill(args) {\n        var width = this.viewport.width;\n        var height = this.viewport.height;\n\n        var inv = _util.Util.inverseTransform(this.transformMatrix);\n\n        var bl = _util.Util.applyTransform([0, 0], inv);\n\n        var br = _util.Util.applyTransform([0, height], inv);\n\n        var ul = _util.Util.applyTransform([width, 0], inv);\n\n        var ur = _util.Util.applyTransform([width, height], inv);\n\n        var x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        var y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        var x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        var y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n        var rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", x0);\n        rect.setAttributeNS(null, \"y\", y0);\n        rect.setAttributeNS(null, \"width\", x1 - x0);\n        rect.setAttributeNS(null, \"height\", y1 - y0);\n        rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n        if (this.current.fillAlpha < 1) {\n          rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n        }\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n    }, {\n      key: \"_makeColorN_Pattern\",\n      value: function _makeColorN_Pattern(args) {\n        if (args[0] === \"TilingPattern\") {\n          return this._makeTilingPattern(args);\n        }\n\n        return this._makeShadingPattern(args);\n      }\n    }, {\n      key: \"_makeTilingPattern\",\n      value: function _makeTilingPattern(args) {\n        var color = args[1];\n        var operatorList = args[2];\n        var matrix = args[3] || _util.IDENTITY_MATRIX;\n\n        var _args$ = _slicedToArray(args[4], 4),\n            x0 = _args$[0],\n            y0 = _args$[1],\n            x1 = _args$[2],\n            y1 = _args$[3];\n\n        var xstep = args[5];\n        var ystep = args[6];\n        var paintType = args[7];\n        var tilingId = \"shading\".concat(shadingCount++);\n\n        var _Util$applyTransform = _util.Util.applyTransform([x0, y0], matrix),\n            _Util$applyTransform2 = _slicedToArray(_Util$applyTransform, 2),\n            tx0 = _Util$applyTransform2[0],\n            ty0 = _Util$applyTransform2[1];\n\n        var _Util$applyTransform3 = _util.Util.applyTransform([x1, y1], matrix),\n            _Util$applyTransform4 = _slicedToArray(_Util$applyTransform3, 2),\n            tx1 = _Util$applyTransform4[0],\n            ty1 = _Util$applyTransform4[1];\n\n        var _Util$singularValueDe = _util.Util.singularValueDecompose2dScale(matrix),\n            _Util$singularValueDe2 = _slicedToArray(_Util$singularValueDe, 2),\n            xscale = _Util$singularValueDe2[0],\n            yscale = _Util$singularValueDe2[1];\n\n        var txstep = xstep * xscale;\n        var tystep = ystep * yscale;\n        var tiling = this.svgFactory.createElement(\"svg:pattern\");\n        tiling.setAttributeNS(null, \"id\", tilingId);\n        tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n        tiling.setAttributeNS(null, \"width\", txstep);\n        tiling.setAttributeNS(null, \"height\", tystep);\n        tiling.setAttributeNS(null, \"x\", \"\".concat(tx0));\n        tiling.setAttributeNS(null, \"y\", \"\".concat(ty0));\n        var svg = this.svg;\n        var transformMatrix = this.transformMatrix;\n        var fillColor = this.current.fillColor;\n        var strokeColor = this.current.strokeColor;\n        var bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n        this.svg = bbox;\n        this.transformMatrix = matrix;\n\n        if (paintType === 2) {\n          var cssColor = _util.Util.makeHexColor.apply(_util.Util, _toConsumableArray(color));\n\n          this.current.fillColor = cssColor;\n          this.current.strokeColor = cssColor;\n        }\n\n        this.executeOpTree(this.convertOpList(operatorList));\n        this.svg = svg;\n        this.transformMatrix = transformMatrix;\n        this.current.fillColor = fillColor;\n        this.current.strokeColor = strokeColor;\n        tiling.appendChild(bbox.childNodes[0]);\n        this.defs.appendChild(tiling);\n        return \"url(#\".concat(tilingId, \")\");\n      }\n    }, {\n      key: \"_makeShadingPattern\",\n      value: function _makeShadingPattern(args) {\n        switch (args[0]) {\n          case \"RadialAxial\":\n            var shadingId = \"shading\".concat(shadingCount++);\n            var colorStops = args[3];\n            var gradient;\n\n            switch (args[1]) {\n              case \"axial\":\n                var point0 = args[4];\n                var point1 = args[5];\n                gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"x1\", point0[0]);\n                gradient.setAttributeNS(null, \"y1\", point0[1]);\n                gradient.setAttributeNS(null, \"x2\", point1[0]);\n                gradient.setAttributeNS(null, \"y2\", point1[1]);\n                break;\n\n              case \"radial\":\n                var focalPoint = args[4];\n                var circlePoint = args[5];\n                var focalRadius = args[6];\n                var circleRadius = args[7];\n                gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                gradient.setAttributeNS(null, \"id\", shadingId);\n                gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                gradient.setAttributeNS(null, \"r\", circleRadius);\n                gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                gradient.setAttributeNS(null, \"fr\", focalRadius);\n                break;\n\n              default:\n                throw new Error(\"Unknown RadialAxial type: \".concat(args[1]));\n            }\n\n            var _iterator5 = _createForOfIteratorHelper(colorStops),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var colorStop = _step5.value;\n                var stop = this.svgFactory.createElement(\"svg:stop\");\n                stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                gradient.appendChild(stop);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n\n            this.defs.appendChild(gradient);\n            return \"url(#\".concat(shadingId, \")\");\n\n          case \"Mesh\":\n            (0, _util.warn)(\"Unimplemented pattern Mesh\");\n            return null;\n\n          case \"Dummy\":\n            return \"hotpink\";\n\n          default:\n            throw new Error(\"Unknown IR type: \".concat(args[0]));\n        }\n      }\n    }, {\n      key: \"setDash\",\n      value: function setDash(dashArray, dashPhase) {\n        this.current.dashArray = dashArray;\n        this.current.dashPhase = dashPhase;\n      }\n    }, {\n      key: \"constructPath\",\n      value: function constructPath(ops, args) {\n        var current = this.current;\n        var x = current.x,\n            y = current.y;\n        var d = [];\n        var j = 0;\n\n        var _iterator6 = _createForOfIteratorHelper(ops),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var op = _step6.value;\n\n            switch (op | 0) {\n              case _util.OPS.rectangle:\n                x = args[j++];\n                y = args[j++];\n                var width = args[j++];\n                var height = args[j++];\n                var xw = x + width;\n                var yh = y + height;\n                d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                break;\n\n              case _util.OPS.moveTo:\n                x = args[j++];\n                y = args[j++];\n                d.push(\"M\", pf(x), pf(y));\n                break;\n\n              case _util.OPS.lineTo:\n                x = args[j++];\n                y = args[j++];\n                d.push(\"L\", pf(x), pf(y));\n                break;\n\n              case _util.OPS.curveTo:\n                x = args[j + 4];\n                y = args[j + 5];\n                d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                j += 6;\n                break;\n\n              case _util.OPS.curveTo2:\n                d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                x = args[j + 2];\n                y = args[j + 3];\n                j += 4;\n                break;\n\n              case _util.OPS.curveTo3:\n                x = args[j + 2];\n                y = args[j + 3];\n                d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                j += 4;\n                break;\n\n              case _util.OPS.closePath:\n                d.push(\"Z\");\n                break;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        d = d.join(\" \");\n\n        if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n          d = current.path.getAttributeNS(null, \"d\") + d;\n        } else {\n          current.path = this.svgFactory.createElement(\"svg:path\");\n\n          this._ensureTransformGroup().appendChild(current.path);\n        }\n\n        current.path.setAttributeNS(null, \"d\", d);\n        current.path.setAttributeNS(null, \"fill\", \"none\");\n        current.element = current.path;\n        current.setCurrentPoint(x, y);\n      }\n    }, {\n      key: \"endPath\",\n      value: function endPath() {\n        var current = this.current;\n        current.path = null;\n\n        if (!this.pendingClip) {\n          return;\n        }\n\n        if (!current.element) {\n          this.pendingClip = null;\n          return;\n        }\n\n        var clipId = \"clippath\".concat(clipCount++);\n        var clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n        clipPath.setAttributeNS(null, \"id\", clipId);\n        clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        var clipElement = current.element.cloneNode(true);\n\n        if (this.pendingClip === \"evenodd\") {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n        } else {\n          clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n        }\n\n        this.pendingClip = null;\n        clipPath.appendChild(clipElement);\n        this.defs.appendChild(clipPath);\n\n        if (current.activeClipUrl) {\n          current.clipGroup = null;\n          this.extraStack.forEach(function (prev) {\n            prev.clipGroup = null;\n          });\n          clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n        }\n\n        current.activeClipUrl = \"url(#\".concat(clipId, \")\");\n        this.tgrp = null;\n      }\n    }, {\n      key: \"clip\",\n      value: function clip(type) {\n        this.pendingClip = type;\n      }\n    }, {\n      key: \"closePath\",\n      value: function closePath() {\n        var current = this.current;\n\n        if (current.path) {\n          var d = \"\".concat(current.path.getAttributeNS(null, \"d\"), \"Z\");\n          current.path.setAttributeNS(null, \"d\", d);\n        }\n      }\n    }, {\n      key: \"setLeading\",\n      value: function setLeading(leading) {\n        this.current.leading = -leading;\n      }\n    }, {\n      key: \"setTextRise\",\n      value: function setTextRise(textRise) {\n        this.current.textRise = textRise;\n      }\n    }, {\n      key: \"setTextRenderingMode\",\n      value: function setTextRenderingMode(textRenderingMode) {\n        this.current.textRenderingMode = textRenderingMode;\n      }\n    }, {\n      key: \"setHScale\",\n      value: function setHScale(scale) {\n        this.current.textHScale = scale / 100;\n      }\n    }, {\n      key: \"setRenderingIntent\",\n      value: function setRenderingIntent(intent) {}\n    }, {\n      key: \"setFlatness\",\n      value: function setFlatness(flatness) {}\n    }, {\n      key: \"setGState\",\n      value: function setGState(states) {\n        var _iterator7 = _createForOfIteratorHelper(states),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _step7$value = _slicedToArray(_step7.value, 2),\n                key = _step7$value[0],\n                value = _step7$value[1];\n\n            switch (key) {\n              case \"LW\":\n                this.setLineWidth(value);\n                break;\n\n              case \"LC\":\n                this.setLineCap(value);\n                break;\n\n              case \"LJ\":\n                this.setLineJoin(value);\n                break;\n\n              case \"ML\":\n                this.setMiterLimit(value);\n                break;\n\n              case \"D\":\n                this.setDash(value[0], value[1]);\n                break;\n\n              case \"RI\":\n                this.setRenderingIntent(value);\n                break;\n\n              case \"FL\":\n                this.setFlatness(value);\n                break;\n\n              case \"Font\":\n                this.setFont(value);\n                break;\n\n              case \"CA\":\n                this.setStrokeAlpha(value);\n                break;\n\n              case \"ca\":\n                this.setFillAlpha(value);\n                break;\n\n              default:\n                (0, _util.warn)(\"Unimplemented graphic state operator \".concat(key));\n                break;\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    }, {\n      key: \"fill\",\n      value: function fill() {\n        var current = this.current;\n\n        if (current.element) {\n          current.element.setAttributeNS(null, \"fill\", current.fillColor);\n          current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n          this.endPath();\n        }\n      }\n    }, {\n      key: \"stroke\",\n      value: function stroke() {\n        var current = this.current;\n\n        if (current.element) {\n          this._setStrokeAttributes(current.element);\n\n          current.element.setAttributeNS(null, \"fill\", \"none\");\n          this.endPath();\n        }\n      }\n    }, {\n      key: \"_setStrokeAttributes\",\n      value: function _setStrokeAttributes(element) {\n        var lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var current = this.current;\n        var dashArray = current.dashArray;\n\n        if (lineWidthScale !== 1 && dashArray.length > 0) {\n          dashArray = dashArray.map(function (value) {\n            return lineWidthScale * value;\n          });\n        }\n\n        element.setAttributeNS(null, \"stroke\", current.strokeColor);\n        element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n        element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n        element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n        element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n        element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n        element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n        element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n      }\n    }, {\n      key: \"eoFill\",\n      value: function eoFill() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fill();\n      }\n    }, {\n      key: \"fillStroke\",\n      value: function fillStroke() {\n        this.stroke();\n        this.fill();\n      }\n    }, {\n      key: \"eoFillStroke\",\n      value: function eoFillStroke() {\n        if (this.current.element) {\n          this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n        }\n\n        this.fillStroke();\n      }\n    }, {\n      key: \"closeStroke\",\n      value: function closeStroke() {\n        this.closePath();\n        this.stroke();\n      }\n    }, {\n      key: \"closeFillStroke\",\n      value: function closeFillStroke() {\n        this.closePath();\n        this.fillStroke();\n      }\n    }, {\n      key: \"closeEOFillStroke\",\n      value: function closeEOFillStroke() {\n        this.closePath();\n        this.eoFillStroke();\n      }\n    }, {\n      key: \"paintSolidColorImageMask\",\n      value: function paintSolidColorImageMask() {\n        var rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", \"1px\");\n        rect.setAttributeNS(null, \"height\", \"1px\");\n        rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n        this._ensureTransformGroup().appendChild(rect);\n      }\n    }, {\n      key: \"paintImageXObject\",\n      value: function paintImageXObject(objId) {\n        var imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n        if (!imgData) {\n          (0, _util.warn)(\"Dependent image with object ID \".concat(objId, \" is not ready yet\"));\n          return;\n        }\n\n        this.paintInlineImageXObject(imgData);\n      }\n    }, {\n      key: \"paintInlineImageXObject\",\n      value: function paintInlineImageXObject(imgData, mask) {\n        var width = imgData.width;\n        var height = imgData.height;\n        var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n        var cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", \"0\");\n        cliprect.setAttributeNS(null, \"y\", \"0\");\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        var imgEl = this.svgFactory.createElement(\"svg:image\");\n        imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n        imgEl.setAttributeNS(null, \"x\", \"0\");\n        imgEl.setAttributeNS(null, \"y\", pf(-height));\n        imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n        imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n        imgEl.setAttributeNS(null, \"transform\", \"scale(\".concat(pf(1 / width), \" \").concat(pf(-1 / height), \")\"));\n\n        if (mask) {\n          mask.appendChild(imgEl);\n        } else {\n          this._ensureTransformGroup().appendChild(imgEl);\n        }\n      }\n    }, {\n      key: \"paintImageMaskXObject\",\n      value: function paintImageMaskXObject(imgData) {\n        var current = this.current;\n        var width = imgData.width;\n        var height = imgData.height;\n        var fillColor = current.fillColor;\n        current.maskId = \"mask\".concat(maskCount++);\n        var mask = this.svgFactory.createElement(\"svg:mask\");\n        mask.setAttributeNS(null, \"id\", current.maskId);\n        var rect = this.svgFactory.createElement(\"svg:rect\");\n        rect.setAttributeNS(null, \"x\", \"0\");\n        rect.setAttributeNS(null, \"y\", \"0\");\n        rect.setAttributeNS(null, \"width\", pf(width));\n        rect.setAttributeNS(null, \"height\", pf(height));\n        rect.setAttributeNS(null, \"fill\", fillColor);\n        rect.setAttributeNS(null, \"mask\", \"url(#\".concat(current.maskId, \")\"));\n        this.defs.appendChild(mask);\n\n        this._ensureTransformGroup().appendChild(rect);\n\n        this.paintInlineImageXObject(imgData, mask);\n      }\n    }, {\n      key: \"paintFormXObjectBegin\",\n      value: function paintFormXObjectBegin(matrix, bbox) {\n        if (Array.isArray(matrix) && matrix.length === 6) {\n          this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n        }\n\n        if (bbox) {\n          var width = bbox[2] - bbox[0];\n          var height = bbox[3] - bbox[1];\n          var cliprect = this.svgFactory.createElement(\"svg:rect\");\n          cliprect.setAttributeNS(null, \"x\", bbox[0]);\n          cliprect.setAttributeNS(null, \"y\", bbox[1]);\n          cliprect.setAttributeNS(null, \"width\", pf(width));\n          cliprect.setAttributeNS(null, \"height\", pf(height));\n          this.current.element = cliprect;\n          this.clip(\"nonzero\");\n          this.endPath();\n        }\n      }\n    }, {\n      key: \"paintFormXObjectEnd\",\n      value: function paintFormXObjectEnd() {}\n    }, {\n      key: \"_initialize\",\n      value: function _initialize(viewport) {\n        var svg = this.svgFactory.create(viewport.width, viewport.height);\n        var definitions = this.svgFactory.createElement(\"svg:defs\");\n        svg.appendChild(definitions);\n        this.defs = definitions;\n        var rootGroup = this.svgFactory.createElement(\"svg:g\");\n        rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n        svg.appendChild(rootGroup);\n        this.svg = rootGroup;\n        return svg;\n      }\n    }, {\n      key: \"_ensureClipGroup\",\n      value: function _ensureClipGroup() {\n        if (!this.current.clipGroup) {\n          var clipGroup = this.svgFactory.createElement(\"svg:g\");\n          clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n          this.svg.appendChild(clipGroup);\n          this.current.clipGroup = clipGroup;\n        }\n\n        return this.current.clipGroup;\n      }\n    }, {\n      key: \"_ensureTransformGroup\",\n      value: function _ensureTransformGroup() {\n        if (!this.tgrp) {\n          this.tgrp = this.svgFactory.createElement(\"svg:g\");\n          this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n          if (this.current.activeClipUrl) {\n            this._ensureClipGroup().appendChild(this.tgrp);\n          } else {\n            this.svg.appendChild(this.tgrp);\n          }\n        }\n\n        return this.tgrp;\n      }\n    }]);\n\n    return SVGGraphics;\n  }();\n}\n\n/***/ }),\n/* 153 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFNodeStream = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _network_utils = __w_pdfjs_require__(154);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n;\n\nvar fs = __webpack_require__(/*! fs */ \"?6e49\");\n\nvar http = __webpack_require__(/*! http */ \"?0b3b\");\n\nvar https = __webpack_require__(/*! https */ \"?bfb0\");\n\nvar url = __webpack_require__(/*! url */ \"?a42f\");\n\nvar fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  var parsedUrl = url.parse(sourceUrl);\n\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(\"file:///\".concat(sourceUrl));\n  }\n\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n\n  return parsedUrl;\n}\n\nvar PDFNodeStream = /*#__PURE__*/function () {\n  function PDFNodeStream(source) {\n    _classCallCheck(this, PDFNodeStream);\n\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = this.isHttp && source.httpHeaders || {};\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _createClass(PDFNodeStream, [{\n    key: \"_progressiveDataLength\",\n    get: function get() {\n      var _this$_fullRequestRea, _this$_fullRequestRea2;\n\n      return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;\n    }\n  }, {\n    key: \"getFullReader\",\n    value: function getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n      this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n      return this._fullRequestReader;\n    }\n  }, {\n    key: \"getRangeReader\",\n    value: function getRangeReader(start, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n      this._rangeRequestReaders.push(rangeReader);\n\n      return rangeReader;\n    }\n  }, {\n    key: \"cancelAllRequests\",\n    value: function cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      var readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n  }]);\n\n  return PDFNodeStream;\n}();\n\nexports.PDFNodeStream = PDFNodeStream;\n\nvar BaseFullReader = /*#__PURE__*/function () {\n  function BaseFullReader(stream) {\n    _classCallCheck(this, BaseFullReader);\n\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    var source = stream.source;\n    this._contentLength = source.length;\n    this._loaded = 0;\n    this._filename = null;\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n    this._readableStream = null;\n    this._readCapability = (0, _util.createPromiseCapability)();\n    this._headersCapability = (0, _util.createPromiseCapability)();\n  }\n\n  _createClass(BaseFullReader, [{\n    key: \"headersReady\",\n    get: function get() {\n      return this._headersCapability.promise;\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this._filename;\n    }\n  }, {\n    key: \"contentLength\",\n    get: function get() {\n      return this._contentLength;\n    }\n  }, {\n    key: \"isRangeSupported\",\n    get: function get() {\n      return this._isRangeSupported;\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var chunk, buffer;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._readCapability.promise;\n\n              case 2:\n                if (!this._done) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 4:\n                if (!this._storedError) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw this._storedError;\n\n              case 6:\n                chunk = this._readableStream.read();\n\n                if (!(chunk === null)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this._readCapability = (0, _util.createPromiseCapability)();\n                return _context.abrupt(\"return\", this.read());\n\n              case 10:\n                this._loaded += chunk.length;\n\n                if (this.onProgress) {\n                  this.onProgress({\n                    loaded: this._loaded,\n                    total: this._contentLength\n                  });\n                }\n\n                buffer = new Uint8Array(chunk).buffer;\n                return _context.abrupt(\"return\", {\n                  value: buffer,\n                  done: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n  }, {\n    key: \"_setReadableStream\",\n    value: function _setReadableStream(readableStream) {\n      var _this = this;\n\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", function () {\n        _this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", function () {\n        readableStream.destroy();\n        _this._done = true;\n\n        _this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", function (reason) {\n        _this._error(reason);\n      });\n\n      if (!this._isStreamingSupported && this._isRangeSupported) {\n        this._error(new _util.AbortException(\"streaming is disabled\"));\n      }\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n  }]);\n\n  return BaseFullReader;\n}();\n\nvar BaseRangeReader = /*#__PURE__*/function () {\n  function BaseRangeReader(stream) {\n    _classCallCheck(this, BaseRangeReader);\n\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = (0, _util.createPromiseCapability)();\n    var source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  _createClass(BaseRangeReader, [{\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var chunk, buffer;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._readCapability.promise;\n\n              case 2:\n                if (!this._done) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 4:\n                if (!this._storedError) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw this._storedError;\n\n              case 6:\n                chunk = this._readableStream.read();\n\n                if (!(chunk === null)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                this._readCapability = (0, _util.createPromiseCapability)();\n                return _context2.abrupt(\"return\", this.read());\n\n              case 10:\n                this._loaded += chunk.length;\n\n                if (this.onProgress) {\n                  this.onProgress({\n                    loaded: this._loaded\n                  });\n                }\n\n                buffer = new Uint8Array(chunk).buffer;\n                return _context2.abrupt(\"return\", {\n                  value: buffer,\n                  done: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read() {\n        return _read2.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n\n        return;\n      }\n\n      this._readableStream.destroy(reason);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(reason) {\n      this._storedError = reason;\n\n      this._readCapability.resolve();\n    }\n  }, {\n    key: \"_setReadableStream\",\n    value: function _setReadableStream(readableStream) {\n      var _this2 = this;\n\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", function () {\n        _this2._readCapability.resolve();\n      });\n      readableStream.on(\"end\", function () {\n        readableStream.destroy();\n        _this2._done = true;\n\n        _this2._readCapability.resolve();\n      });\n      readableStream.on(\"error\", function (reason) {\n        _this2._error(reason);\n      });\n\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n  }]);\n\n  return BaseRangeReader;\n}();\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers: headers\n  };\n}\n\nvar PDFNodeStreamFullReader = /*#__PURE__*/function (_BaseFullReader) {\n  _inherits(PDFNodeStreamFullReader, _BaseFullReader);\n\n  var _super = _createSuper(PDFNodeStreamFullReader);\n\n  function PDFNodeStreamFullReader(stream) {\n    var _this3;\n\n    _classCallCheck(this, PDFNodeStreamFullReader);\n\n    _this3 = _super.call(this, stream);\n\n    var handleResponse = function handleResponse(response) {\n      if (response.statusCode === 404) {\n        var error = new _util.MissingPDFException(\"Missing PDF \\\"\".concat(_this3._url, \"\\\".\"));\n        _this3._storedError = error;\n\n        _this3._headersCapability.reject(error);\n\n        return;\n      }\n\n      _this3._headersCapability.resolve();\n\n      _this3._setReadableStream(response);\n\n      var getResponseHeader = function getResponseHeader(name) {\n        return _this3._readableStream.headers[name.toLowerCase()];\n      };\n\n      var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({\n        getResponseHeader: getResponseHeader,\n        isHttp: stream.isHttp,\n        rangeChunkSize: _this3._rangeChunkSize,\n        disableRange: _this3._disableRange\n      }),\n          allowRangeRequests = _validateRangeRequest.allowRangeRequests,\n          suggestedLength = _validateRangeRequest.suggestedLength;\n\n      _this3._isRangeSupported = allowRangeRequests;\n      _this3._contentLength = suggestedLength || _this3._contentLength;\n      _this3._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n    };\n\n    _this3._request = null;\n\n    if (_this3._url.protocol === \"http:\") {\n      _this3._request = http.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);\n    } else {\n      _this3._request = https.request(createRequestOptions(_this3._url, stream.httpHeaders), handleResponse);\n    }\n\n    _this3._request.on(\"error\", function (reason) {\n      _this3._storedError = reason;\n\n      _this3._headersCapability.reject(reason);\n    });\n\n    _this3._request.end();\n\n    return _this3;\n  }\n\n  return PDFNodeStreamFullReader;\n}(BaseFullReader);\n\nvar PDFNodeStreamRangeReader = /*#__PURE__*/function (_BaseRangeReader) {\n  _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);\n\n  var _super2 = _createSuper(PDFNodeStreamRangeReader);\n\n  function PDFNodeStreamRangeReader(stream, start, end) {\n    var _this4;\n\n    _classCallCheck(this, PDFNodeStreamRangeReader);\n\n    _this4 = _super2.call(this, stream);\n    _this4._httpHeaders = {};\n\n    for (var property in stream.httpHeaders) {\n      var value = stream.httpHeaders[property];\n\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n\n      _this4._httpHeaders[property] = value;\n    }\n\n    _this4._httpHeaders.Range = \"bytes=\".concat(start, \"-\").concat(end - 1);\n\n    var handleResponse = function handleResponse(response) {\n      if (response.statusCode === 404) {\n        var error = new _util.MissingPDFException(\"Missing PDF \\\"\".concat(_this4._url, \"\\\".\"));\n        _this4._storedError = error;\n        return;\n      }\n\n      _this4._setReadableStream(response);\n    };\n\n    _this4._request = null;\n\n    if (_this4._url.protocol === \"http:\") {\n      _this4._request = http.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);\n    } else {\n      _this4._request = https.request(createRequestOptions(_this4._url, _this4._httpHeaders), handleResponse);\n    }\n\n    _this4._request.on(\"error\", function (reason) {\n      _this4._storedError = reason;\n    });\n\n    _this4._request.end();\n\n    return _this4;\n  }\n\n  return PDFNodeStreamRangeReader;\n}(BaseRangeReader);\n\nvar PDFNodeStreamFsFullReader = /*#__PURE__*/function (_BaseFullReader2) {\n  _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);\n\n  var _super3 = _createSuper(PDFNodeStreamFsFullReader);\n\n  function PDFNodeStreamFsFullReader(stream) {\n    var _this5;\n\n    _classCallCheck(this, PDFNodeStreamFsFullReader);\n\n    _this5 = _super3.call(this, stream);\n    var path = decodeURIComponent(_this5._url.path);\n\n    if (fileUriRegex.test(_this5._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, function (error, stat) {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new _util.MissingPDFException(\"Missing PDF \\\"\".concat(path, \"\\\".\"));\n        }\n\n        _this5._storedError = error;\n\n        _this5._headersCapability.reject(error);\n\n        return;\n      }\n\n      _this5._contentLength = stat.size;\n\n      _this5._setReadableStream(fs.createReadStream(path));\n\n      _this5._headersCapability.resolve();\n    });\n    return _this5;\n  }\n\n  return PDFNodeStreamFsFullReader;\n}(BaseFullReader);\n\nvar PDFNodeStreamFsRangeReader = /*#__PURE__*/function (_BaseRangeReader2) {\n  _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);\n\n  var _super4 = _createSuper(PDFNodeStreamFsRangeReader);\n\n  function PDFNodeStreamFsRangeReader(stream, start, end) {\n    var _this6;\n\n    _classCallCheck(this, PDFNodeStreamFsRangeReader);\n\n    _this6 = _super4.call(this, stream);\n    var path = decodeURIComponent(_this6._url.path);\n\n    if (fileUriRegex.test(_this6._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    _this6._setReadableStream(fs.createReadStream(path, {\n      start: start,\n      end: end - 1\n    }));\n\n    return _this6;\n  }\n\n  return PDFNodeStreamFsRangeReader;\n}(BaseRangeReader);\n\n/***/ }),\n/* 154 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createResponseStatusError = createResponseStatusError;\nexports.extractFilenameFromHeader = extractFilenameFromHeader;\nexports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\nexports.validateResponseStatus = validateResponseStatus;\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _content_disposition = __w_pdfjs_require__(155);\n\nfunction validateRangeRequestCapabilities(_ref) {\n  var getResponseHeader = _ref.getResponseHeader,\n      isHttp = _ref.isHttp,\n      rangeChunkSize = _ref.rangeChunkSize,\n      disableRange = _ref.disableRange;\n  (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  var returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined\n  };\n  var length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  var contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  var contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n  if (contentDisposition) {\n    var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n\n    if (/\\.pdf$/i.test(filename)) {\n      return filename;\n    }\n  }\n\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n    return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n\n  return new _util.UnexpectedResponseException(\"Unexpected server response (\" + status + ') while retrieving PDF \"' + url + '\".', status);\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\n/***/ }),\n/* 155 */\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  var needsEncodingFixup = true;\n  var tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n  if (tmp) {\n    tmp = tmp[1];\n    var filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  tmp = rfc2231getparam(contentDisposition);\n\n  if (tmp) {\n    var _filename = rfc2047decode(tmp);\n\n    return fixupEncoding(_filename);\n  }\n\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n  if (tmp) {\n    tmp = tmp[1];\n\n    var _filename2 = rfc2616unquote(tmp);\n\n    _filename2 = rfc2047decode(_filename2);\n    return fixupEncoding(_filename2);\n  }\n\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n  }\n\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n\n      try {\n        var decoder = new TextDecoder(encoding, {\n          fatal: true\n        });\n        var bytes = Array.from(value, function (ch) {\n          return ch.charCodeAt(0) & 0xff;\n        });\n        value = decoder.decode(new Uint8Array(bytes));\n        needsEncodingFixup = false;\n      } catch (e) {\n        if (/^utf-?8$/i.test(encoding)) {\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n\n    return value;\n  }\n\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      value = textdecode(\"utf-8\", value);\n\n      if (needsEncodingFixup) {\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n\n    return value;\n  }\n\n  function rfc2231getparam(contentDispositionStr) {\n    var matches = [];\n    var match;\n    var iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      var _match = match,\n          _match2 = _slicedToArray(_match, 4),\n          n = _match2[1],\n          quot = _match2[2],\n          part = _match2[3];\n\n      n = parseInt(n, 10);\n\n      if (n in matches) {\n        if (n === 0) {\n          break;\n        }\n\n        continue;\n      }\n\n      matches[n] = [quot, part];\n    }\n\n    var parts = [];\n\n    for (var _n2 = 0; _n2 < matches.length; ++_n2) {\n      if (!(_n2 in matches)) {\n        break;\n      }\n\n      var _matches$_n = _slicedToArray(matches[_n2], 2),\n          _quot = _matches$_n[0],\n          _part = _matches$_n[1];\n\n      _part = rfc2616unquote(_part);\n\n      if (_quot) {\n        _part = unescape(_part);\n\n        if (_n2 === 0) {\n          _part = rfc5987decode(_part);\n        }\n      }\n\n      parts.push(_part);\n    }\n\n    return parts.join(\"\");\n  }\n\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      var parts = value.slice(1).split('\\\\\"');\n\n      for (var i = 0; i < parts.length; ++i) {\n        var quotindex = parts[i].indexOf('\"');\n\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1;\n        }\n\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n\n      value = parts.join('\"');\n    }\n\n    return value;\n  }\n\n  function rfc5987decode(extvalue) {\n    var encodingend = extvalue.indexOf(\"'\");\n\n    if (encodingend === -1) {\n      return extvalue;\n    }\n\n    var encoding = extvalue.slice(0, encodingend);\n    var langvalue = extvalue.slice(encodingend + 1);\n    var value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n\n  function rfc2047decode(value) {\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n\n    return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n      if (encoding === \"q\" || encoding === \"Q\") {\n        text = text.replace(/_/g, \" \");\n        text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n          return String.fromCharCode(parseInt(hex, 16));\n        });\n        return textdecode(charset, text);\n      }\n\n      try {\n        text = atob(text);\n      } catch (e) {}\n\n      return textdecode(charset, text);\n    });\n  }\n\n  return \"\";\n}\n\n/***/ }),\n/* 156 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFNetworkStream = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _network_utils = __w_pdfjs_require__(154);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n;\nvar OK_RESPONSE = 200;\nvar PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  var data = xhr.response;\n\n  if (typeof data !== \"string\") {\n    return data;\n  }\n\n  var array = (0, _util.stringToBytes)(data);\n  return array.buffer;\n}\n\nvar NetworkManager = /*#__PURE__*/function () {\n  function NetworkManager(url, args) {\n    _classCallCheck(this, NetworkManager);\n\n    this.url = url;\n    args = args || {};\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = this.isHttp && args.httpHeaders || {};\n    this.withCredentials = args.withCredentials || false;\n\n    this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n      return new XMLHttpRequest();\n    };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  _createClass(NetworkManager, [{\n    key: \"requestRange\",\n    value: function requestRange(begin, end, listeners) {\n      var args = {\n        begin: begin,\n        end: end\n      };\n\n      for (var prop in listeners) {\n        args[prop] = listeners[prop];\n      }\n\n      return this.request(args);\n    }\n  }, {\n    key: \"requestFull\",\n    value: function requestFull(listeners) {\n      return this.request(listeners);\n    }\n  }, {\n    key: \"request\",\n    value: function request(args) {\n      var xhr = this.getXhr();\n      var xhrId = this.currXhrId++;\n      var pendingRequest = this.pendingRequests[xhrId] = {\n        xhr: xhr\n      };\n      xhr.open(\"GET\", this.url);\n      xhr.withCredentials = this.withCredentials;\n\n      for (var property in this.httpHeaders) {\n        var value = this.httpHeaders[property];\n\n        if (typeof value === \"undefined\") {\n          continue;\n        }\n\n        xhr.setRequestHeader(property, value);\n      }\n\n      if (this.isHttp && \"begin\" in args && \"end\" in args) {\n        xhr.setRequestHeader(\"Range\", \"bytes=\".concat(args.begin, \"-\").concat(args.end - 1));\n        pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n      } else {\n        pendingRequest.expectedStatus = OK_RESPONSE;\n      }\n\n      xhr.responseType = \"arraybuffer\";\n\n      if (args.onError) {\n        xhr.onerror = function (evt) {\n          args.onError(xhr.status);\n        };\n      }\n\n      xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n      xhr.onprogress = this.onProgress.bind(this, xhrId);\n      pendingRequest.onHeadersReceived = args.onHeadersReceived;\n      pendingRequest.onDone = args.onDone;\n      pendingRequest.onError = args.onError;\n      pendingRequest.onProgress = args.onProgress;\n      xhr.send(null);\n      return xhrId;\n    }\n  }, {\n    key: \"onProgress\",\n    value: function onProgress(xhrId, evt) {\n      var pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      if (pendingRequest.onProgress) {\n        pendingRequest.onProgress(evt);\n      }\n    }\n  }, {\n    key: \"onStateChange\",\n    value: function onStateChange(xhrId, evt) {\n      var pendingRequest = this.pendingRequests[xhrId];\n\n      if (!pendingRequest) {\n        return;\n      }\n\n      var xhr = pendingRequest.xhr;\n\n      if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n        pendingRequest.onHeadersReceived();\n        delete pendingRequest.onHeadersReceived;\n      }\n\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (!(xhrId in this.pendingRequests)) {\n        return;\n      }\n\n      delete this.pendingRequests[xhrId];\n\n      if (xhr.status === 0 && this.isHttp) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      var xhrStatus = xhr.status || OK_RESPONSE;\n      var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n      if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n        if (pendingRequest.onError) {\n          pendingRequest.onError(xhr.status);\n        }\n\n        return;\n      }\n\n      var chunk = getArrayBuffer(xhr);\n\n      if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n        var rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n        var matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n        pendingRequest.onDone({\n          begin: parseInt(matches[1], 10),\n          chunk: chunk\n        });\n      } else if (chunk) {\n        pendingRequest.onDone({\n          begin: 0,\n          chunk: chunk\n        });\n      } else if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n    }\n  }, {\n    key: \"getRequestXhr\",\n    value: function getRequestXhr(xhrId) {\n      return this.pendingRequests[xhrId].xhr;\n    }\n  }, {\n    key: \"isPendingRequest\",\n    value: function isPendingRequest(xhrId) {\n      return xhrId in this.pendingRequests;\n    }\n  }, {\n    key: \"abortRequest\",\n    value: function abortRequest(xhrId) {\n      var xhr = this.pendingRequests[xhrId].xhr;\n      delete this.pendingRequests[xhrId];\n      xhr.abort();\n    }\n  }]);\n\n  return NetworkManager;\n}();\n\nvar PDFNetworkStream = /*#__PURE__*/function () {\n  function PDFNetworkStream(source) {\n    _classCallCheck(this, PDFNetworkStream);\n\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _createClass(PDFNetworkStream, [{\n    key: \"_onRangeRequestReaderClosed\",\n    value: function _onRangeRequestReaderClosed(reader) {\n      var i = this._rangeRequestReaders.indexOf(reader);\n\n      if (i >= 0) {\n        this._rangeRequestReaders.splice(i, 1);\n      }\n    }\n  }, {\n    key: \"getFullReader\",\n    value: function getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n      return this._fullRequestReader;\n    }\n  }, {\n    key: \"getRangeReader\",\n    value: function getRangeReader(begin, end) {\n      var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n      reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n  }, {\n    key: \"cancelAllRequests\",\n    value: function cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      var readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n  }]);\n\n  return PDFNetworkStream;\n}();\n\nexports.PDFNetworkStream = PDFNetworkStream;\n\nvar PDFNetworkStreamFullRequestReader = /*#__PURE__*/function () {\n  function PDFNetworkStreamFullRequestReader(manager, source) {\n    _classCallCheck(this, PDFNetworkStreamFullRequestReader);\n\n    this._manager = manager;\n    var args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this)\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length;\n    this._rangeChunkSize = source.rangeChunkSize;\n\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n    this.onProgress = null;\n  }\n\n  _createClass(PDFNetworkStreamFullRequestReader, [{\n    key: \"_onHeadersReceived\",\n    value: function _onHeadersReceived() {\n      var fullRequestXhrId = this._fullRequestId;\n\n      var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n      var getResponseHeader = function getResponseHeader(name) {\n        return fullRequestXhr.getResponseHeader(name);\n      };\n\n      var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({\n        getResponseHeader: getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange\n      }),\n          allowRangeRequests = _validateRangeRequest.allowRangeRequests,\n          suggestedLength = _validateRangeRequest.suggestedLength;\n\n      if (allowRangeRequests) {\n        this._isRangeSupported = true;\n      }\n\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n      if (this._isRangeSupported) {\n        this._manager.abortRequest(fullRequestXhrId);\n      }\n\n      this._headersReceivedCapability.resolve();\n    }\n  }, {\n    key: \"_onDone\",\n    value: function _onDone(args) {\n      if (args) {\n        if (this._requests.length > 0) {\n          var requestCapability = this._requests.shift();\n\n          requestCapability.resolve({\n            value: args.chunk,\n            done: false\n          });\n        } else {\n          this._cachedChunks.push(args.chunk);\n        }\n      }\n\n      this._done = true;\n\n      if (this._cachedChunks.length > 0) {\n        return;\n      }\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(status) {\n      var url = this._url;\n      var exception = (0, _network_utils.createResponseStatusError)(status, url);\n      this._storedError = exception;\n\n      this._headersReceivedCapability.reject(exception);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.reject(exception);\n      });\n\n      this._requests = [];\n      this._cachedChunks = [];\n    }\n  }, {\n    key: \"_onProgress\",\n    value: function _onProgress(data) {\n      if (this.onProgress) {\n        this.onProgress({\n          loaded: data.loaded,\n          total: data.lengthComputable ? data.total : this._contentLength\n        });\n      }\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this._filename;\n    }\n  }, {\n    key: \"isRangeSupported\",\n    get: function get() {\n      return this._isRangeSupported;\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"contentLength\",\n    get: function get() {\n      return this._contentLength;\n    }\n  }, {\n    key: \"headersReady\",\n    get: function get() {\n      return this._headersReceivedCapability.promise;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var chunk, requestCapability;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._storedError) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw this._storedError;\n\n              case 2:\n                if (!(this._cachedChunks.length > 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                chunk = this._cachedChunks.shift();\n                return _context.abrupt(\"return\", {\n                  value: chunk,\n                  done: false\n                });\n\n              case 5:\n                if (!this._done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 7:\n                requestCapability = (0, _util.createPromiseCapability)();\n\n                this._requests.push(requestCapability);\n\n                return _context.abrupt(\"return\", requestCapability.promise);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._done = true;\n\n      this._headersReceivedCapability.reject(reason);\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._fullRequestId)) {\n        this._manager.abortRequest(this._fullRequestId);\n      }\n\n      this._fullRequestReader = null;\n    }\n  }]);\n\n  return PDFNetworkStreamFullRequestReader;\n}();\n\nvar PDFNetworkStreamRangeRequestReader = /*#__PURE__*/function () {\n  function PDFNetworkStreamRangeRequestReader(manager, begin, end) {\n    _classCallCheck(this, PDFNetworkStreamRangeRequestReader);\n\n    this._manager = manager;\n    var args = {\n      onDone: this._onDone.bind(this),\n      onProgress: this._onProgress.bind(this)\n    };\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _createClass(PDFNetworkStreamRangeRequestReader, [{\n    key: \"_close\",\n    value: function _close() {\n      if (this.onClosed) {\n        this.onClosed(this);\n      }\n    }\n  }, {\n    key: \"_onDone\",\n    value: function _onDone(data) {\n      var chunk = data.chunk;\n\n      if (this._requests.length > 0) {\n        var requestCapability = this._requests.shift();\n\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunk = chunk;\n      }\n\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      this._close();\n    }\n  }, {\n    key: \"_onProgress\",\n    value: function _onProgress(evt) {\n      if (!this.isStreamingSupported && this.onProgress) {\n        this.onProgress({\n          loaded: evt.loaded\n        });\n      }\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var chunk, requestCapability;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this._queuedChunk !== null)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                chunk = this._queuedChunk;\n                this._queuedChunk = null;\n                return _context2.abrupt(\"return\", {\n                  value: chunk,\n                  done: false\n                });\n\n              case 4:\n                if (!this._done) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: undefined,\n                  done: true\n                });\n\n              case 6:\n                requestCapability = (0, _util.createPromiseCapability)();\n\n                this._requests.push(requestCapability);\n\n                return _context2.abrupt(\"return\", requestCapability.promise);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read() {\n        return _read2.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this._done = true;\n\n      this._requests.forEach(function (requestCapability) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      });\n\n      this._requests = [];\n\n      if (this._manager.isPendingRequest(this._requestId)) {\n        this._manager.abortRequest(this._requestId);\n      }\n\n      this._close();\n    }\n  }]);\n\n  return PDFNetworkStreamRangeRequestReader;\n}();\n\n/***/ }),\n/* 157 */\n/***/ (function(__unused_webpack_module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PDFFetchStream = void 0;\n\nvar _regenerator = _interopRequireDefault(__w_pdfjs_require__(2));\n\nvar _util = __w_pdfjs_require__(4);\n\nvar _network_utils = __w_pdfjs_require__(154);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n;\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers: headers,\n    signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\"\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  var headers = new Headers();\n\n  for (var property in httpHeaders) {\n    var value = httpHeaders[property];\n\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n\n    headers.append(property, value);\n  }\n\n  return headers;\n}\n\nvar PDFFetchStream = /*#__PURE__*/function () {\n  function PDFFetchStream(source) {\n    _classCallCheck(this, PDFFetchStream);\n\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = this.isHttp && source.httpHeaders || {};\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _createClass(PDFFetchStream, [{\n    key: \"_progressiveDataLength\",\n    get: function get() {\n      var _this$_fullRequestRea, _this$_fullRequestRea2;\n\n      return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;\n    }\n  }, {\n    key: \"getFullReader\",\n    value: function getFullReader() {\n      (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFFetchStreamReader(this);\n      return this._fullRequestReader;\n    }\n  }, {\n    key: \"getRangeReader\",\n    value: function getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n\n      var reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n      this._rangeRequestReaders.push(reader);\n\n      return reader;\n    }\n  }, {\n    key: \"cancelAllRequests\",\n    value: function cancelAllRequests(reason) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader.cancel(reason);\n      }\n\n      var readers = this._rangeRequestReaders.slice(0);\n\n      readers.forEach(function (reader) {\n        reader.cancel(reason);\n      });\n    }\n  }]);\n\n  return PDFFetchStream;\n}();\n\nexports.PDFFetchStream = PDFFetchStream;\n\nvar PDFFetchStreamReader = /*#__PURE__*/function () {\n  function PDFFetchStreamReader(stream) {\n    var _this = this;\n\n    _classCallCheck(this, PDFFetchStreamReader);\n\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    var source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = (0, _util.createPromiseCapability)();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n    this._headers = createHeaders(this._stream.httpHeaders);\n    var url = source.url;\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {\n      if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n        throw (0, _network_utils.createResponseStatusError)(response.status, url);\n      }\n\n      _this._reader = response.body.getReader();\n\n      _this._headersCapability.resolve();\n\n      var getResponseHeader = function getResponseHeader(name) {\n        return response.headers.get(name);\n      };\n\n      var _validateRangeRequest = (0, _network_utils.validateRangeRequestCapabilities)({\n        getResponseHeader: getResponseHeader,\n        isHttp: _this._stream.isHttp,\n        rangeChunkSize: _this._rangeChunkSize,\n        disableRange: _this._disableRange\n      }),\n          allowRangeRequests = _validateRangeRequest.allowRangeRequests,\n          suggestedLength = _validateRangeRequest.suggestedLength;\n\n      _this._isRangeSupported = allowRangeRequests;\n      _this._contentLength = suggestedLength || _this._contentLength;\n      _this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n      if (!_this._isStreamingSupported && _this._isRangeSupported) {\n        _this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n      }\n    })[\"catch\"](this._headersCapability.reject);\n    this.onProgress = null;\n  }\n\n  _createClass(PDFFetchStreamReader, [{\n    key: \"headersReady\",\n    get: function get() {\n      return this._headersCapability.promise;\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this._filename;\n    }\n  }, {\n    key: \"contentLength\",\n    get: function get() {\n      return this._contentLength;\n    }\n  }, {\n    key: \"isRangeSupported\",\n    get: function get() {\n      return this._isRangeSupported;\n    }\n  }, {\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var _yield$this$_reader$r, value, done, buffer;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._headersCapability.promise;\n\n              case 2:\n                _context.next = 4;\n                return this._reader.read();\n\n              case 4:\n                _yield$this$_reader$r = _context.sent;\n                value = _yield$this$_reader$r.value;\n                done = _yield$this$_reader$r.done;\n\n                if (!done) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  value: value,\n                  done: done\n                });\n\n              case 9:\n                this._loaded += value.byteLength;\n\n                if (this.onProgress) {\n                  this.onProgress({\n                    loaded: this._loaded,\n                    total: this._contentLength\n                  });\n                }\n\n                buffer = new Uint8Array(value).buffer;\n                return _context.abrupt(\"return\", {\n                  value: buffer,\n                  done: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n  }]);\n\n  return PDFFetchStreamReader;\n}();\n\nvar PDFFetchStreamRangeReader = /*#__PURE__*/function () {\n  function PDFFetchStreamRangeReader(stream, begin, end) {\n    var _this2 = this;\n\n    _classCallCheck(this, PDFFetchStreamRangeReader);\n\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    var source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = (0, _util.createPromiseCapability)();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    this._headers.append(\"Range\", \"bytes=\".concat(begin, \"-\").concat(end - 1));\n\n    var url = source.url;\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {\n      if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n        throw (0, _network_utils.createResponseStatusError)(response.status, url);\n      }\n\n      _this2._readCapability.resolve();\n\n      _this2._reader = response.body.getReader();\n    })[\"catch\"](function (reason) {\n      if ((reason === null || reason === void 0 ? void 0 : reason.name) === \"AbortError\") {\n        return;\n      }\n\n      throw reason;\n    });\n    this.onProgress = null;\n  }\n\n  _createClass(PDFFetchStreamRangeReader, [{\n    key: \"isStreamingSupported\",\n    get: function get() {\n      return this._isStreamingSupported;\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read2 = _asyncToGenerator( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        var _yield$this$_reader$r2, value, done, buffer;\n\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._readCapability.promise;\n\n              case 2:\n                _context2.next = 4;\n                return this._reader.read();\n\n              case 4:\n                _yield$this$_reader$r2 = _context2.sent;\n                value = _yield$this$_reader$r2.value;\n                done = _yield$this$_reader$r2.done;\n\n                if (!done) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  value: value,\n                  done: done\n                });\n\n              case 9:\n                this._loaded += value.byteLength;\n\n                if (this.onProgress) {\n                  this.onProgress({\n                    loaded: this._loaded\n                  });\n                }\n\n                buffer = new Uint8Array(value).buffer;\n                return _context2.abrupt(\"return\", {\n                  value: buffer,\n                  done: false\n                });\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function read() {\n        return _read2.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (this._reader) {\n        this._reader.cancel(reason);\n      }\n\n      if (this._abortController) {\n        this._abortController.abort();\n      }\n    }\n  }]);\n\n  return PDFFetchStreamRangeReader;\n}();\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __w_pdfjs_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(__webpack_module_cache__[moduleId]) {\n/******/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t!function() {\n/******/ \t\t__w_pdfjs_require__.nmd = function(module) {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/************************************************************************/\n/******/ \t// module exports must be returned from runtime so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \treturn __w_pdfjs_require__(0);\n/******/ })()\n;\n});\n//# sourceMappingURL=pdf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@adsk/pdfjs-dist/legacy/build/pdf.js\n");

/***/ }),

/***/ "./extensions/PDF/PDFFontExtractor.js":
/*!********************************************!*\
  !*** ./extensions/PDF/PDFFontExtractor.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cssFontExtractor: () => (/* binding */ cssFontExtractor)\n/* harmony export */ });\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! opentype.js */ \"./node_modules/opentype.js/dist/opentype.js\");\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(opentype_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/**\n * In PDF, text encoding was handled differently, all the char code was transcoded\n * When we want to show the text in the browser, we have to transcode it back\n * Then user can see the correct font type and also can do selection/copy\n * If we don't transcode it back, we have to do the unicode for each text,\n * and select/copy will not be possible\n *\n * @param {Number} encoded\n * @param {PDF.FontFaceObject} fontInfo\n */\nfunction locateCharacter(encoded, fontFace) {\n  // Locate the index of the charecter\n  let index = -1;\n  for (var i = 0; i < fontFace.toFontChar.length; i++) {\n    if (fontFace.toFontChar[i] === encoded) {\n      index = i;\n      break;\n    }\n  }\n\n  if (index != -1 && fontFace.toUnicode._map) {\n    let character = fontFace.toUnicode._map[index];\n    let width = fontFace.widths[index];\n    return {\n      character,\n      width\n    };\n  } else {\n\n    // it might be white space or font part\n  }}\n\nfunction cssFontExtractor(page, loadedFonts) {\n  loadedFonts = loadedFonts || {};\n  var commonObjs = page.commonObjs.objs;\n  var fonts = [];\n  for (let key in commonObjs) {\n    var obj = commonObjs[key].data;\n    // check it is a font\n    if (obj.loadedName && obj.fallbackName && obj.data) {\n      if (loadedFonts[obj.loadedName]) {\n        continue;\n      }\n\n      let font = opentype_js__WEBPACK_IMPORTED_MODULE_0__.parse(obj.data.buffer);\n\n      // need to locate the charector and change the glyph\n      // PDF use swapped charactor code mapping, in order to make browser work\n      // we have to change the glyph back to the original ascii/unicode value\n      let glyphs = font.glyphs.glyphs;\n      for (let glyphKey in glyphs) {\n        let glyph = glyphs[glyphKey];\n        if (!glyph.name && !glyph.unicode) {\n          // undefined name will trigger exception in the encoding stage\n          glyph.name = \"\";\n        } else {\n          let charInfo = locateCharacter(glyph.unicode, obj);\n          if (!charInfo || charInfo.character == undefined) {\n            // undefined name will trigger exception in the encoding stage\n            glyph.name = \"\";\n          } else {\n            glyph.name = charInfo.character;\n            glyph.unicode = charInfo.character.charCodeAt(0);\n            glyph.unicodes = [glyph.unicode];\n          }\n        }\n      }\n      fonts.push({\n        fontName: key,\n        data: font\n      });\n      font.names.fontFamily.en = key;\n      font.names.fontSubfamily.en = \"Regular\";\n    }\n  }\n\n  var promises = fonts.map((font) => {\n    return new Promise((resolve, reject) => {\n      var reader = new FileReader();\n      // font.data.toArrayBuffer is slow\n      // Forked the opentype.js and make the encoding part much faster\n      // Consider to do a PR to opentype.js in future\n      var dataView = new DataView(font.data.toArrayBuffer());\n      var blob = new Blob([dataView], { type: 'font/opentype' });\n      reader.readAsDataURL(blob);\n      reader.onloadend = function () {\n        resolve({\n          css: `\n                    @font-face {\n                        font-family: ${font.fontName};\n                        src: url('${reader.result}');\n                    }`,\n          name: font.fontName\n        });\n      };\n    });\n  });\n\n  return Promise.all(promises).then((data) => {\n    return data;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/PDF/PDFFontExtractor.js\n");

/***/ }),

/***/ "./extensions/PDF/PDFLoader.js":
/*!*************************************!*\
  !*** ./extensions/PDF/PDFLoader.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* binding */ PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @adsk/pdfjs-dist */ \"./node_modules/@adsk/pdfjs-dist/legacy/build/pdf.js\");\n/* harmony import */ var _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _font_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font-engine */ \"./extensions/PDF/font-engine.js\");\n\n\n\n\n\n// Delay-init variables that require Autodesk.Extension.CompGeom\nlet LmvCanvasContext = null;\nlet isRef = null;\nlet refKey = null;\nconst MOBILE_DIM_CAP = 2048;\nconst FIREFOX_DIM_CAP = 4096;\nconst DEFAULT_DIM_CAP = 8192;\n\nconst initCompGeom = () => {\n  LmvCanvasContext = Autodesk.Extensions.CompGeom.LmvCanvasContext;\n  isRef = LmvCanvasContext.isRef;\n  refKey = LmvCanvasContext.refKey;\n};\n\n// LMV-5060 When user change model, we don't know the intent why?\n// User might navigate to another page in the same PDF or trying to load a new different model\n// In order to save loading time, we need to use this object try to defer the destroy method of previous PDF worker\n// Then we can try to avoid memory leak in the meantime to make it much faster to navigate between pages\nconst PDFWorkingReferenceMap = {};\nconst DefferedDestroyTime = 3000; // 3 seconds\n\nconst av = Autodesk.Viewing;\nconst avp = av.Private;\n\n/** @constructor */\nfunction PDFLoader(parent) {\n\n  initCompGeom();\n\n  this.isPdfLoader = true; // For QA only\n  this.viewer3DImpl = parent;\n  this.setGlobalManager(this.viewer3DImpl.globalManager);\n  this.loading = false;\n  this.tmpMatrix = new THREE.Matrix4();\n\n  this.logger = avp.logger;\n  this.loadTime = 0;\n  this.notifiesFirstPixel = true;\n\n  // time stamp when the first mesh was received\n  this.t1_firstPixel = undefined;\n\n  this.dtor = this.dtor.bind(this);\n  this.viewer3DImpl.api.addEventListener(av.VIEWER_UNINITIALIZED, this.dtor, { once: true });\n}\n\nav.GlobalManagerMixin.call(PDFLoader.prototype);\n\n/**\n * BubbleNode Structure for PDF data will help to do page navigation\n * @param {PDF} pdf PDF object from pdf.js\n */\nPDFLoader.prototype.createPDFDocument = function (pdf) {\n  var numPages = pdf.numPages;\n  var guid = pdf.fingerprint;\n  var me = this;\n  // Let the generator stay along with document lifecycle, it will give us a chance to maximum the caching\n  // to get the best performance\n  var parent = {\n    guid: guid,\n    type: \"design\",\n    \"hasThumbnail\": \"false\",\n    \"progress\": \"complete\",\n    \"status\": \"success\",\n    \"success\": \"100%\",\n    \"name\": \"PDF\",\n    \"isVectorPDF\": true,\n    \"role\": \"viewable\",\n    totalRasterPixels: 0,\n    getPDF: function () {// this can avoid issue in searilization\n      if (pdf && pdf._transport && !pdf._transport.destroyed) {\n        return pdf;\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var children = [];\n\n  for (var i = 1; i <= numPages; i++) {\n    children.push({\n      guid: guid + \"/\" + i,\n      type: \"geometry\",\n      role: \"2d\",\n      status: \"success\",\n      progress: \"complete\",\n      viewableID: guid + \"/\" + i,\n      name: av.i18n.translate(\"Page %(i)\", { i }),\n      page: i,\n      children: [{\n        role: av.BubbleNode.PDF_PAGE_NODE.role,\n        page: i,\n        type: \"resource\",\n        status: \"success\",\n        progress: \"complete\",\n        urn: me.svfUrn\n      }]\n    });\n  }\n\n  parent.children = children;\n  return new av.Document(parent);\n};\n\n\nPDFLoader.prototype.dtor = function () {\n  if (this.svf && this.svf.propDbLoader) {\n    this.svf.propDbLoader.dtor();\n    this.svf.propDbLoader = null;\n  }\n\n  this.currentLoadPath = null;\n  this.isf2d = undefined;\n  this.viewer3DImpl.api.removeEventListener(av.VIEWER_UNINITIALIZED, this.dtor);\n\n  if (this.pdf) {\n    // Reset the flag synchronized here\n    delete PDFWorkingReferenceMap[this.pdf.fingerprint];\n    setTimeout(() => {\n      // If the PDF is used in DefferedDestroyTime time, the PDF will be still alive\n      // Otherwise the pdf worker is gonna be destroyed, and the document has been load again.\n      if (!PDFWorkingReferenceMap[this.pdf.fingerprint]) {\n        this.pdf.destroy();\n        this.pdf = null;\n      }\n    }, DefferedDestroyTime);\n  }\n\n  if (this._renderTask) {\n    this._renderTask.cancel();\n    this._renderTask = null;\n  }\n\n  this.svf = null;\n  this.options = null;\n  avp.logger.log(\"PDFLoader destroy\");\n};\n\n\nPDFLoader.prototype.loadFile = function (path, options, onSuccess, onWorkerStart) {\n  if (this.loading) {\n    avp.logger.log(\"Loading of PDF already in progress. Ignoring new request.\");\n    return false;\n  }\n  this.loading = true;\n\n  const urnIdx = path.indexOf('urn:');\n  if (urnIdx !== -1) {\n    // Extract urn:adsk.viewing:foo.bar.whateverjunks out of the path URL and bind it to logger.\n    // From now on, we can send logs to viewing service, and logs are grouped by urn to make Splunk work.\n    path = decodeURIComponent(path);\n    const urn = path.substr(urnIdx, path.substr(urnIdx).indexOf('/'));\n    avp.logger.log(\"Extracted URN: \" + urn);\n\n    // Extract urn(just base64 code)\n    const _index = urn.lastIndexOf(':');\n    this.svfUrn = urn.substr(_index + 1);\n\n    //V2 only accepts URL encoded paths\n    const qIdx = path.indexOf(\"?\", urnIdx);\n    if (qIdx !== -1) {\n      path = path.slice(0, urnIdx) + encodeURIComponent(path.slice(urnIdx, qIdx)) + path.slice(qIdx);\n    } else\n    {\n      path = path.slice(0, urnIdx) + encodeURIComponent(path.slice(urnIdx));\n    }\n  } else {\n    this.svfUrn = path;\n  }\n\n  this.sharedDbPath = options.sharedPropertyDbPath;\n  this.currentLoadPath = path;\n  this.acmSessionId = options.acmSessionId;\n\n  //This is done to avoid CORS errors on content served from proxy or browser cache\n  //The cache will respond with a previously received response, but the Access-Control-Allow-Origin\n  //response header might not match the current Origin header (e.g. localhost vs. developer.api.autodesk.com)\n  //which will cause a CORS error on the second request for the same resource.\n  this.queryParams = [\n  this.acmSessionId && `acmsession=${this.acmSessionId}`,\n  av.endpoint.getQueryParams()].\n  filter((p) => p).join('&');\n\n  this.options = options;\n\n  if (this.options.placementTransform) {\n    //NOTE: The scale of the placement transform is not always sufficient to\n    //determine the correct scale for line widths. This is because when a 2D model (in inches) is\n    //loaded into a 3d scene in feet, the transform includes all the scaling needed to get into feet\n    //but the model space line weight for the drawing is relative to the drawing itself, so an extra\n    //factor of 12 would be needed in such case to cancel out the 1/12 needed for inch->foot.\n    //This could probably be automatically derived, but in an error prone way, so I'm leaving it\n    //up to the application layer that does the model aggregation to pass in the right model scale as an option.\n    this.modelScale = this.options.modelScale || this.options.placementTransform.getMaxScaleOnAxis();\n  } else {\n    this.modelScale = this.options.modelScale || 1;\n  }\n\n  var scope = this;\n\n  scope.loadFydoCB(path, options, onSuccess, onWorkerStart);\n\n  return true;\n};\n\nPDFLoader.prototype.getDocument = function () {\n  return this.options.bubbleNode.getRootNode().data;\n};\n\nPDFLoader.prototype.getFontGenerator = function () {\n  return this.viewer3DImpl.api.loadExtension(\"Autodesk.MSDF\").then(() => {\n    const generator = new Autodesk.MSDF.Generator();\n    generator.setGlobalManager(this.globalManager);\n    return generator;\n  });\n};\n\nPDFLoader.prototype.createFontAtlas = function (page, cacheKey) {\n  if (PDFLoader.enableMSDFText) {\n    // Fetching the operation list will trigger the font loading\n    // The loaded font event will be trigger in next tick\n    // So we need use timeout to let the app continue\n    return new Promise((resolve, reject) => {\n      this.getOperatorList(page).then(() => {\n        setTimeout(() => {\n          this.getFontGenerator().then((generator) => {\n            generator.createFontAtlasForPDF(page, cacheKey).then((fontAtlas) => {\n              resolve(fontAtlas);\n            });\n          });\n        }, 0);\n      });\n    });\n  } else {\n    return Promise.resolve();\n  }\n};\n\nPDFLoader.prototype.evaluatePageLineStyles = function (page) {\n  return this.getOperatorList(page).then((data) => {\n    let w = 0;\n    let cacheSet = new Set();\n\n    for (var i = 0; i < data.fnArray.length; i++) {\n      if (data.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.setDash) {\n        w = Math.max(w, data.argsArray[i][0].length);\n        let key = data.argsArray[i].join(\"/\");\n        cacheSet.add(key);\n      }\n    }\n\n    let h = cacheSet.size + 1;\n    this.pageLineStyleParams = {\n      width: w,\n      height: h\n    };\n  });\n};\n\nPDFLoader.prototype.detectSmallImageSequences = function (page) {\n  const MAX_OP_DISTANCE = 12;\n  const MIN_OPS = 5 * MAX_OP_DISTANCE;\n  const MAX_PAGE_UNIT_DISTANCE = 100;\n\n  //console.time(\"detectSmallImageSequences\");\n  return this.getOperatorList(page).then((data) => {\n\n    function isSmallImage(index) {\n      const op = data.fnArray[index];\n      if (op === _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.paintJpegXObject || op === _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.paintImageXObject) {\n        const w = data.argsArray[index][1];\n        const h = data.argsArray[index][2];\n        return w <= 2 || h <= 2;\n      }\n      if (op === _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.paintImageMaskXObject || op === _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.paintInlineImageXObject) {\n        const w = data.argsArray[index][0].width;\n        const h = data.argsArray[index][0].height;\n        return w <= 2 || h <= 2;\n      }\n      return false;\n    }\n\n    function findSequenceStart(index) {\n      // scan backwards for at most MAX_OP_DISTANCE ops and find the first PDFJS.OPS.save\n      // on the way, no PDFJS.OPS.restore or anything text-related must be found\n      // this logic is supposed to detect cases like (index points to \"image\")\n      //   - save transform image restore\n      //   - save transform constructpath clip endpath save transform image restore restore\n      const end = Math.max(-1, index - MAX_OP_DISTANCE);\n      let i = index - 1;\n      let q = -1; // if no PDFJS.OPS.save is found, -1 will signal \"no sequence\"\n      let qCount = 0;\n      for (; i > end; i--) {\n        const op = data.fnArray[i];\n        switch (op) {\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.save:\n            q = i;\n            qCount++;\n            break;\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.showText:\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.showSpacedText:\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.nextLineShowText:\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.nextLineSetSpacingShowText:\n          case _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.restore:\n            i = end;\n            break;\n        }\n      }\n\n      return { q, qCount };\n    }\n\n    function findSequenceEnd(index, qCount) {\n      // scan forwards for at most MAX_OP_DISTANCE ops and find the qCount'th PDFJS.OPS.restore\n      const end = Math.min(data.fnArray.length, index + MAX_OP_DISTANCE);\n      let i = index + 1;\n      let q = index + 1;\n      for (; i < end && qCount > 0; i++) {\n        const op = data.fnArray[i];\n        if (op == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.restore) {\n          q = i;\n          qCount--;\n        }\n      }\n\n      // if not enough PDFJS.OPS.restore are found, mark sequence as broken\n      return qCount > 0 ? -1 : q;\n    }\n\n    function addPointBBox(bbox, x, y) {\n      bbox[0] = Math.min(bbox[0], x);\n      bbox[1] = Math.min(bbox[1], y);\n      bbox[2] = Math.max(bbox[2], x);\n      bbox[3] = Math.max(bbox[3], y);\n    }\n\n    function addImageBBox(bbox, xform) {\n      // images use a fixed [0, 0]x[1, 1] space => transform each corner and add to bbox\n      // xform uses the canvas context convention: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform\n      addPointBBox(bbox, xform[4], xform[5]);\n      addPointBBox(bbox, 1 * xform[2] + xform[4], 1 * xform[3] + xform[5]);\n      addPointBBox(bbox, 1 * xform[0] + xform[4], 1 * xform[1] + xform[5]);\n      addPointBBox(bbox, 1 * xform[0] + 1 * xform[2] + xform[4], 1 * xform[1] + 1 * xform[3] + xform[5]);\n    }\n\n    function process() {\n      let sequenceStart = { q: -1, qCount: 0 };\n      let lastSmallImage = -1;\n      let smallImageSequences = [];\n      let currXform = [1, 0, 0, 1, 0, 0];\n      let xformStack = [];\n      let bbox = [1e10, 1e10, -1e10, -1e10]; // [minx, miny, maxx, maxy]\n\n      const beginSequence = function (i) {\n        sequenceStart = findSequenceStart(i);\n        lastSmallImage = i;\n        bbox = [1e10, 1e10, -1e10, -1e10];\n      };\n\n      const endSequence = function () {\n        const end = findSequenceEnd(lastSmallImage, sequenceStart.qCount);\n        // if the sequence is too short, ignore it (performance gain would be too small)\n        if (end >= 0 && end > sequenceStart.q + MIN_OPS) {\n          // sequence ended correctly\n          smallImageSequences.push({\n            start: sequenceStart.q,\n            end,\n            bbox\n          });\n        }\n      };\n\n      for (let i = 0; i < data.fnArray.length; i++) {\n        const op = data.fnArray[i];\n        if (op == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.save) {\n          xformStack.push(currXform);\n          currXform = currXform.slice(0, 6);\n        } else if (op == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.transform) {\n          const m = currXform;\n          const a = data.argsArray[i];\n          currXform = [m[0] * a[0] + m[2] * a[1],\n          m[1] * a[0] + m[3] * a[1],\n          m[0] * a[2] + m[2] * a[3],\n          m[1] * a[2] + m[3] * a[3],\n          m[0] * a[4] + m[2] * a[5] + m[4],\n          m[1] * a[4] + m[3] * a[5] + m[5]];\n        } else if (op == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.restore) {\n          currXform = xformStack.pop() || [1, 0, 0, 1, 0, 0];\n        } else if (isSmallImage(i)) {\n          // is this a new sequence?\n          if (sequenceStart.q < 0) {\n            beginSequence(i);\n          } else if (i > lastSmallImage + MAX_OP_DISTANCE) {\n            // too many operators between the previous small image and the current -> end sequence and start a new one\n            endSequence();\n            beginSequence(i);\n          } else {\n            // check if the image is too far away from last image (i.e., it should start new sequence)\n            let bboxImg = [1e10, 1e10, -1e10, -1e10];\n            addImageBBox(bboxImg, currXform);\n            // skip the check for the first few images as the sequence needs to establish a reasonable line length first\n            if (i - sequenceStart.q > MIN_OPS && (\n            bboxImg[2] < bbox[0] - MAX_PAGE_UNIT_DISTANCE || bboxImg[0] > bbox[2] + MAX_PAGE_UNIT_DISTANCE ||\n            bboxImg[3] < bbox[1] - MAX_PAGE_UNIT_DISTANCE || bboxImg[1] > bbox[3] + MAX_PAGE_UNIT_DISTANCE)) {\n\n              // end sequence and start a new one\n              endSequence();\n              beginSequence(i);\n            } else {\n              // just add to current sequence\n              lastSmallImage = i;\n            }\n          }\n\n          if (lastSmallImage >= 0) {\n            addImageBBox(bbox, currXform);\n          }\n        }\n      }\n\n      // end last sequence\n      if (lastSmallImage >= 0) {\n        endSequence();\n      }\n\n      return smallImageSequences;\n    }\n\n    this.smallImageSequences = process();\n    //console.timeEnd(\"detectSmallImageSequences\");\n  }).catch(avp.logger.log);\n};\n\nPDFLoader.prototype.fixTilingPatternsWithHugeGaps = function (page) {\n  const MAX_GAP_FACTOR = 10;\n  const BUFFER_FACTOR = 2;\n\n  // addresses BLMV-7214 and VIZX-191\n  return this.getOperatorList(page).then((data) => {\n    for (let i = 0; i < data.fnArray.length; i++) {\n      // search for tiling pattern definitions\n      const op = data.fnArray[i];\n      if (op != _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.setFillColorN) {continue;}\n      let args = data.argsArray[i];\n      if (!args || args.length < 7) {continue;}\n      if (args[0] != \"TilingPattern\") {continue;}\n\n      // look at the pattern parameters\n      const bbox = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n\n      const bboxWidth = bbox[2] - bbox[0];\n      const bboxHeight = bbox[3] - bbox[1];\n\n      // if step is more than MAX_GAP_FACTOR times the size of the bbox, assume that there is no actual tiling intended\n      if (xstep > MAX_GAP_FACTOR * bboxWidth && ystep > MAX_GAP_FACTOR * bboxHeight) {\n        // ideally, we would then use a texture without repeat, but there is no such option in our materials\n        // instead, add a bit of buffer in case some area outside the pattern bbox is visible\n        args[5] = BUFFER_FACTOR * bboxWidth;\n        args[6] = BUFFER_FACTOR * bboxHeight;\n      }\n    }\n  });\n};\n\n/**\n * When we do synchronized loading pdf referenced object, it might return empty if that content was not loaded\n * Asynchronized way is better, but it increases the complexity of loading it\n * This function is prefly for parsing those references\n */\nPDFLoader.prototype.loadMarkedContentPropertiesReferences = function (pdf, page) {\n  var referenceObjMap = {};\n\n  function getRefObj(ref) {\n    return pdf.getObject(ref).then((data) => {\n      referenceObjMap[refKey(data.key)] = data.value;\n      // loop in one more level for dictionary\n      var childPromises = [];\n      if (data.isDictionary) {\n        for (let itemKey in data.value) {\n          if (isRef(data.value[itemKey])) {\n            if (referenceObjMap[refKey(data.value[itemKey])]) {\n              data.value[itemKey] = referenceObjMap[refKey(data.value[itemKey])];\n            } else {\n              childPromises.push(pdf.getObject(data.value[itemKey]).then((data1) => {\n                data.value[itemKey] = data1.value;\n                referenceObjMap[refKey(data1.key)] = data1.value;\n              }).catch(avp.logger.log));\n            }\n          }\n        }\n      }\n\n      return Promise.all(childPromises);\n    }).catch(avp.logger.log); // for any missing reference object, just ignore and continue\n  }\n\n  return this.getOperatorList(page).then((ops) => {\n    var promises = [];\n    for (var i = 0; i < ops.fnArray.length; i++) {\n\n      if (ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContent || ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContentProps) {\n        var args1 = ops.argsArray[i];\n        for (let j = 0; args1 && j < args1.length; j++) {\n          if (isRef(args1[j])) {\n            let promise = getRefObj(args1[j]);\n            promises.push(promise);\n          } else if (typeof args1[j] == \"object\") {\n            for (let key in args1[j]) {\n              if (isRef(args1[j][key])) {\n                let promise = getRefObj(args1[j][key]);\n                promises.push(promise);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return Promise.all(promises)\n    // This is a nice to have feature, in case of anything wrong, ust ignore and continue\n    .catch(avp.logger.log).\n    then(() => {\n      return referenceObjMap;\n    });\n  });\n};\n\nPDFLoader.prototype.loadFydoCB = function (path, options, onSuccess, onWorkerStart) {\n  this.t0 = Date.now();\n\n  var svfPath = avp.pathToURL(path);\n  if (this.queryParams) {\n    svfPath += '?' + this.queryParams;\n  }\n\n  var scope = this;\n\n  if (onWorkerStart)\n  onWorkerStart();\n\n  let cMapUrl = options.cMapUrl;\n  let cMapPacked = options.cMapPacked;\n  if (!cMapUrl) {\n    cMapUrl = avp.getResourceUrl('extensions/PDF/cmaps/');\n    cMapPacked = true;\n  }\n\n  var params = {\n    url: svfPath,\n    disableFontFace: true,\n    stopAtErrors: false,\n    isEvalSupported: false,\n    cMapUrl,\n    cMapPacked\n  };\n\n  if (av.endpoint.getUseCookie()) {\n    params.withCredentials = true;\n  } else {\n    params.httpHeaders = av.endpoint.HTTP_REQUEST_HEADERS;\n  }\n\n  this.viewer3DImpl._signalNoMeshes();\n\n  let fe = _font_engine__WEBPACK_IMPORTED_MODULE_1__.theFontEngine;\n\n  //Start loading fonts.\n  let loadFontsAsync = fe.loadFonts();\n\n  function getInternalLinks(pdf, page) {\n    return page.getAnnotations().then((annotations) => {\n      if (annotations && annotations.length > 0) {\n        return Promise.all(annotations.map((annotation) => {\n          // internal page link\n          if (annotation.subtype == \"Link\" && !annotation.url) {\n            var pageIndexPromise;\n\n            // So far I found 2 ways of annotion destination, it might be more, extend this part if we have new case\n            if (typeof annotation.dest == \"string\") {\n              pageIndexPromise = pdf.getDestination(annotation.dest).then((destInfo) => {\n                return pdf.getPageIndex(destInfo[0]);\n              });\n            } else {\n              if (annotation.dest instanceof Array) {\n                pageIndexPromise = pdf.getPageIndex(annotation.dest[0]);\n              }\n            }\n            if (pageIndexPromise) {\n              return pageIndexPromise.then((pageIndex) => {\n                // need to register the rect to pageIndex\n                // pdf getPage function start from 1, so here need add extra 1\n                annotation.pageIndex = pageIndex + 1;\n                return annotation;\n              });\n            }\n          } else {\n\n            // external link, will add support here, if needed\n          }})).then((internalLinks) => {\n          return internalLinks.filter((item) => item != undefined);\n        }).catch((error) => {\n          // If we have difficulty of parsing annotations, we should let the loading continue\n          return [];\n        });\n      }\n    });\n  }\n\n  function updateLinkBounds(renderContext, viewport, internalLinks) {\n    var dbIdLinks = [];\n    // Use negative dbId since hotArea is added by us\n    var dbId = -2;\n    var transform = renderContext.getCurrentTransform();\n    for (var i = 0; internalLinks && i < internalLinks.length; i++) {\n      const rect = createRectByViewportTransform(renderContext, transform, viewport, internalLinks[i].rect);\n      var linkNode = scope.svf.loadOptions.bubbleNode.getRootNode().children[internalLinks[i].pageIndex - 1];\n      dbIdLinks.push({\n        dbId: dbId--,\n        properties: [{\n          displayValue: linkNode.data.viewableID\n        }],\n        box: [\n        Math.min(rect[0], rect[2]),\n        Math.min(rect[1], rect[3]),\n        Math.max(rect[0], rect[2]),\n        Math.max(rect[1], rect[3])]\n\n      });\n    }\n    scope.dbIdLinks = dbIdLinks;\n  }\n\n  function createRectByViewportTransform(renderContext, transform, viewport, tempRect) {\n    let rect = viewport.convertToViewportRectangle(tempRect);\n    rect = [renderContext.tx(rect[0], rect[1], transform),\n    renderContext.ty(rect[0], rect[1], transform),\n    renderContext.tx(rect[2], rect[3], transform),\n    renderContext.ty(rect[2], rect[3], transform)];\n    return rect;\n  }\n\n  function rotateAround(p, center, angle) {\n    let c = Math.cos(angle);\n    let s = Math.sin(angle);\n\n    let x = p.x - center.x;\n    let y = p.y - center.y;\n\n    p.x = x * c - y * s + center.x;\n    p.y = x * s + y * c + center.y;\n  }\n\n  /**\n   * Format strings output from PDF page\n   * @param {Object} renderCtx - Render context of current page rendering.\n   * @param {Object} pageInfo - dimensions of current page.\n   * @param {Object} viewport - Viewport based on Page properties.\n   * @param {Array} vectorStrings - Array with all strings from Vector PDF.\n   * @param {Object} formattedGlyphs - Object which contains glyphs and their properties.\n   * @returns {Object} - Object with list of strings and their stringBoxes.\n   */\n  function formatVectorPdfStrings(renderCtx, pageInfo, viewport, vectorStrings, formattedGlyphs) {\n    const strings = [];\n    const stringBoxes = [];\n    const stringAngles = [];\n    const stringCharWidths = [];\n    const stringPositions = [];\n    const stringHeights = [];\n    const stringWidths = [];\n    const renderCtxTransform = renderCtx.viewport.transform;\n    const currentTransform = renderCtx.getCurrentTransform();\n\n    // Transform function that combines values from Render Context Transform and Transform of a string\n    const transformFunc = (m1, m2) => {\n      return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n\n    };\n\n    //Strings in PDF.js are grouped, hence 2 loops needed to extract every expression.\n    for (let i = 0; i < vectorStrings.length; i++) {\n      if (vectorStrings[i].items) {\n        const items = vectorStrings[i].items;\n\n        for (let j = 0; j < items.length; j++) {\n          const tempObject = items[j];\n          const tempCharWidth = [];\n          // tempObject contains characters map with corresponding width values for each char\n          // formattedGlyphs stores font families by name and char and widths\n          for (let k = 0; k < tempObject.str.length; k++) {\n            const tempFontName = formattedGlyphs[tempObject.fontName];\n            const tempString = tempObject.str[k];\n            // Fix for BLMV-5151, need to verify that specific character exist, otherwise it can prevent PDF from loading\n            if (!tempFontName[tempString]) {\n              console.warn(`Cannot find ${tempString}'s width in glyph dictionary`);\n              tempCharWidth.push(0);\n            } else {\n              tempCharWidth.push(tempFontName[tempString].width);\n            }\n          }\n          stringCharWidths.push(tempCharWidth);\n          const textWidth = tempObject.width;\n          const textHeight = tempObject.height;\n\n          // Get bounding box's angle of a string by using viewport and strings transform\n          // Rotation of bbox applied on UI side based on angle\n          const strTx = transformFunc(renderCtxTransform, tempObject.transform);\n          const strAngle = Math.atan2(strTx[1], strTx[0]);\n\n          // Creating Bounding box based on transform values from pdf.js object\n          // 4-th place in array is vertical offset of string\n          // 5-th place in array is horizontal offset of string\n          const minX = tempObject.transform[4];\n          const maxX = tempObject.transform[4] + textWidth;\n          const minY = tempObject.transform[5];\n          const maxY = tempObject.transform[5] + textHeight;\n\n          const box = new THREE.Box2().setFromPoints([new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY)]);\n          rotateAround(box.max, box.min, THREE.Math.degToRad(pageInfo.rotate));\n\n          const tempRect = [box.min.x, box.min.y, box.max.x, box.max.y];\n\n          const rect = createRectByViewportTransform(renderCtx, currentTransform, viewport, tempRect);\n\n          strings.push(tempObject.str);\n          stringBoxes.push(rect[0], rect[1], rect[2], rect[3]);\n          stringAngles.push(strAngle);\n          stringPositions.push([rect[0], rect[1]]);\n          stringHeights.push(textHeight);\n          stringWidths.push(textWidth);\n        }\n      }\n    }\n    return { strings, stringBoxes, stringAngles, stringCharWidths, stringPositions, stringHeights, stringWidths };\n  }\n\n  /**\n   * Extracts the viewports from the PDF\n   * @param {PDFPageProxy} page\n   * @param {LmvCanvasContext} renderContext\n   * @returns {Object[]} The extracted viewports\n   */\n  PDFLoader.prototype.buildViewports = function (page, renderContext) {\n    let viewports = [];\n    return this.getOperatorList(page).then((ops) => {\n      for (let i = 0; i < ops.fnArray.length; i++) {\n\n        if (ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContent || ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContentProps) {\n          if (ops.argsArray[i]) {\n            let properties = ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContent ? ops.argsArray[i][0] : ops.argsArray[i][1];\n\n            if (properties) {\n              properties = renderContext._processProperties(properties);\n\n              if (properties.VP) {\n                const vp = renderContext._getModelToViewportMatrix(properties.VP, !!properties.UNITS);\n                viewports.push(renderContext.createViewPortData(vp, properties.UNITS, properties.PRECISION));\n              }\n            }\n          }\n        }\n      }\n      return viewports;\n    });\n  };\n\n  function buildLayers(page) {\n    return scope.getOperatorList(page).then((ops) => {\n      let fnArray = ops.fnArray;\n      let argsArray = ops.argsArray;\n      let layers = {};\n      let layerStartIndex = 1;\n\n      for (var i = 0; fnArray && i < fnArray.length; i++) {\n        let fn = fnArray[i];\n        if (fn === _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.beginMarkedContentProps) {\n          if (argsArray[i] && argsArray[i][0] == \"OC\" && argsArray[i][1] !== null) {\n            const key = LmvCanvasContext.getLayerKey(argsArray[i][1]);\n            if (key !== undefined && layers[key] === undefined) {\n              layers[key] = layerStartIndex++;\n            }\n          }\n        }\n      }\n      return layers;\n    })\n    // It should not have error, but we don't test enough for PDF\n    // In case of potential error happened, we still want to show the contents\n    .catch(avp.logger.log).\n    then((layers) => {\n      return scope.pdf.getPageOCGNames(page.ref).\n      catch(avp.logger.log).\n      then((layerNameMap) => {\n        layerNameMap = layerNameMap || {};\n        var layersRoot = { name: 'root', id: 'root', children: [], isLayer: false };\n        var layersMap = { \"0\": 0 };\n        var layerCount = 1;\n        for (var layerKey in layers) {var _l;\n          var l = layerNameMap[layerKey];\n          var name = typeof l === 'object' && Object.prototype.hasOwnProperty.call(l, 'name') ? l.name : layerKey;\n\n          var layer = {\n            name: name,\n            id: 'group-' + layers[layerKey],\n            isLayer: true,\n            index: layers[layerKey],\n            visible: ((_l = l) === null || _l === void 0 ? void 0 : _l.visible) ?? true,\n            children: []\n          };\n          // for layers, the first drawing layer should be at the bottom of the list\n          layersRoot.children.unshift(layer);\n          layerCount++;\n          layersMap[layers[layerKey]] = layers[layerKey];\n        }\n\n        return {\n          layerCount,\n          layersRoot,\n          layersMap,\n          layers\n        };\n      });\n    });\n  }\n\n  function getStrings(page) {\n    const documentStrings = [];\n    const readableStream = page.streamTextContent({ normalizeWhitespace: true, combineTextItems: true });\n    return new Promise((resolve, reject) => {\n      let pump = () => {\n        reader.read().then((_ref) => {let { value, done } = _ref;\n          if (done) {\n            resolve(documentStrings);\n            return;\n          }\n          documentStrings.push(value);\n          pump();\n        }, reject);\n      };\n      const reader = readableStream.getReader();\n      pump();\n    });\n  }\n\n  function renderPage(pageNumber) {\n    var pdf = scope.pdf;\n    PDFWorkingReferenceMap[pdf.fingerprint] = 1;\n\n    if (pageNumber <= 0 || pageNumber > pdf.numPages) {\n      pageNumber = 1;\n    }\n\n    if (scope.model) {\n      scope.viewer3DImpl.unloadModel(scope.model);\n      scope.model = undefined;\n    }\n    var context = {};\n    let documentStrings = [];\n    return pdf.getPage(pageNumber).then((page) => {\n      return scope.createFontAtlas(page, pdf.fingerprint).then((fontAtlas) => {\n        context.fontAtlas = fontAtlas;\n        return getInternalLinks(pdf, page).then((internalLinks) => {\n          context.internalLinks = internalLinks;\n        });\n      }).then(() => {\n        // Get PDF strings from page\n        // options Feature Flag disables by default PDF.js strings fetch\n        return options.extendStringsFetching ? getStrings(page) : [];\n      }).then((strings) => {\n        documentStrings = strings;\n        return scope.detectCircle(page);\n      }).then(() => {\n        // Load any large font files that need to be used by the current PDF.\n        return scope.loadOnDemandFonts(page, fe);\n      }).then(() => {\n        return scope.loadMarkedContentPropertiesReferences(pdf, page).then((map) => {\n          context.pdfRefObjMap = map;\n        });\n      }).then(() => {\n        return scope.evaluatePageLineStyles(page);\n      }).then(() => {\n        return scope.detectSmallImageSequences(page);\n      }).then(() => {\n        return scope.fixTilingPatternsWithHugeGaps(page);\n      }).then(() => {var _scope$options$bubble, _scope$options$placem, _scope$options$placem2;\n        let internalLinks = context.internalLinks;\n        var view = page.view;\n        view = view.slice(0);\n\n        // LMV-5149: Apply the page rotation to the page_width and page_height\n        var rotationMatrix = new THREE.Matrix4().makeRotationZ(page.rotate / 180 * Math.PI);\n        var rotatedViewVec1 = new THREE.Vector3(view[0], view[1], 0).applyMatrix4(rotationMatrix);\n        var rotatedViewVec2 = new THREE.Vector3(view[2], view[3], 0).applyMatrix4(rotationMatrix);\n\n\n        // Apply the rotation vector to the view\n        // These values are used to calculate the page_width and the page_height\n        view[0] = Math.min(rotatedViewVec1.x, rotatedViewVec2.x);\n        view[1] = Math.min(rotatedViewVec1.y, rotatedViewVec2.y);\n        view[2] = Math.max(rotatedViewVec1.x, rotatedViewVec2.x);\n        view[3] = Math.max(rotatedViewVec1.y, rotatedViewVec2.y);\n\n        // need to put a cap on 1 dimention : 8192 for desktop / 4096 for firefox / 2048 for mobile\n        // LMV-4731: If we set the viewport too large, it will fail to load in Firefox\n        var maxDim = Math.max(view[2] - view[0], view[3] - view[1]);\n        const capDim = av.isMobileDevice() ? MOBILE_DIM_CAP : av.isFirefox() ? FIREFOX_DIM_CAP : DEFAULT_DIM_CAP;\n        const scaleByDim = capDim / maxDim;\n\n        const DPI = 300;\n        //Render the PDF at 300 pixels/inch instead of 72 points/inch.\n        //This seems to match what Adobe Reader does at max zoom.\n        const scaleByDPI = DPI / 72;\n\n        // scale as much as possible without exceeding capDim\n        const pageToCanvasScale = Math.min(scaleByDPI, scaleByDim);\n\n        // Important: the measure tool expects inches\n        // take userUnit into account: PDF specs define userUnit as a factor on the size of a pt, so the conversion to inches is not 1/72, but userUnit/72\n        const userUnit = page.userUnit || 1;\n        const canvasToInchesScale = userUnit / 72 / pageToCanvasScale;\n\n        // Convert to source file unit's if supplied in the bubble.\n        let targetUnits = ((_scope$options$bubble = scope.options.bubbleNode) === null || _scope$options$bubble === void 0 ? void 0 : _scope$options$bubble.getSourceFileUnits()) || avp.ModelUnits.INCH;\n\n        const inchesToTargetUnitsScale = Autodesk.Viewing.Private.convertUnits(avp.ModelUnits.INCH, targetUnits, 1, 1);\n        const canvasToTargetUnitScale = canvasToInchesScale * inchesToTargetUnitsScale;\n\n        //Negative rotation because we skip the y-flip.\n        //TODO: need to check if this is right for all rotations, if not just let it flip y and negate that in the canvas context.\n        // viewport will use canvas units\n        var options = {\n          scale: pageToCanvasScale,\n          rotation: -page.rotate,\n          dontFlip: true\n        };\n        var viewport = page.getViewport(options);\n        viewport.clipToViewport = true;\n\n        scope.renderContext = new LmvCanvasContext(viewport, canvasToTargetUnitScale, scope.processReceivedMesh2D.bind(scope), fe, PDFLoader.useTextLayer, context.fontAtlas, context.pdfRefObjMap);\n\n        // update lineStyles\n        scope.renderContext.setLineStyleParam(scope.pageLineStyleParams);\n        scope.viewer3DImpl.matman().setLineStyleTexture(scope.renderContext.lineStyleTexture);\n        scope.renderContext.setSmallImageSequences(scope.smallImageSequences);\n\n        scope.renderContext.setCircleInfo(scope.circleInfo);\n\n        // Assign consecutive dbIds. The only purpose of these IDs is to split the page down into smaller shapes, so that\n        // we can use the ID buffer to quickly find shapes for snapping.\n        scope.renderContext.consecutiveIds = true;\n\n        const bounds = scope.renderContext.bounds;\n\n        scope.svf = {\n          is2d: true,\n          isPdf: true,\n          viewports: [],\n          layersMap: { \"0\": 0 },\n          layerCount: 1,\n          bbox: new THREE.Box3(new THREE.Vector3(bounds.x, bounds.y, 0), new THREE.Vector3(bounds.z, bounds.w, 0)),\n          metadata: {\n            page_dimensions: {\n              page_width: (view[2] - view[0]) * inchesToTargetUnitsScale * userUnit / 72,\n              page_height: (view[3] - view[1]) * inchesToTargetUnitsScale * userUnit / 72,\n              logical_width: viewport.width * inchesToTargetUnitsScale,\n              logical_height: viewport.height * inchesToTargetUnitsScale,\n              logical_offset_x: viewport.offsetX * inchesToTargetUnitsScale,\n              logical_offset_y: viewport.offsetY * inchesToTargetUnitsScale,\n              page_units: targetUnits,\n              rotation: viewport.rotation\n            },\n            currentPage: pageNumber\n          },\n          placementTransform: (_scope$options$placem = scope.options.placementTransform) === null || _scope$options$placem === void 0 ? void 0 : _scope$options$placem.clone(),\n          placementWithOffset: (_scope$options$placem2 = scope.options.placementTransform) === null || _scope$options$placem2 === void 0 ? void 0 : _scope$options$placem2.clone(),\n          strings: [],\n          stringDbIds: [],\n          getPDF: function () {\n            return scope.pdf;\n          }\n        };\n\n        var t0 = performance.now();\n\n        // layers information is required before we call onSuccess\n        buildLayers(page).then((layersInfo) => {\n          scope.svf.layersRoot = layersInfo.layersRoot;\n          scope.svf.layerCount = layersInfo.layerCount;\n          scope.svf.layersMap = layersInfo.layersMap;\n          scope.renderContext.layers = layersInfo.layers;\n        })\n        // Ignore any potential error and let the rendering continue\n        .catch(avp.logger.log).\n        then(() => scope.buildViewports(page, scope.renderContext)).\n        then((viewports) => {\n          // store viewports\n          scope.svf.viewports = scope.renderContext.viewports = scope.renderContext.viewports.concat(viewports);\n\n          if (scope.currentLoadPath === null) {\n            const errorMsg = \"PDF loader was destroyed\";\n            onSuccess && onSuccess(errorMsg);\n            return Promise.reject(errorMsg);\n          }\n\n          scope.onModelRootLoadDone(scope.svf);\n          if (onSuccess) {\n            onSuccess(null, scope.model);\n          }\n          scope.viewer3DImpl.api.fireEvent({ type: av.MODEL_ROOT_LOADED_EVENT, svf: scope.svf, model: scope.model });\n        }).then(() => {\n          //\n          // Render PDF page into canvas context\n          //\n          loadFontsAsync.then(() => {\n            var renderTask = scope._renderTask = page.render(scope.renderContext, this);\n            renderTask.promise.then(() => {var _documentStrings, _model$getDocumentNod;\n              if (internalLinks && internalLinks.length > 0) {\n                // render hot area in the canvas to enable internal links\n                // Need to render the hotArea after main page was rendered,\n                // because extra dbID will be assigned to hotArea\n                if (PDFLoader.enableHyperlinks) {\n                  updateLinkBounds(scope.renderContext, viewport, internalLinks);\n                  scope.svf.metadata.hyperLinks = scope.dbIdLinks;\n                  scope.viewer3DImpl.api.loadExtension(\"Autodesk.Hyperlink\");\n                }\n              }\n\n              // Format PDF document strings\n              if (((_documentStrings = documentStrings) === null || _documentStrings === void 0 ? void 0 : _documentStrings.length) > 0) {var _page$commonObjs;\n                const pdfObjects = page === null || page === void 0 || (_page$commonObjs = page.commonObjs) === null || _page$commonObjs === void 0 ? void 0 : _page$commonObjs._objs;\n                const formattedGlyphs = {};\n                // pdfObjects contain information regarding fonts and their properties as size, width, style etc.\n                // By iterating this object, we can obtain compact object with relevant characters for further calculations\n                // Final structure of formattedGlyphs object: Family Name-> Character -> character width\n                for (let pdfObject in pdfObjects) {var _pdfObjects$pdfObject;\n                  if ((_pdfObjects$pdfObject = pdfObjects[pdfObject].data) !== null && _pdfObjects$pdfObject !== void 0 && _pdfObjects$pdfObject.glyphCache) {\n                    const glyphCache = pdfObjects[pdfObject].data.glyphCache;\n                    const fontName = pdfObjects[pdfObject].data.loadedName;\n                    const tempGlyphs = {};\n                    for (let char in glyphCache) {\n                      const unicodeChar = glyphCache[char].unicode;\n                      tempGlyphs[unicodeChar] = {\n                        width: glyphCache[char].width\n                      };\n                    }\n                    formattedGlyphs[fontName] = Object.assign({}, tempGlyphs, formattedGlyphs[fontName]);\n                  }\n                }\n\n                const formattedStrings = formatVectorPdfStrings(scope.renderContext, page._pageInfo, viewport, documentStrings, formattedGlyphs);\n                scope.svf.strings = formattedStrings.strings;\n                scope.svf.stringBoxes = formattedStrings.stringBoxes;\n                scope.svf.stringAngles = formattedStrings.stringAngles;\n                scope.svf.stringCharWidths = formattedStrings.stringCharWidths;\n                scope.svf.stringPositions = formattedStrings.stringPositions;\n                scope.svf.stringHeights = formattedStrings.stringHeights;\n                scope.svf.stringWidths = formattedStrings.stringWidths;\n              }\n\n              scope.renderContext.finish();\n              scope.svf.minLineWidth = scope.renderContext.currentVbb.minLineWidth;\n              scope.svf.maxObjectNumber = scope.renderContext.maxDbId;\n              scope.onGeomLoadDone();\n\n              var t1 = performance.now();\n              const pdfLoadTime = t1 - t0;\n              console.log(\"PDF load time\", pdfLoadTime);\n\n              const firstPixelTime = scope.t1_firstPixel - t0;\n              console.log(\"First Pixel Time\", firstPixelTime);\n\n              const model = scope.model;\n              const geomList = model.getGeometryList();\n\n              const dataToTrack = {\n                load_time: scope.loadTime,\n                pdf_load_time: pdfLoadTime,\n                polygons: geomList.geomPolyCount,\n                fragments: model.getFragmentList().getCount(),\n                mem_usage: geomList.gpuMeshMemory,\n                time_to_first_pixel: firstPixelTime,\n                total_raster_pixels: (_model$getDocumentNod = model.getDocumentNode()) === null || _model$getDocumentNod === void 0 || (_model$getDocumentNod = _model$getDocumentNod.data) === null || _model$getDocumentNod === void 0 ? void 0 : _model$getDocumentNod.totalRasterPixels,\n                viewable_type: '2d',\n                url: scope.currentLoadPath,\n                urn: scope.svfUrn\n              };\n              avp.analytics.track('viewer.model.loaded', dataToTrack);\n\n              //These are needed in order to free the PDF loader context (it caches all PDF opcodes\n              //in a giant array). Ideally we will modify the pdf.js library to not accumulate opcodes\n              //that are already processed, so we don't spike memory at load time.\n              renderTask._canvas = null;\n            }).catch((err) => {\n              // Usually happens when the switching to another PDF page while\n              // the current one is still getting rendered.\n              avp.logger.log(err);\n            }).finally(() => {\n              scope._renderTask = null;\n              page.cleanup();\n              scope.cleanup();\n            });\n          });\n        });\n      });\n    }).catch((error) => {\n      return Promise.reject(error);\n    });\n  }\n\n  Promise.resolve().then(\n    () => {\n      if (options.bubbleNode && typeof options.bubbleNode.getRootNode().data.getPDF == \"function\" && options.bubbleNode.getRootNode().data.getPDF()) {\n        scope.pdf = options.bubbleNode.getRootNode().data.getPDF();\n        scope.loading = false;\n        renderPage(options.bubbleNode.data.page);\n      } else {\n        var pdfTask = _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.getDocument(params);\n        pdfTask.onProgress = (_ref2) => {let { loaded, total } = _ref2;\n          const percentLoaded = Math.round(loaded * 100 / total);\n          scope.viewer3DImpl.signalProgress(percentLoaded, av.ProgressState.LOADING);\n        };\n        // keep pdfTask reference for cleanup later\n        scope.pdfTask = pdfTask;\n\n        return pdfTask.promise.then((pdf) => {\n          scope.pdf = pdf;\n          scope.loading = false;\n          var pageNumber = options.page || parseInt(avp.getParameterByName(\"page\")) || 1;\n\n          if (scope.options && !scope.options.bubbleNode) {\n            var pdfMain = scope.createPDFDocument(pdf);\n            scope.options.bubbleNode = pdfMain.getRoot().children[pageNumber - 1];\n          }\n\n          return renderPage(pageNumber);\n        }).catch((error) => {\n          onSuccess && onSuccess(error);\n        });\n      }\n\n    }\n  );\n\n  return true;\n};\n\nPDFLoader.prototype.loadOnDemandFonts = function (page, fe) {\n  const commonObjs = page.commonObjs._objs;\n  const loadedFonts = {};\n  const loadPromises = [];\n  for (let name in commonObjs) {var _font$data;\n    const font = commonObjs[name];\n    if (font !== null && font !== void 0 && (_font$data = font.data) !== null && _font$data !== void 0 && _font$data.missingFile) {var _font$data2;\n      const fontName = font === null || font === void 0 || (_font$data2 = font.data) === null || _font$data2 === void 0 ? void 0 : _font$data2.name;\n      if (fontName) {\n        const fontDescriptor = fe.getOnDemandFont(fontName);\n        if (fontDescriptor && !loadedFonts[fontDescriptor.name]) {\n          loadPromises.push(fe.loadFont(fontDescriptor));\n          loadedFonts[fontDescriptor.name] = true;\n        }\n      }\n    }\n  }\n\n  if (loadPromises.length === 0) {\n    return;\n  }\n\n  return Promise.all(loadPromises);\n};\n\n\n/**\n * Loop all the operator command to detect whether it is a circle.\n */\nPDFLoader.prototype.detectCircle = function (page) {\n  const threshold = 0.001;\n  const magic = 4 / 3 * Math.tan(Math.PI / 8);\n  const magic2 = magic * magic;\n  let p1 = new THREE.Vector2();\n  let p2 = new THREE.Vector2();\n  let p3 = new THREE.Vector2();\n  let p4 = new THREE.Vector2();\n\n  function equal(a, b) {\n    return Math.abs(a - b) <= threshold;\n  }\n\n  function relativelyEqual(a, b) {\n    return a > 0 && b > 0 && equal(Math.abs(a - b) / a, threshold);\n  }\n\n  /**\n   *  if it is a primitive circle\n   *  it will have a 13, 15, 15, 15, 15, [18]\n   *  Reference: https://stackoverflow.com/questions/1734745/how-to-create-circle-with-b%C3%A9zier-curves\n   * @param {*} fnArray\n   * @param {*} argsArray\n   */\n  function checkPattern(fnArray, argsArray) {\n    if ((fnArray.length == 5 || fnArray.length == 6) && argsArray.length == 26) {\n      if (fnArray[0] == 13 && fnArray[1] == 15 && fnArray[2] == 15 && fnArray[3] == 15 && fnArray[4] == 15 && (fnArray[5] == 18 || fnArray[5] == undefined)) {\n        // do the math to figure out whether it is a circle\n        for (let i = 0; i < argsArray.length - 6; i += 6) {\n          p1.set(argsArray[i], argsArray[i + 1]);\n          p2.set(argsArray[i + 2], argsArray[i + 3]);\n          p3.set(argsArray[i + 4], argsArray[i + 5]);\n          p4.set(argsArray[i + 6], argsArray[i + 7]);\n          if (!checkQuaterCircle(p1, p2, p3, p4)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function checkQuaterCircle(p1, p2, p3, p4) {\n    let p12 = p2.clone().sub(p1);\n    let p43 = p3.clone().sub(p4);\n    let l12 = p12.lengthSq();\n    let l43 = p43.lengthSq();\n    let radius = p4.distanceToSquared(p1) / 2;\n\n    let result = l12 > 0 && l43 > 0 && relativelyEqual(l12, l43) &&\n    equal(p12.normalize().dot(p43.normalize()), 0) &&\n    equal(l12 / radius, magic2) &&\n    equal(l43 / radius, magic2);\n\n    return result;\n  }\n\n  return this.getOperatorList(page).then((ops) => {\n    let circleInfo = {};\n    for (let i = 0; i < ops.fnArray.length; i++) {\n      if (ops.fnArray[i] == _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_0__.OPS.constructPath) {\n        // need try to detect whether there is circle in this command\n        let fn1 = ops.argsArray[i][0];\n        let args1 = ops.argsArray[i][1];\n\n        if (checkPattern(fn1, args1)) {\n          p1.set(args1[0], args1[1]);\n          p2.set(args1[6], args1[7]);\n          p3.set(args1[12], args1[13]);\n          p4.set(args1[18], args1[19]);\n\n          let p12 = p2.clone().sub(p1);\n          let p23 = p3.clone().sub(p2);\n\n          let l12 = p12.lengthSq();\n          let l23 = p23.lengthSq();\n          let l34 = p3.distanceToSquared(p4);\n          let l41 = p4.distanceToSquared(p1);\n\n          // check the 4 points is a square\n          if (relativelyEqual(l12, l23) && relativelyEqual(l34, l41) && relativelyEqual(l12, l41) && equal(p12.normalize().dot(p23.normalize()), 0)) {\n            let x = 0,y = 0;\n            for (var k = 0; k < args1.length - 6; k += 6) {\n              x += args1[k];\n              y += args1[k + 1];\n            }\n\n            circleInfo[i] = [x / 4, y / 4];\n          }\n        }\n      }\n    }\n\n    this.circleInfo = circleInfo;\n  });\n};\n\n\nPDFLoader.prototype.processReceivedMesh = function (mdata) {\n\n  //Find all fragments that instance this mesh\n  var meshid = mdata.packId + \":\" + mdata.meshIndex;\n\n  var svf = this.svf;\n  var fragments = svf.fragments;\n\n  var fragIndexes = fragments.mesh2frag[meshid];\n  if (fragIndexes === undefined) {\n    avp.logger.warn(\"Mesh \" + meshid + \" was not referenced by any fragments.\");\n    return;\n  }\n  if (!Array.isArray(fragIndexes))\n  fragIndexes = [fragIndexes];\n\n  var rm = this.model;\n\n  // Background dbid is -1. Hide it when hideBackground is set.\n  // This line has to be before calling meshToGeometry, because mdata.mesh is set to null inside of it.\n  if (mdata.mesh.dbIds[-1] && this.options.hideBackground) {\n    rm.changePaperVisibility(false);\n  }\n\n  //Convert the received mesh to THREE buffer geometry\n  const geometry = avp.BufferGeometryUtils.meshToGeometry(mdata);\n\n\n  // Add geometry to ensure PDF data is taken into account for gpu memory limits\n  const geomId = rm.getGeometryList().addGeometry(geometry, fragIndexes.length, mdata.meshIndex + 1);\n\n  const polyCount = avp.getPolygonCount(geometry);\n\n  //For each fragment, add a mesh instance to the renderer\n  for (var i = 0; i < fragIndexes.length; i++) {\n    var fragId = 0 | fragIndexes[i];\n\n    //We get the matrix from the fragments and we set it back there\n    //with the activateFragment call, but this is to maintain the\n    //ability to add a plain THREE.Mesh -- otherwise it could be simpler\n    rm.getFragmentList().getOriginalWorldMatrix(fragId, this.tmpMatrix);\n\n    if (this.options.placementTransform) {\n      this.tmpMatrix = new THREE.Matrix4().multiplyMatrices(this.options.placementTransform, this.tmpMatrix);\n    }\n\n    var materialId = fragments.materials[fragId].toString();\n\n    if (fragments.polygonCounts)\n    fragments.polygonCounts[fragId] = polyCount;\n\n    var m = this.viewer3DImpl.setupMesh(this.model, geometry, materialId, this.tmpMatrix);\n    rm.activateFragment(fragId, m);\n  }\n\n  //don't need this mapping anymore.\n  fragments.mesh2frag[meshid] = null;\n\n  //Repaint and progress reporting\n  fragments.numLoaded += fragIndexes.length;\n\n  this.viewer3DImpl.signalNewGeometryAdded(geomId, this.model);\n\n  if (!this.t1_firstPixel) {\n    this.t1_firstPixel = performance.now();\n  }\n\n  //repaint every once in a while -- more initially, less as the load drags on.\n  if (fragments.numLoaded > fragments.nextRepaint) {\n    //avp.logger.log(\"num loaded \" + fragments.numLoaded);\n    svf.numRepaints++;\n    fragments.nextRepaint += 6 * Math.pow(1.75, svf.numRepaints);\n    this.viewer3DImpl.api.dispatchEvent({ type: av.LOADER_REPAINT_REQUEST_EVENT, loader: this, model: this.model });\n  }\n};\n\nPDFLoader.prototype.processReceivedMesh2D = function (mesh, mindex) {\n\n  var mdata = { mesh: mesh, is2d: true, packId: \"0\", meshIndex: mindex };\n\n  var meshId = \"0:\" + mindex;\n\n  var frags = this.svf.fragments;\n\n  //Remember the list of all dbIds referenced by this mesh.\n  //In the 2D case this is 1->many (1 frag = many dbIds) mapping instead of\n  // 1 dbId -> many fragments like in the SVF 3D case.\n  var dbIds = Object.keys(mdata.mesh.dbIds).map(function (item) {return parseInt(item);});\n  frags.fragId2dbId[mindex] = dbIds;\n\n  //TODO: dbId2fragId is not really necessary if we have a good instance tree for the 2D drawing (e.g. Revit, AutoCAD)\n  //so we can get rid of this mapping if we can convert Viewer3DImpl.highlightFragment to use the same logic for 2D as for 3D.\n  for (var j = 0; j < dbIds.length; j++) {\n    var dbId = dbIds[j];\n    var fragIds = frags.dbId2fragId[dbId];\n    if (Array.isArray(fragIds))\n    fragIds.push(mindex);else\n    if (typeof fragIds !== \"undefined\") {\n      frags.dbId2fragId[dbId] = [fragIds, mindex];\n    } else\n    {\n      frags.dbId2fragId[dbId] = mindex;\n    }\n  }\n\n  const modelFrags = this.model.getFragmentList();\n\n  frags.mesh2frag[meshId] = mindex;\n  mesh.material.modelScale = this.modelScale;\n  mesh.material.doNotCut = this.options.doNotCut || (modelFrags === null || modelFrags === void 0 ? void 0 : modelFrags.getDoNotCut());\n  if (modelFrags !== null && modelFrags !== void 0 && modelFrags.viewBounds) {\n    const bounds = modelFrags.viewBounds;\n    mesh.material.viewportBounds = new THREE.Vector4(bounds.min.x, bounds.min.y, bounds.max.x, bounds.max.y);\n  }\n\n  frags.materials[mindex] = this.viewer3DImpl.matman().create2DMaterial(this.model, mesh.material);\n\n  frags.length++;\n\n  this.processReceivedMesh(mdata);\n\n};\n\nPDFLoader.prototype.onModelRootLoadDone = function (svf) {\n\n  //In the 2d case we create and build up the fragments mapping\n  //on the receiving end.\n  svf.fragments = {};\n  svf.fragments.mesh2frag = {};\n  svf.fragments.materials = [];\n  svf.fragments.fragId2dbId = [];\n  svf.fragments.dbId2fragId = [];\n  svf.fragments.length = 0;\n  svf.fragments.initialized = true;\n\n\n  svf.geomPolyCount = 0;\n  svf.instancePolyCount = 0;\n  svf.fragments.numLoaded = 0;\n  svf.fragments.nextRepaint = 5;\n  svf.meshCount = 0;\n\n  svf.nextRepaintPolys = 10000;\n  svf.numRepaints = 0;\n\n  svf.urn = this.svfUrn;\n  svf.acmSessionId = this.acmSessionId;\n\n  svf.basePath = \"\";\n  var lastSlash = this.currentLoadPath.lastIndexOf(\"/\");\n  if (lastSlash !== -1)\n  svf.basePath = this.currentLoadPath.substr(0, lastSlash + 1);\n\n  svf.loadOptions = this.options;\n\n  var t1 = Date.now();\n  avp.logger.log(\"PDF root load: \" + (t1 - this.t0));\n\n  this.t1 = t1;\n\n  //The BBox object loses knowledge of its\n  //type when going across the worker thread boundary...\n  svf.bbox = new THREE.Box3().copy(svf.bbox);\n  svf.modelSpaceBBox = svf.bbox.clone();\n\n  if (svf.placementTransform) {\n    svf.bbox.applyMatrix4(svf.placementTransform);\n  }\n\n  //Create the API Model object and its render proxy\n  var model = this.model = new av.Model(svf);\n  model.loader = this;\n\n  model.initialize();\n\n  // Update viewport bounds according to model clipped bounds. (See LmvCanvasContext)\n  model.setViewportBounds(this.viewer3DImpl.matman(), svf.modelSpaceBBox);\n\n  if (!this.options.skipPropertyDb) {\n    this.svf.propDbLoader = new avp.PropDbLoader(this.sharedDbPath, this.model, this.viewer3DImpl.api);\n  }\n\n  avp.logger.log(\"scene bounds: \" + JSON.stringify(svf.bbox));\n\n  var metadataStats = {\n    category: \"metadata_load_stats\",\n    urn: svf.urn,\n    layers: svf.layerCount\n  };\n  avp.logger.track(metadataStats);\n\n  this.viewer3DImpl.setDoNotCut(model, !!this.options.doNotCut);\n\n  this.viewer3DImpl.signalProgress(5, av.ProgressState.ROOT_LOADED, model);\n};\n\n\nPDFLoader.prototype.onGeomLoadDone = function () {\n  this.svf.loadDone = true;\n\n  // Don't need these anymore\n  this.svf.fragments.entityIndexes = null;\n  this.svf.fragments.mesh2frag = null;\n\n  var t2 = Date.now();\n  var msg = \"Fragments load time: \" + (t2 - this.t1);\n  this.loadTime = t2 - this.t0;\n\n  if (!this.options.skipPropertyDb) {\n    this.loadPropertyDb();\n  }\n\n  avp.logger.log(msg);\n\n  var modelStats = {\n    category: \"model_load_stats\",\n    is_f2d: true,\n    has_prism: this.viewer3DImpl.matman().hasPrism,\n    load_time: this.loadTime,\n    geometry_size: this.model.getGeometryList().geomMemory,\n    meshes_count: this.model.getGeometryList().getCount(),\n    urn: this.svfUrn\n  };\n  avp.logger.track(modelStats, true);\n\n  this.viewer3DImpl.onLoadComplete(this.model);\n};\n\nPDFLoader.prototype.loadPropertyDb = function () {\n\n  if (this.svf.propDbLoader) {\n    this.svf.propDbLoader.load();\n  }\n};\n\nPDFLoader.prototype.is3d = function () {\n  return false;\n};\n\nPDFLoader.prototype.cleanup = function () {\n  if (this.renderContext) {\n    this.renderContext.destroy();\n    this.renderContext = null;\n  }\n\n  if (this.pdf) {\n    this.pdf.cleanup();\n  }\n};\n\nPDFLoader.prototype.getOperatorList = function (page) {\n  // Use the same 'display' intent for everything, in order to save memory.\n  return page.getOperatorList('display');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/PDF/PDFLoader.js\n");

/***/ }),

/***/ "./extensions/PDF/PDFTextLayer.js":
/*!****************************************!*\
  !*** ./extensions/PDF/PDFTextLayer.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFTextLayer: () => (/* binding */ PDFTextLayer)\n/* harmony export */ });\n/* harmony import */ var _textlayer_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textlayer.css */ \"./extensions/PDF/textlayer.css\");\n/* harmony import */ var _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @adsk/pdfjs-dist */ \"./node_modules/@adsk/pdfjs-dist/legacy/build/pdf.js\");\n/* harmony import */ var _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _PDFFontExtractor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PDFFontExtractor */ \"./extensions/PDF/PDFFontExtractor.js\");\n/**\n * PDF Text Layer is hiden on top of our drawings\n * And it will provide the possible user experience to select/hightlight/copy/search\n * From Vector PDF Document\n */\n\n\n\n\n\nvar av = Autodesk.Viewing;\nvar avu = Autodesk.Viewing.UI;\n\nfunction PDFTextLayer(viewer, usingTextLayer) {\n  this.viewer = viewer;\n  this.setGlobalManager(viewer.globalManager);\n\n  this.onModelLoaded = this.onModelLoaded.bind(this);\n  this.onRenderFinished = this.onRenderFinished.bind(this);\n  this.onModelUnload = this.onModelUnload.bind(this);\n\n  viewer.addEventListener(av.GEOMETRY_LOADED_EVENT, this.onModelLoaded);\n  viewer.addEventListener(av.PROGRESS_UPDATE_EVENT, this.onRenderFinished);\n  viewer.addEventListener(av.MODEL_UNLOADED_EVENT, this.onModelUnload);\n\n  this.usingTextLayer = usingTextLayer;\n  this.textSelectionEnabled = false;\n}\n\nav.GlobalManagerMixin.call(PDFTextLayer.prototype);\n\nPDFTextLayer.prototype.addToolbarButton = function () {\n  if (this.toolButtonAdded) return;\n  this.toolButtonAdded = true;\n\n  if (!this.viewer.getToolbar) return;\n  var toolbar = this.viewer.getToolbar();\n  if (!toolbar) return;\n  var modelTools = toolbar.getControl(Autodesk.Viewing.TOOLBAR.MODELTOOLSID);\n  if (!modelTools) return;\n\n  var button = new avu.Button('toolbar-pdf-text-selection');\n  // Need CSS for the ICON and the actual icon\n  button.setIcon(\"adsk-icon-pdf-textselection\");\n  button.setToolTip(\"Select Text\");\n  modelTools.addControl(button);\n  this.toolbarButton = button;\n\n\n  button.onClick = () => {\n    this.textSelectionEnabled = !this.textSelectionEnabled;\n    if (this.textLayerDiv) {\n      if (this.textSelectionEnabled) {\n        this.textLayerDiv.classList.add(\"enabled\");\n        this.viewer.toolController.enableMouseButtons(false);\n      } else {\n        this.textLayerDiv.classList.remove(\"enabled\");\n        this.viewer.toolController.enableMouseButtons(true);\n        this.clearSelection();\n      }\n      this.toolbarButton.setState(this.textSelectionEnabled ? avu.Button.State.ACTIVE : avu.Button.State.INACTIVE);\n    }\n  };\n};\n\nPDFTextLayer.prototype.clearSelection = function () {\n  const _document = this.getDocument();\n  const _window = this.getWindow();\n  if (_window.getSelection) {\n    if (_window.getSelection().empty) {// Chrome\n      _window.getSelection().empty();\n    } else if (_window.getSelection().removeAllRanges) {// Firefox\n      _window.getSelection().removeAllRanges();\n    }\n  } else if (_document.selection) {// IE?\n    _document.selection.empty();\n  }\n};\n\nPDFTextLayer.prototype.destroy = function () {\n  this.onModelUnload();\n\n  this.viewer.removeEventListener(av.GEOMETRY_LOADED_EVENT, this.onModelLoaded);\n  this.viewer.removeEventListener(av.PROGRESS_UPDATE_EVENT, this.onRenderFinished);\n  this.viewer.removeEventListener(av.MODEL_UNLOADED_EVENT, this.onModelUnload);\n\n  this.removeToolbarButton();\n};\n\nPDFTextLayer.prototype.removeToolbarButton = function () {\n  if (this.toolbarButton) {\n    this.toolbarButton.removeFromParent();\n    this.toolbarButton = null;\n  }\n};\n\nPDFTextLayer.prototype.onRenderFinished = function (event) {\n  if (event.percent == 100 && event.state === av.ProgressState.RENDERING && this.centerTextlayer) {\n    this.centerTextlayer();\n  }\n};\n\nPDFTextLayer.prototype.onModelUnload = function () {\n  this.centerTextlayer = null;\n  if (this.textLayerDiv) {\n    this.textLayerDiv.remove();\n    this.textLayerDiv = null;\n  }\n};\n\nPDFTextLayer.prototype.onModelLoaded = function (event) {\n  if (this.viewer.model && this.viewer.model.isPdf() && typeof this.viewer.model.getData().getPDF === \"function\") {\n    const pageNumber = this.viewer.model.getData().metadata.currentPage;\n    const pdf = this.viewer.model.getData().getPDF();\n    const model = this.viewer.model;\n    pdf.getPage(pageNumber).then((page) => {\n\n      // Note that the model might be unloaded or replaced by a (maybe non-pdf) one meanwhile.\n      if (this.viewer.model !== model) {\n        return;\n      }\n\n      this.renderTextLayer(page);\n    });\n  }\n};\n\nPDFTextLayer.prototype.renderTextLayer = function renderTextlayer(page) {\n  const _document = this.getDocument();\n  const readableStream = page.streamTextContent({ normalizeWhitespace: true, combineTextItems: true });\n  const textLayerDiv = _document.createElement('div');\n  var options = {\n    scale: 1,\n    rotation: page.rotate,\n    dontFlip: false\n  };\n  const viewport = page.getViewport(options);\n  textLayerDiv.style.height = `${viewport.height}px`;\n  textLayerDiv.style.width = `${viewport.width}px`;\n  textLayerDiv.classList.add(\"pdf-textlayer\");\n\n  var scope = this;\n\n  this.viewer.canvasWrap.append(textLayerDiv);\n  this.textLayerDiv = textLayerDiv;\n\n  // loop the style to check whether this text was loaded\n  function getLoadedFonts() {\n    const _document = scope.getDocument();\n    let nodes = _document.getElementsByTagName(\"style\");\n    let names = {};\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].getAttribute(\"datatype\") === \"fonts\") {\n        names[nodes[i].getAttribute(\"id\")] = 1;\n      }\n    }\n    return names;\n  }\n\n  // need to make the html overlay the same position as canvas\n  function mapModelBoundsToScreen() {\n    let bounds = scope.viewer.model.getBoundingBox();\n    let min = scope.viewer.worldToClient(bounds.min);\n    let max = scope.viewer.worldToClient(bounds.max);\n\n    return {\n      min: {\n        x: Math.min(min.x, max.x),\n        y: Math.min(min.y, max.y),\n        z: Math.min(min.z, max.z)\n      },\n      max: {\n        x: Math.max(min.x, max.x),\n        y: Math.max(min.y, max.y),\n        z: Math.max(min.z, max.z)\n      }\n    };\n  }\n\n  function centerTextlayer() {\n\n    // PDF model might have been removed meanwhile\n    if (!scope.viewer.model) {\n      return;\n    }\n\n    // get transform matrix for the textLayer\n    // scale\n    let screenBounds = mapModelBoundsToScreen();\n    let width = screenBounds.max.x - screenBounds.min.x;\n    let height = screenBounds.max.y - screenBounds.min.y;\n    let scale1 = Math.min(width / viewport.width, height / viewport.height);\n\n    let matrix = new THREE.Matrix4().makeTranslation(viewport.width / 2, viewport.height / 2, 0);\n    matrix = new THREE.Matrix4().makeScale(scale1, scale1, 1).multiply(matrix);\n    matrix = new THREE.Matrix4().makeTranslation(-viewport.width / 2, -viewport.height / 2, 0).multiply(matrix);\n    let left = screenBounds.min.x;\n    let top = screenBounds.min.y;\n\n    matrix = new THREE.Matrix4().makeTranslation(left, top, 0).multiply(matrix);\n    let el = matrix.elements;\n    let transform1 = `matrix(${[el[0], el[1], el[4], el[5], el[12], el[13]].join(\",\")})`;\n    textLayerDiv.style.transform = transform1;\n  }\n\n  function render() {\n    let textDivs = [];\n    return _adsk_pdfjs_dist__WEBPACK_IMPORTED_MODULE_1__.renderTextLayer({\n      pageIndex: page.pageNumber,\n      textDivs: textDivs,\n      viewport,\n      enhanceTextSelection: true,\n      textContentStream: readableStream,\n      container: textLayerDiv\n    }).promise.then(() => {\n      if (scope.usingTextLayer) {\n        textLayerDiv.classList.add(\"visible\");\n      }\n      if (textDivs.length > 0) {\n        scope.addToolbarButton();\n      }\n      centerTextlayer();\n    });\n  }\n\n  var promise = Promise.resolve();\n  if (this.usingTextLayer) {\n    // for now only extract the font library when we show the text layer\n    // because it will increase the loading time, will not use it for selection\n    // But, if we decide to use it for selection, the selection/highlight will be more accurate\n    promise = (0,_PDFFontExtractor__WEBPACK_IMPORTED_MODULE_2__.cssFontExtractor)(page, getLoadedFonts()).then((data) => {\n      var fonts = [];\n      const _document = this.getDocument();\n      for (var i = 0; i < data.length; i++) {\n        let fontStyle = _document.createElement(\"style\");\n        _document.getElementsByTagName(\"head\")[0].append(fontStyle);\n        fontStyle.innerHTML = data[i].css;\n        fontStyle.setAttribute(\"id\", data[i].name);\n        fontStyle.setAttribute(\"datatype\", \"fonts\");\n        fonts.push(data[i].name);\n      }\n\n      return fonts;\n    }).then((names) => {\n      // preload the fonts\n      const _document = this.getDocument();\n      var promises = names.map((name) => {\n        return _document.fonts.load(`10pt ${name}`);\n      });\n      return Promise.all(promises);\n    }).catch();\n  }\n\n  promise.then(render);\n\n  this.centerTextlayer = centerTextlayer;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/PDF/PDFTextLayer.js\n");

/***/ }),

/***/ "./extensions/PDF/font-engine.js":
/*!***************************************!*\
  !*** ./extensions/PDF/font-engine.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   theFontEngine: () => (/* binding */ theFontEngine)\n/* harmony export */ });\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! opentype.js */ \"./node_modules/opentype.js/dist/opentype.js\");\n/* harmony import */ var opentype_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(opentype_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _res_fonts_font_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../res/fonts/font-list */ \"./res/fonts/font-list.js\");\n\n\n\n\nconst getResourceUrl = Autodesk.Viewing.Private.getResourceUrl;\n\n\n\nlet FONTS_LOADER;\nconst avp = Autodesk.Viewing.Private;\n\nclass FontEngine {\n\n  constructor() {\n    this.fontCache = {};\n  }\n\n  loadFont(f) {\n    return new Promise((resolve) => {\n      opentype_js__WEBPACK_IMPORTED_MODULE_0__.load(getResourceUrl(f.url), (err, font) => {\n        if (!font) {\n          const warning = `Failed to load font ${f.name}`;\n          avp.logger.warn(warning);\n\n          // As we output a warning and not throw an error, we still want to resolve.\n          resolve(warning);\n          return;\n        }\n\n        font.pathCache = {};\n\n        this.fontCache[f.name] = font;\n\n        f.subs.forEach((s) => {\n          this.fontCache[s] = font;\n        });\n\n        resolve();\n      });\n    });\n  }\n\n  loadFonts() {\n\n    if (FONTS_LOADER)\n    return FONTS_LOADER;\n\n    let loaders = _res_fonts_font_list__WEBPACK_IMPORTED_MODULE_1__.FONT_LIST.map((f) => {\n      if (f.url) {\n        return this.loadFont(f);\n      }\n    });\n\n    FONTS_LOADER = Promise.all(loaders);\n    return FONTS_LOADER;\n  }\n\n  mapFont(font) {\n    let cachedFont = this.fontCache[font.name.toLowerCase()];\n    if (!cachedFont)\n    cachedFont = this.fontCache[font.loadedName.toLowerCase()];\n    if (!cachedFont)\n    cachedFont = this.fontCache[font.fallbackName.toLowerCase()];\n\n    if (!cachedFont) {\n      avp.logger.warn(\"Failed to map font\", font.name);\n    }\n\n    return cachedFont;\n  }\n\n  drawText(ctx, text, x, y, font, fontSize) {\n\n    let cachedFont = this.mapFont(font);\n\n    if (!cachedFont)\n    return;\n\n    if (text.length === 1) {\n\n      let perSizeCache = cachedFont.pathCache[fontSize];\n\n      let path = perSizeCache && perSizeCache[text];\n\n      if (!path) {\n        path = cachedFont.getPath(text, 0, 0, fontSize);\n        path.fill = null;\n        path.stroke = null;\n\n        if (!perSizeCache) {\n          perSizeCache = cachedFont.pathCache[fontSize] = {};\n        }\n        perSizeCache[text] = path;\n      }\n\n      ctx.beginPath(text, x, y, font, fontSize);\n      for (let i = 0; i < path.commands.length; i += 1) {\n        const cmd = path.commands[i];\n        if (cmd.type === 'M') {\n          ctx.moveTo(cmd.x + x, cmd.y + y);\n        } else if (cmd.type === 'L') {\n          ctx.lineTo(cmd.x + x, cmd.y + y);\n        } else if (cmd.type === 'C') {\n          ctx.bezierCurveTo(cmd.x1 + x, cmd.y1 + y, cmd.x2 + x, cmd.y2 + y, cmd.x + x, cmd.y + y);\n        } else if (cmd.type === 'Q') {\n          ctx.quadraticCurveTo(cmd.x1 + x, cmd.y1 + y, cmd.x + x, cmd.y + y);\n        } else if (cmd.type === 'Z') {\n          ctx.closePath();\n        }\n      }\n\n    } else {\n      //TODO: No caching is attempted here. This code path should not be\n      //called during normal PDF loading. If it every is, it needs to be optimized as above.\n      avp.logger.warn(\"Multi-character text rendering not fully implemented\");\n      cachedFont.draw(ctx, text, x, y, fontSize);\n    }\n\n\n\n  }\n\n  getOnDemandFont(name) {\n    for (let i = 0; i < _res_fonts_font_list__WEBPACK_IMPORTED_MODULE_1__.ONDEMAND_FONT_LIST.length; i++) {\n      const entry = _res_fonts_font_list__WEBPACK_IMPORTED_MODULE_1__.ONDEMAND_FONT_LIST[i];\n      if (entry.name === name || entry.subs.includes(name.toLowerCase())) {\n        return entry;\n      }\n    }\n  }\n}\n\n\nconst theFontEngine = new FontEngine();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/PDF/font-engine.js\n");

/***/ }),

/***/ "./extensions/PDF/index.js":
/*!*********************************!*\
  !*** ./extensions/PDF/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFExtension: () => (/* binding */ PDFExtension),\n/* harmony export */   PDFLoader: () => (/* reexport safe */ _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _PDFLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PDFLoader */ \"./extensions/PDF/PDFLoader.js\");\n/* harmony import */ var _PDFTextLayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PDFTextLayer */ \"./extensions/PDF/PDFTextLayer.js\");\n\n\n\n\n\nvar av = Autodesk.Viewing;\nvar aveh = AutodeskNamespace('Autodesk.Viewing.Extensions.PDF');\n\n\n/**\n * Registers a FileLoader to enhance `viewer.loadModel()` to allow loading of PDF files.\n * The viewer will render a single page at a time.\n *\n * The extension id is: `Autodesk.PDF`\n *\n * @example\n * // Create Viewer instance and load PDF file on page 1\n * Autodesk.Viewing.Initializer(options, function() {\n *     var viewer = new Autodesk.Viewing.Viewer3D(div,config3d);\n *     viewer.start();\n *     viewer.loadExtension('Autodesk.PDF').then(function() {\n *         // URL parameter `page` will override value passed to loadModel\n *         viewer.loadModel('path/to/file.pdf', { page: 1 });\n *     });\n * });\n *\n *\n * @memberof Autodesk.Viewing.Extensions\n * @alias Autodesk.Viewing.Extensions.PDFExtension\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @class\n */\nclass PDFExtension extends av.Extension {\n\n  constructor(viewer, options) {\n    super(viewer, options);\n    this.onModelLoaded = this.onModelLoaded.bind(this);\n    this.onPopState = this.onPopState.bind(this);\n    // each time pdf change a page, tear down will happen, we need to use PDFLoader.useTextLayer to save the options\n    this.showTextLayer = options ? options.useTextLayer : _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.useTextLayer;\n    _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.useTextLayer = this.showTextLayer || false;\n    _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableHyperlinks = options && options.enableHyperlinks != undefined ? options.enableHyperlinks : _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableHyperlinks != null ? _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableHyperlinks : true;\n    _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableTextSearch = options && options.enableTextSearch != undefined ? options.enableTextSearch : _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableTextSearch != null ? _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableTextSearch : true;\n\n    PDFExtension.enableBrowserNavigation = options && options.enableBrowserNavigation != undefined ? options.enableBrowserNavigation : PDFExtension.enableBrowserNavigation != null ? PDFExtension.enableBrowserNavigation : true;\n    this.enableTextSearch = _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableTextSearch;\n    _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableMSDFText = options && options.enableMSDFText != undefined ? options.enableMSDFText : _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableMSDFText != null ? _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableMSDFText : false;\n\n    // Turn on SSAA if it is not an weak device and using MSDFText\n    if (_PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader.enableMSDFText && !viewer.impl.renderer().isWeakDevice() && viewer.impl.glrenderer().getPixelRatio() <= 1) {\n      viewer.impl.renderer().settings.useSSAA = true;\n    }\n  }\n\n  async load() {\n\n    await this.viewer.loadExtension('Autodesk.CompGeom');\n\n    av.FileLoaderManager.registerFileLoader(\"pdf\", [\"pdf\"], _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader);\n    if (!av.isNodeJS()) {\n      if (PDFExtension.enableBrowserNavigation) {\n        this.viewer.addEventListener(av.GEOMETRY_LOADED_EVENT, this.onModelLoaded);\n        this.addWindowEventListener(\"popstate\", this.onPopState);\n      }\n\n      if (this.enableTextSearch) {\n        this.textLayer = new _PDFTextLayer__WEBPACK_IMPORTED_MODULE_1__.PDFTextLayer(this.viewer, this.showTextLayer);\n        this.textLayer.onModelLoaded();\n      }\n    }\n    return true;\n  }\n\n  unload() {\n    av.FileLoaderManager.unregisterFileLoader(\"pdf\");\n    if (!av.isNodeJS()) {\n      this.viewer.removeEventListener(av.GEOMETRY_LOADED_EVENT, this.onModelLoaded);\n      this.removeWindowEventListener(\"popstate\", this.onPopState);\n\n      if (this.textLayer) {\n        this.textLayer.destroy();\n        this.textLayer = null;\n      }\n    }\n    return true;\n  }\n\n  onModelLoaded(event) {\n    if (event && event.model && event.model.getDocumentNode() && event.model.isPdf(true)) {\n      var url = new URL(window.location.href);\n      var bubbleNode = event.model.getDocumentNode();\n      var pageIndex = bubbleNode.data.page;\n      if (url.searchParams.get(\"page\") != pageIndex) {\n        url.searchParams.set(\"page\", pageIndex);\n        const _window = this.getWindow();\n        _window.history.pushState(undefined, \"Page:\" + pageIndex, url.href);\n      }\n    }\n  }\n\n  onPopState(event) {\n    var model = this.viewer.model;\n    if (event && model && model.getDocumentNode() && model.isPdf(true)) {\n      const _window = this.getWindow();\n      var url = new URL(_window.location.href);\n      var pageIndex = parseInt(url.searchParams.get(\"page\")) || 1;\n      var rootNode = model.getDocumentNode().getRootNode();\n\n      var bubbleNode = rootNode.children[pageIndex - 1];\n      this.viewer.dispatchEvent({ type: av.HYPERLINK_EVENT, data: { bubbleNode: bubbleNode } });\n      this.viewer.loadDocumentNode(rootNode.getDocument(), bubbleNode);\n    }\n  }\n\n  activate() {return true;}\n  deactivate() {return false;}\n}\n\naveh.PDFExtension = PDFExtension;\naveh.PDFLoader = _PDFLoader__WEBPACK_IMPORTED_MODULE_0__.PDFLoader;\n\nav.theExtensionManager.registerExtension('Autodesk.PDF', PDFExtension);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/PDF/index.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PDF/textlayer.css":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PDF/textlayer.css ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.pdf-textlayer {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  /* opacity: 0.45; */\n  /* line-height: 1.0; */\n  -webkit-font-smoothing: subpixel-antialiased;\n  display: none;\n}\n\n.pdf-textlayer > div {\n  color: transparent;\n  /* color: black; */\n  position: absolute;\n  white-space: pre;\n  -webkit-transform-origin: 0% 0%;\n  transform-origin: 0% 0%;\n  user-select: text;\n  -webkit-user-select: text;\n  -webkit-text-size-adjust: none;\n  text-size-adjust: none;\n  display: inline;\n}\n\n.pdf-textlayer.enabled {\n  display: block;\n}\n\n.pdf-textlayer.visible {\n  display: block;\n}\n\n.pdf-textlayer.visible > div {\n  display: block;\n  color: black; /*default color for text in case not defined in pdf*/\n}\n\n.pdf-textlayer.enabled > div {\n  cursor: text;\n}\n\n.pdf-textlayer .highlight {\n  margin: -1px;\n  padding: 1px;\n  background-color: rgb(180, 0, 170);\n  border-radius: 4px;\n}\n\n.pdf-textlayer .highlight.begin {\n  border-radius: 4px 0px 0px 4px;\n}\n\n.pdf-textlayer .highlight.end {\n  border-radius: 0px 4px 4px 0px;\n}\n\n.pdf-textlayer .highlight.middle {\n  border-radius: 0px;\n}\n\n.pdf-textlayer .highlight.selected {\n  background-color: rgb(0, 100, 0);\n}\n\n.pdf-textlayer ::-moz-selection {\n  background: rgba(0, 0, 255, 0.45);\n  color: transparent;\n}\n\n.pdf-textlayer ::selection {\n  background: rgba(0, 0, 255, 0.45);\n  color: transparent;\n}\n\n.pdf-textlayer.visible ::-moz-selection {\n  background: rgba(0, 0, 255, 0.45);\n  color: unset;\n}\n\n.pdf-textlayer.visible ::selection {\n  background: rgba(0, 0, 255, 0.45);\n  color: unset;\n}\n\n.pdf-textlayer .endOfContent {\n  display: block;\n  position: absolute;\n  left: 0px;\n  top: 100%;\n  right: 0px;\n  bottom: 0px;\n  z-index: -1;\n  cursor: default;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.pdf-textlayer .endOfContent.active {\n  top: 0px;\n}\n\n.active .adsk-icon-pdf-textselection {\n  background: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%3Csvg width%3D%2216px%22 height%3D%2216px%22 viewBox%3D%220 0 14 16%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E    %3C!-- Generator%3A Sketch 3.7.1 (28215) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E    %3Ctitle%3Eicon-text%3C%2Ftitle%3E    %3Cdesc%3ECreated with Sketch.%3C%2Fdesc%3E    %3Cdefs%3E%3C%2Fdefs%3E    %3Cg id%3D%22Page-1%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E        %3Cg id%3D%22tools%22 transform%3D%22translate(-508.000000%2C -27.000000)%22 fill%3D%22%2300BFFF%22%3E            %3Cg id%3D%22text%22 transform%3D%22translate(500.000000%2C 20.000000)%22%3E                %3Cg id%3D%22icon-text%22 transform%3D%22translate(8.000000%2C 7.000000)%22%3E                    %3Cpath d%3D%22M13.6924546%2C0.948 C13.5289104%2C0.387 13.0022776%2C0 12.4036441%2C0 L8.02806554%2C0 L6.99948571%2C0 L1.59532731%2C0 C0.996693851%2C0 0.47006098%2C0.387 0.306516788%2C0.948 C0.306516788%2C0.948 0%2C2.844 0%2C3.375 C0%2C3.906 0.402174712%2C4 0.402174712%2C4 L1.02857983%2C4 L1.68687091%2C2.72 C1.91315847%2C2.279 2.37704798%2C2 2.88516641%2C2 L5.97090588%2C2 L5.97090588%2C13 L4.94232606%2C14 L2.88516641%2C14 L2.88516641%2C16 L11.113805%2C16 L11.113805%2C14 L9.05664536%2C14 L8.02806554%2C13 L8.02806554%2C2 L11.113805%2C2 C11.6219234%2C2 12.0858129%2C2.279 12.3131291%2C2.72 L12.9714202%2C4 L13.5978253%2C4 C13.5978253%2C4 14%2C3.906 14%2C3.375 C13.9989714%2C2.844 13.6924546%2C0.948 13.6924546%2C0.948 L13.6924546%2C0.948 Z%22 id%3D%22Shape%22%3E%3C%2Fpath%3E                %3C%2Fg%3E            %3C%2Fg%3E        %3C%2Fg%3E    %3C%2Fg%3E%3C%2Fsvg%3E\");\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n.inactive .adsk-icon-pdf-textselection {\n  background: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%3Csvg width%3D%2214px%22 height%3D%2216px%22 viewBox%3D%220 0 14 16%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E    %3C!-- Generator%3A Sketch 3.7.1 (28215) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E    %3Ctitle%3Eicon-text%3C%2Ftitle%3E    %3Cdesc%3ECreated with Sketch.%3C%2Fdesc%3E    %3Cdefs%3E%3C%2Fdefs%3E    %3Cg id%3D%22Page-1%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E        %3Cg id%3D%22tools%22 transform%3D%22translate(-508.000000%2C -27.000000)%22 fill%3D%22%23F4F4F4%22%3E            %3Cg id%3D%22text%22 transform%3D%22translate(500.000000%2C 20.000000)%22%3E                %3Cg id%3D%22icon-text%22 transform%3D%22translate(8.000000%2C 7.000000)%22%3E                    %3Cpath d%3D%22M13.6924546%2C0.948 C13.5289104%2C0.387 13.0022776%2C0 12.4036441%2C0 L8.02806554%2C0 L6.99948571%2C0 L1.59532731%2C0 C0.996693851%2C0 0.47006098%2C0.387 0.306516788%2C0.948 C0.306516788%2C0.948 0%2C2.844 0%2C3.375 C0%2C3.906 0.402174712%2C4 0.402174712%2C4 L1.02857983%2C4 L1.68687091%2C2.72 C1.91315847%2C2.279 2.37704798%2C2 2.88516641%2C2 L5.97090588%2C2 L5.97090588%2C13 L4.94232606%2C14 L2.88516641%2C14 L2.88516641%2C16 L11.113805%2C16 L11.113805%2C14 L9.05664536%2C14 L8.02806554%2C13 L8.02806554%2C2 L11.113805%2C2 C11.6219234%2C2 12.0858129%2C2.279 12.3131291%2C2.72 L12.9714202%2C4 L13.5978253%2C4 C13.5978253%2C4 14%2C3.906 14%2C3.375 C13.9989714%2C2.844 13.6924546%2C0.948 13.6924546%2C0.948 L13.6924546%2C0.948 Z%22 id%3D%22Shape%22%3E%3C%2Fpath%3E                %3C%2Fg%3E            %3C%2Fg%3E        %3C%2Fg%3E    %3C%2Fg%3E%3C%2Fsvg%3E\");\n  background-repeat: no-repeat;\n  background-position: center;\n}\n\n.adsk-viewing-viewer.light-theme .inactive .adsk-icon-pdf-textselection {\n  background: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%3Csvg width%3D%2216px%22 height%3D%2216px%22 viewBox%3D%220 0 14 16%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E    %3C!-- Generator%3A Sketch 3.7.1 (28215) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E    %3Ctitle%3Eicon-text%3C%2Ftitle%3E    %3Cdesc%3ECreated with Sketch.%3C%2Fdesc%3E    %3Cdefs%3E%3C%2Fdefs%3E    %3Cg id%3D%22Page-1%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E        %3Cg id%3D%22tools%22 transform%3D%22translate(-508.000000%2C -27.000000)%22 fill%3D%22%230A131C%22%3E            %3Cg id%3D%22text%22 transform%3D%22translate(500.000000%2C 20.000000)%22%3E                %3Cg id%3D%22icon-text%22 transform%3D%22translate(8.000000%2C 7.000000)%22%3E                    %3Cpath d%3D%22M13.6924546%2C0.948 C13.5289104%2C0.387 13.0022776%2C0 12.4036441%2C0 L8.02806554%2C0 L6.99948571%2C0 L1.59532731%2C0 C0.996693851%2C0 0.47006098%2C0.387 0.306516788%2C0.948 C0.306516788%2C0.948 0%2C2.844 0%2C3.375 C0%2C3.906 0.402174712%2C4 0.402174712%2C4 L1.02857983%2C4 L1.68687091%2C2.72 C1.91315847%2C2.279 2.37704798%2C2 2.88516641%2C2 L5.97090588%2C2 L5.97090588%2C13 L4.94232606%2C14 L2.88516641%2C14 L2.88516641%2C16 L11.113805%2C16 L11.113805%2C14 L9.05664536%2C14 L8.02806554%2C13 L8.02806554%2C2 L11.113805%2C2 C11.6219234%2C2 12.0858129%2C2.279 12.3131291%2C2.72 L12.9714202%2C4 L13.5978253%2C4 C13.5978253%2C4 14%2C3.906 14%2C3.375 C13.9989714%2C2.844 13.6924546%2C0.948 13.6924546%2C0.948 L13.6924546%2C0.948 Z%22 id%3D%22Shape%22%3E%3C%2Fpath%3E                %3C%2Fg%3E            %3C%2Fg%3E        %3C%2Fg%3E    %3C%2Fg%3E%3C%2Fsvg%3E\");\n  background-repeat: no-repeat;\n  background-position: center;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./extensions/PDF/textlayer.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;EAClB,OAAO;EACP,MAAM;EACN,QAAQ;EACR,SAAS;EACT,gBAAgB;EAChB,mBAAmB;EACnB,sBAAsB;EACtB,4CAA4C;EAC5C,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,+BAA+B;EAC/B,uBAAuB;EACvB,iBAAiB;EACjB,yBAAyB;EACzB,8BAA8B;EAC9B,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,YAAY,EAAE,oDAAoD;AACpE;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,kCAAkC;EAClC,kBAAkB;AACpB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA;EACE,iCAAiC;EACjC,YAAY;AACd;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,UAAU;EACV,WAAW;EACX,WAAW;EACX,eAAe;EACf,yBAAyB;EACzB,sBAAsB;EACtB,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,syDAAsC;EACtC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;EACE,syDAAwC;EACxC,4BAA4B;EAC5B,2BAA2B;AAC7B;;AAEA;EACE,syDAAqC;EACrC,4BAA4B;EAC5B,2BAA2B;AAC7B\",\"sourcesContent\":[\".pdf-textlayer {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  /* opacity: 0.45; */\\n  /* line-height: 1.0; */\\n  -webkit-font-smoothing: subpixel-antialiased;\\n  display: none;\\n}\\n\\n.pdf-textlayer > div {\\n  color: transparent;\\n  /* color: black; */\\n  position: absolute;\\n  white-space: pre;\\n  -webkit-transform-origin: 0% 0%;\\n  transform-origin: 0% 0%;\\n  user-select: text;\\n  -webkit-user-select: text;\\n  -webkit-text-size-adjust: none;\\n  text-size-adjust: none;\\n  display: inline;\\n}\\n\\n.pdf-textlayer.enabled {\\n  display: block;\\n}\\n\\n.pdf-textlayer.visible {\\n  display: block;\\n}\\n\\n.pdf-textlayer.visible > div {\\n  display: block;\\n  color: black; /*default color for text in case not defined in pdf*/\\n}\\n\\n.pdf-textlayer.enabled > div {\\n  cursor: text;\\n}\\n\\n.pdf-textlayer .highlight {\\n  margin: -1px;\\n  padding: 1px;\\n  background-color: rgb(180, 0, 170);\\n  border-radius: 4px;\\n}\\n\\n.pdf-textlayer .highlight.begin {\\n  border-radius: 4px 0px 0px 4px;\\n}\\n\\n.pdf-textlayer .highlight.end {\\n  border-radius: 0px 4px 4px 0px;\\n}\\n\\n.pdf-textlayer .highlight.middle {\\n  border-radius: 0px;\\n}\\n\\n.pdf-textlayer .highlight.selected {\\n  background-color: rgb(0, 100, 0);\\n}\\n\\n.pdf-textlayer ::-moz-selection {\\n  background: rgba(0, 0, 255, 0.45);\\n  color: transparent;\\n}\\n\\n.pdf-textlayer ::selection {\\n  background: rgba(0, 0, 255, 0.45);\\n  color: transparent;\\n}\\n\\n.pdf-textlayer.visible ::-moz-selection {\\n  background: rgba(0, 0, 255, 0.45);\\n  color: unset;\\n}\\n\\n.pdf-textlayer.visible ::selection {\\n  background: rgba(0, 0, 255, 0.45);\\n  color: unset;\\n}\\n\\n.pdf-textlayer .endOfContent {\\n  display: block;\\n  position: absolute;\\n  left: 0px;\\n  top: 100%;\\n  right: 0px;\\n  bottom: 0px;\\n  z-index: -1;\\n  cursor: default;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n}\\n\\n.pdf-textlayer .endOfContent.active {\\n  top: 0px;\\n}\\n\\n.active .adsk-icon-pdf-textselection {\\n  background: url(./res/text.active.svg);\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\\n\\n.inactive .adsk-icon-pdf-textselection {\\n  background: url(./res/text.inactive.svg);\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\\n\\n.adsk-viewing-viewer.light-theme .inactive .adsk-icon-pdf-textselection {\\n  background: url(./res/text.light.svg);\\n  background-repeat: no-repeat;\\n  background-position: center;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PDF/textlayer.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./node_modules/opentype.js/dist/opentype.js":
/*!***************************************************!*\
  !*** ./node_modules/opentype.js/dist/opentype.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/**\n * https://opentype.js.org v0.9.0 | (c) Frederik De Bleser and other contributors | MIT License | Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens\n */\n\n(function (global, factory) {\n\t true ? factory(exports) :\n\t0;\n}(this, (function (exports) { 'use strict';\n\n\t/*! https://mths.be/codepointat v0.2.0 by @mathias */\n\tif (!String.prototype.codePointAt) {\n\t\t(function() {\n\t\t\tvar defineProperty = (function() {\n\t\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\t\ttry {\n\t\t\t\t\tvar object = {};\n\t\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t\t} catch(error) {}\n\t\t\t\treturn result;\n\t\t\t}());\n\t\t\tvar codePointAt = function(position) {\n\t\t\t\tif (this == null) {\n\t\t\t\t\tthrow TypeError();\n\t\t\t\t}\n\t\t\t\tvar string = String(this);\n\t\t\t\tvar size = string.length;\n\t\t\t\t// `ToInteger`\n\t\t\t\tvar index = position ? Number(position) : 0;\n\t\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\t// Account for out-of-bounds indices:\n\t\t\t\tif (index < 0 || index >= size) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// Get the first code unit\n\t\t\t\tvar first = string.charCodeAt(index);\n\t\t\t\tvar second;\n\t\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t\t) {\n\t\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn first;\n\t\t\t};\n\t\t\tif (defineProperty) {\n\t\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t\t'value': codePointAt,\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'writable': true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t\t}\n\t\t}());\n\t}\n\n\tvar TINF_OK = 0;\n\tvar TINF_DATA_ERROR = -3;\n\n\tfunction Tree() {\n\t  this.table = new Uint16Array(16);   /* table of code length counts */\n\t  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n\t}\n\n\tfunction Data(source, dest) {\n\t  this.source = source;\n\t  this.sourceIndex = 0;\n\t  this.tag = 0;\n\t  this.bitcount = 0;\n\t  \n\t  this.dest = dest;\n\t  this.destLen = 0;\n\t  \n\t  this.ltree = new Tree();  /* dynamic length/symbol tree */\n\t  this.dtree = new Tree();  /* dynamic distance tree */\n\t}\n\n\t/* --------------------------------------------------- *\n\t * -- uninitialized global data (static structures) -- *\n\t * --------------------------------------------------- */\n\n\tvar sltree = new Tree();\n\tvar sdtree = new Tree();\n\n\t/* extra bits and base tables for length codes */\n\tvar length_bits = new Uint8Array(30);\n\tvar length_base = new Uint16Array(30);\n\n\t/* extra bits and base tables for distance codes */\n\tvar dist_bits = new Uint8Array(30);\n\tvar dist_base = new Uint16Array(30);\n\n\t/* special ordering of code length codes */\n\tvar clcidx = new Uint8Array([\n\t  16, 17, 18, 0, 8, 7, 9, 6,\n\t  10, 5, 11, 4, 12, 3, 13, 2,\n\t  14, 1, 15\n\t]);\n\n\t/* used by tinf_decode_trees, avoids allocations every call */\n\tvar code_tree = new Tree();\n\tvar lengths = new Uint8Array(288 + 32);\n\n\t/* ----------------------- *\n\t * -- utility functions -- *\n\t * ----------------------- */\n\n\t/* build extra bits and base tables */\n\tfunction tinf_build_bits_base(bits, base, delta, first) {\n\t  var i, sum;\n\n\t  /* build bits table */\n\t  for (i = 0; i < delta; ++i) { bits[i] = 0; }\n\t  for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }\n\n\t  /* build base table */\n\t  for (sum = first, i = 0; i < 30; ++i) {\n\t    base[i] = sum;\n\t    sum += 1 << bits[i];\n\t  }\n\t}\n\n\t/* build the fixed huffman trees */\n\tfunction tinf_build_fixed_trees(lt, dt) {\n\t  var i;\n\n\t  /* build fixed length tree */\n\t  for (i = 0; i < 7; ++i) { lt.table[i] = 0; }\n\n\t  lt.table[7] = 24;\n\t  lt.table[8] = 152;\n\t  lt.table[9] = 112;\n\n\t  for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }\n\t  for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }\n\t  for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }\n\t  for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }\n\n\t  /* build fixed distance tree */\n\t  for (i = 0; i < 5; ++i) { dt.table[i] = 0; }\n\n\t  dt.table[5] = 32;\n\n\t  for (i = 0; i < 32; ++i) { dt.trans[i] = i; }\n\t}\n\n\t/* given an array of code lengths, build a tree */\n\tvar offs = new Uint16Array(16);\n\n\tfunction tinf_build_tree(t, lengths, off, num) {\n\t  var i, sum;\n\n\t  /* clear code length count table */\n\t  for (i = 0; i < 16; ++i) { t.table[i] = 0; }\n\n\t  /* scan symbol lengths, and sum code length counts */\n\t  for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }\n\n\t  t.table[0] = 0;\n\n\t  /* compute offset table for distribution sort */\n\t  for (sum = 0, i = 0; i < 16; ++i) {\n\t    offs[i] = sum;\n\t    sum += t.table[i];\n\t  }\n\n\t  /* create code->symbol translation table (symbols sorted by code) */\n\t  for (i = 0; i < num; ++i) {\n\t    if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }\n\t  }\n\t}\n\n\t/* ---------------------- *\n\t * -- decode functions -- *\n\t * ---------------------- */\n\n\t/* get one bit from source stream */\n\tfunction tinf_getbit(d) {\n\t  /* check if tag is empty */\n\t  if (!d.bitcount--) {\n\t    /* load next tag */\n\t    d.tag = d.source[d.sourceIndex++];\n\t    d.bitcount = 7;\n\t  }\n\n\t  /* shift bit out of tag */\n\t  var bit = d.tag & 1;\n\t  d.tag >>>= 1;\n\n\t  return bit;\n\t}\n\n\t/* read a num bit value from a stream and add base */\n\tfunction tinf_read_bits(d, num, base) {\n\t  if (!num)\n\t    { return base; }\n\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\n\t  var val = d.tag & (0xffff >>> (16 - num));\n\t  d.tag >>>= num;\n\t  d.bitcount -= num;\n\t  return val + base;\n\t}\n\n\t/* given a data stream and a tree, decode a symbol */\n\tfunction tinf_decode_symbol(d, t) {\n\t  while (d.bitcount < 24) {\n\t    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n\t    d.bitcount += 8;\n\t  }\n\t  \n\t  var sum = 0, cur = 0, len = 0;\n\t  var tag = d.tag;\n\n\t  /* get more bits while code value is above sum */\n\t  do {\n\t    cur = 2 * cur + (tag & 1);\n\t    tag >>>= 1;\n\t    ++len;\n\n\t    sum += t.table[len];\n\t    cur -= t.table[len];\n\t  } while (cur >= 0);\n\t  \n\t  d.tag = tag;\n\t  d.bitcount -= len;\n\n\t  return t.trans[sum + cur];\n\t}\n\n\t/* given a data stream, decode dynamic trees from it */\n\tfunction tinf_decode_trees(d, lt, dt) {\n\t  var hlit, hdist, hclen;\n\t  var i, num, length;\n\n\t  /* get 5 bits HLIT (257-286) */\n\t  hlit = tinf_read_bits(d, 5, 257);\n\n\t  /* get 5 bits HDIST (1-32) */\n\t  hdist = tinf_read_bits(d, 5, 1);\n\n\t  /* get 4 bits HCLEN (4-19) */\n\t  hclen = tinf_read_bits(d, 4, 4);\n\n\t  for (i = 0; i < 19; ++i) { lengths[i] = 0; }\n\n\t  /* read code lengths for code length alphabet */\n\t  for (i = 0; i < hclen; ++i) {\n\t    /* get 3 bits code length (0-7) */\n\t    var clen = tinf_read_bits(d, 3, 0);\n\t    lengths[clcidx[i]] = clen;\n\t  }\n\n\t  /* build code length tree */\n\t  tinf_build_tree(code_tree, lengths, 0, 19);\n\n\t  /* decode code lengths for the dynamic trees */\n\t  for (num = 0; num < hlit + hdist;) {\n\t    var sym = tinf_decode_symbol(d, code_tree);\n\n\t    switch (sym) {\n\t      case 16:\n\t        /* copy previous code length 3-6 times (read 2 bits) */\n\t        var prev = lengths[num - 1];\n\t        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n\t          lengths[num++] = prev;\n\t        }\n\t        break;\n\t      case 17:\n\t        /* repeat code length 0 for 3-10 times (read 3 bits) */\n\t        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      case 18:\n\t        /* repeat code length 0 for 11-138 times (read 7 bits) */\n\t        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n\t          lengths[num++] = 0;\n\t        }\n\t        break;\n\t      default:\n\t        /* values 0-15 represent the actual code lengths */\n\t        lengths[num++] = sym;\n\t        break;\n\t    }\n\t  }\n\n\t  /* build dynamic trees */\n\t  tinf_build_tree(lt, lengths, 0, hlit);\n\t  tinf_build_tree(dt, lengths, hlit, hdist);\n\t}\n\n\t/* ----------------------------- *\n\t * -- block inflate functions -- *\n\t * ----------------------------- */\n\n\t/* given a stream and two trees, inflate a block of data */\n\tfunction tinf_inflate_block_data(d, lt, dt) {\n\t  while (1) {\n\t    var sym = tinf_decode_symbol(d, lt);\n\n\t    /* check for end of block */\n\t    if (sym === 256) {\n\t      return TINF_OK;\n\t    }\n\n\t    if (sym < 256) {\n\t      d.dest[d.destLen++] = sym;\n\t    } else {\n\t      var length, dist, offs;\n\t      var i;\n\n\t      sym -= 257;\n\n\t      /* possibly get more bits from length code */\n\t      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n\t      dist = tinf_decode_symbol(d, dt);\n\n\t      /* possibly get more bits from distance code */\n\t      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n\t      /* copy match */\n\t      for (i = offs; i < offs + length; ++i) {\n\t        d.dest[d.destLen++] = d.dest[i];\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/* inflate an uncompressed block of data */\n\tfunction tinf_inflate_uncompressed_block(d) {\n\t  var length, invlength;\n\t  var i;\n\t  \n\t  /* unread from bitbuffer */\n\t  while (d.bitcount > 8) {\n\t    d.sourceIndex--;\n\t    d.bitcount -= 8;\n\t  }\n\n\t  /* get length */\n\t  length = d.source[d.sourceIndex + 1];\n\t  length = 256 * length + d.source[d.sourceIndex];\n\n\t  /* get one's complement of length */\n\t  invlength = d.source[d.sourceIndex + 3];\n\t  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n\t  /* check length */\n\t  if (length !== (~invlength & 0x0000ffff))\n\t    { return TINF_DATA_ERROR; }\n\n\t  d.sourceIndex += 4;\n\n\t  /* copy block */\n\t  for (i = length; i; --i)\n\t    { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }\n\n\t  /* make sure we start next block on a byte boundary */\n\t  d.bitcount = 0;\n\n\t  return TINF_OK;\n\t}\n\n\t/* inflate stream from source to dest */\n\tfunction tinf_uncompress(source, dest) {\n\t  var d = new Data(source, dest);\n\t  var bfinal, btype, res;\n\n\t  do {\n\t    /* read final block flag */\n\t    bfinal = tinf_getbit(d);\n\n\t    /* read block type (2 bits) */\n\t    btype = tinf_read_bits(d, 2, 0);\n\n\t    /* decompress block */\n\t    switch (btype) {\n\t      case 0:\n\t        /* decompress uncompressed block */\n\t        res = tinf_inflate_uncompressed_block(d);\n\t        break;\n\t      case 1:\n\t        /* decompress block with fixed huffman trees */\n\t        res = tinf_inflate_block_data(d, sltree, sdtree);\n\t        break;\n\t      case 2:\n\t        /* decompress block with dynamic huffman trees */\n\t        tinf_decode_trees(d, d.ltree, d.dtree);\n\t        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n\t        break;\n\t      default:\n\t        res = TINF_DATA_ERROR;\n\t    }\n\n\t    if (res !== TINF_OK)\n\t      { throw new Error('Data error'); }\n\n\t  } while (!bfinal);\n\n\t  if (d.destLen < d.dest.length) {\n\t    if (typeof d.dest.slice === 'function')\n\t      { return d.dest.slice(0, d.destLen); }\n\t    else\n\t      { return d.dest.subarray(0, d.destLen); }\n\t  }\n\t  \n\t  return d.dest;\n\t}\n\n\t/* -------------------- *\n\t * -- initialization -- *\n\t * -------------------- */\n\n\t/* build fixed huffman trees */\n\ttinf_build_fixed_trees(sltree, sdtree);\n\n\t/* build extra bits and base tables */\n\ttinf_build_bits_base(length_bits, length_base, 4, 3);\n\ttinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n\t/* fix a special case */\n\tlength_bits[28] = 0;\n\tlength_base[28] = 258;\n\n\tvar tinyInflate = tinf_uncompress;\n\n\t// The Bounding Box object\n\n\tfunction derive(v0, v1, v2, v3, t) {\n\t    return Math.pow(1 - t, 3) * v0 +\n\t        3 * Math.pow(1 - t, 2) * t * v1 +\n\t        3 * (1 - t) * Math.pow(t, 2) * v2 +\n\t        Math.pow(t, 3) * v3;\n\t}\n\t/**\n\t * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n\t * It is used to calculate the bounding box of a glyph or text path.\n\t *\n\t * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n\t *\n\t * @exports opentype.BoundingBox\n\t * @class\n\t * @constructor\n\t */\n\tfunction BoundingBox() {\n\t    this.x1 = Number.NaN;\n\t    this.y1 = Number.NaN;\n\t    this.x2 = Number.NaN;\n\t    this.y2 = Number.NaN;\n\t}\n\n\t/**\n\t * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n\t */\n\tBoundingBox.prototype.isEmpty = function() {\n\t    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n\t};\n\n\t/**\n\t * Add the point to the bounding box.\n\t * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n\t * @param {number} x - The X coordinate of the point.\n\t * @param {number} y - The Y coordinate of the point.\n\t */\n\tBoundingBox.prototype.addPoint = function(x, y) {\n\t    if (typeof x === 'number') {\n\t        if (isNaN(this.x1) || isNaN(this.x2)) {\n\t            this.x1 = x;\n\t            this.x2 = x;\n\t        }\n\t        if (x < this.x1) {\n\t            this.x1 = x;\n\t        }\n\t        if (x > this.x2) {\n\t            this.x2 = x;\n\t        }\n\t    }\n\t    if (typeof y === 'number') {\n\t        if (isNaN(this.y1) || isNaN(this.y2)) {\n\t            this.y1 = y;\n\t            this.y2 = y;\n\t        }\n\t        if (y < this.y1) {\n\t            this.y1 = y;\n\t        }\n\t        if (y > this.y2) {\n\t            this.y2 = y;\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Add a X coordinate to the bounding box.\n\t * This extends the bounding box to include the X coordinate.\n\t * This function is used internally inside of addBezier.\n\t * @param {number} x - The X coordinate of the point.\n\t */\n\tBoundingBox.prototype.addX = function(x) {\n\t    this.addPoint(x, null);\n\t};\n\n\t/**\n\t * Add a Y coordinate to the bounding box.\n\t * This extends the bounding box to include the Y coordinate.\n\t * This function is used internally inside of addBezier.\n\t * @param {number} y - The Y coordinate of the point.\n\t */\n\tBoundingBox.prototype.addY = function(y) {\n\t    this.addPoint(null, y);\n\t};\n\n\t/**\n\t * Add a Bézier curve to the bounding box.\n\t * This extends the bounding box to include the entire Bézier.\n\t * @param {number} x0 - The starting X coordinate.\n\t * @param {number} y0 - The starting Y coordinate.\n\t * @param {number} x1 - The X coordinate of the first control point.\n\t * @param {number} y1 - The Y coordinate of the first control point.\n\t * @param {number} x2 - The X coordinate of the second control point.\n\t * @param {number} y2 - The Y coordinate of the second control point.\n\t * @param {number} x - The ending X coordinate.\n\t * @param {number} y - The ending Y coordinate.\n\t */\n\tBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n\t    var this$1 = this;\n\n\t    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // and https://github.com/icons8/svg-path-bounding-box\n\n\t    var p0 = [x0, y0];\n\t    var p1 = [x1, y1];\n\t    var p2 = [x2, y2];\n\t    var p3 = [x, y];\n\n\t    this.addPoint(x0, y0);\n\t    this.addPoint(x, y);\n\n\t    for (var i = 0; i <= 1; i++) {\n\t        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n\t        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n\t        var c = 3 * p1[i] - 3 * p0[i];\n\n\t        if (a === 0) {\n\t            if (b === 0) { continue; }\n\t            var t = -c / b;\n\t            if (0 < t && t < 1) {\n\t                if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n\t                if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }\n\t            }\n\t            continue;\n\t        }\n\n\t        var b2ac = Math.pow(b, 2) - 4 * c * a;\n\t        if (b2ac < 0) { continue; }\n\t        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t1 && t1 < 1) {\n\t            if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n\t            if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }\n\t        }\n\t        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t2 && t2 < 1) {\n\t            if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n\t            if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Add a quadratic curve to the bounding box.\n\t * This extends the bounding box to include the entire quadratic curve.\n\t * @param {number} x0 - The starting X coordinate.\n\t * @param {number} y0 - The starting Y coordinate.\n\t * @param {number} x1 - The X coordinate of the control point.\n\t * @param {number} y1 - The Y coordinate of the control point.\n\t * @param {number} x - The ending X coordinate.\n\t * @param {number} y - The ending Y coordinate.\n\t */\n\tBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n\t    var cp1x = x0 + 2 / 3 * (x1 - x0);\n\t    var cp1y = y0 + 2 / 3 * (y1 - y0);\n\t    var cp2x = cp1x + 1 / 3 * (x - x0);\n\t    var cp2y = cp1y + 1 / 3 * (y - y0);\n\t    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n\t};\n\n\t// Geometric objects\n\n\t/**\n\t * A bézier path containing a set of path commands similar to a SVG path.\n\t * Paths can be drawn on a context using `draw`.\n\t * @exports opentype.Path\n\t * @class\n\t * @constructor\n\t */\n\tfunction Path() {\n\t    this.commands = [];\n\t    this.fill = 'black';\n\t    this.stroke = null;\n\t    this.strokeWidth = 1;\n\t}\n\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.moveTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'M',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * @param  {number} x\n\t * @param  {number} y\n\t */\n\tPath.prototype.lineTo = function(x, y) {\n\t    this.commands.push({\n\t        type: 'L',\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * curveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\n\t/**\n\t * Draws cubic curve\n\t * @function\n\t * bezierCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control 1\n\t * @param  {number} y1 - y of control 1\n\t * @param  {number} x2 - x of control 2\n\t * @param  {number} y2 - y of control 2\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t * @see curveTo\n\t */\n\tPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n\t    this.commands.push({\n\t        type: 'C',\n\t        x1: x1,\n\t        y1: y1,\n\t        x2: x2,\n\t        y2: y2,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadraticCurveTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\n\t/**\n\t * Draws quadratic curve\n\t * @function\n\t * quadTo\n\t * @memberof opentype.Path.prototype\n\t * @param  {number} x1 - x of control\n\t * @param  {number} y1 - y of control\n\t * @param  {number} x - x of path point\n\t * @param  {number} y - y of path point\n\t */\n\tPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n\t    this.commands.push({\n\t        type: 'Q',\n\t        x1: x1,\n\t        y1: y1,\n\t        x: x,\n\t        y: y\n\t    });\n\t};\n\n\t/**\n\t * Closes the path\n\t * @function closePath\n\t * @memberof opentype.Path.prototype\n\t */\n\n\t/**\n\t * Close the path\n\t * @function close\n\t * @memberof opentype.Path.prototype\n\t */\n\tPath.prototype.close = Path.prototype.closePath = function() {\n\t    this.commands.push({\n\t        type: 'Z'\n\t    });\n\t};\n\n\t/**\n\t * Add the given path or list of commands to the commands of this path.\n\t * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.\n\t */\n\tPath.prototype.extend = function(pathOrCommands) {\n\t    if (pathOrCommands.commands) {\n\t        pathOrCommands = pathOrCommands.commands;\n\t    } else if (pathOrCommands instanceof BoundingBox) {\n\t        var box = pathOrCommands;\n\t        this.moveTo(box.x1, box.y1);\n\t        this.lineTo(box.x2, box.y1);\n\t        this.lineTo(box.x2, box.y2);\n\t        this.lineTo(box.x1, box.y2);\n\t        this.close();\n\t        return;\n\t    }\n\n\t    Array.prototype.push.apply(this.commands, pathOrCommands);\n\t};\n\n\t/**\n\t * Calculate the bounding box of the path.\n\t * @returns {opentype.BoundingBox}\n\t */\n\tPath.prototype.getBoundingBox = function() {\n\t    var this$1 = this;\n\n\t    var box = new BoundingBox();\n\n\t    var startX = 0;\n\t    var startY = 0;\n\t    var prevX = 0;\n\t    var prevY = 0;\n\t    for (var i = 0; i < this.commands.length; i++) {\n\t        var cmd = this$1.commands[i];\n\t        switch (cmd.type) {\n\t            case 'M':\n\t                box.addPoint(cmd.x, cmd.y);\n\t                startX = prevX = cmd.x;\n\t                startY = prevY = cmd.y;\n\t                break;\n\t            case 'L':\n\t                box.addPoint(cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'Q':\n\t                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'C':\n\t                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t                prevX = cmd.x;\n\t                prevY = cmd.y;\n\t                break;\n\t            case 'Z':\n\t                prevX = startX;\n\t                prevY = startY;\n\t                break;\n\t            default:\n\t                throw new Error('Unexpected path command ' + cmd.type);\n\t        }\n\t    }\n\t    if (box.isEmpty()) {\n\t        box.addPoint(0, 0);\n\t    }\n\t    return box;\n\t};\n\n\t/**\n\t * Draw the path to a 2D context.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.\n\t */\n\tPath.prototype.draw = function(ctx) {\n\t    var this$1 = this;\n\n\t    ctx.beginPath();\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this$1.commands[i];\n\t        if (cmd.type === 'M') {\n\t            ctx.moveTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            ctx.lineTo(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            ctx.closePath();\n\t        }\n\t    }\n\n\t    if (this.fill) {\n\t        ctx.fillStyle = this.fill;\n\t        ctx.fill();\n\t    }\n\n\t    if (this.stroke) {\n\t        ctx.strokeStyle = this.stroke;\n\t        ctx.lineWidth = this.strokeWidth;\n\t        ctx.stroke();\n\t    }\n\t};\n\n\t/**\n\t * Convert the Path to a string of path data instructions\n\t * See http://www.w3.org/TR/SVG/paths.html#PathData\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toPathData = function(decimalPlaces) {\n\t    var this$1 = this;\n\n\t    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n\t    function floatToString(v) {\n\t        if (Math.round(v) === v) {\n\t            return '' + Math.round(v);\n\t        } else {\n\t            return v.toFixed(decimalPlaces);\n\t        }\n\t    }\n\n\t    function packValues() {\n\t        var arguments$1 = arguments;\n\n\t        var s = '';\n\t        for (var i = 0; i < arguments.length; i += 1) {\n\t            var v = arguments$1[i];\n\t            if (v >= 0 && i > 0) {\n\t                s += ' ';\n\t            }\n\n\t            s += floatToString(v);\n\t        }\n\n\t        return s;\n\t    }\n\n\t    var d = '';\n\t    for (var i = 0; i < this.commands.length; i += 1) {\n\t        var cmd = this$1.commands[i];\n\t        if (cmd.type === 'M') {\n\t            d += 'M' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            d += 'L' + packValues(cmd.x, cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Q') {\n\t            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n\t        } else if (cmd.type === 'Z') {\n\t            d += 'Z';\n\t        }\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * Convert the path to an SVG <path> element, as a string.\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {string}\n\t */\n\tPath.prototype.toSVG = function(decimalPlaces) {\n\t    var svg = '<path d=\"';\n\t    svg += this.toPathData(decimalPlaces);\n\t    svg += '\"';\n\t    if (this.fill && this.fill !== 'black') {\n\t        if (this.fill === null) {\n\t            svg += ' fill=\"none\"';\n\t        } else {\n\t            svg += ' fill=\"' + this.fill + '\"';\n\t        }\n\t    }\n\n\t    if (this.stroke) {\n\t        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n\t    }\n\n\t    svg += '/>';\n\t    return svg;\n\t};\n\n\t/**\n\t * Convert the path to a DOM element.\n\t * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values\n\t * @return {SVGPathElement}\n\t */\n\tPath.prototype.toDOMElement = function(decimalPlaces) {\n\t    var temporaryPath = this.toPathData(decimalPlaces);\n\t    var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n\t    newPath.setAttribute('d', temporaryPath);\n\n\t    return newPath;\n\t};\n\n\t// Run-time checking of preconditions.\n\n\tfunction fail(message) {\n\t    throw new Error(message);\n\t}\n\n\t// Precondition function that checks if the given predicate is true.\n\t// If not, it will throw an error.\n\tfunction argument(predicate, message) {\n\t    if (!predicate) {\n\t        fail(message);\n\t    }\n\t}\n\tvar check = { fail: fail, argument: argument, assert: argument };\n\n\t// Data types used in the OpenType font file.\n\n\tvar LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\n\tvar LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\n\t/**\n\t * @exports opentype.decode\n\t * @class\n\t */\n\tvar decode = {};\n\t/**\n\t * @exports opentype.encode\n\t * @class\n\t */\n\tvar encode = {};\n\t/**\n\t * @exports opentype.sizeOf\n\t * @class\n\t */\n\tvar sizeOf = {};\n\n\t// Return a function that always returns the same value.\n\tfunction constant(v) {\n\t    return function() {\n\t        return v;\n\t    };\n\t}\n\n\t// OpenType data types //////////////////////////////////////////////////////\n\n\t/**\n\t * Convert an 8-bit unsigned integer to a list of 1 byte.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.BYTE = function(v) {\n\t    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n\t    return [v];\n\t};\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.BYTE = constant(1);\n\n\t/**\n\t * Convert a 8-bit signed integer to a list of 1 byte.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHAR = function(v) {\n\t    return [v.charCodeAt(0)];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.CHAR = constant(1);\n\n\t/**\n\t * Convert an ASCII string to a list of bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.CHARARRAY = function(v) {\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        b[i] = v.charCodeAt(i);\n\t    }\n\n\t    return b;\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARARRAY = function(v) {\n\t    return v.length;\n\t};\n\n\t/**\n\t * Convert a 16-bit unsigned integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.USHORT = function(v) {\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.USHORT = constant(2);\n\n\t/**\n\t * Convert a 16-bit signed integer to a list of 2 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.SHORT = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT16) {\n\t        v = -(2 * LIMIT16 - v);\n\t    }\n\n\t    return [(v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.SHORT = constant(2);\n\n\t/**\n\t * Convert a 24-bit unsigned integer to a list of 3 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.UINT24 = function(v) {\n\t    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.UINT24 = constant(3);\n\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.ULONG = function(v) {\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.ULONG = constant(4);\n\n\t/**\n\t * Convert a 32-bit unsigned integer to a list of 4 bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONG = function(v) {\n\t    // Two's complement\n\t    if (v >= LIMIT32) {\n\t        v = -(2 * LIMIT32 - v);\n\t    }\n\n\t    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONG = constant(4);\n\n\tencode.FIXED = encode.ULONG;\n\tsizeOf.FIXED = sizeOf.ULONG;\n\n\tencode.FWORD = encode.SHORT;\n\tsizeOf.FWORD = sizeOf.SHORT;\n\n\tencode.UFWORD = encode.USHORT;\n\tsizeOf.UFWORD = sizeOf.USHORT;\n\n\t/**\n\t * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.LONGDATETIME = function(v) {\n\t    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.LONGDATETIME = constant(8);\n\n\t/**\n\t * Convert a 4-char tag to a list of 4 bytes.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.TAG = function(v) {\n\t    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n\t    return [v.charCodeAt(0),\n\t            v.charCodeAt(1),\n\t            v.charCodeAt(2),\n\t            v.charCodeAt(3)];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.TAG = constant(4);\n\n\t// CFF data types ///////////////////////////////////////////////////////////\n\n\tencode.Card8 = encode.BYTE;\n\tsizeOf.Card8 = sizeOf.BYTE;\n\n\tencode.Card16 = encode.USHORT;\n\tsizeOf.Card16 = sizeOf.USHORT;\n\n\tencode.OffSize = encode.BYTE;\n\tsizeOf.OffSize = sizeOf.BYTE;\n\n\tencode.SID = encode.USHORT;\n\tsizeOf.SID = sizeOf.USHORT;\n\n\t// Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t/**\n\t * Convert a numeric operand or charstring number to a variable-size list of bytes.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER = function(v) {\n\t    if (v >= -107 && v <= 107) {\n\t        return [v + 139];\n\t    } else if (v >= 108 && v <= 1131) {\n\t        v = v - 108;\n\t        return [(v >> 8) + 247, v & 0xFF];\n\t    } else if (v >= -1131 && v <= -108) {\n\t        v = -v - 108;\n\t        return [(v >> 8) + 251, v & 0xFF];\n\t    } else if (v >= -32768 && v <= 32767) {\n\t        return encode.NUMBER16(v);\n\t    } else {\n\t        return encode.NUMBER32(v);\n\t    }\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.NUMBER = function(v) {\n\t    return encode.NUMBER(v).length;\n\t};\n\n\t/**\n\t * Convert a signed number between -32768 and +32767 to a three-byte value.\n\t * This ensures we always use three bytes, but is not the most compact format.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER16 = function(v) {\n\t    return [28, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER16 = constant(3);\n\n\t/**\n\t * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.\n\t * This is useful if you want to be sure you always use four bytes,\n\t * at the expense of wasting a few bytes for smaller numbers.\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.NUMBER32 = function(v) {\n\t    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n\t};\n\n\t/**\n\t * @constant\n\t * @type {number}\n\t */\n\tsizeOf.NUMBER32 = constant(5);\n\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.REAL = function(v) {\n\t    var value = v.toString();\n\n\t    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)\n\t    // This code converts it back to a number without the epsilon.\n\t    var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n\t    if (m) {\n\t        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));\n\t        value = (Math.round(v * epsilon) / epsilon).toString();\n\t    }\n\n\t    var nibbles = '';\n\t    for (var i = 0, ii = value.length; i < ii; i += 1) {\n\t        var c = value[i];\n\t        if (c === 'e') {\n\t            nibbles += value[++i] === '-' ? 'c' : 'b';\n\t        } else if (c === '.') {\n\t            nibbles += 'a';\n\t        } else if (c === '-') {\n\t            nibbles += 'e';\n\t        } else {\n\t            nibbles += c;\n\t        }\n\t    }\n\n\t    nibbles += (nibbles.length & 1) ? 'f' : 'ff';\n\t    var out = [30];\n\t    for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {\n\t        out.push(parseInt(nibbles.substr(i$1, 2), 16));\n\t    }\n\n\t    return out;\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {number}\n\t */\n\tsizeOf.REAL = function(v) {\n\t    return encode.REAL(v).length;\n\t};\n\n\tencode.NAME = encode.CHARARRAY;\n\tsizeOf.NAME = sizeOf.CHARARRAY;\n\n\tencode.STRING = encode.CHARARRAY;\n\tsizeOf.STRING = sizeOf.CHARARRAY;\n\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF8 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes;\n\t    for (var j = 0; j < numChars; j++, offset += 1) {\n\t        codePoints[j] = data.getUint8(offset);\n\t    }\n\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\n\t/**\n\t * @param {DataView} data\n\t * @param {number} offset\n\t * @param {number} numBytes\n\t * @returns {string}\n\t */\n\tdecode.UTF16 = function(data, offset, numBytes) {\n\t    var codePoints = [];\n\t    var numChars = numBytes / 2;\n\t    for (var j = 0; j < numChars; j++, offset += 2) {\n\t        codePoints[j] = data.getUint16(offset);\n\t    }\n\n\t    return String.fromCharCode.apply(null, codePoints);\n\t};\n\n\t/**\n\t * Convert a JavaScript string to UTF16-BE.\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.UTF16 = function(v) {\n\t    var b = [];\n\t    for (var i = 0; i < v.length; i += 1) {\n\t        var codepoint = v.charCodeAt(i);\n\t        b[b.length] = (codepoint >> 8) & 0xFF;\n\t        b[b.length] = codepoint & 0xFF;\n\t    }\n\n\t    return b;\n\t};\n\n\t/**\n\t * @param {string}\n\t * @returns {number}\n\t */\n\tsizeOf.UTF16 = function(v) {\n\t    return v.length * 2;\n\t};\n\n\t// Data for converting old eight-bit Macintosh encodings to Unicode.\n\t// This representation is optimized for decoding; encoding is slower\n\t// and needs more memory. The assumption is that all opentype.js users\n\t// want to open fonts, but saving a font will be comparatively rare\n\t// so it can be more expensive. Keyed by IANA character set name.\n\t//\n\t// Python script for generating these strings:\n\t//\n\t//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])\n\t//     print(s.encode('utf-8'))\n\t/**\n\t * @private\n\t */\n\tvar eightBitMacEncodings = {\n\t    'x-mac-croatian':  // Python: 'mac_croatian'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +\n\t    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',\n\t    'x-mac-cyrillic':  // Python: 'mac_cyrillic'\n\t    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +\n\t    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',\n\t    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +\n\t    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',\n\t    'x-mac-greek':  // Python: 'mac_greek'\n\t    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +\n\t    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\u00AD',\n\t    'x-mac-icelandic':  // Python: 'mac_iceland'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT\n\t    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +\n\t    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',\n\t    'x-mac-ce':  // Python: 'mac_latin2'\n\t    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +\n\t    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',\n\t    macintosh:  // Python: 'mac_roman'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-romanian':  // Python: 'mac_romanian'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',\n\t    'x-mac-turkish':  // Python: 'mac_turkish'\n\t    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +\n\t    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'\n\t};\n\n\t/**\n\t * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript\n\t * string, or 'undefined' if the encoding is unsupported. For example, we do\n\t * not support Chinese, Japanese or Korean because these would need large\n\t * mapping tables.\n\t * @param {DataView} dataView\n\t * @param {number} offset\n\t * @param {number} dataLength\n\t * @param {string} encoding\n\t * @returns {string}\n\t */\n\tdecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n\t    var table = eightBitMacEncodings[encoding];\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var result = '';\n\t    for (var i = 0; i < dataLength; i++) {\n\t        var c = dataView.getUint8(offset + i);\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c <= 0x7F) {\n\t            result += String.fromCharCode(c);\n\t        } else {\n\t            result += table[c & 0x7F];\n\t        }\n\t    }\n\n\t    return result;\n\t};\n\n\t// Helper function for encode.MACSTRING. Returns a dictionary for mapping\n\t// Unicode character codes to their 8-bit MacOS equivalent. This table\n\t// is not exactly a super cheap data structure, but we do not care because\n\t// encoding Macintosh strings is only rarely needed in typical applications.\n\tvar macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();\n\tvar macEncodingCacheKeys;\n\tvar getMacEncodingTable = function (encoding) {\n\t    // Since we use encoding as a cache key for WeakMap, it has to be\n\t    // a String object and not a literal. And at least on NodeJS 2.10.1,\n\t    // WeakMap requires that the same String instance is passed for cache hits.\n\t    if (!macEncodingCacheKeys) {\n\t        macEncodingCacheKeys = {};\n\t        for (var e in eightBitMacEncodings) {\n\t            /*jshint -W053 */  // Suppress \"Do not use String as a constructor.\"\n\t            macEncodingCacheKeys[e] = new String(e);\n\t        }\n\t    }\n\n\t    var cacheKey = macEncodingCacheKeys[encoding];\n\t    if (cacheKey === undefined) {\n\t        return undefined;\n\t    }\n\n\t    // We can't do \"if (cache.has(key)) {return cache.get(key)}\" here:\n\t    // since garbage collection may run at any time, it could also kick in\n\t    // between the calls to cache.has() and cache.get(). In that case,\n\t    // we would return 'undefined' even though we do support the encoding.\n\t    if (macEncodingTableCache) {\n\t        var cachedTable = macEncodingTableCache.get(cacheKey);\n\t        if (cachedTable !== undefined) {\n\t            return cachedTable;\n\t        }\n\t    }\n\n\t    var decodingTable = eightBitMacEncodings[encoding];\n\t    if (decodingTable === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var encodingTable = {};\n\t    for (var i = 0; i < decodingTable.length; i++) {\n\t        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;\n\t    }\n\n\t    if (macEncodingTableCache) {\n\t        macEncodingTableCache.set(cacheKey, encodingTable);\n\t    }\n\n\t    return encodingTable;\n\t};\n\n\t/**\n\t * Encodes an old-style Macintosh string. Returns a byte array upon success.\n\t * If the requested encoding is unsupported, or if the input string contains\n\t * a character that cannot be expressed in the encoding, the function returns\n\t * 'undefined'.\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {Array}\n\t */\n\tencode.MACSTRING = function(str, encoding) {\n\t    var table = getMacEncodingTable(encoding);\n\t    if (table === undefined) {\n\t        return undefined;\n\t    }\n\n\t    var result = [];\n\t    for (var i = 0; i < str.length; i++) {\n\t        var c = str.charCodeAt(i);\n\n\t        // In all eight-bit Mac encodings, the characters 0x00..0x7F are\n\t        // mapped to U+0000..U+007F; we only need to look up the others.\n\t        if (c >= 0x80) {\n\t            c = table[c];\n\t            if (c === undefined) {\n\t                // str contains a Unicode character that cannot be encoded\n\t                // in the requested encoding.\n\t                return undefined;\n\t            }\n\t        }\n\t        result[i] = c;\n\t        // result.push(c);\n\t    }\n\n\t    return result;\n\t};\n\n\t/**\n\t * @param {string} str\n\t * @param {string} encoding\n\t * @returns {number}\n\t */\n\tsizeOf.MACSTRING = function(str, encoding) {\n\t    var b = encode.MACSTRING(str, encoding);\n\t    if (b !== undefined) {\n\t        return b.length;\n\t    } else {\n\t        return 0;\n\t    }\n\t};\n\n\t// Helper for encode.VARDELTAS\n\tfunction isByteEncodable(value) {\n\t    return value >= -128 && value <= 127;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsZeroes(deltas, pos, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(0x80 | (runLength - 1));\n\t    return pos;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsBytes(deltas, offset, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    var pos = offset;\n\t    while (pos < numDeltas && runLength < 64) {\n\t        var value = deltas[pos];\n\t        if (!isByteEncodable(value)) {\n\t            break;\n\t        }\n\n\t        // Within a byte-encoded run of deltas, a single zero is best\n\t        // stored literally as 0x00 value. However, if we have two or\n\t        // more zeroes in a sequence, it is better to start a new run.\n\t        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]\n\t        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero\n\t        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)\n\t        // when starting a new run.\n\t        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {\n\t            break;\n\t        }\n\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(runLength - 1);\n\t    for (var i = offset; i < pos; ++i) {\n\t        result.push((deltas[i] + 256) & 0xff);\n\t    }\n\t    return pos;\n\t}\n\n\t// Helper for encode.VARDELTAS\n\tfunction encodeVarDeltaRunAsWords(deltas, offset, result) {\n\t    var runLength = 0;\n\t    var numDeltas = deltas.length;\n\t    var pos = offset;\n\t    while (pos < numDeltas && runLength < 64) {\n\t        var value = deltas[pos];\n\n\t        // Within a word-encoded run of deltas, it is easiest to start\n\t        // a new run (with a different encoding) whenever we encounter\n\t        // a zero value. For example, the sequence [0x6666, 0, 0x7777]\n\t        // needs 7 bytes when storing the zero inside the current run\n\t        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a\n\t        // new run (40 66 66 80 40 77 77).\n\t        if (value === 0) {\n\t            break;\n\t        }\n\n\t        // Within a word-encoded run of deltas, a single value in the\n\t        // range (-128..127) should be encoded within the current run\n\t        // because it is more compact. For example, the sequence\n\t        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value\n\t        // literally (42 66 66 00 02 77 77), but 8 bytes when starting\n\t        // a new run (40 66 66 00 02 40 77 77).\n\t        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {\n\t            break;\n\t        }\n\n\t        ++pos;\n\t        ++runLength;\n\t    }\n\t    result.push(0x40 | (runLength - 1));\n\t    for (var i = offset; i < pos; ++i) {\n\t        var val = deltas[i];\n\t        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);\n\t    }\n\t    return pos;\n\t}\n\n\t/**\n\t * Encode a list of variation adjustment deltas.\n\t *\n\t * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.\n\t * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted\n\t * when generating instances of variation fonts.\n\t *\n\t * @see https://www.microsoft.com/typography/otspec/gvar.htm\n\t * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html\n\t * @param {Array}\n\t * @return {Array}\n\t */\n\tencode.VARDELTAS = function(deltas) {\n\t    var pos = 0;\n\t    var result = [];\n\t    while (pos < deltas.length) {\n\t        var value = deltas[pos];\n\t        if (value === 0) {\n\t            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);\n\t        } else if (value >= -128 && value <= 127) {\n\t            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);\n\t        } else {\n\t            pos = encodeVarDeltaRunAsWords(deltas, pos, result);\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\t// Convert a list of values to a CFF INDEX structure.\n\t// The values should be objects containing name / type / value.\n\t/**\n\t * @param {Array} l\n\t * @returns {Array}\n\t */\n\tencode.INDEX = function(l) {\n\t    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n\t    //    i, v;\n\t    // Because we have to know which data type to use to encode the offsets,\n\t    // we have to go through the values twice: once to encode the data and\n\t    // calculate the offsets, then again to encode the offsets using the fitting data type.\n\t    var offset = 1; // First offset is always 1.\n\t    var offsets = [offset];\n\t    var data = [];\n\t    for (var i = 0; i < l.length; i += 1) {\n\t        var v = encode.OBJECT(l[i]);\n\t        Array.prototype.push.apply(data, v);\n\t        offset += v.length;\n\t        offsets.push(offset);\n\t    }\n\n\t    if (data.length === 0) {\n\t        return [0, 0];\n\t    }\n\n\t    var encodedOffsets = [];\n\t    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;\n\t    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n\t    for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {\n\t        var encodedOffset = offsetEncoder(offsets[i$1]);\n\t        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n\t    }\n\n\t    return Array.prototype.concat(encode.Card16(l.length),\n\t                           encode.OffSize(offSize),\n\t                           encodedOffsets,\n\t                           data);\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.INDEX = function(v) {\n\t    return encode.INDEX(v).length;\n\t};\n\n\t/**\n\t * Convert an object to a CFF DICT structure.\n\t * The keys should be numeric.\n\t * The values should be objects containing name / type / value.\n\t * @param {Object} m\n\t * @returns {Array}\n\t */\n\tencode.DICT = function(m) {\n\t    var d = [];\n\t    var keys = Object.keys(m);\n\t    var length = keys.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        // Object.keys() return string keys, but our keys are always numeric.\n\t        var k = parseInt(keys[i], 0);\n\t        var v = m[k];\n\t        // Value comes before the key.\n\t        d = d.concat(encode.OPERAND(v.value, v.type));\n\t        d = d.concat(encode.OPERATOR(k));\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.DICT = function(m) {\n\t    return encode.DICT(m).length;\n\t};\n\n\t/**\n\t * @param {number}\n\t * @returns {Array}\n\t */\n\tencode.OPERATOR = function(v) {\n\t    if (v < 1200) {\n\t        return [v];\n\t    } else {\n\t        return [12, v - 1200];\n\t    }\n\t};\n\n\t/**\n\t * @param {Array} v\n\t * @param {string}\n\t * @returns {Array}\n\t */\n\tencode.OPERAND = function(v, type) {\n\t    var d = [];\n\t    if (Array.isArray(type)) {\n\t        for (var i = 0; i < type.length; i += 1) {\n\t            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n\t            d = d.concat(encode.OPERAND(v[i], type[i]));\n\t        }\n\t    } else {\n\t        if (type === 'SID') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'offset') {\n\t            // We make it easy for ourselves and always encode offsets as\n\t            // 4 bytes. This makes offset calculation for the top dict easier.\n\t            d = d.concat(encode.NUMBER32(v));\n\t        } else if (type === 'number') {\n\t            d = d.concat(encode.NUMBER(v));\n\t        } else if (type === 'real') {\n\t            d = d.concat(encode.REAL(v));\n\t        } else {\n\t            throw new Error('Unknown operand type ' + type);\n\t            // FIXME Add support for booleans\n\t        }\n\t    }\n\n\t    return d;\n\t};\n\n\tencode.OP = encode.BYTE;\n\tsizeOf.OP = sizeOf.BYTE;\n\n\t// memoize charstring encoding using WeakMap if available\n\tvar wmm = typeof WeakMap === 'function' && new WeakMap();\n\n\t/**\n\t * Convert a list of CharString operations to bytes.\n\t * @param {Array}\n\t * @returns {Array}\n\t */\n\tencode.CHARSTRING = function(ops) {\n\t    // See encode.MACSTRING for why we don't do \"if (wmm && wmm.has(ops))\".\n\t    if (wmm) {\n\t        var cachedValue = wmm.get(ops);\n\t        if (cachedValue !== undefined) {\n\t            return cachedValue;\n\t        }\n\t    }\n\n\t    var d = [];\n\t    var length = ops.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var op = ops[i];\n\t        d = d.concat(encode[op.type](op.value));\n\t    }\n\n\t    if (wmm) {\n\t        wmm.set(ops, d);\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {Array}\n\t * @returns {number}\n\t */\n\tsizeOf.CHARSTRING = function(ops) {\n\t    return encode.CHARSTRING(ops).length;\n\t};\n\n\t// Utility functions ////////////////////////////////////////////////////////\n\n\t/**\n\t * Convert an object containing name / type / value to bytes.\n\t * @param {Object}\n\t * @returns {Array}\n\t */\n\tencode.OBJECT = function(v) {\n\t    var encodingFunction = encode[v.type];\n\t    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n\t    return encodingFunction(v.value);\n\t};\n\n\t/**\n\t * @param {Object}\n\t * @returns {number}\n\t */\n\tsizeOf.OBJECT = function(v) {\n\t    var sizeOfFunction = sizeOf[v.type];\n\t    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);\n\t    return sizeOfFunction(v.value);\n\t};\n\n\t/**\n\t * Convert a table object to bytes.\n\t * A table contains a list of fields containing the metadata (name, type and default value).\n\t * The table itself has the field values set as attributes.\n\t * @param {opentype.Table}\n\t * @returns {Array}\n\t */\n\tencode.TABLE = function(table) {\n\t    var d = [];\n\t    var length = table.fields.length;\n\t    var subtables = [];\n\t    var subtableOffsets = [];\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var encodingFunction = encode[field.type];\n\t        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\n\t        var bytes = encodingFunction(value);\n\n\t        if (field.type === 'TABLE') {\n\t            subtableOffsets.push(d.length);\n\t            d = d.concat([0, 0]);\n\t            subtables.push(bytes);\n\t        } else {\n\t            d = d.concat(bytes);\n\t        }\n\t    }\n\n\t    for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {\n\t        var o = subtableOffsets[i$1];\n\t        var offset = d.length;\n\t        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');\n\t        d[o] = offset >> 8;\n\t        d[o + 1] = offset & 0xff;\n\t        d = d.concat(subtables[i$1]);\n\t    }\n\n\t    return d;\n\t};\n\n\t/**\n\t * @param {opentype.Table}\n\t * @returns {number}\n\t */\n\tsizeOf.TABLE = function(table) {\n\t    var numBytes = 0;\n\t    var length = table.fields.length;\n\n\t    for (var i = 0; i < length; i += 1) {\n\t        var field = table.fields[i];\n\t        var sizeOfFunction = sizeOf[field.type];\n\t        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');\n\t        var value = table[field.name];\n\t        if (value === undefined) {\n\t            value = field.value;\n\t        }\n\n\t        numBytes += sizeOfFunction(value);\n\n\t        // Subtables take 2 more bytes for offsets.\n\t        if (field.type === 'TABLE') {\n\t            numBytes += 2;\n\t        }\n\t    }\n\n\t    return numBytes;\n\t};\n\n\tencode.RECORD = encode.TABLE;\n\tsizeOf.RECORD = sizeOf.TABLE;\n\n\t// Merge in a list of bytes.\n\tencode.LITERAL = function(v) {\n\t    return v;\n\t};\n\n\tsizeOf.LITERAL = function(v) {\n\t    return v.length;\n\t};\n\n\t// Table metadata\n\n\t/**\n\t * @exports opentype.Table\n\t * @class\n\t * @param {string} tableName\n\t * @param {Array} fields\n\t * @param {Object} options\n\t * @constructor\n\t */\n\tfunction Table(tableName, fields, options) {\n\t    var this$1 = this;\n\n\t    for (var i = 0; i < fields.length; i += 1) {\n\t        var field = fields[i];\n\t        this$1[field.name] = field.value;\n\t    }\n\n\t    this.tableName = tableName;\n\t    this.fields = fields;\n\t    if (options) {\n\t        var optionKeys = Object.keys(options);\n\t        for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {\n\t            var k = optionKeys[i$1];\n\t            var v = options[k];\n\t            if (this$1[k] !== undefined) {\n\t                this$1[k] = v;\n\t            }\n\t        }\n\t    }\n\t}\n\n\t/**\n\t * Encodes the table and returns an array of bytes\n\t * @return {Array}\n\t */\n\tTable.prototype.encode = function() {\n\t    return encode.TABLE(this);\n\t};\n\n\t/**\n\t * Get the size of the table.\n\t * @return {number}\n\t */\n\tTable.prototype.sizeOf = function() {\n\t    return sizeOf.TABLE(this);\n\t};\n\n\t/**\n\t * @private\n\t */\n\tfunction ushortList(itemName, list, count) {\n\t    if (count === undefined) {\n\t        count = list.length;\n\t    }\n\t    var fields = new Array(list.length + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < list.length; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};\n\t    }\n\t    return fields;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tfunction tableList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = new Array(count + 1);\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};\n\t    }\n\t    return fields;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tfunction recordList(itemName, records, itemCallback) {\n\t    var count = records.length;\n\t    var fields = [];\n\t    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};\n\t    for (var i = 0; i < count; i++) {\n\t        fields = fields.concat(itemCallback(records[i], i));\n\t    }\n\t    return fields;\n\t}\n\n\t// Common Layout Tables\n\n\t/**\n\t * @exports opentype.Coverage\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction Coverage(coverageTable) {\n\t    if (coverageTable.format === 1) {\n\t        Table.call(this, 'coverageTable',\n\t            [{name: 'coverageFormat', type: 'USHORT', value: 1}]\n\t            .concat(ushortList('glyph', coverageTable.glyphs))\n\t        );\n\t    } else {\n\t        check.assert(false, 'Can\\'t create coverage table format 2 yet.');\n\t    }\n\t}\n\tCoverage.prototype = Object.create(Table.prototype);\n\tCoverage.prototype.constructor = Coverage;\n\n\tfunction ScriptList(scriptListTable) {\n\t    Table.call(this, 'scriptListTable',\n\t        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {\n\t            var script = scriptRecord.script;\n\t            var defaultLangSys = script.defaultLangSys;\n\t            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');\n\t            return [\n\t                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},\n\t                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [\n\t                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [\n\t                        {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]\n\t                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}\n\t                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {\n\t                        var langSys = langSysRecord.langSys;\n\t                        return [\n\t                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},\n\t                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [\n\t                                {name: 'lookupOrder', type: 'USHORT', value: 0},\n\t                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}\n\t                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}\n\t                        ];\n\t                    })))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tScriptList.prototype = Object.create(Table.prototype);\n\tScriptList.prototype.constructor = ScriptList;\n\n\t/**\n\t * @exports opentype.FeatureList\n\t * @class\n\t * @param {opentype.Table}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction FeatureList(featureListTable) {\n\t    Table.call(this, 'featureListTable',\n\t        recordList('featureRecord', featureListTable, function(featureRecord, i) {\n\t            var feature = featureRecord.feature;\n\t            return [\n\t                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},\n\t                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [\n\t                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}\n\t            ];\n\t        })\n\t    );\n\t}\n\tFeatureList.prototype = Object.create(Table.prototype);\n\tFeatureList.prototype.constructor = FeatureList;\n\n\t/**\n\t * @exports opentype.LookupList\n\t * @class\n\t * @param {opentype.Table}\n\t * @param {Object}\n\t * @constructor\n\t * @extends opentype.Table\n\t */\n\tfunction LookupList(lookupListTable, subtableMakers) {\n\t    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {\n\t        var subtableCallback = subtableMakers[lookupTable.lookupType];\n\t        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');\n\t        return new Table('lookupTable', [\n\t            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},\n\t            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}\n\t        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));\n\t    }));\n\t}\n\tLookupList.prototype = Object.create(Table.prototype);\n\tLookupList.prototype.constructor = LookupList;\n\n\t// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)\n\t// Don't use offsets inside Records (probable bug), only in Tables.\n\tvar table = {\n\t    Table: Table,\n\t    Record: Table,\n\t    Coverage: Coverage,\n\t    ScriptList: ScriptList,\n\t    FeatureList: FeatureList,\n\t    LookupList: LookupList,\n\t    ushortList: ushortList,\n\t    tableList: tableList,\n\t    recordList: recordList,\n\t};\n\n\t// Parsing utility functions\n\n\t// Retrieve an unsigned byte from the DataView.\n\tfunction getByte(dataView, offset) {\n\t    return dataView.getUint8(offset);\n\t}\n\n\t// Retrieve an unsigned 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\tfunction getUShort(dataView, offset) {\n\t    return dataView.getUint16(offset, false);\n\t}\n\n\t// Retrieve a signed 16-bit short from the DataView.\n\t// The value is stored in big endian.\n\tfunction getShort(dataView, offset) {\n\t    return dataView.getInt16(offset, false);\n\t}\n\n\t// Retrieve an unsigned 32-bit long from the DataView.\n\t// The value is stored in big endian.\n\tfunction getULong(dataView, offset) {\n\t    return dataView.getUint32(offset, false);\n\t}\n\n\t// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n\t// The value is stored in big endian.\n\tfunction getFixed(dataView, offset) {\n\t    var decimal = dataView.getInt16(offset, false);\n\t    var fraction = dataView.getUint16(offset + 2, false);\n\t    return decimal + fraction / 65535;\n\t}\n\n\t// Retrieve a 4-character tag from the DataView.\n\t// Tags are used to identify tables.\n\tfunction getTag(dataView, offset) {\n\t    var tag = '';\n\t    for (var i = offset; i < offset + 4; i += 1) {\n\t        tag += String.fromCharCode(dataView.getInt8(i));\n\t    }\n\n\t    return tag;\n\t}\n\n\t// Retrieve an offset from the DataView.\n\t// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\n\tfunction getOffset(dataView, offset, offSize) {\n\t    var v = 0;\n\t    for (var i = 0; i < offSize; i += 1) {\n\t        v <<= 8;\n\t        v += dataView.getUint8(offset + i);\n\t    }\n\n\t    return v;\n\t}\n\n\t// Retrieve a number of bytes from start offset to the end offset from the DataView.\n\tfunction getBytes(dataView, startOffset, endOffset) {\n\t    var bytes = [];\n\t    for (var i = startOffset; i < endOffset; i += 1) {\n\t        bytes.push(dataView.getUint8(i));\n\t    }\n\n\t    return bytes;\n\t}\n\n\t// Convert the list of bytes to a string.\n\tfunction bytesToString(bytes) {\n\t    var s = '';\n\t    for (var i = 0; i < bytes.length; i += 1) {\n\t        s += String.fromCharCode(bytes[i]);\n\t    }\n\n\t    return s;\n\t}\n\n\tvar typeOffsets = {\n\t    byte: 1,\n\t    uShort: 2,\n\t    short: 2,\n\t    uLong: 4,\n\t    fixed: 4,\n\t    longDateTime: 8,\n\t    tag: 4\n\t};\n\n\t// A stateful parser that changes the offset whenever a value is retrieved.\n\t// The data is a DataView.\n\tfunction Parser(data, offset) {\n\t    this.data = data;\n\t    this.offset = offset;\n\t    this.relativeOffset = 0;\n\t}\n\n\tParser.prototype.parseByte = function() {\n\t    var v = this.data.getUint8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\n\tParser.prototype.parseChar = function() {\n\t    var v = this.data.getInt8(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 1;\n\t    return v;\n\t};\n\n\tParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\n\tParser.prototype.parseUShort = function() {\n\t    var v = this.data.getUint16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseCard16 = Parser.prototype.parseUShort;\n\tParser.prototype.parseSID = Parser.prototype.parseUShort;\n\tParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\n\tParser.prototype.parseShort = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset);\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseF2Dot14 = function() {\n\t    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n\t    this.relativeOffset += 2;\n\t    return v;\n\t};\n\n\tParser.prototype.parseULong = function() {\n\t    var v = getULong(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\n\tParser.prototype.parseOffset32 = Parser.prototype.parseULong;\n\n\tParser.prototype.parseFixed = function() {\n\t    var v = getFixed(this.data, this.offset + this.relativeOffset);\n\t    this.relativeOffset += 4;\n\t    return v;\n\t};\n\n\tParser.prototype.parseString = function(length) {\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    var string = '';\n\t    this.relativeOffset += length;\n\t    for (var i = 0; i < length; i++) {\n\t        string += String.fromCharCode(dataView.getUint8(offset + i));\n\t    }\n\n\t    return string;\n\t};\n\n\tParser.prototype.parseTag = function() {\n\t    return this.parseString(4);\n\t};\n\n\t// LONGDATETIME is a 64-bit integer.\n\t// JavaScript and unix timestamps traditionally use 32 bits, so we\n\t// only take the last 32 bits.\n\t// + Since until 2038 those bits will be filled by zeros we can ignore them.\n\tParser.prototype.parseLongDateTime = function() {\n\t    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n\t    // Subtract seconds between 01/01/1904 and 01/01/1970\n\t    // to convert Apple Mac timestamp to Standard Unix timestamp\n\t    v -= 2082844800;\n\t    this.relativeOffset += 8;\n\t    return v;\n\t};\n\n\tParser.prototype.parseVersion = function(minorBase) {\n\t    var major = getUShort(this.data, this.offset + this.relativeOffset);\n\n\t    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n\t    // Default returns the correct number if minor = 0xN000 where N is 0-9\n\t    // Set minorBase to 1 for tables that use minor = N where N is 0-9\n\t    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n\t    this.relativeOffset += 4;\n\t    if (minorBase === undefined) { minorBase = 0x1000; }\n\t    return major + minor / minorBase / 10;\n\t};\n\n\tParser.prototype.skip = function(type, amount) {\n\t    if (amount === undefined) {\n\t        amount = 1;\n\t    }\n\n\t    this.relativeOffset += typeOffsets[type] * amount;\n\t};\n\n\t///// Parsing lists and records ///////////////////////////////\n\n\t// Parse a list of 32 bit unsigned integers.\n\tParser.prototype.parseULongList = function(count) {\n\t    if (count === undefined) { count = this.parseULong(); }\n\t    var offsets = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        offsets[i] = dataView.getUint32(offset);\n\t        offset += 4;\n\t    }\n\n\t    this.relativeOffset += count * 4;\n\t    return offsets;\n\t};\n\n\t// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream\n\t// or provided as an argument.\n\tParser.prototype.parseOffset16List =\n\tParser.prototype.parseUShortList = function(count) {\n\t    if (count === undefined) { count = this.parseUShort(); }\n\t    var offsets = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        offsets[i] = dataView.getUint16(offset);\n\t        offset += 2;\n\t    }\n\n\t    this.relativeOffset += count * 2;\n\t    return offsets;\n\t};\n\n\t// Parses a list of 16 bit signed integers.\n\tParser.prototype.parseShortList = function(count) {\n\t    var list = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = dataView.getInt16(offset);\n\t        offset += 2;\n\t    }\n\n\t    this.relativeOffset += count * 2;\n\t    return list;\n\t};\n\n\t// Parses a list of bytes.\n\tParser.prototype.parseByteList = function(count) {\n\t    var list = new Array(count);\n\t    var dataView = this.data;\n\t    var offset = this.offset + this.relativeOffset;\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = dataView.getUint8(offset++);\n\t    }\n\n\t    this.relativeOffset += count;\n\t    return list;\n\t};\n\n\t/**\n\t * Parse a list of items.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * itemCallback is one of the Parser methods.\n\t */\n\tParser.prototype.parseList = function(count, itemCallback) {\n\t    var this$1 = this;\n\n\t    if (!itemCallback) {\n\t        itemCallback = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = itemCallback.call(this$1);\n\t    }\n\t    return list;\n\t};\n\n\tParser.prototype.parseList32 = function(count, itemCallback) {\n\t    var this$1 = this;\n\n\t    if (!itemCallback) {\n\t        itemCallback = count;\n\t        count = this.parseULong();\n\t    }\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        list[i] = itemCallback.call(this$1);\n\t    }\n\t    return list;\n\t};\n\n\t/**\n\t * Parse a list of records.\n\t * Record count is optional, if omitted it is read from the stream.\n\t * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\t */\n\tParser.prototype.parseRecordList = function(count, recordDescription) {\n\t    var this$1 = this;\n\n\t    // If the count argument is absent, read it in the stream.\n\t    if (!recordDescription) {\n\t        recordDescription = count;\n\t        count = this.parseUShort();\n\t    }\n\t    var records = new Array(count);\n\t    var fields = Object.keys(recordDescription);\n\t    for (var i = 0; i < count; i++) {\n\t        var rec = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = recordDescription[fieldName];\n\t            rec[fieldName] = fieldType.call(this$1);\n\t        }\n\t        records[i] = rec;\n\t    }\n\t    return records;\n\t};\n\n\tParser.prototype.parseRecordList32 = function(count, recordDescription) {\n\t    var this$1 = this;\n\n\t    // If the count argument is absent, read it in the stream.\n\t    if (!recordDescription) {\n\t        recordDescription = count;\n\t        count = this.parseULong();\n\t    }\n\t    var records = new Array(count);\n\t    var fields = Object.keys(recordDescription);\n\t    for (var i = 0; i < count; i++) {\n\t        var rec = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = recordDescription[fieldName];\n\t            rec[fieldName] = fieldType.call(this$1);\n\t        }\n\t        records[i] = rec;\n\t    }\n\t    return records;\n\t};\n\n\t// Parse a data structure into an object\n\t// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }\n\tParser.prototype.parseStruct = function(description) {\n\t    var this$1 = this;\n\n\t    if (typeof description === 'function') {\n\t        return description.call(this);\n\t    } else {\n\t        var fields = Object.keys(description);\n\t        var struct = {};\n\t        for (var j = 0; j < fields.length; j++) {\n\t            var fieldName = fields[j];\n\t            var fieldType = description[fieldName];\n\t            struct[fieldName] = fieldType.call(this$1);\n\t        }\n\t        return struct;\n\t    }\n\t};\n\n\t/**\n\t * Parse a GPOS valueRecord\n\t * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n\t * valueFormat is optional, if omitted it is read from the stream.\n\t */\n\tParser.prototype.parseValueRecord = function(valueFormat) {\n\t    if (valueFormat === undefined) {\n\t        valueFormat = this.parseUShort();\n\t    }\n\t    if (valueFormat === 0) {\n\t        // valueFormat2 in kerning pairs is most often 0\n\t        // in this case return undefined instead of an empty object, to save space\n\t        return;\n\t    }\n\t    var valueRecord = {};\n\n\t    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }\n\t    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }\n\t    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }\n\t    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }\n\n\t    // Device table (non-variable font) / VariationIndex table (variable font) not supported\n\t    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls\n\t    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }\n\t    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }\n\n\t    return valueRecord;\n\t};\n\n\t/**\n\t * Parse a list of GPOS valueRecords\n\t * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record\n\t * valueFormat and valueCount are read from the stream.\n\t */\n\tParser.prototype.parseValueRecordList = function() {\n\t    var this$1 = this;\n\n\t    var valueFormat = this.parseUShort();\n\t    var valueCount = this.parseUShort();\n\t    var values = new Array(valueCount);\n\t    for (var i = 0; i < valueCount; i++) {\n\t        values[i] = this$1.parseValueRecord(valueFormat);\n\t    }\n\t    return values;\n\t};\n\n\tParser.prototype.parsePointer = function(description) {\n\t    var structOffset = this.parseOffset16();\n\t    if (structOffset > 0) {\n\t        // NULL offset => return undefined\n\t        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n\t    }\n\t    return undefined;\n\t};\n\n\tParser.prototype.parsePointer32 = function(description) {\n\t    var structOffset = this.parseOffset32();\n\t    if (structOffset > 0) {\n\t        // NULL offset => return undefined\n\t        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n\t    }\n\t    return undefined;\n\t};\n\n\t/**\n\t * Parse a list of offsets to lists of 16-bit integers,\n\t * or a list of offsets to lists of offsets to any kind of items.\n\t * If itemCallback is not provided, a list of list of UShort is assumed.\n\t * If provided, itemCallback is called on each item and must parse the item.\n\t * See examples in tables/gsub.js\n\t */\n\tParser.prototype.parseListOfLists = function(itemCallback) {\n\t    var this$1 = this;\n\n\t    var offsets = this.parseOffset16List();\n\t    var count = offsets.length;\n\t    var relativeOffset = this.relativeOffset;\n\t    var list = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        var start = offsets[i];\n\t        if (start === 0) {\n\t            // NULL offset\n\t            // Add i as owned property to list. Convenient with assert.\n\t            list[i] = undefined;\n\t            continue;\n\t        }\n\t        this$1.relativeOffset = start;\n\t        if (itemCallback) {\n\t            var subOffsets = this$1.parseOffset16List();\n\t            var subList = new Array(subOffsets.length);\n\t            for (var j = 0; j < subOffsets.length; j++) {\n\t                this$1.relativeOffset = start + subOffsets[j];\n\t                subList[j] = itemCallback.call(this$1);\n\t            }\n\t            list[i] = subList;\n\t        } else {\n\t            list[i] = this$1.parseUShortList();\n\t        }\n\t    }\n\t    this.relativeOffset = relativeOffset;\n\t    return list;\n\t};\n\n\t///// Complex tables parsing //////////////////////////////////\n\n\t// Parse a coverage table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\t// parser.offset must point to the start of the table containing the coverage.\n\tParser.prototype.parseCoverage = function() {\n\t    var this$1 = this;\n\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    var count = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            glyphs: this.parseUShortList(count)\n\t        };\n\t    } else if (format === 2) {\n\t        var ranges = new Array(count);\n\t        for (var i = 0; i < count; i++) {\n\t            ranges[i] = {\n\t                start: this$1.parseUShort(),\n\t                end: this$1.parseUShort(),\n\t                index: this$1.parseUShort()\n\t            };\n\t        }\n\t        return {\n\t            format: 2,\n\t            ranges: ranges\n\t        };\n\t    }\n\t    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');\n\t};\n\n\t// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\tParser.prototype.parseClassDef = function() {\n\t    var startOffset = this.offset + this.relativeOffset;\n\t    var format = this.parseUShort();\n\t    if (format === 1) {\n\t        return {\n\t            format: 1,\n\t            startGlyph: this.parseUShort(),\n\t            classes: this.parseUShortList()\n\t        };\n\t    } else if (format === 2) {\n\t        return {\n\t            format: 2,\n\t            ranges: this.parseRecordList({\n\t                start: Parser.uShort,\n\t                end: Parser.uShort,\n\t                classId: Parser.uShort\n\t            })\n\t        };\n\t    }\n\t    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');\n\t};\n\n\t///// Static methods ///////////////////////////////////\n\t// These convenience methods can be used as callbacks and should be called with \"this\" context set to a Parser instance.\n\n\tParser.list = function(count, itemCallback) {\n\t    return function() {\n\t        return this.parseList(count, itemCallback);\n\t    };\n\t};\n\n\tParser.list32 = function(count, itemCallback) {\n\t    return function() {\n\t        return this.parseList32(count, itemCallback);\n\t    };\n\t};\n\n\tParser.recordList = function(count, recordDescription) {\n\t    return function() {\n\t        return this.parseRecordList(count, recordDescription);\n\t    };\n\t};\n\n\tParser.recordList32 = function(count, recordDescription) {\n\t    return function() {\n\t        return this.parseRecordList32(count, recordDescription);\n\t    };\n\t};\n\n\tParser.pointer = function(description) {\n\t    return function() {\n\t        return this.parsePointer(description);\n\t    };\n\t};\n\n\tParser.pointer32 = function(description) {\n\t    return function() {\n\t        return this.parsePointer32(description);\n\t    };\n\t};\n\n\tParser.tag = Parser.prototype.parseTag;\n\tParser.byte = Parser.prototype.parseByte;\n\tParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\n\tParser.uShortList = Parser.prototype.parseUShortList;\n\tParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\n\tParser.uLongList = Parser.prototype.parseULongList;\n\tParser.struct = Parser.prototype.parseStruct;\n\tParser.coverage = Parser.prototype.parseCoverage;\n\tParser.classDef = Parser.prototype.parseClassDef;\n\n\t///// Script, Feature, Lookup lists ///////////////////////////////////////////////\n\t// https://www.microsoft.com/typography/OTSPEC/chapter2.htm\n\n\tvar langSysTable = {\n\t    reserved: Parser.uShort,\n\t    reqFeatureIndex: Parser.uShort,\n\t    featureIndexes: Parser.uShortList\n\t};\n\n\tParser.prototype.parseScriptList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        script: Parser.pointer({\n\t            defaultLangSys: Parser.pointer(langSysTable),\n\t            langSysRecords: Parser.recordList({\n\t                tag: Parser.tag,\n\t                langSys: Parser.pointer(langSysTable)\n\t            })\n\t        })\n\t    })) || [];\n\t};\n\n\tParser.prototype.parseFeatureList = function() {\n\t    return this.parsePointer(Parser.recordList({\n\t        tag: Parser.tag,\n\t        feature: Parser.pointer({\n\t            featureParams: Parser.offset16,\n\t            lookupListIndexes: Parser.uShortList\n\t        })\n\t    })) || [];\n\t};\n\n\tParser.prototype.parseLookupList = function(lookupTableParsers) {\n\t    return this.parsePointer(Parser.list(Parser.pointer(function() {\n\t        var lookupType = this.parseUShort();\n\t        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');\n\t        var lookupFlag = this.parseUShort();\n\t        var useMarkFilteringSet = lookupFlag & 0x10;\n\t        return {\n\t            lookupType: lookupType,\n\t            lookupFlag: lookupFlag,\n\t            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n\t            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined\n\t        };\n\t    }))) || [];\n\t};\n\n\tParser.prototype.parseFeatureVariationsList = function() {\n\t    return this.parsePointer32(function() {\n\t        var majorVersion = this.parseUShort();\n\t        var minorVersion = this.parseUShort();\n\t        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');\n\t        var featureVariations = this.parseRecordList32({\n\t            conditionSetOffset: Parser.offset32,\n\t            featureTableSubstitutionOffset: Parser.offset32\n\t        });\n\t        return featureVariations;\n\t    }) || [];\n\t};\n\n\tvar parse = {\n\t    getByte: getByte,\n\t    getCard8: getByte,\n\t    getUShort: getUShort,\n\t    getCard16: getUShort,\n\t    getShort: getShort,\n\t    getULong: getULong,\n\t    getFixed: getFixed,\n\t    getTag: getTag,\n\t    getOffset: getOffset,\n\t    getBytes: getBytes,\n\t    bytesToString: bytesToString,\n\t    Parser: Parser,\n\t};\n\n\t// The `cmap` table stores the mappings from characters to glyphs.\n\n\tfunction parseCmapTableFormat12(cmap, p) {\n\t    //Skip reserved.\n\t    p.parseUShort();\n\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseULong();\n\t    cmap.language = p.parseULong();\n\n\t    var groupCount;\n\t    cmap.groupCount = groupCount = p.parseULong();\n\t    cmap.glyphIndexMap = {};\n\n\t    for (var i = 0; i < groupCount; i += 1) {\n\t        var startCharCode = p.parseULong();\n\t        var endCharCode = p.parseULong();\n\t        var startGlyphId = p.parseULong();\n\n\t        for (var c = startCharCode; c <= endCharCode; c += 1) {\n\t            cmap.glyphIndexMap[c] = startGlyphId;\n\t            startGlyphId++;\n\t        }\n\t    }\n\t}\n\n\tfunction parseCmapTableFormat4(cmap, p, data, start, offset) {\n\t    // Length in bytes of the sub-tables.\n\t    cmap.length = p.parseUShort();\n\t    cmap.language = p.parseUShort();\n\n\t    // segCount is stored x 2.\n\t    var segCount;\n\t    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\n\t    // The \"unrolled\" mapping from character codes to glyph indices.\n\t    cmap.glyphIndexMap = {};\n\t    var endCountParser = new parse.Parser(data, start + offset + 14);\n\t    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n\t    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n\t    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n\t    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n\t    for (var i = 0; i < segCount - 1; i += 1) {\n\t        var glyphIndex = (void 0);\n\t        var endCount = endCountParser.parseUShort();\n\t        var startCount = startCountParser.parseUShort();\n\t        var idDelta = idDeltaParser.parseShort();\n\t        var idRangeOffset = idRangeOffsetParser.parseUShort();\n\t        for (var c = startCount; c <= endCount; c += 1) {\n\t            if (idRangeOffset !== 0) {\n\t                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n\t                // Take the current offset in the idRangeOffset array.\n\t                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n\t                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n\t                glyphIndexOffset += idRangeOffset;\n\n\t                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n\t                glyphIndexOffset += (c - startCount) * 2;\n\t                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n\t                if (glyphIndex !== 0) {\n\t                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n\t                }\n\t            } else {\n\t                glyphIndex = (c + idDelta) & 0xFFFF;\n\t            }\n\n\t            cmap.glyphIndexMap[c] = glyphIndex;\n\t        }\n\t    }\n\t}\n\n\t// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n\t// There are many available formats, but we only support the Windows format 4 and 12.\n\t// This function returns a `CmapEncoding` object or null if no supported format could be found.\n\tfunction parseCmapTable(data, start) {\n\t    var cmap = {};\n\t    cmap.version = parse.getUShort(data, start);\n\t    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n\t    // The cmap table can contain many sub-tables, each with their own format.\n\t    // We're only interested in a \"platform 0\" (Unicode format) and \"platform 3\" (Windows format) table.\n\t    cmap.numTables = parse.getUShort(data, start + 2);\n\t    var offset = -1;\n\t    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {\n\t        var platformId = parse.getUShort(data, start + 4 + (i * 8));\n\t        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);\n\t        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||\n\t            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {\n\t            offset = parse.getULong(data, start + 4 + (i * 8) + 4);\n\t            break;\n\t        }\n\t    }\n\n\t    if (offset === -1) {\n\t        // There is no cmap table in the font that we support.\n\t        throw new Error('No valid cmap sub-tables found.');\n\t    }\n\n\t    var p = new parse.Parser(data, start + offset);\n\t    cmap.format = p.parseUShort();\n\n\t    if (cmap.format === 12) {\n\t        parseCmapTableFormat12(cmap, p);\n\t    } else if (cmap.format === 4) {\n\t        parseCmapTableFormat4(cmap, p, data, start, offset);\n\t    } else {\n\t        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');\n\t    }\n\n\t    return cmap;\n\t}\n\n\tfunction addSegment(t, code, glyphIndex) {\n\t    t.segments.push({\n\t        end: code,\n\t        start: code,\n\t        delta: -(code - glyphIndex),\n\t        offset: 0,\n\t        glyphIndex: glyphIndex\n\t    });\n\t}\n\n\tfunction addTerminatorSegment(t) {\n\t    t.segments.push({\n\t        end: 0xFFFF,\n\t        start: 0xFFFF,\n\t        delta: 1,\n\t        offset: 0\n\t    });\n\t}\n\n\t// Make cmap table, format 4 by default, 12 if needed only\n\tfunction makeCmapTable(glyphs) {\n\t    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)\n\t    var isPlan0Only = true;\n\t    var i;\n\n\t    // Check if we need to add cmap format 12 or if format 4 only is fine\n\t    for (i = glyphs.length - 1; i > 0; i -= 1) {\n\t        var g = glyphs.get(i);\n\t        if (g.unicode > 65535) {\n\t            console.log('Adding CMAP format 12 (needed!)');\n\t            isPlan0Only = false;\n\t            break;\n\t        }\n\t    }\n\n\t    var cmapTable = [\n\t        {name: 'version', type: 'USHORT', value: 0},\n\t        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},\n\n\t        // CMAP 4 header\n\t        {name: 'platformID', type: 'USHORT', value: 3},\n\t        {name: 'encodingID', type: 'USHORT', value: 1},\n\t        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}\n\t    ];\n\n\t    if (!isPlan0Only)\n\t        { cmapTable = cmapTable.concat([\n\t            // CMAP 12 header\n\t            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere\n\t            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},\n\t            {name: 'cmap12Offset', type: 'ULONG', value: 0}\n\t        ]); }\n\n\t    cmapTable = cmapTable.concat([\n\t        // CMAP 4 Subtable\n\t        {name: 'format', type: 'USHORT', value: 4},\n\t        {name: 'cmap4Length', type: 'USHORT', value: 0},\n\t        {name: 'language', type: 'USHORT', value: 0},\n\t        {name: 'segCountX2', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\n\t    var t = new table.Table('cmap', cmapTable);\n\n\t    t.segments = [];\n\t    for (i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t            addSegment(t, glyph.unicodes[j], i);\n\t        }\n\n\t        t.segments = t.segments.sort(function (a, b) {\n\t            return a.start - b.start;\n\t        });\n\t    }\n\n\t    addTerminatorSegment(t);\n\n\t    var segCount = t.segments.length;\n\t    var segCountToRemove = 0;\n\n\t    // CMAP 4\n\t    // Set up parallel segment arrays.\n\t    var endCounts = [];\n\t    var startCounts = [];\n\t    var idDeltas = [];\n\t    var idRangeOffsets = [];\n\t    var glyphIds = [];\n\n\t    // CMAP 12\n\t    var cmap12Groups = [];\n\n\t    // Reminder this loop is not following the specification at 100%\n\t    // The specification -> find suites of characters and make a group\n\t    // Here we're doing one group for each letter\n\t    // Doing as the spec can save 8 times (or more) space\n\t    for (i = 0; i < segCount; i += 1) {\n\t        var segment = t.segments[i];\n\n\t        // CMAP 4\n\t        if (segment.end <= 65535 && segment.start <= 65535) {\n\t            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n\t            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n\t            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n\t            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n\t            if (segment.glyphId !== undefined) {\n\t                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n\t            }\n\t        } else {\n\t            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12\n\t            segCountToRemove += 1;\n\t        }\n\n\t        // CMAP 12\n\t        // Skip Terminator Segment\n\t        if (!isPlan0Only && segment.glyphIndex !== undefined) {\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});\n\t            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});\n\t        }\n\t    }\n\n\t    // CMAP 4 Subtable\n\t    t.segCountX2 = (segCount - segCountToRemove) * 2;\n\t    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;\n\t    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n\t    t.rangeShift = t.segCountX2 - t.searchRange;\n\n\t    t.fields = t.fields.concat(endCounts);\n\t    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n\t    t.fields = t.fields.concat(startCounts);\n\t    t.fields = t.fields.concat(idDeltas);\n\t    t.fields = t.fields.concat(idRangeOffsets);\n\t    t.fields = t.fields.concat(glyphIds);\n\n\t    t.cmap4Length = 14 + // Subtable header\n\t        endCounts.length * 2 +\n\t        2 + // reservedPad\n\t        startCounts.length * 2 +\n\t        idDeltas.length * 2 +\n\t        idRangeOffsets.length * 2 +\n\t        glyphIds.length * 2;\n\n\t    if (!isPlan0Only) {\n\t        // CMAP 12 Subtable\n\t        var cmap12Length = 16 + // Subtable header\n\t            cmap12Groups.length * 4;\n\n\t        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;\n\t        t.fields = t.fields.concat([\n\t            {name: 'cmap12Format', type: 'USHORT', value: 12},\n\t            {name: 'cmap12Reserved', type: 'USHORT', value: 0},\n\t            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},\n\t            {name: 'cmap12Language', type: 'ULONG', value: 0},\n\t            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}\n\t        ]);\n\n\t        t.fields = t.fields.concat(cmap12Groups);\n\t    }\n\n\t    return t;\n\t}\n\n\tvar cmap = { parse: parseCmapTable, make: makeCmapTable };\n\n\t// Glyph encoding\n\n\tvar cffStandardStrings = [\n\t    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n\t    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n\t    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n\t    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n\t    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n\t    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n\t    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n\t    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n\t    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n\t    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n\t    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n\t    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n\t    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n\t    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n\t    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n\t    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n\t    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n\t    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n\t    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n\t    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n\t    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n\t    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n\t    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n\t    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n\t    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n\t    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n\t    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n\t    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n\t    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n\t    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n\t    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n\t    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\n\tvar cffStandardEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n\t    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n\t    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n\t    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n\t    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n\t    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n\t    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n\t    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n\t    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n\t    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n\t    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n\t    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n\t    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n\t    'lslash', 'oslash', 'oe', 'germandbls'];\n\n\tvar cffExpertEncoding = [\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n\t    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n\t    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n\t    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n\t    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n\t    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n\t    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n\t    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n\t    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n\t    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n\t    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n\t    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n\t    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n\t    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n\t    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n\t    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n\t    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n\t    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n\t    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n\t    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n\t    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n\t    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n\t    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n\t    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n\t    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\n\tvar standardNames = [\n\t    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n\t    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n\t    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n\t    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n\t    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n\t    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n\t    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n\t    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n\t    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n\t    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n\t    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n\t    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n\t    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n\t    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n\t    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n\t    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n\t    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n\t    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n\t    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n\t    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n\t    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n\t    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n\t    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n\t    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n\t    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n\t/**\n\t * This is the encoding used for fonts created from scratch.\n\t * It loops through all glyphs and finds the appropriate unicode value.\n\t * Since it's linear time, other encodings will be faster.\n\t * @exports opentype.DefaultEncoding\n\t * @class\n\t * @constructor\n\t * @param {opentype.Font}\n\t */\n\tfunction DefaultEncoding(font) {\n\t    this.font = font;\n\t}\n\n\tDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n\t    var code = c.codePointAt(0);\n\t    var glyphs = this.font.glyphs;\n\t    if (glyphs) {\n\t        for (var i = 0; i < glyphs.length; i += 1) {\n\t            var glyph = glyphs.get(i);\n\t            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n\t                if (glyph.unicodes[j] === code) {\n\t                    return i;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return null;\n\t};\n\n\t/**\n\t * @exports opentype.CmapEncoding\n\t * @class\n\t * @constructor\n\t * @param {Object} cmap - a object with the cmap encoded data\n\t */\n\tfunction CmapEncoding(cmap) {\n\t    this.cmap = cmap;\n\t}\n\n\t/**\n\t * @param  {string} c - the character\n\t * @return {number} The glyph index.\n\t */\n\tCmapEncoding.prototype.charToGlyphIndex = function(c) {\n\t    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;\n\t};\n\n\t/**\n\t * @exports opentype.CffEncoding\n\t * @class\n\t * @constructor\n\t * @param {string} encoding - The encoding\n\t * @param {Array} charset - The character set.\n\t */\n\tfunction CffEncoding(encoding, charset) {\n\t    this.encoding = encoding;\n\t    this.charset = charset;\n\t}\n\n\t/**\n\t * @param  {string} s - The character\n\t * @return {number} The index.\n\t */\n\tCffEncoding.prototype.charToGlyphIndex = function(s) {\n\t    var code = s.codePointAt(0);\n\t    var charName = this.encoding[code];\n\t    return this.charset.indexOf(charName);\n\t};\n\n\t/**\n\t * @exports opentype.GlyphNames\n\t * @class\n\t * @constructor\n\t * @param {Object} post\n\t */\n\tfunction GlyphNames(post) {\n\t    var this$1 = this;\n\n\t    switch (post.version) {\n\t        case 1:\n\t            this.names = standardNames.slice();\n\t            break;\n\t        case 2:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (var i = 0; i < post.numberOfGlyphs; i++) {\n\t                if (post.glyphNameIndex[i] < standardNames.length) {\n\t                    this$1.names[i] = standardNames[post.glyphNameIndex[i]];\n\t                } else {\n\t                    this$1.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];\n\t                }\n\t            }\n\n\t            break;\n\t        case 2.5:\n\t            this.names = new Array(post.numberOfGlyphs);\n\t            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n\t                this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];\n\t            }\n\n\t            break;\n\t        case 3:\n\t            this.names = [];\n\t            break;\n\t        default:\n\t            this.names = [];\n\t            break;\n\t    }\n\t}\n\n\t/**\n\t * Gets the index of a glyph by name.\n\t * @param  {string} name - The glyph name\n\t * @return {number} The index\n\t */\n\tGlyphNames.prototype.nameToGlyphIndex = function(name) {\n\t    return this.names.indexOf(name);\n\t};\n\n\t/**\n\t * @param  {number} gid\n\t * @return {string}\n\t */\n\tGlyphNames.prototype.glyphIndexToName = function(gid) {\n\t    return this.names[gid];\n\t};\n\n\t/**\n\t * @alias opentype.addGlyphNames\n\t * @param {opentype.Font}\n\t */\n\tfunction addGlyphNames(font) {\n\t    var glyph;\n\t    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n\t    var charCodes = Object.keys(glyphIndexMap);\n\n\t    for (var i = 0; i < charCodes.length; i += 1) {\n\t        var c = charCodes[i];\n\t        var glyphIndex = glyphIndexMap[c];\n\t        glyph = font.glyphs.get(glyphIndex);\n\t        glyph.addUnicode(parseInt(c));\n\t    }\n\n\t    for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {\n\t        glyph = font.glyphs.get(i$1);\n\t        if (font.cffEncoding) {\n\t            if (font.isCIDFont) {\n\t                glyph.name = 'gid' + i$1;\n\t            } else {\n\t                glyph.name = font.cffEncoding.charset[i$1];\n\t            }\n\t        } else if (font.glyphNames.names) {\n\t            glyph.name = font.glyphNames.glyphIndexToName(i$1);\n\t        }\n\t    }\n\t}\n\n\t// Drawing utility functions.\n\n\t// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\n\tfunction line(ctx, x1, y1, x2, y2) {\n\t    ctx.beginPath();\n\t    ctx.moveTo(x1, y1);\n\t    ctx.lineTo(x2, y2);\n\t    ctx.stroke();\n\t}\n\n\tvar draw = { line: line };\n\n\t// The Glyph object\n\t// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency\n\n\tfunction getPathDefinition(glyph, path) {\n\t    var _path = path || new Path();\n\t    return {\n\t        configurable: true,\n\n\t        get: function() {\n\t            if (typeof _path === 'function') {\n\t                _path = _path();\n\t            }\n\n\t            return _path;\n\t        },\n\n\t        set: function(p) {\n\t            _path = p;\n\t        }\n\t    };\n\t}\n\t/**\n\t * @typedef GlyphOptions\n\t * @type Object\n\t * @property {string} [name] - The glyph name\n\t * @property {number} [unicode]\n\t * @property {Array} [unicodes]\n\t * @property {number} [xMin]\n\t * @property {number} [yMin]\n\t * @property {number} [xMax]\n\t * @property {number} [yMax]\n\t * @property {number} [advanceWidth]\n\t */\n\n\t// A Glyph is an individual mark that often corresponds to a character.\n\t// Some glyphs, such as ligatures, are a combination of many characters.\n\t// Glyphs are the basic building blocks of a font.\n\t//\n\t// The `Glyph` class contains utility methods for drawing the path and its points.\n\t/**\n\t * @exports opentype.Glyph\n\t * @class\n\t * @param {GlyphOptions}\n\t * @constructor\n\t */\n\tfunction Glyph(options) {\n\t    // By putting all the code on a prototype function (which is only declared once)\n\t    // we reduce the memory requirements for larger fonts by some 2%\n\t    this.bindConstructorValues(options);\n\t}\n\n\t/**\n\t * @param  {GlyphOptions}\n\t */\n\tGlyph.prototype.bindConstructorValues = function(options) {\n\t    this.index = options.index || 0;\n\n\t    // These three values cannot be deferred for memory optimization:\n\t    this.name = options.name || null;\n\t    this.unicode = options.unicode || undefined;\n\t    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n\t    // But by binding these values only when necessary, we reduce can\n\t    // the memory requirements by almost 3% for larger fonts.\n\t    if (options.xMin) {\n\t        this.xMin = options.xMin;\n\t    }\n\n\t    if (options.yMin) {\n\t        this.yMin = options.yMin;\n\t    }\n\n\t    if (options.xMax) {\n\t        this.xMax = options.xMax;\n\t    }\n\n\t    if (options.yMax) {\n\t        this.yMax = options.yMax;\n\t    }\n\n\t    if (options.advanceWidth) {\n\t        this.advanceWidth = options.advanceWidth;\n\t    }\n\n\t    // The path for a glyph is the most memory intensive, and is bound as a value\n\t    // with a getter/setter to ensure we actually do path parsing only once the\n\t    // path is actually needed by anything.\n\t    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n\t};\n\n\t/**\n\t * @param {number}\n\t */\n\tGlyph.prototype.addUnicode = function(unicode) {\n\t    if (this.unicodes.length === 0) {\n\t        this.unicode = unicode;\n\t    }\n\n\t    this.unicodes.push(unicode);\n\t};\n\n\t/**\n\t * Calculate the minimum bounding box for this glyph.\n\t * @return {opentype.BoundingBox}\n\t */\n\tGlyph.prototype.getBoundingBox = function() {\n\t    return this.path.getBoundingBox();\n\t};\n\n\t/**\n\t * Convert the glyph to a Path we can draw on a drawing context.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to stretch the glyph.\n\t * @param  {opentype.Font} if hinting is to be used, the font\n\t * @return {opentype.Path}\n\t */\n\tGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    var commands;\n\t    var hPoints;\n\t    if (!options) { options = { }; }\n\t    var xScale = options.xScale;\n\t    var yScale = options.yScale;\n\n\t    if (options.hinting && font && font.hinting) {\n\t        // in case of hinting, the hinting engine takes care\n\t        // of scaling the points (not the path) before hinting.\n\t        hPoints = this.path && font.hinting.exec(this, fontSize);\n\t        // in case the hinting engine failed hPoints is undefined\n\t        // and thus reverts to plain rending\n\t    }\n\n\t    if (hPoints) {\n\t        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency\n\t        commands = font.hinting.getCommands(hPoints);\n\t        x = Math.round(x);\n\t        y = Math.round(y);\n\t        // TODO in case of hinting xyScaling is not yet supported\n\t        xScale = yScale = 1;\n\t    } else {\n\t        commands = this.path.commands;\n\t        var scale = 1 / this.path.unitsPerEm * fontSize;\n\t        if (xScale === undefined) { xScale = scale; }\n\t        if (yScale === undefined) { yScale = scale; }\n\t    }\n\n\t    var p = new Path();\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type === 'M') {\n\t            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'L') {\n\t            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Q') {\n\t            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'C') {\n\t            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n\t                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n\t                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n\t        } else if (cmd.type === 'Z') {\n\t            p.closePath();\n\t        }\n\t    }\n\n\t    return p;\n\t};\n\n\t/**\n\t * Split the glyph into contours.\n\t * This function is here for backwards compatibility, and to\n\t * provide raw access to the TrueType glyph outlines.\n\t * @return {Array}\n\t */\n\tGlyph.prototype.getContours = function() {\n\t    var this$1 = this;\n\n\t    if (this.points === undefined) {\n\t        return [];\n\t    }\n\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < this.points.length; i += 1) {\n\t        var pt = this$1.points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t};\n\n\t/**\n\t * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n\t * @return {Object}\n\t */\n\tGlyph.prototype.getMetrics = function() {\n\t    var commands = this.path.commands;\n\t    var xCoords = [];\n\t    var yCoords = [];\n\t    for (var i = 0; i < commands.length; i += 1) {\n\t        var cmd = commands[i];\n\t        if (cmd.type !== 'Z') {\n\t            xCoords.push(cmd.x);\n\t            yCoords.push(cmd.y);\n\t        }\n\n\t        if (cmd.type === 'Q' || cmd.type === 'C') {\n\t            xCoords.push(cmd.x1);\n\t            yCoords.push(cmd.y1);\n\t        }\n\n\t        if (cmd.type === 'C') {\n\t            xCoords.push(cmd.x2);\n\t            yCoords.push(cmd.y2);\n\t        }\n\t    }\n\n\t    var metrics = {\n\t        xMin: Math.min.apply(null, xCoords),\n\t        yMin: Math.min.apply(null, yCoords),\n\t        xMax: Math.max.apply(null, xCoords),\n\t        yMax: Math.max.apply(null, yCoords),\n\t        leftSideBearing: this.leftSideBearing\n\t    };\n\n\t    if (!isFinite(metrics.xMin)) {\n\t        metrics.xMin = 0;\n\t    }\n\n\t    if (!isFinite(metrics.xMax)) {\n\t        metrics.xMax = this.advanceWidth;\n\t    }\n\n\t    if (!isFinite(metrics.yMin)) {\n\t        metrics.yMin = 0;\n\t    }\n\n\t    if (!isFinite(metrics.yMax)) {\n\t        metrics.yMax = 0;\n\t    }\n\n\t    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n\t    return metrics;\n\t};\n\n\t/**\n\t * Draw the glyph on the given context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {Object=} options - xScale, yScale to stretch the glyph.\n\t */\n\tGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n\t    this.getPath(x, y, fontSize, options).draw(ctx);\n\t};\n\n\t/**\n\t * Draw the points of the glyph.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n\t    function drawCircles(l, x, y, scale) {\n\t        var PI_SQ = Math.PI * 2;\n\t        ctx.beginPath();\n\t        for (var j = 0; j < l.length; j += 1) {\n\t            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n\t            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n\t        }\n\n\t        ctx.closePath();\n\t        ctx.fill();\n\t    }\n\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    var scale = 1 / this.path.unitsPerEm * fontSize;\n\n\t    var blueCircles = [];\n\t    var redCircles = [];\n\t    var path = this.path;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var cmd = path.commands[i];\n\t        if (cmd.x !== undefined) {\n\t            blueCircles.push({x: cmd.x, y: -cmd.y});\n\t        }\n\n\t        if (cmd.x1 !== undefined) {\n\t            redCircles.push({x: cmd.x1, y: -cmd.y1});\n\t        }\n\n\t        if (cmd.x2 !== undefined) {\n\t            redCircles.push({x: cmd.x2, y: -cmd.y2});\n\t        }\n\t    }\n\n\t    ctx.fillStyle = 'blue';\n\t    drawCircles(blueCircles, x, y, scale);\n\t    ctx.fillStyle = 'red';\n\t    drawCircles(redCircles, x, y, scale);\n\t};\n\n\t/**\n\t * Draw lines indicating important font measurements.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t */\n\tGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n\t    var scale;\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 24;\n\t    scale = 1 / this.path.unitsPerEm * fontSize;\n\t    ctx.lineWidth = 1;\n\n\t    // Draw the origin\n\t    ctx.strokeStyle = 'black';\n\t    draw.line(ctx, x, -10000, x, 10000);\n\t    draw.line(ctx, -10000, y, 10000, y);\n\n\t    // This code is here due to memory optimization: by not using\n\t    // defaults in the constructor, we save a notable amount of memory.\n\t    var xMin = this.xMin || 0;\n\t    var yMin = this.yMin || 0;\n\t    var xMax = this.xMax || 0;\n\t    var yMax = this.yMax || 0;\n\t    var advanceWidth = this.advanceWidth || 0;\n\n\t    // Draw the glyph box\n\t    ctx.strokeStyle = 'blue';\n\t    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n\t    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n\t    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n\t    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n\t    // Draw the advance width\n\t    ctx.strokeStyle = 'green';\n\t    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n\t};\n\n\t// The GlyphSet object\n\n\t// Define a property on the glyph that depends on the path being loaded.\n\tfunction defineDependentProperty(glyph, externalName, internalName) {\n\t    Object.defineProperty(glyph, externalName, {\n\t        get: function() {\n\t            // Request the path property to make sure the path is loaded.\n\t            glyph.path; // jshint ignore:line\n\t            return glyph[internalName];\n\t        },\n\t        set: function(newValue) {\n\t            glyph[internalName] = newValue;\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t}\n\n\t/**\n\t * A GlyphSet represents all glyphs available in the font, but modelled using\n\t * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n\t * necessary, to keep the memory footprint down.\n\t * @exports opentype.GlyphSet\n\t * @class\n\t * @param {opentype.Font}\n\t * @param {Array}\n\t */\n\tfunction GlyphSet(font, glyphs) {\n\t    var this$1 = this;\n\n\t    this.font = font;\n\t    this.glyphs = {};\n\t    if (Array.isArray(glyphs)) {\n\t        for (var i = 0; i < glyphs.length; i++) {\n\t            this$1.glyphs[i] = glyphs[i];\n\t        }\n\t    }\n\n\t    this.length = (glyphs && glyphs.length) || 0;\n\t}\n\n\t/**\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tGlyphSet.prototype.get = function(index) {\n\t    if (typeof this.glyphs[index] === 'function') {\n\t        this.glyphs[index] = this.glyphs[index]();\n\t    }\n\n\t    return this.glyphs[index];\n\t};\n\n\t/**\n\t * @param  {number} index\n\t * @param  {Object}\n\t */\n\tGlyphSet.prototype.push = function(index, loader) {\n\t    this.glyphs[index] = loader;\n\t    this.length++;\n\t};\n\n\t/**\n\t * @alias opentype.glyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @return {opentype.Glyph}\n\t */\n\tfunction glyphLoader(font, index) {\n\t    return new Glyph({index: index, font: font});\n\t}\n\n\t/**\n\t * Generate a stub glyph that can be filled with all metadata *except*\n\t * the \"points\" and \"path\" properties, which must be loaded only once\n\t * the glyph's path is actually requested for text shaping.\n\t * @alias opentype.ttfGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseGlyph\n\t * @param  {Object} data\n\t * @param  {number} position\n\t * @param  {Function} buildPath\n\t * @return {opentype.Glyph}\n\t */\n\tfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n\t    return function() {\n\t        var glyph = new Glyph({index: index, font: font});\n\n\t        glyph.path = function() {\n\t            parseGlyph(glyph, data, position);\n\t            var path = buildPath(font.glyphs, glyph);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\n\t        defineDependentProperty(glyph, 'xMin', '_xMin');\n\t        defineDependentProperty(glyph, 'xMax', '_xMax');\n\t        defineDependentProperty(glyph, 'yMin', '_yMin');\n\t        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n\t        return glyph;\n\t    };\n\t}\n\t/**\n\t * @alias opentype.cffGlyphLoader\n\t * @param  {opentype.Font} font\n\t * @param  {number} index\n\t * @param  {Function} parseCFFCharstring\n\t * @param  {string} charstring\n\t * @return {opentype.Glyph}\n\t */\n\tfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n\t    return function() {\n\t        var glyph = new Glyph({index: index, font: font});\n\n\t        glyph.path = function() {\n\t            var path = parseCFFCharstring(font, glyph, charstring);\n\t            path.unitsPerEm = font.unitsPerEm;\n\t            return path;\n\t        };\n\n\t        return glyph;\n\t    };\n\t}\n\n\tvar glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };\n\n\t// The `CFF` table contains the glyph outlines in PostScript format.\n\n\t// Custom equals function that can also check lists.\n\tfunction equals(a, b) {\n\t    if (a === b) {\n\t        return true;\n\t    } else if (Array.isArray(a) && Array.isArray(b)) {\n\t        if (a.length !== b.length) {\n\t            return false;\n\t        }\n\n\t        for (var i = 0; i < a.length; i += 1) {\n\t            if (!equals(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    } else {\n\t        return false;\n\t    }\n\t}\n\n\t// Subroutines are encoded using the negative half of the number space.\n\t// See type 2 chapter 4.7 \"Subroutine operators\".\n\tfunction calcCFFSubroutineBias(subrs) {\n\t    var bias;\n\t    if (subrs.length < 1240) {\n\t        bias = 107;\n\t    } else if (subrs.length < 33900) {\n\t        bias = 1131;\n\t    } else {\n\t        bias = 32768;\n\t    }\n\n\t    return bias;\n\t}\n\n\t// Parse a `CFF` INDEX array.\n\t// An index array consists of a list of offsets, then a list of objects at those offsets.\n\tfunction parseCFFIndex(data, start, conversionFn) {\n\t    var offsets = [];\n\t    var objects = [];\n\t    var count = parse.getCard16(data, start);\n\t    var objectOffset;\n\t    var endOffset;\n\t    if (count !== 0) {\n\t        var offsetSize = parse.getByte(data, start + 2);\n\t        objectOffset = start + ((count + 1) * offsetSize) + 2;\n\t        var pos = start + 3;\n\t        for (var i = 0; i < count + 1; i += 1) {\n\t            offsets.push(parse.getOffset(data, pos, offsetSize));\n\t            pos += offsetSize;\n\t        }\n\n\t        // The total size of the index array is 4 header bytes + the value of the last offset.\n\t        endOffset = objectOffset + offsets[count];\n\t    } else {\n\t        endOffset = start + 2;\n\t    }\n\n\t    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n\t        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n\t        if (conversionFn) {\n\t            value = conversionFn(value);\n\t        }\n\n\t        objects.push(value);\n\t    }\n\n\t    return {objects: objects, startOffset: start, endOffset: endOffset};\n\t}\n\n\t// Parse a `CFF` DICT real value.\n\tfunction parseFloatOperand(parser) {\n\t    var s = '';\n\t    var eof = 15;\n\t    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n\t    while (true) {\n\t        var b = parser.parseByte();\n\t        var n1 = b >> 4;\n\t        var n2 = b & 15;\n\n\t        if (n1 === eof) {\n\t            break;\n\t        }\n\n\t        s += lookup[n1];\n\n\t        if (n2 === eof) {\n\t            break;\n\t        }\n\n\t        s += lookup[n2];\n\t    }\n\n\t    return parseFloat(s);\n\t}\n\n\t// Parse a `CFF` DICT operand.\n\tfunction parseOperand(parser, b0) {\n\t    var b1;\n\t    var b2;\n\t    var b3;\n\t    var b4;\n\t    if (b0 === 28) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        return b1 << 8 | b2;\n\t    }\n\n\t    if (b0 === 29) {\n\t        b1 = parser.parseByte();\n\t        b2 = parser.parseByte();\n\t        b3 = parser.parseByte();\n\t        b4 = parser.parseByte();\n\t        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n\t    }\n\n\t    if (b0 === 30) {\n\t        return parseFloatOperand(parser);\n\t    }\n\n\t    if (b0 >= 32 && b0 <= 246) {\n\t        return b0 - 139;\n\t    }\n\n\t    if (b0 >= 247 && b0 <= 250) {\n\t        b1 = parser.parseByte();\n\t        return (b0 - 247) * 256 + b1 + 108;\n\t    }\n\n\t    if (b0 >= 251 && b0 <= 254) {\n\t        b1 = parser.parseByte();\n\t        return -(b0 - 251) * 256 - b1 - 108;\n\t    }\n\n\t    throw new Error('Invalid b0 ' + b0);\n\t}\n\n\t// Convert the entries returned by `parseDict` to a proper dictionary.\n\t// If a value is a list of one, it is unpacked.\n\tfunction entriesToObject(entries) {\n\t    var o = {};\n\t    for (var i = 0; i < entries.length; i += 1) {\n\t        var key = entries[i][0];\n\t        var values = entries[i][1];\n\t        var value = (void 0);\n\t        if (values.length === 1) {\n\t            value = values[0];\n\t        } else {\n\t            value = values;\n\t        }\n\n\t        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n\t            throw new Error('Object ' + o + ' already has key ' + key);\n\t        }\n\n\t        o[key] = value;\n\t    }\n\n\t    return o;\n\t}\n\n\t// Parse a `CFF` DICT object.\n\t// A dictionary contains key-value pairs in a compact tokenized format.\n\tfunction parseCFFDict(data, start, size) {\n\t    start = start !== undefined ? start : 0;\n\t    var parser = new parse.Parser(data, start);\n\t    var entries = [];\n\t    var operands = [];\n\t    size = size !== undefined ? size : data.length;\n\n\t    while (parser.relativeOffset < size) {\n\t        var op = parser.parseByte();\n\n\t        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n\t        // Values <= 21 are operators.\n\t        if (op <= 21) {\n\t            // Two-byte operators have an initial escape byte of 12.\n\t            if (op === 12) {\n\t                op = 1200 + parser.parseByte();\n\t            }\n\n\t            entries.push([op, operands]);\n\t            operands = [];\n\t        } else {\n\t            // Since the operands (values) come before the operators (keys), we store all operands in a list\n\t            // until we encounter an operator.\n\t            operands.push(parseOperand(parser, op));\n\t        }\n\t    }\n\n\t    return entriesToObject(entries);\n\t}\n\n\t// Given a String Index (SID), return the value of the string.\n\t// Strings below index 392 are standard CFF strings and are not encoded in the font.\n\tfunction getCFFString(strings, index) {\n\t    if (index <= 390) {\n\t        index = cffStandardStrings[index];\n\t    } else {\n\t        index = strings[index - 391];\n\t    }\n\n\t    return index;\n\t}\n\n\t// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n\t// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\n\tfunction interpretDict(dict, meta, strings) {\n\t    var newDict = {};\n\t    var value;\n\n\t    // Because we also want to include missing values, we start out from the meta list\n\t    // and lookup values in the dict.\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var m = meta[i];\n\n\t        if (Array.isArray(m.type)) {\n\t            var values = [];\n\t            values.length = m.type.length;\n\t            for (var j = 0; j < m.type.length; j++) {\n\t                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;\n\t                if (value === undefined) {\n\t                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;\n\t                }\n\t                if (m.type[j] === 'SID') {\n\t                    value = getCFFString(strings, value);\n\t                }\n\t                values[j] = value;\n\t            }\n\t            newDict[m.name] = values;\n\t        } else {\n\t            value = dict[m.op];\n\t            if (value === undefined) {\n\t                value = m.value !== undefined ? m.value : null;\n\t            }\n\n\t            if (m.type === 'SID') {\n\t                value = getCFFString(strings, value);\n\t            }\n\t            newDict[m.name] = value;\n\t        }\n\t    }\n\n\t    return newDict;\n\t}\n\n\t// Parse the CFF header.\n\tfunction parseCFFHeader(data, start) {\n\t    var header = {};\n\t    header.formatMajor = parse.getCard8(data, start);\n\t    header.formatMinor = parse.getCard8(data, start + 1);\n\t    header.size = parse.getCard8(data, start + 2);\n\t    header.offsetSize = parse.getCard8(data, start + 3);\n\t    header.startOffset = start;\n\t    header.endOffset = start + 4;\n\t    return header;\n\t}\n\n\tvar TOP_DICT_META = [\n\t    {name: 'version', op: 0, type: 'SID'},\n\t    {name: 'notice', op: 1, type: 'SID'},\n\t    {name: 'copyright', op: 1200, type: 'SID'},\n\t    {name: 'fullName', op: 2, type: 'SID'},\n\t    {name: 'familyName', op: 3, type: 'SID'},\n\t    {name: 'weight', op: 4, type: 'SID'},\n\t    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n\t    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n\t    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n\t    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n\t    {name: 'paintType', op: 1205, type: 'number', value: 0},\n\t    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n\t    {\n\t        name: 'fontMatrix',\n\t        op: 1207,\n\t        type: ['real', 'real', 'real', 'real', 'real', 'real'],\n\t        value: [0.001, 0, 0, 0.001, 0, 0]\n\t    },\n\t    {name: 'uniqueId', op: 13, type: 'number'},\n\t    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n\t    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n\t    {name: 'xuid', op: 14, type: [], value: null},\n\t    {name: 'charset', op: 15, type: 'offset', value: 0},\n\t    {name: 'encoding', op: 16, type: 'offset', value: 0},\n\t    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n\t    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},\n\t    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},\n\t    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},\n\t    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},\n\t    {name: 'cidFontType', op: 1233, type: 'number', value: 0},\n\t    {name: 'cidCount', op: 1234, type: 'number', value: 8720},\n\t    {name: 'uidBase', op: 1235, type: 'number'},\n\t    {name: 'fdArray', op: 1236, type: 'offset'},\n\t    {name: 'fdSelect', op: 1237, type: 'offset'},\n\t    {name: 'fontName', op: 1238, type: 'SID'}\n\t];\n\n\tvar PRIVATE_DICT_META = [\n\t    {name: 'subrs', op: 19, type: 'offset', value: 0},\n\t    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n\t    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n\t];\n\n\t// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n\t// The top dictionary contains the essential metadata for the font, together with the private dictionary.\n\tfunction parseCFFTopDict(data, strings) {\n\t    var dict = parseCFFDict(data, 0, data.byteLength);\n\t    return interpretDict(dict, TOP_DICT_META, strings);\n\t}\n\n\t// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\n\tfunction parseCFFPrivateDict(data, start, size, strings) {\n\t    var dict = parseCFFDict(data, start, size);\n\t    return interpretDict(dict, PRIVATE_DICT_META, strings);\n\t}\n\n\t// Returns a list of \"Top DICT\"s found using an INDEX list.\n\t// Used to read both the usual high-level Top DICTs and also the FDArray\n\t// discovered inside CID-keyed fonts.  When a Top DICT has a reference to\n\t// a Private DICT that is read and saved into the Top DICT.\n\t//\n\t// In addition to the expected/optional values as outlined in TOP_DICT_META\n\t// the following values might be saved into the Top DICT.\n\t//\n\t//    _subrs []        array of local CFF subroutines from Private DICT\n\t//    _subrsBias       bias value computed from number of subroutines\n\t//                      (see calcCFFSubroutineBias() and parseCFFCharstring())\n\t//    _defaultWidthX   default widths for CFF characters\n\t//    _nominalWidthX   bias added to width embedded within glyph description\n\t//\n\t//    _privateDict     saved copy of parsed Private DICT from Top DICT\n\tfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n\t    var topDictArray = [];\n\t    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n\t        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n\t        var topDict = parseCFFTopDict(topDictData, strings);\n\t        topDict._subrs = [];\n\t        topDict._subrsBias = 0;\n\t        var privateSize = topDict.private[0];\n\t        var privateOffset = topDict.private[1];\n\t        if (privateSize !== 0 && privateOffset !== 0) {\n\t            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n\t            topDict._defaultWidthX = privateDict.defaultWidthX;\n\t            topDict._nominalWidthX = privateDict.nominalWidthX;\n\t            if (privateDict.subrs !== 0) {\n\t                var subrOffset = privateOffset + privateDict.subrs;\n\t                var subrIndex = parseCFFIndex(data, subrOffset + start);\n\t                topDict._subrs = subrIndex.objects;\n\t                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n\t            }\n\t            topDict._privateDict = privateDict;\n\t        }\n\t        topDictArray.push(topDict);\n\t    }\n\t    return topDictArray;\n\t}\n\n\t// Parse the CFF charset table, which contains internal names for all the glyphs.\n\t// This function will return a list of glyph names.\n\t// See Adobe TN #5176 chapter 13, \"Charsets\".\n\tfunction parseCFFCharset(data, start, nGlyphs, strings) {\n\t    var sid;\n\t    var count;\n\t    var parser = new parse.Parser(data, start);\n\n\t    // The .notdef glyph is not included, so subtract 1.\n\t    nGlyphs -= 1;\n\t    var charset = ['.notdef'];\n\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        for (var i = 0; i < nGlyphs; i += 1) {\n\t            sid = parser.parseSID();\n\t            charset.push(getCFFString(strings, sid));\n\t        }\n\t    } else if (format === 1) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard8();\n\t            for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else if (format === 2) {\n\t        while (charset.length <= nGlyphs) {\n\t            sid = parser.parseSID();\n\t            count = parser.parseCard16();\n\t            for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n\t                charset.push(getCFFString(strings, sid));\n\t                sid += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown charset format ' + format);\n\t    }\n\n\t    return charset;\n\t}\n\n\t// Parse the CFF encoding data. Only one encoding can be specified per font.\n\t// See Adobe TN #5176 chapter 12, \"Encodings\".\n\tfunction parseCFFEncoding(data, start, charset) {\n\t    var code;\n\t    var enc = {};\n\t    var parser = new parse.Parser(data, start);\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        var nCodes = parser.parseCard8();\n\t        for (var i = 0; i < nCodes; i += 1) {\n\t            code = parser.parseCard8();\n\t            enc[code] = i;\n\t        }\n\t    } else if (format === 1) {\n\t        var nRanges = parser.parseCard8();\n\t        code = 1;\n\t        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n\t            var first = parser.parseCard8();\n\t            var nLeft = parser.parseCard8();\n\t            for (var j = first; j <= first + nLeft; j += 1) {\n\t                enc[j] = code;\n\t                code += 1;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Unknown encoding format ' + format);\n\t    }\n\n\t    return new CffEncoding(enc, charset);\n\t}\n\n\t// Take in charstring code and return a Glyph object.\n\t// The encoding is described in the Type 2 Charstring Format\n\t// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\n\tfunction parseCFFCharstring(font, glyph, code) {\n\t    var c1x;\n\t    var c1y;\n\t    var c2x;\n\t    var c2y;\n\t    var p = new Path();\n\t    var stack = [];\n\t    var nStems = 0;\n\t    var haveWidth = false;\n\t    var open = false;\n\t    var x = 0;\n\t    var y = 0;\n\t    var subrs;\n\t    var subrsBias;\n\t    var defaultWidthX;\n\t    var nominalWidthX;\n\t    if (font.isCIDFont) {\n\t        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n\t        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n\t        subrs = fdDict._subrs;\n\t        subrsBias = fdDict._subrsBias;\n\t        defaultWidthX = fdDict._defaultWidthX;\n\t        nominalWidthX = fdDict._nominalWidthX;\n\t    } else {\n\t        subrs = font.tables.cff.topDict._subrs;\n\t        subrsBias = font.tables.cff.topDict._subrsBias;\n\t        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n\t        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n\t    }\n\t    var width = defaultWidthX;\n\n\t    function newContour(x, y) {\n\t        if (open) {\n\t            p.closePath();\n\t        }\n\n\t        p.moveTo(x, y);\n\t        open = true;\n\t    }\n\n\t    function parseStems() {\n\t        var hasWidthArg;\n\n\t        // The number of stem operators on the stack is always even.\n\t        // If the value is uneven, that means a width is specified.\n\t        hasWidthArg = stack.length % 2 !== 0;\n\t        if (hasWidthArg && !haveWidth) {\n\t            width = stack.shift() + nominalWidthX;\n\t        }\n\n\t        nStems += stack.length >> 1;\n\t        stack.length = 0;\n\t        haveWidth = true;\n\t    }\n\n\t    function parse$$1(code) {\n\t        var b1;\n\t        var b2;\n\t        var b3;\n\t        var b4;\n\t        var codeIndex;\n\t        var subrCode;\n\t        var jpx;\n\t        var jpy;\n\t        var c3x;\n\t        var c3y;\n\t        var c4x;\n\t        var c4y;\n\n\t        var i = 0;\n\t        while (i < code.length) {\n\t            var v = code[i];\n\t            i += 1;\n\t            switch (v) {\n\t                case 1: // hstem\n\t                    parseStems();\n\t                    break;\n\t                case 3: // vstem\n\t                    parseStems();\n\t                    break;\n\t                case 4: // vmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    y += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 5: // rlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 6: // hlineto\n\t                    while (stack.length > 0) {\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 7: // vlineto\n\t                    while (stack.length > 0) {\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        x += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    break;\n\t                case 8: // rrcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 10: // callsubr\n\t                    codeIndex = stack.pop() + subrsBias;\n\t                    subrCode = subrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse$$1(subrCode);\n\t                    }\n\n\t                    break;\n\t                case 11: // return\n\t                    return;\n\t                case 12: // flex operators\n\t                    v = code[i];\n\t                    i += 1;\n\t                    switch (v) {\n\t                        case 35: // flex\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x   + stack.shift();    // dx6\n\t                            y = c4y   + stack.shift();    // dy6\n\t                            stack.shift();                // flex depth\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 34: // hflex\n\t                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y;                      // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = y;                      // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 36: // hflex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y;                    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = c2y;                    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            x = c4x + stack.shift();      // dx6\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        case 37: // flex1\n\t                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n\t                            c1x = x   + stack.shift();    // dx1\n\t                            c1y = y   + stack.shift();    // dy1\n\t                            c2x = c1x + stack.shift();    // dx2\n\t                            c2y = c1y + stack.shift();    // dy2\n\t                            jpx = c2x + stack.shift();    // dx3\n\t                            jpy = c2y + stack.shift();    // dy3\n\t                            c3x = jpx + stack.shift();    // dx4\n\t                            c3y = jpy + stack.shift();    // dy4\n\t                            c4x = c3x + stack.shift();    // dx5\n\t                            c4y = c3y + stack.shift();    // dy5\n\t                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n\t                                x = c4x + stack.shift();\n\t                            } else {\n\t                                y = c4y + stack.shift();\n\t                            }\n\n\t                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n\t                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n\t                            break;\n\t                        default:\n\t                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);\n\t                            stack.length = 0;\n\t                    }\n\t                    break;\n\t                case 14: // endchar\n\t                    if (stack.length > 0 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    if (open) {\n\t                        p.closePath();\n\t                        open = false;\n\t                    }\n\n\t                    break;\n\t                case 18: // hstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 19: // hintmask\n\t                case 20: // cntrmask\n\t                    parseStems();\n\t                    i += (nStems + 7) >> 3;\n\t                    break;\n\t                case 21: // rmoveto\n\t                    if (stack.length > 2 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    y += stack.pop();\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 22: // hmoveto\n\t                    if (stack.length > 1 && !haveWidth) {\n\t                        width = stack.shift() + nominalWidthX;\n\t                        haveWidth = true;\n\t                    }\n\n\t                    x += stack.pop();\n\t                    newContour(x, y);\n\t                    break;\n\t                case 23: // vstemhm\n\t                    parseStems();\n\t                    break;\n\t                case 24: // rcurveline\n\t                    while (stack.length > 2) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    x += stack.shift();\n\t                    y += stack.shift();\n\t                    p.lineTo(x, y);\n\t                    break;\n\t                case 25: // rlinecurve\n\t                    while (stack.length > 6) {\n\t                        x += stack.shift();\n\t                        y += stack.shift();\n\t                        p.lineTo(x, y);\n\t                    }\n\n\t                    c1x = x + stack.shift();\n\t                    c1y = y + stack.shift();\n\t                    c2x = c1x + stack.shift();\n\t                    c2y = c1y + stack.shift();\n\t                    x = c2x + stack.shift();\n\t                    y = c2y + stack.shift();\n\t                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    break;\n\t                case 26: // vvcurveto\n\t                    if (stack.length % 2) {\n\t                        x += stack.shift();\n\t                    }\n\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x;\n\t                        y = c2y + stack.shift();\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 27: // hhcurveto\n\t                    if (stack.length % 2) {\n\t                        y += stack.shift();\n\t                    }\n\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y;\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 28: // shortint\n\t                    b1 = code[i];\n\t                    b2 = code[i + 1];\n\t                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n\t                    i += 2;\n\t                    break;\n\t                case 29: // callgsubr\n\t                    codeIndex = stack.pop() + font.gsubrsBias;\n\t                    subrCode = font.gsubrs[codeIndex];\n\t                    if (subrCode) {\n\t                        parse$$1(subrCode);\n\t                    }\n\n\t                    break;\n\t                case 30: // vhcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                case 31: // hvcurveto\n\t                    while (stack.length > 0) {\n\t                        c1x = x + stack.shift();\n\t                        c1y = y;\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        y = c2y + stack.shift();\n\t                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                        if (stack.length === 0) {\n\t                            break;\n\t                        }\n\n\t                        c1x = x;\n\t                        c1y = y + stack.shift();\n\t                        c2x = c1x + stack.shift();\n\t                        c2y = c1y + stack.shift();\n\t                        x = c2x + stack.shift();\n\t                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n\t                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n\t                    }\n\n\t                    break;\n\t                default:\n\t                    if (v < 32) {\n\t                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);\n\t                    } else if (v < 247) {\n\t                        stack.push(v - 139);\n\t                    } else if (v < 251) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push((v - 247) * 256 + b1 + 108);\n\t                    } else if (v < 255) {\n\t                        b1 = code[i];\n\t                        i += 1;\n\t                        stack.push(-(v - 251) * 256 - b1 - 108);\n\t                    } else {\n\t                        b1 = code[i];\n\t                        b2 = code[i + 1];\n\t                        b3 = code[i + 2];\n\t                        b4 = code[i + 3];\n\t                        i += 4;\n\t                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n\t                    }\n\t            }\n\t        }\n\t    }\n\n\t    parse$$1(code);\n\n\t    glyph.advanceWidth = width;\n\t    return p;\n\t}\n\n\tfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n\t    var fdSelect = [];\n\t    var fdIndex;\n\t    var parser = new parse.Parser(data, start);\n\t    var format = parser.parseCard8();\n\t    if (format === 0) {\n\t        // Simple list of nGlyphs elements\n\t        for (var iGid = 0; iGid < nGlyphs; iGid++) {\n\t            fdIndex = parser.parseCard8();\n\t            if (fdIndex >= fdArrayCount) {\n\t                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n\t            }\n\t            fdSelect.push(fdIndex);\n\t        }\n\t    } else if (format === 3) {\n\t        // Ranges\n\t        var nRanges = parser.parseCard16();\n\t        var first = parser.parseCard16();\n\t        if (first !== 0) {\n\t            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);\n\t        }\n\t        var next;\n\t        for (var iRange = 0; iRange < nRanges; iRange++) {\n\t            fdIndex = parser.parseCard8();\n\t            next = parser.parseCard16();\n\t            if (fdIndex >= fdArrayCount) {\n\t                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');\n\t            }\n\t            if (next > nGlyphs) {\n\t                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);\n\t            }\n\t            for (; first < next; first++) {\n\t                fdSelect.push(fdIndex);\n\t            }\n\t            first = next;\n\t        }\n\t        if (next !== nGlyphs) {\n\t            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);\n\t        }\n\t    } else {\n\t        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);\n\t    }\n\t    return fdSelect;\n\t}\n\n\t// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\n\tfunction parseCFFTable(data, start, font) {\n\t    font.tables.cff = {};\n\t    var header = parseCFFHeader(data, start);\n\t    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n\t    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n\t    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n\t    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n\t    font.gsubrs = globalSubrIndex.objects;\n\t    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n\t    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n\t    if (topDictArray.length !== 1) {\n\t        throw new Error('CFF table has too many fonts in \\'FontSet\\' - count of fonts NameIndex.length = ' + topDictArray.length);\n\t    }\n\n\t    var topDict = topDictArray[0];\n\t    font.tables.cff.topDict = topDict;\n\n\t    if (topDict._privateDict) {\n\t        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n\t        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n\t    }\n\n\t    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {\n\t        font.isCIDFont = true;\n\t    }\n\n\t    if (font.isCIDFont) {\n\t        var fdArrayOffset = topDict.fdArray;\n\t        var fdSelectOffset = topDict.fdSelect;\n\t        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n\t            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');\n\t        }\n\t        fdArrayOffset += start;\n\t        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n\t        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n\t        topDict._fdArray = fdArray;\n\t        fdSelectOffset += start;\n\t        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n\t    }\n\n\t    var privateDictOffset = start + topDict.private[1];\n\t    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n\t    font.defaultWidthX = privateDict.defaultWidthX;\n\t    font.nominalWidthX = privateDict.nominalWidthX;\n\n\t    if (privateDict.subrs !== 0) {\n\t        var subrOffset = privateDictOffset + privateDict.subrs;\n\t        var subrIndex = parseCFFIndex(data, subrOffset);\n\t        font.subrs = subrIndex.objects;\n\t        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n\t    } else {\n\t        font.subrs = [];\n\t        font.subrsBias = 0;\n\t    }\n\n\t    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n\t    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n\t    font.nGlyphs = charStringsIndex.objects.length;\n\n\t    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n\t    if (topDict.encoding === 0) {\n\t        // Standard encoding\n\t        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n\t    } else if (topDict.encoding === 1) {\n\t        // Expert encoding\n\t        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n\t    } else {\n\t        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n\t    }\n\n\t    // Prefer the CMAP encoding to the CFF encoding.\n\t    font.encoding = font.encoding || font.cffEncoding;\n\n\t    font.glyphs = new glyphset.GlyphSet(font);\n\t    for (var i = 0; i < font.nGlyphs; i += 1) {\n\t        var charString = charStringsIndex.objects[i];\n\t        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n\t    }\n\t}\n\n\t// Convert a string to a String ID (SID).\n\t// The list of strings is modified in place.\n\tfunction encodeString(s, strings) {\n\t    var sid;\n\n\t    // Is the string in the CFF standard strings?\n\t    var i = cffStandardStrings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i;\n\t    }\n\n\t    // Is the string already in the string index?\n\t    i = strings.indexOf(s);\n\t    if (i >= 0) {\n\t        sid = i + cffStandardStrings.length;\n\t    } else {\n\t        sid = cffStandardStrings.length + strings.length;\n\t        strings.push(s);\n\t    }\n\n\t    return sid;\n\t}\n\n\tfunction makeHeader() {\n\t    return new table.Record('Header', [\n\t        {name: 'major', type: 'Card8', value: 1},\n\t        {name: 'minor', type: 'Card8', value: 0},\n\t        {name: 'hdrSize', type: 'Card8', value: 4},\n\t        {name: 'major', type: 'Card8', value: 1}\n\t    ]);\n\t}\n\n\tfunction makeNameIndex(fontNames) {\n\t    var t = new table.Record('Name INDEX', [\n\t        {name: 'names', type: 'INDEX', value: []}\n\t    ]);\n\t    t.names = [];\n\t    for (var i = 0; i < fontNames.length; i += 1) {\n\t        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n\t    }\n\n\t    return t;\n\t}\n\n\t// Given a dictionary's metadata, create a DICT structure.\n\tfunction makeDict(meta, attrs, strings) {\n\t    var m = {};\n\t    for (var i = 0; i < meta.length; i += 1) {\n\t        var entry = meta[i];\n\t        var value = attrs[entry.name];\n\t        if (value !== undefined && !equals(value, entry.value)) {\n\t            if (entry.type === 'SID') {\n\t                value = encodeString(value, strings);\n\t            }\n\n\t            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n\t        }\n\t    }\n\n\t    return m;\n\t}\n\n\t// The Top DICT houses the global font attributes.\n\tfunction makeTopDict(attrs, strings) {\n\t    var t = new table.Record('Top DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\n\tfunction makeTopDictIndex(topDict) {\n\t    var t = new table.Record('Top DICT INDEX', [\n\t        {name: 'topDicts', type: 'INDEX', value: []}\n\t    ]);\n\t    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n\t    return t;\n\t}\n\n\tfunction makeStringIndex(strings) {\n\t    var t = new table.Record('String INDEX', [\n\t        {name: 'strings', type: 'INDEX', value: []}\n\t    ]);\n\t    t.strings = [];\n\t    for (var i = 0; i < strings.length; i += 1) {\n\t        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction makeGlobalSubrIndex() {\n\t    // Currently we don't use subroutines.\n\t    return new table.Record('Global Subr INDEX', [\n\t        {name: 'subrs', type: 'INDEX', value: []}\n\t    ]);\n\t}\n\n\tfunction makeCharsets(glyphNames, strings) {\n\t    var t = new table.Record('Charsets', [\n\t        {name: 'format', type: 'Card8', value: 0}\n\t    ]);\n\t    for (var i = 0; i < glyphNames.length; i += 1) {\n\t        var glyphName = glyphNames[i];\n\t        var glyphSID = encodeString(glyphName, strings);\n\t        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction glyphToOps(glyph) {\n\t    var ops = [];\n\t    var path = glyph.path;\n\t    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n\t    var x = 0;\n\t    var y = 0;\n\t    for (var i = 0; i < path.commands.length; i += 1) {\n\t        var dx = (void 0);\n\t        var dy = (void 0);\n\t        var cmd = path.commands[i];\n\t        if (cmd.type === 'Q') {\n\t            // CFF only supports bézier curves, so convert the quad to a bézier.\n\t            var _13 = 1 / 3;\n\t            var _23 = 2 / 3;\n\n\t            // We're going to create a new command so we don't change the original path.\n\t            cmd = {\n\t                type: 'C',\n\t                x: cmd.x,\n\t                y: cmd.y,\n\t                x1: _13 * x + _23 * cmd.x1,\n\t                y1: _13 * y + _23 * cmd.y1,\n\t                x2: _13 * cmd.x + _23 * cmd.x1,\n\t                y2: _13 * cmd.y + _23 * cmd.y1\n\t            };\n\t        }\n\n\t        if (cmd.type === 'M') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'L') {\n\t            dx = Math.round(cmd.x - x);\n\t            dy = Math.round(cmd.y - y);\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rlineto', type: 'OP', value: 5});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        } else if (cmd.type === 'C') {\n\t            var dx1 = Math.round(cmd.x1 - x);\n\t            var dy1 = Math.round(cmd.y1 - y);\n\t            var dx2 = Math.round(cmd.x2 - cmd.x1);\n\t            var dy2 = Math.round(cmd.y2 - cmd.y1);\n\t            dx = Math.round(cmd.x - cmd.x2);\n\t            dy = Math.round(cmd.y - cmd.y2);\n\t            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n\t            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n\t            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n\t            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n\t            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n\t            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n\t            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n\t            x = Math.round(cmd.x);\n\t            y = Math.round(cmd.y);\n\t        }\n\n\t        // Contours are closed automatically.\n\t    }\n\n\t    ops.push({name: 'endchar', type: 'OP', value: 14});\n\t    return ops;\n\t}\n\n\tfunction makeCharStringsIndex(glyphs) {\n\t    var t = new table.Record('CharStrings INDEX', [\n\t        {name: 'charStrings', type: 'INDEX', value: []}\n\t    ]);\n\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var ops = glyphToOps(glyph);\n\t        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n\t    }\n\n\t    return t;\n\t}\n\n\tfunction makePrivateDict(attrs, strings) {\n\t    var t = new table.Record('Private DICT', [\n\t        {name: 'dict', type: 'DICT', value: {}}\n\t    ]);\n\t    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n\t    return t;\n\t}\n\n\tfunction makeCFFTable(glyphs, options) {\n\t    var t = new table.Table('CFF ', [\n\t        {name: 'header', type: 'RECORD'},\n\t        {name: 'nameIndex', type: 'RECORD'},\n\t        {name: 'topDictIndex', type: 'RECORD'},\n\t        {name: 'stringIndex', type: 'RECORD'},\n\t        {name: 'globalSubrIndex', type: 'RECORD'},\n\t        {name: 'charsets', type: 'RECORD'},\n\t        {name: 'charStringsIndex', type: 'RECORD'},\n\t        {name: 'privateDict', type: 'RECORD'}\n\t    ]);\n\n\t    var fontScale = 1 / options.unitsPerEm;\n\t    // We use non-zero values for the offsets so that the DICT encodes them.\n\t    // This is important because the size of the Top DICT plays a role in offset calculation,\n\t    // and the size shouldn't change after we've written correct offsets.\n\t    var attrs = {\n\t        version: options.version,\n\t        fullName: options.fullName,\n\t        familyName: options.familyName,\n\t        weight: options.weightName,\n\t        fontBBox: options.fontBBox || [0, 0, 0, 0],\n\t        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],\n\t        charset: 999,\n\t        encoding: 0,\n\t        charStrings: 999,\n\t        private: [0, 999]\n\t    };\n\n\t    var privateAttrs = {};\n\n\t    var glyphNames = [];\n\t    var glyph;\n\n\t    // Skip first glyph (.notdef)\n\t    for (var i = 1; i < glyphs.length; i += 1) {\n\t        glyph = glyphs.get(i);\n\t        glyphNames.push(glyph.name);\n\t    }\n\n\t    var strings = [];\n\n\t    t.header = makeHeader();\n\t    t.nameIndex = makeNameIndex([options.postScriptName]);\n\t    var topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\t    t.globalSubrIndex = makeGlobalSubrIndex();\n\t    t.charsets = makeCharsets(glyphNames, strings);\n\t    t.charStringsIndex = makeCharStringsIndex(glyphs);\n\t    t.privateDict = makePrivateDict(privateAttrs, strings);\n\n\t    // Needs to come at the end, to encode all custom strings used in the font.\n\t    t.stringIndex = makeStringIndex(strings);\n\n\t    var startOffset = t.header.sizeOf() +\n\t        t.nameIndex.sizeOf() +\n\t        t.topDictIndex.sizeOf() +\n\t        t.stringIndex.sizeOf() +\n\t        t.globalSubrIndex.sizeOf();\n\t    attrs.charset = startOffset;\n\n\t    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n\t    attrs.encoding = 0;\n\t    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n\t    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n\t    // Recreate the Top DICT INDEX with the correct offsets.\n\t    topDict = makeTopDict(attrs, strings);\n\t    t.topDictIndex = makeTopDictIndex(topDict);\n\n\t    return t;\n\t}\n\n\tvar cff = { parse: parseCFFTable, make: makeCFFTable };\n\n\t// The `head` table contains global information about the font.\n\n\t// Parse the header `head` table\n\tfunction parseHeadTable(data, start) {\n\t    var head = {};\n\t    var p = new parse.Parser(data, start);\n\t    head.version = p.parseVersion();\n\t    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n\t    head.checkSumAdjustment = p.parseULong();\n\t    head.magicNumber = p.parseULong();\n\t    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n\t    head.flags = p.parseUShort();\n\t    head.unitsPerEm = p.parseUShort();\n\t    head.created = p.parseLongDateTime();\n\t    head.modified = p.parseLongDateTime();\n\t    head.xMin = p.parseShort();\n\t    head.yMin = p.parseShort();\n\t    head.xMax = p.parseShort();\n\t    head.yMax = p.parseShort();\n\t    head.macStyle = p.parseUShort();\n\t    head.lowestRecPPEM = p.parseUShort();\n\t    head.fontDirectionHint = p.parseShort();\n\t    head.indexToLocFormat = p.parseShort();\n\t    head.glyphDataFormat = p.parseShort();\n\t    return head;\n\t}\n\n\tfunction makeHeadTable(options) {\n\t    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970\n\t    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;\n\t    var createdTimestamp = timestamp;\n\n\t    if (options.createdTimestamp) {\n\t        createdTimestamp = options.createdTimestamp + 2082844800;\n\t    }\n\n\t    return new table.Table('head', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n\t        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n\t        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n\t        {name: 'flags', type: 'USHORT', value: 0},\n\t        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n\t        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},\n\t        {name: 'modified', type: 'LONGDATETIME', value: timestamp},\n\t        {name: 'xMin', type: 'SHORT', value: 0},\n\t        {name: 'yMin', type: 'SHORT', value: 0},\n\t        {name: 'xMax', type: 'SHORT', value: 0},\n\t        {name: 'yMax', type: 'SHORT', value: 0},\n\t        {name: 'macStyle', type: 'USHORT', value: 0},\n\t        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n\t        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n\t        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n\t        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar head = { parse: parseHeadTable, make: makeHeadTable };\n\n\t// The `hhea` table contains information for horizontal layout.\n\n\t// Parse the horizontal header `hhea` table\n\tfunction parseHheaTable(data, start) {\n\t    var hhea = {};\n\t    var p = new parse.Parser(data, start);\n\t    hhea.version = p.parseVersion();\n\t    hhea.ascender = p.parseShort();\n\t    hhea.descender = p.parseShort();\n\t    hhea.lineGap = p.parseShort();\n\t    hhea.advanceWidthMax = p.parseUShort();\n\t    hhea.minLeftSideBearing = p.parseShort();\n\t    hhea.minRightSideBearing = p.parseShort();\n\t    hhea.xMaxExtent = p.parseShort();\n\t    hhea.caretSlopeRise = p.parseShort();\n\t    hhea.caretSlopeRun = p.parseShort();\n\t    hhea.caretOffset = p.parseShort();\n\t    p.relativeOffset += 8;\n\t    hhea.metricDataFormat = p.parseShort();\n\t    hhea.numberOfHMetrics = p.parseUShort();\n\t    return hhea;\n\t}\n\n\tfunction makeHheaTable(options) {\n\t    return new table.Table('hhea', [\n\t        {name: 'version', type: 'FIXED', value: 0x00010000},\n\t        {name: 'ascender', type: 'FWORD', value: 0},\n\t        {name: 'descender', type: 'FWORD', value: 0},\n\t        {name: 'lineGap', type: 'FWORD', value: 0},\n\t        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n\t        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n\t        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n\t        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n\t        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n\t        {name: 'caretOffset', type: 'SHORT', value: 0},\n\t        {name: 'reserved1', type: 'SHORT', value: 0},\n\t        {name: 'reserved2', type: 'SHORT', value: 0},\n\t        {name: 'reserved3', type: 'SHORT', value: 0},\n\t        {name: 'reserved4', type: 'SHORT', value: 0},\n\t        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n\t        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar hhea = { parse: parseHheaTable, make: makeHheaTable };\n\n\t// The `hmtx` table contains the horizontal metrics for all glyphs.\n\n\t// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n\t// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\n\tfunction parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n\t    var advanceWidth;\n\t    var leftSideBearing;\n\t    var p = new parse.Parser(data, start);\n\t    for (var i = 0; i < numGlyphs; i += 1) {\n\t        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n\t        if (i < numMetrics) {\n\t            advanceWidth = p.parseUShort();\n\t            leftSideBearing = p.parseShort();\n\t        }\n\n\t        var glyph = glyphs.get(i);\n\t        glyph.advanceWidth = advanceWidth;\n\t        glyph.leftSideBearing = leftSideBearing;\n\t    }\n\t}\n\n\tfunction makeHmtxTable(glyphs) {\n\t    var t = new table.Table('hmtx', []);\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs.get(i);\n\t        var advanceWidth = glyph.advanceWidth || 0;\n\t        var leftSideBearing = glyph.leftSideBearing || 0;\n\t        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n\t        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n\t    }\n\n\t    return t;\n\t}\n\n\tvar hmtx = { parse: parseHmtxTable, make: makeHmtxTable };\n\n\t// The `ltag` table stores IETF BCP-47 language tags. It allows supporting\n\n\tfunction makeLtagTable(tags) {\n\t    var result = new table.Table('ltag', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'numTags', type: 'ULONG', value: tags.length}\n\t    ]);\n\n\t    var stringPool = '';\n\t    var stringPoolOffset = 12 + tags.length * 4;\n\t    for (var i = 0; i < tags.length; ++i) {\n\t        var pos = stringPool.indexOf(tags[i]);\n\t        if (pos < 0) {\n\t            pos = stringPool.length;\n\t            stringPool += tags[i];\n\t        }\n\n\t        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});\n\t    }\n\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\t    return result;\n\t}\n\n\tfunction parseLtagTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported ltag table version.');\n\t    // The 'ltag' specification does not define any flags; skip the field.\n\t    p.skip('uLong', 1);\n\t    var numTags = p.parseULong();\n\n\t    var tags = [];\n\t    for (var i = 0; i < numTags; i++) {\n\t        var tag = '';\n\t        var offset = start + p.parseUShort();\n\t        var length = p.parseUShort();\n\t        for (var j = offset; j < offset + length; ++j) {\n\t            tag += String.fromCharCode(data.getInt8(j));\n\t        }\n\n\t        tags.push(tag);\n\t    }\n\n\t    return tags;\n\t}\n\n\tvar ltag = { make: makeLtagTable, parse: parseLtagTable };\n\n\t// The `maxp` table establishes the memory requirements for the font.\n\n\t// Parse the maximum profile `maxp` table.\n\tfunction parseMaxpTable(data, start) {\n\t    var maxp = {};\n\t    var p = new parse.Parser(data, start);\n\t    maxp.version = p.parseVersion();\n\t    maxp.numGlyphs = p.parseUShort();\n\t    if (maxp.version === 1.0) {\n\t        maxp.maxPoints = p.parseUShort();\n\t        maxp.maxContours = p.parseUShort();\n\t        maxp.maxCompositePoints = p.parseUShort();\n\t        maxp.maxCompositeContours = p.parseUShort();\n\t        maxp.maxZones = p.parseUShort();\n\t        maxp.maxTwilightPoints = p.parseUShort();\n\t        maxp.maxStorage = p.parseUShort();\n\t        maxp.maxFunctionDefs = p.parseUShort();\n\t        maxp.maxInstructionDefs = p.parseUShort();\n\t        maxp.maxStackElements = p.parseUShort();\n\t        maxp.maxSizeOfInstructions = p.parseUShort();\n\t        maxp.maxComponentElements = p.parseUShort();\n\t        maxp.maxComponentDepth = p.parseUShort();\n\t    }\n\n\t    return maxp;\n\t}\n\n\tfunction makeMaxpTable(numGlyphs) {\n\t    return new table.Table('maxp', [\n\t        {name: 'version', type: 'FIXED', value: 0x00005000},\n\t        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n\t    ]);\n\t}\n\n\tvar maxp = { parse: parseMaxpTable, make: makeMaxpTable };\n\n\t// The `name` naming table.\n\n\t// NameIDs for the name table.\n\tvar nameTableNames = [\n\t    'copyright',              // 0\n\t    'fontFamily',             // 1\n\t    'fontSubfamily',          // 2\n\t    'uniqueID',               // 3\n\t    'fullName',               // 4\n\t    'version',                // 5\n\t    'postScriptName',         // 6\n\t    'trademark',              // 7\n\t    'manufacturer',           // 8\n\t    'designer',               // 9\n\t    'description',            // 10\n\t    'manufacturerURL',        // 11\n\t    'designerURL',            // 12\n\t    'license',                // 13\n\t    'licenseURL',             // 14\n\t    'reserved',               // 15\n\t    'preferredFamily',        // 16\n\t    'preferredSubfamily',     // 17\n\t    'compatibleFullName',     // 18\n\t    'sampleText',             // 19\n\t    'postScriptFindFontName', // 20\n\t    'wwsFamily',              // 21\n\t    'wwsSubfamily'            // 22\n\t];\n\n\tvar macLanguages = {\n\t    0: 'en',\n\t    1: 'fr',\n\t    2: 'de',\n\t    3: 'it',\n\t    4: 'nl',\n\t    5: 'sv',\n\t    6: 'es',\n\t    7: 'da',\n\t    8: 'pt',\n\t    9: 'no',\n\t    10: 'he',\n\t    11: 'ja',\n\t    12: 'ar',\n\t    13: 'fi',\n\t    14: 'el',\n\t    15: 'is',\n\t    16: 'mt',\n\t    17: 'tr',\n\t    18: 'hr',\n\t    19: 'zh-Hant',\n\t    20: 'ur',\n\t    21: 'hi',\n\t    22: 'th',\n\t    23: 'ko',\n\t    24: 'lt',\n\t    25: 'pl',\n\t    26: 'hu',\n\t    27: 'es',\n\t    28: 'lv',\n\t    29: 'se',\n\t    30: 'fo',\n\t    31: 'fa',\n\t    32: 'ru',\n\t    33: 'zh',\n\t    34: 'nl-BE',\n\t    35: 'ga',\n\t    36: 'sq',\n\t    37: 'ro',\n\t    38: 'cz',\n\t    39: 'sk',\n\t    40: 'si',\n\t    41: 'yi',\n\t    42: 'sr',\n\t    43: 'mk',\n\t    44: 'bg',\n\t    45: 'uk',\n\t    46: 'be',\n\t    47: 'uz',\n\t    48: 'kk',\n\t    49: 'az-Cyrl',\n\t    50: 'az-Arab',\n\t    51: 'hy',\n\t    52: 'ka',\n\t    53: 'mo',\n\t    54: 'ky',\n\t    55: 'tg',\n\t    56: 'tk',\n\t    57: 'mn-CN',\n\t    58: 'mn',\n\t    59: 'ps',\n\t    60: 'ks',\n\t    61: 'ku',\n\t    62: 'sd',\n\t    63: 'bo',\n\t    64: 'ne',\n\t    65: 'sa',\n\t    66: 'mr',\n\t    67: 'bn',\n\t    68: 'as',\n\t    69: 'gu',\n\t    70: 'pa',\n\t    71: 'or',\n\t    72: 'ml',\n\t    73: 'kn',\n\t    74: 'ta',\n\t    75: 'te',\n\t    76: 'si',\n\t    77: 'my',\n\t    78: 'km',\n\t    79: 'lo',\n\t    80: 'vi',\n\t    81: 'id',\n\t    82: 'tl',\n\t    83: 'ms',\n\t    84: 'ms-Arab',\n\t    85: 'am',\n\t    86: 'ti',\n\t    87: 'om',\n\t    88: 'so',\n\t    89: 'sw',\n\t    90: 'rw',\n\t    91: 'rn',\n\t    92: 'ny',\n\t    93: 'mg',\n\t    94: 'eo',\n\t    128: 'cy',\n\t    129: 'eu',\n\t    130: 'ca',\n\t    131: 'la',\n\t    132: 'qu',\n\t    133: 'gn',\n\t    134: 'ay',\n\t    135: 'tt',\n\t    136: 'ug',\n\t    137: 'dz',\n\t    138: 'jv',\n\t    139: 'su',\n\t    140: 'gl',\n\t    141: 'af',\n\t    142: 'br',\n\t    143: 'iu',\n\t    144: 'gd',\n\t    145: 'gv',\n\t    146: 'ga',\n\t    147: 'to',\n\t    148: 'el-polyton',\n\t    149: 'kl',\n\t    150: 'az',\n\t    151: 'nn'\n\t};\n\n\t// MacOS language ID → MacOS script ID\n\t//\n\t// Note that the script ID is not sufficient to determine what encoding\n\t// to use in TrueType files. For some languages, MacOS used a modification\n\t// of a mainstream script. For example, an Icelandic name would be stored\n\t// with smRoman in the TrueType naming table, but the actual encoding\n\t// is a special Icelandic version of the normal Macintosh Roman encoding.\n\t// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal\n\t// Syllables but MacOS had run out of available script codes, so this was\n\t// done as a (pretty radical) \"modification\" of Ethiopic.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageToScript = {\n\t    0: 0,  // langEnglish → smRoman\n\t    1: 0,  // langFrench → smRoman\n\t    2: 0,  // langGerman → smRoman\n\t    3: 0,  // langItalian → smRoman\n\t    4: 0,  // langDutch → smRoman\n\t    5: 0,  // langSwedish → smRoman\n\t    6: 0,  // langSpanish → smRoman\n\t    7: 0,  // langDanish → smRoman\n\t    8: 0,  // langPortuguese → smRoman\n\t    9: 0,  // langNorwegian → smRoman\n\t    10: 5,  // langHebrew → smHebrew\n\t    11: 1,  // langJapanese → smJapanese\n\t    12: 4,  // langArabic → smArabic\n\t    13: 0,  // langFinnish → smRoman\n\t    14: 6,  // langGreek → smGreek\n\t    15: 0,  // langIcelandic → smRoman (modified)\n\t    16: 0,  // langMaltese → smRoman\n\t    17: 0,  // langTurkish → smRoman (modified)\n\t    18: 0,  // langCroatian → smRoman (modified)\n\t    19: 2,  // langTradChinese → smTradChinese\n\t    20: 4,  // langUrdu → smArabic\n\t    21: 9,  // langHindi → smDevanagari\n\t    22: 21,  // langThai → smThai\n\t    23: 3,  // langKorean → smKorean\n\t    24: 29,  // langLithuanian → smCentralEuroRoman\n\t    25: 29,  // langPolish → smCentralEuroRoman\n\t    26: 29,  // langHungarian → smCentralEuroRoman\n\t    27: 29,  // langEstonian → smCentralEuroRoman\n\t    28: 29,  // langLatvian → smCentralEuroRoman\n\t    29: 0,  // langSami → smRoman\n\t    30: 0,  // langFaroese → smRoman (modified)\n\t    31: 4,  // langFarsi → smArabic (modified)\n\t    32: 7,  // langRussian → smCyrillic\n\t    33: 25,  // langSimpChinese → smSimpChinese\n\t    34: 0,  // langFlemish → smRoman\n\t    35: 0,  // langIrishGaelic → smRoman (modified)\n\t    36: 0,  // langAlbanian → smRoman\n\t    37: 0,  // langRomanian → smRoman (modified)\n\t    38: 29,  // langCzech → smCentralEuroRoman\n\t    39: 29,  // langSlovak → smCentralEuroRoman\n\t    40: 0,  // langSlovenian → smRoman (modified)\n\t    41: 5,  // langYiddish → smHebrew\n\t    42: 7,  // langSerbian → smCyrillic\n\t    43: 7,  // langMacedonian → smCyrillic\n\t    44: 7,  // langBulgarian → smCyrillic\n\t    45: 7,  // langUkrainian → smCyrillic (modified)\n\t    46: 7,  // langByelorussian → smCyrillic\n\t    47: 7,  // langUzbek → smCyrillic\n\t    48: 7,  // langKazakh → smCyrillic\n\t    49: 7,  // langAzerbaijani → smCyrillic\n\t    50: 4,  // langAzerbaijanAr → smArabic\n\t    51: 24,  // langArmenian → smArmenian\n\t    52: 23,  // langGeorgian → smGeorgian\n\t    53: 7,  // langMoldavian → smCyrillic\n\t    54: 7,  // langKirghiz → smCyrillic\n\t    55: 7,  // langTajiki → smCyrillic\n\t    56: 7,  // langTurkmen → smCyrillic\n\t    57: 27,  // langMongolian → smMongolian\n\t    58: 7,  // langMongolianCyr → smCyrillic\n\t    59: 4,  // langPashto → smArabic\n\t    60: 4,  // langKurdish → smArabic\n\t    61: 4,  // langKashmiri → smArabic\n\t    62: 4,  // langSindhi → smArabic\n\t    63: 26,  // langTibetan → smTibetan\n\t    64: 9,  // langNepali → smDevanagari\n\t    65: 9,  // langSanskrit → smDevanagari\n\t    66: 9,  // langMarathi → smDevanagari\n\t    67: 13,  // langBengali → smBengali\n\t    68: 13,  // langAssamese → smBengali\n\t    69: 11,  // langGujarati → smGujarati\n\t    70: 10,  // langPunjabi → smGurmukhi\n\t    71: 12,  // langOriya → smOriya\n\t    72: 17,  // langMalayalam → smMalayalam\n\t    73: 16,  // langKannada → smKannada\n\t    74: 14,  // langTamil → smTamil\n\t    75: 15,  // langTelugu → smTelugu\n\t    76: 18,  // langSinhalese → smSinhalese\n\t    77: 19,  // langBurmese → smBurmese\n\t    78: 20,  // langKhmer → smKhmer\n\t    79: 22,  // langLao → smLao\n\t    80: 30,  // langVietnamese → smVietnamese\n\t    81: 0,  // langIndonesian → smRoman\n\t    82: 0,  // langTagalog → smRoman\n\t    83: 0,  // langMalayRoman → smRoman\n\t    84: 4,  // langMalayArabic → smArabic\n\t    85: 28,  // langAmharic → smEthiopic\n\t    86: 28,  // langTigrinya → smEthiopic\n\t    87: 28,  // langOromo → smEthiopic\n\t    88: 0,  // langSomali → smRoman\n\t    89: 0,  // langSwahili → smRoman\n\t    90: 0,  // langKinyarwanda → smRoman\n\t    91: 0,  // langRundi → smRoman\n\t    92: 0,  // langNyanja → smRoman\n\t    93: 0,  // langMalagasy → smRoman\n\t    94: 0,  // langEsperanto → smRoman\n\t    128: 0,  // langWelsh → smRoman (modified)\n\t    129: 0,  // langBasque → smRoman\n\t    130: 0,  // langCatalan → smRoman\n\t    131: 0,  // langLatin → smRoman\n\t    132: 0,  // langQuechua → smRoman\n\t    133: 0,  // langGuarani → smRoman\n\t    134: 0,  // langAymara → smRoman\n\t    135: 7,  // langTatar → smCyrillic\n\t    136: 4,  // langUighur → smArabic\n\t    137: 26,  // langDzongkha → smTibetan\n\t    138: 0,  // langJavaneseRom → smRoman\n\t    139: 0,  // langSundaneseRom → smRoman\n\t    140: 0,  // langGalician → smRoman\n\t    141: 0,  // langAfrikaans → smRoman\n\t    142: 0,  // langBreton → smRoman (modified)\n\t    143: 28,  // langInuktitut → smEthiopic (modified)\n\t    144: 0,  // langScottishGaelic → smRoman (modified)\n\t    145: 0,  // langManxGaelic → smRoman (modified)\n\t    146: 0,  // langIrishGaelicScript → smRoman (modified)\n\t    147: 0,  // langTongan → smRoman\n\t    148: 6,  // langGreekAncient → smRoman\n\t    149: 0,  // langGreenlandic → smRoman\n\t    150: 0,  // langAzerbaijanRoman → smRoman\n\t    151: 0   // langNynorsk → smRoman\n\t};\n\n\t// While Microsoft indicates a region/country for all its language\n\t// IDs, we omit the region code if it's equal to the \"most likely\n\t// region subtag\" according to Unicode CLDR. For scripts, we omit\n\t// the subtag if it is equal to the Suppress-Script entry in the\n\t// IANA language subtag registry for IETF BCP 47.\n\t//\n\t// For example, Microsoft states that its language code 0x041A is\n\t// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'\n\t// and not 'hr-HR' because Croatia is the default country for Croatian,\n\t// according to Unicode CLDR. As another example, Microsoft states\n\t// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform\n\t// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script\n\t// for the Croatian language, according to IANA.\n\t//\n\t// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html\n\t// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\n\tvar windowsLanguages = {\n\t    0x0436: 'af',\n\t    0x041C: 'sq',\n\t    0x0484: 'gsw',\n\t    0x045E: 'am',\n\t    0x1401: 'ar-DZ',\n\t    0x3C01: 'ar-BH',\n\t    0x0C01: 'ar',\n\t    0x0801: 'ar-IQ',\n\t    0x2C01: 'ar-JO',\n\t    0x3401: 'ar-KW',\n\t    0x3001: 'ar-LB',\n\t    0x1001: 'ar-LY',\n\t    0x1801: 'ary',\n\t    0x2001: 'ar-OM',\n\t    0x4001: 'ar-QA',\n\t    0x0401: 'ar-SA',\n\t    0x2801: 'ar-SY',\n\t    0x1C01: 'aeb',\n\t    0x3801: 'ar-AE',\n\t    0x2401: 'ar-YE',\n\t    0x042B: 'hy',\n\t    0x044D: 'as',\n\t    0x082C: 'az-Cyrl',\n\t    0x042C: 'az',\n\t    0x046D: 'ba',\n\t    0x042D: 'eu',\n\t    0x0423: 'be',\n\t    0x0845: 'bn',\n\t    0x0445: 'bn-IN',\n\t    0x201A: 'bs-Cyrl',\n\t    0x141A: 'bs',\n\t    0x047E: 'br',\n\t    0x0402: 'bg',\n\t    0x0403: 'ca',\n\t    0x0C04: 'zh-HK',\n\t    0x1404: 'zh-MO',\n\t    0x0804: 'zh',\n\t    0x1004: 'zh-SG',\n\t    0x0404: 'zh-TW',\n\t    0x0483: 'co',\n\t    0x041A: 'hr',\n\t    0x101A: 'hr-BA',\n\t    0x0405: 'cs',\n\t    0x0406: 'da',\n\t    0x048C: 'prs',\n\t    0x0465: 'dv',\n\t    0x0813: 'nl-BE',\n\t    0x0413: 'nl',\n\t    0x0C09: 'en-AU',\n\t    0x2809: 'en-BZ',\n\t    0x1009: 'en-CA',\n\t    0x2409: 'en-029',\n\t    0x4009: 'en-IN',\n\t    0x1809: 'en-IE',\n\t    0x2009: 'en-JM',\n\t    0x4409: 'en-MY',\n\t    0x1409: 'en-NZ',\n\t    0x3409: 'en-PH',\n\t    0x4809: 'en-SG',\n\t    0x1C09: 'en-ZA',\n\t    0x2C09: 'en-TT',\n\t    0x0809: 'en-GB',\n\t    0x0409: 'en',\n\t    0x3009: 'en-ZW',\n\t    0x0425: 'et',\n\t    0x0438: 'fo',\n\t    0x0464: 'fil',\n\t    0x040B: 'fi',\n\t    0x080C: 'fr-BE',\n\t    0x0C0C: 'fr-CA',\n\t    0x040C: 'fr',\n\t    0x140C: 'fr-LU',\n\t    0x180C: 'fr-MC',\n\t    0x100C: 'fr-CH',\n\t    0x0462: 'fy',\n\t    0x0456: 'gl',\n\t    0x0437: 'ka',\n\t    0x0C07: 'de-AT',\n\t    0x0407: 'de',\n\t    0x1407: 'de-LI',\n\t    0x1007: 'de-LU',\n\t    0x0807: 'de-CH',\n\t    0x0408: 'el',\n\t    0x046F: 'kl',\n\t    0x0447: 'gu',\n\t    0x0468: 'ha',\n\t    0x040D: 'he',\n\t    0x0439: 'hi',\n\t    0x040E: 'hu',\n\t    0x040F: 'is',\n\t    0x0470: 'ig',\n\t    0x0421: 'id',\n\t    0x045D: 'iu',\n\t    0x085D: 'iu-Latn',\n\t    0x083C: 'ga',\n\t    0x0434: 'xh',\n\t    0x0435: 'zu',\n\t    0x0410: 'it',\n\t    0x0810: 'it-CH',\n\t    0x0411: 'ja',\n\t    0x044B: 'kn',\n\t    0x043F: 'kk',\n\t    0x0453: 'km',\n\t    0x0486: 'quc',\n\t    0x0487: 'rw',\n\t    0x0441: 'sw',\n\t    0x0457: 'kok',\n\t    0x0412: 'ko',\n\t    0x0440: 'ky',\n\t    0x0454: 'lo',\n\t    0x0426: 'lv',\n\t    0x0427: 'lt',\n\t    0x082E: 'dsb',\n\t    0x046E: 'lb',\n\t    0x042F: 'mk',\n\t    0x083E: 'ms-BN',\n\t    0x043E: 'ms',\n\t    0x044C: 'ml',\n\t    0x043A: 'mt',\n\t    0x0481: 'mi',\n\t    0x047A: 'arn',\n\t    0x044E: 'mr',\n\t    0x047C: 'moh',\n\t    0x0450: 'mn',\n\t    0x0850: 'mn-CN',\n\t    0x0461: 'ne',\n\t    0x0414: 'nb',\n\t    0x0814: 'nn',\n\t    0x0482: 'oc',\n\t    0x0448: 'or',\n\t    0x0463: 'ps',\n\t    0x0415: 'pl',\n\t    0x0416: 'pt',\n\t    0x0816: 'pt-PT',\n\t    0x0446: 'pa',\n\t    0x046B: 'qu-BO',\n\t    0x086B: 'qu-EC',\n\t    0x0C6B: 'qu',\n\t    0x0418: 'ro',\n\t    0x0417: 'rm',\n\t    0x0419: 'ru',\n\t    0x243B: 'smn',\n\t    0x103B: 'smj-NO',\n\t    0x143B: 'smj',\n\t    0x0C3B: 'se-FI',\n\t    0x043B: 'se',\n\t    0x083B: 'se-SE',\n\t    0x203B: 'sms',\n\t    0x183B: 'sma-NO',\n\t    0x1C3B: 'sms',\n\t    0x044F: 'sa',\n\t    0x1C1A: 'sr-Cyrl-BA',\n\t    0x0C1A: 'sr',\n\t    0x181A: 'sr-Latn-BA',\n\t    0x081A: 'sr-Latn',\n\t    0x046C: 'nso',\n\t    0x0432: 'tn',\n\t    0x045B: 'si',\n\t    0x041B: 'sk',\n\t    0x0424: 'sl',\n\t    0x2C0A: 'es-AR',\n\t    0x400A: 'es-BO',\n\t    0x340A: 'es-CL',\n\t    0x240A: 'es-CO',\n\t    0x140A: 'es-CR',\n\t    0x1C0A: 'es-DO',\n\t    0x300A: 'es-EC',\n\t    0x440A: 'es-SV',\n\t    0x100A: 'es-GT',\n\t    0x480A: 'es-HN',\n\t    0x080A: 'es-MX',\n\t    0x4C0A: 'es-NI',\n\t    0x180A: 'es-PA',\n\t    0x3C0A: 'es-PY',\n\t    0x280A: 'es-PE',\n\t    0x500A: 'es-PR',\n\n\t    // Microsoft has defined two different language codes for\n\t    // “Spanish with modern sorting” and “Spanish with traditional\n\t    // sorting”. This makes sense for collation APIs, and it would be\n\t    // possible to express this in BCP 47 language tags via Unicode\n\t    // extensions (eg., es-u-co-trad is Spanish with traditional\n\t    // sorting). However, for storing names in fonts, the distinction\n\t    // does not make sense, so we give “es” in both cases.\n\t    0x0C0A: 'es',\n\t    0x040A: 'es',\n\n\t    0x540A: 'es-US',\n\t    0x380A: 'es-UY',\n\t    0x200A: 'es-VE',\n\t    0x081D: 'sv-FI',\n\t    0x041D: 'sv',\n\t    0x045A: 'syr',\n\t    0x0428: 'tg',\n\t    0x085F: 'tzm',\n\t    0x0449: 'ta',\n\t    0x0444: 'tt',\n\t    0x044A: 'te',\n\t    0x041E: 'th',\n\t    0x0451: 'bo',\n\t    0x041F: 'tr',\n\t    0x0442: 'tk',\n\t    0x0480: 'ug',\n\t    0x0422: 'uk',\n\t    0x042E: 'hsb',\n\t    0x0420: 'ur',\n\t    0x0843: 'uz-Cyrl',\n\t    0x0443: 'uz',\n\t    0x042A: 'vi',\n\t    0x0452: 'cy',\n\t    0x0488: 'wo',\n\t    0x0485: 'sah',\n\t    0x0478: 'ii',\n\t    0x046A: 'yo'\n\t};\n\n\t// Returns a IETF BCP 47 language code, for example 'zh-Hant'\n\t// for 'Chinese in the traditional script'.\n\tfunction getLanguageCode(platformID, languageID, ltag) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            if (languageID === 0xFFFF) {\n\t                return 'und';\n\t            } else if (ltag) {\n\t                return ltag[languageID];\n\t            }\n\n\t            break;\n\n\t        case 1:  // Macintosh\n\t            return macLanguages[languageID];\n\n\t        case 3:  // Windows\n\t            return windowsLanguages[languageID];\n\t    }\n\n\t    return undefined;\n\t}\n\n\tvar utf16 = 'utf-16';\n\n\t// MacOS script ID → encoding. This table stores the default case,\n\t// which can be overridden by macLanguageEncodings.\n\tvar macScriptEncodings = {\n\t    0: 'macintosh',           // smRoman\n\t    1: 'x-mac-japanese',      // smJapanese\n\t    2: 'x-mac-chinesetrad',   // smTradChinese\n\t    3: 'x-mac-korean',        // smKorean\n\t    6: 'x-mac-greek',         // smGreek\n\t    7: 'x-mac-cyrillic',      // smCyrillic\n\t    9: 'x-mac-devanagai',     // smDevanagari\n\t    10: 'x-mac-gurmukhi',     // smGurmukhi\n\t    11: 'x-mac-gujarati',     // smGujarati\n\t    12: 'x-mac-oriya',        // smOriya\n\t    13: 'x-mac-bengali',      // smBengali\n\t    14: 'x-mac-tamil',        // smTamil\n\t    15: 'x-mac-telugu',       // smTelugu\n\t    16: 'x-mac-kannada',      // smKannada\n\t    17: 'x-mac-malayalam',    // smMalayalam\n\t    18: 'x-mac-sinhalese',    // smSinhalese\n\t    19: 'x-mac-burmese',      // smBurmese\n\t    20: 'x-mac-khmer',        // smKhmer\n\t    21: 'x-mac-thai',         // smThai\n\t    22: 'x-mac-lao',          // smLao\n\t    23: 'x-mac-georgian',     // smGeorgian\n\t    24: 'x-mac-armenian',     // smArmenian\n\t    25: 'x-mac-chinesesimp',  // smSimpChinese\n\t    26: 'x-mac-tibetan',      // smTibetan\n\t    27: 'x-mac-mongolian',    // smMongolian\n\t    28: 'x-mac-ethiopic',     // smEthiopic\n\t    29: 'x-mac-ce',           // smCentralEuroRoman\n\t    30: 'x-mac-vietnamese',   // smVietnamese\n\t    31: 'x-mac-extarabic'     // smExtArabic\n\t};\n\n\t// MacOS language ID → encoding. This table stores the exceptional\n\t// cases, which override macScriptEncodings. For writing MacOS naming\n\t// tables, we need to emit a MacOS script ID. Therefore, we cannot\n\t// merge macScriptEncodings into macLanguageEncodings.\n\t//\n\t// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\tvar macLanguageEncodings = {\n\t    15: 'x-mac-icelandic',    // langIcelandic\n\t    17: 'x-mac-turkish',      // langTurkish\n\t    18: 'x-mac-croatian',     // langCroatian\n\t    24: 'x-mac-ce',           // langLithuanian\n\t    25: 'x-mac-ce',           // langPolish\n\t    26: 'x-mac-ce',           // langHungarian\n\t    27: 'x-mac-ce',           // langEstonian\n\t    28: 'x-mac-ce',           // langLatvian\n\t    30: 'x-mac-icelandic',    // langFaroese\n\t    37: 'x-mac-romanian',     // langRomanian\n\t    38: 'x-mac-ce',           // langCzech\n\t    39: 'x-mac-ce',           // langSlovak\n\t    40: 'x-mac-ce',           // langSlovenian\n\t    143: 'x-mac-inuit',       // langInuktitut\n\t    146: 'x-mac-gaelic'       // langIrishGaelicScript\n\t};\n\n\tfunction getEncoding(platformID, encodingID, languageID) {\n\t    switch (platformID) {\n\t        case 0:  // Unicode\n\t            return utf16;\n\n\t        case 1:  // Apple Macintosh\n\t            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];\n\n\t        case 3:  // Microsoft Windows\n\t            if (encodingID === 1 || encodingID === 10) {\n\t                return utf16;\n\t            }\n\n\t            break;\n\t    }\n\n\t    return undefined;\n\t}\n\n\t// Parse the naming `name` table.\n\t// FIXME: Format 1 additional fields are not supported yet.\n\t// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].\n\tfunction parseNameTable(data, start, ltag) {\n\t    var name = {};\n\t    var p = new parse.Parser(data, start);\n\t    var format = p.parseUShort();\n\t    var count = p.parseUShort();\n\t    var stringOffset = p.offset + p.parseUShort();\n\t    for (var i = 0; i < count; i++) {\n\t        var platformID = p.parseUShort();\n\t        var encodingID = p.parseUShort();\n\t        var languageID = p.parseUShort();\n\t        var nameID = p.parseUShort();\n\t        var property = nameTableNames[nameID] || nameID;\n\t        var byteLength = p.parseUShort();\n\t        var offset = p.parseUShort();\n\t        var language = getLanguageCode(platformID, languageID, ltag);\n\t        var encoding = getEncoding(platformID, encodingID, languageID);\n\t        if (encoding !== undefined && language !== undefined) {\n\t            var text = (void 0);\n\t            if (encoding === utf16) {\n\t                text = decode.UTF16(data, stringOffset + offset, byteLength);\n\t            } else {\n\t                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);\n\t            }\n\n\t            if (text) {\n\t                var translations = name[property];\n\t                if (translations === undefined) {\n\t                    translations = name[property] = {};\n\t                }\n\n\t                translations[language] = text;\n\t            }\n\t        }\n\t    }\n\n\t    var langTagCount = 0;\n\t    if (format === 1) {\n\t        // FIXME: Also handle Microsoft's 'name' table 1.\n\t        langTagCount = p.parseUShort();\n\t    }\n\n\t    return name;\n\t}\n\n\t// {23: 'foo'} → {'foo': 23}\n\t// ['bar', 'baz'] → {'bar': 0, 'baz': 1}\n\tfunction reverseDict(dict) {\n\t    var result = {};\n\t    for (var key in dict) {\n\t        result[dict[key]] = parseInt(key);\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n\t    return new table.Record('NameRecord', [\n\t        {name: 'platformID', type: 'USHORT', value: platformID},\n\t        {name: 'encodingID', type: 'USHORT', value: encodingID},\n\t        {name: 'languageID', type: 'USHORT', value: languageID},\n\t        {name: 'nameID', type: 'USHORT', value: nameID},\n\t        {name: 'length', type: 'USHORT', value: length},\n\t        {name: 'offset', type: 'USHORT', value: offset}\n\t    ]);\n\t}\n\n\t// Finds the position of needle in haystack, or -1 if not there.\n\t// Like String.indexOf(), but for arrays.\n\tfunction findSubArray(needle, haystack) {\n\t    var needleLength = needle.length;\n\t    var limit = haystack.length - needleLength + 1;\n\n\t    loop:\n\t    for (var pos = 0; pos < limit; pos++) {\n\t        for (; pos < limit; pos++) {\n\t            for (var k = 0; k < needleLength; k++) {\n\t                if (haystack[pos + k] !== needle[k]) {\n\t                    continue loop;\n\t                }\n\t            }\n\n\t            return pos;\n\t        }\n\t    }\n\n\t    return -1;\n\t}\n\n\tfunction addStringToPool(s, pool) {\n\t    var offset = findSubArray(s, pool);\n\t    if (offset < 0) {\n\t        offset = pool.length;\n\t        var i = 0;\n\t        var len = s.length;\n\t        for (; i < len; ++i) {\n\t            pool.push(s[i]);\n\t        }\n\n\t    }\n\n\t    return offset;\n\t}\n\n\tfunction makeNameTable(names, ltag) {\n\t    var nameID;\n\t    var nameIDs = [];\n\n\t    var namesWithNumericKeys = {};\n\t    var nameTableIds = reverseDict(nameTableNames);\n\t    for (var key in names) {\n\t        var id = nameTableIds[key];\n\t        if (id === undefined) {\n\t            id = key;\n\t        }\n\n\t        nameID = parseInt(id);\n\n\t        if (isNaN(nameID)) {\n\t            throw new Error('Name table entry \"' + key + '\" does not exist, see nameTableNames for complete list.');\n\t        }\n\n\t        namesWithNumericKeys[nameID] = names[key];\n\t        nameIDs.push(nameID);\n\t    }\n\n\t    var macLanguageIds = reverseDict(macLanguages);\n\t    var windowsLanguageIds = reverseDict(windowsLanguages);\n\n\t    var nameRecords = [];\n\t    var stringPool = [];\n\n\t    for (var i = 0; i < nameIDs.length; i++) {\n\t        nameID = nameIDs[i];\n\t        var translations = namesWithNumericKeys[nameID];\n\t        for (var lang in translations) {\n\t            var text = translations[lang];\n\n\t            // For MacOS, we try to emit the name in the form that was introduced\n\t            // in the initial version of the TrueType spec (in the late 1980s).\n\t            // However, this can fail for various reasons: the requested BCP 47\n\t            // language code might not have an old-style Mac equivalent;\n\t            // we might not have a codec for the needed character encoding;\n\t            // or the name might contain characters that cannot be expressed\n\t            // in the old-style Macintosh encoding. In case of failure, we emit\n\t            // the name in a more modern fashion (Unicode encoding with BCP 47\n\t            // language tags) that is recognized by MacOS 10.5, released in 2009.\n\t            // If fonts were only read by operating systems, we could simply\n\t            // emit all names in the modern form; this would be much easier.\n\t            // However, there are many applications and libraries that read\n\t            // 'name' tables directly, and these will usually only recognize\n\t            // the ancient form (silently skipping the unrecognized names).\n\t            var macPlatform = 1;  // Macintosh\n\t            var macLanguage = macLanguageIds[lang];\n\t            var macScript = macLanguageToScript[macLanguage];\n\t            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);\n\t            var macName = encode.MACSTRING(text, macEncoding);\n\t            if (macName === undefined) {\n\t                macPlatform = 0;  // Unicode\n\t                macLanguage = ltag.indexOf(lang);\n\t                if (macLanguage < 0) {\n\t                    macLanguage = ltag.length;\n\t                    ltag.push(lang);\n\t                }\n\n\t                macScript = 4;  // Unicode 2.0 and later\n\t                macName = encode.UTF16(text);\n\t            }\n\n\t            var macNameOffset = addStringToPool(macName, stringPool);\n\t            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,\n\t                                            nameID, macName.length, macNameOffset));\n\n\t            var winLanguage = windowsLanguageIds[lang];\n\t            if (winLanguage !== undefined) {\n\t                var winName = encode.UTF16(text);\n\t                var winNameOffset = addStringToPool(winName, stringPool);\n\t                nameRecords.push(makeNameRecord(3, 1, winLanguage,\n\t                                                nameID, winName.length, winNameOffset));\n\t            }\n\t        }\n\t    }\n\n\t    nameRecords.sort(function(a, b) {\n\t        return ((a.platformID - b.platformID) ||\n\t                (a.encodingID - b.encodingID) ||\n\t                (a.languageID - b.languageID) ||\n\t                (a.nameID - b.nameID));\n\t    });\n\n\t    var t = new table.Table('name', [\n\t        {name: 'format', type: 'USHORT', value: 0},\n\t        {name: 'count', type: 'USHORT', value: nameRecords.length},\n\t        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}\n\t    ]);\n\n\t    for (var r = 0; r < nameRecords.length; r++) {\n\t        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});\n\t    }\n\n\t    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});\n\t    return t;\n\t}\n\n\tvar _name = { parse: parseNameTable, make: makeNameTable };\n\n\t// The `OS/2` table contains metrics required in OpenType fonts.\n\n\tvar unicodeRanges = [\n\t    {begin: 0x0000, end: 0x007F}, // Basic Latin\n\t    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n\t    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n\t    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n\t    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n\t    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n\t    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n\t    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n\t    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n\t    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n\t    {begin: 0x0530, end: 0x058F}, // Armenian\n\t    {begin: 0x0590, end: 0x05FF}, // Hebrew\n\t    {begin: 0xA500, end: 0xA63F}, // Vai\n\t    {begin: 0x0600, end: 0x06FF}, // Arabic\n\t    {begin: 0x07C0, end: 0x07FF}, // NKo\n\t    {begin: 0x0900, end: 0x097F}, // Devanagari\n\t    {begin: 0x0980, end: 0x09FF}, // Bengali\n\t    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n\t    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n\t    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n\t    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n\t    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n\t    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n\t    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n\t    {begin: 0x0E00, end: 0x0E7F}, // Thai\n\t    {begin: 0x0E80, end: 0x0EFF}, // Lao\n\t    {begin: 0x10A0, end: 0x10FF}, // Georgian\n\t    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n\t    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n\t    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n\t    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n\t    {begin: 0x2000, end: 0x206F}, // General Punctuation\n\t    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n\t    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n\t    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n\t    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n\t    {begin: 0x2150, end: 0x218F}, // Number Forms\n\t    {begin: 0x2190, end: 0x21FF}, // Arrows\n\t    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n\t    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n\t    {begin: 0x2400, end: 0x243F}, // Control Pictures\n\t    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n\t    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n\t    {begin: 0x2500, end: 0x257F}, // Box Drawing\n\t    {begin: 0x2580, end: 0x259F}, // Block Elements\n\t    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n\t    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n\t    {begin: 0x2700, end: 0x27BF}, // Dingbats\n\t    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n\t    {begin: 0x3040, end: 0x309F}, // Hiragana\n\t    {begin: 0x30A0, end: 0x30FF}, // Katakana\n\t    {begin: 0x3100, end: 0x312F}, // Bopomofo\n\t    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n\t    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n\t    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n\t    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n\t    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n\t    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n\t    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n\t    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n\t    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n\t    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n\t    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n\t    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n\t    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n\t    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n\t    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n\t    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n\t    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n\t    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n\t    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n\t    {begin: 0x0700, end: 0x074F}, // Syriac\n\t    {begin: 0x0780, end: 0x07BF}, // Thaana\n\t    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n\t    {begin: 0x1000, end: 0x109F}, // Myanmar\n\t    {begin: 0x1200, end: 0x137F}, // Ethiopic\n\t    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n\t    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n\t    {begin: 0x1680, end: 0x169F}, // Ogham\n\t    {begin: 0x16A0, end: 0x16FF}, // Runic\n\t    {begin: 0x1780, end: 0x17FF}, // Khmer\n\t    {begin: 0x1800, end: 0x18AF}, // Mongolian\n\t    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n\t    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n\t    {begin: 0x1700, end: 0x171F}, // Tagalog\n\t    {begin: 0x10300, end: 0x1032F}, // Old Italic\n\t    {begin: 0x10330, end: 0x1034F}, // Gothic\n\t    {begin: 0x10400, end: 0x1044F}, // Deseret\n\t    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n\t    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n\t    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n\t    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n\t    {begin: 0xE0000, end: 0xE007F}, // Tags\n\t    {begin: 0x1900, end: 0x194F}, // Limbu\n\t    {begin: 0x1950, end: 0x197F}, // Tai Le\n\t    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n\t    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n\t    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n\t    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n\t    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n\t    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n\t    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n\t    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n\t    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n\t    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n\t    {begin: 0x10450, end: 0x1047F}, // Shavian\n\t    {begin: 0x10480, end: 0x104AF}, // Osmanya\n\t    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n\t    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n\t    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n\t    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n\t    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n\t    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n\t    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n\t    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n\t    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n\t    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n\t    {begin: 0xA930, end: 0xA95F}, // Rejang\n\t    {begin: 0xAA00, end: 0xAA5F}, // Cham\n\t    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n\t    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n\t    {begin: 0x102A0, end: 0x102DF}, // Carian\n\t    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n\t];\n\n\tfunction getUnicodeRange(unicode) {\n\t    for (var i = 0; i < unicodeRanges.length; i += 1) {\n\t        var range = unicodeRanges[i];\n\t        if (unicode >= range.begin && unicode < range.end) {\n\t            return i;\n\t        }\n\t    }\n\n\t    return -1;\n\t}\n\n\t// Parse the OS/2 and Windows metrics `OS/2` table\n\tfunction parseOS2Table(data, start) {\n\t    var os2 = {};\n\t    var p = new parse.Parser(data, start);\n\t    os2.version = p.parseUShort();\n\t    os2.xAvgCharWidth = p.parseShort();\n\t    os2.usWeightClass = p.parseUShort();\n\t    os2.usWidthClass = p.parseUShort();\n\t    os2.fsType = p.parseUShort();\n\t    os2.ySubscriptXSize = p.parseShort();\n\t    os2.ySubscriptYSize = p.parseShort();\n\t    os2.ySubscriptXOffset = p.parseShort();\n\t    os2.ySubscriptYOffset = p.parseShort();\n\t    os2.ySuperscriptXSize = p.parseShort();\n\t    os2.ySuperscriptYSize = p.parseShort();\n\t    os2.ySuperscriptXOffset = p.parseShort();\n\t    os2.ySuperscriptYOffset = p.parseShort();\n\t    os2.yStrikeoutSize = p.parseShort();\n\t    os2.yStrikeoutPosition = p.parseShort();\n\t    os2.sFamilyClass = p.parseShort();\n\t    os2.panose = [];\n\t    for (var i = 0; i < 10; i++) {\n\t        os2.panose[i] = p.parseByte();\n\t    }\n\n\t    os2.ulUnicodeRange1 = p.parseULong();\n\t    os2.ulUnicodeRange2 = p.parseULong();\n\t    os2.ulUnicodeRange3 = p.parseULong();\n\t    os2.ulUnicodeRange4 = p.parseULong();\n\t    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n\t    os2.fsSelection = p.parseUShort();\n\t    os2.usFirstCharIndex = p.parseUShort();\n\t    os2.usLastCharIndex = p.parseUShort();\n\t    os2.sTypoAscender = p.parseShort();\n\t    os2.sTypoDescender = p.parseShort();\n\t    os2.sTypoLineGap = p.parseShort();\n\t    os2.usWinAscent = p.parseUShort();\n\t    os2.usWinDescent = p.parseUShort();\n\t    if (os2.version >= 1) {\n\t        os2.ulCodePageRange1 = p.parseULong();\n\t        os2.ulCodePageRange2 = p.parseULong();\n\t    }\n\n\t    if (os2.version >= 2) {\n\t        os2.sxHeight = p.parseShort();\n\t        os2.sCapHeight = p.parseShort();\n\t        os2.usDefaultChar = p.parseUShort();\n\t        os2.usBreakChar = p.parseUShort();\n\t        os2.usMaxContent = p.parseUShort();\n\t    }\n\n\t    return os2;\n\t}\n\n\tfunction makeOS2Table(options) {\n\t    return new table.Table('OS/2', [\n\t        {name: 'version', type: 'USHORT', value: 0x0003},\n\t        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n\t        {name: 'usWeightClass', type: 'USHORT', value: 0},\n\t        {name: 'usWidthClass', type: 'USHORT', value: 0},\n\t        {name: 'fsType', type: 'USHORT', value: 0},\n\t        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n\t        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n\t        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n\t        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n\t        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n\t        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n\t        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n\t        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n\t        {name: 'bFamilyType', type: 'BYTE', value: 0},\n\t        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n\t        {name: 'bWeight', type: 'BYTE', value: 0},\n\t        {name: 'bProportion', type: 'BYTE', value: 0},\n\t        {name: 'bContrast', type: 'BYTE', value: 0},\n\t        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n\t        {name: 'bArmStyle', type: 'BYTE', value: 0},\n\t        {name: 'bLetterform', type: 'BYTE', value: 0},\n\t        {name: 'bMidline', type: 'BYTE', value: 0},\n\t        {name: 'bXHeight', type: 'BYTE', value: 0},\n\t        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n\t        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n\t        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n\t        {name: 'fsSelection', type: 'USHORT', value: 0},\n\t        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n\t        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n\t        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n\t        {name: 'usWinAscent', type: 'USHORT', value: 0},\n\t        {name: 'usWinDescent', type: 'USHORT', value: 0},\n\t        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n\t        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n\t        {name: 'sxHeight', type: 'SHORT', value: 0},\n\t        {name: 'sCapHeight', type: 'SHORT', value: 0},\n\t        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n\t        {name: 'usBreakChar', type: 'USHORT', value: 0},\n\t        {name: 'usMaxContext', type: 'USHORT', value: 0}\n\t    ], options);\n\t}\n\n\tvar os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };\n\n\t// The `post` table stores additional PostScript information, such as glyph names.\n\n\t// Parse the PostScript `post` table\n\tfunction parsePostTable(data, start) {\n\t    var post = {};\n\t    var p = new parse.Parser(data, start);\n\t    post.version = p.parseVersion();\n\t    post.italicAngle = p.parseFixed();\n\t    post.underlinePosition = p.parseShort();\n\t    post.underlineThickness = p.parseShort();\n\t    post.isFixedPitch = p.parseULong();\n\t    post.minMemType42 = p.parseULong();\n\t    post.maxMemType42 = p.parseULong();\n\t    post.minMemType1 = p.parseULong();\n\t    post.maxMemType1 = p.parseULong();\n\t    switch (post.version) {\n\t        case 1:\n\t            post.names = standardNames.slice();\n\t            break;\n\t        case 2:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n\t            for (var i = 0; i < post.numberOfGlyphs; i++) {\n\t                post.glyphNameIndex[i] = p.parseUShort();\n\t            }\n\n\t            post.names = [];\n\t            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {\n\t                if (post.glyphNameIndex[i$1] >= standardNames.length) {\n\t                    var nameLength = p.parseChar();\n\t                    post.names.push(p.parseString(nameLength));\n\t                }\n\t            }\n\n\t            break;\n\t        case 2.5:\n\t            post.numberOfGlyphs = p.parseUShort();\n\t            post.offset = new Array(post.numberOfGlyphs);\n\t            for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {\n\t                post.offset[i$2] = p.parseChar();\n\t            }\n\n\t            break;\n\t    }\n\t    return post;\n\t}\n\n\tfunction makePostTable() {\n\t    return new table.Table('post', [\n\t        {name: 'version', type: 'FIXED', value: 0x00030000},\n\t        {name: 'italicAngle', type: 'FIXED', value: 0},\n\t        {name: 'underlinePosition', type: 'FWORD', value: 0},\n\t        {name: 'underlineThickness', type: 'FWORD', value: 0},\n\t        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n\t        {name: 'minMemType42', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType42', type: 'ULONG', value: 0},\n\t        {name: 'minMemType1', type: 'ULONG', value: 0},\n\t        {name: 'maxMemType1', type: 'ULONG', value: 0}\n\t    ]);\n\t}\n\n\tvar post = { parse: parsePostTable, make: makePostTable };\n\n\t// The `GSUB` table contains ligatures, among other things.\n\n\tvar subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\n\tsubtableParsers[1] = function parseLookup1() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            deltaGlyphId: this.parseUShort()\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            substitute: this.parseOffset16List()\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\n\tsubtableParsers[2] = function parseLookup2() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        sequences: this.parseListOfLists()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\n\tsubtableParsers[3] = function parseLookup3() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        alternateSets: this.parseListOfLists()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\n\tsubtableParsers[4] = function parseLookup4() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        ligatureSets: this.parseListOfLists(function() {\n\t            return {\n\t                ligGlyph: this.parseUShort(),\n\t                components: this.parseUShortList(this.parseUShort() - 1)\n\t            };\n\t        })\n\t    };\n\t};\n\n\tvar lookupRecordDesc = {\n\t    sequenceIndex: Parser.uShort,\n\t    lookupListIndex: Parser.uShort\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\n\tsubtableParsers[5] = function parseLookup5() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            ruleSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    input: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: substFormat,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            classDef: this.parsePointer(Parser.classDef),\n\t            classSets: this.parseListOfLists(function() {\n\t                var glyphCount = this.parseUShort();\n\t                var substCount = this.parseUShort();\n\t                return {\n\t                    classes: this.parseUShortList(glyphCount - 1),\n\t                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        var glyphCount = this.parseUShort();\n\t        var substCount = this.parseUShort();\n\t        return {\n\t            substFormat: substFormat,\n\t            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\n\tsubtableParsers[6] = function parseLookup6() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var substFormat = this.parseUShort();\n\t    if (substFormat === 1) {\n\t        return {\n\t            substFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            chainRuleSets: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 2) {\n\t        return {\n\t            substFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            backtrackClassDef: this.parsePointer(Parser.classDef),\n\t            inputClassDef: this.parsePointer(Parser.classDef),\n\t            lookaheadClassDef: this.parsePointer(Parser.classDef),\n\t            chainClassSet: this.parseListOfLists(function() {\n\t                return {\n\t                    backtrack: this.parseUShortList(),\n\t                    input: this.parseUShortList(this.parseShort() - 1),\n\t                    lookahead: this.parseUShortList(),\n\t                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t                };\n\t            })\n\t        };\n\t    } else if (substFormat === 3) {\n\t        return {\n\t            substFormat: 3,\n\t            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t            lookupRecords: this.parseRecordList(lookupRecordDesc)\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\n\tsubtableParsers[7] = function parseLookup7() {\n\t    // Extension Substitution subtable\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n\t    var extensionLookupType = this.parseUShort();\n\t    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n\t    return {\n\t        substFormat: 1,\n\t        lookupType: extensionLookupType,\n\t        extension: subtableParsers[extensionLookupType].call(extensionParser)\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\n\tsubtableParsers[8] = function parseLookup8() {\n\t    var substFormat = this.parseUShort();\n\t    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n\t    return {\n\t        substFormat: substFormat,\n\t        coverage: this.parsePointer(Parser.coverage),\n\t        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n\t        substitutes: this.parseUShortList()\n\t    };\n\t};\n\n\t// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\tfunction parseGsubTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion(1);\n\t    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');\n\t    if (tableVersion === 1) {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers)\n\t        };\n\t    } else {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers),\n\t            variations: p.parseFeatureVariationsList()\n\t        };\n\t    }\n\n\t}\n\n\t// GSUB Writing //////////////////////////////////////////////\n\tvar subtableMakers = new Array(9);\n\n\tsubtableMakers[1] = function makeLookup1(subtable) {\n\t    if (subtable.substFormat === 1) {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 1},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},\n\t            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n\t        ]);\n\t    } else {\n\t        return new table.Table('substitutionTable', [\n\t            {name: 'substFormat', type: 'USHORT', value: 2},\n\t            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t        ].concat(table.ushortList('substitute', subtable.substitute)));\n\t    }\n\t    check.fail('Lookup type 1 substFormat must be 1 or 2.');\n\t};\n\n\tsubtableMakers[3] = function makeLookup3(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {\n\t        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n\t    })));\n\t};\n\n\tsubtableMakers[4] = function makeLookup4(subtable) {\n\t    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n\t    return new table.Table('substitutionTable', [\n\t        {name: 'substFormat', type: 'USHORT', value: 1},\n\t        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n\t    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n\t        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {\n\t            return new table.Table('ligatureTable',\n\t                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n\t                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))\n\t            );\n\t        }));\n\t    })));\n\t};\n\n\tfunction makeGsubTable(gsub) {\n\t    return new table.Table('GSUB', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},\n\t        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},\n\t        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}\n\t    ]);\n\t}\n\n\tvar gsub = { parse: parseGsubTable, make: makeGsubTable };\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\n\t// Parse the metadata `meta` table.\n\t// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html\n\tfunction parseMetaTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 1, 'Unsupported META table version.');\n\t    p.parseULong(); // flags - currently unused and set to 0\n\t    p.parseULong(); // tableOffset\n\t    var numDataMaps = p.parseULong();\n\n\t    var tags = {};\n\t    for (var i = 0; i < numDataMaps; i++) {\n\t        var tag = p.parseTag();\n\t        var dataOffset = p.parseULong();\n\t        var dataLength = p.parseULong();\n\t        var text = decode.UTF8(data, start + dataOffset, dataLength);\n\n\t        tags[tag] = text;\n\t    }\n\t    return tags;\n\t}\n\n\tfunction makeMetaTable(tags) {\n\t    var numTags = Object.keys(tags).length;\n\t    var stringPool = '';\n\t    var stringPoolOffset = 16 + numTags * 12;\n\n\t    var result = new table.Table('meta', [\n\t        {name: 'version', type: 'ULONG', value: 1},\n\t        {name: 'flags', type: 'ULONG', value: 0},\n\t        {name: 'offset', type: 'ULONG', value: stringPoolOffset},\n\t        {name: 'numTags', type: 'ULONG', value: numTags}\n\t    ]);\n\n\t    for (var tag in tags) {\n\t        var pos = stringPool.length;\n\t        stringPool += tags[tag];\n\n\t        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});\n\t        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});\n\t        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});\n\t    }\n\n\t    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});\n\n\t    return result;\n\t}\n\n\tvar meta = { parse: parseMetaTable, make: makeMetaTable };\n\n\t// The `sfnt` wrapper provides organization for the tables in the font.\n\n\tfunction log2(v) {\n\t    return Math.log(v) / Math.log(2) | 0;\n\t}\n\n\tfunction computeCheckSum(bytes) {\n\t    while (bytes.length % 4 !== 0) {\n\t        bytes.push(0);\n\t    }\n\n\t    var sum = 0;\n\t    for (var i = 0; i < bytes.length; i += 4) {\n\t        sum += (bytes[i] << 24) +\n\t            (bytes[i + 1] << 16) +\n\t            (bytes[i + 2] << 8) +\n\t            (bytes[i + 3]);\n\t    }\n\n\t    sum %= Math.pow(2, 32);\n\t    return sum;\n\t}\n\n\tfunction makeTableRecord(tag, checkSum, offset, length) {\n\t    return new table.Record('Table Record', [\n\t        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n\t        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n\t        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n\t        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n\t    ]);\n\t}\n\n\tfunction makeSfntTable(tables) {\n\t    var sfnt = new table.Table('sfnt', [\n\t        {name: 'version', type: 'TAG', value: 'OTTO'},\n\t        {name: 'numTables', type: 'USHORT', value: 0},\n\t        {name: 'searchRange', type: 'USHORT', value: 0},\n\t        {name: 'entrySelector', type: 'USHORT', value: 0},\n\t        {name: 'rangeShift', type: 'USHORT', value: 0}\n\t    ]);\n\t    sfnt.tables = tables;\n\t    sfnt.numTables = tables.length;\n\t    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n\t    sfnt.searchRange = 16 * highestPowerOf2;\n\t    sfnt.entrySelector = log2(highestPowerOf2);\n\t    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n\t    var recordFields = [];\n\t    var tableFields = [];\n\n\t    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n\t    while (offset % 4 !== 0) {\n\t        offset += 1;\n\t        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t    }\n\n\t    for (var i = 0; i < tables.length; i += 1) {\n\t        var t = tables[i];\n\t        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n\t        var tableLength = t.sizeOf();\n\t        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n\t        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});\n\t        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});\n\t        offset += tableLength;\n\t        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n\t        while (offset % 4 !== 0) {\n\t            offset += 1;\n\t            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n\t        }\n\t    }\n\n\t    // Table records need to be sorted alphabetically.\n\t    recordFields.sort(function(r1, r2) {\n\t        if (r1.value.tag > r2.value.tag) {\n\t            return 1;\n\t        } else {\n\t            return -1;\n\t        }\n\t    });\n\n\t    sfnt.fields = sfnt.fields.concat(recordFields);\n\t    sfnt.fields = sfnt.fields.concat(tableFields);\n\t    return sfnt;\n\t}\n\n\t// Get the metrics for a character. If the string has more than one character\n\t// this function returns metrics for the first available character.\n\t// You can provide optional fallback metrics if no characters are available.\n\tfunction metricsForChar(font, chars, notFoundMetrics) {\n\t    for (var i = 0; i < chars.length; i += 1) {\n\t        var glyphIndex = font.charToGlyphIndex(chars[i]);\n\t        if (glyphIndex > 0) {\n\t            var glyph = font.glyphs.get(glyphIndex);\n\t            return glyph.getMetrics();\n\t        }\n\t    }\n\n\t    return notFoundMetrics;\n\t}\n\n\tfunction average(vs) {\n\t    var sum = 0;\n\t    for (var i = 0; i < vs.length; i += 1) {\n\t        sum += vs[i];\n\t    }\n\n\t    return sum / vs.length;\n\t}\n\n\t// Convert the font object to a SFNT data structure.\n\t// This structure contains all the necessary tables and metadata to create a binary OTF file.\n\tfunction fontToSfntTable(font) {\n\t    var xMins = [];\n\t    var yMins = [];\n\t    var xMaxs = [];\n\t    var yMaxs = [];\n\t    var advanceWidths = [];\n\t    var leftSideBearings = [];\n\t    var rightSideBearings = [];\n\t    var firstCharIndex;\n\t    var lastCharIndex = 0;\n\t    var ulUnicodeRange1 = 0;\n\t    var ulUnicodeRange2 = 0;\n\t    var ulUnicodeRange3 = 0;\n\t    var ulUnicodeRange4 = 0;\n\n\t    for (var i = 0; i < font.glyphs.length; i += 1) {\n\t        var glyph = font.glyphs.get(i);\n\t        var unicode = glyph.unicode | 0;\n\n\t        if (isNaN(glyph.advanceWidth)) {\n\t            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');\n\t        }\n\n\t        if (firstCharIndex > unicode || firstCharIndex === undefined) {\n\t            // ignore .notdef char\n\t            if (unicode > 0) {\n\t                firstCharIndex = unicode;\n\t            }\n\t        }\n\n\t        if (lastCharIndex < unicode) {\n\t            lastCharIndex = unicode;\n\t        }\n\n\t        var position = os2.getUnicodeRange(unicode);\n\t        if (position < 32) {\n\t            ulUnicodeRange1 |= 1 << position;\n\t        } else if (position < 64) {\n\t            ulUnicodeRange2 |= 1 << position - 32;\n\t        } else if (position < 96) {\n\t            ulUnicodeRange3 |= 1 << position - 64;\n\t        } else if (position < 123) {\n\t            ulUnicodeRange4 |= 1 << position - 96;\n\t        } else {\n\t            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n\t        }\n\t        // Skip non-important characters.\n\t        if (glyph.name === '.notdef') { continue; }\n\t        var metrics = glyph.getMetrics();\n\t        xMins.push(metrics.xMin);\n\t        yMins.push(metrics.yMin);\n\t        xMaxs.push(metrics.xMax);\n\t        yMaxs.push(metrics.yMax);\n\t        leftSideBearings.push(metrics.leftSideBearing);\n\t        rightSideBearings.push(metrics.rightSideBearing);\n\t        advanceWidths.push(glyph.advanceWidth);\n\t    }\n\n\t    var globals = {\n\t        xMin: Math.min.apply(null, xMins),\n\t        yMin: Math.min.apply(null, yMins),\n\t        xMax: Math.max.apply(null, xMaxs),\n\t        yMax: Math.max.apply(null, yMaxs),\n\t        advanceWidthMax: Math.max.apply(null, advanceWidths),\n\t        advanceWidthAvg: average(advanceWidths),\n\t        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n\t        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n\t        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n\t    };\n\t    globals.ascender = font.ascender;\n\t    globals.descender = font.descender;\n\n\t    var headTable = head.make({\n\t        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)\n\t        unitsPerEm: font.unitsPerEm,\n\t        xMin: globals.xMin,\n\t        yMin: globals.yMin,\n\t        xMax: globals.xMax,\n\t        yMax: globals.yMax,\n\t        lowestRecPPEM: 3,\n\t        createdTimestamp: font.createdTimestamp\n\t    });\n\n\t    var hheaTable = hhea.make({\n\t        ascender: globals.ascender,\n\t        descender: globals.descender,\n\t        advanceWidthMax: globals.advanceWidthMax,\n\t        minLeftSideBearing: globals.minLeftSideBearing,\n\t        minRightSideBearing: globals.minRightSideBearing,\n\t        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n\t        numberOfHMetrics: font.glyphs.length\n\t    });\n\n\t    var maxpTable = maxp.make(font.glyphs.length);\n\n\t    var os2Table = os2.make({\n\t        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n\t        usWeightClass: font.tables.os2.usWeightClass,\n\t        usWidthClass: font.tables.os2.usWidthClass,\n\t        usFirstCharIndex: firstCharIndex,\n\t        usLastCharIndex: lastCharIndex,\n\t        ulUnicodeRange1: ulUnicodeRange1,\n\t        ulUnicodeRange2: ulUnicodeRange2,\n\t        ulUnicodeRange3: ulUnicodeRange3,\n\t        ulUnicodeRange4: ulUnicodeRange4,\n\t        fsSelection: font.tables.os2.fsSelection, // REGULAR\n\t        // See http://typophile.com/node/13081 for more info on vertical metrics.\n\t        // We get metrics for typical characters (such as \"x\" for xHeight).\n\t        // We provide some fallback characters if characters are unavailable: their\n\t        // ordering was chosen experimentally.\n\t        sTypoAscender: globals.ascender,\n\t        sTypoDescender: globals.descender,\n\t        sTypoLineGap: 0,\n\t        usWinAscent: globals.yMax,\n\t        usWinDescent: Math.abs(globals.yMin),\n\t        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now\n\t        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,\n\t        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n\t        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.\n\t        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n\t    });\n\n\t    var hmtxTable = hmtx.make(font.glyphs);\n\t    var cmapTable = cmap.make(font.glyphs);\n\n\t    var englishFamilyName = font.getEnglishName('fontFamily');\n\t    var englishStyleName = font.getEnglishName('fontSubfamily');\n\t    var englishFullName = englishFamilyName + ' ' + englishStyleName;\n\t    var postScriptName = font.getEnglishName('postScriptName');\n\t    if (!postScriptName) {\n\t        postScriptName = englishFamilyName.replace(/\\s/g, '') + '-' + englishStyleName;\n\t    }\n\n\t    var names = {};\n\t    for (var n in font.names) {\n\t        names[n] = font.names[n];\n\t    }\n\n\t    if (!names.uniqueID) {\n\t        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};\n\t    }\n\n\t    if (!names.postScriptName) {\n\t        names.postScriptName = {en: postScriptName};\n\t    }\n\n\t    if (!names.preferredFamily) {\n\t        names.preferredFamily = font.names.fontFamily;\n\t    }\n\n\t    if (!names.preferredSubfamily) {\n\t        names.preferredSubfamily = font.names.fontSubfamily;\n\t    }\n\n\t    var languageTags = [];\n\t    var nameTable = _name.make(names, languageTags);\n\t    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);\n\n\t    var postTable = post.make();\n\t    var cffTable = cff.make(font.glyphs, {\n\t        version: font.getEnglishName('version'),\n\t        fullName: englishFullName,\n\t        familyName: englishFamilyName,\n\t        weightName: englishStyleName,\n\t        postScriptName: postScriptName,\n\t        unitsPerEm: font.unitsPerEm,\n\t        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]\n\t    });\n\n\t    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;\n\n\t    // The order does not matter because makeSfntTable() will sort them.\n\t    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n\t    if (ltagTable) {\n\t        tables.push(ltagTable);\n\t    }\n\t    // Optional tables\n\t    if (font.tables.gsub) {\n\t        tables.push(gsub.make(font.tables.gsub));\n\t    }\n\t    if (metaTable) {\n\t        tables.push(metaTable);\n\t    }\n\n\t    var sfntTable = makeSfntTable(tables);\n\n\t    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n\t    var bytes = sfntTable.encode();\n\t    var checkSum = computeCheckSum(bytes);\n\t    var tableFields = sfntTable.fields;\n\t    var checkSumAdjusted = false;\n\t    for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {\n\t        if (tableFields[i$1].name === 'head table') {\n\t            tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n\t            checkSumAdjusted = true;\n\t            break;\n\t        }\n\t    }\n\n\t    if (!checkSumAdjusted) {\n\t        throw new Error('Could not find head table with checkSum to adjust.');\n\t    }\n\n\t    return sfntTable;\n\t}\n\n\tvar sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };\n\n\t// The Layout object is the prototype of Substitution objects, and provides\n\n\tfunction searchTag(arr, tag) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid].tag;\n\t        if (val === tag) {\n\t            return imid;\n\t        } else if (val < tag) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\n\tfunction binSearch(arr, value) {\n\t    /* jshint bitwise: false */\n\t    var imin = 0;\n\t    var imax = arr.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        var val = arr[imid];\n\t        if (val === value) {\n\t            return imid;\n\t        } else if (val < value) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    // Not found: return -1-insertion point\n\t    return -imin - 1;\n\t}\n\n\t// binary search in a list of ranges (coverage, class definition)\n\tfunction searchRange(ranges, value) {\n\t    // jshint bitwise: false\n\t    var range;\n\t    var imin = 0;\n\t    var imax = ranges.length - 1;\n\t    while (imin <= imax) {\n\t        var imid = (imin + imax) >>> 1;\n\t        range = ranges[imid];\n\t        var start = range.start;\n\t        if (start === value) {\n\t            return range;\n\t        } else if (start < value) {\n\t            imin = imid + 1;\n\t        } else { imax = imid - 1; }\n\t    }\n\t    if (imin > 0) {\n\t        range = ranges[imin - 1];\n\t        if (value > range.end) { return 0; }\n\t        return range;\n\t    }\n\t}\n\n\t/**\n\t * @exports opentype.Layout\n\t * @class\n\t */\n\tfunction Layout(font, tableName) {\n\t    this.font = font;\n\t    this.tableName = tableName;\n\t}\n\n\tLayout.prototype = {\n\n\t    /**\n\t     * Binary search an object by \"tag\" property\n\t     * @instance\n\t     * @function searchTag\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {string} tag\n\t     * @return {number}\n\t     */\n\t    searchTag: searchTag,\n\n\t    /**\n\t     * Binary search in a list of numbers\n\t     * @instance\n\t     * @function binSearch\n\t     * @memberof opentype.Layout\n\t     * @param  {Array} arr\n\t     * @param  {number} value\n\t     * @return {number}\n\t     */\n\t    binSearch: binSearch,\n\n\t    /**\n\t     * Get or create the Layout table (GSUB, GPOS etc).\n\t     * @param  {boolean} create - Whether to create a new one.\n\t     * @return {Object} The GSUB or GPOS table.\n\t     */\n\t    getTable: function(create) {\n\t        var layout = this.font.tables[this.tableName];\n\t        if (!layout && create) {\n\t            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n\t        }\n\t        return layout;\n\t    },\n\n\t    /**\n\t     * Returns all scripts in the substitution table.\n\t     * @instance\n\t     * @return {Array}\n\t     */\n\t    getScriptNames: function() {\n\t        var layout = this.getTable();\n\t        if (!layout) { return []; }\n\t        return layout.scripts.map(function(script) {\n\t            return script.tag;\n\t        });\n\t    },\n\n\t    /**\n\t     * Returns the best bet for a script name.\n\t     * Returns 'DFLT' if it exists.\n\t     * If not, returns 'latn' if it exists.\n\t     * If neither exist, returns undefined.\n\t     */\n\t    getDefaultScriptName: function() {\n\t        var layout = this.getTable();\n\t        if (!layout) { return; }\n\t        var hasLatn = false;\n\t        for (var i = 0; i < layout.scripts.length; i++) {\n\t            var name = layout.scripts[i].tag;\n\t            if (name === 'DFLT') { return name; }\n\t            if (name === 'latn') { hasLatn = true; }\n\t        }\n\t        if (hasLatn) { return 'latn'; }\n\t    },\n\n\t    /**\n\t     * Returns all LangSysRecords in the given script.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {boolean} create - forces the creation of this script table if it doesn't exist.\n\t     * @return {Object} An object with tag and script properties.\n\t     */\n\t    getScriptTable: function(script, create) {\n\t        var layout = this.getTable(create);\n\t        if (layout) {\n\t            script = script || 'DFLT';\n\t            var scripts = layout.scripts;\n\t            var pos = searchTag(layout.scripts, script);\n\t            if (pos >= 0) {\n\t                return scripts[pos].script;\n\t            } else if (create) {\n\t                var scr = {\n\t                    tag: script,\n\t                    script: {\n\t                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},\n\t                        langSysRecords: []\n\t                    }\n\t                };\n\t                scripts.splice(-1 - pos, 0, scr);\n\t                return scr.script;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Returns a language system table\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getLangSysTable: function(script, language, create) {\n\t        var scriptTable = this.getScriptTable(script, create);\n\t        if (scriptTable) {\n\t            if (!language || language === 'dflt' || language === 'DFLT') {\n\t                return scriptTable.defaultLangSys;\n\t            }\n\t            var pos = searchTag(scriptTable.langSysRecords, language);\n\t            if (pos >= 0) {\n\t                return scriptTable.langSysRecords[pos].langSys;\n\t            } else if (create) {\n\t                var langSysRecord = {\n\t                    tag: language,\n\t                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}\n\t                };\n\t                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n\t                return langSysRecord.langSys;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Get a specific feature table.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm\n\t     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.\n\t     * @return {Object}\n\t     */\n\t    getFeatureTable: function(script, language, feature, create) {\n\t        var langSysTable = this.getLangSysTable(script, language, create);\n\t        if (langSysTable) {\n\t            var featureRecord;\n\t            var featIndexes = langSysTable.featureIndexes;\n\t            var allFeatures = this.font.tables[this.tableName].features;\n\t            // The FeatureIndex array of indices is in arbitrary order,\n\t            // even if allFeatures is sorted alphabetically by feature tag.\n\t            for (var i = 0; i < featIndexes.length; i++) {\n\t                featureRecord = allFeatures[featIndexes[i]];\n\t                if (featureRecord.tag === feature) {\n\t                    return featureRecord.feature;\n\t                }\n\t            }\n\t            if (create) {\n\t                var index = allFeatures.length;\n\t                // Automatic ordering of features would require to shift feature indexes in the script list.\n\t                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');\n\t                featureRecord = {\n\t                    tag: feature,\n\t                    feature: { params: 0, lookupListIndexes: [] }\n\t                };\n\t                allFeatures.push(featureRecord);\n\t                featIndexes.push(index);\n\t                return featureRecord.feature;\n\t            }\n\t        }\n\t    },\n\n\t    /**\n\t     * Get the lookup tables of a given type for a script/language/feature.\n\t     * @instance\n\t     * @param {string} [script='DFLT']\n\t     * @param {string} [language='dlft']\n\t     * @param {string} feature - 4-letter feature code\n\t     * @param {number} lookupType - 1 to 9\n\t     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.\n\t     * @return {Object[]}\n\t     */\n\t    getLookupTables: function(script, language, feature, lookupType, create) {\n\t        var featureTable = this.getFeatureTable(script, language, feature, create);\n\t        var tables = [];\n\t        if (featureTable) {\n\t            var lookupTable;\n\t            var lookupListIndexes = featureTable.lookupListIndexes;\n\t            var allLookups = this.font.tables[this.tableName].lookups;\n\t            // lookupListIndexes are in no particular order, so use naive search.\n\t            for (var i = 0; i < lookupListIndexes.length; i++) {\n\t                lookupTable = allLookups[lookupListIndexes[i]];\n\t                if (lookupTable.lookupType === lookupType) {\n\t                    tables.push(lookupTable);\n\t                }\n\t            }\n\t            if (tables.length === 0 && create) {\n\t                lookupTable = {\n\t                    lookupType: lookupType,\n\t                    lookupFlag: 0,\n\t                    subtables: [],\n\t                    markFilteringSet: undefined\n\t                };\n\t                var index = allLookups.length;\n\t                allLookups.push(lookupTable);\n\t                lookupListIndexes.push(index);\n\t                return [lookupTable];\n\t            }\n\t        }\n\t        return tables;\n\t    },\n\n\t    /**\n\t     * Find a glyph in a class definition table\n\t     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table\n\t     * @param {object} classDefTable - an OpenType Layout class definition table\n\t     * @param {number} glyphIndex - the index of the glyph to find\n\t     * @returns {number} -1 if not found\n\t     */\n\t    getGlyphClass: function(classDefTable, glyphIndex) {\n\t        switch (classDefTable.format) {\n\t            case 1:\n\t                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n\t                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n\t                }\n\t                return 0;\n\t            case 2:\n\t                var range = searchRange(classDefTable.ranges, glyphIndex);\n\t                return range ? range.classId : 0;\n\t        }\n\t    },\n\n\t    /**\n\t     * Find a glyph in a coverage table\n\t     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\n\t     * @param {object} coverageTable - an OpenType Layout coverage table\n\t     * @param {number} glyphIndex - the index of the glyph to find\n\t     * @returns {number} -1 if not found\n\t     */\n\t    getCoverageIndex: function(coverageTable, glyphIndex) {\n\t        switch (coverageTable.format) {\n\t            case 1:\n\t                var index = binSearch(coverageTable.glyphs, glyphIndex);\n\t                return index >= 0 ? index : -1;\n\t            case 2:\n\t                var range = searchRange(coverageTable.ranges, glyphIndex);\n\t                return range ? range.index + glyphIndex - range.start : -1;\n\t        }\n\t    },\n\n\t    /**\n\t     * Returns the list of glyph indexes of a coverage table.\n\t     * Format 1: the list is stored raw\n\t     * Format 2: compact list as range records.\n\t     * @instance\n\t     * @param  {Object} coverageTable\n\t     * @return {Array}\n\t     */\n\t    expandCoverage: function(coverageTable) {\n\t        if (coverageTable.format === 1) {\n\t            return coverageTable.glyphs;\n\t        } else {\n\t            var glyphs = [];\n\t            var ranges = coverageTable.ranges;\n\t            for (var i = 0; i < ranges.length; i++) {\n\t                var range = ranges[i];\n\t                var start = range.start;\n\t                var end = range.end;\n\t                for (var j = start; j <= end; j++) {\n\t                    glyphs.push(j);\n\t                }\n\t            }\n\t            return glyphs;\n\t        }\n\t    }\n\n\t};\n\n\t// The Position object provides utility methods to manipulate\n\n\t/**\n\t * @exports opentype.Position\n\t * @class\n\t * @extends opentype.Layout\n\t * @param {opentype.Font}\n\t * @constructor\n\t */\n\tfunction Position(font) {\n\t    Layout.call(this, font, 'gpos');\n\t}\n\n\tPosition.prototype = Layout.prototype;\n\n\t/**\n\t * Init some data for faster and easier access later.\n\t */\n\tPosition.prototype.init = function() {\n\t    var script = this.getDefaultScriptName();\n\t    this.defaultKerningTables = this.getKerningTables(script);\n\t};\n\n\t/**\n\t * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.\n\t *\n\t * @param {integer} leftIndex - left glyph index\n\t * @param {integer} rightIndex - right glyph index\n\t * @returns {integer}\n\t */\n\tPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n\t    var this$1 = this;\n\n\t    for (var i = 0; i < kerningLookups.length; i++) {\n\t        var subtables = kerningLookups[i].subtables;\n\t        for (var j = 0; j < subtables.length; j++) {\n\t            var subtable = subtables[j];\n\t            var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);\n\t            if (covIndex < 0) { continue; }\n\t            switch (subtable.posFormat) {\n\t                case 1:\n\t                    // Search Pair Adjustment Positioning Format 1\n\t                    var pairSet = subtable.pairSets[covIndex];\n\t                    for (var k = 0; k < pairSet.length; k++) {\n\t                        var pair = pairSet[k];\n\t                        if (pair.secondGlyph === rightIndex) {\n\t                            return pair.value1 && pair.value1.xAdvance || 0;\n\t                        }\n\t                    }\n\t                    break;      // left glyph found, not right glyph - try next subtable\n\t                case 2:\n\t                    // Search Pair Adjustment Positioning Format 2\n\t                    var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);\n\t                    var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);\n\t                    var pair$1 = subtable.classRecords[class1][class2];\n\t                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n\t            }\n\t        }\n\t    }\n\t    return 0;\n\t};\n\n\t/**\n\t * List all kerning lookup tables.\n\t *\n\t * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value\n\t * @param {string} [language='dflt']\n\t * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)\n\t */\n\tPosition.prototype.getKerningTables = function(script, language) {\n\t    if (this.font.tables.gpos) {\n\t        return this.getLookupTables(script, language, 'kern', 2);\n\t    }\n\t};\n\n\t// The Substitution object provides utility methods to manipulate\n\n\t/**\n\t * @exports opentype.Substitution\n\t * @class\n\t * @extends opentype.Layout\n\t * @param {opentype.Font}\n\t * @constructor\n\t */\n\tfunction Substitution(font) {\n\t    Layout.call(this, font, 'gsub');\n\t}\n\n\t// Check if 2 arrays of primitives are equal.\n\tfunction arraysEqual(ar1, ar2) {\n\t    var n = ar1.length;\n\t    if (n !== ar2.length) { return false; }\n\t    for (var i = 0; i < n; i++) {\n\t        if (ar1[i] !== ar2[i]) { return false; }\n\t    }\n\t    return true;\n\t}\n\n\t// Find the first subtable of a lookup table in a particular format.\n\tfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n\t    var subtables = lookupTable.subtables;\n\t    for (var i = 0; i < subtables.length; i++) {\n\t        var subtable = subtables[i];\n\t        if (subtable.substFormat === format) {\n\t            return subtable;\n\t        }\n\t    }\n\t    if (defaultSubtable) {\n\t        subtables.push(defaultSubtable);\n\t        return defaultSubtable;\n\t    }\n\t    return undefined;\n\t}\n\n\tSubstitution.prototype = Layout.prototype;\n\n\t/**\n\t * Create a default GSUB table.\n\t * @return {Object} gsub - The GSUB table.\n\t */\n\tSubstitution.prototype.createDefaultTable = function() {\n\t    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n\t    return {\n\t        version: 1,\n\t        scripts: [{\n\t            tag: 'DFLT',\n\t            script: {\n\t                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n\t                langSysRecords: []\n\t            }\n\t        }],\n\t        features: [],\n\t        lookups: []\n\t    };\n\t};\n\n\t/**\n\t * List all single substitutions (lookup type 1) for a given script, language, and feature.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getSingle = function(feature, script, language) {\n\t    var this$1 = this;\n\n\t    var substitutions = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 1);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this$1.expandCoverage(subtable.coverage);\n\t            var j = (void 0);\n\t            if (subtable.substFormat === 1) {\n\t                var delta = subtable.deltaGlyphId;\n\t                for (j = 0; j < glyphs.length; j++) {\n\t                    var glyph = glyphs[j];\n\t                    substitutions.push({ sub: glyph, by: glyph + delta });\n\t                }\n\t            } else {\n\t                var substitute = subtable.substitute;\n\t                for (j = 0; j < glyphs.length; j++) {\n\t                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return substitutions;\n\t};\n\n\t/**\n\t * List all alternates (lookup type 3) for a given script, language, and feature.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n\t * @return {Array} alternates - The list of alternates\n\t */\n\tSubstitution.prototype.getAlternates = function(feature, script, language) {\n\t    var this$1 = this;\n\n\t    var alternates = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 3);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this$1.expandCoverage(subtable.coverage);\n\t            var alternateSets = subtable.alternateSets;\n\t            for (var j = 0; j < glyphs.length; j++) {\n\t                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n\t            }\n\t        }\n\t    }\n\t    return alternates;\n\t};\n\n\t/**\n\t * List all ligatures (lookup type 4) for a given script, language, and feature.\n\t * The result is an array of ligature objects like { sub: [ids], by: id }\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @return {Array} ligatures - The list of ligatures.\n\t */\n\tSubstitution.prototype.getLigatures = function(feature, script, language) {\n\t    var this$1 = this;\n\n\t    var ligatures = [];\n\t    var lookupTables = this.getLookupTables(script, language, feature, 4);\n\t    for (var idx = 0; idx < lookupTables.length; idx++) {\n\t        var subtables = lookupTables[idx].subtables;\n\t        for (var i = 0; i < subtables.length; i++) {\n\t            var subtable = subtables[i];\n\t            var glyphs = this$1.expandCoverage(subtable.coverage);\n\t            var ligatureSets = subtable.ligatureSets;\n\t            for (var j = 0; j < glyphs.length; j++) {\n\t                var startGlyph = glyphs[j];\n\t                var ligSet = ligatureSets[j];\n\t                for (var k = 0; k < ligSet.length; k++) {\n\t                    var lig = ligSet[k];\n\t                    ligatures.push({\n\t                        sub: [startGlyph].concat(lig.components),\n\t                        by: lig.ligGlyph\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return ligatures;\n\t};\n\n\t/**\n\t * Add or modify a single substitution (lookup type 1)\n\t * Format 2, more flexible, is always used.\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n\t    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n\t        substFormat: 2,\n\t        coverage: {format: 1, glyphs: []},\n\t        substitute: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.substitute.splice(pos, 0, 0);\n\t    }\n\t    subtable.substitute[pos] = substitution.by;\n\t};\n\n\t/**\n\t * Add or modify an alternate substitution (lookup type 1)\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} substitution - { sub: id, by: [ids] }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n\t    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n\t        substFormat: 1,\n\t        coverage: {format: 1, glyphs: []},\n\t        alternateSets: []\n\t    });\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = substitution.sub;\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos < 0) {\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.alternateSets.splice(pos, 0, 0);\n\t    }\n\t    subtable.alternateSets[pos] = substitution.by;\n\t};\n\n\t/**\n\t * Add a ligature (lookup type 4)\n\t * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n\t * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n\t * @param {Object} ligature - { sub: [ids], by: id }\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n\t    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n\t    var subtable = lookupTable.subtables[0];\n\t    if (!subtable) {\n\t        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n\t            substFormat: 1,\n\t            coverage: { format: 1, glyphs: [] },\n\t            ligatureSets: []\n\t        };\n\t        lookupTable.subtables[0] = subtable;\n\t    }\n\t    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n\t    var coverageGlyph = ligature.sub[0];\n\t    var ligComponents = ligature.sub.slice(1);\n\t    var ligatureTable = {\n\t        ligGlyph: ligature.by,\n\t        components: ligComponents\n\t    };\n\t    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n\t    if (pos >= 0) {\n\t        // ligatureSet already exists\n\t        var ligatureSet = subtable.ligatureSets[pos];\n\t        for (var i = 0; i < ligatureSet.length; i++) {\n\t            // If ligature already exists, return.\n\t            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n\t                return;\n\t            }\n\t        }\n\t        // ligature does not exist: add it.\n\t        ligatureSet.push(ligatureTable);\n\t    } else {\n\t        // Create a new ligatureSet and add coverage for the first glyph.\n\t        pos = -1 - pos;\n\t        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n\t        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n\t    }\n\t};\n\n\t/**\n\t * List all feature data for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t * @return {Array} substitutions - The list of substitutions.\n\t */\n\tSubstitution.prototype.getFeature = function(feature, script, language) {\n\t    if (/ss\\d\\d/.test(feature)) {\n\t        // ss01 - ss20\n\t        return this.getSingle(feature, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            return this.getSingle(feature, script, language)\n\t                    .concat(this.getAlternates(feature, script, language));\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig': return this.getLigatures(feature, script, language);\n\t    }\n\t    return undefined;\n\t};\n\n\t/**\n\t * Add a substitution to a feature for a given script and language.\n\t * @param {string} feature - 4-letter feature name\n\t * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n\t * @param {string} [script='DFLT']\n\t * @param {string} [language='dflt']\n\t */\n\tSubstitution.prototype.add = function(feature, sub, script, language) {\n\t    if (/ss\\d\\d/.test(feature)) {\n\t        // ss01 - ss20\n\t        return this.addSingle(feature, sub, script, language);\n\t    }\n\t    switch (feature) {\n\t        case 'aalt':\n\t        case 'salt':\n\t            if (typeof sub.by === 'number') {\n\t                return this.addSingle(feature, sub, script, language);\n\t            }\n\t            return this.addAlternate(feature, sub, script, language);\n\t        case 'dlig':\n\t        case 'liga':\n\t        case 'rlig':\n\t            return this.addLigature(feature, sub, script, language);\n\t    }\n\t    return undefined;\n\t};\n\n\tfunction isBrowser() {\n\t    return typeof window !== 'undefined';\n\t}\n\n\tfunction nodeBufferToArrayBuffer(buffer) {\n\t    var ab = new ArrayBuffer(buffer.length);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        view[i] = buffer[i];\n\t    }\n\n\t    return ab;\n\t}\n\n\tfunction arrayBufferToNodeBuffer(ab) {\n\t    var buffer = new Buffer(ab.byteLength);\n\t    var view = new Uint8Array(ab);\n\t    for (var i = 0; i < buffer.length; ++i) {\n\t        buffer[i] = view[i];\n\t    }\n\n\t    return buffer;\n\t}\n\n\tfunction checkArgument(expression, message) {\n\t    if (!expression) {\n\t        throw message;\n\t    }\n\t}\n\n\t// The `glyf` table describes the glyphs in TrueType outline format.\n\n\t// Parse the coordinate data for a glyph.\n\tfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n\t    var v;\n\t    if ((flag & shortVectorBitMask) > 0) {\n\t        // The coordinate is 1 byte long.\n\t        v = p.parseByte();\n\t        // The `same` bit is re-used for short values to signify the sign of the value.\n\t        if ((flag & sameBitMask) === 0) {\n\t            v = -v;\n\t        }\n\n\t        v = previousValue + v;\n\t    } else {\n\t        //  The coordinate is 2 bytes long.\n\t        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n\t        if ((flag & sameBitMask) > 0) {\n\t            v = previousValue;\n\t        } else {\n\t            // Parse the coordinate as a signed 16-bit delta value.\n\t            v = previousValue + p.parseShort();\n\t        }\n\t    }\n\n\t    return v;\n\t}\n\n\t// Parse a TrueType glyph.\n\tfunction parseGlyph(glyph, data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    glyph.numberOfContours = p.parseShort();\n\t    glyph._xMin = p.parseShort();\n\t    glyph._yMin = p.parseShort();\n\t    glyph._xMax = p.parseShort();\n\t    glyph._yMax = p.parseShort();\n\t    var flags;\n\t    var flag;\n\n\t    if (glyph.numberOfContours > 0) {\n\t        // This glyph is not a composite.\n\t        var endPointIndices = glyph.endPointIndices = [];\n\t        for (var i = 0; i < glyph.numberOfContours; i += 1) {\n\t            endPointIndices.push(p.parseUShort());\n\t        }\n\n\t        glyph.instructionLength = p.parseUShort();\n\t        glyph.instructions = [];\n\t        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n\t            glyph.instructions.push(p.parseByte());\n\t        }\n\n\t        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n\t        flags = [];\n\t        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n\t            flag = p.parseByte();\n\t            flags.push(flag);\n\t            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n\t            if ((flag & 8) > 0) {\n\t                var repeatCount = p.parseByte();\n\t                for (var j = 0; j < repeatCount; j += 1) {\n\t                    flags.push(flag);\n\t                    i$2 += 1;\n\t                }\n\t            }\n\t        }\n\n\t        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n\t        if (endPointIndices.length > 0) {\n\t            var points = [];\n\t            var point;\n\t            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n\t            if (numberOfCoordinates > 0) {\n\t                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n\t                    flag = flags[i$3];\n\t                    point = {};\n\t                    point.onCurve = !!(flag & 1);\n\t                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n\t                    points.push(point);\n\t                }\n\n\t                var px = 0;\n\t                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n\t                    flag = flags[i$4];\n\t                    point = points[i$4];\n\t                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n\t                    px = point.x;\n\t                }\n\n\t                var py = 0;\n\t                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n\t                    flag = flags[i$5];\n\t                    point = points[i$5];\n\t                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n\t                    py = point.y;\n\t                }\n\t            }\n\n\t            glyph.points = points;\n\t        } else {\n\t            glyph.points = [];\n\t        }\n\t    } else if (glyph.numberOfContours === 0) {\n\t        glyph.points = [];\n\t    } else {\n\t        glyph.isComposite = true;\n\t        glyph.points = [];\n\t        glyph.components = [];\n\t        var moreComponents = true;\n\t        while (moreComponents) {\n\t            flags = p.parseUShort();\n\t            var component = {\n\t                glyphIndex: p.parseUShort(),\n\t                xScale: 1,\n\t                scale01: 0,\n\t                scale10: 0,\n\t                yScale: 1,\n\t                dx: 0,\n\t                dy: 0\n\t            };\n\t            if ((flags & 1) > 0) {\n\t                // The arguments are words\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseShort();\n\t                    component.dy = p.parseShort();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n\t                }\n\n\t            } else {\n\t                // The arguments are bytes\n\t                if ((flags & 2) > 0) {\n\t                    // values are offset\n\t                    component.dx = p.parseChar();\n\t                    component.dy = p.parseChar();\n\t                } else {\n\t                    // values are matched points\n\t                    component.matchedPoints = [p.parseByte(), p.parseByte()];\n\t                }\n\t            }\n\n\t            if ((flags & 8) > 0) {\n\t                // We have a scale\n\t                component.xScale = component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 64) > 0) {\n\t                // We have an X / Y scale\n\t                component.xScale = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            } else if ((flags & 128) > 0) {\n\t                // We have a 2x2 transformation\n\t                component.xScale = p.parseF2Dot14();\n\t                component.scale01 = p.parseF2Dot14();\n\t                component.scale10 = p.parseF2Dot14();\n\t                component.yScale = p.parseF2Dot14();\n\t            }\n\n\t            glyph.components.push(component);\n\t            moreComponents = !!(flags & 32);\n\t        }\n\t        if (flags & 0x100) {\n\t            // We have instructions\n\t            glyph.instructionLength = p.parseUShort();\n\t            glyph.instructions = [];\n\t            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n\t                glyph.instructions.push(p.parseByte());\n\t            }\n\t        }\n\t    }\n\t}\n\n\t// Transform an array of points and return a new array.\n\tfunction transformPoints(points, transform) {\n\t    var newPoints = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        var newPt = {\n\t            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n\t            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n\t            onCurve: pt.onCurve,\n\t            lastPointOfContour: pt.lastPointOfContour\n\t        };\n\t        newPoints.push(newPt);\n\t    }\n\n\t    return newPoints;\n\t}\n\n\tfunction getContours(points) {\n\t    var contours = [];\n\t    var currentContour = [];\n\t    for (var i = 0; i < points.length; i += 1) {\n\t        var pt = points[i];\n\t        currentContour.push(pt);\n\t        if (pt.lastPointOfContour) {\n\t            contours.push(currentContour);\n\t            currentContour = [];\n\t        }\n\t    }\n\n\t    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n\t    return contours;\n\t}\n\n\t// Convert the TrueType glyph outline to a Path.\n\tfunction getPath(points) {\n\t    var p = new Path();\n\t    if (!points) {\n\t        return p;\n\t    }\n\n\t    var contours = getContours(points);\n\n\t    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n\t        var contour = contours[contourIndex];\n\n\t        var prev = null;\n\t        var curr = contour[contour.length - 1];\n\t        var next = contour[0];\n\n\t        if (curr.onCurve) {\n\t            p.moveTo(curr.x, curr.y);\n\t        } else {\n\t            if (next.onCurve) {\n\t                p.moveTo(next.x, next.y);\n\t            } else {\n\t                // If both first and last points are off-curve, start at their middle.\n\t                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};\n\t                p.moveTo(start.x, start.y);\n\t            }\n\t        }\n\n\t        for (var i = 0; i < contour.length; ++i) {\n\t            prev = curr;\n\t            curr = next;\n\t            next = contour[(i + 1) % contour.length];\n\n\t            if (curr.onCurve) {\n\t                // This is a straight line.\n\t                p.lineTo(curr.x, curr.y);\n\t            } else {\n\t                var prev2 = prev;\n\t                var next2 = next;\n\n\t                if (!prev.onCurve) {\n\t                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n\t                }\n\n\t                if (!next.onCurve) {\n\t                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n\t                }\n\n\t                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n\t            }\n\t        }\n\n\t        p.closePath();\n\t    }\n\t    return p;\n\t}\n\n\tfunction buildPath(glyphs, glyph) {\n\t    if (glyph.isComposite) {\n\t        for (var j = 0; j < glyph.components.length; j += 1) {\n\t            var component = glyph.components[j];\n\t            var componentGlyph = glyphs.get(component.glyphIndex);\n\t            // Force the ttfGlyphLoader to parse the glyph.\n\t            componentGlyph.getPath();\n\t            if (componentGlyph.points) {\n\t                var transformedPoints = (void 0);\n\t                if (component.matchedPoints === undefined) {\n\t                    // component positioned by offset\n\t                    transformedPoints = transformPoints(componentGlyph.points, component);\n\t                } else {\n\t                    // component positioned by matched points\n\t                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||\n\t                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {\n\t                        throw Error('Matched points out of range in ' + glyph.name);\n\t                    }\n\t                    var firstPt = glyph.points[component.matchedPoints[0]];\n\t                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n\t                    var transform = {\n\t                        xScale: component.xScale, scale01: component.scale01,\n\t                        scale10: component.scale10, yScale: component.yScale,\n\t                        dx: 0, dy: 0\n\t                    };\n\t                    secondPt = transformPoints([secondPt], transform)[0];\n\t                    transform.dx = firstPt.x - secondPt.x;\n\t                    transform.dy = firstPt.y - secondPt.y;\n\t                    transformedPoints = transformPoints(componentGlyph.points, transform);\n\t                }\n\t                glyph.points = glyph.points.concat(transformedPoints);\n\t            }\n\t        }\n\t    }\n\n\t    return getPath(glyph.points);\n\t}\n\n\t// Parse all the glyphs according to the offsets from the `loca` table.\n\tfunction parseGlyfTable(data, start, loca, font) {\n\t    var glyphs = new glyphset.GlyphSet(font);\n\n\t    // The last element of the loca table is invalid.\n\t    for (var i = 0; i < loca.length - 1; i += 1) {\n\t        var offset = loca[i];\n\t        var nextOffset = loca[i + 1];\n\t        if (offset !== nextOffset) {\n\t            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n\t        } else {\n\t            glyphs.push(i, glyphset.glyphLoader(font, i));\n\t        }\n\t    }\n\n\t    return glyphs;\n\t}\n\n\tvar glyf = { getPath: getPath, parse: parseGlyfTable };\n\n\t/* A TrueType font hinting interpreter.\n\t*\n\t* (c) 2017 Axel Kittenberger\n\t*\n\t* This interpreter has been implemented according to this documentation:\n\t* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html\n\t*\n\t* According to the documentation F24DOT6 values are used for pixels.\n\t* That means calculation is 1/64 pixel accurate and uses integer operations.\n\t* However, Javascript has floating point operations by default and only\n\t* those are available. One could make a case to simulate the 1/64 accuracy\n\t* exactly by truncating after every division operation\n\t* (for example with << 0) to get pixel exactly results as other TrueType\n\t* implementations. It may make sense since some fonts are pixel optimized\n\t* by hand using DELTAP instructions. The current implementation doesn't\n\t* and rather uses full floating point precision.\n\t*\n\t* xScale, yScale and rotation is currently ignored.\n\t*\n\t* A few non-trivial instructions are missing as I didn't encounter yet\n\t* a font that used them to test a possible implementation.\n\t*\n\t* Some fonts seem to use undocumented features regarding the twilight zone.\n\t* Only some of them are implemented as they were encountered.\n\t*\n\t* The exports.DEBUG statements are removed on the minified distribution file.\n\t*/\n\n\tvar instructionTable;\n\tvar exec;\n\tvar execGlyph;\n\tvar execComponent;\n\n\t/*\n\t* Creates a hinting object.\n\t*\n\t* There ought to be exactly one\n\t* for each truetype font that is used for hinting.\n\t*/\n\tfunction Hinting(font) {\n\t    // the font this hinting object is for\n\t    this.font = font;\n\n\t    this.getCommands = function (hPoints) {\n\t        return glyf.getPath(hPoints).commands;\n\t    };\n\n\t    // cached states\n\t    this._fpgmState  =\n\t    this._prepState  =\n\t        undefined;\n\n\t    // errorState\n\t    // 0 ... all okay\n\t    // 1 ... had an error in a glyf,\n\t    //       continue working but stop spamming\n\t    //       the console\n\t    // 2 ... error at prep, stop hinting at this ppem\n\t    // 3 ... error at fpeg, stop hinting for this font at all\n\t    this._errorState = 0;\n\t}\n\n\t/*\n\t* Not rounding.\n\t*/\n\tfunction roundOff(v) {\n\t    return v;\n\t}\n\n\t/*\n\t* Rounding to grid.\n\t*/\n\tfunction roundToGrid(v) {\n\t    //Rounding in TT is supposed to \"symmetrical around zero\"\n\t    return Math.sign(v) * Math.round(Math.abs(v));\n\t}\n\n\t/*\n\t* Rounding to double grid.\n\t*/\n\tfunction roundToDoubleGrid(v) {\n\t    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n\t}\n\n\t/*\n\t* Rounding to half grid.\n\t*/\n\tfunction roundToHalfGrid(v) {\n\t    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n\t}\n\n\t/*\n\t* Rounding to up to grid.\n\t*/\n\tfunction roundUpToGrid(v) {\n\t    return Math.sign(v) * Math.ceil(Math.abs(v));\n\t}\n\n\t/*\n\t* Rounding to down to grid.\n\t*/\n\tfunction roundDownToGrid(v) {\n\t    return Math.sign(v) * Math.floor(Math.abs(v));\n\t}\n\n\t/*\n\t* Super rounding.\n\t*/\n\tvar roundSuper = function (v) {\n\t    var period = this.srPeriod;\n\t    var phase = this.srPhase;\n\t    var threshold = this.srThreshold;\n\t    var sign = 1;\n\n\t    if (v < 0) {\n\t        v = -v;\n\t        sign = -1;\n\t    }\n\n\t    v += threshold - phase;\n\n\t    v = Math.trunc(v / period) * period;\n\n\t    v += phase;\n\n\t    // according to http://xgridfit.sourceforge.net/round.html\n\t    if (v < 0) { return phase * sign; }\n\n\t    return v * sign;\n\t};\n\n\t/*\n\t* Unit vector of x-axis.\n\t*/\n\tvar xUnitVector = {\n\t    x: 1,\n\n\t    y: 0,\n\n\t    axis: 'x',\n\n\t    // Gets the projected distance between two points.\n\t    // o1/o2 ... if true, respective original position is used.\n\t    distance: function (p1, p2, o1, o2) {\n\t        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n\t    },\n\n\t    // Moves point p so the moved position has the same relative\n\t    // position to the moved positions of rp1 and rp2 than the\n\t    // original positions had.\n\t    //\n\t    // See APPENDIX on INTERPOLATE at the bottom of this file.\n\t    interpolate: function (p, rp1, rp2, pv) {\n\t        var do1;\n\t        var do2;\n\t        var doa1;\n\t        var doa2;\n\t        var dm1;\n\t        var dm2;\n\t        var dt;\n\n\t        if (!pv || pv === this) {\n\t            do1 = p.xo - rp1.xo;\n\t            do2 = p.xo - rp2.xo;\n\t            dm1 = rp1.x - rp1.xo;\n\t            dm2 = rp2.x - rp2.xo;\n\t            doa1 = Math.abs(do1);\n\t            doa2 = Math.abs(do2);\n\t            dt = doa1 + doa2;\n\n\t            if (dt === 0) {\n\t                p.x = p.xo + (dm1 + dm2) / 2;\n\t                return;\n\t            }\n\n\t            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n\t            return;\n\t        }\n\n\t        do1 = pv.distance(p, rp1, true, true);\n\t        do2 = pv.distance(p, rp2, true, true);\n\t        dm1 = pv.distance(rp1, rp1, false, true);\n\t        dm2 = pv.distance(rp2, rp2, false, true);\n\t        doa1 = Math.abs(do1);\n\t        doa2 = Math.abs(do2);\n\t        dt = doa1 + doa2;\n\n\t        if (dt === 0) {\n\t            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t            return;\n\t        }\n\n\t        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t    },\n\n\t    // Slope of line normal to this\n\t    normalSlope: Number.NEGATIVE_INFINITY,\n\n\t    // Sets the point 'p' relative to point 'rp'\n\t    // by the distance 'd'.\n\t    //\n\t    // See APPENDIX on SETRELATIVE at the bottom of this file.\n\t    //\n\t    // p   ... point to set\n\t    // rp  ... reference point\n\t    // d   ... distance on projection vector\n\t    // pv  ... projection vector (undefined = this)\n\t    // org ... if true, uses the original position of rp as reference.\n\t    setRelative: function (p, rp, d, pv, org) {\n\t        if (!pv || pv === this) {\n\t            p.x = (org ? rp.xo : rp.x) + d;\n\t            return;\n\t        }\n\n\t        var rpx = org ? rp.xo : rp.x;\n\t        var rpy = org ? rp.yo : rp.y;\n\t        var rpdx = rpx + d * pv.x;\n\t        var rpdy = rpy + d * pv.y;\n\n\t        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n\t    },\n\n\t    // Slope of vector line.\n\t    slope: 0,\n\n\t    // Touches the point p.\n\t    touch: function (p) {\n\t        p.xTouched = true;\n\t    },\n\n\t    // Tests if a point p is touched.\n\t    touched: function (p) {\n\t        return p.xTouched;\n\t    },\n\n\t    // Untouches the point p.\n\t    untouch: function (p) {\n\t        p.xTouched = false;\n\t    }\n\t};\n\n\t/*\n\t* Unit vector of y-axis.\n\t*/\n\tvar yUnitVector = {\n\t    x: 0,\n\n\t    y: 1,\n\n\t    axis: 'y',\n\n\t    // Gets the projected distance between two points.\n\t    // o1/o2 ... if true, respective original position is used.\n\t    distance: function (p1, p2, o1, o2) {\n\t        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n\t    },\n\n\t    // Moves point p so the moved position has the same relative\n\t    // position to the moved positions of rp1 and rp2 than the\n\t    // original positions had.\n\t    //\n\t    // See APPENDIX on INTERPOLATE at the bottom of this file.\n\t    interpolate: function (p, rp1, rp2, pv) {\n\t        var do1;\n\t        var do2;\n\t        var doa1;\n\t        var doa2;\n\t        var dm1;\n\t        var dm2;\n\t        var dt;\n\n\t        if (!pv || pv === this) {\n\t            do1 = p.yo - rp1.yo;\n\t            do2 = p.yo - rp2.yo;\n\t            dm1 = rp1.y - rp1.yo;\n\t            dm2 = rp2.y - rp2.yo;\n\t            doa1 = Math.abs(do1);\n\t            doa2 = Math.abs(do2);\n\t            dt = doa1 + doa2;\n\n\t            if (dt === 0) {\n\t                p.y = p.yo + (dm1 + dm2) / 2;\n\t                return;\n\t            }\n\n\t            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n\t            return;\n\t        }\n\n\t        do1 = pv.distance(p, rp1, true, true);\n\t        do2 = pv.distance(p, rp2, true, true);\n\t        dm1 = pv.distance(rp1, rp1, false, true);\n\t        dm2 = pv.distance(rp2, rp2, false, true);\n\t        doa1 = Math.abs(do1);\n\t        doa2 = Math.abs(do2);\n\t        dt = doa1 + doa2;\n\n\t        if (dt === 0) {\n\t            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t            return;\n\t        }\n\n\t        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t    },\n\n\t    // Slope of line normal to this.\n\t    normalSlope: 0,\n\n\t    // Sets the point 'p' relative to point 'rp'\n\t    // by the distance 'd'\n\t    //\n\t    // See APPENDIX on SETRELATIVE at the bottom of this file.\n\t    //\n\t    // p   ... point to set\n\t    // rp  ... reference point\n\t    // d   ... distance on projection vector\n\t    // pv  ... projection vector (undefined = this)\n\t    // org ... if true, uses the original position of rp as reference.\n\t    setRelative: function (p, rp, d, pv, org) {\n\t        if (!pv || pv === this) {\n\t            p.y = (org ? rp.yo : rp.y) + d;\n\t            return;\n\t        }\n\n\t        var rpx = org ? rp.xo : rp.x;\n\t        var rpy = org ? rp.yo : rp.y;\n\t        var rpdx = rpx + d * pv.x;\n\t        var rpdy = rpy + d * pv.y;\n\n\t        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n\t    },\n\n\t    // Slope of vector line.\n\t    slope: Number.POSITIVE_INFINITY,\n\n\t    // Touches the point p.\n\t    touch: function (p) {\n\t        p.yTouched = true;\n\t    },\n\n\t    // Tests if a point p is touched.\n\t    touched: function (p) {\n\t        return p.yTouched;\n\t    },\n\n\t    // Untouches the point p.\n\t    untouch: function (p) {\n\t        p.yTouched = false;\n\t    }\n\t};\n\n\tObject.freeze(xUnitVector);\n\tObject.freeze(yUnitVector);\n\n\t/*\n\t* Creates a unit vector that is not x- or y-axis.\n\t*/\n\tfunction UnitVector(x, y) {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.axis = undefined;\n\t    this.slope = y / x;\n\t    this.normalSlope = -x / y;\n\t    Object.freeze(this);\n\t}\n\n\t/*\n\t* Gets the projected distance between two points.\n\t* o1/o2 ... if true, respective original position is used.\n\t*/\n\tUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n\t    return (\n\t        this.x * xUnitVector.distance(p1, p2, o1, o2) +\n\t        this.y * yUnitVector.distance(p1, p2, o1, o2)\n\t    );\n\t};\n\n\t/*\n\t* Moves point p so the moved position has the same relative\n\t* position to the moved positions of rp1 and rp2 than the\n\t* original positions had.\n\t*\n\t* See APPENDIX on INTERPOLATE at the bottom of this file.\n\t*/\n\tUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n\t    var dm1;\n\t    var dm2;\n\t    var do1;\n\t    var do2;\n\t    var doa1;\n\t    var doa2;\n\t    var dt;\n\n\t    do1 = pv.distance(p, rp1, true, true);\n\t    do2 = pv.distance(p, rp2, true, true);\n\t    dm1 = pv.distance(rp1, rp1, false, true);\n\t    dm2 = pv.distance(rp2, rp2, false, true);\n\t    doa1 = Math.abs(do1);\n\t    doa2 = Math.abs(do2);\n\t    dt = doa1 + doa2;\n\n\t    if (dt === 0) {\n\t        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n\t        return;\n\t    }\n\n\t    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n\t};\n\n\t/*\n\t* Sets the point 'p' relative to point 'rp'\n\t* by the distance 'd'\n\t*\n\t* See APPENDIX on SETRELATIVE at the bottom of this file.\n\t*\n\t* p   ...  point to set\n\t* rp  ... reference point\n\t* d   ... distance on projection vector\n\t* pv  ... projection vector (undefined = this)\n\t* org ... if true, uses the original position of rp as reference.\n\t*/\n\tUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n\t    pv = pv || this;\n\n\t    var rpx = org ? rp.xo : rp.x;\n\t    var rpy = org ? rp.yo : rp.y;\n\t    var rpdx = rpx + d * pv.x;\n\t    var rpdy = rpy + d * pv.y;\n\n\t    var pvns = pv.normalSlope;\n\t    var fvs = this.slope;\n\n\t    var px = p.x;\n\t    var py = p.y;\n\n\t    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n\t    p.y = fvs * (p.x - px) + py;\n\t};\n\n\t/*\n\t* Touches the point p.\n\t*/\n\tUnitVector.prototype.touch = function(p) {\n\t    p.xTouched = true;\n\t    p.yTouched = true;\n\t};\n\n\t/*\n\t* Returns a unit vector with x/y coordinates.\n\t*/\n\tfunction getUnitVector(x, y) {\n\t    var d = Math.sqrt(x * x + y * y);\n\n\t    x /= d;\n\t    y /= d;\n\n\t    if (x === 1 && y === 0) { return xUnitVector; }\n\t    else if (x === 0 && y === 1) { return yUnitVector; }\n\t    else { return new UnitVector(x, y); }\n\t}\n\n\t/*\n\t* Creates a point in the hinting engine.\n\t*/\n\tfunction HPoint(\n\t    x,\n\t    y,\n\t    lastPointOfContour,\n\t    onCurve\n\t) {\n\t    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value\n\t    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value\n\n\t    this.lastPointOfContour = lastPointOfContour;\n\t    this.onCurve = onCurve;\n\t    this.prevPointOnContour = undefined;\n\t    this.nextPointOnContour = undefined;\n\t    this.xTouched = false;\n\t    this.yTouched = false;\n\n\t    Object.preventExtensions(this);\n\t}\n\n\t/*\n\t* Returns the next touched point on the contour.\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n\tHPoint.prototype.nextTouched = function(v) {\n\t    var p = this.nextPointOnContour;\n\n\t    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }\n\n\t    return p;\n\t};\n\n\t/*\n\t* Returns the previous touched point on the contour\n\t*\n\t* v  ... unit vector to test touch axis.\n\t*/\n\tHPoint.prototype.prevTouched = function(v) {\n\t    var p = this.prevPointOnContour;\n\n\t    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }\n\n\t    return p;\n\t};\n\n\t/*\n\t* The zero point.\n\t*/\n\tvar HPZero = Object.freeze(new HPoint(0, 0));\n\n\t/*\n\t* The default state of the interpreter.\n\t*\n\t* Note: Freezing the defaultState and then deriving from it\n\t* makes the V8 Javascript engine going awkward,\n\t* so this is avoided, albeit the defaultState shouldn't\n\t* ever change.\n\t*/\n\tvar defaultState = {\n\t    cvCutIn: 17 / 16,    // control value cut in\n\t    deltaBase: 9,\n\t    deltaShift: 0.125,\n\t    loop: 1,             // loops some instructions\n\t    minDis: 1,           // minimum distance\n\t    autoFlip: true\n\t};\n\n\t/*\n\t* The current state of the interpreter.\n\t*\n\t* env  ... 'fpgm' or 'prep' or 'glyf'\n\t* prog ... the program\n\t*/\n\tfunction State(env, prog) {\n\t    this.env = env;\n\t    this.stack = [];\n\t    this.prog = prog;\n\n\t    switch (env) {\n\t        case 'glyf' :\n\t            this.zp0 = this.zp1 = this.zp2 = 1;\n\t            this.rp0 = this.rp1 = this.rp2 = 0;\n\t            /* fall through */\n\t        case 'prep' :\n\t            this.fv = this.pv = this.dpv = xUnitVector;\n\t            this.round = roundToGrid;\n\t    }\n\t}\n\n\t/*\n\t* Executes a glyph program.\n\t*\n\t* This does the hinting for each glyph.\n\t*\n\t* Returns an array of moved points.\n\t*\n\t* glyph: the glyph to hint\n\t* ppem: the size the glyph is rendered for\n\t*/\n\tHinting.prototype.exec = function(glyph, ppem) {\n\t    if (typeof ppem !== 'number') {\n\t        throw new Error('Point size is not a number!');\n\t    }\n\n\t    // Received a fatal error, don't do any hinting anymore.\n\t    if (this._errorState > 2) { return; }\n\n\t    var font = this.font;\n\t    var prepState = this._prepState;\n\n\t    if (!prepState || prepState.ppem !== ppem) {\n\t        var fpgmState = this._fpgmState;\n\n\t        if (!fpgmState) {\n\t            // Executes the fpgm state.\n\t            // This is used by fonts to define functions.\n\t            State.prototype = defaultState;\n\n\t            fpgmState =\n\t            this._fpgmState =\n\t                new State('fpgm', font.tables.fpgm);\n\n\t            fpgmState.funcs = [ ];\n\t            fpgmState.font = font;\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC FPGM---');\n\t                fpgmState.step = -1;\n\t            }\n\n\t            try {\n\t                exec(fpgmState);\n\t            } catch (e) {\n\t                console.log('Hinting error in FPGM:' + e);\n\t                this._errorState = 3;\n\t                return;\n\t            }\n\t        }\n\n\t        // Executes the prep program for this ppem setting.\n\t        // This is used by fonts to set cvt values\n\t        // depending on to be rendered font size.\n\n\t        State.prototype = fpgmState;\n\t        prepState =\n\t        this._prepState =\n\t            new State('prep', font.tables.prep);\n\n\t        prepState.ppem = ppem;\n\n\t        // Creates a copy of the cvt table\n\t        // and scales it to the current ppem setting.\n\t        var oCvt = font.tables.cvt;\n\t        if (oCvt) {\n\t            var cvt = prepState.cvt = new Array(oCvt.length);\n\t            var scale = ppem / font.unitsPerEm;\n\t            for (var c = 0; c < oCvt.length; c++) {\n\t                cvt[c] = oCvt[c] * scale;\n\t            }\n\t        } else {\n\t            prepState.cvt = [];\n\t        }\n\n\t        if (exports.DEBUG) {\n\t            console.log('---EXEC PREP---');\n\t            prepState.step = -1;\n\t        }\n\n\t        try {\n\t            exec(prepState);\n\t        } catch (e) {\n\t            if (this._errorState < 2) {\n\t                console.log('Hinting error in PREP:' + e);\n\t            }\n\t            this._errorState = 2;\n\t        }\n\t    }\n\n\t    if (this._errorState > 1) { return; }\n\n\t    try {\n\t        return execGlyph(glyph, prepState);\n\t    } catch (e) {\n\t        if (this._errorState < 1) {\n\t            console.log('Hinting error:' + e);\n\t            console.log('Note: further hinting errors are silenced');\n\t        }\n\t        this._errorState = 1;\n\t        return undefined;\n\t    }\n\t};\n\n\t/*\n\t* Executes the hinting program for a glyph.\n\t*/\n\texecGlyph = function(glyph, prepState) {\n\t    // original point positions\n\t    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n\t    var yScale = xScale;\n\t    var components = glyph.components;\n\t    var contours;\n\t    var gZone;\n\t    var state;\n\n\t    State.prototype = prepState;\n\t    if (!components) {\n\t        state = new State('glyf', glyph.instructions);\n\t        if (exports.DEBUG) {\n\t            console.log('---EXEC GLYPH---');\n\t            state.step = -1;\n\t        }\n\t        execComponent(glyph, state, xScale, yScale);\n\t        gZone = state.gZone;\n\t    } else {\n\t        var font = prepState.font;\n\t        gZone = [];\n\t        contours = [];\n\t        for (var i = 0; i < components.length; i++) {\n\t            var c = components[i];\n\t            var cg = font.glyphs.get(c.glyphIndex);\n\n\t            state = new State('glyf', cg.instructions);\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC COMP ' + i + '---');\n\t                state.step = -1;\n\t            }\n\n\t            execComponent(cg, state, xScale, yScale);\n\t            // appends the computed points to the result array\n\t            // post processes the component points\n\t            var dx = Math.round(c.dx * xScale);\n\t            var dy = Math.round(c.dy * yScale);\n\t            var gz = state.gZone;\n\t            var cc = state.contours;\n\t            for (var pi = 0; pi < gz.length; pi++) {\n\t                var p = gz[pi];\n\t                p.xTouched = p.yTouched = false;\n\t                p.xo = p.x = p.x + dx;\n\t                p.yo = p.y = p.y + dy;\n\t            }\n\n\t            var gLen = gZone.length;\n\t            gZone.push.apply(gZone, gz);\n\t            for (var j = 0; j < cc.length; j++) {\n\t                contours.push(cc[j] + gLen);\n\t            }\n\t        }\n\n\t        if (glyph.instructions && !state.inhibitGridFit) {\n\t            // the composite has instructions on its own\n\t            state = new State('glyf', glyph.instructions);\n\n\t            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n\n\t            state.contours = contours;\n\n\t            // note: HPZero cannot be used here, since\n\t            //       the point might be modified\n\t            gZone.push(\n\t                new HPoint(0, 0),\n\t                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n\t            );\n\n\t            if (exports.DEBUG) {\n\t                console.log('---EXEC COMPOSITE---');\n\t                state.step = -1;\n\t            }\n\n\t            exec(state);\n\n\t            gZone.length -= 2;\n\t        }\n\t    }\n\n\t    return gZone;\n\t};\n\n\t/*\n\t* Executes the hinting program for a component of a multi-component glyph\n\t* or of the glyph itself for a non-component glyph.\n\t*/\n\texecComponent = function(glyph, state, xScale, yScale)\n\t{\n\t    var points = glyph.points || [];\n\t    var pLen = points.length;\n\t    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n\t    var contours = state.contours = [];\n\n\t    // Scales the original points and\n\t    // makes copies for the hinted points.\n\t    var cp; // current point\n\t    for (var i = 0; i < pLen; i++) {\n\t        cp = points[i];\n\n\t        gZone[i] = new HPoint(\n\t            cp.x * xScale,\n\t            cp.y * yScale,\n\t            cp.lastPointOfContour,\n\t            cp.onCurve\n\t        );\n\t    }\n\n\t    // Chain links the contours.\n\t    var sp; // start point\n\t    var np; // next point\n\n\t    for (var i$1 = 0; i$1 < pLen; i$1++) {\n\t        cp = gZone[i$1];\n\n\t        if (!sp) {\n\t            sp = cp;\n\t            contours.push(i$1);\n\t        }\n\n\t        if (cp.lastPointOfContour) {\n\t            cp.nextPointOnContour = sp;\n\t            sp.prevPointOnContour = cp;\n\t            sp = undefined;\n\t        } else {\n\t            np = gZone[i$1 + 1];\n\t            cp.nextPointOnContour = np;\n\t            np.prevPointOnContour = cp;\n\t        }\n\t    }\n\n\t    if (state.inhibitGridFit) { return; }\n\n\t    if (exports.DEBUG) {\n\t        console.log('PROCESSING GLYPH', state.stack);\n\t        for (var i$2 = 0; i$2 < pLen; i$2++) {\n\t            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n\t        }\n\t    }\n\n\t    gZone.push(\n\t        new HPoint(0, 0),\n\t        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)\n\t    );\n\n\t    exec(state);\n\n\t    // Removes the extra points.\n\t    gZone.length -= 2;\n\n\t    if (exports.DEBUG) {\n\t        console.log('FINISHED GLYPH', state.stack);\n\t        for (var i$3 = 0; i$3 < pLen; i$3++) {\n\t            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n\t        }\n\t    }\n\t};\n\n\t/*\n\t* Executes the program loaded in state.\n\t*/\n\texec = function(state) {\n\t    var prog = state.prog;\n\n\t    if (!prog) { return; }\n\n\t    var pLen = prog.length;\n\t    var ins;\n\n\t    for (state.ip = 0; state.ip < pLen; state.ip++) {\n\t        if (exports.DEBUG) { state.step++; }\n\t        ins = instructionTable[prog[state.ip]];\n\n\t        if (!ins) {\n\t            throw new Error(\n\t                'unknown instruction: 0x' +\n\t                Number(prog[state.ip]).toString(16)\n\t            );\n\t        }\n\n\t        ins(state);\n\n\t        // very extensive debugging for each step\n\t        /*\n\t        if (exports.DEBUG) {\n\t            var da;\n\t            if (state.gZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.gZone.length; i++)\n\t                {\n\t                    da.push(i + ' ' +\n\t                        state.gZone[i].x * 64 + ' ' +\n\t                        state.gZone[i].y * 64 + ' ' +\n\t                        (state.gZone[i].xTouched ? 'x' : '') +\n\t                        (state.gZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('GZ', da);\n\t            }\n\n\t            if (state.tZone) {\n\t                da = [];\n\t                for (let i = 0; i < state.tZone.length; i++) {\n\t                    da.push(i + ' ' +\n\t                        state.tZone[i].x * 64 + ' ' +\n\t                        state.tZone[i].y * 64 + ' ' +\n\t                        (state.tZone[i].xTouched ? 'x' : '') +\n\t                        (state.tZone[i].yTouched ? 'y' : '')\n\t                    );\n\t                }\n\t                console.log('TZ', da);\n\t            }\n\n\t            if (state.stack.length > 10) {\n\t                console.log(\n\t                    state.stack.length,\n\t                    '...', state.stack.slice(state.stack.length - 10)\n\t                );\n\t            } else {\n\t                console.log(state.stack.length, state.stack);\n\t            }\n\t        }\n\t        */\n\t    }\n\t};\n\n\t/*\n\t* Initializes the twilight zone.\n\t*\n\t* This is only done if a SZPx instruction\n\t* refers to the twilight zone.\n\t*/\n\tfunction initTZone(state)\n\t{\n\t    var tZone = state.tZone = new Array(state.gZone.length);\n\n\t    // no idea if this is actually correct...\n\t    for (var i = 0; i < tZone.length; i++)\n\t    {\n\t        tZone[i] = new HPoint(0, 0);\n\t    }\n\t}\n\n\t/*\n\t* Skips the instruction pointer ahead over an IF/ELSE block.\n\t* handleElse .. if true breaks on matching ELSE\n\t*/\n\tfunction skip(state, handleElse)\n\t{\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\t    var nesting = 1;\n\t    var ins;\n\n\t    do {\n\t        ins = prog[++ip];\n\t        if (ins === 0x58) // IF\n\t            { nesting++; }\n\t        else if (ins === 0x59) // EIF\n\t            { nesting--; }\n\t        else if (ins === 0x40) // NPUSHB\n\t            { ip += prog[ip + 1] + 1; }\n\t        else if (ins === 0x41) // NPUSHW\n\t            { ip += 2 * prog[ip + 1] + 1; }\n\t        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB\n\t            { ip += ins - 0xB0 + 1; }\n\t        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW\n\t            { ip += (ins - 0xB8 + 1) * 2; }\n\t        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE\n\t            { break; }\n\t    } while (nesting > 0);\n\n\t    state.ip = ip;\n\t}\n\n\t/*----------------------------------------------------------*\n\t*          And then a lot of instructions...                *\n\t*----------------------------------------------------------*/\n\n\t// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis\n\t// 0x00-0x01\n\tfunction SVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }\n\n\t    state.fv = state.pv = state.dpv = v;\n\t}\n\n\t// SPVTCA[a] Set Projection Vector to Coordinate Axis\n\t// 0x02-0x03\n\tfunction SPVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }\n\n\t    state.pv = state.dpv = v;\n\t}\n\n\t// SFVTCA[a] Set Freedom Vector to Coordinate Axis\n\t// 0x04-0x05\n\tfunction SFVTCA(v, state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }\n\n\t    state.fv = v;\n\t}\n\n\t// SPVTL[a] Set Projection Vector To Line\n\t// 0x06-0x07\n\tfunction SPVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.pv = state.dpv = getUnitVector(dx, dy);\n\t}\n\n\t// SFVTL[a] Set Freedom Vector To Line\n\t// 0x08-0x09\n\tfunction SFVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.fv = getUnitVector(dx, dy);\n\t}\n\n\t// SPVFS[] Set Projection Vector From Stack\n\t// 0x0A\n\tfunction SPVFS(state) {\n\t    var stack = state.stack;\n\t    var y = stack.pop();\n\t    var x = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n\t    state.pv = state.dpv = getUnitVector(x, y);\n\t}\n\n\t// SFVFS[] Set Freedom Vector From Stack\n\t// 0x0B\n\tfunction SFVFS(state) {\n\t    var stack = state.stack;\n\t    var y = stack.pop();\n\t    var x = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }\n\n\t    state.fv = getUnitVector(x, y);\n\t}\n\n\t// GPV[] Get Projection Vector\n\t// 0x0C\n\tfunction GPV(state) {\n\t    var stack = state.stack;\n\t    var pv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }\n\n\t    stack.push(pv.x * 0x4000);\n\t    stack.push(pv.y * 0x4000);\n\t}\n\n\t// GFV[] Get Freedom Vector\n\t// 0x0C\n\tfunction GFV(state) {\n\t    var stack = state.stack;\n\t    var fv = state.fv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }\n\n\t    stack.push(fv.x * 0x4000);\n\t    stack.push(fv.y * 0x4000);\n\t}\n\n\t// SFVTPV[] Set Freedom Vector To Projection Vector\n\t// 0x0E\n\tfunction SFVTPV(state) {\n\t    state.fv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }\n\t}\n\n\t// ISECT[] moves point p to the InterSECTion of two lines\n\t// 0x0F\n\tfunction ISECT(state)\n\t{\n\t    var stack = state.stack;\n\t    var pa0i = stack.pop();\n\t    var pa1i = stack.pop();\n\t    var pb0i = stack.pop();\n\t    var pb1i = stack.pop();\n\t    var pi = stack.pop();\n\t    var z0 = state.z0;\n\t    var z1 = state.z1;\n\t    var pa0 = z0[pa0i];\n\t    var pa1 = z0[pa1i];\n\t    var pb0 = z1[pb0i];\n\t    var pb1 = z1[pb1i];\n\t    var p = state.z2[pi];\n\n\t    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }\n\n\t    // math from\n\t    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n\n\t    var x1 = pa0.x;\n\t    var y1 = pa0.y;\n\t    var x2 = pa1.x;\n\t    var y2 = pa1.y;\n\t    var x3 = pb0.x;\n\t    var y3 = pb0.y;\n\t    var x4 = pb1.x;\n\t    var y4 = pb1.y;\n\n\t    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t    var f1 = x1 * y2 - y1 * x2;\n\t    var f2 = x3 * y4 - y3 * x4;\n\n\t    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n\t    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n\t}\n\n\t// SRP0[] Set Reference Point 0\n\t// 0x10\n\tfunction SRP0(state) {\n\t    state.rp0 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }\n\t}\n\n\t// SRP1[] Set Reference Point 1\n\t// 0x11\n\tfunction SRP1(state) {\n\t    state.rp1 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }\n\t}\n\n\t// SRP1[] Set Reference Point 2\n\t// 0x12\n\tfunction SRP2(state) {\n\t    state.rp2 = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }\n\t}\n\n\t// SZP0[] Set Zone Pointer 0\n\t// 0x13\n\tfunction SZP0(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }\n\n\t    state.zp0 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z0 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z0 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZP1[] Set Zone Pointer 1\n\t// 0x14\n\tfunction SZP1(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }\n\n\t    state.zp1 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z1 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z1 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZP2[] Set Zone Pointer 2\n\t// 0x15\n\tfunction SZP2(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }\n\n\t    state.zp2 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z2 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z2 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SZPS[] Set Zone PointerS\n\t// 0x16\n\tfunction SZPS(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }\n\n\t    state.zp0 = state.zp1 = state.zp2 = n;\n\n\t    switch (n) {\n\t        case 0:\n\t            if (!state.tZone) { initTZone(state); }\n\t            state.z0 = state.z1 = state.z2 = state.tZone;\n\t            break;\n\t        case 1 :\n\t            state.z0 = state.z1 = state.z2 = state.gZone;\n\t            break;\n\t        default :\n\t            throw new Error('Invalid zone pointer');\n\t    }\n\t}\n\n\t// SLOOP[] Set LOOP variable\n\t// 0x17\n\tfunction SLOOP(state) {\n\t    state.loop = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }\n\t}\n\n\t// RTG[] Round To Grid\n\t// 0x18\n\tfunction RTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }\n\n\t    state.round = roundToGrid;\n\t}\n\n\t// RTHG[] Round To Half Grid\n\t// 0x19\n\tfunction RTHG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }\n\n\t    state.round = roundToHalfGrid;\n\t}\n\n\t// SMD[] Set Minimum Distance\n\t// 0x1A\n\tfunction SMD(state) {\n\t    var d = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }\n\n\t    state.minDis = d / 0x40;\n\t}\n\n\t// ELSE[] ELSE clause\n\t// 0x1B\n\tfunction ELSE(state) {\n\t    // This instruction has been reached by executing a then branch\n\t    // so it just skips ahead until matching EIF.\n\t    //\n\t    // In case the IF was negative the IF[] instruction already\n\t    // skipped forward over the ELSE[]\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }\n\n\t    skip(state, false);\n\t}\n\n\t// JMPR[] JuMP Relative\n\t// 0x1C\n\tfunction JMPR(state) {\n\t    var o = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }\n\n\t    // A jump by 1 would do nothing.\n\t    state.ip += o - 1;\n\t}\n\n\t// SCVTCI[] Set Control Value Table Cut-In\n\t// 0x1D\n\tfunction SCVTCI(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }\n\n\t    state.cvCutIn = n / 0x40;\n\t}\n\n\t// DUP[] DUPlicate top stack element\n\t// 0x20\n\tfunction DUP(state) {\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }\n\n\t    stack.push(stack[stack.length - 1]);\n\t}\n\n\t// POP[] POP top stack element\n\t// 0x21\n\tfunction POP(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }\n\n\t    state.stack.pop();\n\t}\n\n\t// CLEAR[] CLEAR the stack\n\t// 0x22\n\tfunction CLEAR(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }\n\n\t    state.stack.length = 0;\n\t}\n\n\t// SWAP[] SWAP the top two elements on the stack\n\t// 0x23\n\tfunction SWAP(state) {\n\t    var stack = state.stack;\n\n\t    var a = stack.pop();\n\t    var b = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }\n\n\t    stack.push(a);\n\t    stack.push(b);\n\t}\n\n\t// DEPTH[] DEPTH of the stack\n\t// 0x24\n\tfunction DEPTH(state) {\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }\n\n\t    stack.push(stack.length);\n\t}\n\n\t// LOOPCALL[] LOOPCALL function\n\t// 0x2A\n\tfunction LOOPCALL(state) {\n\t    var stack = state.stack;\n\t    var fn = stack.pop();\n\t    var c = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }\n\n\t    // saves callers program\n\t    var cip = state.ip;\n\t    var cprog = state.prog;\n\n\t    state.prog = state.funcs[fn];\n\n\t    // executes the function\n\t    for (var i = 0; i < c; i++) {\n\t        exec(state);\n\n\t        if (exports.DEBUG) { console.log(\n\t            ++state.step,\n\t            i + 1 < c ? 'next loopcall' : 'done loopcall',\n\t            i\n\t        ); }\n\t    }\n\n\t    // restores the callers program\n\t    state.ip = cip;\n\t    state.prog = cprog;\n\t}\n\n\t// CALL[] CALL function\n\t// 0x2B\n\tfunction CALL(state) {\n\t    var fn = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }\n\n\t    // saves callers program\n\t    var cip = state.ip;\n\t    var cprog = state.prog;\n\n\t    state.prog = state.funcs[fn];\n\n\t    // executes the function\n\t    exec(state);\n\n\t    // restores the callers program\n\t    state.ip = cip;\n\t    state.prog = cprog;\n\n\t    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }\n\t}\n\n\t// CINDEX[] Copy the INDEXed element to the top of the stack\n\t// 0x25\n\tfunction CINDEX(state) {\n\t    var stack = state.stack;\n\t    var k = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }\n\n\t    // In case of k == 1, it copies the last element after popping\n\t    // thus stack.length - k.\n\t    stack.push(stack[stack.length - k]);\n\t}\n\n\t// MINDEX[] Move the INDEXed element to the top of the stack\n\t// 0x26\n\tfunction MINDEX(state) {\n\t    var stack = state.stack;\n\t    var k = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }\n\n\t    stack.push(stack.splice(stack.length - k, 1)[0]);\n\t}\n\n\t// FDEF[] Function DEFinition\n\t// 0x2C\n\tfunction FDEF(state) {\n\t    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }\n\t    var stack = state.stack;\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\n\t    var fn = stack.pop();\n\t    var ipBegin = ip;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }\n\n\t    while (prog[++ip] !== 0x2D){ }\n\n\t    state.ip = ip;\n\t    state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n\t}\n\n\t// MDAP[a] Move Direct Absolute Point\n\t// 0x2E-0x2F\n\tfunction MDAP(round, state) {\n\t    var pi = state.stack.pop();\n\t    var p = state.z0[pi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }\n\n\t    var d = pv.distance(p, HPZero);\n\n\t    if (round) { d = state.round(d); }\n\n\t    fv.setRelative(p, HPZero, d, pv);\n\t    fv.touch(p);\n\n\t    state.rp0 = state.rp1 = pi;\n\t}\n\n\t// IUP[a] Interpolate Untouched Points through the outline\n\t// 0x30\n\tfunction IUP(v, state) {\n\t    var z2 = state.z2;\n\t    var pLen = z2.length - 2;\n\t    var cp;\n\t    var pp;\n\t    var np;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }\n\n\t    for (var i = 0; i < pLen; i++) {\n\t        cp = z2[i]; // current point\n\n\t        // if this point has been touched go on\n\t        if (v.touched(cp)) { continue; }\n\n\t        pp = cp.prevTouched(v);\n\n\t        // no point on the contour has been touched?\n\t        if (pp === cp) { continue; }\n\n\t        np = cp.nextTouched(v);\n\n\t        if (pp === np) {\n\t            // only one point on the contour has been touched\n\t            // so simply moves the point like that\n\n\t            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n\t        }\n\n\t        v.interpolate(cp, pp, np, v);\n\t    }\n\t}\n\n\t// SHP[] SHift Point using reference point\n\t// 0x32-0x33\n\tfunction SHP(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var loop = state.loop;\n\t    var z2 = state.z2;\n\n\t    while (loop--)\n\t    {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        var d = pv.distance(rp, rp, false, true);\n\t        fv.setRelative(p, p, d, pv);\n\t        fv.touch(p);\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ?\n\t                   'loop ' + (state.loop - loop) + ': ' :\n\t                   ''\n\t                ) +\n\t                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi\n\t            );\n\t        }\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// SHC[] SHift Contour using reference point\n\t// 0x36-0x37\n\tfunction SHC(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var ci = stack.pop();\n\t    var sp = state.z2[state.contours[ci]];\n\t    var p = sp;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }\n\n\t    var d = pv.distance(rp, rp, false, true);\n\n\t    do {\n\t        if (p !== rp) { fv.setRelative(p, p, d, pv); }\n\t        p = p.nextPointOnContour;\n\t    } while (p !== sp);\n\t}\n\n\t// SHZ[] SHift Zone using reference point\n\t// 0x36-0x37\n\tfunction SHZ(a, state) {\n\t    var stack = state.stack;\n\t    var rpi = a ? state.rp1 : state.rp2;\n\t    var rp = (a ? state.z0 : state.z1)[rpi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    var e = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }\n\n\t    var z;\n\t    switch (e) {\n\t        case 0 : z = state.tZone; break;\n\t        case 1 : z = state.gZone; break;\n\t        default : throw new Error('Invalid zone');\n\t    }\n\n\t    var p;\n\t    var d = pv.distance(rp, rp, false, true);\n\t    var pLen = z.length - 2;\n\t    for (var i = 0; i < pLen; i++)\n\t    {\n\t        p = z[i];\n\t        fv.setRelative(p, p, d, pv);\n\t        //if (p !== rp) fv.setRelative(p, p, d, pv);\n\t    }\n\t}\n\n\t// SHPIX[] SHift point by a PIXel amount\n\t// 0x38\n\tfunction SHPIX(state) {\n\t    var stack = state.stack;\n\t    var loop = state.loop;\n\t    var fv = state.fv;\n\t    var d = stack.pop() / 0x40;\n\t    var z2 = state.z2;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'SHPIX[]', pi, d\n\t            );\n\t        }\n\n\t        fv.setRelative(p, p, d);\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// IP[] Interpolate Point\n\t// 0x39\n\tfunction IP(state) {\n\t    var stack = state.stack;\n\t    var rp1i = state.rp1;\n\t    var rp2i = state.rp2;\n\t    var loop = state.loop;\n\t    var rp1 = state.z0[rp1i];\n\t    var rp2 = state.z1[rp2i];\n\t    var fv = state.fv;\n\t    var pv = state.dpv;\n\t    var z2 = state.z2;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z2[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'IP[]', pi, rp1i, '<->', rp2i\n\t            );\n\t        }\n\n\t        fv.interpolate(p, rp1, rp2, pv);\n\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// MSIRP[a] Move Stack Indirect Relative Point\n\t// 0x3A-0x3B\n\tfunction MSIRP(a, state) {\n\t    var stack = state.stack;\n\t    var d = stack.pop() / 64;\n\t    var pi = stack.pop();\n\t    var p = state.z1[pi];\n\t    var rp0 = state.z0[state.rp0];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\n\t    fv.setRelative(p, rp0, d, pv);\n\t    fv.touch(p);\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }\n\n\t    state.rp1 = state.rp0;\n\t    state.rp2 = pi;\n\t    if (a) { state.rp0 = pi; }\n\t}\n\n\t// ALIGNRP[] Align to reference point.\n\t// 0x3C\n\tfunction ALIGNRP(state) {\n\t    var stack = state.stack;\n\t    var rp0i = state.rp0;\n\t    var rp0 = state.z0[rp0i];\n\t    var loop = state.loop;\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var z1 = state.z1;\n\n\t    while (loop--) {\n\t        var pi = stack.pop();\n\t        var p = z1[pi];\n\n\t        if (exports.DEBUG) {\n\t            console.log(\n\t                state.step,\n\t                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +\n\t                'ALIGNRP[]', pi\n\t            );\n\t        }\n\n\t        fv.setRelative(p, rp0, 0, pv);\n\t        fv.touch(p);\n\t    }\n\n\t    state.loop = 1;\n\t}\n\n\t// RTG[] Round To Double Grid\n\t// 0x3D\n\tfunction RTDG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }\n\n\t    state.round = roundToDoubleGrid;\n\t}\n\n\t// MIAP[a] Move Indirect Absolute Point\n\t// 0x3E-0x3F\n\tfunction MIAP(round, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var pi = stack.pop();\n\t    var p = state.z0[pi];\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var cv = state.cvt[n];\n\n\t    if (exports.DEBUG) {\n\t        console.log(\n\t            state.step,\n\t            'MIAP[' + round + ']',\n\t            n, '(', cv, ')', pi\n\t        );\n\t    }\n\n\t    var d = pv.distance(p, HPZero);\n\n\t    if (round) {\n\t        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\n\t        d = state.round(d);\n\t    }\n\n\t    fv.setRelative(p, HPZero, d, pv);\n\n\t    if (state.zp0 === 0) {\n\t        p.xo = p.x;\n\t        p.yo = p.y;\n\t    }\n\n\t    fv.touch(p);\n\n\t    state.rp0 = state.rp1 = pi;\n\t}\n\n\t// NPUSB[] PUSH N Bytes\n\t// 0x40\n\tfunction NPUSHB(state) {\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\t    var stack = state.stack;\n\n\t    var n = prog[++ip];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }\n\n\t    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n\t    state.ip = ip;\n\t}\n\n\t// NPUSHW[] PUSH N Words\n\t// 0x41\n\tfunction NPUSHW(state) {\n\t    var ip = state.ip;\n\t    var prog = state.prog;\n\t    var stack = state.stack;\n\t    var n = prog[++ip];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var w = (prog[++ip] << 8) | prog[++ip];\n\t        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n\t        stack.push(w);\n\t    }\n\n\t    state.ip = ip;\n\t}\n\n\t// WS[] Write Store\n\t// 0x42\n\tfunction WS(state) {\n\t    var stack = state.stack;\n\t    var store = state.store;\n\n\t    if (!store) { store = state.store = []; }\n\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }\n\n\t    store[l] = v;\n\t}\n\n\t// RS[] Read Store\n\t// 0x43\n\tfunction RS(state) {\n\t    var stack = state.stack;\n\t    var store = state.store;\n\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'RS', l); }\n\n\t    var v = (store && store[l]) || 0;\n\n\t    stack.push(v);\n\t}\n\n\t// WCVTP[] Write Control Value Table in Pixel units\n\t// 0x44\n\tfunction WCVTP(state) {\n\t    var stack = state.stack;\n\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }\n\n\t    state.cvt[l] = v / 0x40;\n\t}\n\n\t// RCVT[] Read Control Value Table entry\n\t// 0x45\n\tfunction RCVT(state) {\n\t    var stack = state.stack;\n\t    var cvte = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }\n\n\t    stack.push(state.cvt[cvte] * 0x40);\n\t}\n\n\t// GC[] Get Coordinate projected onto the projection vector\n\t// 0x46-0x47\n\tfunction GC(a, state) {\n\t    var stack = state.stack;\n\t    var pi = stack.pop();\n\t    var p = state.z2[pi];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }\n\n\t    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);\n\t}\n\n\t// MD[a] Measure Distance\n\t// 0x49-0x4A\n\tfunction MD(a, state) {\n\t    var stack = state.stack;\n\t    var pi2 = stack.pop();\n\t    var pi1 = stack.pop();\n\t    var p2 = state.z1[pi2];\n\t    var p1 = state.z0[pi1];\n\t    var d = state.dpv.distance(p1, p2, a, a);\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }\n\n\t    state.stack.push(Math.round(d * 64));\n\t}\n\n\t// MPPEM[] Measure Pixels Per EM\n\t// 0x4B\n\tfunction MPPEM(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }\n\t    state.stack.push(state.ppem);\n\t}\n\n\t// FLIPON[] set the auto FLIP Boolean to ON\n\t// 0x4D\n\tfunction FLIPON(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }\n\t    state.autoFlip = true;\n\t}\n\n\t// LT[] Less Than\n\t// 0x50\n\tfunction LT(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }\n\n\t    stack.push(e1 < e2 ? 1 : 0);\n\t}\n\n\t// LTEQ[] Less Than or EQual\n\t// 0x53\n\tfunction LTEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }\n\n\t    stack.push(e1 <= e2 ? 1 : 0);\n\t}\n\n\t// GTEQ[] Greater Than\n\t// 0x52\n\tfunction GT(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }\n\n\t    stack.push(e1 > e2 ? 1 : 0);\n\t}\n\n\t// GTEQ[] Greater Than or EQual\n\t// 0x53\n\tfunction GTEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }\n\n\t    stack.push(e1 >= e2 ? 1 : 0);\n\t}\n\n\t// EQ[] EQual\n\t// 0x54\n\tfunction EQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }\n\n\t    stack.push(e2 === e1 ? 1 : 0);\n\t}\n\n\t// NEQ[] Not EQual\n\t// 0x55\n\tfunction NEQ(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }\n\n\t    stack.push(e2 !== e1 ? 1 : 0);\n\t}\n\n\t// ODD[] ODD\n\t// 0x56\n\tfunction ODD(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }\n\n\t    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n\t}\n\n\t// EVEN[] EVEN\n\t// 0x57\n\tfunction EVEN(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }\n\n\t    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n\t}\n\n\t// IF[] IF test\n\t// 0x58\n\tfunction IF(state) {\n\t    var test = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }\n\n\t    // if test is true it just continues\n\t    // if not the ip is skipped until matching ELSE or EIF\n\t    if (!test) {\n\t        skip(state, true);\n\n\t        if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n\t    }\n\t}\n\n\t// EIF[] End IF\n\t// 0x59\n\tfunction EIF(state) {\n\t    // this can be reached normally when\n\t    // executing an else branch.\n\t    // -> just ignore it\n\n\t    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }\n\t}\n\n\t// AND[] logical AND\n\t// 0x5A\n\tfunction AND(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }\n\n\t    stack.push(e2 && e1 ? 1 : 0);\n\t}\n\n\t// OR[] logical OR\n\t// 0x5B\n\tfunction OR(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }\n\n\t    stack.push(e2 || e1 ? 1 : 0);\n\t}\n\n\t// NOT[] logical NOT\n\t// 0x5C\n\tfunction NOT(state) {\n\t    var stack = state.stack;\n\t    var e = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }\n\n\t    stack.push(e ? 0 : 1);\n\t}\n\n\t// DELTAP1[] DELTA exception P1\n\t// DELTAP2[] DELTA exception P2\n\t// DELTAP3[] DELTA exception P3\n\t// 0x5D, 0x71, 0x72\n\tfunction DELTAP123(b, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var fv = state.fv;\n\t    var pv = state.pv;\n\t    var ppem = state.ppem;\n\t    var base = state.deltaBase + (b - 1) * 16;\n\t    var ds = state.deltaShift;\n\t    var z0 = state.z0;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var pi = stack.pop();\n\t        var arg = stack.pop();\n\t        var appem = base + ((arg & 0xF0) >> 4);\n\t        if (appem !== ppem) { continue; }\n\n\t        var mag = (arg & 0x0F) - 8;\n\t        if (mag >= 0) { mag++; }\n\t        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }\n\n\t        var p = z0[pi];\n\t        fv.setRelative(p, p, mag * ds, pv);\n\t    }\n\t}\n\n\t// SDB[] Set Delta Base in the graphics state\n\t// 0x5E\n\tfunction SDB(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }\n\n\t    state.deltaBase = n;\n\t}\n\n\t// SDS[] Set Delta Shift in the graphics state\n\t// 0x5F\n\tfunction SDS(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }\n\n\t    state.deltaShift = Math.pow(0.5, n);\n\t}\n\n\t// ADD[] ADD\n\t// 0x60\n\tfunction ADD(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }\n\n\t    stack.push(n1 + n2);\n\t}\n\n\t// SUB[] SUB\n\t// 0x61\n\tfunction SUB(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }\n\n\t    stack.push(n1 - n2);\n\t}\n\n\t// DIV[] DIV\n\t// 0x62\n\tfunction DIV(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }\n\n\t    stack.push(n1 * 64 / n2);\n\t}\n\n\t// MUL[] MUL\n\t// 0x63\n\tfunction MUL(state) {\n\t    var stack = state.stack;\n\t    var n2 = stack.pop();\n\t    var n1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }\n\n\t    stack.push(n1 * n2 / 64);\n\t}\n\n\t// ABS[] ABSolute value\n\t// 0x64\n\tfunction ABS(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }\n\n\t    stack.push(Math.abs(n));\n\t}\n\n\t// NEG[] NEGate\n\t// 0x65\n\tfunction NEG(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }\n\n\t    stack.push(-n);\n\t}\n\n\t// FLOOR[] FLOOR\n\t// 0x66\n\tfunction FLOOR(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }\n\n\t    stack.push(Math.floor(n / 0x40) * 0x40);\n\t}\n\n\t// CEILING[] CEILING\n\t// 0x67\n\tfunction CEILING(state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }\n\n\t    stack.push(Math.ceil(n / 0x40) * 0x40);\n\t}\n\n\t// ROUND[ab] ROUND value\n\t// 0x68-0x6B\n\tfunction ROUND(dt, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }\n\n\t    stack.push(state.round(n / 0x40) * 0x40);\n\t}\n\n\t// WCVTF[] Write Control Value Table in Funits\n\t// 0x70\n\tfunction WCVTF(state) {\n\t    var stack = state.stack;\n\t    var v = stack.pop();\n\t    var l = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }\n\n\t    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n\t}\n\n\t// DELTAC1[] DELTA exception C1\n\t// DELTAC2[] DELTA exception C2\n\t// DELTAC3[] DELTA exception C3\n\t// 0x73, 0x74, 0x75\n\tfunction DELTAC123(b, state) {\n\t    var stack = state.stack;\n\t    var n = stack.pop();\n\t    var ppem = state.ppem;\n\t    var base = state.deltaBase + (b - 1) * 16;\n\t    var ds = state.deltaShift;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var c = stack.pop();\n\t        var arg = stack.pop();\n\t        var appem = base + ((arg & 0xF0) >> 4);\n\t        if (appem !== ppem) { continue; }\n\n\t        var mag = (arg & 0x0F) - 8;\n\t        if (mag >= 0) { mag++; }\n\n\t        var delta = mag * ds;\n\n\t        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }\n\n\t        state.cvt[c] += delta;\n\t    }\n\t}\n\n\t// SROUND[] Super ROUND\n\t// 0x76\n\tfunction SROUND(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }\n\n\t    state.round = roundSuper;\n\n\t    var period;\n\n\t    switch (n & 0xC0) {\n\t        case 0x00:\n\t            period = 0.5;\n\t            break;\n\t        case 0x40:\n\t            period = 1;\n\t            break;\n\t        case 0x80:\n\t            period = 2;\n\t            break;\n\t        default:\n\t            throw new Error('invalid SROUND value');\n\t    }\n\n\t    state.srPeriod = period;\n\n\t    switch (n & 0x30) {\n\t        case 0x00:\n\t            state.srPhase = 0;\n\t            break;\n\t        case 0x10:\n\t            state.srPhase = 0.25 * period;\n\t            break;\n\t        case 0x20:\n\t            state.srPhase = 0.5  * period;\n\t            break;\n\t        case 0x30:\n\t            state.srPhase = 0.75 * period;\n\t            break;\n\t        default: throw new Error('invalid SROUND value');\n\t    }\n\n\t    n &= 0x0F;\n\n\t    if (n === 0) { state.srThreshold = 0; }\n\t    else { state.srThreshold = (n / 8 - 0.5) * period; }\n\t}\n\n\t// S45ROUND[] Super ROUND 45 degrees\n\t// 0x77\n\tfunction S45ROUND(state) {\n\t    var n = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }\n\n\t    state.round = roundSuper;\n\n\t    var period;\n\n\t    switch (n & 0xC0) {\n\t        case 0x00:\n\t            period = Math.sqrt(2) / 2;\n\t            break;\n\t        case 0x40:\n\t            period = Math.sqrt(2);\n\t            break;\n\t        case 0x80:\n\t            period = 2 * Math.sqrt(2);\n\t            break;\n\t        default:\n\t            throw new Error('invalid S45ROUND value');\n\t    }\n\n\t    state.srPeriod = period;\n\n\t    switch (n & 0x30) {\n\t        case 0x00:\n\t            state.srPhase = 0;\n\t            break;\n\t        case 0x10:\n\t            state.srPhase = 0.25 * period;\n\t            break;\n\t        case 0x20:\n\t            state.srPhase = 0.5  * period;\n\t            break;\n\t        case 0x30:\n\t            state.srPhase = 0.75 * period;\n\t            break;\n\t        default:\n\t            throw new Error('invalid S45ROUND value');\n\t    }\n\n\t    n &= 0x0F;\n\n\t    if (n === 0) { state.srThreshold = 0; }\n\t    else { state.srThreshold = (n / 8 - 0.5) * period; }\n\t}\n\n\t// ROFF[] Round Off\n\t// 0x7A\n\tfunction ROFF(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }\n\n\t    state.round = roundOff;\n\t}\n\n\t// RUTG[] Round Up To Grid\n\t// 0x7C\n\tfunction RUTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }\n\n\t    state.round = roundUpToGrid;\n\t}\n\n\t// RDTG[] Round Down To Grid\n\t// 0x7D\n\tfunction RDTG(state) {\n\t    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }\n\n\t    state.round = roundDownToGrid;\n\t}\n\n\t// SCANCTRL[] SCAN conversion ConTRoL\n\t// 0x85\n\tfunction SCANCTRL(state) {\n\t    var n = state.stack.pop();\n\n\t    // ignored by opentype.js\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }\n\t}\n\n\t// SDPVTL[a] Set Dual Projection Vector To Line\n\t// 0x86-0x87\n\tfunction SDPVTL(a, state) {\n\t    var stack = state.stack;\n\t    var p2i = stack.pop();\n\t    var p1i = stack.pop();\n\t    var p2 = state.z2[p2i];\n\t    var p1 = state.z1[p1i];\n\n\t    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }\n\n\t    var dx;\n\t    var dy;\n\n\t    if (!a) {\n\t        dx = p1.x - p2.x;\n\t        dy = p1.y - p2.y;\n\t    } else {\n\t        dx = p2.y - p1.y;\n\t        dy = p1.x - p2.x;\n\t    }\n\n\t    state.dpv = getUnitVector(dx, dy);\n\t}\n\n\t// GETINFO[] GET INFOrmation\n\t// 0x88\n\tfunction GETINFO(state) {\n\t    var stack = state.stack;\n\t    var sel = stack.pop();\n\t    var r = 0;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }\n\n\t    // v35 as in no subpixel hinting\n\t    if (sel & 0x01) { r = 35; }\n\n\t    // TODO rotation and stretch currently not supported\n\t    // and thus those GETINFO are always 0.\n\n\t    // opentype.js is always gray scaling\n\t    if (sel & 0x20) { r |= 0x1000; }\n\n\t    stack.push(r);\n\t}\n\n\t// ROLL[] ROLL the top three stack elements\n\t// 0x8A\n\tfunction ROLL(state) {\n\t    var stack = state.stack;\n\t    var a = stack.pop();\n\t    var b = stack.pop();\n\t    var c = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }\n\n\t    stack.push(b);\n\t    stack.push(a);\n\t    stack.push(c);\n\t}\n\n\t// MAX[] MAXimum of top two stack elements\n\t// 0x8B\n\tfunction MAX(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }\n\n\t    stack.push(Math.max(e1, e2));\n\t}\n\n\t// MIN[] MINimum of top two stack elements\n\t// 0x8C\n\tfunction MIN(state) {\n\t    var stack = state.stack;\n\t    var e2 = stack.pop();\n\t    var e1 = stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }\n\n\t    stack.push(Math.min(e1, e2));\n\t}\n\n\t// SCANTYPE[] SCANTYPE\n\t// 0x8D\n\tfunction SCANTYPE(state) {\n\t    var n = state.stack.pop();\n\t    // ignored by opentype.js\n\t    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }\n\t}\n\n\t// INSTCTRL[] INSTCTRL\n\t// 0x8D\n\tfunction INSTCTRL(state) {\n\t    var s = state.stack.pop();\n\t    var v = state.stack.pop();\n\n\t    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }\n\n\t    switch (s) {\n\t        case 1 : state.inhibitGridFit = !!v; return;\n\t        case 2 : state.ignoreCvt = !!v; return;\n\t        default: throw new Error('invalid INSTCTRL[] selector');\n\t    }\n\t}\n\n\t// PUSHB[abc] PUSH Bytes\n\t// 0xB0-0xB7\n\tfunction PUSHB(n, state) {\n\t    var stack = state.stack;\n\t    var prog = state.prog;\n\t    var ip = state.ip;\n\n\t    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }\n\n\t    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }\n\n\t    state.ip = ip;\n\t}\n\n\t// PUSHW[abc] PUSH Words\n\t// 0xB8-0xBF\n\tfunction PUSHW(n, state) {\n\t    var ip = state.ip;\n\t    var prog = state.prog;\n\t    var stack = state.stack;\n\n\t    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }\n\n\t    for (var i = 0; i < n; i++) {\n\t        var w = (prog[++ip] << 8) | prog[++ip];\n\t        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }\n\t        stack.push(w);\n\t    }\n\n\t    state.ip = ip;\n\t}\n\n\t// MDRP[abcde] Move Direct Relative Point\n\t// 0xD0-0xEF\n\t// (if indirect is 0)\n\t//\n\t// and\n\t//\n\t// MIRP[abcde] Move Indirect Relative Point\n\t// 0xE0-0xFF\n\t// (if indirect is 1)\n\n\tfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {\n\t    var stack = state.stack;\n\t    var cvte = indirect && stack.pop();\n\t    var pi = stack.pop();\n\t    var rp0i = state.rp0;\n\t    var rp = state.z0[rp0i];\n\t    var p = state.z1[pi];\n\n\t    var md = state.minDis;\n\t    var fv = state.fv;\n\t    var pv = state.dpv;\n\t    var od; // original distance\n\t    var d; // moving distance\n\t    var sign; // sign of distance\n\t    var cv;\n\n\t    d = od = pv.distance(p, rp, true, true);\n\t    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0\n\n\t    // TODO consider autoFlip\n\t    d = Math.abs(d);\n\n\t    if (indirect) {\n\t        cv = state.cvt[cvte];\n\n\t        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }\n\t    }\n\n\t    if (keepD && d < md) { d = md; }\n\n\t    if (ro) { d = state.round(d); }\n\n\t    fv.setRelative(p, rp, sign * d, pv);\n\t    fv.touch(p);\n\n\t    if (exports.DEBUG) {\n\t        console.log(\n\t            state.step,\n\t            (indirect ? 'MIRP[' : 'MDRP[') +\n\t            (setRp0 ? 'M' : 'm') +\n\t            (keepD ? '>' : '_') +\n\t            (ro ? 'R' : '_') +\n\t            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +\n\t            ']',\n\t            indirect ?\n\t                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :\n\t                '',\n\t            pi,\n\t            '(d =', od, '->', sign * d, ')'\n\t        );\n\t    }\n\n\t    state.rp1 = state.rp0;\n\t    state.rp2 = pi;\n\t    if (setRp0) { state.rp0 = pi; }\n\t}\n\n\t/*\n\t* The instruction table.\n\t*/\n\tinstructionTable = [\n\t    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),\n\t    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),\n\t    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),\n\t    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),\n\t    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),\n\t    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),\n\t    /* 0x06 */ SPVTL.bind(undefined, 0),\n\t    /* 0x07 */ SPVTL.bind(undefined, 1),\n\t    /* 0x08 */ SFVTL.bind(undefined, 0),\n\t    /* 0x09 */ SFVTL.bind(undefined, 1),\n\t    /* 0x0A */ SPVFS,\n\t    /* 0x0B */ SFVFS,\n\t    /* 0x0C */ GPV,\n\t    /* 0x0D */ GFV,\n\t    /* 0x0E */ SFVTPV,\n\t    /* 0x0F */ ISECT,\n\t    /* 0x10 */ SRP0,\n\t    /* 0x11 */ SRP1,\n\t    /* 0x12 */ SRP2,\n\t    /* 0x13 */ SZP0,\n\t    /* 0x14 */ SZP1,\n\t    /* 0x15 */ SZP2,\n\t    /* 0x16 */ SZPS,\n\t    /* 0x17 */ SLOOP,\n\t    /* 0x18 */ RTG,\n\t    /* 0x19 */ RTHG,\n\t    /* 0x1A */ SMD,\n\t    /* 0x1B */ ELSE,\n\t    /* 0x1C */ JMPR,\n\t    /* 0x1D */ SCVTCI,\n\t    /* 0x1E */ undefined,   // TODO SSWCI\n\t    /* 0x1F */ undefined,   // TODO SSW\n\t    /* 0x20 */ DUP,\n\t    /* 0x21 */ POP,\n\t    /* 0x22 */ CLEAR,\n\t    /* 0x23 */ SWAP,\n\t    /* 0x24 */ DEPTH,\n\t    /* 0x25 */ CINDEX,\n\t    /* 0x26 */ MINDEX,\n\t    /* 0x27 */ undefined,   // TODO ALIGNPTS\n\t    /* 0x28 */ undefined,\n\t    /* 0x29 */ undefined,   // TODO UTP\n\t    /* 0x2A */ LOOPCALL,\n\t    /* 0x2B */ CALL,\n\t    /* 0x2C */ FDEF,\n\t    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)\n\t    /* 0x2E */ MDAP.bind(undefined, 0),\n\t    /* 0x2F */ MDAP.bind(undefined, 1),\n\t    /* 0x30 */ IUP.bind(undefined, yUnitVector),\n\t    /* 0x31 */ IUP.bind(undefined, xUnitVector),\n\t    /* 0x32 */ SHP.bind(undefined, 0),\n\t    /* 0x33 */ SHP.bind(undefined, 1),\n\t    /* 0x34 */ SHC.bind(undefined, 0),\n\t    /* 0x35 */ SHC.bind(undefined, 1),\n\t    /* 0x36 */ SHZ.bind(undefined, 0),\n\t    /* 0x37 */ SHZ.bind(undefined, 1),\n\t    /* 0x38 */ SHPIX,\n\t    /* 0x39 */ IP,\n\t    /* 0x3A */ MSIRP.bind(undefined, 0),\n\t    /* 0x3B */ MSIRP.bind(undefined, 1),\n\t    /* 0x3C */ ALIGNRP,\n\t    /* 0x3D */ RTDG,\n\t    /* 0x3E */ MIAP.bind(undefined, 0),\n\t    /* 0x3F */ MIAP.bind(undefined, 1),\n\t    /* 0x40 */ NPUSHB,\n\t    /* 0x41 */ NPUSHW,\n\t    /* 0x42 */ WS,\n\t    /* 0x43 */ RS,\n\t    /* 0x44 */ WCVTP,\n\t    /* 0x45 */ RCVT,\n\t    /* 0x46 */ GC.bind(undefined, 0),\n\t    /* 0x47 */ GC.bind(undefined, 1),\n\t    /* 0x48 */ undefined,   // TODO SCFS\n\t    /* 0x49 */ MD.bind(undefined, 0),\n\t    /* 0x4A */ MD.bind(undefined, 1),\n\t    /* 0x4B */ MPPEM,\n\t    /* 0x4C */ undefined,   // TODO MPS\n\t    /* 0x4D */ FLIPON,\n\t    /* 0x4E */ undefined,   // TODO FLIPOFF\n\t    /* 0x4F */ undefined,   // TODO DEBUG\n\t    /* 0x50 */ LT,\n\t    /* 0x51 */ LTEQ,\n\t    /* 0x52 */ GT,\n\t    /* 0x53 */ GTEQ,\n\t    /* 0x54 */ EQ,\n\t    /* 0x55 */ NEQ,\n\t    /* 0x56 */ ODD,\n\t    /* 0x57 */ EVEN,\n\t    /* 0x58 */ IF,\n\t    /* 0x59 */ EIF,\n\t    /* 0x5A */ AND,\n\t    /* 0x5B */ OR,\n\t    /* 0x5C */ NOT,\n\t    /* 0x5D */ DELTAP123.bind(undefined, 1),\n\t    /* 0x5E */ SDB,\n\t    /* 0x5F */ SDS,\n\t    /* 0x60 */ ADD,\n\t    /* 0x61 */ SUB,\n\t    /* 0x62 */ DIV,\n\t    /* 0x63 */ MUL,\n\t    /* 0x64 */ ABS,\n\t    /* 0x65 */ NEG,\n\t    /* 0x66 */ FLOOR,\n\t    /* 0x67 */ CEILING,\n\t    /* 0x68 */ ROUND.bind(undefined, 0),\n\t    /* 0x69 */ ROUND.bind(undefined, 1),\n\t    /* 0x6A */ ROUND.bind(undefined, 2),\n\t    /* 0x6B */ ROUND.bind(undefined, 3),\n\t    /* 0x6C */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6D */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6E */ undefined,   // TODO NROUND[ab]\n\t    /* 0x6F */ undefined,   // TODO NROUND[ab]\n\t    /* 0x70 */ WCVTF,\n\t    /* 0x71 */ DELTAP123.bind(undefined, 2),\n\t    /* 0x72 */ DELTAP123.bind(undefined, 3),\n\t    /* 0x73 */ DELTAC123.bind(undefined, 1),\n\t    /* 0x74 */ DELTAC123.bind(undefined, 2),\n\t    /* 0x75 */ DELTAC123.bind(undefined, 3),\n\t    /* 0x76 */ SROUND,\n\t    /* 0x77 */ S45ROUND,\n\t    /* 0x78 */ undefined,   // TODO JROT[]\n\t    /* 0x79 */ undefined,   // TODO JROF[]\n\t    /* 0x7A */ ROFF,\n\t    /* 0x7B */ undefined,\n\t    /* 0x7C */ RUTG,\n\t    /* 0x7D */ RDTG,\n\t    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though\n\t    /* 0x7F */ POP, // actually AA, supposed to do only a pop though\n\t    /* 0x80 */ undefined,   // TODO FLIPPT\n\t    /* 0x81 */ undefined,   // TODO FLIPRGON\n\t    /* 0x82 */ undefined,   // TODO FLIPRGOFF\n\t    /* 0x83 */ undefined,\n\t    /* 0x84 */ undefined,\n\t    /* 0x85 */ SCANCTRL,\n\t    /* 0x86 */ SDPVTL.bind(undefined, 0),\n\t    /* 0x87 */ SDPVTL.bind(undefined, 1),\n\t    /* 0x88 */ GETINFO,\n\t    /* 0x89 */ undefined,   // TODO IDEF\n\t    /* 0x8A */ ROLL,\n\t    /* 0x8B */ MAX,\n\t    /* 0x8C */ MIN,\n\t    /* 0x8D */ SCANTYPE,\n\t    /* 0x8E */ INSTCTRL,\n\t    /* 0x8F */ undefined,\n\t    /* 0x90 */ undefined,\n\t    /* 0x91 */ undefined,\n\t    /* 0x92 */ undefined,\n\t    /* 0x93 */ undefined,\n\t    /* 0x94 */ undefined,\n\t    /* 0x95 */ undefined,\n\t    /* 0x96 */ undefined,\n\t    /* 0x97 */ undefined,\n\t    /* 0x98 */ undefined,\n\t    /* 0x99 */ undefined,\n\t    /* 0x9A */ undefined,\n\t    /* 0x9B */ undefined,\n\t    /* 0x9C */ undefined,\n\t    /* 0x9D */ undefined,\n\t    /* 0x9E */ undefined,\n\t    /* 0x9F */ undefined,\n\t    /* 0xA0 */ undefined,\n\t    /* 0xA1 */ undefined,\n\t    /* 0xA2 */ undefined,\n\t    /* 0xA3 */ undefined,\n\t    /* 0xA4 */ undefined,\n\t    /* 0xA5 */ undefined,\n\t    /* 0xA6 */ undefined,\n\t    /* 0xA7 */ undefined,\n\t    /* 0xA8 */ undefined,\n\t    /* 0xA9 */ undefined,\n\t    /* 0xAA */ undefined,\n\t    /* 0xAB */ undefined,\n\t    /* 0xAC */ undefined,\n\t    /* 0xAD */ undefined,\n\t    /* 0xAE */ undefined,\n\t    /* 0xAF */ undefined,\n\t    /* 0xB0 */ PUSHB.bind(undefined, 1),\n\t    /* 0xB1 */ PUSHB.bind(undefined, 2),\n\t    /* 0xB2 */ PUSHB.bind(undefined, 3),\n\t    /* 0xB3 */ PUSHB.bind(undefined, 4),\n\t    /* 0xB4 */ PUSHB.bind(undefined, 5),\n\t    /* 0xB5 */ PUSHB.bind(undefined, 6),\n\t    /* 0xB6 */ PUSHB.bind(undefined, 7),\n\t    /* 0xB7 */ PUSHB.bind(undefined, 8),\n\t    /* 0xB8 */ PUSHW.bind(undefined, 1),\n\t    /* 0xB9 */ PUSHW.bind(undefined, 2),\n\t    /* 0xBA */ PUSHW.bind(undefined, 3),\n\t    /* 0xBB */ PUSHW.bind(undefined, 4),\n\t    /* 0xBC */ PUSHW.bind(undefined, 5),\n\t    /* 0xBD */ PUSHW.bind(undefined, 6),\n\t    /* 0xBE */ PUSHW.bind(undefined, 7),\n\t    /* 0xBF */ PUSHW.bind(undefined, 8),\n\t    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),\n\t    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),\n\t    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),\n\t    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),\n\t    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),\n\t    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),\n\t    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),\n\t    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),\n\t    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),\n\t    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),\n\t    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),\n\t    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),\n\t    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),\n\t    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),\n\t    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),\n\t    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),\n\t    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),\n\t    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),\n\t    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),\n\t    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),\n\t    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),\n\t    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),\n\t    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),\n\t    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),\n\t    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),\n\t    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),\n\t    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),\n\t    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),\n\t    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),\n\t    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),\n\t    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),\n\t    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),\n\t    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),\n\t    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),\n\t    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),\n\t    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),\n\t    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),\n\t    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),\n\t    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),\n\t    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),\n\t    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),\n\t    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),\n\t    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),\n\t    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),\n\t    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),\n\t    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),\n\t    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),\n\t    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),\n\t    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),\n\t    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),\n\t    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),\n\t    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),\n\t    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),\n\t    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),\n\t    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),\n\t    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),\n\t    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),\n\t    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),\n\t    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),\n\t    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),\n\t    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),\n\t    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),\n\t    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),\n\t    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)\n\t];\n\n\t/*****************************\n\t  Mathematical Considerations\n\t******************************\n\n\tfv ... refers to freedom vector\n\tpv ... refers to projection vector\n\trp ... refers to reference point\n\tp  ... refers to to point being operated on\n\td  ... refers to distance\n\n\tSETRELATIVE:\n\t============\n\n\tcase freedom vector == x-axis:\n\t------------------------------\n\n\t                        (pv)\n\t                     .-'\n\t              rpd .-'\n\t               .-*\n\t          d .-'90°'\n\t         .-'       '\n\t      .-'           '\n\t   *-'               ' b\n\t  rp                  '\n\t                       '\n\t                        '\n\t            p *----------*-------------- (fv)\n\t                          pm\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b\n\n\t   y - rpdy = pvns * (x- rpdx)\n\n\t   y = p.y\n\n\t   x = rpdx + ( p.y - rpdy ) / pvns\n\n\n\tcase freedom vector == y-axis:\n\t------------------------------\n\n\t    * pm\n\t    |\\\n\t    | \\\n\t    |  \\\n\t    |   \\\n\t    |    \\\n\t    |     \\\n\t    |      \\\n\t    |       \\\n\t    |        \\\n\t    |         \\ b\n\t    |          \\\n\t    |           \\\n\t    |            \\    .-' (pv)\n\t    |         90° \\.-'\n\t    |           .-'* rpd\n\t    |        .-'\n\t    *     *-'  d\n\t    p     rp\n\n\t  rpdx = rpx + d * pv.x\n\t  rpdy = rpy + d * pv.y\n\n\t  equation of line b:\n\t           pvns ... normal slope to pv\n\n\t   y - rpdy = pvns * (x - rpdx)\n\n\t   x = p.x\n\n\t   y = rpdy +  pvns * (p.x - rpdx)\n\n\n\n\tgeneric case:\n\t-------------\n\n\n\t                              .'(fv)\n\t                            .'\n\t                          .* pm\n\t                        .' !\n\t                      .'    .\n\t                    .'      !\n\t                  .'         . b\n\t                .'           !\n\t               *              .\n\t              p               !\n\t                         90°   .    ... (pv)\n\t                           ...-*-'''\n\t                  ...---'''    rpd\n\t         ...---'''   d\n\t   *--'''\n\t  rp\n\n\t    rpdx = rpx + d * pv.x\n\t    rpdy = rpy + d * pv.y\n\n\t equation of line b:\n\t    pvns... normal slope to pv\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t equation of freedom vector line:\n\t    fvs ... slope of freedom vector (=fy/fx)\n\n\t    y - py = fvs * (x - px)\n\n\n\t  on pm both equations are true for same x/y\n\n\t    y - rpdy = pvns * (x - rpdx)\n\n\t    y - py = fvs * (x - px)\n\n\t  form to y and set equal:\n\n\t    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py\n\n\t  expand:\n\n\t    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py\n\n\t  switch:\n\n\t    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy\n\n\t  solve for x:\n\n\t    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy\n\n\n\n\t          fvs * px - pvns * rpdx + rpdy - py\n\t    x =  -----------------------------------\n\t                 fvs - pvns\n\n\t  and:\n\n\t    y = fvs * (x - px) + py\n\n\n\n\tINTERPOLATE:\n\t============\n\n\tExamples of point interpolation.\n\n\tThe weight of the movement of the reference point gets bigger\n\tthe further the other reference point is away, thus the safest\n\toption (that is avoiding 0/0 divisions) is to weight the\n\toriginal distance of the other point by the sum of both distances.\n\n\tIf the sum of both distances is 0, then move the point by the\n\tarithmetic average of the movement of both reference points.\n\n\n\n\n\t           (+6)\n\t    rp1o *---->*rp1\n\t         .     .                          (+12)\n\t         .     .                  rp2o *---------->* rp2\n\t         .     .                       .           .\n\t         .     .                       .           .\n\t         .    10          20           .           .\n\t         |.........|...................|           .\n\t               .   .                               .\n\t               .   . (+8)                          .\n\t                po *------>*p                      .\n\t               .           .                       .\n\t               .    12     .          24           .\n\t               |...........|.......................|\n\t                                  36\n\n\n\t-------\n\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .                      (-10)\n\t         .         .              rp2 *<---------* rpo2\n\t         .         .                   .         .\n\t         .         .                   .         .\n\t         .    10   .          30       .         .\n\t         |.........|.............................|\n\t                   .                   .\n\t                   . (+5)              .\n\t                po *--->* p            .\n\t                   .    .              .\n\t                   .    .   20         .\n\t                   |....|..............|\n\t                     5        15\n\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .\n\t    rp2o *-------->*rp2\n\n\n\t                               (+10)\n\t                          po *-------->* p\n\n\t-------\n\n\n\t           (+10)\n\t    rp1o *-------->*rp1\n\t         .         .\n\t         .         .(+30)\n\t    rp2o *---------------------------->*rp2\n\n\n\t                                        (+25)\n\t                          po *----------------------->* p\n\n\n\n\tvim: set ts=4 sw=4 expandtab:\n\t*****/\n\n\t// The Font object\n\n\t// This code is based on Array.from implementation for strings in https://github.com/mathiasbynens/Array.from\n\tvar arrayFromString = Array.from || (function (s) { return s.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?|[^\\uD800-\\uDFFF]|./g) || []; });\n\n\t/**\n\t * @typedef FontOptions\n\t * @type Object\n\t * @property {Boolean} empty - whether to create a new empty font\n\t * @property {string} familyName\n\t * @property {string} styleName\n\t * @property {string=} fullName\n\t * @property {string=} postScriptName\n\t * @property {string=} designer\n\t * @property {string=} designerURL\n\t * @property {string=} manufacturer\n\t * @property {string=} manufacturerURL\n\t * @property {string=} license\n\t * @property {string=} licenseURL\n\t * @property {string=} version\n\t * @property {string=} description\n\t * @property {string=} copyright\n\t * @property {string=} trademark\n\t * @property {Number} unitsPerEm\n\t * @property {Number} ascender\n\t * @property {Number} descender\n\t * @property {Number} createdTimestamp\n\t * @property {string=} weightClass\n\t * @property {string=} widthClass\n\t * @property {string=} fsSelection\n\t */\n\n\t/**\n\t * A Font represents a loaded OpenType font file.\n\t * It contains a set of glyphs and methods to draw text on a drawing context,\n\t * or to get a path representing the text.\n\t * @exports opentype.Font\n\t * @class\n\t * @param {FontOptions}\n\t * @constructor\n\t */\n\tfunction Font(options) {\n\t    options = options || {};\n\n\t    if (!options.empty) {\n\t        // Check that we've provided the minimum set of names.\n\t        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n\t        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n\t        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n\t        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n\t        checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n\t        checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n\t        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n\t        this.names = {\n\t            fontFamily: {en: options.familyName || ' '},\n\t            fontSubfamily: {en: options.styleName || ' '},\n\t            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n\t            // postScriptName may not contain any whitespace\n\t            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\\s/g, '')},\n\t            designer: {en: options.designer || ' '},\n\t            designerURL: {en: options.designerURL || ' '},\n\t            manufacturer: {en: options.manufacturer || ' '},\n\t            manufacturerURL: {en: options.manufacturerURL || ' '},\n\t            license: {en: options.license || ' '},\n\t            licenseURL: {en: options.licenseURL || ' '},\n\t            version: {en: options.version || 'Version 0.1'},\n\t            description: {en: options.description || ' '},\n\t            copyright: {en: options.copyright || ' '},\n\t            trademark: {en: options.trademark || ' '}\n\t        };\n\t        this.unitsPerEm = options.unitsPerEm || 1000;\n\t        this.ascender = options.ascender;\n\t        this.descender = options.descender;\n\t        this.createdTimestamp = options.createdTimestamp;\n\t        this.tables = { os2: {\n\t            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n\t            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n\t            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n\t        } };\n\t    }\n\n\t    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n\t    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n\t    this.encoding = new DefaultEncoding(this);\n\t    this.position = new Position(this);\n\t    this.substitution = new Substitution(this);\n\t    this.tables = this.tables || {};\n\n\t    Object.defineProperty(this, 'hinting', {\n\t        get: function() {\n\t            if (this._hinting) { return this._hinting; }\n\t            if (this.outlinesFormat === 'truetype') {\n\t                return (this._hinting = new Hinting(this));\n\t            }\n\t        }\n\t    });\n\t}\n\n\t/**\n\t * Check if the font has a glyph for the given character.\n\t * @param  {string}\n\t * @return {Boolean}\n\t */\n\tFont.prototype.hasChar = function(c) {\n\t    return this.encoding.charToGlyphIndex(c) !== null;\n\t};\n\n\t/**\n\t * Convert the given character to a single glyph index.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.charToGlyphIndex = function(s) {\n\t    return this.encoding.charToGlyphIndex(s);\n\t};\n\n\t/**\n\t * Convert the given character to a single Glyph object.\n\t * Note that this function assumes that there is a one-to-one mapping between\n\t * the given character and a glyph; for complex scripts this might not be the case.\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.charToGlyph = function(c) {\n\t    var glyphIndex = this.charToGlyphIndex(c);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\n\t    return glyph;\n\t};\n\n\t/**\n\t * Convert the given text to a list of Glyph objects.\n\t * Note that there is no strict one-to-one mapping between characters and\n\t * glyphs, so the list of returned glyphs can be larger or smaller than the\n\t * length of the given string.\n\t * @param  {string}\n\t * @param  {GlyphRenderOptions} [options]\n\t * @return {opentype.Glyph[]}\n\t */\n\tFont.prototype.stringToGlyphs = function(s, options) {\n\t    var this$1 = this;\n\n\t    options = options || this.defaultRenderOptions;\n\t    // Get glyph indexes\n\t    var chars = arrayFromString(s);\n\t    var indexes = [];\n\t    for (var i = 0; i < chars.length; i += 1) {\n\t        var c = chars[i];\n\t        indexes.push(this$1.charToGlyphIndex(c));\n\t    }\n\t    var length = indexes.length;\n\n\t    // Apply substitutions on glyph indexes\n\t    if (options.features) {\n\t        var script = options.script || this.substitution.getDefaultScriptName();\n\t        var manyToOne = [];\n\t        if (options.features.liga) { manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language)); }\n\t        if (options.features.rlig) { manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language)); }\n\t        for (var i$1 = 0; i$1 < length; i$1 += 1) {\n\t            for (var j = 0; j < manyToOne.length; j++) {\n\t                var ligature = manyToOne[j];\n\t                var components = ligature.sub;\n\t                var compCount = components.length;\n\t                var k = 0;\n\t                while (k < compCount && components[k] === indexes[i$1 + k]) { k++; }\n\t                if (k === compCount) {\n\t                    indexes.splice(i$1, compCount, ligature.by);\n\t                    length = length - compCount + 1;\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    // convert glyph indexes to glyph objects\n\t    var glyphs = new Array(length);\n\t    var notdef = this.glyphs.get(0);\n\t    for (var i$2 = 0; i$2 < length; i$2 += 1) {\n\t        glyphs[i$2] = this$1.glyphs.get(indexes[i$2]) || notdef;\n\t    }\n\t    return glyphs;\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {Number}\n\t */\n\tFont.prototype.nameToGlyphIndex = function(name) {\n\t    return this.glyphNames.nameToGlyphIndex(name);\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {opentype.Glyph}\n\t */\n\tFont.prototype.nameToGlyph = function(name) {\n\t    var glyphIndex = this.nameToGlyphIndex(name);\n\t    var glyph = this.glyphs.get(glyphIndex);\n\t    if (!glyph) {\n\t        // .notdef\n\t        glyph = this.glyphs.get(0);\n\t    }\n\n\t    return glyph;\n\t};\n\n\t/**\n\t * @param  {Number}\n\t * @return {String}\n\t */\n\tFont.prototype.glyphIndexToName = function(gid) {\n\t    if (!this.glyphNames.glyphIndexToName) {\n\t        return '';\n\t    }\n\n\t    return this.glyphNames.glyphIndexToName(gid);\n\t};\n\n\t/**\n\t * Retrieve the value of the kerning pair between the left glyph (or its index)\n\t * and the right glyph (or its index). If no kerning pair is found, return 0.\n\t * The kerning value gets added to the advance width when calculating the spacing\n\t * between glyphs.\n\t * For GPOS kerning, this method uses the default script and language, which covers\n\t * most use cases. To have greater control, use font.position.getKerningValue .\n\t * @param  {opentype.Glyph} leftGlyph\n\t * @param  {opentype.Glyph} rightGlyph\n\t * @return {Number}\n\t */\n\tFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n\t    leftGlyph = leftGlyph.index || leftGlyph;\n\t    rightGlyph = rightGlyph.index || rightGlyph;\n\t    var gposKerning = this.position.defaultKerningTables;\n\t    if (gposKerning) {\n\t        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n\t    }\n\t    // \"kern\" table\n\t    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n\t};\n\n\t/**\n\t * @typedef GlyphRenderOptions\n\t * @type Object\n\t * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n\t *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n\t * @property {string} [language='dflt'] - language system used to determine which features to apply.\n\t *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n\t * @property {boolean} [kerning=true] - whether to include kerning values\n\t * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n\t *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n\t */\n\tFont.prototype.defaultRenderOptions = {\n\t    kerning: true,\n\t    features: {\n\t        liga: true,\n\t        rlig: true\n\t    }\n\t};\n\n\t/**\n\t * Helper function that invokes the given callback for each glyph in the given text.\n\t * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n\t * @param {string} text - The text to apply.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @param  {Function} callback\n\t */\n\tFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n\t    var this$1 = this;\n\n\t    x = x !== undefined ? x : 0;\n\t    y = y !== undefined ? y : 0;\n\t    fontSize = fontSize !== undefined ? fontSize : 72;\n\t    options = options || this.defaultRenderOptions;\n\t    var fontScale = 1 / this.unitsPerEm * fontSize;\n\t    var glyphs = this.stringToGlyphs(text, options);\n\t    var kerningLookups;\n\t    if (options.kerning) {\n\t        var script = options.script || this.position.getDefaultScriptName();\n\t        kerningLookups = this.position.getKerningTables(script, options.language);\n\t    }\n\t    for (var i = 0; i < glyphs.length; i += 1) {\n\t        var glyph = glyphs[i];\n\t        callback.call(this$1, glyph, x, y, fontSize, options);\n\t        if (glyph.advanceWidth) {\n\t            x += glyph.advanceWidth * fontScale;\n\t        }\n\n\t        if (options.kerning && i < glyphs.length - 1) {\n\t            // We should apply position adjustment lookups in a more generic way.\n\t            // Here we only use the xAdvance value.\n\t            var kerningValue = kerningLookups ?\n\t                  this$1.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :\n\t                  this$1.getKerningValue(glyph, glyphs[i + 1]);\n\t            x += kerningValue * fontScale;\n\t        }\n\n\t        if (options.letterSpacing) {\n\t            x += options.letterSpacing * fontSize;\n\t        } else if (options.tracking) {\n\t            x += (options.tracking / 1000) * fontSize;\n\t        }\n\t    }\n\t    return x;\n\t};\n\n\t/**\n\t * Create a Path object that represents the given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path}\n\t */\n\tFont.prototype.getPath = function(text, x, y, fontSize, options) {\n\t    var fullPath = new Path();\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n\t        fullPath.extend(glyphPath);\n\t    });\n\t    return fullPath;\n\t};\n\n\t/**\n\t * Create an array of Path objects that represent the glyphs of a given text.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return {opentype.Path[]}\n\t */\n\tFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n\t    var glyphPaths = [];\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n\t        glyphPaths.push(glyphPath);\n\t    });\n\n\t    return glyphPaths;\n\t};\n\n\t/**\n\t * Returns the advance width of a text.\n\t *\n\t * This is something different than Path.getBoundingBox() as for example a\n\t * suffixed whitespace increases the advanceWidth but not the bounding box\n\t * or an overhanging letter like a calligraphic 'f' might have a quite larger\n\t * bounding box than its advance width.\n\t *\n\t * This corresponds to canvas2dContext.measureText(text).width\n\t *\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t * @return advance width\n\t */\n\tFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n\t    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n\t};\n\n\t/**\n\t * Draw the text on the given drawing context.\n\t * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param  {string} text - The text to create.\n\t * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param  {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n\t    this.getPath(text, x, y, fontSize, options).draw(ctx);\n\t};\n\n\t/**\n\t * Draw the points of all glyphs in the text.\n\t * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawPoints(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\n\t/**\n\t * Draw lines indicating important font measurements for all glyphs in the text.\n\t * Black lines indicate the origin of the coordinate system (point 0,0).\n\t * Blue lines indicate the glyph bounding box.\n\t * Green line indicates the advance width of the glyph.\n\t * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n\t * @param {string} text - The text to create.\n\t * @param {number} [x=0] - Horizontal position of the beginning of the text.\n\t * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n\t * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n\t * @param {GlyphRenderOptions=} options\n\t */\n\tFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n\t    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n\t        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n\t    });\n\t};\n\n\t/**\n\t * @param  {string}\n\t * @return {string}\n\t */\n\tFont.prototype.getEnglishName = function(name) {\n\t    var translations = this.names[name];\n\t    if (translations) {\n\t        return translations.en;\n\t    }\n\t};\n\n\t/**\n\t * Validate\n\t */\n\tFont.prototype.validate = function() {\n\t    var _this = this;\n\n\t    function assert(predicate, message) {\n\t    }\n\n\t    function assertNamePresent(name) {\n\t        var englishName = _this.getEnglishName(name);\n\t        assert(englishName && englishName.trim().length > 0,\n\t               'No English ' + name + ' specified.');\n\t    }\n\n\t    // Identification information\n\t    assertNamePresent('fontFamily');\n\t    assertNamePresent('weightName');\n\t    assertNamePresent('manufacturer');\n\t    assertNamePresent('copyright');\n\t    assertNamePresent('version');\n\n\t    // Dimension information\n\t    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n\t};\n\n\t/**\n\t * Convert the font object to a SFNT data structure.\n\t * This structure contains all the necessary tables and metadata to create a binary OTF file.\n\t * @return {opentype.Table}\n\t */\n\tFont.prototype.toTables = function() {\n\t    return sfnt.fontToTable(this);\n\t};\n\t/**\n\t * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n\t */\n\tFont.prototype.toBuffer = function() {\n\t    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n\t    return this.toArrayBuffer();\n\t};\n\t/**\n\t * Converts a `opentype.Font` into an `ArrayBuffer`\n\t * @return {ArrayBuffer}\n\t */\n\tFont.prototype.toArrayBuffer = function() {\n\t    var sfntTable = this.toTables();\n\t    var bytes = sfntTable.encode();\n\t    var buffer = new ArrayBuffer(bytes.length);\n\t    var intArray = new Uint8Array(buffer);\n\t    for (var i = 0; i < bytes.length; i++) {\n\t        intArray[i] = bytes[i];\n\t    }\n\n\t    return buffer;\n\t};\n\n\t/**\n\t * Initiate a download of the OpenType font.\n\t */\n\tFont.prototype.download = function(fileName) {\n\t    var familyName = this.getEnglishName('fontFamily');\n\t    var styleName = this.getEnglishName('fontSubfamily');\n\t    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n\t    var arrayBuffer = this.toArrayBuffer();\n\n\t    if (isBrowser()) {\n\t        window.URL = window.URL || window.webkitURL;\n\n\t        if (window.URL) {\n\t            var dataView = new DataView(arrayBuffer);\n\t            var blob = new Blob([dataView], {type: 'font/opentype'});\n\n\t            var link = document.createElement('a');\n\t            link.href = window.URL.createObjectURL(blob);\n\t            link.download = fileName;\n\n\t            var event = document.createEvent('MouseEvents');\n\t            event.initEvent('click', true, false);\n\t            link.dispatchEvent(event);\n\t        } else {\n\t            console.warn('Font file could not be downloaded. Try using a different browser.');\n\t        }\n\t    } else {\n\t        var fs = __webpack_require__(/*! fs */ \"?4db5\");\n\t        var buffer = arrayBufferToNodeBuffer(arrayBuffer);\n\t        fs.writeFileSync(fileName, buffer);\n\t    }\n\t};\n\t/**\n\t * @private\n\t */\n\tFont.prototype.fsSelectionValues = {\n\t    ITALIC:              0x001, //1\n\t    UNDERSCORE:          0x002, //2\n\t    NEGATIVE:            0x004, //4\n\t    OUTLINED:            0x008, //8\n\t    STRIKEOUT:           0x010, //16\n\t    BOLD:                0x020, //32\n\t    REGULAR:             0x040, //64\n\t    USER_TYPO_METRICS:   0x080, //128\n\t    WWS:                 0x100, //256\n\t    OBLIQUE:             0x200  //512\n\t};\n\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWidthClasses = {\n\t    ULTRA_CONDENSED: 1,\n\t    EXTRA_CONDENSED: 2,\n\t    CONDENSED: 3,\n\t    SEMI_CONDENSED: 4,\n\t    MEDIUM: 5,\n\t    SEMI_EXPANDED: 6,\n\t    EXPANDED: 7,\n\t    EXTRA_EXPANDED: 8,\n\t    ULTRA_EXPANDED: 9\n\t};\n\n\t/**\n\t * @private\n\t */\n\tFont.prototype.usWeightClasses = {\n\t    THIN: 100,\n\t    EXTRA_LIGHT: 200,\n\t    LIGHT: 300,\n\t    NORMAL: 400,\n\t    MEDIUM: 500,\n\t    SEMI_BOLD: 600,\n\t    BOLD: 700,\n\t    EXTRA_BOLD: 800,\n\t    BLACK:    900\n\t};\n\n\t// The `fvar` table stores font variation axes and instances.\n\n\tfunction addName(name, names) {\n\t    var nameString = JSON.stringify(name);\n\t    var nameID = 256;\n\t    for (var nameKey in names) {\n\t        var n = parseInt(nameKey);\n\t        if (!n || n < 256) {\n\t            continue;\n\t        }\n\n\t        if (JSON.stringify(names[nameKey]) === nameString) {\n\t            return n;\n\t        }\n\n\t        if (nameID <= n) {\n\t            nameID = n + 1;\n\t        }\n\t    }\n\n\t    names[nameID] = name;\n\t    return nameID;\n\t}\n\n\tfunction makeFvarAxis(n, axis, names) {\n\t    var nameID = addName(axis.name, names);\n\t    return [\n\t        {name: 'tag_' + n, type: 'TAG', value: axis.tag},\n\t        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},\n\t        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},\n\t        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0},\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID}\n\t    ];\n\t}\n\n\tfunction parseFvarAxis(data, start, names) {\n\t    var axis = {};\n\t    var p = new parse.Parser(data, start);\n\t    axis.tag = p.parseTag();\n\t    axis.minValue = p.parseFixed();\n\t    axis.defaultValue = p.parseFixed();\n\t    axis.maxValue = p.parseFixed();\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\t    axis.name = names[p.parseUShort()] || {};\n\t    return axis;\n\t}\n\n\tfunction makeFvarInstance(n, inst, axes, names) {\n\t    var nameID = addName(inst.name, names);\n\t    var fields = [\n\t        {name: 'nameID_' + n, type: 'USHORT', value: nameID},\n\t        {name: 'flags_' + n, type: 'USHORT', value: 0}\n\t    ];\n\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        var axisTag = axes[i].tag;\n\t        fields.push({\n\t            name: 'axis_' + n + ' ' + axisTag,\n\t            type: 'FIXED',\n\t            value: inst.coordinates[axisTag] << 16\n\t        });\n\t    }\n\n\t    return fields;\n\t}\n\n\tfunction parseFvarInstance(data, start, axes, names) {\n\t    var inst = {};\n\t    var p = new parse.Parser(data, start);\n\t    inst.name = names[p.parseUShort()] || {};\n\t    p.skip('uShort', 1);  // reserved for flags; no values defined\n\n\t    inst.coordinates = {};\n\t    for (var i = 0; i < axes.length; ++i) {\n\t        inst.coordinates[axes[i].tag] = p.parseFixed();\n\t    }\n\n\t    return inst;\n\t}\n\n\tfunction makeFvarTable(fvar, names) {\n\t    var result = new table.Table('fvar', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'offsetToData', type: 'USHORT', value: 0},\n\t        {name: 'countSizePairs', type: 'USHORT', value: 2},\n\t        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},\n\t        {name: 'axisSize', type: 'USHORT', value: 20},\n\t        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},\n\t        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}\n\t    ]);\n\t    result.offsetToData = result.sizeOf();\n\n\t    for (var i = 0; i < fvar.axes.length; i++) {\n\t        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));\n\t    }\n\n\t    for (var j = 0; j < fvar.instances.length; j++) {\n\t        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction parseFvarTable(data, start, names) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseULong();\n\t    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');\n\t    var offsetToData = p.parseOffset16();\n\t    // Skip countSizePairs.\n\t    p.skip('uShort', 1);\n\t    var axisCount = p.parseUShort();\n\t    var axisSize = p.parseUShort();\n\t    var instanceCount = p.parseUShort();\n\t    var instanceSize = p.parseUShort();\n\n\t    var axes = [];\n\t    for (var i = 0; i < axisCount; i++) {\n\t        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n\t    }\n\n\t    var instances = [];\n\t    var instanceStart = start + offsetToData + axisCount * axisSize;\n\t    for (var j = 0; j < instanceCount; j++) {\n\t        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n\t    }\n\n\t    return {axes: axes, instances: instances};\n\t}\n\n\tvar fvar = { make: makeFvarTable, parse: parseFvarTable };\n\n\t// The `GPOS` table contains kerning pairs, among other things.\n\n\tvar subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable\n\t// this = Parser instance\n\tsubtableParsers$1[1] = function parseLookup1() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var posformat = this.parseUShort();\n\t    if (posformat === 1) {\n\t        return {\n\t            posFormat: 1,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            value: this.parseValueRecord()\n\t        };\n\t    } else if (posformat === 2) {\n\t        return {\n\t            posFormat: 2,\n\t            coverage: this.parsePointer(Parser.coverage),\n\t            values: this.parseValueRecordList()\n\t        };\n\t    }\n\t    check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');\n\t};\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable\n\tsubtableParsers$1[2] = function parseLookup2() {\n\t    var start = this.offset + this.relativeOffset;\n\t    var posFormat = this.parseUShort();\n\t    check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');\n\t    var coverage = this.parsePointer(Parser.coverage);\n\t    var valueFormat1 = this.parseUShort();\n\t    var valueFormat2 = this.parseUShort();\n\t    if (posFormat === 1) {\n\t        // Adjustments for Glyph Pairs\n\t        return {\n\t            posFormat: posFormat,\n\t            coverage: coverage,\n\t            valueFormat1: valueFormat1,\n\t            valueFormat2: valueFormat2,\n\t            pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n\t                return {        // pairValueRecord\n\t                    secondGlyph: this.parseUShort(),\n\t                    value1: this.parseValueRecord(valueFormat1),\n\t                    value2: this.parseValueRecord(valueFormat2)\n\t                };\n\t            })))\n\t        };\n\t    } else if (posFormat === 2) {\n\t        var classDef1 = this.parsePointer(Parser.classDef);\n\t        var classDef2 = this.parsePointer(Parser.classDef);\n\t        var class1Count = this.parseUShort();\n\t        var class2Count = this.parseUShort();\n\t        return {\n\t            // Class Pair Adjustment\n\t            posFormat: posFormat,\n\t            coverage: coverage,\n\t            valueFormat1: valueFormat1,\n\t            valueFormat2: valueFormat2,\n\t            classDef1: classDef1,\n\t            classDef2: classDef2,\n\t            class1Count: class1Count,\n\t            class2Count: class2Count,\n\t            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n\t                return {\n\t                    value1: this.parseValueRecord(valueFormat1),\n\t                    value2: this.parseValueRecord(valueFormat2)\n\t                };\n\t            }))\n\t        };\n\t    }\n\t};\n\n\tsubtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };\n\tsubtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };\n\tsubtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };\n\tsubtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };\n\tsubtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };\n\tsubtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };\n\tsubtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };\n\n\t// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos\n\tfunction parseGposTable(data, start) {\n\t    start = start || 0;\n\t    var p = new Parser(data, start);\n\t    var tableVersion = p.parseVersion(1);\n\t    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);\n\n\t    if (tableVersion === 1) {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers$1)\n\t        };\n\t    } else {\n\t        return {\n\t            version: tableVersion,\n\t            scripts: p.parseScriptList(),\n\t            features: p.parseFeatureList(),\n\t            lookups: p.parseLookupList(subtableParsers$1),\n\t            variations: p.parseFeatureVariationsList()\n\t        };\n\t    }\n\n\t}\n\n\t// GPOS Writing //////////////////////////////////////////////\n\t// NOT SUPPORTED\n\tvar subtableMakers$1 = new Array(10);\n\n\tfunction makeGposTable(gpos) {\n\t    return new table.Table('GPOS', [\n\t        {name: 'version', type: 'ULONG', value: 0x10000},\n\t        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},\n\t        {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},\n\t        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}\n\t    ]);\n\t}\n\n\tvar gpos = { parse: parseGposTable, make: makeGposTable };\n\n\t// The `kern` table contains kerning pairs.\n\n\tfunction parseWindowsKernTable(p) {\n\t    var pairs = {};\n\t    // Skip nTables.\n\t    p.skip('uShort');\n\t    var subtableVersion = p.parseUShort();\n\t    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n\t    // Skip subtableLength, subtableCoverage\n\t    p.skip('uShort', 2);\n\t    var nPairs = p.parseUShort();\n\t    // Skip searchRange, entrySelector, rangeShift.\n\t    p.skip('uShort', 3);\n\t    for (var i = 0; i < nPairs; i += 1) {\n\t        var leftIndex = p.parseUShort();\n\t        var rightIndex = p.parseUShort();\n\t        var value = p.parseShort();\n\t        pairs[leftIndex + ',' + rightIndex] = value;\n\t    }\n\t    return pairs;\n\t}\n\n\tfunction parseMacKernTable(p) {\n\t    var pairs = {};\n\t    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n\t    // Skip the rest.\n\t    p.skip('uShort');\n\t    var nTables = p.parseULong();\n\t    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n\t    if (nTables > 1) {\n\t        console.warn('Only the first kern subtable is supported.');\n\t    }\n\t    p.skip('uLong');\n\t    var coverage = p.parseUShort();\n\t    var subtableVersion = coverage & 0xFF;\n\t    p.skip('uShort');\n\t    if (subtableVersion === 0) {\n\t        var nPairs = p.parseUShort();\n\t        // Skip searchRange, entrySelector, rangeShift.\n\t        p.skip('uShort', 3);\n\t        for (var i = 0; i < nPairs; i += 1) {\n\t            var leftIndex = p.parseUShort();\n\t            var rightIndex = p.parseUShort();\n\t            var value = p.parseShort();\n\t            pairs[leftIndex + ',' + rightIndex] = value;\n\t        }\n\t    }\n\t    return pairs;\n\t}\n\n\t// Parse the `kern` table which contains kerning pairs.\n\tfunction parseKernTable(data, start) {\n\t    var p = new parse.Parser(data, start);\n\t    var tableVersion = p.parseUShort();\n\t    if (tableVersion === 0) {\n\t        return parseWindowsKernTable(p);\n\t    } else if (tableVersion === 1) {\n\t        return parseMacKernTable(p);\n\t    } else {\n\t        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n\t    }\n\t}\n\n\tvar kern = { parse: parseKernTable };\n\n\t// The `loca` table stores the offsets to the locations of the glyphs in the font.\n\n\t// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n\t// relative to the beginning of the glyphData table.\n\t// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n\t// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n\t// version where offsets are stored as uLongs. The `head` table specifies which version to use\n\t// (under indexToLocFormat).\n\tfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n\t    var p = new parse.Parser(data, start);\n\t    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n\t    // There is an extra entry after the last index element to compute the length of the last glyph.\n\t    // That's why we use numGlyphs + 1.\n\t    var glyphOffsets = [];\n\t    for (var i = 0; i < numGlyphs + 1; i += 1) {\n\t        var glyphOffset = parseFn.call(p);\n\t        if (shortVersion) {\n\t            // The short table version stores the actual offset divided by 2.\n\t            glyphOffset *= 2;\n\t        }\n\n\t        glyphOffsets.push(glyphOffset);\n\t    }\n\n\t    return glyphOffsets;\n\t}\n\n\tvar loca = { parse: parseLocaTable };\n\n\t// opentype.js\n\n\t/**\n\t * The opentype library.\n\t * @namespace opentype\n\t */\n\n\t// File loaders /////////////////////////////////////////////////////////\n\t/**\n\t * Loads a font from a file. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} path - The path of the file\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromFile(path, callback) {\n\t    var fs = __webpack_require__(/*! fs */ \"?4db5\");\n\t    fs.readFile(path, function(err, buffer) {\n\t        if (err) {\n\t            return callback(err.message);\n\t        }\n\n\t        callback(null, nodeBufferToArrayBuffer(buffer));\n\t    });\n\t}\n\t/**\n\t * Loads a font from a URL. The callback throws an error message as the first parameter if it fails\n\t * and the font as an ArrayBuffer in the second parameter if it succeeds.\n\t * @param  {string} url - The URL of the font file.\n\t * @param  {Function} callback - The function to call when the font load completes\n\t */\n\tfunction loadFromUrl(url, callback) {\n\t    var request = new XMLHttpRequest();\n\t    request.open('get', url, true);\n\t    request.responseType = 'arraybuffer';\n\t    request.onload = function() {\n\t        if (request.response) {\n\t            return callback(null, request.response);\n\t        } else {\n\t            return callback('Font could not be loaded: ' + request.statusText);\n\t        }\n\t    };\n\n\t    request.onerror = function () {\n\t        callback('Font could not be loaded');\n\t    };\n\n\t    request.send();\n\t}\n\n\t// Table Directory Entries //////////////////////////////////////////////\n\t/**\n\t * Parses OpenType table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseOpenTypeTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 12;\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var checksum = parse.getULong(data, p + 4);\n\t        var offset = parse.getULong(data, p + 8);\n\t        var length = parse.getULong(data, p + 12);\n\t        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});\n\t        p += 16;\n\t    }\n\n\t    return tableEntries;\n\t}\n\n\t/**\n\t * Parses WOFF table entries.\n\t * @param  {DataView}\n\t * @param  {Number}\n\t * @return {Object[]}\n\t */\n\tfunction parseWOFFTableEntries(data, numTables) {\n\t    var tableEntries = [];\n\t    var p = 44; // offset to the first table directory entry.\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tag = parse.getTag(data, p);\n\t        var offset = parse.getULong(data, p + 4);\n\t        var compLength = parse.getULong(data, p + 8);\n\t        var origLength = parse.getULong(data, p + 12);\n\t        var compression = (void 0);\n\t        if (compLength < origLength) {\n\t            compression = 'WOFF';\n\t        } else {\n\t            compression = false;\n\t        }\n\n\t        tableEntries.push({tag: tag, offset: offset, compression: compression,\n\t            compressedLength: compLength, length: origLength});\n\t        p += 20;\n\t    }\n\n\t    return tableEntries;\n\t}\n\n\t/**\n\t * @typedef TableData\n\t * @type Object\n\t * @property {DataView} data - The DataView\n\t * @property {number} offset - The data offset.\n\t */\n\n\t/**\n\t * @param  {DataView}\n\t * @param  {Object}\n\t * @return {TableData}\n\t */\n\tfunction uncompressTable(data, tableEntry) {\n\t    if (tableEntry.compression === 'WOFF') {\n\t        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n\t        var outBuffer = new Uint8Array(tableEntry.length);\n\t        tinyInflate(inBuffer, outBuffer);\n\t        if (outBuffer.byteLength !== tableEntry.length) {\n\t            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\\'t match recorded length');\n\t        }\n\n\t        var view = new DataView(outBuffer.buffer, 0);\n\t        return {data: view, offset: 0};\n\t    } else {\n\t        return {data: data, offset: tableEntry.offset};\n\t    }\n\t}\n\n\t// Public API ///////////////////////////////////////////////////////////\n\n\t/**\n\t * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n\t * Throws an error if the font could not be parsed.\n\t * @param  {ArrayBuffer}\n\t * @return {opentype.Font}\n\t */\n\tfunction parseBuffer(buffer) {\n\t    var indexToLocFormat;\n\t    var ltagTable;\n\n\t    // Since the constructor can also be called to create new fonts from scratch, we indicate this\n\t    // should be an empty font that we'll fill with our own data.\n\t    var font = new Font({empty: true});\n\n\t    // OpenType fonts use big endian byte ordering.\n\t    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n\t    // Instead we use DataViews where we can specify endianness.\n\t    var data = new DataView(buffer, 0);\n\t    var numTables;\n\t    var tableEntries = [];\n\t    var signature = parse.getTag(data, 0);\n\t    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {\n\t        font.outlinesFormat = 'truetype';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'OTTO') {\n\t        font.outlinesFormat = 'cff';\n\t        numTables = parse.getUShort(data, 4);\n\t        tableEntries = parseOpenTypeTableEntries(data, numTables);\n\t    } else if (signature === 'wOFF') {\n\t        var flavor = parse.getTag(data, 4);\n\t        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n\t            font.outlinesFormat = 'truetype';\n\t        } else if (flavor === 'OTTO') {\n\t            font.outlinesFormat = 'cff';\n\t        } else {\n\t            throw new Error('Unsupported OpenType flavor ' + signature);\n\t        }\n\n\t        numTables = parse.getUShort(data, 12);\n\t        tableEntries = parseWOFFTableEntries(data, numTables);\n\t    } else {\n\t        throw new Error('Unsupported OpenType signature ' + signature);\n\t    }\n\n\t    var cffTableEntry;\n\t    var fvarTableEntry;\n\t    var glyfTableEntry;\n\t    var gposTableEntry;\n\t    var gsubTableEntry;\n\t    var hmtxTableEntry;\n\t    var kernTableEntry;\n\t    var locaTableEntry;\n\t    var nameTableEntry;\n\t    var metaTableEntry;\n\t    var p;\n\n\t    for (var i = 0; i < numTables; i += 1) {\n\t        var tableEntry = tableEntries[i];\n\t        var table = (void 0);\n\t        switch (tableEntry.tag) {\n\t            case 'cmap':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.cmap = cmap.parse(table.data, table.offset);\n\t                font.encoding = new CmapEncoding(font.tables.cmap);\n\t                break;\n\t            case 'cvt ' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n\t                break;\n\t            case 'fvar':\n\t                fvarTableEntry = tableEntry;\n\t                break;\n\t            case 'fpgm' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.fpgm = p.parseByteList(tableEntry.length);\n\t                break;\n\t            case 'head':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.head = head.parse(table.data, table.offset);\n\t                font.unitsPerEm = font.tables.head.unitsPerEm;\n\t                indexToLocFormat = font.tables.head.indexToLocFormat;\n\t                break;\n\t            case 'hhea':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.hhea = hhea.parse(table.data, table.offset);\n\t                font.ascender = font.tables.hhea.ascender;\n\t                font.descender = font.tables.hhea.descender;\n\t                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n\t                break;\n\t            case 'hmtx':\n\t                hmtxTableEntry = tableEntry;\n\t                break;\n\t            case 'ltag':\n\t                table = uncompressTable(data, tableEntry);\n\t                ltagTable = ltag.parse(table.data, table.offset);\n\t                break;\n\t            case 'maxp':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.maxp = maxp.parse(table.data, table.offset);\n\t                font.numGlyphs = font.tables.maxp.numGlyphs;\n\t                break;\n\t            case 'name':\n\t                nameTableEntry = tableEntry;\n\t                break;\n\t            case 'OS/2':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.os2 = os2.parse(table.data, table.offset);\n\t                break;\n\t            case 'post':\n\t                table = uncompressTable(data, tableEntry);\n\t                font.tables.post = post.parse(table.data, table.offset);\n\t                font.glyphNames = new GlyphNames(font.tables.post);\n\t                break;\n\t            case 'prep' :\n\t                table = uncompressTable(data, tableEntry);\n\t                p = new parse.Parser(table.data, table.offset);\n\t                font.tables.prep = p.parseByteList(tableEntry.length);\n\t                break;\n\t            case 'glyf':\n\t                glyfTableEntry = tableEntry;\n\t                break;\n\t            case 'loca':\n\t                locaTableEntry = tableEntry;\n\t                break;\n\t            case 'CFF ':\n\t                cffTableEntry = tableEntry;\n\t                break;\n\t            case 'kern':\n\t                kernTableEntry = tableEntry;\n\t                break;\n\t            case 'GPOS':\n\t                gposTableEntry = tableEntry;\n\t                break;\n\t            case 'GSUB':\n\t                gsubTableEntry = tableEntry;\n\t                break;\n\t            case 'meta':\n\t                metaTableEntry = tableEntry;\n\t                break;\n\t        }\n\t    }\n\n\t    var nameTable = uncompressTable(data, nameTableEntry);\n\t    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);\n\t    font.names = font.tables.name;\n\n\t    if (glyfTableEntry && locaTableEntry) {\n\t        var shortVersion = indexToLocFormat === 0;\n\t        var locaTable = uncompressTable(data, locaTableEntry);\n\t        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n\t        var glyfTable = uncompressTable(data, glyfTableEntry);\n\t        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);\n\t    } else if (cffTableEntry) {\n\t        var cffTable = uncompressTable(data, cffTableEntry);\n\t        cff.parse(cffTable.data, cffTable.offset, font);\n\t    } else {\n\t        throw new Error('Font doesn\\'t contain TrueType or CFF outlines.');\n\t    }\n\n\t    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n\t    hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n\t    addGlyphNames(font);\n\n\t    if (kernTableEntry) {\n\t        var kernTable = uncompressTable(data, kernTableEntry);\n\t        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n\t    } else {\n\t        font.kerningPairs = {};\n\t    }\n\n\t    if (gposTableEntry) {\n\t        var gposTable = uncompressTable(data, gposTableEntry);\n\t        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n\t        font.position.init();\n\t    }\n\n\t    if (gsubTableEntry) {\n\t        var gsubTable = uncompressTable(data, gsubTableEntry);\n\t        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n\t    }\n\n\t    if (fvarTableEntry) {\n\t        var fvarTable = uncompressTable(data, fvarTableEntry);\n\t        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n\t    }\n\n\t    if (metaTableEntry) {\n\t        var metaTable = uncompressTable(data, metaTableEntry);\n\t        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n\t        font.metas = font.tables.meta;\n\t    }\n\n\t    return font;\n\t}\n\n\t/**\n\t * Asynchronously load the font from a URL or a filesystem. When done, call the callback\n\t * with two arguments `(err, font)`. The `err` will be null on success,\n\t * the `font` is a Font object.\n\t * We use the node.js callback convention so that\n\t * opentype.js can integrate with frameworks like async.js.\n\t * @alias opentype.load\n\t * @param  {string} url - The URL of the font to load.\n\t * @param  {Function} callback - The callback.\n\t */\n\tfunction load(url, callback) {\n\t    var isNode$$1 = typeof window === 'undefined';\n\t    var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;\n\t    loadFn(url, function(err, arrayBuffer) {\n\t        if (err) {\n\t            return callback(err);\n\t        }\n\t        var font;\n\t        try {\n\t            font = parseBuffer(arrayBuffer);\n\t        } catch (e) {\n\t            return callback(e, null);\n\t        }\n\t        return callback(null, font);\n\t    });\n\t}\n\n\t/**\n\t * Synchronously load the font from a URL or file.\n\t * When done, returns the font object or throws an error.\n\t * @alias opentype.loadSync\n\t * @param  {string} url - The URL of the font to load.\n\t * @return {opentype.Font}\n\t */\n\tfunction loadSync(url) {\n\t    var fs = __webpack_require__(/*! fs */ \"?4db5\");\n\t    var buffer = fs.readFileSync(url);\n\t    return parseBuffer(nodeBufferToArrayBuffer(buffer));\n\t}\n\n\texports.Font = Font;\n\texports.Glyph = Glyph;\n\texports.Path = Path;\n\texports.BoundingBox = BoundingBox;\n\texports._parse = parse;\n\texports.parse = parseBuffer;\n\texports.load = load;\n\texports.loadSync = loadSync;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=opentype.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/opentype.js/dist/opentype.js\n");

/***/ }),

/***/ "./extensions/PDF/textlayer.css":
/*!**************************************!*\
  !*** ./extensions/PDF/textlayer.css ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_textlayer_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!../../node_modules/css-unicode-loader/index.js!../../node_modules/sass-loader/dist/cjs.js!./textlayer.css */ \"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[6].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/PDF/textlayer.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_textlayer_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_textlayer_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_textlayer_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_6_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_textlayer_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL1BERi90ZXh0bGF5ZXIuY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE1BQWtHO0FBQ2xHLE1BQXdGO0FBQ3hGLE1BQStGO0FBQy9GLE1BQWtIO0FBQ2xILE1BQTJHO0FBQzNHLE1BQTJHO0FBQzNHLE1BQTBTO0FBQzFTO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLHFHQUFtQjtBQUMvQyx3QkFBd0Isa0hBQWE7O0FBRXJDLHVCQUF1Qix1R0FBYTtBQUNwQztBQUNBLGlCQUFpQiwrRkFBTTtBQUN2Qiw2QkFBNkIsc0dBQWtCOztBQUUvQyxhQUFhLDBHQUFHLENBQUMsZ1FBQU87Ozs7QUFJb1A7QUFDNVEsT0FBTyxpRUFBZSxnUUFBTyxJQUFJLGdRQUFPLFVBQVUsZ1FBQU8sbUJBQW1CLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9QREYvdGV4dGxheWVyLmNzcz80YzE5Il0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy11bmljb2RlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90ZXh0bGF5ZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s2XS51c2VbMl0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy11bmljb2RlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90ZXh0bGF5ZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/PDF/textlayer.css\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcz9lNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "./res/fonts/font-list.js":
/*!********************************!*\
  !*** ./res/fonts/font-list.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FONT_LIST: () => (/* binding */ FONT_LIST),\n/* harmony export */   ONDEMAND_FONT_LIST: () => (/* binding */ ONDEMAND_FONT_LIST)\n/* harmony export */ });\nlet FONT_LIST = [\n\n    //Metrically compatible to Arial\n    //https://fonts.google.com/specimen/Arimo\n    {\n        name: \"Arimo\",\n        url: \"res/fonts/arimo-v29-latin_latin-ext-regular.woff\",\n        subs: [\"arial\", \"arialmt\", \"helvetica\", \"sans serif\", \"sans-serif\"]\n    },\n\n    //Metrically compatible to Times\n    //https://fonts.google.com/specimen/Tinos\n    {\n        name: \"Tinos\",\n        url: \"res/fonts/tinos-v24-latin_latin-ext-regular.woff\",\n        subs: [\"times\", \"serif\"]\n    },\n\n    //Metrically compatible to Courier\n    //https://fonts.google.com/specimen/Cousine\n    {\n        name: \"Cousine\",\n        url: \"res/fonts/cousine-v27-latin_latin-ext-regular.woff\",\n        subs: [\"courier\", \"monospace\"]\n    },\n\n    // taken from pdf.js, which in turn got it from PDFium, and then converted from raw CFF to WOFF. I also fixed the missing cmap.\n    // https://github.com/mozilla/pdf.js/blob/4c1dd47e65ae66135c6d9a55774a99a8066fbf37/external/standard_fonts/FoxitDingbats.pfb\n    // The original licence file is \"res/fonts/LICENSE_FOXIT\"\n    {\n        name: \"FoxitDingbats\",\n        url: \"res/fonts/FoxitDingbats.woff\",\n        subs: [\"zapfdingbats\", \"dingbats\"]\n    },\n    // taken from pdf.js, which in turn got it from PDFium, and then converted from raw CFF to WOFF. I also fixed the missing cmap.\n    // https://github.com/mozilla/pdf.js/blob/4c1dd47e65ae66135c6d9a55774a99a8066fbf37/external/standard_fonts/FoxitSymbol.pfb\n    // The original licence file is \"res/fonts/LICENSE_FOXIT\"\n    {\n        name: \"FoxitSymbol\",\n        url: \"res/fonts/FoxitSymbol.woff\",\n        subs: [\"symbol\"]\n    }\n];\n\n// These are large font files that we do not want to load by default.\n// These will get loaded only if the font is required.\nlet ONDEMAND_FONT_LIST = [\n    // https://fonts.google.com/specimen/Noto+Sans+SC\n    // https://fonts.google.com/specimen/Noto+Sans+TC\n    // https://fonts.google.com/specimen/Noto+Sans+JP\n    // License: SIL Open Font License (OFL) https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL\n    // The licenses for NotoSansSC, NotoSansTC, and NotoSansJP exist in the res/fonts folder in OFL.txt.\n    {\n        name: 'NotoSansSC',\n        url: 'res/fonts/NotoSansSC-Regular.otf',\n        subs: ['microsoftyahei', 'simsun'],\n    },\n    {\n        name: 'NotoSansTC',\n        url: 'res/fonts/NotoSansTC-Regular.otf',\n        subs: ['microsoftmingliu', 'mingliu', 'bcdeee+dfkaishu-sb-estd-bf', 'bcdeee+dfkaishu-sb-estd'],\n    },\n    // Japanese font replacements\n    // 'hirakakupron-w3', 'kozminpr6n-regular' have been seen in actual documents (BLMV-7717, BLMV-7846)\n    // 'kozgopr6n-medium', 'adobegothicstd-bold' are two Adobe standard fonts that are apparently used by default when using Japanese characters in text comments\n    // 'arialunicodems' is used by FoxIt Reader (simsun as well, but that is covered already)\n    // 'ms-gothic', 'ms-mincho', 'meiryo', 'yugo-bold' are popular fonts or have been seen otherwise and added here for completeness\n    {\n        name: 'NotoSansJP',\n        url: 'res/fonts/NotoSansJP-Regular.otf',\n        subs: ['hirakakupron-w3', 'kozminpr6n-regular', 'kozgopr6n-medium', 'adobegothicstd-bold', 'arialunicodems', 'ms-gothic', 'msgothic', 'ms-mincho', 'msmincho', 'meiryo', 'yugo-bold'],\n    },\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXMvZm9udHMvZm9udC1saXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vcmVzL2ZvbnRzL2ZvbnQtbGlzdC5qcz82YjJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgRk9OVF9MSVNUID0gW1xuXG4gICAgLy9NZXRyaWNhbGx5IGNvbXBhdGlibGUgdG8gQXJpYWxcbiAgICAvL2h0dHBzOi8vZm9udHMuZ29vZ2xlLmNvbS9zcGVjaW1lbi9Bcmltb1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJBcmltb1wiLFxuICAgICAgICB1cmw6IFwicmVzL2ZvbnRzL2FyaW1vLXYyOS1sYXRpbl9sYXRpbi1leHQtcmVndWxhci53b2ZmXCIsXG4gICAgICAgIHN1YnM6IFtcImFyaWFsXCIsIFwiYXJpYWxtdFwiLCBcImhlbHZldGljYVwiLCBcInNhbnMgc2VyaWZcIiwgXCJzYW5zLXNlcmlmXCJdXG4gICAgfSxcblxuICAgIC8vTWV0cmljYWxseSBjb21wYXRpYmxlIHRvIFRpbWVzXG4gICAgLy9odHRwczovL2ZvbnRzLmdvb2dsZS5jb20vc3BlY2ltZW4vVGlub3NcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVGlub3NcIixcbiAgICAgICAgdXJsOiBcInJlcy9mb250cy90aW5vcy12MjQtbGF0aW5fbGF0aW4tZXh0LXJlZ3VsYXIud29mZlwiLFxuICAgICAgICBzdWJzOiBbXCJ0aW1lc1wiLCBcInNlcmlmXCJdXG4gICAgfSxcblxuICAgIC8vTWV0cmljYWxseSBjb21wYXRpYmxlIHRvIENvdXJpZXJcbiAgICAvL2h0dHBzOi8vZm9udHMuZ29vZ2xlLmNvbS9zcGVjaW1lbi9Db3VzaW5lXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNvdXNpbmVcIixcbiAgICAgICAgdXJsOiBcInJlcy9mb250cy9jb3VzaW5lLXYyNy1sYXRpbl9sYXRpbi1leHQtcmVndWxhci53b2ZmXCIsXG4gICAgICAgIHN1YnM6IFtcImNvdXJpZXJcIiwgXCJtb25vc3BhY2VcIl1cbiAgICB9LFxuXG4gICAgLy8gdGFrZW4gZnJvbSBwZGYuanMsIHdoaWNoIGluIHR1cm4gZ290IGl0IGZyb20gUERGaXVtLCBhbmQgdGhlbiBjb252ZXJ0ZWQgZnJvbSByYXcgQ0ZGIHRvIFdPRkYuIEkgYWxzbyBmaXhlZCB0aGUgbWlzc2luZyBjbWFwLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3BkZi5qcy9ibG9iLzRjMWRkNDdlNjVhZTY2MTM1YzZkOWE1NTc3NGE5OWE4MDY2ZmJmMzcvZXh0ZXJuYWwvc3RhbmRhcmRfZm9udHMvRm94aXREaW5nYmF0cy5wZmJcbiAgICAvLyBUaGUgb3JpZ2luYWwgbGljZW5jZSBmaWxlIGlzIFwicmVzL2ZvbnRzL0xJQ0VOU0VfRk9YSVRcIlxuICAgIHtcbiAgICAgICAgbmFtZTogXCJGb3hpdERpbmdiYXRzXCIsXG4gICAgICAgIHVybDogXCJyZXMvZm9udHMvRm94aXREaW5nYmF0cy53b2ZmXCIsXG4gICAgICAgIHN1YnM6IFtcInphcGZkaW5nYmF0c1wiLCBcImRpbmdiYXRzXCJdXG4gICAgfSxcbiAgICAvLyB0YWtlbiBmcm9tIHBkZi5qcywgd2hpY2ggaW4gdHVybiBnb3QgaXQgZnJvbSBQREZpdW0sIGFuZCB0aGVuIGNvbnZlcnRlZCBmcm9tIHJhdyBDRkYgdG8gV09GRi4gSSBhbHNvIGZpeGVkIHRoZSBtaXNzaW5nIGNtYXAuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcGRmLmpzL2Jsb2IvNGMxZGQ0N2U2NWFlNjYxMzVjNmQ5YTU1Nzc0YTk5YTgwNjZmYmYzNy9leHRlcm5hbC9zdGFuZGFyZF9mb250cy9Gb3hpdFN5bWJvbC5wZmJcbiAgICAvLyBUaGUgb3JpZ2luYWwgbGljZW5jZSBmaWxlIGlzIFwicmVzL2ZvbnRzL0xJQ0VOU0VfRk9YSVRcIlxuICAgIHtcbiAgICAgICAgbmFtZTogXCJGb3hpdFN5bWJvbFwiLFxuICAgICAgICB1cmw6IFwicmVzL2ZvbnRzL0ZveGl0U3ltYm9sLndvZmZcIixcbiAgICAgICAgc3ViczogW1wic3ltYm9sXCJdXG4gICAgfVxuXTtcblxuLy8gVGhlc2UgYXJlIGxhcmdlIGZvbnQgZmlsZXMgdGhhdCB3ZSBkbyBub3Qgd2FudCB0byBsb2FkIGJ5IGRlZmF1bHQuXG4vLyBUaGVzZSB3aWxsIGdldCBsb2FkZWQgb25seSBpZiB0aGUgZm9udCBpcyByZXF1aXJlZC5cbmV4cG9ydCBsZXQgT05ERU1BTkRfRk9OVF9MSVNUID0gW1xuICAgIC8vIGh0dHBzOi8vZm9udHMuZ29vZ2xlLmNvbS9zcGVjaW1lbi9Ob3RvK1NhbnMrU0NcbiAgICAvLyBodHRwczovL2ZvbnRzLmdvb2dsZS5jb20vc3BlY2ltZW4vTm90bytTYW5zK1RDXG4gICAgLy8gaHR0cHM6Ly9mb250cy5nb29nbGUuY29tL3NwZWNpbWVuL05vdG8rU2FucytKUFxuICAgIC8vIExpY2Vuc2U6IFNJTCBPcGVuIEZvbnQgTGljZW5zZSAoT0ZMKSBodHRwczovL3NjcmlwdHMuc2lsLm9yZy9jbXMvc2NyaXB0cy9wYWdlLnBocD9zaXRlX2lkPW5yc2kmaWQ9T0ZMXG4gICAgLy8gVGhlIGxpY2Vuc2VzIGZvciBOb3RvU2Fuc1NDLCBOb3RvU2Fuc1RDLCBhbmQgTm90b1NhbnNKUCBleGlzdCBpbiB0aGUgcmVzL2ZvbnRzIGZvbGRlciBpbiBPRkwudHh0LlxuICAgIHtcbiAgICAgICAgbmFtZTogJ05vdG9TYW5zU0MnLFxuICAgICAgICB1cmw6ICdyZXMvZm9udHMvTm90b1NhbnNTQy1SZWd1bGFyLm90ZicsXG4gICAgICAgIHN1YnM6IFsnbWljcm9zb2Z0eWFoZWknLCAnc2ltc3VuJ10sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdOb3RvU2Fuc1RDJyxcbiAgICAgICAgdXJsOiAncmVzL2ZvbnRzL05vdG9TYW5zVEMtUmVndWxhci5vdGYnLFxuICAgICAgICBzdWJzOiBbJ21pY3Jvc29mdG1pbmdsaXUnLCAnbWluZ2xpdScsICdiY2RlZWUrZGZrYWlzaHUtc2ItZXN0ZC1iZicsICdiY2RlZWUrZGZrYWlzaHUtc2ItZXN0ZCddLFxuICAgIH0sXG4gICAgLy8gSmFwYW5lc2UgZm9udCByZXBsYWNlbWVudHNcbiAgICAvLyAnaGlyYWtha3Vwcm9uLXczJywgJ2tvem1pbnByNm4tcmVndWxhcicgaGF2ZSBiZWVuIHNlZW4gaW4gYWN0dWFsIGRvY3VtZW50cyAoQkxNVi03NzE3LCBCTE1WLTc4NDYpXG4gICAgLy8gJ2tvemdvcHI2bi1tZWRpdW0nLCAnYWRvYmVnb3RoaWNzdGQtYm9sZCcgYXJlIHR3byBBZG9iZSBzdGFuZGFyZCBmb250cyB0aGF0IGFyZSBhcHBhcmVudGx5IHVzZWQgYnkgZGVmYXVsdCB3aGVuIHVzaW5nIEphcGFuZXNlIGNoYXJhY3RlcnMgaW4gdGV4dCBjb21tZW50c1xuICAgIC8vICdhcmlhbHVuaWNvZGVtcycgaXMgdXNlZCBieSBGb3hJdCBSZWFkZXIgKHNpbXN1biBhcyB3ZWxsLCBidXQgdGhhdCBpcyBjb3ZlcmVkIGFscmVhZHkpXG4gICAgLy8gJ21zLWdvdGhpYycsICdtcy1taW5jaG8nLCAnbWVpcnlvJywgJ3l1Z28tYm9sZCcgYXJlIHBvcHVsYXIgZm9udHMgb3IgaGF2ZSBiZWVuIHNlZW4gb3RoZXJ3aXNlIGFuZCBhZGRlZCBoZXJlIGZvciBjb21wbGV0ZW5lc3NcbiAgICB7XG4gICAgICAgIG5hbWU6ICdOb3RvU2Fuc0pQJyxcbiAgICAgICAgdXJsOiAncmVzL2ZvbnRzL05vdG9TYW5zSlAtUmVndWxhci5vdGYnLFxuICAgICAgICBzdWJzOiBbJ2hpcmFrYWt1cHJvbi13MycsICdrb3ptaW5wcjZuLXJlZ3VsYXInLCAna296Z29wcjZuLW1lZGl1bScsICdhZG9iZWdvdGhpY3N0ZC1ib2xkJywgJ2FyaWFsdW5pY29kZW1zJywgJ21zLWdvdGhpYycsICdtc2dvdGhpYycsICdtcy1taW5jaG8nLCAnbXNtaW5jaG8nLCAnbWVpcnlvJywgJ3l1Z28tYm9sZCddLFxuICAgIH0sXG5dO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./res/fonts/font-list.js\n");

/***/ }),

/***/ "?97a1":
/*!************************!*\
  !*** canvas (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?6e49":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0b3b":
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?bfb0":
/*!***********************!*\
  !*** https (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?a42f":
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?331b":
/*!**********************!*\
  !*** zlib (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4db5":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./extensions/PDF/index.js");
/******/ 	Autodesk.Extensions.PDF = __webpack_exports__;
/******/ 	
/******/ })()
;